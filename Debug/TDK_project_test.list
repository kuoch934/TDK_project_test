
TDK_project_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fd84  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  08010054  08010054  00020054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080103bc  080103bc  000203bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000014  080103c4  080103c4  000203c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080103d8  080103d8  000203d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000b0  24000000  080103dc  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002094  240000b0  0801048c  000300b0  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24002144  0801048c  00032144  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000300de  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002ade4  00000000  00000000  00030121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000487c  00000000  00000000  0005af05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000015b8  00000000  00000000  0005f788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000010ea  00000000  00000000  00060d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00036058  00000000  00000000  00061e2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00021402  00000000  00000000  00097e82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00152557  00000000  00000000  000b9284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00005e70  00000000  00000000  0020b7dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006c  00000000  00000000  0021164c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240000b0 	.word	0x240000b0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801003c 	.word	0x0801003c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240000b4 	.word	0x240000b4
 800030c:	0801003c 	.word	0x0801003c

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b970 	b.w	8000618 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9e08      	ldr	r6, [sp, #32]
 8000356:	460d      	mov	r5, r1
 8000358:	4604      	mov	r4, r0
 800035a:	460f      	mov	r7, r1
 800035c:	2b00      	cmp	r3, #0
 800035e:	d14a      	bne.n	80003f6 <__udivmoddi4+0xa6>
 8000360:	428a      	cmp	r2, r1
 8000362:	4694      	mov	ip, r2
 8000364:	d965      	bls.n	8000432 <__udivmoddi4+0xe2>
 8000366:	fab2 f382 	clz	r3, r2
 800036a:	b143      	cbz	r3, 800037e <__udivmoddi4+0x2e>
 800036c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000370:	f1c3 0220 	rsb	r2, r3, #32
 8000374:	409f      	lsls	r7, r3
 8000376:	fa20 f202 	lsr.w	r2, r0, r2
 800037a:	4317      	orrs	r7, r2
 800037c:	409c      	lsls	r4, r3
 800037e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000382:	fa1f f58c 	uxth.w	r5, ip
 8000386:	fbb7 f1fe 	udiv	r1, r7, lr
 800038a:	0c22      	lsrs	r2, r4, #16
 800038c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000390:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000394:	fb01 f005 	mul.w	r0, r1, r5
 8000398:	4290      	cmp	r0, r2
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x62>
 800039c:	eb1c 0202 	adds.w	r2, ip, r2
 80003a0:	f101 37ff 	add.w	r7, r1, #4294967295
 80003a4:	f080 811c 	bcs.w	80005e0 <__udivmoddi4+0x290>
 80003a8:	4290      	cmp	r0, r2
 80003aa:	f240 8119 	bls.w	80005e0 <__udivmoddi4+0x290>
 80003ae:	3902      	subs	r1, #2
 80003b0:	4462      	add	r2, ip
 80003b2:	1a12      	subs	r2, r2, r0
 80003b4:	b2a4      	uxth	r4, r4
 80003b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80003be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003c2:	fb00 f505 	mul.w	r5, r0, r5
 80003c6:	42a5      	cmp	r5, r4
 80003c8:	d90a      	bls.n	80003e0 <__udivmoddi4+0x90>
 80003ca:	eb1c 0404 	adds.w	r4, ip, r4
 80003ce:	f100 32ff 	add.w	r2, r0, #4294967295
 80003d2:	f080 8107 	bcs.w	80005e4 <__udivmoddi4+0x294>
 80003d6:	42a5      	cmp	r5, r4
 80003d8:	f240 8104 	bls.w	80005e4 <__udivmoddi4+0x294>
 80003dc:	4464      	add	r4, ip
 80003de:	3802      	subs	r0, #2
 80003e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	2100      	movs	r1, #0
 80003e8:	b11e      	cbz	r6, 80003f2 <__udivmoddi4+0xa2>
 80003ea:	40dc      	lsrs	r4, r3
 80003ec:	2300      	movs	r3, #0
 80003ee:	e9c6 4300 	strd	r4, r3, [r6]
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0xbc>
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	f000 80ed 	beq.w	80005da <__udivmoddi4+0x28a>
 8000400:	2100      	movs	r1, #0
 8000402:	e9c6 0500 	strd	r0, r5, [r6]
 8000406:	4608      	mov	r0, r1
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	fab3 f183 	clz	r1, r3
 8000410:	2900      	cmp	r1, #0
 8000412:	d149      	bne.n	80004a8 <__udivmoddi4+0x158>
 8000414:	42ab      	cmp	r3, r5
 8000416:	d302      	bcc.n	800041e <__udivmoddi4+0xce>
 8000418:	4282      	cmp	r2, r0
 800041a:	f200 80f8 	bhi.w	800060e <__udivmoddi4+0x2be>
 800041e:	1a84      	subs	r4, r0, r2
 8000420:	eb65 0203 	sbc.w	r2, r5, r3
 8000424:	2001      	movs	r0, #1
 8000426:	4617      	mov	r7, r2
 8000428:	2e00      	cmp	r6, #0
 800042a:	d0e2      	beq.n	80003f2 <__udivmoddi4+0xa2>
 800042c:	e9c6 4700 	strd	r4, r7, [r6]
 8000430:	e7df      	b.n	80003f2 <__udivmoddi4+0xa2>
 8000432:	b902      	cbnz	r2, 8000436 <__udivmoddi4+0xe6>
 8000434:	deff      	udf	#255	; 0xff
 8000436:	fab2 f382 	clz	r3, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	f040 8090 	bne.w	8000560 <__udivmoddi4+0x210>
 8000440:	1a8a      	subs	r2, r1, r2
 8000442:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000446:	fa1f fe8c 	uxth.w	lr, ip
 800044a:	2101      	movs	r1, #1
 800044c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000450:	fb07 2015 	mls	r0, r7, r5, r2
 8000454:	0c22      	lsrs	r2, r4, #16
 8000456:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800045a:	fb0e f005 	mul.w	r0, lr, r5
 800045e:	4290      	cmp	r0, r2
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x124>
 8000462:	eb1c 0202 	adds.w	r2, ip, r2
 8000466:	f105 38ff 	add.w	r8, r5, #4294967295
 800046a:	d202      	bcs.n	8000472 <__udivmoddi4+0x122>
 800046c:	4290      	cmp	r0, r2
 800046e:	f200 80cb 	bhi.w	8000608 <__udivmoddi4+0x2b8>
 8000472:	4645      	mov	r5, r8
 8000474:	1a12      	subs	r2, r2, r0
 8000476:	b2a4      	uxth	r4, r4
 8000478:	fbb2 f0f7 	udiv	r0, r2, r7
 800047c:	fb07 2210 	mls	r2, r7, r0, r2
 8000480:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000484:	fb0e fe00 	mul.w	lr, lr, r0
 8000488:	45a6      	cmp	lr, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x14e>
 800048c:	eb1c 0404 	adds.w	r4, ip, r4
 8000490:	f100 32ff 	add.w	r2, r0, #4294967295
 8000494:	d202      	bcs.n	800049c <__udivmoddi4+0x14c>
 8000496:	45a6      	cmp	lr, r4
 8000498:	f200 80bb 	bhi.w	8000612 <__udivmoddi4+0x2c2>
 800049c:	4610      	mov	r0, r2
 800049e:	eba4 040e 	sub.w	r4, r4, lr
 80004a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004a6:	e79f      	b.n	80003e8 <__udivmoddi4+0x98>
 80004a8:	f1c1 0720 	rsb	r7, r1, #32
 80004ac:	408b      	lsls	r3, r1
 80004ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80004b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004b6:	fa05 f401 	lsl.w	r4, r5, r1
 80004ba:	fa20 f307 	lsr.w	r3, r0, r7
 80004be:	40fd      	lsrs	r5, r7
 80004c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004c4:	4323      	orrs	r3, r4
 80004c6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004ca:	fa1f fe8c 	uxth.w	lr, ip
 80004ce:	fb09 5518 	mls	r5, r9, r8, r5
 80004d2:	0c1c      	lsrs	r4, r3, #16
 80004d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004d8:	fb08 f50e 	mul.w	r5, r8, lr
 80004dc:	42a5      	cmp	r5, r4
 80004de:	fa02 f201 	lsl.w	r2, r2, r1
 80004e2:	fa00 f001 	lsl.w	r0, r0, r1
 80004e6:	d90b      	bls.n	8000500 <__udivmoddi4+0x1b0>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f0:	f080 8088 	bcs.w	8000604 <__udivmoddi4+0x2b4>
 80004f4:	42a5      	cmp	r5, r4
 80004f6:	f240 8085 	bls.w	8000604 <__udivmoddi4+0x2b4>
 80004fa:	f1a8 0802 	sub.w	r8, r8, #2
 80004fe:	4464      	add	r4, ip
 8000500:	1b64      	subs	r4, r4, r5
 8000502:	b29d      	uxth	r5, r3
 8000504:	fbb4 f3f9 	udiv	r3, r4, r9
 8000508:	fb09 4413 	mls	r4, r9, r3, r4
 800050c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000510:	fb03 fe0e 	mul.w	lr, r3, lr
 8000514:	45a6      	cmp	lr, r4
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x1da>
 8000518:	eb1c 0404 	adds.w	r4, ip, r4
 800051c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000520:	d26c      	bcs.n	80005fc <__udivmoddi4+0x2ac>
 8000522:	45a6      	cmp	lr, r4
 8000524:	d96a      	bls.n	80005fc <__udivmoddi4+0x2ac>
 8000526:	3b02      	subs	r3, #2
 8000528:	4464      	add	r4, ip
 800052a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800052e:	fba3 9502 	umull	r9, r5, r3, r2
 8000532:	eba4 040e 	sub.w	r4, r4, lr
 8000536:	42ac      	cmp	r4, r5
 8000538:	46c8      	mov	r8, r9
 800053a:	46ae      	mov	lr, r5
 800053c:	d356      	bcc.n	80005ec <__udivmoddi4+0x29c>
 800053e:	d053      	beq.n	80005e8 <__udivmoddi4+0x298>
 8000540:	b156      	cbz	r6, 8000558 <__udivmoddi4+0x208>
 8000542:	ebb0 0208 	subs.w	r2, r0, r8
 8000546:	eb64 040e 	sbc.w	r4, r4, lr
 800054a:	fa04 f707 	lsl.w	r7, r4, r7
 800054e:	40ca      	lsrs	r2, r1
 8000550:	40cc      	lsrs	r4, r1
 8000552:	4317      	orrs	r7, r2
 8000554:	e9c6 7400 	strd	r7, r4, [r6]
 8000558:	4618      	mov	r0, r3
 800055a:	2100      	movs	r1, #0
 800055c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000560:	f1c3 0120 	rsb	r1, r3, #32
 8000564:	fa02 fc03 	lsl.w	ip, r2, r3
 8000568:	fa20 f201 	lsr.w	r2, r0, r1
 800056c:	fa25 f101 	lsr.w	r1, r5, r1
 8000570:	409d      	lsls	r5, r3
 8000572:	432a      	orrs	r2, r5
 8000574:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000578:	fa1f fe8c 	uxth.w	lr, ip
 800057c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000580:	fb07 1510 	mls	r5, r7, r0, r1
 8000584:	0c11      	lsrs	r1, r2, #16
 8000586:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800058a:	fb00 f50e 	mul.w	r5, r0, lr
 800058e:	428d      	cmp	r5, r1
 8000590:	fa04 f403 	lsl.w	r4, r4, r3
 8000594:	d908      	bls.n	80005a8 <__udivmoddi4+0x258>
 8000596:	eb1c 0101 	adds.w	r1, ip, r1
 800059a:	f100 38ff 	add.w	r8, r0, #4294967295
 800059e:	d22f      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005a0:	428d      	cmp	r5, r1
 80005a2:	d92d      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005a4:	3802      	subs	r0, #2
 80005a6:	4461      	add	r1, ip
 80005a8:	1b49      	subs	r1, r1, r5
 80005aa:	b292      	uxth	r2, r2
 80005ac:	fbb1 f5f7 	udiv	r5, r1, r7
 80005b0:	fb07 1115 	mls	r1, r7, r5, r1
 80005b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005b8:	fb05 f10e 	mul.w	r1, r5, lr
 80005bc:	4291      	cmp	r1, r2
 80005be:	d908      	bls.n	80005d2 <__udivmoddi4+0x282>
 80005c0:	eb1c 0202 	adds.w	r2, ip, r2
 80005c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005c8:	d216      	bcs.n	80005f8 <__udivmoddi4+0x2a8>
 80005ca:	4291      	cmp	r1, r2
 80005cc:	d914      	bls.n	80005f8 <__udivmoddi4+0x2a8>
 80005ce:	3d02      	subs	r5, #2
 80005d0:	4462      	add	r2, ip
 80005d2:	1a52      	subs	r2, r2, r1
 80005d4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005d8:	e738      	b.n	800044c <__udivmoddi4+0xfc>
 80005da:	4631      	mov	r1, r6
 80005dc:	4630      	mov	r0, r6
 80005de:	e708      	b.n	80003f2 <__udivmoddi4+0xa2>
 80005e0:	4639      	mov	r1, r7
 80005e2:	e6e6      	b.n	80003b2 <__udivmoddi4+0x62>
 80005e4:	4610      	mov	r0, r2
 80005e6:	e6fb      	b.n	80003e0 <__udivmoddi4+0x90>
 80005e8:	4548      	cmp	r0, r9
 80005ea:	d2a9      	bcs.n	8000540 <__udivmoddi4+0x1f0>
 80005ec:	ebb9 0802 	subs.w	r8, r9, r2
 80005f0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005f4:	3b01      	subs	r3, #1
 80005f6:	e7a3      	b.n	8000540 <__udivmoddi4+0x1f0>
 80005f8:	4645      	mov	r5, r8
 80005fa:	e7ea      	b.n	80005d2 <__udivmoddi4+0x282>
 80005fc:	462b      	mov	r3, r5
 80005fe:	e794      	b.n	800052a <__udivmoddi4+0x1da>
 8000600:	4640      	mov	r0, r8
 8000602:	e7d1      	b.n	80005a8 <__udivmoddi4+0x258>
 8000604:	46d0      	mov	r8, sl
 8000606:	e77b      	b.n	8000500 <__udivmoddi4+0x1b0>
 8000608:	3d02      	subs	r5, #2
 800060a:	4462      	add	r2, ip
 800060c:	e732      	b.n	8000474 <__udivmoddi4+0x124>
 800060e:	4608      	mov	r0, r1
 8000610:	e70a      	b.n	8000428 <__udivmoddi4+0xd8>
 8000612:	4464      	add	r4, ip
 8000614:	3802      	subs	r0, #2
 8000616:	e742      	b.n	800049e <__udivmoddi4+0x14e>

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	0a5a      	lsrs	r2, r3, #9
 800062c:	490f      	ldr	r1, [pc, #60]	; (800066c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800062e:	fba1 1202 	umull	r1, r2, r1, r2
 8000632:	09d2      	lsrs	r2, r2, #7
 8000634:	490e      	ldr	r1, [pc, #56]	; (8000670 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000636:	fb01 f202 	mul.w	r2, r1, r2
 800063a:	1a9b      	subs	r3, r3, r2
 800063c:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	0a5b      	lsrs	r3, r3, #9
 8000644:	4a09      	ldr	r2, [pc, #36]	; (800066c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000646:	fba2 2303 	umull	r2, r3, r2, r3
 800064a:	09db      	lsrs	r3, r3, #7
 800064c:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	441a      	add	r2, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	68fa      	ldr	r2, [r7, #12]
 800065e:	601a      	str	r2, [r3, #0]
}
 8000660:	bf00      	nop
 8000662:	3714      	adds	r7, #20
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	00044b83 	.word	0x00044b83
 8000670:	3b9aca00 	.word	0x3b9aca00
 8000674:	00000000 	.word	0x00000000

08000678 <pidCtrl>:
    {Kp[1], Ki[1], Kd[1], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
    {Kp[2], Ki[2], Kd[2], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
    {Kp[3], Ki[3], Kd[3], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0}
};

void pidCtrl(int i){
 8000678:	b490      	push	{r4, r7}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	Kpid[i].insVel = (double) Kpid[i].enc * PI * Dwheel
 8000680:	49c7      	ldr	r1, [pc, #796]	; (80009a0 <pidCtrl+0x328>)
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	4613      	mov	r3, r2
 8000686:	00db      	lsls	r3, r3, #3
 8000688:	1a9b      	subs	r3, r3, r2
 800068a:	011b      	lsls	r3, r3, #4
 800068c:	440b      	add	r3, r1
 800068e:	3318      	adds	r3, #24
 8000690:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000694:	ee07 3a90 	vmov	s15, r3
 8000698:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800069c:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8000978 <pidCtrl+0x300>
 80006a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006a4:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8000980 <pidCtrl+0x308>
 80006a8:	ee27 6b06 	vmul.f64	d6, d7, d6
			/ (4 * resolution * reduction_ratio * belt_ratio) * frequency;
 80006ac:	ed9f 5bb6 	vldr	d5, [pc, #728]	; 8000988 <pidCtrl+0x310>
 80006b0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80006b4:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8000990 <pidCtrl+0x318>
 80006b8:	ee27 7b06 	vmul.f64	d7, d7, d6
	Kpid[i].insVel = (double) Kpid[i].enc * PI * Dwheel
 80006bc:	49b8      	ldr	r1, [pc, #736]	; (80009a0 <pidCtrl+0x328>)
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	4613      	mov	r3, r2
 80006c2:	00db      	lsls	r3, r3, #3
 80006c4:	1a9b      	subs	r3, r3, r2
 80006c6:	011b      	lsls	r3, r3, #4
 80006c8:	440b      	add	r3, r1
 80006ca:	3328      	adds	r3, #40	; 0x28
 80006cc:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].error = Kpid[i].goalVel - Kpid[i].insVel;
 80006d0:	49b3      	ldr	r1, [pc, #716]	; (80009a0 <pidCtrl+0x328>)
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	4613      	mov	r3, r2
 80006d6:	00db      	lsls	r3, r3, #3
 80006d8:	1a9b      	subs	r3, r3, r2
 80006da:	011b      	lsls	r3, r3, #4
 80006dc:	440b      	add	r3, r1
 80006de:	3320      	adds	r3, #32
 80006e0:	ed93 6b00 	vldr	d6, [r3]
 80006e4:	49ae      	ldr	r1, [pc, #696]	; (80009a0 <pidCtrl+0x328>)
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	4613      	mov	r3, r2
 80006ea:	00db      	lsls	r3, r3, #3
 80006ec:	1a9b      	subs	r3, r3, r2
 80006ee:	011b      	lsls	r3, r3, #4
 80006f0:	440b      	add	r3, r1
 80006f2:	3328      	adds	r3, #40	; 0x28
 80006f4:	ed93 7b00 	vldr	d7, [r3]
 80006f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80006fc:	49a8      	ldr	r1, [pc, #672]	; (80009a0 <pidCtrl+0x328>)
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	4613      	mov	r3, r2
 8000702:	00db      	lsls	r3, r3, #3
 8000704:	1a9b      	subs	r3, r3, r2
 8000706:	011b      	lsls	r3, r3, #4
 8000708:	440b      	add	r3, r1
 800070a:	3330      	adds	r3, #48	; 0x30
 800070c:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].up = Kpid[i].Kp * Kpid[i].error;
 8000710:	49a3      	ldr	r1, [pc, #652]	; (80009a0 <pidCtrl+0x328>)
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	4613      	mov	r3, r2
 8000716:	00db      	lsls	r3, r3, #3
 8000718:	1a9b      	subs	r3, r3, r2
 800071a:	011b      	lsls	r3, r3, #4
 800071c:	440b      	add	r3, r1
 800071e:	ed93 6b00 	vldr	d6, [r3]
 8000722:	499f      	ldr	r1, [pc, #636]	; (80009a0 <pidCtrl+0x328>)
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	4613      	mov	r3, r2
 8000728:	00db      	lsls	r3, r3, #3
 800072a:	1a9b      	subs	r3, r3, r2
 800072c:	011b      	lsls	r3, r3, #4
 800072e:	440b      	add	r3, r1
 8000730:	3330      	adds	r3, #48	; 0x30
 8000732:	ed93 7b00 	vldr	d7, [r3]
 8000736:	ee26 7b07 	vmul.f64	d7, d6, d7
 800073a:	4999      	ldr	r1, [pc, #612]	; (80009a0 <pidCtrl+0x328>)
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	4613      	mov	r3, r2
 8000740:	00db      	lsls	r3, r3, #3
 8000742:	1a9b      	subs	r3, r3, r2
 8000744:	011b      	lsls	r3, r3, #4
 8000746:	440b      	add	r3, r1
 8000748:	3348      	adds	r3, #72	; 0x48
 800074a:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].ui += Kpid[i].Ki * Kpid[i].last_error / frequency;
 800074e:	4994      	ldr	r1, [pc, #592]	; (80009a0 <pidCtrl+0x328>)
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	4613      	mov	r3, r2
 8000754:	00db      	lsls	r3, r3, #3
 8000756:	1a9b      	subs	r3, r3, r2
 8000758:	011b      	lsls	r3, r3, #4
 800075a:	440b      	add	r3, r1
 800075c:	3350      	adds	r3, #80	; 0x50
 800075e:	ed93 6b00 	vldr	d6, [r3]
 8000762:	498f      	ldr	r1, [pc, #572]	; (80009a0 <pidCtrl+0x328>)
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	4613      	mov	r3, r2
 8000768:	00db      	lsls	r3, r3, #3
 800076a:	1a9b      	subs	r3, r3, r2
 800076c:	011b      	lsls	r3, r3, #4
 800076e:	440b      	add	r3, r1
 8000770:	3308      	adds	r3, #8
 8000772:	ed93 5b00 	vldr	d5, [r3]
 8000776:	498a      	ldr	r1, [pc, #552]	; (80009a0 <pidCtrl+0x328>)
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	4613      	mov	r3, r2
 800077c:	00db      	lsls	r3, r3, #3
 800077e:	1a9b      	subs	r3, r3, r2
 8000780:	011b      	lsls	r3, r3, #4
 8000782:	440b      	add	r3, r1
 8000784:	3338      	adds	r3, #56	; 0x38
 8000786:	ed93 7b00 	vldr	d7, [r3]
 800078a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800078e:	ed9f 4b80 	vldr	d4, [pc, #512]	; 8000990 <pidCtrl+0x318>
 8000792:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000796:	ee36 7b07 	vadd.f64	d7, d6, d7
 800079a:	4981      	ldr	r1, [pc, #516]	; (80009a0 <pidCtrl+0x328>)
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	4613      	mov	r3, r2
 80007a0:	00db      	lsls	r3, r3, #3
 80007a2:	1a9b      	subs	r3, r3, r2
 80007a4:	011b      	lsls	r3, r3, #4
 80007a6:	440b      	add	r3, r1
 80007a8:	3350      	adds	r3, #80	; 0x50
 80007aa:	ed83 7b00 	vstr	d7, [r3]
//	Kpid[i].ui = 0;
	Kpid[i].ud = Kpid[i].Kd * (Kpid[i].error - Kpid[i].last_error) * frequency;
 80007ae:	497c      	ldr	r1, [pc, #496]	; (80009a0 <pidCtrl+0x328>)
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	4613      	mov	r3, r2
 80007b4:	00db      	lsls	r3, r3, #3
 80007b6:	1a9b      	subs	r3, r3, r2
 80007b8:	011b      	lsls	r3, r3, #4
 80007ba:	440b      	add	r3, r1
 80007bc:	3310      	adds	r3, #16
 80007be:	ed93 6b00 	vldr	d6, [r3]
 80007c2:	4977      	ldr	r1, [pc, #476]	; (80009a0 <pidCtrl+0x328>)
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	4613      	mov	r3, r2
 80007c8:	00db      	lsls	r3, r3, #3
 80007ca:	1a9b      	subs	r3, r3, r2
 80007cc:	011b      	lsls	r3, r3, #4
 80007ce:	440b      	add	r3, r1
 80007d0:	3330      	adds	r3, #48	; 0x30
 80007d2:	ed93 5b00 	vldr	d5, [r3]
 80007d6:	4972      	ldr	r1, [pc, #456]	; (80009a0 <pidCtrl+0x328>)
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	4613      	mov	r3, r2
 80007dc:	00db      	lsls	r3, r3, #3
 80007de:	1a9b      	subs	r3, r3, r2
 80007e0:	011b      	lsls	r3, r3, #4
 80007e2:	440b      	add	r3, r1
 80007e4:	3338      	adds	r3, #56	; 0x38
 80007e6:	ed93 7b00 	vldr	d7, [r3]
 80007ea:	ee35 7b47 	vsub.f64	d7, d5, d7
 80007ee:	ee26 7b07 	vmul.f64	d7, d6, d7
 80007f2:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8000990 <pidCtrl+0x318>
 80007f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80007fa:	4969      	ldr	r1, [pc, #420]	; (80009a0 <pidCtrl+0x328>)
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	4613      	mov	r3, r2
 8000800:	00db      	lsls	r3, r3, #3
 8000802:	1a9b      	subs	r3, r3, r2
 8000804:	011b      	lsls	r3, r3, #4
 8000806:	440b      	add	r3, r1
 8000808:	3358      	adds	r3, #88	; 0x58
 800080a:	ed83 7b00 	vstr	d7, [r3]
	if( fabs(Kpid[i].ui) > max_ui )
 800080e:	4964      	ldr	r1, [pc, #400]	; (80009a0 <pidCtrl+0x328>)
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	4613      	mov	r3, r2
 8000814:	00db      	lsls	r3, r3, #3
 8000816:	1a9b      	subs	r3, r3, r2
 8000818:	011b      	lsls	r3, r3, #4
 800081a:	440b      	add	r3, r1
 800081c:	3350      	adds	r3, #80	; 0x50
 800081e:	ed93 7b00 	vldr	d7, [r3]
 8000822:	eeb0 7bc7 	vabs.f64	d7, d7
 8000826:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800082a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800082e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000832:	dd1f      	ble.n	8000874 <pidCtrl+0x1fc>
		Kpid[i].ui = (Kpid[i].ui >= 0)? max_ui: -1*max_ui;
 8000834:	495a      	ldr	r1, [pc, #360]	; (80009a0 <pidCtrl+0x328>)
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	4613      	mov	r3, r2
 800083a:	00db      	lsls	r3, r3, #3
 800083c:	1a9b      	subs	r3, r3, r2
 800083e:	011b      	lsls	r3, r3, #4
 8000840:	440b      	add	r3, r1
 8000842:	3350      	adds	r3, #80	; 0x50
 8000844:	ed93 7b00 	vldr	d7, [r3]
 8000848:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800084c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000850:	db03      	blt.n	800085a <pidCtrl+0x1e2>
 8000852:	f04f 0000 	mov.w	r0, #0
 8000856:	4953      	ldr	r1, [pc, #332]	; (80009a4 <pidCtrl+0x32c>)
 8000858:	e002      	b.n	8000860 <pidCtrl+0x1e8>
 800085a:	f04f 0000 	mov.w	r0, #0
 800085e:	4952      	ldr	r1, [pc, #328]	; (80009a8 <pidCtrl+0x330>)
 8000860:	4c4f      	ldr	r4, [pc, #316]	; (80009a0 <pidCtrl+0x328>)
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	4613      	mov	r3, r2
 8000866:	00db      	lsls	r3, r3, #3
 8000868:	1a9b      	subs	r3, r3, r2
 800086a:	011b      	lsls	r3, r3, #4
 800086c:	4423      	add	r3, r4
 800086e:	3350      	adds	r3, #80	; 0x50
 8000870:	e9c3 0100 	strd	r0, r1, [r3]
	Kpid[i].u = Kpid[i].up + Kpid[i].ui + Kpid[i].ud;
 8000874:	494a      	ldr	r1, [pc, #296]	; (80009a0 <pidCtrl+0x328>)
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	4613      	mov	r3, r2
 800087a:	00db      	lsls	r3, r3, #3
 800087c:	1a9b      	subs	r3, r3, r2
 800087e:	011b      	lsls	r3, r3, #4
 8000880:	440b      	add	r3, r1
 8000882:	3348      	adds	r3, #72	; 0x48
 8000884:	ed93 6b00 	vldr	d6, [r3]
 8000888:	4945      	ldr	r1, [pc, #276]	; (80009a0 <pidCtrl+0x328>)
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	4613      	mov	r3, r2
 800088e:	00db      	lsls	r3, r3, #3
 8000890:	1a9b      	subs	r3, r3, r2
 8000892:	011b      	lsls	r3, r3, #4
 8000894:	440b      	add	r3, r1
 8000896:	3350      	adds	r3, #80	; 0x50
 8000898:	ed93 7b00 	vldr	d7, [r3]
 800089c:	ee36 6b07 	vadd.f64	d6, d6, d7
 80008a0:	493f      	ldr	r1, [pc, #252]	; (80009a0 <pidCtrl+0x328>)
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	4613      	mov	r3, r2
 80008a6:	00db      	lsls	r3, r3, #3
 80008a8:	1a9b      	subs	r3, r3, r2
 80008aa:	011b      	lsls	r3, r3, #4
 80008ac:	440b      	add	r3, r1
 80008ae:	3358      	adds	r3, #88	; 0x58
 80008b0:	ed93 7b00 	vldr	d7, [r3]
 80008b4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80008b8:	4939      	ldr	r1, [pc, #228]	; (80009a0 <pidCtrl+0x328>)
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	4613      	mov	r3, r2
 80008be:	00db      	lsls	r3, r3, #3
 80008c0:	1a9b      	subs	r3, r3, r2
 80008c2:	011b      	lsls	r3, r3, #4
 80008c4:	440b      	add	r3, r1
 80008c6:	3340      	adds	r3, #64	; 0x40
 80008c8:	ed83 7b00 	vstr	d7, [r3]

	Kpid[i].last_error = Kpid[i].error;
 80008cc:	4934      	ldr	r1, [pc, #208]	; (80009a0 <pidCtrl+0x328>)
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	4613      	mov	r3, r2
 80008d2:	00db      	lsls	r3, r3, #3
 80008d4:	1a9b      	subs	r3, r3, r2
 80008d6:	011b      	lsls	r3, r3, #4
 80008d8:	440b      	add	r3, r1
 80008da:	3330      	adds	r3, #48	; 0x30
 80008dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80008e0:	4c2f      	ldr	r4, [pc, #188]	; (80009a0 <pidCtrl+0x328>)
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	4613      	mov	r3, r2
 80008e6:	00db      	lsls	r3, r3, #3
 80008e8:	1a9b      	subs	r3, r3, r2
 80008ea:	011b      	lsls	r3, r3, #4
 80008ec:	4423      	add	r3, r4
 80008ee:	3338      	adds	r3, #56	; 0x38
 80008f0:	e9c3 0100 	strd	r0, r1, [r3]

	Kpid[i].pulse = fabs(Kpid[i].u) * PWM_ARR;
 80008f4:	492a      	ldr	r1, [pc, #168]	; (80009a0 <pidCtrl+0x328>)
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	4613      	mov	r3, r2
 80008fa:	00db      	lsls	r3, r3, #3
 80008fc:	1a9b      	subs	r3, r3, r2
 80008fe:	011b      	lsls	r3, r3, #4
 8000900:	440b      	add	r3, r1
 8000902:	3340      	adds	r3, #64	; 0x40
 8000904:	ed93 7b00 	vldr	d7, [r3]
 8000908:	eeb0 7bc7 	vabs.f64	d7, d7
 800090c:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8000998 <pidCtrl+0x320>
 8000910:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000914:	4922      	ldr	r1, [pc, #136]	; (80009a0 <pidCtrl+0x328>)
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	4613      	mov	r3, r2
 800091a:	00db      	lsls	r3, r3, #3
 800091c:	1a9b      	subs	r3, r3, r2
 800091e:	011b      	lsls	r3, r3, #4
 8000920:	440b      	add	r3, r1
 8000922:	3360      	adds	r3, #96	; 0x60
 8000924:	ed83 7b00 	vstr	d7, [r3]
	if(Kpid[i].pulse > PWM_ARR)	Kpid[i].pulse = PWM_ARR;
 8000928:	491d      	ldr	r1, [pc, #116]	; (80009a0 <pidCtrl+0x328>)
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	4613      	mov	r3, r2
 800092e:	00db      	lsls	r3, r3, #3
 8000930:	1a9b      	subs	r3, r3, r2
 8000932:	011b      	lsls	r3, r3, #4
 8000934:	440b      	add	r3, r1
 8000936:	3360      	adds	r3, #96	; 0x60
 8000938:	ed93 7b00 	vldr	d7, [r3]
 800093c:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8000998 <pidCtrl+0x320>
 8000940:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000948:	dc00      	bgt.n	800094c <pidCtrl+0x2d4>
}
 800094a:	e00d      	b.n	8000968 <pidCtrl+0x2f0>
	if(Kpid[i].pulse > PWM_ARR)	Kpid[i].pulse = PWM_ARR;
 800094c:	4914      	ldr	r1, [pc, #80]	; (80009a0 <pidCtrl+0x328>)
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	4613      	mov	r3, r2
 8000952:	00db      	lsls	r3, r3, #3
 8000954:	1a9b      	subs	r3, r3, r2
 8000956:	011b      	lsls	r3, r3, #4
 8000958:	440b      	add	r3, r1
 800095a:	f103 0160 	add.w	r1, r3, #96	; 0x60
 800095e:	a30e      	add	r3, pc, #56	; (adr r3, 8000998 <pidCtrl+0x320>)
 8000960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000964:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bc90      	pop	{r4, r7}
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	f3af 8000 	nop.w
 8000978:	54cadf99 	.word	0x54cadf99
 800097c:	400921fb 	.word	0x400921fb
 8000980:	cccccccd 	.word	0xcccccccd
 8000984:	4029cccc 	.word	0x4029cccc
 8000988:	00000000 	.word	0x00000000
 800098c:	410b0000 	.word	0x410b0000
 8000990:	00000000 	.word	0x00000000
 8000994:	406f4000 	.word	0x406f4000
 8000998:	00000000 	.word	0x00000000
 800099c:	408f3800 	.word	0x408f3800
 80009a0:	240000f0 	.word	0x240000f0
 80009a4:	3ff00000 	.word	0x3ff00000
 80009a8:	bff00000 	.word	0xbff00000

080009ac <_Z41__static_initialization_and_destruction_0ii>:
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	6039      	str	r1, [r7, #0]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d14c      	bne.n	8000a56 <_Z41__static_initialization_and_destruction_0ii+0xaa>
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d147      	bne.n	8000a56 <_Z41__static_initialization_and_destruction_0ii+0xaa>
    {Kp[0], Ki[0], Kd[0], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 80009c6:	4b27      	ldr	r3, [pc, #156]	; (8000a64 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80009c8:	e9d3 2300 	ldrd	r2, r3, [r3]
};
 80009cc:	4926      	ldr	r1, [pc, #152]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80009ce:	e9c1 2300 	strd	r2, r3, [r1]
    {Kp[0], Ki[0], Kd[0], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 80009d2:	4b26      	ldr	r3, [pc, #152]	; (8000a6c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80009d4:	e9d3 2300 	ldrd	r2, r3, [r3]
};
 80009d8:	4923      	ldr	r1, [pc, #140]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80009da:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {Kp[0], Ki[0], Kd[0], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 80009de:	4b24      	ldr	r3, [pc, #144]	; (8000a70 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80009e0:	e9d3 2300 	ldrd	r2, r3, [r3]
};
 80009e4:	4920      	ldr	r1, [pc, #128]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80009e6:	e9c1 2304 	strd	r2, r3, [r1, #16]
    {Kp[1], Ki[1], Kd[1], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 80009ea:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80009ec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
};
 80009f0:	491d      	ldr	r1, [pc, #116]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80009f2:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
    {Kp[1], Ki[1], Kd[1], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 80009f6:	4b1d      	ldr	r3, [pc, #116]	; (8000a6c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80009f8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
};
 80009fc:	491a      	ldr	r1, [pc, #104]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80009fe:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
    {Kp[1], Ki[1], Kd[1], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 8000a02:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8000a04:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
};
 8000a08:	4917      	ldr	r1, [pc, #92]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000a0a:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
    {Kp[2], Ki[2], Kd[2], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 8000a0e:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8000a10:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
};
 8000a14:	4914      	ldr	r1, [pc, #80]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000a16:	e9c1 2338 	strd	r2, r3, [r1, #224]	; 0xe0
    {Kp[2], Ki[2], Kd[2], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 8000a1a:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8000a1c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
};
 8000a20:	4911      	ldr	r1, [pc, #68]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000a22:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
    {Kp[2], Ki[2], Kd[2], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 8000a26:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8000a28:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
};
 8000a2c:	490e      	ldr	r1, [pc, #56]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000a2e:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
    {Kp[3], Ki[3], Kd[3], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0}
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8000a34:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8000a38:	490b      	ldr	r1, [pc, #44]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000a3a:	e9c1 2354 	strd	r2, r3, [r1, #336]	; 0x150
    {Kp[3], Ki[3], Kd[3], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0}
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8000a40:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8000a44:	4908      	ldr	r1, [pc, #32]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000a46:	e9c1 2356 	strd	r2, r3, [r1, #344]	; 0x158
    {Kp[3], Ki[3], Kd[3], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0}
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8000a4c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8000a50:	4905      	ldr	r1, [pc, #20]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000a52:	e9c1 2358 	strd	r2, r3, [r1, #352]	; 0x160
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	24000000 	.word	0x24000000
 8000a68:	240000f0 	.word	0x240000f0
 8000a6c:	24000020 	.word	0x24000020
 8000a70:	240000d0 	.word	0x240000d0

08000a74 <_GLOBAL__sub_I_Kp>:
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	f7ff ff95 	bl	80009ac <_Z41__static_initialization_and_destruction_0ii>
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	0000      	movs	r0, r0
	...

08000a88 <HAL_TIM_PeriodElapsedCallback>:
extern PUSHER pusher_B;
extern PUSHER pusher_C;
extern PUSHER pusher_D;
double corr_vy = (double)100/94;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4ab0      	ldr	r2, [pc, #704]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	f040 818d 	bne.w	8000db6 <HAL_TIM_PeriodElapsedCallback+0x32e>

		Kpid[0].goalVel = Vx + Vy * corr_vy + (W * coeffab);
 8000a9c:	4baf      	ldr	r3, [pc, #700]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000a9e:	ed93 6b00 	vldr	d6, [r3]
 8000aa2:	4baf      	ldr	r3, [pc, #700]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000aa4:	ed93 7b00 	vldr	d7, [r3]
 8000aa8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000aac:	4bad      	ldr	r3, [pc, #692]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000aae:	ed93 7b00 	vldr	d7, [r3]
 8000ab2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000ab6:	4bac      	ldr	r3, [pc, #688]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000ab8:	ed93 5b00 	vldr	d5, [r3]
 8000abc:	4bab      	ldr	r3, [pc, #684]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000abe:	ed93 7b00 	vldr	d7, [r3]
 8000ac2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000ac6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000aca:	4ba9      	ldr	r3, [pc, #676]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000acc:	ed83 7b08 	vstr	d7, [r3, #32]
		Kpid[1].goalVel = Vx - Vy * corr_vy - (W * coeffab);
 8000ad0:	4ba4      	ldr	r3, [pc, #656]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000ad2:	ed93 6b00 	vldr	d6, [r3]
 8000ad6:	4ba1      	ldr	r3, [pc, #644]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000ad8:	ed93 5b00 	vldr	d5, [r3]
 8000adc:	4ba0      	ldr	r3, [pc, #640]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000ade:	ed93 7b00 	vldr	d7, [r3]
 8000ae2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000ae6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000aea:	4b9f      	ldr	r3, [pc, #636]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000aec:	ed93 5b00 	vldr	d5, [r3]
 8000af0:	4b9e      	ldr	r3, [pc, #632]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000af2:	ed93 7b00 	vldr	d7, [r3]
 8000af6:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000afa:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000afe:	4b9c      	ldr	r3, [pc, #624]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000b00:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
		Kpid[2].goalVel = Vx + Vy * corr_vy - (W * coeffab);
 8000b04:	4b95      	ldr	r3, [pc, #596]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000b06:	ed93 6b00 	vldr	d6, [r3]
 8000b0a:	4b95      	ldr	r3, [pc, #596]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000b0c:	ed93 7b00 	vldr	d7, [r3]
 8000b10:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000b14:	4b93      	ldr	r3, [pc, #588]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000b16:	ed93 7b00 	vldr	d7, [r3]
 8000b1a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000b1e:	4b92      	ldr	r3, [pc, #584]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000b20:	ed93 5b00 	vldr	d5, [r3]
 8000b24:	4b91      	ldr	r3, [pc, #580]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000b26:	ed93 7b00 	vldr	d7, [r3]
 8000b2a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000b2e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000b32:	4b8f      	ldr	r3, [pc, #572]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000b34:	ed83 7b40 	vstr	d7, [r3, #256]	; 0x100
		Kpid[3].goalVel = Vx - Vy * corr_vy + (W * coeffab);
 8000b38:	4b8a      	ldr	r3, [pc, #552]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000b3a:	ed93 6b00 	vldr	d6, [r3]
 8000b3e:	4b87      	ldr	r3, [pc, #540]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000b40:	ed93 5b00 	vldr	d5, [r3]
 8000b44:	4b86      	ldr	r3, [pc, #536]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000b46:	ed93 7b00 	vldr	d7, [r3]
 8000b4a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000b4e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000b52:	4b85      	ldr	r3, [pc, #532]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000b54:	ed93 5b00 	vldr	d5, [r3]
 8000b58:	4b84      	ldr	r3, [pc, #528]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000b5a:	ed93 7b00 	vldr	d7, [r3]
 8000b5e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000b62:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b66:	4b82      	ldr	r3, [pc, #520]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000b68:	ed83 7b5c 	vstr	d7, [r3, #368]	; 0x170

		Kpid[0].enc = __HAL_TIM_GetCounter(FR_ENC);
 8000b6c:	4b81      	ldr	r3, [pc, #516]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b72:	b21a      	sxth	r2, r3
 8000b74:	4b7e      	ldr	r3, [pc, #504]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000b76:	831a      	strh	r2, [r3, #24]
		Kpid[1].enc = __HAL_TIM_GetCounter(FL_ENC);
 8000b78:	4b7f      	ldr	r3, [pc, #508]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b7e:	b21a      	sxth	r2, r3
 8000b80:	4b7b      	ldr	r3, [pc, #492]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000b82:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
		Kpid[2].enc = __HAL_TIM_GetCounter(BL_ENC) * -1;
 8000b86:	4b7d      	ldr	r3, [pc, #500]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	425b      	negs	r3, r3
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	b21a      	sxth	r2, r3
 8000b94:	4b76      	ldr	r3, [pc, #472]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000b96:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
		Kpid[3].enc = __HAL_TIM_GetCounter(BR_ENC) * -1;
 8000b9a:	4b79      	ldr	r3, [pc, #484]	; (8000d80 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	425b      	negs	r3, r3
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	b21a      	sxth	r2, r3
 8000ba8:	4b71      	ldr	r3, [pc, #452]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000baa:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
		__HAL_TIM_SetCounter(FR_ENC, 0);
 8000bae:	4b71      	ldr	r3, [pc, #452]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(FL_ENC, 0);
 8000bb6:	4b70      	ldr	r3, [pc, #448]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(BL_ENC, 0);
 8000bbe:	4b6f      	ldr	r3, [pc, #444]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(BR_ENC, 0);
 8000bc6:	4b6e      	ldr	r3, [pc, #440]	; (8000d80 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	625a      	str	r2, [r3, #36]	; 0x24



		for( int i = 0; i < 4; i ++){
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	e005      	b.n	8000be0 <HAL_TIM_PeriodElapsedCallback+0x158>
			pidCtrl(i);
 8000bd4:	68f8      	ldr	r0, [r7, #12]
 8000bd6:	f7ff fd4f 	bl	8000678 <pidCtrl>
		for( int i = 0; i < 4; i ++){
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	2b03      	cmp	r3, #3
 8000be4:	ddf6      	ble.n	8000bd4 <HAL_TIM_PeriodElapsedCallback+0x14c>
		}

		__HAL_TIM_SET_COMPARE(FR_PWM_TIMMER, FR_PWM_CHANNEL, Kpid[0].pulse);
 8000be6:	4b62      	ldr	r3, [pc, #392]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000be8:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8000bec:	4b65      	ldr	r3, [pc, #404]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000bf4:	ee17 2a90 	vmov	r2, s15
 8000bf8:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(FL_PWM_TIMMER, FL_PWM_CHANNEL, Kpid[1].pulse);
 8000bfa:	4b5d      	ldr	r3, [pc, #372]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000bfc:	ed93 7b34 	vldr	d7, [r3, #208]	; 0xd0
 8000c00:	4b60      	ldr	r3, [pc, #384]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c08:	ee17 2a90 	vmov	r2, s15
 8000c0c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(BL_PWM_TIMMER, BL_PWM_CHANNEL, Kpid[2].pulse);
 8000c0e:	4b58      	ldr	r3, [pc, #352]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000c10:	ed93 7b50 	vldr	d7, [r3, #320]	; 0x140
 8000c14:	4b5c      	ldr	r3, [pc, #368]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c1c:	ee17 2a90 	vmov	r2, s15
 8000c20:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(BR_PWM_TIMMER, BR_PWM_CHANNEL, Kpid[3].pulse);
 8000c22:	4b53      	ldr	r3, [pc, #332]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000c24:	ed93 7b6c 	vldr	d7, [r3, #432]	; 0x1b0
 8000c28:	4b57      	ldr	r3, [pc, #348]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c30:	ee17 2a90 	vmov	r2, s15
 8000c34:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(FR_INA_PORT, FR_INA_PIN, GPIO_PIN_RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c3c:	4853      	ldr	r0, [pc, #332]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000c3e:	f008 fc79 	bl	8009534 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FR_INB_PORT, FR_INB_PIN, GPIO_PIN_RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c48:	4850      	ldr	r0, [pc, #320]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000c4a:	f008 fc73 	bl	8009534 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FL_INA_PORT, FL_INA_PIN, GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c54:	484e      	ldr	r0, [pc, #312]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8000c56:	f008 fc6d 	bl	8009534 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FL_INB_PORT, FL_INB_PIN, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c60:	484b      	ldr	r0, [pc, #300]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8000c62:	f008 fc67 	bl	8009534 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BL_INA_PORT, BL_INA_PIN, GPIO_PIN_RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2104      	movs	r1, #4
 8000c6a:	484a      	ldr	r0, [pc, #296]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000c6c:	f008 fc62 	bl	8009534 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BL_INB_PORT, BL_INB_PIN, GPIO_PIN_RESET);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2108      	movs	r1, #8
 8000c74:	4847      	ldr	r0, [pc, #284]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000c76:	f008 fc5d 	bl	8009534 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BR_INA_PORT, BR_INA_PIN, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c80:	4845      	ldr	r0, [pc, #276]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000c82:	f008 fc57 	bl	8009534 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BR_INB_PORT, BR_INB_PIN, GPIO_PIN_RESET);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2110      	movs	r1, #16
 8000c8a:	4842      	ldr	r0, [pc, #264]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000c8c:	f008 fc52 	bl	8009534 <HAL_GPIO_WritePin>
		if (Kpid[0].u > 0)HAL_GPIO_WritePin(FR_INA_PORT, FR_INA_PIN, GPIO_PIN_SET);
 8000c90:	4b37      	ldr	r3, [pc, #220]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000c92:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8000c96:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c9e:	dd06      	ble.n	8000cae <HAL_TIM_PeriodElapsedCallback+0x226>
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ca6:	4839      	ldr	r0, [pc, #228]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000ca8:	f008 fc44 	bl	8009534 <HAL_GPIO_WritePin>
 8000cac:	e00d      	b.n	8000cca <HAL_TIM_PeriodElapsedCallback+0x242>
		else if (Kpid[0].u < 0)HAL_GPIO_WritePin(FR_INB_PORT, FR_INB_PIN, GPIO_PIN_SET);
 8000cae:	4b30      	ldr	r3, [pc, #192]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000cb0:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8000cb4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cbc:	d505      	bpl.n	8000cca <HAL_TIM_PeriodElapsedCallback+0x242>
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cc4:	4831      	ldr	r0, [pc, #196]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000cc6:	f008 fc35 	bl	8009534 <HAL_GPIO_WritePin>
		if (Kpid[1].u > 0)HAL_GPIO_WritePin(FL_INA_PORT, FL_INA_PIN, GPIO_PIN_SET);
 8000cca:	4b29      	ldr	r3, [pc, #164]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000ccc:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8000cd0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cd8:	dd06      	ble.n	8000ce8 <HAL_TIM_PeriodElapsedCallback+0x260>
 8000cda:	2201      	movs	r2, #1
 8000cdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ce0:	482b      	ldr	r0, [pc, #172]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8000ce2:	f008 fc27 	bl	8009534 <HAL_GPIO_WritePin>
 8000ce6:	e00d      	b.n	8000d04 <HAL_TIM_PeriodElapsedCallback+0x27c>
		else if (Kpid[1].u < 0)HAL_GPIO_WritePin(FL_INB_PORT, FL_INB_PIN, GPIO_PIN_SET);
 8000ce8:	4b21      	ldr	r3, [pc, #132]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000cea:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8000cee:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cf6:	d505      	bpl.n	8000d04 <HAL_TIM_PeriodElapsedCallback+0x27c>
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cfe:	4824      	ldr	r0, [pc, #144]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8000d00:	f008 fc18 	bl	8009534 <HAL_GPIO_WritePin>
		if (Kpid[2].u > 0)HAL_GPIO_WritePin(BL_INA_PORT, BL_INA_PIN, GPIO_PIN_SET);
 8000d04:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000d06:	ed93 7b48 	vldr	d7, [r3, #288]	; 0x120
 8000d0a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d12:	dd05      	ble.n	8000d20 <HAL_TIM_PeriodElapsedCallback+0x298>
 8000d14:	2201      	movs	r2, #1
 8000d16:	2104      	movs	r1, #4
 8000d18:	481e      	ldr	r0, [pc, #120]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000d1a:	f008 fc0b 	bl	8009534 <HAL_GPIO_WritePin>
 8000d1e:	e00c      	b.n	8000d3a <HAL_TIM_PeriodElapsedCallback+0x2b2>
		else if (Kpid[2].u < 0)HAL_GPIO_WritePin(BL_INB_PORT, BL_INB_PIN, GPIO_PIN_SET);
 8000d20:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000d22:	ed93 7b48 	vldr	d7, [r3, #288]	; 0x120
 8000d26:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d2e:	d504      	bpl.n	8000d3a <HAL_TIM_PeriodElapsedCallback+0x2b2>
 8000d30:	2201      	movs	r2, #1
 8000d32:	2108      	movs	r1, #8
 8000d34:	4817      	ldr	r0, [pc, #92]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000d36:	f008 fbfd 	bl	8009534 <HAL_GPIO_WritePin>
		if (Kpid[3].u > 0)HAL_GPIO_WritePin(BR_INA_PORT, BR_INA_PIN, GPIO_PIN_SET);
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000d3c:	ed93 7b64 	vldr	d7, [r3, #400]	; 0x190
 8000d40:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d48:	dd28      	ble.n	8000d9c <HAL_TIM_PeriodElapsedCallback+0x314>
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d50:	4811      	ldr	r0, [pc, #68]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000d52:	f008 fbef 	bl	8009534 <HAL_GPIO_WritePin>
 8000d56:	e02e      	b.n	8000db6 <HAL_TIM_PeriodElapsedCallback+0x32e>
 8000d58:	40010000 	.word	0x40010000
 8000d5c:	24000978 	.word	0x24000978
 8000d60:	24000048 	.word	0x24000048
 8000d64:	24000970 	.word	0x24000970
 8000d68:	24000980 	.word	0x24000980
 8000d6c:	24000040 	.word	0x24000040
 8000d70:	240000f0 	.word	0x240000f0
 8000d74:	240004ec 	.word	0x240004ec
 8000d78:	240005d0 	.word	0x240005d0
 8000d7c:	24000538 	.word	0x24000538
 8000d80:	24000584 	.word	0x24000584
 8000d84:	24000668 	.word	0x24000668
 8000d88:	240006b4 	.word	0x240006b4
 8000d8c:	58020c00 	.word	0x58020c00
 8000d90:	58020400 	.word	0x58020400
 8000d94:	58021000 	.word	0x58021000
 8000d98:	58020800 	.word	0x58020800
		else if (Kpid[3].u < 0)HAL_GPIO_WritePin(BR_INB_PORT, BR_INB_PIN, GPIO_PIN_SET);
 8000d9c:	4ba0      	ldr	r3, [pc, #640]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8000d9e:	ed93 7b64 	vldr	d7, [r3, #400]	; 0x190
 8000da2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000daa:	d504      	bpl.n	8000db6 <HAL_TIM_PeriodElapsedCallback+0x32e>
 8000dac:	2201      	movs	r2, #1
 8000dae:	2110      	movs	r1, #16
 8000db0:	489c      	ldr	r0, [pc, #624]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8000db2:	f008 fbbf 	bl	8009534 <HAL_GPIO_WritePin>
	}

	if(htim->Instance == TIM8){
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a9b      	ldr	r2, [pc, #620]	; (8001028 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	f040 810c 	bne.w	8000fda <HAL_TIM_PeriodElapsedCallback+0x552>
		/*pusher down*/
		if(pusher_A.d > 0){
 8000dc2:	4b9a      	ldr	r3, [pc, #616]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8000dc4:	ed93 7b04 	vldr	d7, [r3, #16]
 8000dc8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dd0:	dd2f      	ble.n	8000e32 <HAL_TIM_PeriodElapsedCallback+0x3aa>
			pusher_A.count++;
 8000dd2:	4b96      	ldr	r3, [pc, #600]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	4a94      	ldr	r2, [pc, #592]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8000dda:	6193      	str	r3, [r2, #24]
			HAL_GPIO_WritePin(PUSHER_A_IN1_PORT, PUSHER_A_IN1_PIN, GPIO_PIN_SET);
 8000ddc:	2201      	movs	r2, #1
 8000dde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000de2:	4890      	ldr	r0, [pc, #576]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8000de4:	f008 fba6 	bl	8009534 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUSHER_A_IN2_PORT, PUSHER_A_IN2_PIN, GPIO_PIN_RESET);
 8000de8:	2200      	movs	r2, #0
 8000dea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dee:	488d      	ldr	r0, [pc, #564]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8000df0:	f008 fba0 	bl	8009534 <HAL_GPIO_WritePin>
			if(pusher_A.count > pusher_A.d*1000/PUSHER_SPEED){
 8000df4:	4b8d      	ldr	r3, [pc, #564]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	ee07 3a90 	vmov	s15, r3
 8000dfc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000e00:	4b8a      	ldr	r3, [pc, #552]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8000e02:	ed93 7b04 	vldr	d7, [r3, #16]
 8000e06:	ed9f 5b82 	vldr	d5, [pc, #520]	; 8001010 <HAL_TIM_PeriodElapsedCallback+0x588>
 8000e0a:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000e0e:	ed9f 4b82 	vldr	d4, [pc, #520]	; 8001018 <HAL_TIM_PeriodElapsedCallback+0x590>
 8000e12:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000e16:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e1e:	dd08      	ble.n	8000e32 <HAL_TIM_PeriodElapsedCallback+0x3aa>
				pusher_A.p_state = pusher_A.state;
 8000e20:	4b82      	ldr	r3, [pc, #520]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8000e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e26:	4981      	ldr	r1, [pc, #516]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8000e28:	e9c1 2302 	strd	r2, r3, [r1, #8]
				pusher_A.count = 0;
 8000e2c:	4b7f      	ldr	r3, [pc, #508]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	619a      	str	r2, [r3, #24]
			}
		}
		if(pusher_B.d > 0){
 8000e32:	4b7f      	ldr	r3, [pc, #508]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000e34:	ed93 7b04 	vldr	d7, [r3, #16]
 8000e38:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e40:	dd2f      	ble.n	8000ea2 <HAL_TIM_PeriodElapsedCallback+0x41a>
			pusher_B.count++;
 8000e42:	4b7b      	ldr	r3, [pc, #492]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	3301      	adds	r3, #1
 8000e48:	4a79      	ldr	r2, [pc, #484]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000e4a:	6193      	str	r3, [r2, #24]
			HAL_GPIO_WritePin(PUSHER_B_IN1_PORT, PUSHER_B_IN1_PIN, GPIO_PIN_SET);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e52:	4874      	ldr	r0, [pc, #464]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8000e54:	f008 fb6e 	bl	8009534 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUSHER_B_IN2_PORT, PUSHER_B_IN2_PIN, GPIO_PIN_RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e5e:	4871      	ldr	r0, [pc, #452]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8000e60:	f008 fb68 	bl	8009534 <HAL_GPIO_WritePin>
			if(pusher_B.count > pusher_B.d*1000/PUSHER_SPEED){
 8000e64:	4b72      	ldr	r3, [pc, #456]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	ee07 3a90 	vmov	s15, r3
 8000e6c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000e70:	4b6f      	ldr	r3, [pc, #444]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000e72:	ed93 7b04 	vldr	d7, [r3, #16]
 8000e76:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8001010 <HAL_TIM_PeriodElapsedCallback+0x588>
 8000e7a:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000e7e:	ed9f 4b66 	vldr	d4, [pc, #408]	; 8001018 <HAL_TIM_PeriodElapsedCallback+0x590>
 8000e82:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000e86:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e8e:	dd08      	ble.n	8000ea2 <HAL_TIM_PeriodElapsedCallback+0x41a>
				pusher_B.p_state = pusher_B.state;
 8000e90:	4b67      	ldr	r3, [pc, #412]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e96:	4966      	ldr	r1, [pc, #408]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000e98:	e9c1 2302 	strd	r2, r3, [r1, #8]
				pusher_B.count = 0;
 8000e9c:	4b64      	ldr	r3, [pc, #400]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	619a      	str	r2, [r3, #24]
//				pusher_D.p_state = pusher_D.state;
//				pusher_D.count = 0;
//			}
//		}
		/*pusher up*/
		if(pusher_A.d < 0){
 8000ea2:	4b62      	ldr	r3, [pc, #392]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8000ea4:	ed93 7b04 	vldr	d7, [r3, #16]
 8000ea8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eb0:	d531      	bpl.n	8000f16 <HAL_TIM_PeriodElapsedCallback+0x48e>
			pusher_A.count++;
 8000eb2:	4b5e      	ldr	r3, [pc, #376]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	4a5c      	ldr	r2, [pc, #368]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8000eba:	6193      	str	r3, [r2, #24]
			HAL_GPIO_WritePin(PUSHER_A_IN1_PORT, PUSHER_A_IN1_PIN, GPIO_PIN_RESET);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ec2:	4858      	ldr	r0, [pc, #352]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8000ec4:	f008 fb36 	bl	8009534 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUSHER_A_IN2_PORT, PUSHER_A_IN2_PIN, GPIO_PIN_SET);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ece:	4855      	ldr	r0, [pc, #340]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8000ed0:	f008 fb30 	bl	8009534 <HAL_GPIO_WritePin>
			if(pusher_A.count > -pusher_A.d*1000/PUSHER_SPEED){
 8000ed4:	4b55      	ldr	r3, [pc, #340]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	ee07 3a90 	vmov	s15, r3
 8000edc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000ee0:	4b52      	ldr	r3, [pc, #328]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8000ee2:	ed93 7b04 	vldr	d7, [r3, #16]
 8000ee6:	eeb1 7b47 	vneg.f64	d7, d7
 8000eea:	ed9f 5b49 	vldr	d5, [pc, #292]	; 8001010 <HAL_TIM_PeriodElapsedCallback+0x588>
 8000eee:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000ef2:	ed9f 4b49 	vldr	d4, [pc, #292]	; 8001018 <HAL_TIM_PeriodElapsedCallback+0x590>
 8000ef6:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000efa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f02:	dd08      	ble.n	8000f16 <HAL_TIM_PeriodElapsedCallback+0x48e>
				pusher_A.p_state = pusher_A.state;
 8000f04:	4b49      	ldr	r3, [pc, #292]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8000f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f0a:	4948      	ldr	r1, [pc, #288]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8000f0c:	e9c1 2302 	strd	r2, r3, [r1, #8]
				pusher_A.count = 0;
 8000f10:	4b46      	ldr	r3, [pc, #280]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	619a      	str	r2, [r3, #24]
			}
		}
		if(pusher_B.d < 0){
 8000f16:	4b46      	ldr	r3, [pc, #280]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000f18:	ed93 7b04 	vldr	d7, [r3, #16]
 8000f1c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f24:	d531      	bpl.n	8000f8a <HAL_TIM_PeriodElapsedCallback+0x502>
			pusher_B.count++;
 8000f26:	4b42      	ldr	r3, [pc, #264]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000f28:	699b      	ldr	r3, [r3, #24]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	4a40      	ldr	r2, [pc, #256]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000f2e:	6193      	str	r3, [r2, #24]
			HAL_GPIO_WritePin(PUSHER_B_IN1_PORT, PUSHER_B_IN1_PIN, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f36:	483b      	ldr	r0, [pc, #236]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8000f38:	f008 fafc 	bl	8009534 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUSHER_B_IN2_PORT, PUSHER_B_IN2_PIN, GPIO_PIN_SET);
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f42:	4838      	ldr	r0, [pc, #224]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8000f44:	f008 faf6 	bl	8009534 <HAL_GPIO_WritePin>
			if(pusher_B.count > -pusher_B.d*1000/PUSHER_SPEED){
 8000f48:	4b39      	ldr	r3, [pc, #228]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	ee07 3a90 	vmov	s15, r3
 8000f50:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000f54:	4b36      	ldr	r3, [pc, #216]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000f56:	ed93 7b04 	vldr	d7, [r3, #16]
 8000f5a:	eeb1 7b47 	vneg.f64	d7, d7
 8000f5e:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8001010 <HAL_TIM_PeriodElapsedCallback+0x588>
 8000f62:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000f66:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 8001018 <HAL_TIM_PeriodElapsedCallback+0x590>
 8000f6a:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000f6e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f76:	dd08      	ble.n	8000f8a <HAL_TIM_PeriodElapsedCallback+0x502>
				pusher_B.p_state = pusher_B.state;
 8000f78:	4b2d      	ldr	r3, [pc, #180]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7e:	492c      	ldr	r1, [pc, #176]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000f80:	e9c1 2302 	strd	r2, r3, [r1, #8]
				pusher_B.count = 0;
 8000f84:	4b2a      	ldr	r3, [pc, #168]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	619a      	str	r2, [r3, #24]
//				pusher_D.p_state = pusher_D.state;
//				pusher_D.count = 0;
//			}
//		}
		/*pusher stop*/
		if(pusher_A.d == 0){
 8000f8a:	4b28      	ldr	r3, [pc, #160]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8000f8c:	ed93 7b04 	vldr	d7, [r3, #16]
 8000f90:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f98:	d10b      	bne.n	8000fb2 <HAL_TIM_PeriodElapsedCallback+0x52a>
			HAL_GPIO_WritePin(PUSHER_A_IN1_PORT, PUSHER_A_IN1_PIN, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fa0:	4820      	ldr	r0, [pc, #128]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8000fa2:	f008 fac7 	bl	8009534 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUSHER_A_IN2_PORT, PUSHER_A_IN2_PIN, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fac:	481d      	ldr	r0, [pc, #116]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8000fae:	f008 fac1 	bl	8009534 <HAL_GPIO_WritePin>
		}
		if(pusher_B.d == 0){
 8000fb2:	4b1f      	ldr	r3, [pc, #124]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000fb4:	ed93 7b04 	vldr	d7, [r3, #16]
 8000fb8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc0:	d10b      	bne.n	8000fda <HAL_TIM_PeriodElapsedCallback+0x552>
			HAL_GPIO_WritePin(PUSHER_B_IN1_PORT, PUSHER_B_IN1_PIN, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fc8:	4816      	ldr	r0, [pc, #88]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8000fca:	f008 fab3 	bl	8009534 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUSHER_B_IN2_PORT, PUSHER_B_IN2_PIN, GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fd4:	4813      	ldr	r0, [pc, #76]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8000fd6:	f008 faad 	bl	8009534 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(PUSHER_D_IN1_PORT, PUSHER_D_IN1_PIN, GPIO_PIN_RESET);
//			HAL_GPIO_WritePin(PUSHER_D_IN2_PORT, PUSHER_D_IN2_PIN, GPIO_PIN_RESET);
//		}
//
	}
	if(htim->Instance == TIM23){/*for script*/
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a15      	ldr	r2, [pc, #84]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d111      	bne.n	8001008 <HAL_TIM_PeriodElapsedCallback+0x580>
		if(delay_start!=0){
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d004      	beq.n	8000ff6 <HAL_TIM_PeriodElapsedCallback+0x56e>
			delay++;
 8000fec:	4b13      	ldr	r3, [pc, #76]	; (800103c <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	4a12      	ldr	r2, [pc, #72]	; (800103c <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8000ff4:	6013      	str	r3, [r2, #0]
		}
		if(delay_start_2!=0){
 8000ff6:	4b12      	ldr	r3, [pc, #72]	; (8001040 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d004      	beq.n	8001008 <HAL_TIM_PeriodElapsedCallback+0x580>
			delay_2++;
 8000ffe:	4b11      	ldr	r3, [pc, #68]	; (8001044 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	3301      	adds	r3, #1
 8001004:	4a0f      	ldr	r2, [pc, #60]	; (8001044 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8001006:	6013      	str	r3, [r2, #0]
//			script_wheel(0,0,0);
//			script_pusher(0,10,0,0);
//		}

	}
}
 8001008:	bf00      	nop
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	00000000 	.word	0x00000000
 8001014:	408f4000 	.word	0x408f4000
 8001018:	cccccccd 	.word	0xcccccccd
 800101c:	4040cccc 	.word	0x4040cccc
 8001020:	240000f0 	.word	0x240000f0
 8001024:	58021000 	.word	0x58021000
 8001028:	40010400 	.word	0x40010400
 800102c:	24000988 	.word	0x24000988
 8001030:	240009a8 	.word	0x240009a8
 8001034:	4000e000 	.word	0x4000e000
 8001038:	240002b0 	.word	0x240002b0
 800103c:	240002b4 	.word	0x240002b4
 8001040:	240002b8 	.word	0x240002b8
 8001044:	240002bc 	.word	0x240002bc

08001048 <_Z13DC_motor_initv>:
DC_motor FL(15.96559764,31.71747647,0,216,512,1000);//motor_1
DC_motor BL(24.18280423,91.68881006,0,216,512,1000);//motor_2
DC_motor BR(21.19552541,50.08697147,0,216,512,1000);//motor_3
DC_motor FR(32.6189283,77.45068509,0,216,512,1000);//motor_4

void DC_motor_init(){
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
	//enc_1
	HAL_TIM_Encoder_Start_IT(&htim2,TIM_CHANNEL_1);
 800104c:	2100      	movs	r1, #0
 800104e:	4818      	ldr	r0, [pc, #96]	; (80010b0 <_Z13DC_motor_initv+0x68>)
 8001050:	f00b fae4 	bl	800c61c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim2,TIM_CHANNEL_2);
 8001054:	2104      	movs	r1, #4
 8001056:	4816      	ldr	r0, [pc, #88]	; (80010b0 <_Z13DC_motor_initv+0x68>)
 8001058:	f00b fae0 	bl	800c61c <HAL_TIM_Encoder_Start_IT>
 	HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_2);//VNH5019_1_PWM
 800105c:	2104      	movs	r1, #4
 800105e:	4815      	ldr	r0, [pc, #84]	; (80010b4 <_Z13DC_motor_initv+0x6c>)
 8001060:	f00b f91a 	bl	800c298 <HAL_TIM_PWM_Start>
 	//enc_2
 	HAL_TIM_Encoder_Start_IT(&htim5,TIM_CHANNEL_1);
 8001064:	2100      	movs	r1, #0
 8001066:	4814      	ldr	r0, [pc, #80]	; (80010b8 <_Z13DC_motor_initv+0x70>)
 8001068:	f00b fad8 	bl	800c61c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim5,TIM_CHANNEL_2);
 800106c:	2104      	movs	r1, #4
 800106e:	4812      	ldr	r0, [pc, #72]	; (80010b8 <_Z13DC_motor_initv+0x70>)
 8001070:	f00b fad4 	bl	800c61c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_1);//VNH5019_2_PWM
 8001074:	2100      	movs	r1, #0
 8001076:	480f      	ldr	r0, [pc, #60]	; (80010b4 <_Z13DC_motor_initv+0x6c>)
 8001078:	f00b f90e 	bl	800c298 <HAL_TIM_PWM_Start>
	//enc_3
	HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_1);
 800107c:	2100      	movs	r1, #0
 800107e:	480f      	ldr	r0, [pc, #60]	; (80010bc <_Z13DC_motor_initv+0x74>)
 8001080:	f00b facc 	bl	800c61c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_2);
 8001084:	2104      	movs	r1, #4
 8001086:	480d      	ldr	r0, [pc, #52]	; (80010bc <_Z13DC_motor_initv+0x74>)
 8001088:	f00b fac8 	bl	800c61c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(&htim15,TIM_CHANNEL_1);//VNH5019_3_PWM
 800108c:	2100      	movs	r1, #0
 800108e:	480c      	ldr	r0, [pc, #48]	; (80010c0 <_Z13DC_motor_initv+0x78>)
 8001090:	f00b f902 	bl	800c298 <HAL_TIM_PWM_Start>
	//enc_4
	HAL_TIM_Encoder_Start_IT(&htim4,TIM_CHANNEL_1);
 8001094:	2100      	movs	r1, #0
 8001096:	480b      	ldr	r0, [pc, #44]	; (80010c4 <_Z13DC_motor_initv+0x7c>)
 8001098:	f00b fac0 	bl	800c61c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim4,TIM_CHANNEL_2);
 800109c:	2104      	movs	r1, #4
 800109e:	4809      	ldr	r0, [pc, #36]	; (80010c4 <_Z13DC_motor_initv+0x7c>)
 80010a0:	f00b fabc 	bl	800c61c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(&htim15,TIM_CHANNEL_2);//VNH5019_4_PWM
 80010a4:	2104      	movs	r1, #4
 80010a6:	4806      	ldr	r0, [pc, #24]	; (80010c0 <_Z13DC_motor_initv+0x78>)
 80010a8:	f00b f8f6 	bl	800c298 <HAL_TIM_PWM_Start>
}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	240004ec 	.word	0x240004ec
 80010b4:	24000668 	.word	0x24000668
 80010b8:	240005d0 	.word	0x240005d0
 80010bc:	24000538 	.word	0x24000538
 80010c0:	240006b4 	.word	0x240006b4
 80010c4:	24000584 	.word	0x24000584

080010c8 <_ZN8DC_motorC1Edddddd>:

//motor Instance
DC_motor::DC_motor(double p, double i, double d, double ratio, double res, double PWM_span){
 80010c8:	b480      	push	{r7}
 80010ca:	b08f      	sub	sp, #60	; 0x3c
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6378      	str	r0, [r7, #52]	; 0x34
 80010d0:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 80010d4:	ed87 1b08 	vstr	d1, [r7, #32]
 80010d8:	ed87 2b06 	vstr	d2, [r7, #24]
 80010dc:	ed87 3b04 	vstr	d3, [r7, #16]
 80010e0:	ed87 4b02 	vstr	d4, [r7, #8]
 80010e4:	ed87 5b00 	vstr	d5, [r7]
 80010e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80010ea:	f04f 0200 	mov.w	r2, #0
 80010ee:	f04f 0300 	mov.w	r3, #0
 80010f2:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80010f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	f04f 0300 	mov.w	r3, #0
 8001100:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8001104:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001106:	f04f 0200 	mov.w	r2, #0
 800110a:	f04f 0300 	mov.w	r3, #0
 800110e:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8001112:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001114:	f04f 0200 	mov.w	r2, #0
 8001118:	f04f 0300 	mov.w	r3, #0
 800111c:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	this->kp = p;
 8001120:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001122:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001126:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	this->ki = i;
 800112a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800112c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001130:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	this->kd = d;
 8001134:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001136:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800113a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	this->reduction_ratio = ratio;
 800113e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001140:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001144:	e9c1 2302 	strd	r2, r3, [r1, #8]
	this->resolution = res;
 8001148:	ed97 7b02 	vldr	d7, [r7, #8]
 800114c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001150:	ee17 2a90 	vmov	r2, s15
 8001154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001156:	601a      	str	r2, [r3, #0]
	this->ARR = PWM_span;
 8001158:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800115a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800115e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8001162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001164:	4618      	mov	r0, r3
 8001166:	373c      	adds	r7, #60	; 0x3c
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <_Z41__static_initialization_and_destruction_0ii>:
	u = kp * error + ki * integral + kd * differential;
	if (u > 1) u = 1;
	else if (u < -1) u = -1;

	return (int) u*ARR;
}
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d140      	bne.n	8001202 <_Z41__static_initialization_and_destruction_0ii+0x92>
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001186:	4293      	cmp	r3, r2
 8001188:	d13b      	bne.n	8001202 <_Z41__static_initialization_and_destruction_0ii+0x92>
DC_motor FL(15.96559764,31.71747647,0,216,512,1000);//motor_1
 800118a:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8001210 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 800118e:	ed9f 4b22 	vldr	d4, [pc, #136]	; 8001218 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 8001192:	ed9f 3b23 	vldr	d3, [pc, #140]	; 8001220 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 8001196:	ed9f 2b24 	vldr	d2, [pc, #144]	; 8001228 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 800119a:	ed9f 1b25 	vldr	d1, [pc, #148]	; 8001230 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 800119e:	ed9f 0b26 	vldr	d0, [pc, #152]	; 8001238 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 80011a2:	4833      	ldr	r0, [pc, #204]	; (8001270 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 80011a4:	f7ff ff90 	bl	80010c8 <_ZN8DC_motorC1Edddddd>
DC_motor BL(24.18280423,91.68881006,0,216,512,1000);//motor_2
 80011a8:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8001210 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 80011ac:	ed9f 4b1a 	vldr	d4, [pc, #104]	; 8001218 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 80011b0:	ed9f 3b1b 	vldr	d3, [pc, #108]	; 8001220 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 80011b4:	ed9f 2b1c 	vldr	d2, [pc, #112]	; 8001228 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 80011b8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8001240 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 80011bc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8001248 <_Z41__static_initialization_and_destruction_0ii+0xd8>
 80011c0:	482c      	ldr	r0, [pc, #176]	; (8001274 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 80011c2:	f7ff ff81 	bl	80010c8 <_ZN8DC_motorC1Edddddd>
DC_motor BR(21.19552541,50.08697147,0,216,512,1000);//motor_3
 80011c6:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8001210 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 80011ca:	ed9f 4b13 	vldr	d4, [pc, #76]	; 8001218 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 80011ce:	ed9f 3b14 	vldr	d3, [pc, #80]	; 8001220 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 80011d2:	ed9f 2b15 	vldr	d2, [pc, #84]	; 8001228 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 80011d6:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 8001250 <_Z41__static_initialization_and_destruction_0ii+0xe0>
 80011da:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8001258 <_Z41__static_initialization_and_destruction_0ii+0xe8>
 80011de:	4826      	ldr	r0, [pc, #152]	; (8001278 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 80011e0:	f7ff ff72 	bl	80010c8 <_ZN8DC_motorC1Edddddd>
DC_motor FR(32.6189283,77.45068509,0,216,512,1000);//motor_4
 80011e4:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8001210 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 80011e8:	ed9f 4b0b 	vldr	d4, [pc, #44]	; 8001218 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 80011ec:	ed9f 3b0c 	vldr	d3, [pc, #48]	; 8001220 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 80011f0:	ed9f 2b0d 	vldr	d2, [pc, #52]	; 8001228 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 80011f4:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8001260 <_Z41__static_initialization_and_destruction_0ii+0xf0>
 80011f8:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8001268 <_Z41__static_initialization_and_destruction_0ii+0xf8>
 80011fc:	481f      	ldr	r0, [pc, #124]	; (800127c <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 80011fe:	f7ff ff63 	bl	80010c8 <_ZN8DC_motorC1Edddddd>
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	f3af 8000 	nop.w
 8001210:	00000000 	.word	0x00000000
 8001214:	408f4000 	.word	0x408f4000
 8001218:	00000000 	.word	0x00000000
 800121c:	40800000 	.word	0x40800000
 8001220:	00000000 	.word	0x00000000
 8001224:	406b0000 	.word	0x406b0000
	...
 8001230:	89b64cae 	.word	0x89b64cae
 8001234:	403fb7ac 	.word	0x403fb7ac
 8001238:	d059ca21 	.word	0xd059ca21
 800123c:	402fee62 	.word	0x402fee62
 8001240:	76ca36c5 	.word	0x76ca36c5
 8001244:	4056ec15 	.word	0x4056ec15
 8001248:	420d6ba3 	.word	0x420d6ba3
 800124c:	40382ecc 	.word	0x40382ecc
 8001250:	e191aae3 	.word	0xe191aae3
 8001254:	40490b21 	.word	0x40490b21
 8001258:	f4097cab 	.word	0xf4097cab
 800125c:	4035320d 	.word	0x4035320d
 8001260:	06469611 	.word	0x06469611
 8001264:	40535cd8 	.word	0x40535cd8
 8001268:	0ae388d1 	.word	0x0ae388d1
 800126c:	40404f39 	.word	0x40404f39
 8001270:	240002c0 	.word	0x240002c0
 8001274:	24000338 	.word	0x24000338
 8001278:	240003b0 	.word	0x240003b0
 800127c:	24000428 	.word	0x24000428

08001280 <_GLOBAL__sub_I_FL>:
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
 8001284:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001288:	2001      	movs	r0, #1
 800128a:	f7ff ff71 	bl	8001170 <_Z41__static_initialization_and_destruction_0ii>
 800128e:	bd80      	pop	{r7, pc}

08001290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001294:	f004 fce2 	bl	8005c5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001298:	f000 f81e 	bl	80012d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800129c:	f000 fc7c 	bl	8001b98 <MX_GPIO_Init>
  MX_TIM2_Init();
 80012a0:	f000 f8de 	bl	8001460 <MX_TIM2_Init>
  MX_TIM3_Init();
 80012a4:	f000 f930 	bl	8001508 <MX_TIM3_Init>
  MX_TIM4_Init();
 80012a8:	f000 f984 	bl	80015b4 <MX_TIM4_Init>
  MX_TIM5_Init();
 80012ac:	f000 f9d8 	bl	8001660 <MX_TIM5_Init>
  MX_TIM12_Init();
 80012b0:	f000 fa80 	bl	80017b4 <MX_TIM12_Init>
  MX_TIM15_Init();
 80012b4:	f000 face 	bl	8001854 <MX_TIM15_Init>
  MX_TIM1_Init();
 80012b8:	f000 f87e 	bl	80013b8 <MX_TIM1_Init>
  MX_TIM8_Init();
 80012bc:	f000 fa26 	bl	800170c <MX_TIM8_Init>
  MX_TIM23_Init();
 80012c0:	f000 fb5a 	bl	8001978 <MX_TIM23_Init>
  MX_USART1_UART_Init();
 80012c4:	f000 fba6 	bl	8001a14 <MX_USART1_UART_Init>
  MX_DMA_Init();
 80012c8:	f000 fc3e 	bl	8001b48 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80012cc:	f000 fbee 	bl	8001aac <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 80012d0:	f000 fd9c 	bl	8001e0c <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <main+0x44>
	...

080012d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b09c      	sub	sp, #112	; 0x70
 80012dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e2:	224c      	movs	r2, #76	; 0x4c
 80012e4:	2100      	movs	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f00e fd55 	bl	800fd96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	2220      	movs	r2, #32
 80012f0:	2100      	movs	r1, #0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f00e fd4f 	bl	800fd96 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80012f8:	2002      	movs	r0, #2
 80012fa:	f008 f935 	bl	8009568 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012fe:	2300      	movs	r3, #0
 8001300:	603b      	str	r3, [r7, #0]
 8001302:	4b2c      	ldr	r3, [pc, #176]	; (80013b4 <SystemClock_Config+0xdc>)
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800130a:	4a2a      	ldr	r2, [pc, #168]	; (80013b4 <SystemClock_Config+0xdc>)
 800130c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001310:	6193      	str	r3, [r2, #24]
 8001312:	4b28      	ldr	r3, [pc, #160]	; (80013b4 <SystemClock_Config+0xdc>)
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800131a:	603b      	str	r3, [r7, #0]
 800131c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800131e:	bf00      	nop
 8001320:	4b24      	ldr	r3, [pc, #144]	; (80013b4 <SystemClock_Config+0xdc>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001328:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800132c:	d1f8      	bne.n	8001320 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800132e:	2301      	movs	r3, #1
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001332:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001338:	2302      	movs	r3, #2
 800133a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800133c:	2302      	movs	r3, #2
 800133e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001340:	2301      	movs	r3, #1
 8001342:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 42;
 8001344:	232a      	movs	r3, #42	; 0x2a
 8001346:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001348:	2302      	movs	r3, #2
 800134a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800134c:	2302      	movs	r3, #2
 800134e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001350:	2302      	movs	r3, #2
 8001352:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001354:	230c      	movs	r3, #12
 8001356:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001358:	2300      	movs	r3, #0
 800135a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001360:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001364:	4618      	mov	r0, r3
 8001366:	f008 f939 	bl	80095dc <HAL_RCC_OscConfig>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001370:	f000 fd24 	bl	8001dbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001374:	233f      	movs	r3, #63	; 0x3f
 8001376:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001378:	2303      	movs	r3, #3
 800137a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001380:	2308      	movs	r3, #8
 8001382:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001384:	2340      	movs	r3, #64	; 0x40
 8001386:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001388:	2340      	movs	r3, #64	; 0x40
 800138a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800138c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001390:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001392:	2340      	movs	r3, #64	; 0x40
 8001394:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	2102      	movs	r1, #2
 800139a:	4618      	mov	r0, r3
 800139c:	f008 fcf8 	bl	8009d90 <HAL_RCC_ClockConfig>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80013a6:	f000 fd09 	bl	8001dbc <Error_Handler>
  }
}
 80013aa:	bf00      	nop
 80013ac:	3770      	adds	r7, #112	; 0x70
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	58024800 	.word	0x58024800

080013b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b088      	sub	sp, #32
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013be:	f107 0310 	add.w	r3, r7, #16
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013d6:	4b20      	ldr	r3, [pc, #128]	; (8001458 <MX_TIM1_Init+0xa0>)
 80013d8:	4a20      	ldr	r2, [pc, #128]	; (800145c <MX_TIM1_Init+0xa4>)
 80013da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 80013dc:	4b1e      	ldr	r3, [pc, #120]	; (8001458 <MX_TIM1_Init+0xa0>)
 80013de:	2253      	movs	r2, #83	; 0x53
 80013e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e2:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <MX_TIM1_Init+0xa0>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3999;
 80013e8:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <MX_TIM1_Init+0xa0>)
 80013ea:	f640 729f 	movw	r2, #3999	; 0xf9f
 80013ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f0:	4b19      	ldr	r3, [pc, #100]	; (8001458 <MX_TIM1_Init+0xa0>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013f6:	4b18      	ldr	r3, [pc, #96]	; (8001458 <MX_TIM1_Init+0xa0>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fc:	4b16      	ldr	r3, [pc, #88]	; (8001458 <MX_TIM1_Init+0xa0>)
 80013fe:	2200      	movs	r2, #0
 8001400:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001402:	4815      	ldr	r0, [pc, #84]	; (8001458 <MX_TIM1_Init+0xa0>)
 8001404:	f00a fe12 	bl	800c02c <HAL_TIM_Base_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800140e:	f000 fcd5 	bl	8001dbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001412:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001416:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001418:	f107 0310 	add.w	r3, r7, #16
 800141c:	4619      	mov	r1, r3
 800141e:	480e      	ldr	r0, [pc, #56]	; (8001458 <MX_TIM1_Init+0xa0>)
 8001420:	f00b fbde 	bl	800cbe0 <HAL_TIM_ConfigClockSource>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800142a:	f000 fcc7 	bl	8001dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142e:	2300      	movs	r3, #0
 8001430:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001432:	2300      	movs	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	4619      	mov	r1, r3
 800143e:	4806      	ldr	r0, [pc, #24]	; (8001458 <MX_TIM1_Init+0xa0>)
 8001440:	f00c f92e 	bl	800d6a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800144a:	f000 fcb7 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800144e:	bf00      	nop
 8001450:	3720      	adds	r7, #32
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	240004a0 	.word	0x240004a0
 800145c:	40010000 	.word	0x40010000

08001460 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08c      	sub	sp, #48	; 0x30
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001466:	f107 030c 	add.w	r3, r7, #12
 800146a:	2224      	movs	r2, #36	; 0x24
 800146c:	2100      	movs	r1, #0
 800146e:	4618      	mov	r0, r3
 8001470:	f00e fc91 	bl	800fd96 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001474:	463b      	mov	r3, r7
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800147e:	4b21      	ldr	r3, [pc, #132]	; (8001504 <MX_TIM2_Init+0xa4>)
 8001480:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001484:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001486:	4b1f      	ldr	r3, [pc, #124]	; (8001504 <MX_TIM2_Init+0xa4>)
 8001488:	2200      	movs	r2, #0
 800148a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148c:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <MX_TIM2_Init+0xa4>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001492:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <MX_TIM2_Init+0xa4>)
 8001494:	f04f 32ff 	mov.w	r2, #4294967295
 8001498:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800149a:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <MX_TIM2_Init+0xa4>)
 800149c:	2200      	movs	r2, #0
 800149e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a0:	4b18      	ldr	r3, [pc, #96]	; (8001504 <MX_TIM2_Init+0xa4>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014a6:	2303      	movs	r3, #3
 80014a8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014ae:	2301      	movs	r3, #1
 80014b0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014ba:	2300      	movs	r3, #0
 80014bc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014be:	2301      	movs	r3, #1
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014c2:	2300      	movs	r3, #0
 80014c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80014ca:	f107 030c 	add.w	r3, r7, #12
 80014ce:	4619      	mov	r1, r3
 80014d0:	480c      	ldr	r0, [pc, #48]	; (8001504 <MX_TIM2_Init+0xa4>)
 80014d2:	f00a fffd 	bl	800c4d0 <HAL_TIM_Encoder_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80014dc:	f000 fc6e 	bl	8001dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e0:	2300      	movs	r3, #0
 80014e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014e8:	463b      	mov	r3, r7
 80014ea:	4619      	mov	r1, r3
 80014ec:	4805      	ldr	r0, [pc, #20]	; (8001504 <MX_TIM2_Init+0xa4>)
 80014ee:	f00c f8d7 	bl	800d6a0 <HAL_TIMEx_MasterConfigSynchronization>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80014f8:	f000 fc60 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014fc:	bf00      	nop
 80014fe:	3730      	adds	r7, #48	; 0x30
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	240004ec 	.word	0x240004ec

08001508 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08c      	sub	sp, #48	; 0x30
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800150e:	f107 030c 	add.w	r3, r7, #12
 8001512:	2224      	movs	r2, #36	; 0x24
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f00e fc3d 	bl	800fd96 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800151c:	463b      	mov	r3, r7
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001526:	4b21      	ldr	r3, [pc, #132]	; (80015ac <MX_TIM3_Init+0xa4>)
 8001528:	4a21      	ldr	r2, [pc, #132]	; (80015b0 <MX_TIM3_Init+0xa8>)
 800152a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800152c:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <MX_TIM3_Init+0xa4>)
 800152e:	2200      	movs	r2, #0
 8001530:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001532:	4b1e      	ldr	r3, [pc, #120]	; (80015ac <MX_TIM3_Init+0xa4>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001538:	4b1c      	ldr	r3, [pc, #112]	; (80015ac <MX_TIM3_Init+0xa4>)
 800153a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800153e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001540:	4b1a      	ldr	r3, [pc, #104]	; (80015ac <MX_TIM3_Init+0xa4>)
 8001542:	2200      	movs	r2, #0
 8001544:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001546:	4b19      	ldr	r3, [pc, #100]	; (80015ac <MX_TIM3_Init+0xa4>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800154c:	2303      	movs	r3, #3
 800154e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001550:	2300      	movs	r3, #0
 8001552:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001554:	2301      	movs	r3, #1
 8001556:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001558:	2300      	movs	r3, #0
 800155a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001560:	2300      	movs	r3, #0
 8001562:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001564:	2301      	movs	r3, #1
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001568:	2300      	movs	r3, #0
 800156a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001570:	f107 030c 	add.w	r3, r7, #12
 8001574:	4619      	mov	r1, r3
 8001576:	480d      	ldr	r0, [pc, #52]	; (80015ac <MX_TIM3_Init+0xa4>)
 8001578:	f00a ffaa 	bl	800c4d0 <HAL_TIM_Encoder_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001582:	f000 fc1b 	bl	8001dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001586:	2300      	movs	r3, #0
 8001588:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800158a:	2300      	movs	r3, #0
 800158c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800158e:	463b      	mov	r3, r7
 8001590:	4619      	mov	r1, r3
 8001592:	4806      	ldr	r0, [pc, #24]	; (80015ac <MX_TIM3_Init+0xa4>)
 8001594:	f00c f884 	bl	800d6a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800159e:	f000 fc0d 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015a2:	bf00      	nop
 80015a4:	3730      	adds	r7, #48	; 0x30
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	24000538 	.word	0x24000538
 80015b0:	40000400 	.word	0x40000400

080015b4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08c      	sub	sp, #48	; 0x30
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015ba:	f107 030c 	add.w	r3, r7, #12
 80015be:	2224      	movs	r2, #36	; 0x24
 80015c0:	2100      	movs	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f00e fbe7 	bl	800fd96 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c8:	463b      	mov	r3, r7
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015d2:	4b21      	ldr	r3, [pc, #132]	; (8001658 <MX_TIM4_Init+0xa4>)
 80015d4:	4a21      	ldr	r2, [pc, #132]	; (800165c <MX_TIM4_Init+0xa8>)
 80015d6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80015d8:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <MX_TIM4_Init+0xa4>)
 80015da:	2200      	movs	r2, #0
 80015dc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015de:	4b1e      	ldr	r3, [pc, #120]	; (8001658 <MX_TIM4_Init+0xa4>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80015e4:	4b1c      	ldr	r3, [pc, #112]	; (8001658 <MX_TIM4_Init+0xa4>)
 80015e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015ea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ec:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <MX_TIM4_Init+0xa4>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f2:	4b19      	ldr	r3, [pc, #100]	; (8001658 <MX_TIM4_Init+0xa4>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015f8:	2303      	movs	r3, #3
 80015fa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015fc:	2300      	movs	r3, #0
 80015fe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001600:	2301      	movs	r3, #1
 8001602:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001604:	2300      	movs	r3, #0
 8001606:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800160c:	2300      	movs	r3, #0
 800160e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001610:	2301      	movs	r3, #1
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001614:	2300      	movs	r3, #0
 8001616:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800161c:	f107 030c 	add.w	r3, r7, #12
 8001620:	4619      	mov	r1, r3
 8001622:	480d      	ldr	r0, [pc, #52]	; (8001658 <MX_TIM4_Init+0xa4>)
 8001624:	f00a ff54 	bl	800c4d0 <HAL_TIM_Encoder_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800162e:	f000 fbc5 	bl	8001dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001632:	2300      	movs	r3, #0
 8001634:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001636:	2300      	movs	r3, #0
 8001638:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800163a:	463b      	mov	r3, r7
 800163c:	4619      	mov	r1, r3
 800163e:	4806      	ldr	r0, [pc, #24]	; (8001658 <MX_TIM4_Init+0xa4>)
 8001640:	f00c f82e 	bl	800d6a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800164a:	f000 fbb7 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800164e:	bf00      	nop
 8001650:	3730      	adds	r7, #48	; 0x30
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	24000584 	.word	0x24000584
 800165c:	40000800 	.word	0x40000800

08001660 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08c      	sub	sp, #48	; 0x30
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001666:	f107 030c 	add.w	r3, r7, #12
 800166a:	2224      	movs	r2, #36	; 0x24
 800166c:	2100      	movs	r1, #0
 800166e:	4618      	mov	r0, r3
 8001670:	f00e fb91 	bl	800fd96 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001674:	463b      	mov	r3, r7
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800167e:	4b21      	ldr	r3, [pc, #132]	; (8001704 <MX_TIM5_Init+0xa4>)
 8001680:	4a21      	ldr	r2, [pc, #132]	; (8001708 <MX_TIM5_Init+0xa8>)
 8001682:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001684:	4b1f      	ldr	r3, [pc, #124]	; (8001704 <MX_TIM5_Init+0xa4>)
 8001686:	2200      	movs	r2, #0
 8001688:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168a:	4b1e      	ldr	r3, [pc, #120]	; (8001704 <MX_TIM5_Init+0xa4>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001690:	4b1c      	ldr	r3, [pc, #112]	; (8001704 <MX_TIM5_Init+0xa4>)
 8001692:	f04f 32ff 	mov.w	r2, #4294967295
 8001696:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001698:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <MX_TIM5_Init+0xa4>)
 800169a:	2200      	movs	r2, #0
 800169c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800169e:	4b19      	ldr	r3, [pc, #100]	; (8001704 <MX_TIM5_Init+0xa4>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016a4:	2303      	movs	r3, #3
 80016a6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016a8:	2300      	movs	r3, #0
 80016aa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016ac:	2301      	movs	r3, #1
 80016ae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016b0:	2300      	movs	r3, #0
 80016b2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016b8:	2300      	movs	r3, #0
 80016ba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016bc:	2301      	movs	r3, #1
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016c0:	2300      	movs	r3, #0
 80016c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80016c8:	f107 030c 	add.w	r3, r7, #12
 80016cc:	4619      	mov	r1, r3
 80016ce:	480d      	ldr	r0, [pc, #52]	; (8001704 <MX_TIM5_Init+0xa4>)
 80016d0:	f00a fefe 	bl	800c4d0 <HAL_TIM_Encoder_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 80016da:	f000 fb6f 	bl	8001dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016de:	2300      	movs	r3, #0
 80016e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80016e6:	463b      	mov	r3, r7
 80016e8:	4619      	mov	r1, r3
 80016ea:	4806      	ldr	r0, [pc, #24]	; (8001704 <MX_TIM5_Init+0xa4>)
 80016ec:	f00b ffd8 	bl	800d6a0 <HAL_TIMEx_MasterConfigSynchronization>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80016f6:	f000 fb61 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80016fa:	bf00      	nop
 80016fc:	3730      	adds	r7, #48	; 0x30
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	240005d0 	.word	0x240005d0
 8001708:	40000c00 	.word	0x40000c00

0800170c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001712:	f107 0310 	add.w	r3, r7, #16
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001720:	1d3b      	adds	r3, r7, #4
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800172a:	4b20      	ldr	r3, [pc, #128]	; (80017ac <MX_TIM8_Init+0xa0>)
 800172c:	4a20      	ldr	r2, [pc, #128]	; (80017b0 <MX_TIM8_Init+0xa4>)
 800172e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 63;
 8001730:	4b1e      	ldr	r3, [pc, #120]	; (80017ac <MX_TIM8_Init+0xa0>)
 8001732:	223f      	movs	r2, #63	; 0x3f
 8001734:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001736:	4b1d      	ldr	r3, [pc, #116]	; (80017ac <MX_TIM8_Init+0xa0>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 800173c:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <MX_TIM8_Init+0xa0>)
 800173e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001742:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001744:	4b19      	ldr	r3, [pc, #100]	; (80017ac <MX_TIM8_Init+0xa0>)
 8001746:	2200      	movs	r2, #0
 8001748:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800174a:	4b18      	ldr	r3, [pc, #96]	; (80017ac <MX_TIM8_Init+0xa0>)
 800174c:	2200      	movs	r2, #0
 800174e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001750:	4b16      	ldr	r3, [pc, #88]	; (80017ac <MX_TIM8_Init+0xa0>)
 8001752:	2200      	movs	r2, #0
 8001754:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001756:	4815      	ldr	r0, [pc, #84]	; (80017ac <MX_TIM8_Init+0xa0>)
 8001758:	f00a fc68 	bl	800c02c <HAL_TIM_Base_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001762:	f000 fb2b 	bl	8001dbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800176a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800176c:	f107 0310 	add.w	r3, r7, #16
 8001770:	4619      	mov	r1, r3
 8001772:	480e      	ldr	r0, [pc, #56]	; (80017ac <MX_TIM8_Init+0xa0>)
 8001774:	f00b fa34 	bl	800cbe0 <HAL_TIM_ConfigClockSource>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800177e:	f000 fb1d 	bl	8001dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001782:	2300      	movs	r3, #0
 8001784:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001786:	2300      	movs	r3, #0
 8001788:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	4619      	mov	r1, r3
 8001792:	4806      	ldr	r0, [pc, #24]	; (80017ac <MX_TIM8_Init+0xa0>)
 8001794:	f00b ff84 	bl	800d6a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800179e:	f000 fb0d 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80017a2:	bf00      	nop
 80017a4:	3720      	adds	r7, #32
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	2400061c 	.word	0x2400061c
 80017b0:	40010400 	.word	0x40010400

080017b4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b088      	sub	sp, #32
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
 80017c8:	615a      	str	r2, [r3, #20]
 80017ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80017cc:	4b1f      	ldr	r3, [pc, #124]	; (800184c <MX_TIM12_Init+0x98>)
 80017ce:	4a20      	ldr	r2, [pc, #128]	; (8001850 <MX_TIM12_Init+0x9c>)
 80017d0:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80017d2:	4b1e      	ldr	r3, [pc, #120]	; (800184c <MX_TIM12_Init+0x98>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d8:	4b1c      	ldr	r3, [pc, #112]	; (800184c <MX_TIM12_Init+0x98>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 80017de:	4b1b      	ldr	r3, [pc, #108]	; (800184c <MX_TIM12_Init+0x98>)
 80017e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017e4:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e6:	4b19      	ldr	r3, [pc, #100]	; (800184c <MX_TIM12_Init+0x98>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ec:	4b17      	ldr	r3, [pc, #92]	; (800184c <MX_TIM12_Init+0x98>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80017f2:	4816      	ldr	r0, [pc, #88]	; (800184c <MX_TIM12_Init+0x98>)
 80017f4:	f00a fcf8 	bl	800c1e8 <HAL_TIM_PWM_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80017fe:	f000 fadd 	bl	8001dbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001802:	2360      	movs	r3, #96	; 0x60
 8001804:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001812:	1d3b      	adds	r3, r7, #4
 8001814:	2200      	movs	r2, #0
 8001816:	4619      	mov	r1, r3
 8001818:	480c      	ldr	r0, [pc, #48]	; (800184c <MX_TIM12_Init+0x98>)
 800181a:	f00b f8cd 	bl	800c9b8 <HAL_TIM_PWM_ConfigChannel>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001824:	f000 faca 	bl	8001dbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	2204      	movs	r2, #4
 800182c:	4619      	mov	r1, r3
 800182e:	4807      	ldr	r0, [pc, #28]	; (800184c <MX_TIM12_Init+0x98>)
 8001830:	f00b f8c2 	bl	800c9b8 <HAL_TIM_PWM_ConfigChannel>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 800183a:	f000 fabf 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800183e:	4803      	ldr	r0, [pc, #12]	; (800184c <MX_TIM12_Init+0x98>)
 8001840:	f003 fe78 	bl	8005534 <HAL_TIM_MspPostInit>

}
 8001844:	bf00      	nop
 8001846:	3720      	adds	r7, #32
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	24000668 	.word	0x24000668
 8001850:	40001800 	.word	0x40001800

08001854 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b098      	sub	sp, #96	; 0x60
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800185a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001866:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	609a      	str	r2, [r3, #8]
 8001872:	60da      	str	r2, [r3, #12]
 8001874:	611a      	str	r2, [r3, #16]
 8001876:	615a      	str	r2, [r3, #20]
 8001878:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800187a:	1d3b      	adds	r3, r7, #4
 800187c:	2234      	movs	r2, #52	; 0x34
 800187e:	2100      	movs	r1, #0
 8001880:	4618      	mov	r0, r3
 8001882:	f00e fa88 	bl	800fd96 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001886:	4b3a      	ldr	r3, [pc, #232]	; (8001970 <MX_TIM15_Init+0x11c>)
 8001888:	4a3a      	ldr	r2, [pc, #232]	; (8001974 <MX_TIM15_Init+0x120>)
 800188a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800188c:	4b38      	ldr	r3, [pc, #224]	; (8001970 <MX_TIM15_Init+0x11c>)
 800188e:	2200      	movs	r2, #0
 8001890:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001892:	4b37      	ldr	r3, [pc, #220]	; (8001970 <MX_TIM15_Init+0x11c>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8001898:	4b35      	ldr	r3, [pc, #212]	; (8001970 <MX_TIM15_Init+0x11c>)
 800189a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800189e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a0:	4b33      	ldr	r3, [pc, #204]	; (8001970 <MX_TIM15_Init+0x11c>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80018a6:	4b32      	ldr	r3, [pc, #200]	; (8001970 <MX_TIM15_Init+0x11c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ac:	4b30      	ldr	r3, [pc, #192]	; (8001970 <MX_TIM15_Init+0x11c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80018b2:	482f      	ldr	r0, [pc, #188]	; (8001970 <MX_TIM15_Init+0x11c>)
 80018b4:	f00a fc98 	bl	800c1e8 <HAL_TIM_PWM_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80018be:	f000 fa7d 	bl	8001dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c2:	2300      	movs	r3, #0
 80018c4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80018ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018ce:	4619      	mov	r1, r3
 80018d0:	4827      	ldr	r0, [pc, #156]	; (8001970 <MX_TIM15_Init+0x11c>)
 80018d2:	f00b fee5 	bl	800d6a0 <HAL_TIMEx_MasterConfigSynchronization>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80018dc:	f000 fa6e 	bl	8001dbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018e0:	2360      	movs	r3, #96	; 0x60
 80018e2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018e8:	2300      	movs	r3, #0
 80018ea:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018ec:	2300      	movs	r3, #0
 80018ee:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018f0:	2300      	movs	r3, #0
 80018f2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018f4:	2300      	movs	r3, #0
 80018f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018f8:	2300      	movs	r3, #0
 80018fa:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001900:	2200      	movs	r2, #0
 8001902:	4619      	mov	r1, r3
 8001904:	481a      	ldr	r0, [pc, #104]	; (8001970 <MX_TIM15_Init+0x11c>)
 8001906:	f00b f857 	bl	800c9b8 <HAL_TIM_PWM_ConfigChannel>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001910:	f000 fa54 	bl	8001dbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001914:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001918:	2204      	movs	r2, #4
 800191a:	4619      	mov	r1, r3
 800191c:	4814      	ldr	r0, [pc, #80]	; (8001970 <MX_TIM15_Init+0x11c>)
 800191e:	f00b f84b 	bl	800c9b8 <HAL_TIM_PWM_ConfigChannel>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8001928:	f000 fa48 	bl	8001dbc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800192c:	2300      	movs	r3, #0
 800192e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001930:	2300      	movs	r3, #0
 8001932:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001934:	2300      	movs	r3, #0
 8001936:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001940:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001944:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800194a:	2300      	movs	r3, #0
 800194c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800194e:	1d3b      	adds	r3, r7, #4
 8001950:	4619      	mov	r1, r3
 8001952:	4807      	ldr	r0, [pc, #28]	; (8001970 <MX_TIM15_Init+0x11c>)
 8001954:	f00b ff40 	bl	800d7d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 800195e:	f000 fa2d 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001962:	4803      	ldr	r0, [pc, #12]	; (8001970 <MX_TIM15_Init+0x11c>)
 8001964:	f003 fde6 	bl	8005534 <HAL_TIM_MspPostInit>

}
 8001968:	bf00      	nop
 800196a:	3760      	adds	r7, #96	; 0x60
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	240006b4 	.word	0x240006b4
 8001974:	40014000 	.word	0x40014000

08001978 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b088      	sub	sp, #32
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800197e:	f107 0310 	add.w	r3, r7, #16
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]
 8001988:	609a      	str	r2, [r3, #8]
 800198a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800198c:	1d3b      	adds	r3, r7, #4
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]
 8001994:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8001996:	4b1d      	ldr	r3, [pc, #116]	; (8001a0c <MX_TIM23_Init+0x94>)
 8001998:	4a1d      	ldr	r2, [pc, #116]	; (8001a10 <MX_TIM23_Init+0x98>)
 800199a:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 83;
 800199c:	4b1b      	ldr	r3, [pc, #108]	; (8001a0c <MX_TIM23_Init+0x94>)
 800199e:	2253      	movs	r2, #83	; 0x53
 80019a0:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a2:	4b1a      	ldr	r3, [pc, #104]	; (8001a0c <MX_TIM23_Init+0x94>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 9999;
 80019a8:	4b18      	ldr	r3, [pc, #96]	; (8001a0c <MX_TIM23_Init+0x94>)
 80019aa:	f242 720f 	movw	r2, #9999	; 0x270f
 80019ae:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b0:	4b16      	ldr	r3, [pc, #88]	; (8001a0c <MX_TIM23_Init+0x94>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b6:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <MX_TIM23_Init+0x94>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 80019bc:	4813      	ldr	r0, [pc, #76]	; (8001a0c <MX_TIM23_Init+0x94>)
 80019be:	f00a fb35 	bl	800c02c <HAL_TIM_Base_Init>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM23_Init+0x54>
  {
    Error_Handler();
 80019c8:	f000 f9f8 	bl	8001dbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 80019d2:	f107 0310 	add.w	r3, r7, #16
 80019d6:	4619      	mov	r1, r3
 80019d8:	480c      	ldr	r0, [pc, #48]	; (8001a0c <MX_TIM23_Init+0x94>)
 80019da:	f00b f901 	bl	800cbe0 <HAL_TIM_ConfigClockSource>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM23_Init+0x70>
  {
    Error_Handler();
 80019e4:	f000 f9ea 	bl	8001dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019e8:	2300      	movs	r3, #0
 80019ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 80019f0:	1d3b      	adds	r3, r7, #4
 80019f2:	4619      	mov	r1, r3
 80019f4:	4805      	ldr	r0, [pc, #20]	; (8001a0c <MX_TIM23_Init+0x94>)
 80019f6:	f00b fe53 	bl	800d6a0 <HAL_TIMEx_MasterConfigSynchronization>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_TIM23_Init+0x8c>
  {
    Error_Handler();
 8001a00:	f000 f9dc 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8001a04:	bf00      	nop
 8001a06:	3720      	adds	r7, #32
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	24000700 	.word	0x24000700
 8001a10:	4000e000 	.word	0x4000e000

08001a14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a18:	4b22      	ldr	r3, [pc, #136]	; (8001aa4 <MX_USART1_UART_Init+0x90>)
 8001a1a:	4a23      	ldr	r2, [pc, #140]	; (8001aa8 <MX_USART1_UART_Init+0x94>)
 8001a1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001a1e:	4b21      	ldr	r3, [pc, #132]	; (8001aa4 <MX_USART1_UART_Init+0x90>)
 8001a20:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001a24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a26:	4b1f      	ldr	r3, [pc, #124]	; (8001aa4 <MX_USART1_UART_Init+0x90>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a2c:	4b1d      	ldr	r3, [pc, #116]	; (8001aa4 <MX_USART1_UART_Init+0x90>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a32:	4b1c      	ldr	r3, [pc, #112]	; (8001aa4 <MX_USART1_UART_Init+0x90>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a38:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <MX_USART1_UART_Init+0x90>)
 8001a3a:	220c      	movs	r2, #12
 8001a3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a3e:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <MX_USART1_UART_Init+0x90>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a44:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <MX_USART1_UART_Init+0x90>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a4a:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <MX_USART1_UART_Init+0x90>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a50:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <MX_USART1_UART_Init+0x90>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a56:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <MX_USART1_UART_Init+0x90>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a5c:	4811      	ldr	r0, [pc, #68]	; (8001aa4 <MX_USART1_UART_Init+0x90>)
 8001a5e:	f00b ff79 	bl	800d954 <HAL_UART_Init>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001a68:	f000 f9a8 	bl	8001dbc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	480d      	ldr	r0, [pc, #52]	; (8001aa4 <MX_USART1_UART_Init+0x90>)
 8001a70:	f00e f890 	bl	800fb94 <HAL_UARTEx_SetTxFifoThreshold>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001a7a:	f000 f99f 	bl	8001dbc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4808      	ldr	r0, [pc, #32]	; (8001aa4 <MX_USART1_UART_Init+0x90>)
 8001a82:	f00e f8c5 	bl	800fc10 <HAL_UARTEx_SetRxFifoThreshold>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001a8c:	f000 f996 	bl	8001dbc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001a90:	4804      	ldr	r0, [pc, #16]	; (8001aa4 <MX_USART1_UART_Init+0x90>)
 8001a92:	f00e f846 	bl	800fb22 <HAL_UARTEx_DisableFifoMode>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001a9c:	f000 f98e 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	2400074c 	.word	0x2400074c
 8001aa8:	40011000 	.word	0x40011000

08001aac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ab0:	4b22      	ldr	r3, [pc, #136]	; (8001b3c <MX_USART3_UART_Init+0x90>)
 8001ab2:	4a23      	ldr	r2, [pc, #140]	; (8001b40 <MX_USART3_UART_Init+0x94>)
 8001ab4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 500000;
 8001ab6:	4b21      	ldr	r3, [pc, #132]	; (8001b3c <MX_USART3_UART_Init+0x90>)
 8001ab8:	4a22      	ldr	r2, [pc, #136]	; (8001b44 <MX_USART3_UART_Init+0x98>)
 8001aba:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001abc:	4b1f      	ldr	r3, [pc, #124]	; (8001b3c <MX_USART3_UART_Init+0x90>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ac2:	4b1e      	ldr	r3, [pc, #120]	; (8001b3c <MX_USART3_UART_Init+0x90>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ac8:	4b1c      	ldr	r3, [pc, #112]	; (8001b3c <MX_USART3_UART_Init+0x90>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ace:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <MX_USART3_UART_Init+0x90>)
 8001ad0:	220c      	movs	r2, #12
 8001ad2:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ad4:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <MX_USART3_UART_Init+0x90>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ada:	4b18      	ldr	r3, [pc, #96]	; (8001b3c <MX_USART3_UART_Init+0x90>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ae0:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <MX_USART3_UART_Init+0x90>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ae6:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <MX_USART3_UART_Init+0x90>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aec:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <MX_USART3_UART_Init+0x90>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001af2:	4812      	ldr	r0, [pc, #72]	; (8001b3c <MX_USART3_UART_Init+0x90>)
 8001af4:	f00b ff2e 	bl	800d954 <HAL_UART_Init>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8001afe:	f000 f95d 	bl	8001dbc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b02:	2100      	movs	r1, #0
 8001b04:	480d      	ldr	r0, [pc, #52]	; (8001b3c <MX_USART3_UART_Init+0x90>)
 8001b06:	f00e f845 	bl	800fb94 <HAL_UARTEx_SetTxFifoThreshold>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8001b10:	f000 f954 	bl	8001dbc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b14:	2100      	movs	r1, #0
 8001b16:	4809      	ldr	r0, [pc, #36]	; (8001b3c <MX_USART3_UART_Init+0x90>)
 8001b18:	f00e f87a 	bl	800fc10 <HAL_UARTEx_SetRxFifoThreshold>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8001b22:	f000 f94b 	bl	8001dbc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001b26:	4805      	ldr	r0, [pc, #20]	; (8001b3c <MX_USART3_UART_Init+0x90>)
 8001b28:	f00d fffb 	bl	800fb22 <HAL_UARTEx_DisableFifoMode>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8001b32:	f000 f943 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	240007e0 	.word	0x240007e0
 8001b40:	40004800 	.word	0x40004800
 8001b44:	0007a120 	.word	0x0007a120

08001b48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b4e:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <MX_DMA_Init+0x4c>)
 8001b50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b54:	4a0f      	ldr	r2, [pc, #60]	; (8001b94 <MX_DMA_Init+0x4c>)
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b5e:	4b0d      	ldr	r3, [pc, #52]	; (8001b94 <MX_DMA_Init+0x4c>)
 8001b60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	607b      	str	r3, [r7, #4]
 8001b6a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2100      	movs	r1, #0
 8001b70:	200b      	movs	r0, #11
 8001b72:	f004 fa04 	bl	8005f7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001b76:	200b      	movs	r0, #11
 8001b78:	f004 fa1b 	bl	8005fb2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2100      	movs	r1, #0
 8001b80:	200c      	movs	r0, #12
 8001b82:	f004 f9fc 	bl	8005f7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b86:	200c      	movs	r0, #12
 8001b88:	f004 fa13 	bl	8005fb2 <HAL_NVIC_EnableIRQ>

}
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	58024400 	.word	0x58024400

08001b98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08e      	sub	sp, #56	; 0x38
 8001b9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	605a      	str	r2, [r3, #4]
 8001ba8:	609a      	str	r2, [r3, #8]
 8001baa:	60da      	str	r2, [r3, #12]
 8001bac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bae:	4b7c      	ldr	r3, [pc, #496]	; (8001da0 <MX_GPIO_Init+0x208>)
 8001bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb4:	4a7a      	ldr	r2, [pc, #488]	; (8001da0 <MX_GPIO_Init+0x208>)
 8001bb6:	f043 0310 	orr.w	r3, r3, #16
 8001bba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bbe:	4b78      	ldr	r3, [pc, #480]	; (8001da0 <MX_GPIO_Init+0x208>)
 8001bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc4:	f003 0310 	and.w	r3, r3, #16
 8001bc8:	623b      	str	r3, [r7, #32]
 8001bca:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bcc:	4b74      	ldr	r3, [pc, #464]	; (8001da0 <MX_GPIO_Init+0x208>)
 8001bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd2:	4a73      	ldr	r2, [pc, #460]	; (8001da0 <MX_GPIO_Init+0x208>)
 8001bd4:	f043 0304 	orr.w	r3, r3, #4
 8001bd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bdc:	4b70      	ldr	r3, [pc, #448]	; (8001da0 <MX_GPIO_Init+0x208>)
 8001bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001be2:	f003 0304 	and.w	r3, r3, #4
 8001be6:	61fb      	str	r3, [r7, #28]
 8001be8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bea:	4b6d      	ldr	r3, [pc, #436]	; (8001da0 <MX_GPIO_Init+0x208>)
 8001bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf0:	4a6b      	ldr	r2, [pc, #428]	; (8001da0 <MX_GPIO_Init+0x208>)
 8001bf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bfa:	4b69      	ldr	r3, [pc, #420]	; (8001da0 <MX_GPIO_Init+0x208>)
 8001bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c04:	61bb      	str	r3, [r7, #24]
 8001c06:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c08:	4b65      	ldr	r3, [pc, #404]	; (8001da0 <MX_GPIO_Init+0x208>)
 8001c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c0e:	4a64      	ldr	r2, [pc, #400]	; (8001da0 <MX_GPIO_Init+0x208>)
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c18:	4b61      	ldr	r3, [pc, #388]	; (8001da0 <MX_GPIO_Init+0x208>)
 8001c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c26:	4b5e      	ldr	r3, [pc, #376]	; (8001da0 <MX_GPIO_Init+0x208>)
 8001c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c2c:	4a5c      	ldr	r2, [pc, #368]	; (8001da0 <MX_GPIO_Init+0x208>)
 8001c2e:	f043 0320 	orr.w	r3, r3, #32
 8001c32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c36:	4b5a      	ldr	r3, [pc, #360]	; (8001da0 <MX_GPIO_Init+0x208>)
 8001c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c3c:	f003 0320 	and.w	r3, r3, #32
 8001c40:	613b      	str	r3, [r7, #16]
 8001c42:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c44:	4b56      	ldr	r3, [pc, #344]	; (8001da0 <MX_GPIO_Init+0x208>)
 8001c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c4a:	4a55      	ldr	r2, [pc, #340]	; (8001da0 <MX_GPIO_Init+0x208>)
 8001c4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c54:	4b52      	ldr	r3, [pc, #328]	; (8001da0 <MX_GPIO_Init+0x208>)
 8001c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c62:	4b4f      	ldr	r3, [pc, #316]	; (8001da0 <MX_GPIO_Init+0x208>)
 8001c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c68:	4a4d      	ldr	r2, [pc, #308]	; (8001da0 <MX_GPIO_Init+0x208>)
 8001c6a:	f043 0302 	orr.w	r3, r3, #2
 8001c6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c72:	4b4b      	ldr	r3, [pc, #300]	; (8001da0 <MX_GPIO_Init+0x208>)
 8001c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c80:	4b47      	ldr	r3, [pc, #284]	; (8001da0 <MX_GPIO_Init+0x208>)
 8001c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c86:	4a46      	ldr	r2, [pc, #280]	; (8001da0 <MX_GPIO_Init+0x208>)
 8001c88:	f043 0308 	orr.w	r3, r3, #8
 8001c8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c90:	4b43      	ldr	r3, [pc, #268]	; (8001da0 <MX_GPIO_Init+0x208>)
 8001c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c96:	f003 0308 	and.w	r3, r3, #8
 8001c9a:	607b      	str	r3, [r7, #4]
 8001c9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f248 711c 	movw	r1, #34588	; 0x871c
 8001ca4:	483f      	ldr	r0, [pc, #252]	; (8001da4 <MX_GPIO_Init+0x20c>)
 8001ca6:	f007 fc45 	bl	8009534 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001caa:	2200      	movs	r2, #0
 8001cac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cb0:	483d      	ldr	r0, [pc, #244]	; (8001da8 <MX_GPIO_Init+0x210>)
 8001cb2:	f007 fc3f 	bl	8009534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001cbc:	483b      	ldr	r0, [pc, #236]	; (8001dac <MX_GPIO_Init+0x214>)
 8001cbe:	f007 fc39 	bl	8009534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	483a      	ldr	r0, [pc, #232]	; (8001db0 <MX_GPIO_Init+0x218>)
 8001cc8:	f007 fc34 	bl	8009534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f44f 5143 	mov.w	r1, #12480	; 0x30c0
 8001cd2:	4838      	ldr	r0, [pc, #224]	; (8001db4 <MX_GPIO_Init+0x21c>)
 8001cd4:	f007 fc2e 	bl	8009534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_14, GPIO_PIN_RESET);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f44f 4182 	mov.w	r1, #16640	; 0x4100
 8001cde:	4836      	ldr	r0, [pc, #216]	; (8001db8 <MX_GPIO_Init+0x220>)
 8001ce0:	f007 fc28 	bl	8009534 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE8
                           PE9 PE10 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8
 8001ce4:	f248 731c 	movw	r3, #34588	; 0x871c
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cea:	2301      	movs	r3, #1
 8001cec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4829      	ldr	r0, [pc, #164]	; (8001da4 <MX_GPIO_Init+0x20c>)
 8001cfe:	f007 f96f 	bl	8008fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d10:	2300      	movs	r3, #0
 8001d12:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4823      	ldr	r0, [pc, #140]	; (8001da8 <MX_GPIO_Init+0x210>)
 8001d1c:	f007 f960 	bl	8008fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001d20:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d26:	2301      	movs	r3, #1
 8001d28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d36:	4619      	mov	r1, r3
 8001d38:	481c      	ldr	r0, [pc, #112]	; (8001dac <MX_GPIO_Init+0x214>)
 8001d3a:	f007 f951 	bl	8008fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d42:	2301      	movs	r3, #1
 8001d44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d52:	4619      	mov	r1, r3
 8001d54:	4816      	ldr	r0, [pc, #88]	; (8001db0 <MX_GPIO_Init+0x218>)
 8001d56:	f007 f943 	bl	8008fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7;
 8001d5a:	f44f 5343 	mov.w	r3, #12480	; 0x30c0
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d60:	2301      	movs	r3, #1
 8001d62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d64:	2300      	movs	r3, #0
 8001d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d70:	4619      	mov	r1, r3
 8001d72:	4810      	ldr	r0, [pc, #64]	; (8001db4 <MX_GPIO_Init+0x21c>)
 8001d74:	f007 f934 	bl	8008fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_14;
 8001d78:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d86:	2300      	movs	r3, #0
 8001d88:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4809      	ldr	r0, [pc, #36]	; (8001db8 <MX_GPIO_Init+0x220>)
 8001d92:	f007 f925 	bl	8008fe0 <HAL_GPIO_Init>

}
 8001d96:	bf00      	nop
 8001d98:	3738      	adds	r7, #56	; 0x38
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	58024400 	.word	0x58024400
 8001da4:	58021000 	.word	0x58021000
 8001da8:	58020800 	.word	0x58020800
 8001dac:	58021400 	.word	0x58021400
 8001db0:	58021800 	.word	0x58021800
 8001db4:	58020400 	.word	0x58020400
 8001db8:	58020c00 	.word	0x58020c00

08001dbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dc0:	b672      	cpsid	i
}
 8001dc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dc4:	e7fe      	b.n	8001dc4 <Error_Handler+0x8>

08001dc6 <_ZN6PUSHERC1Ev>:
#define PUSHER_D_IN2_PIN GPIO_PIN_15

#define PUSHER_SPEED 33.6


class PUSHER{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	f04f 0300 	mov.w	r3, #0
 8001dd8:	e9c1 2300 	strd	r2, r3, [r1]
 8001ddc:	6879      	ldr	r1, [r7, #4]
 8001dde:	f04f 0200 	mov.w	r2, #0
 8001de2:	f04f 0300 	mov.w	r3, #0
 8001de6:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	f04f 0200 	mov.w	r2, #0
 8001df0:	f04f 0300 	mov.w	r3, #0
 8001df4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	619a      	str	r2, [r3, #24]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4618      	mov	r0, r3
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <main_function>:

int a=0;
int flag = 0;
double Vx = 0, Vy = 0, W, rVx, rVy, rW;

void main_function(){
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b090      	sub	sp, #64	; 0x40
 8001e10:	af00      	add	r7, sp, #0
	PUSHER pusher_A;
 8001e12:	f107 0320 	add.w	r3, r7, #32
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff ffd5 	bl	8001dc6 <_ZN6PUSHERC1Ev>
	PUSHER pusher_B;
 8001e1c:	463b      	mov	r3, r7
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff ffd1 	bl	8001dc6 <_ZN6PUSHERC1Ev>
//	PUSHER pusher_C;
//	PUSHER pusher_D;
//	SCRIPT script_a;
	ros_setup();
 8001e24:	f001 ff34 	bl	8003c90 <_Z9ros_setupv>
	stm_setup();
 8001e28:	f000 f824 	bl	8001e74 <stm_setup>
	script_a.scriptrun = 0;
 8001e2c:	4b0e      	ldr	r3, [pc, #56]	; (8001e68 <main_function+0x5c>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
	while(1){
		a++;
 8001e32:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <main_function+0x60>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	3301      	adds	r3, #1
 8001e38:	4a0c      	ldr	r2, [pc, #48]	; (8001e6c <main_function+0x60>)
 8001e3a:	6013      	str	r3, [r2, #0]
		ros_loop();
 8001e3c:	f001 ff44 	bl	8003cc8 <_Z8ros_loopv>

		pusher_A.distence();
 8001e40:	f107 0320 	add.w	r3, r7, #32
 8001e44:	4618      	mov	r0, r3
 8001e46:	f000 f847 	bl	8001ed8 <_ZN6PUSHER8distenceEv>
		pusher_B.distence();
 8001e4a:	463b      	mov	r3, r7
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f000 f843 	bl	8001ed8 <_ZN6PUSHER8distenceEv>
		if(flag == 6 ){
 8001e52:	4b07      	ldr	r3, [pc, #28]	; (8001e70 <main_function+0x64>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2b06      	cmp	r3, #6
 8001e58:	d102      	bne.n	8001e60 <main_function+0x54>
			script_a.scriptrun = 1;
 8001e5a:	4b03      	ldr	r3, [pc, #12]	; (8001e68 <main_function+0x5c>)
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]
		}
		else if(flag == 7){

		}
		script();
 8001e60:	f002 ff86 	bl	8004d70 <_Z6scriptv>
		a++;
 8001e64:	e7e5      	b.n	8001e32 <main_function+0x26>
 8001e66:	bf00      	nop
 8001e68:	24001fe8 	.word	0x24001fe8
 8001e6c:	24000964 	.word	0x24000964
 8001e70:	24000968 	.word	0x24000968

08001e74 <stm_setup>:

	}
}
void stm_setup(void){
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim1);
 8001e78:	4806      	ldr	r0, [pc, #24]	; (8001e94 <stm_setup+0x20>)
 8001e7a:	f00a f92f 	bl	800c0dc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 8001e7e:	4806      	ldr	r0, [pc, #24]	; (8001e98 <stm_setup+0x24>)
 8001e80:	f00a f92c 	bl	800c0dc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim23);//main Timer
 8001e84:	4805      	ldr	r0, [pc, #20]	; (8001e9c <stm_setup+0x28>)
 8001e86:	f00a f929 	bl	800c0dc <HAL_TIM_Base_Start_IT>
	DC_motor_init();
 8001e8a:	f7ff f8dd 	bl	8001048 <_Z13DC_motor_initv>
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	240004a0 	.word	0x240004a0
 8001e98:	2400061c 	.word	0x2400061c
 8001e9c:	24000700 	.word	0x24000700

08001ea0 <_Z13script_pusherdd>:
PUSHER pusher_A;
PUSHER pusher_B;
//PUSHER pusher_C;
//PUSHER pusher_D;

void script_pusher(double hight_a,double hight_b){
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	ed87 0b02 	vstr	d0, [r7, #8]
 8001eaa:	ed87 1b00 	vstr	d1, [r7]
	pusher_A.state = hight_a;
 8001eae:	4908      	ldr	r1, [pc, #32]	; (8001ed0 <_Z13script_pusherdd+0x30>)
 8001eb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001eb4:	e9c1 2300 	strd	r2, r3, [r1]
	pusher_B.state = hight_b;
 8001eb8:	4906      	ldr	r1, [pc, #24]	; (8001ed4 <_Z13script_pusherdd+0x34>)
 8001eba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ebe:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001ec2:	bf00      	nop
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	24000988 	.word	0x24000988
 8001ed4:	240009a8 	.word	0x240009a8

08001ed8 <_ZN6PUSHER8distenceEv>:

void PUSHER::distence(){
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]

	pusher_A.d = (pusher_A.state - pusher_A.p_state)*10;
 8001ee0:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <_ZN6PUSHER8distenceEv+0x50>)
 8001ee2:	ed93 6b00 	vldr	d6, [r3]
 8001ee6:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <_ZN6PUSHER8distenceEv+0x50>)
 8001ee8:	ed93 7b02 	vldr	d7, [r3, #8]
 8001eec:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001ef0:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8001ef4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <_ZN6PUSHER8distenceEv+0x50>)
 8001efa:	ed83 7b04 	vstr	d7, [r3, #16]
	pusher_B.d = (pusher_B.state - pusher_B.p_state)*10;
 8001efe:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <_ZN6PUSHER8distenceEv+0x54>)
 8001f00:	ed93 6b00 	vldr	d6, [r3]
 8001f04:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <_ZN6PUSHER8distenceEv+0x54>)
 8001f06:	ed93 7b02 	vldr	d7, [r3, #8]
 8001f0a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001f0e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8001f12:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f16:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <_ZN6PUSHER8distenceEv+0x54>)
 8001f18:	ed83 7b04 	vstr	d7, [r3, #16]
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	24000988 	.word	0x24000988
 8001f2c:	240009a8 	.word	0x240009a8

08001f30 <_Z41__static_initialization_and_destruction_0ii>:
//	if(pusher_D.d ==0){
//		HAL_GPIO_WritePin(PUSHER_D_IN1_PORT, PUSHER_D_IN1_PIN, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(PUSHER_D_IN2_PORT, PUSHER_D_IN2_PIN, GPIO_PIN_RESET);
//
//	}
}
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d10a      	bne.n	8001f56 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d105      	bne.n	8001f56 <_Z41__static_initialization_and_destruction_0ii+0x26>
PUSHER pusher_A;
 8001f4a:	4805      	ldr	r0, [pc, #20]	; (8001f60 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8001f4c:	f7ff ff3b 	bl	8001dc6 <_ZN6PUSHERC1Ev>
PUSHER pusher_B;
 8001f50:	4804      	ldr	r0, [pc, #16]	; (8001f64 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001f52:	f7ff ff38 	bl	8001dc6 <_ZN6PUSHERC1Ev>
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	24000988 	.word	0x24000988
 8001f64:	240009a8 	.word	0x240009a8

08001f68 <_GLOBAL__sub_I_pusher_A>:
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001f70:	2001      	movs	r0, #1
 8001f72:	f7ff ffdd 	bl	8001f30 <_Z41__static_initialization_and_destruction_0ii>
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	605a      	str	r2, [r3, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
	...

08001f9c <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	4a04      	ldr	r2, [pc, #16]	; (8001fb8 <_ZN3ros3MsgC1Ev+0x1c>)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4618      	mov	r0, r3
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	0801036c 	.word	0x0801036c

08001fbc <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
      data()
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff ffe8 	bl	8001f9c <_ZN3ros3MsgC1Ev>
 8001fcc:	4a06      	ldr	r2, [pc, #24]	; (8001fe8 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff ffce 	bl	8001f78 <_ZN3ros4TimeC1Ev>
    {
    }
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	08010354 	.word	0x08010354

08001fec <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6859      	ldr	r1, [r3, #4]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	4413      	add	r3, r2
 8002004:	b2ca      	uxtb	r2, r1
 8002006:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	0a19      	lsrs	r1, r3, #8
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	3301      	adds	r3, #1
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	4413      	add	r3, r2
 8002016:	b2ca      	uxtb	r2, r1
 8002018:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	0c19      	lsrs	r1, r3, #16
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	3302      	adds	r3, #2
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	4413      	add	r3, r2
 8002028:	b2ca      	uxtb	r2, r1
 800202a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	0e19      	lsrs	r1, r3, #24
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	3303      	adds	r3, #3
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	4413      	add	r3, r2
 800203a:	b2ca      	uxtb	r2, r1
 800203c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	3304      	adds	r3, #4
 8002042:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6899      	ldr	r1, [r3, #8]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	4413      	add	r3, r2
 800204e:	b2ca      	uxtb	r2, r1
 8002050:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	0a19      	lsrs	r1, r3, #8
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	3301      	adds	r3, #1
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	4413      	add	r3, r2
 8002060:	b2ca      	uxtb	r2, r1
 8002062:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	0c19      	lsrs	r1, r3, #16
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	3302      	adds	r3, #2
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	4413      	add	r3, r2
 8002072:	b2ca      	uxtb	r2, r1
 8002074:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	0e19      	lsrs	r1, r3, #24
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	3303      	adds	r3, #3
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	4413      	add	r3, r2
 8002084:	b2ca      	uxtb	r2, r1
 8002086:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	3304      	adds	r3, #4
 800208c:	60fb      	str	r3, [r7, #12]
      return offset;
 800208e:	68fb      	ldr	r3, [r7, #12]
    }
 8002090:	4618      	mov	r0, r3
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	4413      	add	r3, r2
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	461a      	mov	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	3301      	adds	r3, #1
 80020c0:	6839      	ldr	r1, [r7, #0]
 80020c2:	440b      	add	r3, r1
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	021b      	lsls	r3, r3, #8
 80020c8:	431a      	orrs	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	3302      	adds	r3, #2
 80020d6:	6839      	ldr	r1, [r7, #0]
 80020d8:	440b      	add	r3, r1
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	041b      	lsls	r3, r3, #16
 80020de:	431a      	orrs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	3303      	adds	r3, #3
 80020ec:	6839      	ldr	r1, [r7, #0]
 80020ee:	440b      	add	r3, r1
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	061b      	lsls	r3, r3, #24
 80020f4:	431a      	orrs	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	3304      	adds	r3, #4
 80020fe:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	4413      	add	r3, r2
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	461a      	mov	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689a      	ldr	r2, [r3, #8]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	3301      	adds	r3, #1
 8002116:	6839      	ldr	r1, [r7, #0]
 8002118:	440b      	add	r3, r1
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	021b      	lsls	r3, r3, #8
 800211e:	431a      	orrs	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	3302      	adds	r3, #2
 800212c:	6839      	ldr	r1, [r7, #0]
 800212e:	440b      	add	r3, r1
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	041b      	lsls	r3, r3, #16
 8002134:	431a      	orrs	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	3303      	adds	r3, #3
 8002142:	6839      	ldr	r1, [r7, #0]
 8002144:	440b      	add	r3, r1
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	061b      	lsls	r3, r3, #24
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	3304      	adds	r3, #4
 8002154:	60fb      	str	r3, [r7, #12]
     return offset;
 8002156:	68fb      	ldr	r3, [r7, #12]
    }
 8002158:	4618      	mov	r0, r3
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	4b03      	ldr	r3, [pc, #12]	; (800217c <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800216e:	4618      	mov	r0, r3
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	08010054 	.word	0x08010054

08002180 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	4b03      	ldr	r3, [pc, #12]	; (8002198 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800218a:	4618      	mov	r0, r3
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	08010064 	.word	0x08010064

0800219c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff fef8 	bl	8001f9c <_ZN3ros3MsgC1Ev>
 80021ac:	4a0b      	ldr	r2, [pc, #44]	; (80021dc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	601a      	str	r2, [r3, #0]
      topic_id(0),
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a09      	ldr	r2, [pc, #36]	; (80021e0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80021bc:	609a      	str	r2, [r3, #8]
      message_type(""),
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a07      	ldr	r2, [pc, #28]	; (80021e0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80021c2:	60da      	str	r2, [r3, #12]
      md5sum(""),
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a06      	ldr	r2, [pc, #24]	; (80021e0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80021c8:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	615a      	str	r2, [r3, #20]
    {
    }
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	0801033c 	.word	0x0801033c
 80021e0:	08010088 	.word	0x08010088

080021e4 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b088      	sub	sp, #32
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	8899      	ldrh	r1, [r3, #4]
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	4413      	add	r3, r2
 80021fc:	b2ca      	uxtb	r2, r1
 80021fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	889b      	ldrh	r3, [r3, #4]
 8002204:	0a1b      	lsrs	r3, r3, #8
 8002206:	b299      	uxth	r1, r3
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	3301      	adds	r3, #1
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	4413      	add	r3, r2
 8002210:	b2ca      	uxtb	r2, r1
 8002212:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	3302      	adds	r3, #2
 8002218:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe f876 	bl	8000310 <strlen>
 8002224:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	4413      	add	r3, r2
 800222c:	69b9      	ldr	r1, [r7, #24]
 800222e:	4618      	mov	r0, r3
 8002230:	f001 fde8 	bl	8003e04 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	3304      	adds	r3, #4
 8002238:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	18d0      	adds	r0, r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4619      	mov	r1, r3
 8002248:	f00d fdda 	bl	800fe00 <memcpy>
      offset += length_topic_name;
 800224c:	69fa      	ldr	r2, [r7, #28]
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	4413      	add	r3, r2
 8002252:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	4618      	mov	r0, r3
 800225a:	f7fe f859 	bl	8000310 <strlen>
 800225e:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	4413      	add	r3, r2
 8002266:	6979      	ldr	r1, [r7, #20]
 8002268:	4618      	mov	r0, r3
 800226a:	f001 fdcb 	bl	8003e04 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	3304      	adds	r3, #4
 8002272:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	18d0      	adds	r0, r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	4619      	mov	r1, r3
 8002282:	f00d fdbd 	bl	800fe00 <memcpy>
      offset += length_message_type;
 8002286:	69fa      	ldr	r2, [r7, #28]
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	4413      	add	r3, r2
 800228c:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	4618      	mov	r0, r3
 8002294:	f7fe f83c 	bl	8000310 <strlen>
 8002298:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	4413      	add	r3, r2
 80022a0:	6939      	ldr	r1, [r7, #16]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f001 fdae 	bl	8003e04 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	3304      	adds	r3, #4
 80022ac:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	18d0      	adds	r0, r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	4619      	mov	r1, r3
 80022bc:	f00d fda0 	bl	800fe00 <memcpy>
      offset += length_md5sum;
 80022c0:	69fa      	ldr	r2, [r7, #28]
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4413      	add	r3, r2
 80022c6:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80022ce:	68f9      	ldr	r1, [r7, #12]
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	4413      	add	r3, r2
 80022d6:	b2ca      	uxtb	r2, r1
 80022d8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	0a19      	lsrs	r1, r3, #8
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	3301      	adds	r3, #1
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	4413      	add	r3, r2
 80022e6:	b2ca      	uxtb	r2, r1
 80022e8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	0c19      	lsrs	r1, r3, #16
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	3302      	adds	r3, #2
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	4413      	add	r3, r2
 80022f6:	b2ca      	uxtb	r2, r1
 80022f8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	0e19      	lsrs	r1, r3, #24
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	3303      	adds	r3, #3
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	4413      	add	r3, r2
 8002306:	b2ca      	uxtb	r2, r1
 8002308:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	3304      	adds	r3, #4
 800230e:	61fb      	str	r3, [r7, #28]
      return offset;
 8002310:	69fb      	ldr	r3, [r7, #28]
    }
 8002312:	4618      	mov	r0, r3
 8002314:	3720      	adds	r7, #32
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800231a:	b580      	push	{r7, lr}
 800231c:	b08a      	sub	sp, #40	; 0x28
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
 8002322:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002324:	2300      	movs	r3, #0
 8002326:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	4413      	add	r3, r2
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	b29a      	uxth	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	889b      	ldrh	r3, [r3, #4]
 800233a:	b21a      	sxth	r2, r3
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	3301      	adds	r3, #1
 8002340:	6839      	ldr	r1, [r7, #0]
 8002342:	440b      	add	r3, r1
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	021b      	lsls	r3, r3, #8
 8002348:	b21b      	sxth	r3, r3
 800234a:	4313      	orrs	r3, r2
 800234c:	b21b      	sxth	r3, r3
 800234e:	b29a      	uxth	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	3302      	adds	r3, #2
 8002358:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	441a      	add	r2, r3
 8002360:	f107 0314 	add.w	r3, r7, #20
 8002364:	4611      	mov	r1, r2
 8002366:	4618      	mov	r0, r3
 8002368:	f001 fd6b 	bl	8003e42 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	3304      	adds	r3, #4
 8002370:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
 8002376:	e00b      	b.n	8002390 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	441a      	add	r2, r3
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	3b01      	subs	r3, #1
 8002382:	6839      	ldr	r1, [r7, #0]
 8002384:	440b      	add	r3, r1
 8002386:	7812      	ldrb	r2, [r2, #0]
 8002388:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	3301      	adds	r3, #1
 800238e:	627b      	str	r3, [r7, #36]	; 0x24
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	4413      	add	r3, r2
 8002396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002398:	429a      	cmp	r2, r3
 800239a:	d3ed      	bcc.n	8002378 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	4413      	add	r3, r2
 80023a2:	3b01      	subs	r3, #1
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	4413      	add	r3, r2
 80023a8:	2200      	movs	r2, #0
 80023aa:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	3b01      	subs	r3, #1
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	441a      	add	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	4413      	add	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	441a      	add	r2, r3
 80023c6:	f107 0310 	add.w	r3, r7, #16
 80023ca:	4611      	mov	r1, r2
 80023cc:	4618      	mov	r0, r3
 80023ce:	f001 fd38 	bl	8003e42 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	3304      	adds	r3, #4
 80023d6:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	623b      	str	r3, [r7, #32]
 80023dc:	e00b      	b.n	80023f6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	441a      	add	r2, r3
 80023e4:	6a3b      	ldr	r3, [r7, #32]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	6839      	ldr	r1, [r7, #0]
 80023ea:	440b      	add	r3, r1
 80023ec:	7812      	ldrb	r2, [r2, #0]
 80023ee:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	3301      	adds	r3, #1
 80023f4:	623b      	str	r3, [r7, #32]
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	4413      	add	r3, r2
 80023fc:	6a3a      	ldr	r2, [r7, #32]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d3ed      	bcc.n	80023de <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	4413      	add	r3, r2
 8002408:	3b01      	subs	r3, #1
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	4413      	add	r3, r2
 800240e:	2200      	movs	r2, #0
 8002410:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	3b01      	subs	r3, #1
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	441a      	add	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	4413      	add	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	441a      	add	r2, r3
 800242c:	f107 030c 	add.w	r3, r7, #12
 8002430:	4611      	mov	r1, r2
 8002432:	4618      	mov	r0, r3
 8002434:	f001 fd05 	bl	8003e42 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	3304      	adds	r3, #4
 800243c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	61fb      	str	r3, [r7, #28]
 8002442:	e00b      	b.n	800245c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	441a      	add	r2, r3
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	3b01      	subs	r3, #1
 800244e:	6839      	ldr	r1, [r7, #0]
 8002450:	440b      	add	r3, r1
 8002452:	7812      	ldrb	r2, [r2, #0]
 8002454:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	3301      	adds	r3, #1
 800245a:	61fb      	str	r3, [r7, #28]
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	4413      	add	r3, r2
 8002462:	69fa      	ldr	r2, [r7, #28]
 8002464:	429a      	cmp	r2, r3
 8002466:	d3ed      	bcc.n	8002444 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	4413      	add	r3, r2
 800246e:	3b01      	subs	r3, #1
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	4413      	add	r3, r2
 8002474:	2200      	movs	r2, #0
 8002476:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	3b01      	subs	r3, #1
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	441a      	add	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	4413      	add	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 800248c:	2300      	movs	r3, #0
 800248e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	6839      	ldr	r1, [r7, #0]
 8002496:	440a      	add	r2, r1
 8002498:	7812      	ldrb	r2, [r2, #0]
 800249a:	4313      	orrs	r3, r2
 800249c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	3301      	adds	r3, #1
 80024a4:	6839      	ldr	r1, [r7, #0]
 80024a6:	440b      	add	r3, r1
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	021b      	lsls	r3, r3, #8
 80024ac:	4313      	orrs	r3, r2
 80024ae:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80024b0:	68ba      	ldr	r2, [r7, #8]
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	3302      	adds	r3, #2
 80024b6:	6839      	ldr	r1, [r7, #0]
 80024b8:	440b      	add	r3, r1
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	041b      	lsls	r3, r3, #16
 80024be:	4313      	orrs	r3, r2
 80024c0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	3303      	adds	r3, #3
 80024c8:	6839      	ldr	r1, [r7, #0]
 80024ca:	440b      	add	r3, r1
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	061b      	lsls	r3, r3, #24
 80024d0:	4313      	orrs	r3, r2
 80024d2:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80024d4:	68ba      	ldr	r2, [r7, #8]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	3304      	adds	r3, #4
 80024de:	61bb      	str	r3, [r7, #24]
     return offset;
 80024e0:	69bb      	ldr	r3, [r7, #24]
    }
 80024e2:	4618      	mov	r0, r3
 80024e4:	3728      	adds	r7, #40	; 0x28
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
	...

080024ec <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	4b03      	ldr	r3, [pc, #12]	; (8002504 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80024f6:	4618      	mov	r0, r3
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	0801008c 	.word	0x0801008c

08002508 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	4b03      	ldr	r3, [pc, #12]	; (8002520 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8002512:	4618      	mov	r0, r3
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	080100a8 	.word	0x080100a8

08002524 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff fd34 	bl	8001f9c <_ZN3ros3MsgC1Ev>
 8002534:	4a06      	ldr	r2, [pc, #24]	; (8002550 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	601a      	str	r2, [r3, #0]
      level(0),
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	711a      	strb	r2, [r3, #4]
      msg("")
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a04      	ldr	r2, [pc, #16]	; (8002554 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002544:	609a      	str	r2, [r3, #8]
    {
    }
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4618      	mov	r0, r3
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	08010324 	.word	0x08010324
 8002554:	08010088 	.word	0x08010088

08002558 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002562:	2300      	movs	r3, #0
 8002564:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	4413      	add	r3, r2
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	7912      	ldrb	r2, [r2, #4]
 8002570:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	3301      	adds	r3, #1
 8002576:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	4618      	mov	r0, r3
 800257e:	f7fd fec7 	bl	8000310 <strlen>
 8002582:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	4413      	add	r3, r2
 800258a:	68b9      	ldr	r1, [r7, #8]
 800258c:	4618      	mov	r0, r3
 800258e:	f001 fc39 	bl	8003e04 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	3304      	adds	r3, #4
 8002596:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	18d0      	adds	r0, r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	4619      	mov	r1, r3
 80025a6:	f00d fc2b 	bl	800fe00 <memcpy>
      offset += length_msg;
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	4413      	add	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]
      return offset;
 80025b2:	68fb      	ldr	r3, [r7, #12]
    }
 80025b4:	4618      	mov	r0, r3
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	4413      	add	r3, r2
 80025d0:	781a      	ldrb	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	3301      	adds	r3, #1
 80025da:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	441a      	add	r2, r3
 80025e2:	f107 030c 	add.w	r3, r7, #12
 80025e6:	4611      	mov	r1, r2
 80025e8:	4618      	mov	r0, r3
 80025ea:	f001 fc2a 	bl	8003e42 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	3304      	adds	r3, #4
 80025f2:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	617b      	str	r3, [r7, #20]
 80025f8:	e00b      	b.n	8002612 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	441a      	add	r2, r3
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	3b01      	subs	r3, #1
 8002604:	6839      	ldr	r1, [r7, #0]
 8002606:	440b      	add	r3, r1
 8002608:	7812      	ldrb	r2, [r2, #0]
 800260a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	3301      	adds	r3, #1
 8002610:	617b      	str	r3, [r7, #20]
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	4413      	add	r3, r2
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	429a      	cmp	r2, r3
 800261c:	d3ed      	bcc.n	80025fa <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	4413      	add	r3, r2
 8002624:	3b01      	subs	r3, #1
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	4413      	add	r3, r2
 800262a:	2200      	movs	r2, #0
 800262c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	3b01      	subs	r3, #1
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	441a      	add	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4413      	add	r3, r2
 8002640:	613b      	str	r3, [r7, #16]
     return offset;
 8002642:	693b      	ldr	r3, [r7, #16]
    }
 8002644:	4618      	mov	r0, r3
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	4b03      	ldr	r3, [pc, #12]	; (8002664 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8002656:	4618      	mov	r0, r3
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	080100cc 	.word	0x080100cc

08002668 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	4b03      	ldr	r3, [pc, #12]	; (8002680 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002672:	4618      	mov	r0, r3
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	080100e0 	.word	0x080100e0

08002684 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff fc84 	bl	8001f9c <_ZN3ros3MsgC1Ev>
 8002694:	4a0c      	ldr	r2, [pc, #48]	; (80026c8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	601a      	str	r2, [r3, #0]
      ints_length(0), ints(NULL),
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	605a      	str	r2, [r3, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	60da      	str	r2, [r3, #12]
      floats_length(0), floats(NULL),
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	611a      	str	r2, [r3, #16]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	619a      	str	r2, [r3, #24]
      strings_length(0), strings(NULL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	61da      	str	r2, [r3, #28]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4618      	mov	r0, r3
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	0801030c 	.word	0x0801030c

080026cc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08a      	sub	sp, #40	; 0x28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80026d6:	2300      	movs	r3, #0
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6859      	ldr	r1, [r3, #4]
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	4413      	add	r3, r2
 80026e4:	b2ca      	uxtb	r2, r1
 80026e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	0a19      	lsrs	r1, r3, #8
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	3301      	adds	r3, #1
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	4413      	add	r3, r2
 80026f6:	b2ca      	uxtb	r2, r1
 80026f8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	0c19      	lsrs	r1, r3, #16
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	3302      	adds	r3, #2
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	4413      	add	r3, r2
 8002708:	b2ca      	uxtb	r2, r1
 800270a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	0e19      	lsrs	r1, r3, #24
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	3303      	adds	r3, #3
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	4413      	add	r3, r2
 800271a:	b2ca      	uxtb	r2, r1
 800271c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	3304      	adds	r3, #4
 8002722:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002724:	2300      	movs	r3, #0
 8002726:	623b      	str	r3, [r7, #32]
 8002728:	e02a      	b.n	8002780 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68da      	ldr	r2, [r3, #12]
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4413      	add	r3, r2
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002738:	6939      	ldr	r1, [r7, #16]
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	4413      	add	r3, r2
 8002740:	b2ca      	uxtb	r2, r1
 8002742:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	0a19      	lsrs	r1, r3, #8
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	3301      	adds	r3, #1
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	4413      	add	r3, r2
 8002750:	b2ca      	uxtb	r2, r1
 8002752:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	0c19      	lsrs	r1, r3, #16
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	3302      	adds	r3, #2
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	4413      	add	r3, r2
 8002760:	b2ca      	uxtb	r2, r1
 8002762:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	0e19      	lsrs	r1, r3, #24
 8002768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276a:	3303      	adds	r3, #3
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	4413      	add	r3, r2
 8002770:	b2ca      	uxtb	r2, r1
 8002772:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	3304      	adds	r3, #4
 8002778:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	3301      	adds	r3, #1
 800277e:	623b      	str	r3, [r7, #32]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	6a3a      	ldr	r2, [r7, #32]
 8002786:	429a      	cmp	r2, r3
 8002788:	d3cf      	bcc.n	800272a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6919      	ldr	r1, [r3, #16]
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	4413      	add	r3, r2
 8002794:	b2ca      	uxtb	r2, r1
 8002796:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	0a19      	lsrs	r1, r3, #8
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	3301      	adds	r3, #1
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	4413      	add	r3, r2
 80027a6:	b2ca      	uxtb	r2, r1
 80027a8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	0c19      	lsrs	r1, r3, #16
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b2:	3302      	adds	r3, #2
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	4413      	add	r3, r2
 80027b8:	b2ca      	uxtb	r2, r1
 80027ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	0e19      	lsrs	r1, r3, #24
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	3303      	adds	r3, #3
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	4413      	add	r3, r2
 80027ca:	b2ca      	uxtb	r2, r1
 80027cc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	3304      	adds	r3, #4
 80027d2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80027d4:	2300      	movs	r3, #0
 80027d6:	61fb      	str	r3, [r7, #28]
 80027d8:	e02a      	b.n	8002830 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699a      	ldr	r2, [r3, #24]
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4413      	add	r3, r2
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80027e8:	68f9      	ldr	r1, [r7, #12]
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	4413      	add	r3, r2
 80027f0:	b2ca      	uxtb	r2, r1
 80027f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	0a19      	lsrs	r1, r3, #8
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	3301      	adds	r3, #1
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	4413      	add	r3, r2
 8002800:	b2ca      	uxtb	r2, r1
 8002802:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	0c19      	lsrs	r1, r3, #16
 8002808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280a:	3302      	adds	r3, #2
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	4413      	add	r3, r2
 8002810:	b2ca      	uxtb	r2, r1
 8002812:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	0e19      	lsrs	r1, r3, #24
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281a:	3303      	adds	r3, #3
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	4413      	add	r3, r2
 8002820:	b2ca      	uxtb	r2, r1
 8002822:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	3304      	adds	r3, #4
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	3301      	adds	r3, #1
 800282e:	61fb      	str	r3, [r7, #28]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	69fa      	ldr	r2, [r7, #28]
 8002836:	429a      	cmp	r2, r3
 8002838:	d3cf      	bcc.n	80027da <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69d9      	ldr	r1, [r3, #28]
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	4413      	add	r3, r2
 8002844:	b2ca      	uxtb	r2, r1
 8002846:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	0a19      	lsrs	r1, r3, #8
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	3301      	adds	r3, #1
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	4413      	add	r3, r2
 8002856:	b2ca      	uxtb	r2, r1
 8002858:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	0c19      	lsrs	r1, r3, #16
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	3302      	adds	r3, #2
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	4413      	add	r3, r2
 8002868:	b2ca      	uxtb	r2, r1
 800286a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	69db      	ldr	r3, [r3, #28]
 8002870:	0e19      	lsrs	r1, r3, #24
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	3303      	adds	r3, #3
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	4413      	add	r3, r2
 800287a:	b2ca      	uxtb	r2, r1
 800287c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	3304      	adds	r3, #4
 8002882:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002884:	2300      	movs	r3, #0
 8002886:	61bb      	str	r3, [r7, #24]
 8002888:	e027      	b.n	80028da <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f7fd fd3a 	bl	8000310 <strlen>
 800289c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	4413      	add	r3, r2
 80028a4:	6979      	ldr	r1, [r7, #20]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f001 faac 	bl	8003e04 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	3304      	adds	r3, #4
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	18d0      	adds	r0, r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	4619      	mov	r1, r3
 80028c8:	f00d fa9a 	bl	800fe00 <memcpy>
      offset += length_stringsi;
 80028cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	4413      	add	r3, r2
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	3301      	adds	r3, #1
 80028d8:	61bb      	str	r3, [r7, #24]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d3d2      	bcc.n	800288a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80028e6:	4618      	mov	r0, r3
 80028e8:	3728      	adds	r7, #40	; 0x28
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b08e      	sub	sp, #56	; 0x38
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
 80028f6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80028f8:	2300      	movs	r3, #0
 80028fa:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80028fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	4413      	add	r3, r2
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002908:	3301      	adds	r3, #1
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	4413      	add	r3, r2
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	021b      	lsls	r3, r3, #8
 8002912:	6a3a      	ldr	r2, [r7, #32]
 8002914:	4313      	orrs	r3, r2
 8002916:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800291a:	3302      	adds	r3, #2
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	4413      	add	r3, r2
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	041b      	lsls	r3, r3, #16
 8002924:	6a3a      	ldr	r2, [r7, #32]
 8002926:	4313      	orrs	r3, r2
 8002928:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800292a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800292c:	3303      	adds	r3, #3
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	4413      	add	r3, r2
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	061b      	lsls	r3, r3, #24
 8002936:	6a3a      	ldr	r2, [r7, #32]
 8002938:	4313      	orrs	r3, r2
 800293a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 800293c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800293e:	3304      	adds	r3, #4
 8002940:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	6a3a      	ldr	r2, [r7, #32]
 8002948:	429a      	cmp	r2, r3
 800294a:	d90a      	bls.n	8002962 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68da      	ldr	r2, [r3, #12]
 8002950:	6a3b      	ldr	r3, [r7, #32]
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4619      	mov	r1, r3
 8002956:	4610      	mov	r0, r2
 8002958:	f00d f9e6 	bl	800fd28 <realloc>
 800295c:	4602      	mov	r2, r0
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a3a      	ldr	r2, [r7, #32]
 8002966:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002968:	2300      	movs	r3, #0
 800296a:	633b      	str	r3, [r7, #48]	; 0x30
 800296c:	e035      	b.n	80029da <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800296e:	2300      	movs	r3, #0
 8002970:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002976:	6839      	ldr	r1, [r7, #0]
 8002978:	440a      	add	r2, r1
 800297a:	7812      	ldrb	r2, [r2, #0]
 800297c:	4313      	orrs	r3, r2
 800297e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002984:	3301      	adds	r3, #1
 8002986:	6839      	ldr	r1, [r7, #0]
 8002988:	440b      	add	r3, r1
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	021b      	lsls	r3, r3, #8
 800298e:	4313      	orrs	r3, r2
 8002990:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002996:	3302      	adds	r3, #2
 8002998:	6839      	ldr	r1, [r7, #0]
 800299a:	440b      	add	r3, r1
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	041b      	lsls	r3, r3, #16
 80029a0:	4313      	orrs	r3, r2
 80029a2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a8:	3303      	adds	r3, #3
 80029aa:	6839      	ldr	r1, [r7, #0]
 80029ac:	440b      	add	r3, r1
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	061b      	lsls	r3, r3, #24
 80029b2:	4313      	orrs	r3, r2
 80029b4:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80029bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029be:	3304      	adds	r3, #4
 80029c0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68da      	ldr	r2, [r3, #12]
 80029c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4413      	add	r3, r2
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	3208      	adds	r2, #8
 80029d0:	6812      	ldr	r2, [r2, #0]
 80029d2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80029d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d6:	3301      	adds	r3, #1
 80029d8:	633b      	str	r3, [r7, #48]	; 0x30
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d3c4      	bcc.n	800296e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80029e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	4413      	add	r3, r2
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80029ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029f0:	3301      	adds	r3, #1
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	4413      	add	r3, r2
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	021b      	lsls	r3, r3, #8
 80029fa:	69fa      	ldr	r2, [r7, #28]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a02:	3302      	adds	r3, #2
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	4413      	add	r3, r2
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	041b      	lsls	r3, r3, #16
 8002a0c:	69fa      	ldr	r2, [r7, #28]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a14:	3303      	adds	r3, #3
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	4413      	add	r3, r2
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	061b      	lsls	r3, r3, #24
 8002a1e:	69fa      	ldr	r2, [r7, #28]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a26:	3304      	adds	r3, #4
 8002a28:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	69fa      	ldr	r2, [r7, #28]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d90a      	bls.n	8002a4a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	699a      	ldr	r2, [r3, #24]
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4610      	mov	r0, r2
 8002a40:	f00d f972 	bl	800fd28 <realloc>
 8002a44:	4602      	mov	r2, r0
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69fa      	ldr	r2, [r7, #28]
 8002a4e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002a50:	2300      	movs	r3, #0
 8002a52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a54:	e035      	b.n	8002ac2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002a56:	2300      	movs	r3, #0
 8002a58:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a5e:	6839      	ldr	r1, [r7, #0]
 8002a60:	440a      	add	r2, r1
 8002a62:	7812      	ldrb	r2, [r2, #0]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	6839      	ldr	r1, [r7, #0]
 8002a70:	440b      	add	r3, r1
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	021b      	lsls	r3, r3, #8
 8002a76:	4313      	orrs	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a7e:	3302      	adds	r3, #2
 8002a80:	6839      	ldr	r1, [r7, #0]
 8002a82:	440b      	add	r3, r1
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	041b      	lsls	r3, r3, #16
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a90:	3303      	adds	r3, #3
 8002a92:	6839      	ldr	r1, [r7, #0]
 8002a94:	440b      	add	r3, r1
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	061b      	lsls	r3, r3, #24
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aa6:	3304      	adds	r3, #4
 8002aa8:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	699a      	ldr	r2, [r3, #24]
 8002aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	3214      	adds	r2, #20
 8002ab8:	6812      	ldr	r2, [r2, #0]
 8002aba:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002abe:	3301      	adds	r3, #1
 8002ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d3c4      	bcc.n	8002a56 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad8:	3301      	adds	r3, #1
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	4413      	add	r3, r2
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	021b      	lsls	r3, r3, #8
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aea:	3302      	adds	r3, #2
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	4413      	add	r3, r2
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	041b      	lsls	r3, r3, #16
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002afc:	3303      	adds	r3, #3
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	4413      	add	r3, r2
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	061b      	lsls	r3, r3, #24
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b0e:	3304      	adds	r3, #4
 8002b10:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d90a      	bls.n	8002b32 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4619      	mov	r1, r3
 8002b26:	4610      	mov	r0, r2
 8002b28:	f00d f8fe 	bl	800fd28 <realloc>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002b38:	2300      	movs	r3, #0
 8002b3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b3c:	e03e      	b.n	8002bbc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	441a      	add	r2, r3
 8002b44:	f107 030c 	add.w	r3, r7, #12
 8002b48:	4611      	mov	r1, r2
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f001 f979 	bl	8003e42 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b52:	3304      	adds	r3, #4
 8002b54:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24
 8002b5a:	e00b      	b.n	8002b74 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	441a      	add	r2, r3
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	3b01      	subs	r3, #1
 8002b66:	6839      	ldr	r1, [r7, #0]
 8002b68:	440b      	add	r3, r1
 8002b6a:	7812      	ldrb	r2, [r2, #0]
 8002b6c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	3301      	adds	r3, #1
 8002b72:	627b      	str	r3, [r7, #36]	; 0x24
 8002b74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	4413      	add	r3, r2
 8002b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d3ed      	bcc.n	8002b5c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002b80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	4413      	add	r3, r2
 8002b86:	3b01      	subs	r3, #1
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b92:	3b01      	subs	r3, #1
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	441a      	add	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002b9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	3220      	adds	r2, #32
 8002bb2:	6812      	ldr	r2, [r2, #0]
 8002bb4:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb8:	3301      	adds	r3, #1
 8002bba:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d3bb      	bcc.n	8002b3e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8002bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3738      	adds	r7, #56	; 0x38
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	4b03      	ldr	r3, [pc, #12]	; (8002be8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002bda:	4618      	mov	r0, r3
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	08010230 	.word	0x08010230

08002bec <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	4b03      	ldr	r3, [pc, #12]	; (8002c04 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	08010104 	.word	0x08010104

08002c08 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
 8002c14:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	611a      	str	r2, [r3, #16]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3714      	adds	r7, #20
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
  }
 8002c42:	4618      	mov	r0, r3
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
	...

08002c50 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 2048;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a4b      	ldr	r2, [pc, #300]	; (8002d90 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d077      	beq.n	8002d58 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a48      	ldr	r2, [pc, #288]	; (8002d94 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d06f      	beq.n	8002d58 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a45      	ldr	r2, [pc, #276]	; (8002d98 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d067      	beq.n	8002d58 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a42      	ldr	r2, [pc, #264]	; (8002d9c <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d05f      	beq.n	8002d58 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a3f      	ldr	r2, [pc, #252]	; (8002da0 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d057      	beq.n	8002d58 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a3c      	ldr	r2, [pc, #240]	; (8002da4 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d04f      	beq.n	8002d58 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a39      	ldr	r2, [pc, #228]	; (8002da8 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d047      	beq.n	8002d58 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a36      	ldr	r2, [pc, #216]	; (8002dac <_ZN13STM32Hardware10getRdmaIndEv+0x15c>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d03f      	beq.n	8002d58 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a33      	ldr	r2, [pc, #204]	; (8002db0 <_ZN13STM32Hardware10getRdmaIndEv+0x160>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d037      	beq.n	8002d58 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a30      	ldr	r2, [pc, #192]	; (8002db4 <_ZN13STM32Hardware10getRdmaIndEv+0x164>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d02f      	beq.n	8002d58 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a2d      	ldr	r2, [pc, #180]	; (8002db8 <_ZN13STM32Hardware10getRdmaIndEv+0x168>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d027      	beq.n	8002d58 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a2a      	ldr	r2, [pc, #168]	; (8002dbc <_ZN13STM32Hardware10getRdmaIndEv+0x16c>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d01f      	beq.n	8002d58 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a27      	ldr	r2, [pc, #156]	; (8002dc0 <_ZN13STM32Hardware10getRdmaIndEv+0x170>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d017      	beq.n	8002d58 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a24      	ldr	r2, [pc, #144]	; (8002dc4 <_ZN13STM32Hardware10getRdmaIndEv+0x174>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d00f      	beq.n	8002d58 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a21      	ldr	r2, [pc, #132]	; (8002dc8 <_ZN13STM32Hardware10getRdmaIndEv+0x178>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d007      	beq.n	8002d58 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a1e      	ldr	r2, [pc, #120]	; (8002dcc <_ZN13STM32Hardware10getRdmaIndEv+0x17c>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d10a      	bne.n	8002d6e <_ZN13STM32Hardware10getRdmaIndEv+0x11e>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002d68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d6c:	e009      	b.n	8002d82 <_ZN13STM32Hardware10getRdmaIndEv+0x132>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002d7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d82:	4618      	mov	r0, r3
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	40020010 	.word	0x40020010
 8002d94:	40020028 	.word	0x40020028
 8002d98:	40020040 	.word	0x40020040
 8002d9c:	40020058 	.word	0x40020058
 8002da0:	40020070 	.word	0x40020070
 8002da4:	40020088 	.word	0x40020088
 8002da8:	400200a0 	.word	0x400200a0
 8002dac:	400200b8 	.word	0x400200b8
 8002db0:	40020410 	.word	0x40020410
 8002db4:	40020428 	.word	0x40020428
 8002db8:	40020440 	.word	0x40020440
 8002dbc:	40020458 	.word	0x40020458
 8002dc0:	40020470 	.word	0x40020470
 8002dc4:	40020488 	.word	0x40020488
 8002dc8:	400204a0 	.word	0x400204a0
 8002dcc:	400204b8 	.word	0x400204b8

08002dd0 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a0c      	ldr	r2, [pc, #48]	; (8002e0c <_ZN13STM32HardwareC1Ev+0x3c>)
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dec:	461a      	mov	r2, r3
 8002dee:	2300      	movs	r3, #0
 8002df0:	6093      	str	r3, [r2, #8]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002df8:	461a      	mov	r2, r3
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60d3      	str	r3, [r2, #12]
    }
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4618      	mov	r0, r3
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	2400074c 	.word	0x2400074c

08002e10 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 f804 	bl	8002e26 <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002e1e:	bf00      	nop
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b082      	sub	sp, #8
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6818      	ldr	r0, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	3304      	adds	r3, #4
 8002e36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	f00a ff28 	bl	800dc90 <HAL_UART_Receive_DMA>
    }
 8002e40:	bf00      	nop
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002e48:	b590      	push	{r4, r7, lr}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002e50:	f04f 33ff 	mov.w	r3, #4294967295
 8002e54:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7ff fef7 	bl	8002c50 <_ZN13STM32Hardware10getRdmaIndEv>
 8002e62:	4603      	mov	r3, r0
 8002e64:	429c      	cmp	r4, r3
 8002e66:	bf14      	ite	ne
 8002e68:	2301      	movne	r3, #1
 8002e6a:	2300      	moveq	r3, #0
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d012      	beq.n	8002e98 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002e78:	1c59      	adds	r1, r3, #1
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	f8c2 1804 	str.w	r1, [r2, #2052]	; 0x804
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	4413      	add	r3, r2
 8002e84:	791b      	ldrb	r3, [r3, #4]
 8002e86:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002e8e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      }
      return c;
 8002e98:	68fb      	ldr	r3, [r7, #12]
    }
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd90      	pop	{r4, r7, pc}
	...

08002ea4 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb4:	2b20      	cmp	r3, #32
 8002eb6:	d108      	bne.n	8002eca <_ZN13STM32Hardware5flushEv+0x26>
 8002eb8:	4b2c      	ldr	r3, [pc, #176]	; (8002f6c <_ZN13STM32Hardware5flushEv+0xc8>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	f083 0301 	eor.w	r3, r3, #1
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <_ZN13STM32Hardware5flushEv+0x26>
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e000      	b.n	8002ecc <_ZN13STM32Hardware5flushEv+0x28>
 8002eca:	2300      	movs	r3, #0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d049      	beq.n	8002f64 <_ZN13STM32Hardware5flushEv+0xc0>
        mutex = true;
 8002ed0:	4b26      	ldr	r3, [pc, #152]	; (8002f6c <_ZN13STM32Hardware5flushEv+0xc8>)
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d039      	beq.n	8002f5e <_ZN13STM32Hardware5flushEv+0xba>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ef0:	68da      	ldr	r2, [r3, #12]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d20c      	bcs.n	8002f18 <_ZN13STM32Hardware5flushEv+0x74>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	e007      	b.n	8002f28 <_ZN13STM32Hardware5flushEv+0x84>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6818      	ldr	r0, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	89fa      	ldrh	r2, [r7, #14]
 8002f40:	4619      	mov	r1, r3
 8002f42:	f00a fe25 	bl	800db90 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	89fb      	ldrh	r3, [r7, #14]
 8002f50:	4413      	add	r3, r2
 8002f52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f5c:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 8002f5e:	4b03      	ldr	r3, [pc, #12]	; (8002f6c <_ZN13STM32Hardware5flushEv+0xc8>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	701a      	strb	r2, [r3, #0]
      }
    }
 8002f64:	bf00      	nop
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	240009c8 	.word	0x240009c8

08002f70 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
      int n = length;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f86:	bfa8      	it	ge
 8002f88:	f44f 6300 	movge.w	r3, #2048	; 0x800
 8002f8c:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	bf28      	it	cs
 8002fa0:	4613      	movcs	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	68b9      	ldr	r1, [r7, #8]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f00c ff21 	bl	800fe00 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fc4:	689a      	ldr	r2, [r3, #8]
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	4413      	add	r3, r2
 8002fca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002fd4:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d00b      	beq.n	8002ff6 <_ZN13STM32Hardware5writeEPhi+0x86>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f603 0008 	addw	r0, r3, #2056	; 0x808
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	68ba      	ldr	r2, [r7, #8]
 8002fe8:	18d1      	adds	r1, r2, r3
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	f00c ff05 	bl	800fe00 <memcpy>
      }

      flush();
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f7ff ff54 	bl	8002ea4 <_ZN13STM32Hardware5flushEv>
    }
 8002ffc:	bf00      	nop
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	f002 feac 	bl	8005d68 <HAL_GetTick>
 8003010:	4603      	mov	r3, r0
 8003012:	4618      	mov	r0, r3
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
	...

0800301c <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4618      	mov	r0, r3
 8003028:	f7fe ffb8 	bl	8001f9c <_ZN3ros3MsgC1Ev>
 800302c:	4a0e      	ldr	r2, [pc, #56]	; (8003068 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	601a      	str	r2, [r3, #0]
      x(0),
 8003032:	6879      	ldr	r1, [r7, #4]
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	f04f 0300 	mov.w	r3, #0
 800303c:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	f04f 0300 	mov.w	r3, #0
 800304a:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0)
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	f04f 0300 	mov.w	r3, #0
 8003058:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4618      	mov	r0, r3
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	080102c8 	.word	0x080102c8

0800306c <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800306c:	b480      	push	{r7}
 800306e:	b08b      	sub	sp, #44	; 0x2c
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003076:	2300      	movs	r3, #0
 8003078:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003080:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8003084:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003088:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800308a:	6838      	ldr	r0, [r7, #0]
 800308c:	4401      	add	r1, r0
 800308e:	b2d3      	uxtb	r3, r2
 8003090:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8003092:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	f04f 0300 	mov.w	r3, #0
 800309e:	0a02      	lsrs	r2, r0, #8
 80030a0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80030a4:	0a0b      	lsrs	r3, r1, #8
 80030a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030a8:	3101      	adds	r1, #1
 80030aa:	6838      	ldr	r0, [r7, #0]
 80030ac:	4401      	add	r1, r0
 80030ae:	b2d3      	uxtb	r3, r2
 80030b0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80030b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80030b6:	f04f 0200 	mov.w	r2, #0
 80030ba:	f04f 0300 	mov.w	r3, #0
 80030be:	0c02      	lsrs	r2, r0, #16
 80030c0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80030c4:	0c0b      	lsrs	r3, r1, #16
 80030c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030c8:	3102      	adds	r1, #2
 80030ca:	6838      	ldr	r0, [r7, #0]
 80030cc:	4401      	add	r1, r0
 80030ce:	b2d3      	uxtb	r3, r2
 80030d0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80030d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80030d6:	f04f 0200 	mov.w	r2, #0
 80030da:	f04f 0300 	mov.w	r3, #0
 80030de:	0e02      	lsrs	r2, r0, #24
 80030e0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80030e4:	0e0b      	lsrs	r3, r1, #24
 80030e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030e8:	3103      	adds	r1, #3
 80030ea:	6838      	ldr	r0, [r7, #0]
 80030ec:	4401      	add	r1, r0
 80030ee:	b2d3      	uxtb	r3, r2
 80030f0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80030f2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	f04f 0300 	mov.w	r3, #0
 80030fe:	000a      	movs	r2, r1
 8003100:	2300      	movs	r3, #0
 8003102:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003104:	3104      	adds	r1, #4
 8003106:	6838      	ldr	r0, [r7, #0]
 8003108:	4401      	add	r1, r0
 800310a:	b2d3      	uxtb	r3, r2
 800310c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800310e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003112:	f04f 0200 	mov.w	r2, #0
 8003116:	f04f 0300 	mov.w	r3, #0
 800311a:	0a0a      	lsrs	r2, r1, #8
 800311c:	2300      	movs	r3, #0
 800311e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003120:	3105      	adds	r1, #5
 8003122:	6838      	ldr	r0, [r7, #0]
 8003124:	4401      	add	r1, r0
 8003126:	b2d3      	uxtb	r3, r2
 8003128:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 800312a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800312e:	f04f 0200 	mov.w	r2, #0
 8003132:	f04f 0300 	mov.w	r3, #0
 8003136:	0c0a      	lsrs	r2, r1, #16
 8003138:	2300      	movs	r3, #0
 800313a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800313c:	3106      	adds	r1, #6
 800313e:	6838      	ldr	r0, [r7, #0]
 8003140:	4401      	add	r1, r0
 8003142:	b2d3      	uxtb	r3, r2
 8003144:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8003146:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800314a:	f04f 0200 	mov.w	r2, #0
 800314e:	f04f 0300 	mov.w	r3, #0
 8003152:	0e0a      	lsrs	r2, r1, #24
 8003154:	2300      	movs	r3, #0
 8003156:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003158:	3107      	adds	r1, #7
 800315a:	6838      	ldr	r0, [r7, #0]
 800315c:	4401      	add	r1, r0
 800315e:	b2d3      	uxtb	r3, r2
 8003160:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	3308      	adds	r3, #8
 8003166:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800316e:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8003172:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003176:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003178:	6838      	ldr	r0, [r7, #0]
 800317a:	4401      	add	r1, r0
 800317c:	b2d3      	uxtb	r3, r2
 800317e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8003180:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003184:	f04f 0200 	mov.w	r2, #0
 8003188:	f04f 0300 	mov.w	r3, #0
 800318c:	0a02      	lsrs	r2, r0, #8
 800318e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003192:	0a0b      	lsrs	r3, r1, #8
 8003194:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003196:	3101      	adds	r1, #1
 8003198:	6838      	ldr	r0, [r7, #0]
 800319a:	4401      	add	r1, r0
 800319c:	b2d3      	uxtb	r3, r2
 800319e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80031a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	f04f 0300 	mov.w	r3, #0
 80031ac:	0c02      	lsrs	r2, r0, #16
 80031ae:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80031b2:	0c0b      	lsrs	r3, r1, #16
 80031b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031b6:	3102      	adds	r1, #2
 80031b8:	6838      	ldr	r0, [r7, #0]
 80031ba:	4401      	add	r1, r0
 80031bc:	b2d3      	uxtb	r3, r2
 80031be:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80031c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	f04f 0300 	mov.w	r3, #0
 80031cc:	0e02      	lsrs	r2, r0, #24
 80031ce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80031d2:	0e0b      	lsrs	r3, r1, #24
 80031d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031d6:	3103      	adds	r1, #3
 80031d8:	6838      	ldr	r0, [r7, #0]
 80031da:	4401      	add	r1, r0
 80031dc:	b2d3      	uxtb	r3, r2
 80031de:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80031e0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80031e4:	f04f 0200 	mov.w	r2, #0
 80031e8:	f04f 0300 	mov.w	r3, #0
 80031ec:	000a      	movs	r2, r1
 80031ee:	2300      	movs	r3, #0
 80031f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031f2:	3104      	adds	r1, #4
 80031f4:	6838      	ldr	r0, [r7, #0]
 80031f6:	4401      	add	r1, r0
 80031f8:	b2d3      	uxtb	r3, r2
 80031fa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80031fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003200:	f04f 0200 	mov.w	r2, #0
 8003204:	f04f 0300 	mov.w	r3, #0
 8003208:	0a0a      	lsrs	r2, r1, #8
 800320a:	2300      	movs	r3, #0
 800320c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800320e:	3105      	adds	r1, #5
 8003210:	6838      	ldr	r0, [r7, #0]
 8003212:	4401      	add	r1, r0
 8003214:	b2d3      	uxtb	r3, r2
 8003216:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8003218:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800321c:	f04f 0200 	mov.w	r2, #0
 8003220:	f04f 0300 	mov.w	r3, #0
 8003224:	0c0a      	lsrs	r2, r1, #16
 8003226:	2300      	movs	r3, #0
 8003228:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800322a:	3106      	adds	r1, #6
 800322c:	6838      	ldr	r0, [r7, #0]
 800322e:	4401      	add	r1, r0
 8003230:	b2d3      	uxtb	r3, r2
 8003232:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8003234:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003238:	f04f 0200 	mov.w	r2, #0
 800323c:	f04f 0300 	mov.w	r3, #0
 8003240:	0e0a      	lsrs	r2, r1, #24
 8003242:	2300      	movs	r3, #0
 8003244:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003246:	3107      	adds	r1, #7
 8003248:	6838      	ldr	r0, [r7, #0]
 800324a:	4401      	add	r1, r0
 800324c:	b2d3      	uxtb	r3, r2
 800324e:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	3308      	adds	r3, #8
 8003254:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800325c:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8003260:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003264:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003266:	6838      	ldr	r0, [r7, #0]
 8003268:	4401      	add	r1, r0
 800326a:	b2d3      	uxtb	r3, r2
 800326c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 800326e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	f04f 0300 	mov.w	r3, #0
 800327a:	0a02      	lsrs	r2, r0, #8
 800327c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003280:	0a0b      	lsrs	r3, r1, #8
 8003282:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003284:	3101      	adds	r1, #1
 8003286:	6838      	ldr	r0, [r7, #0]
 8003288:	4401      	add	r1, r0
 800328a:	b2d3      	uxtb	r3, r2
 800328c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 800328e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003292:	f04f 0200 	mov.w	r2, #0
 8003296:	f04f 0300 	mov.w	r3, #0
 800329a:	0c02      	lsrs	r2, r0, #16
 800329c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80032a0:	0c0b      	lsrs	r3, r1, #16
 80032a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032a4:	3102      	adds	r1, #2
 80032a6:	6838      	ldr	r0, [r7, #0]
 80032a8:	4401      	add	r1, r0
 80032aa:	b2d3      	uxtb	r3, r2
 80032ac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80032ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032b2:	f04f 0200 	mov.w	r2, #0
 80032b6:	f04f 0300 	mov.w	r3, #0
 80032ba:	0e02      	lsrs	r2, r0, #24
 80032bc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80032c0:	0e0b      	lsrs	r3, r1, #24
 80032c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032c4:	3103      	adds	r1, #3
 80032c6:	6838      	ldr	r0, [r7, #0]
 80032c8:	4401      	add	r1, r0
 80032ca:	b2d3      	uxtb	r3, r2
 80032cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80032ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032d2:	f04f 0200 	mov.w	r2, #0
 80032d6:	f04f 0300 	mov.w	r3, #0
 80032da:	000a      	movs	r2, r1
 80032dc:	2300      	movs	r3, #0
 80032de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032e0:	3104      	adds	r1, #4
 80032e2:	6838      	ldr	r0, [r7, #0]
 80032e4:	4401      	add	r1, r0
 80032e6:	b2d3      	uxtb	r3, r2
 80032e8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80032ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	f04f 0300 	mov.w	r3, #0
 80032f6:	0a0a      	lsrs	r2, r1, #8
 80032f8:	2300      	movs	r3, #0
 80032fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032fc:	3105      	adds	r1, #5
 80032fe:	6838      	ldr	r0, [r7, #0]
 8003300:	4401      	add	r1, r0
 8003302:	b2d3      	uxtb	r3, r2
 8003304:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8003306:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800330a:	f04f 0200 	mov.w	r2, #0
 800330e:	f04f 0300 	mov.w	r3, #0
 8003312:	0c0a      	lsrs	r2, r1, #16
 8003314:	2300      	movs	r3, #0
 8003316:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003318:	3106      	adds	r1, #6
 800331a:	6838      	ldr	r0, [r7, #0]
 800331c:	4401      	add	r1, r0
 800331e:	b2d3      	uxtb	r3, r2
 8003320:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8003322:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003326:	f04f 0200 	mov.w	r2, #0
 800332a:	f04f 0300 	mov.w	r3, #0
 800332e:	0e0a      	lsrs	r2, r1, #24
 8003330:	2300      	movs	r3, #0
 8003332:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003334:	3107      	adds	r1, #7
 8003336:	6838      	ldr	r0, [r7, #0]
 8003338:	4401      	add	r1, r0
 800333a:	b2d3      	uxtb	r3, r2
 800333c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003340:	3308      	adds	r3, #8
 8003342:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003346:	4618      	mov	r0, r3
 8003348:	372c      	adds	r7, #44	; 0x2c
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003352:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003356:	b0eb      	sub	sp, #428	; 0x1ac
 8003358:	af00      	add	r7, sp, #0
 800335a:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 800335e:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8003362:	2300      	movs	r3, #0
 8003364:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	f04f 0300 	mov.w	r3, #0
 8003370:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003374:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003378:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800337c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003380:	4413      	add	r3, r2
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2200      	movs	r2, #0
 8003388:	461c      	mov	r4, r3
 800338a:	4615      	mov	r5, r2
 800338c:	ea40 0804 	orr.w	r8, r0, r4
 8003390:	ea41 0905 	orr.w	r9, r1, r5
 8003394:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003398:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800339c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80033a0:	1c5a      	adds	r2, r3, #1
 80033a2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80033a6:	4413      	add	r3, r2
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2200      	movs	r2, #0
 80033ae:	469a      	mov	sl, r3
 80033b0:	4693      	mov	fp, r2
 80033b2:	f04f 0200 	mov.w	r2, #0
 80033b6:	f04f 0300 	mov.w	r3, #0
 80033ba:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80033be:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80033c2:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80033c6:	ea40 0402 	orr.w	r4, r0, r2
 80033ca:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 80033ce:	430b      	orrs	r3, r1
 80033d0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80033d4:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 80033d8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80033dc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80033e0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80033e4:	1c9a      	adds	r2, r3, #2
 80033e6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80033ea:	4413      	add	r3, r2
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2200      	movs	r2, #0
 80033f2:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80033f6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 80033fa:	f04f 0200 	mov.w	r2, #0
 80033fe:	f04f 0300 	mov.w	r3, #0
 8003402:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8003406:	464c      	mov	r4, r9
 8003408:	0423      	lsls	r3, r4, #16
 800340a:	4644      	mov	r4, r8
 800340c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003410:	4644      	mov	r4, r8
 8003412:	0422      	lsls	r2, r4, #16
 8003414:	ea40 0402 	orr.w	r4, r0, r2
 8003418:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 800341c:	430b      	orrs	r3, r1
 800341e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8003422:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8003426:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800342a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800342e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003432:	1cda      	adds	r2, r3, #3
 8003434:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003438:	4413      	add	r3, r2
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2200      	movs	r2, #0
 8003440:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8003444:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8003448:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 800344c:	4623      	mov	r3, r4
 800344e:	0a1b      	lsrs	r3, r3, #8
 8003450:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8003454:	4623      	mov	r3, r4
 8003456:	061b      	lsls	r3, r3, #24
 8003458:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800345c:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8003460:	4623      	mov	r3, r4
 8003462:	4303      	orrs	r3, r0
 8003464:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003468:	462b      	mov	r3, r5
 800346a:	430b      	orrs	r3, r1
 800346c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003470:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8003474:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003478:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800347c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003480:	1d1a      	adds	r2, r3, #4
 8003482:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003486:	4413      	add	r3, r2
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2200      	movs	r2, #0
 800348e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8003492:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003496:	f04f 0200 	mov.w	r2, #0
 800349a:	f04f 0300 	mov.w	r3, #0
 800349e:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 80034a2:	0023      	movs	r3, r4
 80034a4:	2200      	movs	r2, #0
 80034a6:	ea40 0402 	orr.w	r4, r0, r2
 80034aa:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 80034ae:	430b      	orrs	r3, r1
 80034b0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80034b4:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80034b8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80034bc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80034c0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80034c4:	1d5a      	adds	r2, r3, #5
 80034c6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80034ca:	4413      	add	r3, r2
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2200      	movs	r2, #0
 80034d2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80034d6:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80034da:	f04f 0200 	mov.w	r2, #0
 80034de:	f04f 0300 	mov.w	r3, #0
 80034e2:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 80034e6:	0223      	lsls	r3, r4, #8
 80034e8:	2200      	movs	r2, #0
 80034ea:	ea40 0402 	orr.w	r4, r0, r2
 80034ee:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 80034f2:	430b      	orrs	r3, r1
 80034f4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80034f8:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 80034fc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003500:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003504:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003508:	1d9a      	adds	r2, r3, #6
 800350a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800350e:	4413      	add	r3, r2
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2200      	movs	r2, #0
 8003516:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800351a:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800351e:	f04f 0200 	mov.w	r2, #0
 8003522:	f04f 0300 	mov.w	r3, #0
 8003526:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 800352a:	0423      	lsls	r3, r4, #16
 800352c:	2200      	movs	r2, #0
 800352e:	ea40 0402 	orr.w	r4, r0, r2
 8003532:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8003536:	430b      	orrs	r3, r1
 8003538:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800353c:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8003540:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003544:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003548:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800354c:	1dda      	adds	r2, r3, #7
 800354e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003552:	4413      	add	r3, r2
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2200      	movs	r2, #0
 800355a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800355e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003562:	f04f 0200 	mov.w	r2, #0
 8003566:	f04f 0300 	mov.w	r3, #0
 800356a:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 800356e:	0623      	lsls	r3, r4, #24
 8003570:	2200      	movs	r2, #0
 8003572:	ea40 0402 	orr.w	r4, r0, r2
 8003576:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 800357a:	430b      	orrs	r3, r1
 800357c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003580:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8003584:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8003588:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800358c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003590:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8003594:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003598:	3308      	adds	r3, #8
 800359a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 800359e:	f04f 0200 	mov.w	r2, #0
 80035a2:	f04f 0300 	mov.w	r3, #0
 80035a6:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80035aa:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80035ae:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80035b2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80035b6:	4413      	add	r3, r2
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2200      	movs	r2, #0
 80035be:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80035c2:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80035c6:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80035ca:	4623      	mov	r3, r4
 80035cc:	4303      	orrs	r3, r0
 80035ce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80035d2:	462b      	mov	r3, r5
 80035d4:	430b      	orrs	r3, r1
 80035d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80035da:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 80035de:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80035e2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80035e6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80035ea:	1c5a      	adds	r2, r3, #1
 80035ec:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80035f0:	4413      	add	r3, r2
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2200      	movs	r2, #0
 80035f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80035fc:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	f04f 0300 	mov.w	r3, #0
 8003608:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 800360c:	464c      	mov	r4, r9
 800360e:	0223      	lsls	r3, r4, #8
 8003610:	4644      	mov	r4, r8
 8003612:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003616:	4644      	mov	r4, r8
 8003618:	0222      	lsls	r2, r4, #8
 800361a:	ea40 0402 	orr.w	r4, r0, r2
 800361e:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8003622:	430b      	orrs	r3, r1
 8003624:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003628:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 800362c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003630:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003634:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003638:	1c9a      	adds	r2, r3, #2
 800363a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800363e:	4413      	add	r3, r2
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2200      	movs	r2, #0
 8003646:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800364a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800364e:	f04f 0200 	mov.w	r2, #0
 8003652:	f04f 0300 	mov.w	r3, #0
 8003656:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800365a:	464c      	mov	r4, r9
 800365c:	0423      	lsls	r3, r4, #16
 800365e:	4644      	mov	r4, r8
 8003660:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003664:	4644      	mov	r4, r8
 8003666:	0422      	lsls	r2, r4, #16
 8003668:	ea40 0402 	orr.w	r4, r0, r2
 800366c:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8003670:	430b      	orrs	r3, r1
 8003672:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003676:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800367a:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800367e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003682:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003686:	1cda      	adds	r2, r3, #3
 8003688:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800368c:	4413      	add	r3, r2
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2200      	movs	r2, #0
 8003694:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003698:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800369c:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80036a0:	4623      	mov	r3, r4
 80036a2:	0a1b      	lsrs	r3, r3, #8
 80036a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80036a8:	4623      	mov	r3, r4
 80036aa:	061b      	lsls	r3, r3, #24
 80036ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80036b0:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80036b4:	4623      	mov	r3, r4
 80036b6:	4303      	orrs	r3, r0
 80036b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80036bc:	462b      	mov	r3, r5
 80036be:	430b      	orrs	r3, r1
 80036c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80036c4:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80036c8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80036cc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80036d0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80036d4:	1d1a      	adds	r2, r3, #4
 80036d6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80036da:	4413      	add	r3, r2
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2200      	movs	r2, #0
 80036e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036e6:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80036ea:	f04f 0200 	mov.w	r2, #0
 80036ee:	f04f 0300 	mov.w	r3, #0
 80036f2:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 80036f6:	0023      	movs	r3, r4
 80036f8:	2200      	movs	r2, #0
 80036fa:	ea40 0402 	orr.w	r4, r0, r2
 80036fe:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8003702:	430b      	orrs	r3, r1
 8003704:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003708:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 800370c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003710:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003714:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003718:	1d5a      	adds	r2, r3, #5
 800371a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800371e:	4413      	add	r3, r2
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2200      	movs	r2, #0
 8003726:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800372a:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800372e:	f04f 0200 	mov.w	r2, #0
 8003732:	f04f 0300 	mov.w	r3, #0
 8003736:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 800373a:	0223      	lsls	r3, r4, #8
 800373c:	2200      	movs	r2, #0
 800373e:	ea40 0402 	orr.w	r4, r0, r2
 8003742:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8003746:	430b      	orrs	r3, r1
 8003748:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800374c:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8003750:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003754:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003758:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800375c:	1d9a      	adds	r2, r3, #6
 800375e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003762:	4413      	add	r3, r2
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2200      	movs	r2, #0
 800376a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800376e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003772:	f04f 0200 	mov.w	r2, #0
 8003776:	f04f 0300 	mov.w	r3, #0
 800377a:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 800377e:	0423      	lsls	r3, r4, #16
 8003780:	2200      	movs	r2, #0
 8003782:	ea40 0402 	orr.w	r4, r0, r2
 8003786:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800378a:	430b      	orrs	r3, r1
 800378c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003790:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003794:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003798:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800379c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80037a0:	1dda      	adds	r2, r3, #7
 80037a2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80037a6:	4413      	add	r3, r2
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2200      	movs	r2, #0
 80037ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80037b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80037b6:	f04f 0200 	mov.w	r2, #0
 80037ba:	f04f 0300 	mov.w	r3, #0
 80037be:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 80037c2:	0623      	lsls	r3, r4, #24
 80037c4:	2200      	movs	r2, #0
 80037c6:	ea40 0402 	orr.w	r4, r0, r2
 80037ca:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 80037ce:	430b      	orrs	r3, r1
 80037d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80037d4:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80037d8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 80037dc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80037e0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80037e4:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 80037e8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80037ec:	3308      	adds	r3, #8
 80037ee:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 80037f2:	f04f 0200 	mov.w	r2, #0
 80037f6:	f04f 0300 	mov.w	r3, #0
 80037fa:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80037fe:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003802:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003806:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800380a:	4413      	add	r3, r2
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2200      	movs	r2, #0
 8003812:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003816:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800381a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800381e:	4623      	mov	r3, r4
 8003820:	4303      	orrs	r3, r0
 8003822:	67bb      	str	r3, [r7, #120]	; 0x78
 8003824:	462b      	mov	r3, r5
 8003826:	430b      	orrs	r3, r1
 8003828:	67fb      	str	r3, [r7, #124]	; 0x7c
 800382a:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800382e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003832:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003836:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800383a:	1c5a      	adds	r2, r3, #1
 800383c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003840:	4413      	add	r3, r2
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2200      	movs	r2, #0
 8003848:	673b      	str	r3, [r7, #112]	; 0x70
 800384a:	677a      	str	r2, [r7, #116]	; 0x74
 800384c:	f04f 0200 	mov.w	r2, #0
 8003850:	f04f 0300 	mov.w	r3, #0
 8003854:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003858:	464c      	mov	r4, r9
 800385a:	0223      	lsls	r3, r4, #8
 800385c:	4644      	mov	r4, r8
 800385e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003862:	4644      	mov	r4, r8
 8003864:	0222      	lsls	r2, r4, #8
 8003866:	ea40 0402 	orr.w	r4, r0, r2
 800386a:	66bc      	str	r4, [r7, #104]	; 0x68
 800386c:	430b      	orrs	r3, r1
 800386e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003870:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003874:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003878:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800387c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003880:	1c9a      	adds	r2, r3, #2
 8003882:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003886:	4413      	add	r3, r2
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2200      	movs	r2, #0
 800388e:	663b      	str	r3, [r7, #96]	; 0x60
 8003890:	667a      	str	r2, [r7, #100]	; 0x64
 8003892:	f04f 0200 	mov.w	r2, #0
 8003896:	f04f 0300 	mov.w	r3, #0
 800389a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800389e:	464c      	mov	r4, r9
 80038a0:	0423      	lsls	r3, r4, #16
 80038a2:	4644      	mov	r4, r8
 80038a4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80038a8:	4644      	mov	r4, r8
 80038aa:	0422      	lsls	r2, r4, #16
 80038ac:	ea40 0402 	orr.w	r4, r0, r2
 80038b0:	65bc      	str	r4, [r7, #88]	; 0x58
 80038b2:	430b      	orrs	r3, r1
 80038b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038b6:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80038ba:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80038be:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80038c2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80038c6:	1cda      	adds	r2, r3, #3
 80038c8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80038cc:	4413      	add	r3, r2
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2200      	movs	r2, #0
 80038d4:	653b      	str	r3, [r7, #80]	; 0x50
 80038d6:	657a      	str	r2, [r7, #84]	; 0x54
 80038d8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80038dc:	4623      	mov	r3, r4
 80038de:	0a1b      	lsrs	r3, r3, #8
 80038e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038e2:	4623      	mov	r3, r4
 80038e4:	061b      	lsls	r3, r3, #24
 80038e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80038e8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80038ec:	4623      	mov	r3, r4
 80038ee:	4303      	orrs	r3, r0
 80038f0:	643b      	str	r3, [r7, #64]	; 0x40
 80038f2:	462b      	mov	r3, r5
 80038f4:	430b      	orrs	r3, r1
 80038f6:	647b      	str	r3, [r7, #68]	; 0x44
 80038f8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80038fc:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003900:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003904:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003908:	1d1a      	adds	r2, r3, #4
 800390a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800390e:	4413      	add	r3, r2
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2200      	movs	r2, #0
 8003916:	63bb      	str	r3, [r7, #56]	; 0x38
 8003918:	63fa      	str	r2, [r7, #60]	; 0x3c
 800391a:	f04f 0200 	mov.w	r2, #0
 800391e:	f04f 0300 	mov.w	r3, #0
 8003922:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003924:	0023      	movs	r3, r4
 8003926:	2200      	movs	r2, #0
 8003928:	ea40 0402 	orr.w	r4, r0, r2
 800392c:	633c      	str	r4, [r7, #48]	; 0x30
 800392e:	430b      	orrs	r3, r1
 8003930:	637b      	str	r3, [r7, #52]	; 0x34
 8003932:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003936:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800393a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800393e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003942:	1d5a      	adds	r2, r3, #5
 8003944:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003948:	4413      	add	r3, r2
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2200      	movs	r2, #0
 8003950:	62bb      	str	r3, [r7, #40]	; 0x28
 8003952:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003954:	f04f 0200 	mov.w	r2, #0
 8003958:	f04f 0300 	mov.w	r3, #0
 800395c:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800395e:	0223      	lsls	r3, r4, #8
 8003960:	2200      	movs	r2, #0
 8003962:	ea40 0402 	orr.w	r4, r0, r2
 8003966:	623c      	str	r4, [r7, #32]
 8003968:	430b      	orrs	r3, r1
 800396a:	627b      	str	r3, [r7, #36]	; 0x24
 800396c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003970:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003974:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003978:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800397c:	3306      	adds	r3, #6
 800397e:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003982:	4413      	add	r3, r2
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2200      	movs	r2, #0
 800398a:	61bb      	str	r3, [r7, #24]
 800398c:	61fa      	str	r2, [r7, #28]
 800398e:	f04f 0200 	mov.w	r2, #0
 8003992:	f04f 0300 	mov.w	r3, #0
 8003996:	69bc      	ldr	r4, [r7, #24]
 8003998:	0423      	lsls	r3, r4, #16
 800399a:	2200      	movs	r2, #0
 800399c:	ea40 0402 	orr.w	r4, r0, r2
 80039a0:	613c      	str	r4, [r7, #16]
 80039a2:	430b      	orrs	r3, r1
 80039a4:	617b      	str	r3, [r7, #20]
 80039a6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80039aa:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80039ae:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80039b2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80039b6:	3307      	adds	r3, #7
 80039b8:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80039bc:	4413      	add	r3, r2
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2200      	movs	r2, #0
 80039c4:	60bb      	str	r3, [r7, #8]
 80039c6:	60fa      	str	r2, [r7, #12]
 80039c8:	f04f 0200 	mov.w	r2, #0
 80039cc:	f04f 0300 	mov.w	r3, #0
 80039d0:	68bc      	ldr	r4, [r7, #8]
 80039d2:	0623      	lsls	r3, r4, #24
 80039d4:	2200      	movs	r2, #0
 80039d6:	ea40 0402 	orr.w	r4, r0, r2
 80039da:	603c      	str	r4, [r7, #0]
 80039dc:	430b      	orrs	r3, r1
 80039de:	607b      	str	r3, [r7, #4]
 80039e0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80039e4:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 80039e8:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80039ec:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 80039f0:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 80039f4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80039f8:	3308      	adds	r3, #8
 80039fa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 80039fe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8003a02:	4618      	mov	r0, r3
 8003a04:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003a0e:	4770      	bx	lr

08003a10 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	4b03      	ldr	r3, [pc, #12]	; (8003a28 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	08010128 	.word	0x08010128

08003a2c <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	4b03      	ldr	r3, [pc, #12]	; (8003a44 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8003a36:	4618      	mov	r0, r3
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	08010140 	.word	0x08010140

08003a48 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fe faa2 	bl	8001f9c <_ZN3ros3MsgC1Ev>
 8003a58:	4a08      	ldr	r2, [pc, #32]	; (8003a7c <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	601a      	str	r2, [r3, #0]
      linear(),
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	3308      	adds	r3, #8
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7ff fada 	bl	800301c <_ZN13geometry_msgs7Vector3C1Ev>
      angular()
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3328      	adds	r3, #40	; 0x28
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7ff fad5 	bl	800301c <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4618      	mov	r0, r3
 8003a76:	3708      	adds	r7, #8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	080102b0 	.word	0x080102b0

08003a80 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f103 0008 	add.w	r0, r3, #8
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	4413      	add	r3, r2
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	f7ff fae6 	bl	800306c <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	f7ff fad9 	bl	800306c <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003aba:	4602      	mov	r2, r0
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4413      	add	r3, r2
 8003ac0:	60fb      	str	r3, [r7, #12]
      return offset;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
    }
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f103 0008 	add.w	r0, r3, #8
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	f7ff fc33 	bl	8003352 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003aec:	4602      	mov	r2, r0
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	4413      	add	r3, r2
 8003af2:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	4413      	add	r3, r2
 8003b00:	4619      	mov	r1, r3
 8003b02:	f7ff fc26 	bl	8003352 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003b06:	4602      	mov	r2, r0
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	60fb      	str	r3, [r7, #12]
     return offset;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
    }
 8003b10:	4618      	mov	r0, r3
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	4b03      	ldr	r3, [pc, #12]	; (8003b30 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8003b22:	4618      	mov	r0, r3
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	08010164 	.word	0x08010164

08003b34 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	4b03      	ldr	r3, [pc, #12]	; (8003b4c <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8003b3e:	4618      	mov	r0, r3
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	08010178 	.word	0x08010178

08003b50 <_ZN8std_msgs4Int8C1Ev>:
  {
    public:
      typedef int8_t _data_type;
      _data_type data;

    Int8():
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
      data(0)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fe fa1e 	bl	8001f9c <_ZN3ros3MsgC1Ev>
 8003b60:	4a05      	ldr	r2, [pc, #20]	; (8003b78 <_ZN8std_msgs4Int8C1Ev+0x28>)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	601a      	str	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	711a      	strb	r2, [r3, #4]
    {
    }
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	08010298 	.word	0x08010298

08003b7c <_ZNK8std_msgs4Int89serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003b86:	2300      	movs	r3, #0
 8003b88:	60fb      	str	r3, [r7, #12]
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003b90:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	683a      	ldr	r2, [r7, #0]
 8003b96:	4413      	add	r3, r2
 8003b98:	7a3a      	ldrb	r2, [r7, #8]
 8003b9a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	60fb      	str	r3, [r7, #12]
      return offset;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
    }
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3714      	adds	r7, #20
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <_ZN8std_msgs4Int811deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60fb      	str	r3, [r7, #12]
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003bc2:	7a3a      	ldrb	r2, [r7, #8]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6839      	ldr	r1, [r7, #0]
 8003bc8:	440b      	add	r3, r1
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 8003bd2:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	3301      	adds	r3, #1
 8003bde:	60fb      	str	r3, [r7, #12]
     return offset;
 8003be0:	68fb      	ldr	r3, [r7, #12]
    }
 8003be2:	4618      	mov	r0, r3
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
	...

08003bf0 <_ZN8std_msgs4Int87getTypeEv>:

    const char * getType(){ return "std_msgs/Int8"; };
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	4b03      	ldr	r3, [pc, #12]	; (8003c08 <_ZN8std_msgs4Int87getTypeEv+0x18>)
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	0801019c 	.word	0x0801019c

08003c0c <_ZN8std_msgs4Int86getMD5Ev>:
    const char * getMD5(){ return "27ffa0c9c4b8fb8492252bcad9e5c57b"; };
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	4b03      	ldr	r3, [pc, #12]	; (8003c24 <_ZN8std_msgs4Int86getMD5Ev+0x18>)
 8003c16:	4618      	mov	r0, r3
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	080101ac 	.word	0x080101ac

08003c28 <_Z12vel_callbackRKN13geometry_msgs5TwistE>:


geometry_msgs::Twist speed;

void vel_callback(const geometry_msgs::Twist &msg)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
	Vx = msg.linear.x;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003c36:	490a      	ldr	r1, [pc, #40]	; (8003c60 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x38>)
 8003c38:	e9c1 2300 	strd	r2, r3, [r1]
	Vy = msg.linear.y;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003c42:	4908      	ldr	r1, [pc, #32]	; (8003c64 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x3c>)
 8003c44:	e9c1 2300 	strd	r2, r3, [r1]
	W = msg.angular.z;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003c4e:	4906      	ldr	r1, [pc, #24]	; (8003c68 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x40>)
 8003c50:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	24000970 	.word	0x24000970
 8003c64:	24000978 	.word	0x24000978
 8003c68:	24000980 	.word	0x24000980

08003c6c <_Z12ori_callbackRKN8std_msgs4Int8E>:
void ori_callback(const std_msgs::Int8 &msg){
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
	flag = msg.data;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	4b03      	ldr	r3, [pc, #12]	; (8003c8c <_Z12ori_callbackRKN8std_msgs4Int8E+0x20>)
 8003c7e:	601a      	str	r2, [r3, #0]
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	24000968 	.word	0x24000968

08003c90 <_Z9ros_setupv>:
 if(run_inter0 > 1)
	pub_vel.publish(&speed);

}
void ros_setup(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
    nh.initNode();
 8003c94:	4808      	ldr	r0, [pc, #32]	; (8003cb8 <_Z9ros_setupv+0x28>)
 8003c96:	f000 f9fd 	bl	8004094 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
    nh.subscribe(sub_vel);
 8003c9a:	4908      	ldr	r1, [pc, #32]	; (8003cbc <_Z9ros_setupv+0x2c>)
 8003c9c:	4806      	ldr	r0, [pc, #24]	; (8003cb8 <_Z9ros_setupv+0x28>)
 8003c9e:	f000 fa22 	bl	80040e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
    nh.advertise(pub_vel);
 8003ca2:	4907      	ldr	r1, [pc, #28]	; (8003cc0 <_Z9ros_setupv+0x30>)
 8003ca4:	4804      	ldr	r0, [pc, #16]	; (8003cb8 <_Z9ros_setupv+0x28>)
 8003ca6:	f000 fa49 	bl	800413c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
    nh.subscribe(sub_ori);
 8003caa:	4906      	ldr	r1, [pc, #24]	; (8003cc4 <_Z9ros_setupv+0x34>)
 8003cac:	4802      	ldr	r0, [pc, #8]	; (8003cb8 <_Z9ros_setupv+0x28>)
 8003cae:	f000 fa75 	bl	800419c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>
//  nh.subscribe(sub_laji);
//	nh.advertise(pub_laji);

}
 8003cb2:	bf00      	nop
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	24000a18 	.word	0x24000a18
 8003cbc:	24001f58 	.word	0x24001f58
 8003cc0:	24001fb8 	.word	0x24001fb8
 8003cc4:	24001fcc 	.word	0x24001fcc

08003cc8 <_Z8ros_loopv>:
void ros_loop(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
    nh.spinOnce();
 8003ccc:	4802      	ldr	r0, [pc, #8]	; (8003cd8 <_Z8ros_loopv+0x10>)
 8003cce:	f000 fa90 	bl	80041f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
//    interPub();
}
 8003cd2:	bf00      	nop
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	24000a18 	.word	0x24000a18

08003cdc <_Z13Error_Handlerv>:
/* UART Communication */
void Error_Handler(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003ce0:	b672      	cpsid	i
}
 8003ce2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ce4:	e7fe      	b.n	8003ce4 <_Z13Error_Handlerv+0x8>
	...

08003ce8 <_ZL19MX_USART1_UART_Initv>:
  }
  /* USER CODE END Error_Handler_Debug */
}

static void MX_USART1_UART_Init(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003cec:	4b2c      	ldr	r3, [pc, #176]	; (8003da0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003cee:	4a2d      	ldr	r2, [pc, #180]	; (8003da4 <_ZL19MX_USART1_UART_Initv+0xbc>)
 8003cf0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8003cf2:	4b2b      	ldr	r3, [pc, #172]	; (8003da0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003cf4:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8003cf8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003cfa:	4b29      	ldr	r3, [pc, #164]	; (8003da0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003d00:	4b27      	ldr	r3, [pc, #156]	; (8003da0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003d06:	4b26      	ldr	r3, [pc, #152]	; (8003da0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003d0c:	4b24      	ldr	r3, [pc, #144]	; (8003da0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d0e:	220c      	movs	r2, #12
 8003d10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d12:	4b23      	ldr	r3, [pc, #140]	; (8003da0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d18:	4b21      	ldr	r3, [pc, #132]	; (8003da0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d1e:	4b20      	ldr	r3, [pc, #128]	; (8003da0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003d24:	4b1e      	ldr	r3, [pc, #120]	; (8003da0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d2a:	4b1d      	ldr	r3, [pc, #116]	; (8003da0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003d30:	481b      	ldr	r0, [pc, #108]	; (8003da0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d32:	f009 fe0f 	bl	800d954 <HAL_UART_Init>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	bf14      	ite	ne
 8003d3c:	2301      	movne	r3, #1
 8003d3e:	2300      	moveq	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8003d46:	f7ff ffc9 	bl	8003cdc <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	4814      	ldr	r0, [pc, #80]	; (8003da0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d4e:	f00b ff21 	bl	800fb94 <HAL_UARTEx_SetTxFifoThreshold>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	bf14      	ite	ne
 8003d58:	2301      	movne	r3, #1
 8003d5a:	2300      	moveq	r3, #0
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d001      	beq.n	8003d66 <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 8003d62:	f7ff ffbb 	bl	8003cdc <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003d66:	2100      	movs	r1, #0
 8003d68:	480d      	ldr	r0, [pc, #52]	; (8003da0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d6a:	f00b ff51 	bl	800fc10 <HAL_UARTEx_SetRxFifoThreshold>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	bf14      	ite	ne
 8003d74:	2301      	movne	r3, #1
 8003d76:	2300      	moveq	r3, #0
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8003d7e:	f7ff ffad 	bl	8003cdc <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003d82:	4807      	ldr	r0, [pc, #28]	; (8003da0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d84:	f00b fecd 	bl	800fb22 <HAL_UARTEx_DisableFifoMode>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	bf14      	ite	ne
 8003d8e:	2301      	movne	r3, #1
 8003d90:	2300      	moveq	r3, #0
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8003d98:	f7ff ffa0 	bl	8003cdc <_Z13Error_Handlerv>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003d9c:	bf00      	nop
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	2400074c 	.word	0x2400074c
 8003da4:	40011000 	.word	0x40011000

08003da8 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
    if(huart == &huart1){
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a09      	ldr	r2, [pc, #36]	; (8003dd8 <HAL_UART_ErrorCallback+0x30>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d10b      	bne.n	8003dd0 <HAL_UART_ErrorCallback+0x28>
    // set velocity 0 before uart reinitialization


		HAL_UART_DeInit(&huart1);
 8003db8:	4807      	ldr	r0, [pc, #28]	; (8003dd8 <HAL_UART_ErrorCallback+0x30>)
 8003dba:	f009 fe1b 	bl	800d9f4 <HAL_UART_DeInit>
		MX_USART1_UART_Init();
 8003dbe:	f7ff ff93 	bl	8003ce8 <_ZL19MX_USART1_UART_Initv>
		nh.getHardware()->init();
 8003dc2:	4806      	ldr	r0, [pc, #24]	; (8003ddc <HAL_UART_ErrorCallback+0x34>)
 8003dc4:	f000 fc8d 	bl	80046e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7ff f820 	bl	8002e10 <_ZN13STM32Hardware4initEv>
    }
}
 8003dd0:	bf00      	nop
 8003dd2:	3708      	adds	r7, #8
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	2400074c 	.word	0x2400074c
 8003ddc:	24000a18 	.word	0x24000a18

08003de0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8003de8:	4805      	ldr	r0, [pc, #20]	; (8003e00 <HAL_UART_TxCpltCallback+0x20>)
 8003dea:	f000 fc7a 	bl	80046e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003dee:	4603      	mov	r3, r0
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7ff f857 	bl	8002ea4 <_ZN13STM32Hardware5flushEv>
}
 8003df6:	bf00      	nop
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	24000a18 	.word	0x24000a18

08003e04 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60fb      	str	r3, [r7, #12]
 8003e12:	e00c      	b.n	8003e2e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	fa22 f103 	lsr.w	r1, r2, r3
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4413      	add	r3, r2
 8003e24:	b2ca      	uxtb	r2, r1
 8003e26:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	60fb      	str	r3, [r7, #12]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2b03      	cmp	r3, #3
 8003e32:	d9ef      	bls.n	8003e14 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8003e34:	bf00      	nop
 8003e36:	bf00      	nop
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003e42:	b480      	push	{r7}
 8003e44:	b085      	sub	sp, #20
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
 8003e4a:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003e52:	2300      	movs	r3, #0
 8003e54:	60fb      	str	r3, [r7, #12]
 8003e56:	e010      	b.n	8003e7a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6839      	ldr	r1, [r7, #0]
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	440a      	add	r2, r1
 8003e62:	7812      	ldrb	r2, [r2, #0]
 8003e64:	4611      	mov	r1, r2
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	00d2      	lsls	r2, r2, #3
 8003e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	3301      	adds	r3, #1
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2b03      	cmp	r3, #3
 8003e7e:	d9eb      	bls.n	8003e58 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8003e80:	bf00      	nop
 8003e82:	bf00      	nop
 8003e84:	3714      	adds	r7, #20
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
	...

08003e90 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	4a04      	ldr	r2, [pc, #16]	; (8003eac <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	080102f8 	.word	0x080102f8

08003eb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7ff ffe8 	bl	8003e90 <_ZN3ros15NodeHandleBase_C1Ev>
 8003ec0:	4a47      	ldr	r2, [pc, #284]	; (8003fe0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x130>)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	3304      	adds	r3, #4
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7fe ff80 	bl	8002dd0 <_ZN13STM32HardwareC1Ev>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	f241 5314 	movw	r3, #5396	; 0x1514
 8003ee2:	4413      	add	r3, r2
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7fe fbcd 	bl	8002684 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003eea:	2300      	movs	r3, #0
 8003eec:	617b      	str	r3, [r7, #20]
 8003eee:	e00a      	b.n	8003f06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4413      	add	r3, r2
 8003efc:	2200      	movs	r2, #0
 8003efe:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	3301      	adds	r3, #1
 8003f04:	617b      	str	r3, [r7, #20]
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	2b18      	cmp	r3, #24
 8003f0a:	d9f1      	bls.n	8003ef0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x40>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	613b      	str	r3, [r7, #16]
 8003f10:	e009      	b.n	8003f26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	3301      	adds	r3, #1
 8003f24:	613b      	str	r3, [r7, #16]
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	2b18      	cmp	r3, #24
 8003f2a:	d9f2      	bls.n	8003f12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x62>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	60fb      	str	r3, [r7, #12]
 8003f30:	e00a      	b.n	8003f48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	441a      	add	r2, r3
 8003f38:	f241 0324 	movw	r3, #4132	; 0x1024
 8003f3c:	4413      	add	r3, r2
 8003f3e:	2200      	movs	r2, #0
 8003f40:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	3301      	adds	r3, #1
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f4e:	d3f0      	bcc.n	8003f32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x82>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003f50:	2300      	movs	r3, #0
 8003f52:	60bb      	str	r3, [r7, #8]
 8003f54:	e00a      	b.n	8003f6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xbc>
      message_out[i] = 0;
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	441a      	add	r2, r3
 8003f5c:	f241 2324 	movw	r3, #4644	; 0x1224
 8003f60:	4413      	add	r3, r2
 8003f62:	2200      	movs	r2, #0
 8003f64:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	3301      	adds	r3, #1
 8003f6a:	60bb      	str	r3, [r7, #8]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f72:	d3f0      	bcc.n	8003f56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa6>

    req_param_resp.ints_length = 0;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f88:	461a      	mov	r2, r3
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
    req_param_resp.floats_length = 0;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f96:	461a      	mov	r2, r3
 8003f98:	2300      	movs	r3, #0
 8003f9a:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
    req_param_resp.floats = NULL;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    req_param_resp.ints_length = 0;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520

    spin_timeout_ = 0;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fce:	461a      	mov	r2, r3
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	6213      	str	r3, [r2, #32]
  }
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3718      	adds	r7, #24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	08010284 	.word	0x08010284

08003fe4 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	4a04      	ldr	r2, [pc, #16]	; (8004000 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	080102e0 	.word	0x080102e0

08004004 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
 8004010:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	4618      	mov	r0, r3
 8004016:	f7ff ffe5 	bl	8003fe4 <_ZN3ros11Subscriber_C1Ev>
 800401a:	4a0b      	ldr	r2, [pc, #44]	; (8004048 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	3310      	adds	r3, #16
 8004024:	4618      	mov	r0, r3
 8004026:	f7ff fd0f 	bl	8003a48 <_ZN13geometry_msgs5TwistC1Ev>
    cb_(cb),
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	659a      	str	r2, [r3, #88]	; 0x58
    endpoint_(endpoint)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	609a      	str	r2, [r3, #8]
  };
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	4618      	mov	r0, r3
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	0801026c 	.word	0x0801026c

0800404c <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
 8004058:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	4618      	mov	r0, r3
 800405e:	f7ff ffc1 	bl	8003fe4 <_ZN3ros11Subscriber_C1Ev>
 8004062:	4a0b      	ldr	r2, [pc, #44]	; (8004090 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei+0x44>)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	330c      	adds	r3, #12
 800406c:	4618      	mov	r0, r3
 800406e:	f7ff fd6f 	bl	8003b50 <_ZN8std_msgs4Int8C1Ev>
    cb_(cb),
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	619a      	str	r2, [r3, #24]
    topic_ = topic_name;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	609a      	str	r2, [r3, #8]
  };
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4618      	mov	r0, r3
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	08010254 	.word	0x08010254

08004094 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	3304      	adds	r3, #4
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7fe feb5 	bl	8002e10 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040ac:	461a      	mov	r2, r3
 80040ae:	2300      	movs	r3, #0
 80040b0:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
    bytes_ = 0;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040ba:	461a      	mov	r2, r3
 80040bc:	2300      	movs	r3, #0
 80040be:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
    index_ = 0;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040c8:	461a      	mov	r2, r3
 80040ca:	2300      	movs	r3, #0
 80040cc:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
    topic_ = 0;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040d6:	461a      	mov	r2, r3
 80040d8:	2300      	movs	r3, #0
 80040da:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
  };
 80040de:	bf00      	nop
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 80040e6:	b480      	push	{r7}
 80040e8:	b085      	sub	sp, #20
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
 80040ee:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80040f0:	2300      	movs	r3, #0
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	e018      	b.n	8004128 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x42>
    {
      if (subscribers[i] == 0) // empty slot
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80040fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10d      	bne.n	8004122 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x3c>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8004106:	6839      	ldr	r1, [r7, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	605a      	str	r2, [r3, #4]
        return true;
 800411e:	2301      	movs	r3, #1
 8004120:	e006      	b.n	8004130 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	3301      	adds	r3, #1
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2b18      	cmp	r3, #24
 800412c:	dde3      	ble.n	80040f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x10>
      }
    }
    return false;
 800412e:	2300      	movs	r3, #0
  }
 8004130:	4618      	mov	r0, r3
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004146:	2300      	movs	r3, #0
 8004148:	60fb      	str	r3, [r7, #12]
 800414a:	e01d      	b.n	8004188 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
      if (publishers[i] == 0) // empty slot
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	4413      	add	r3, r2
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d111      	bne.n	8004182 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
        publishers[i] = &p;
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	60da      	str	r2, [r3, #12]
        return true;
 800417e:	2301      	movs	r3, #1
 8004180:	e006      	b.n	8004190 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	3301      	adds	r3, #1
 8004186:	60fb      	str	r3, [r7, #12]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2b18      	cmp	r3, #24
 800418c:	ddde      	ble.n	800414c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
    return false;
 800418e:	2300      	movs	r3, #0
  }
 8004190:	4618      	mov	r0, r3
 8004192:	3714      	adds	r7, #20
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80041a6:	2300      	movs	r3, #0
 80041a8:	60fb      	str	r3, [r7, #12]
 80041aa:	e018      	b.n	80041de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0x42>
      if (subscribers[i] == 0) // empty slot
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80041b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10d      	bne.n	80041d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0x3c>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80041bc:	6839      	ldr	r1, [r7, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80041c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	605a      	str	r2, [r3, #4]
        return true;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e006      	b.n	80041e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	3301      	adds	r3, #1
 80041dc:	60fb      	str	r3, [r7, #12]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2b18      	cmp	r3, #24
 80041e2:	dde3      	ble.n	80041ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0x10>
    return false;
 80041e4:	2300      	movs	r3, #0
  }
 80041e6:	4618      	mov	r0, r3
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b084      	sub	sp, #16
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	3304      	adds	r3, #4
 80041fe:	4618      	mov	r0, r3
 8004200:	f7fe ff00 	bl	8003004 <_ZN13STM32Hardware4timeEv>
 8004204:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800420c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004218:	4293      	cmp	r3, r2
 800421a:	d905      	bls.n	8004228 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      configured_ = false;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004222:	2200      	movs	r2, #0
 8004224:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
    if (mode_ != MODE_FIRST_FF)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800422e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00e      	beq.n	8004254 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800423c:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	429a      	cmp	r2, r3
 8004244:	d906      	bls.n	8004254 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800424c:	461a      	mov	r2, r3
 800424e:	2300      	movs	r3, #0
 8004250:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
      if (spin_timeout_ > 0)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d015      	beq.n	800428c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	3304      	adds	r3, #4
 8004264:	4618      	mov	r0, r3
 8004266:	f7fe fecd 	bl	8003004 <_ZN13STM32Hardware4timeEv>
 800426a:	4602      	mov	r2, r0
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	1ad2      	subs	r2, r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	429a      	cmp	r2, r3
 800427a:	bf8c      	ite	hi
 800427c:	2301      	movhi	r3, #1
 800427e:	2300      	movls	r3, #0
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d002      	beq.n	800428c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
          return SPIN_TIMEOUT;
 8004286:	f06f 0301 	mvn.w	r3, #1
 800428a:	e226      	b.n	80046da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      int data = hardware_.read();
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	3304      	adds	r3, #4
 8004290:	4618      	mov	r0, r3
 8004292:	f7fe fdd9 	bl	8002e48 <_ZN13STM32Hardware4readEv>
 8004296:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	2b00      	cmp	r3, #0
 800429c:	f2c0 81ff 	blt.w	800469e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ac>
      checksum_ += data;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042a6:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	; 0x4fc
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	4413      	add	r3, r2
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80042b4:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042be:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80042c2:	2b07      	cmp	r3, #7
 80042c4:	d12d      	bne.n	8004322 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042cc:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 80042d0:	1c5a      	adds	r2, r3, #1
 80042d2:	6879      	ldr	r1, [r7, #4]
 80042d4:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80042d8:	f8c1 24f8 	str.w	r2, [r1, #1272]	; 0x4f8
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	b2d1      	uxtb	r1, r2
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	441a      	add	r2, r3
 80042e4:	f241 0324 	movw	r3, #4132	; 0x1024
 80042e8:	4413      	add	r3, r2
 80042ea:	460a      	mov	r2, r1
 80042ec:	701a      	strb	r2, [r3, #0]
        bytes_--;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042f4:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 80042f8:	3b01      	subs	r3, #1
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004300:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800430a:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1a0      	bne.n	8004254 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004318:	461a      	mov	r2, r3
 800431a:	2308      	movs	r3, #8
 800431c:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004320:	e798      	b.n	8004254 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004328:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800432c:	2b00      	cmp	r3, #0
 800432e:	d130      	bne.n	8004392 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	2bff      	cmp	r3, #255	; 0xff
 8004334:	d112      	bne.n	800435c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x16a>
          mode_++;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800433c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004340:	3301      	adds	r3, #1
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004348:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	3314      	adds	r3, #20
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004356:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
 800435a:	e77b      	b.n	8004254 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3304      	adds	r3, #4
 8004360:	4618      	mov	r0, r3
 8004362:	f7fe fe4f 	bl	8003004 <_ZN13STM32Hardware4timeEv>
 8004366:	4602      	mov	r2, r0
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004370:	4293      	cmp	r3, r2
 8004372:	bf8c      	ite	hi
 8004374:	2301      	movhi	r3, #1
 8004376:	2300      	movls	r3, #0
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	f43f af6a 	beq.w	8004254 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          configured_ = false;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
          return SPIN_TIMEOUT;
 800438c:	f06f 0301 	mvn.w	r3, #1
 8004390:	e1a3      	b.n	80046da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      else if (mode_ == MODE_PROTOCOL_VER)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004398:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800439c:	2b01      	cmp	r3, #1
 800439e:	d121      	bne.n	80043e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	2bfe      	cmp	r3, #254	; 0xfe
 80043a4:	d10b      	bne.n	80043be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1cc>
          mode_++;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ac:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80043b0:	3301      	adds	r3, #1
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043b8:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80043bc:	e74a      	b.n	8004254 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043c4:	461a      	mov	r2, r3
 80043c6:	2300      	movs	r3, #0
 80043c8:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          if (configured_ == false)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043d2:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f47f af3c 	bne.w	8004254 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 f98c 	bl	80046fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80043e2:	e737      	b.n	8004254 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ea:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d120      	bne.n	8004434 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
        bytes_ = data;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043f8:	461a      	mov	r2, r3
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        index_ = 0;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004406:	461a      	mov	r2, r3
 8004408:	2300      	movs	r3, #0
 800440a:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
        mode_++;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004414:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004418:	3301      	adds	r3, #1
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004420:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800442a:	461a      	mov	r2, r3
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 8004432:	e70f      	b.n	8004254 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800443a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800443e:	2b03      	cmp	r3, #3
 8004440:	d118      	bne.n	8004474 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004448:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	021b      	lsls	r3, r3, #8
 8004450:	4413      	add	r3, r2
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004458:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        mode_++;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004462:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004466:	3301      	adds	r3, #1
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800446e:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004472:	e6ef      	b.n	8004254 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800447a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800447e:	2b04      	cmp	r3, #4
 8004480:	d11f      	bne.n	80044c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004488:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800448c:	425a      	negs	r2, r3
 800448e:	b2db      	uxtb	r3, r3
 8004490:	b2d2      	uxtb	r2, r2
 8004492:	bf58      	it	pl
 8004494:	4253      	negpl	r3, r2
 8004496:	2bff      	cmp	r3, #255	; 0xff
 8004498:	d10b      	bne.n	80044b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>
          mode_++;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044a0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80044a4:	3301      	adds	r3, #1
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044ac:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80044b0:	e6d0      	b.n	8004254 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044b8:	461a      	mov	r2, r3
 80044ba:	2300      	movs	r3, #0
 80044bc:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80044c0:	e6c8      	b.n	8004254 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044c8:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80044cc:	2b05      	cmp	r3, #5
 80044ce:	d119      	bne.n	8004504 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
        topic_ = data;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044d6:	461a      	mov	r2, r3
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_++;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044e4:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80044e8:	3301      	adds	r3, #1
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044f0:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte included in checksum */
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044fa:	461a      	mov	r2, r3
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 8004502:	e6a7      	b.n	8004254 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800450a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800450e:	2b06      	cmp	r3, #6
 8004510:	d123      	bne.n	800455a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>
        topic_ += data << 8;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004518:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	021b      	lsls	r3, r3, #8
 8004520:	4413      	add	r3, r2
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004528:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_ = MODE_MESSAGE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004532:	461a      	mov	r2, r3
 8004534:	2307      	movs	r3, #7
 8004536:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if (bytes_ == 0)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004540:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8004544:	2b00      	cmp	r3, #0
 8004546:	f47f ae85 	bne.w	8004254 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004550:	461a      	mov	r2, r3
 8004552:	2308      	movs	r3, #8
 8004554:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004558:	e67c      	b.n	8004254 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004560:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004564:	2b08      	cmp	r3, #8
 8004566:	f47f ae75 	bne.w	8004254 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004570:	461a      	mov	r2, r3
 8004572:	2300      	movs	r3, #0
 8004574:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if ((checksum_ % 256) == 255)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800457e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004582:	425a      	negs	r2, r3
 8004584:	b2db      	uxtb	r3, r3
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	bf58      	it	pl
 800458a:	4253      	negpl	r3, r2
 800458c:	2bff      	cmp	r3, #255	; 0xff
 800458e:	f47f ae61 	bne.w	8004254 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004598:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 800459c:	2b00      	cmp	r3, #0
 800459e:	d116      	bne.n	80045ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3dc>
            requestSyncTime();
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 f8aa 	bl	80046fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f8c6 	bl	8004738 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045b2:	461a      	mov	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
            last_sync_receive_time = c_time;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045c0:	461a      	mov	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
            return SPIN_ERR;
 80045c8:	f04f 33ff 	mov.w	r3, #4294967295
 80045cc:	e085      	b.n	80046da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
          else if (topic_ == TopicInfo::ID_TIME)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045d4:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80045d8:	2b0a      	cmp	r3, #10
 80045da:	d108      	bne.n	80045ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3fc>
            syncTime(message_in);
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	f241 0324 	movw	r3, #4132	; 0x1024
 80045e2:	4413      	add	r3, r2
 80045e4:	4619      	mov	r1, r3
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f988 	bl	80048fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80045ec:	e632      	b.n	8004254 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045f4:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80045f8:	2b06      	cmp	r3, #6
 80045fa:	d112      	bne.n	8004622 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	f241 5314 	movw	r3, #5396	; 0x1514
 8004602:	4413      	add	r3, r2
 8004604:	6879      	ldr	r1, [r7, #4]
 8004606:	f241 0224 	movw	r2, #4132	; 0x1024
 800460a:	440a      	add	r2, r1
 800460c:	4611      	mov	r1, r2
 800460e:	4618      	mov	r0, r3
 8004610:	f7fe f96d 	bl	80028ee <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 8004620:	e618      	b.n	8004254 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004628:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 800462c:	2b0b      	cmp	r3, #11
 800462e:	d106      	bne.n	800463e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44c>
            configured_ = false;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 800463c:	e60a      	b.n	8004254 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004644:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004648:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004656:	2b00      	cmp	r3, #0
 8004658:	f43f adfc 	beq.w	8004254 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004662:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004666:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004670:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800467a:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 800467e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	6879      	ldr	r1, [r7, #4]
 8004692:	f241 0324 	movw	r3, #4132	; 0x1024
 8004696:	440b      	add	r3, r1
 8004698:	4619      	mov	r1, r3
 800469a:	4790      	blx	r2
    while (true)
 800469c:	e5da      	b.n	8004254 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        break;
 800469e:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046a6:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d014      	beq.n	80046d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046b4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d909      	bls.n	80046d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
      requestSyncTime();
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 f818 	bl	80046fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046d0:	461a      	mov	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    return SPIN_OK;
 80046d8:	2300      	movs	r3, #0
  }
 80046da:	4618      	mov	r0, r3
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:
  Hardware* getHardware()
 80046e2:	b480      	push	{r7}
 80046e4:	b083      	sub	sp, #12
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
    return &hardware_;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	3304      	adds	r3, #4
  }
 80046ee:	4618      	mov	r0, r3
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b086      	sub	sp, #24
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8004702:	f107 030c 	add.w	r3, r7, #12
 8004706:	4618      	mov	r0, r3
 8004708:	f7fd fc58 	bl	8001fbc <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f107 020c 	add.w	r2, r7, #12
 8004716:	210a      	movs	r1, #10
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	4798      	blx	r3
    rt_time = hardware_.time();
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	3304      	adds	r3, #4
 8004720:	4618      	mov	r0, r3
 8004722:	f7fe fc6f 	bl	8003004 <_ZN13STM32Hardware4timeEv>
 8004726:	4602      	mov	r2, r0
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800472e:	615a      	str	r2, [r3, #20]
  }
 8004730:	bf00      	nop
 8004732:	3718      	adds	r7, #24
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8004738:	b590      	push	{r4, r7, lr}
 800473a:	b08b      	sub	sp, #44	; 0x2c
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004740:	f107 030c 	add.w	r3, r7, #12
 8004744:	4618      	mov	r0, r3
 8004746:	f7fd fd29 	bl	800219c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800474a:	2300      	movs	r3, #0
 800474c:	627b      	str	r3, [r7, #36]	; 0x24
 800474e:	e062      	b.n	8004816 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004754:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	4413      	add	r3, r2
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d056      	beq.n	8004810 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004766:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	4413      	add	r3, r2
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	b29b      	uxth	r3, r3
 8004774:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4413      	add	r3, r2
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	6859      	ldr	r1, [r3, #4]
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479c:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	4413      	add	r3, r2
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	3308      	adds	r3, #8
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4608      	mov	r0, r1
 80047b0:	4798      	blx	r3
 80047b2:	4603      	mov	r3, r0
 80047b4:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ba:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	6859      	ldr	r1, [r3, #4]
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ca:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	4413      	add	r3, r2
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	330c      	adds	r3, #12
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4608      	mov	r0, r1
 80047de:	4798      	blx	r3
 80047e0:	4603      	mov	r3, r0
 80047e2:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80047e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047e8:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681c      	ldr	r4, [r3, #0]
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f4:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	4413      	add	r3, r2
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	4618      	mov	r0, r3
 8004800:	f7fe fa19 	bl	8002c36 <_ZN3ros9Publisher15getEndpointTypeEv>
 8004804:	4601      	mov	r1, r0
 8004806:	f107 030c 	add.w	r3, r7, #12
 800480a:	461a      	mov	r2, r3
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004812:	3301      	adds	r3, #1
 8004814:	627b      	str	r3, [r7, #36]	; 0x24
 8004816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004818:	2b18      	cmp	r3, #24
 800481a:	dd99      	ble.n	8004750 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800481c:	2300      	movs	r3, #0
 800481e:	627b      	str	r3, [r7, #36]	; 0x24
 8004820:	e05e      	b.n	80048e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004826:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800482a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d053      	beq.n	80048da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004836:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800483a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	b29b      	uxth	r3, r3
 8004842:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004848:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800484c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004858:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800485c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004864:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	3308      	adds	r3, #8
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4608      	mov	r0, r1
 8004874:	4798      	blx	r3
 8004876:	4603      	mov	r3, r0
 8004878:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800487e:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004882:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800488a:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800488e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	330c      	adds	r3, #12
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4608      	mov	r0, r1
 800489a:	4798      	blx	r3
 800489c:	4603      	mov	r3, r0
 800489e:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80048a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048a4:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681c      	ldr	r4, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b0:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80048b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048bc:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80048c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	3304      	adds	r3, #4
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4608      	mov	r0, r1
 80048cc:	4798      	blx	r3
 80048ce:	4601      	mov	r1, r0
 80048d0:	f107 030c 	add.w	r3, r7, #12
 80048d4:	461a      	mov	r2, r3
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048dc:	3301      	adds	r3, #1
 80048de:	627b      	str	r3, [r7, #36]	; 0x24
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	2b18      	cmp	r3, #24
 80048e4:	dd9d      	ble.n	8004822 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
  }
 80048f2:	bf00      	nop
 80048f4:	372c      	adds	r7, #44	; 0x2c
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd90      	pop	{r4, r7, pc}
	...

080048fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004906:	f107 0308 	add.w	r3, r7, #8
 800490a:	4618      	mov	r0, r3
 800490c:	f7fd fb56 	bl	8001fbc <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	3304      	adds	r3, #4
 8004914:	4618      	mov	r0, r3
 8004916:	f7fe fb75 	bl	8003004 <_ZN13STM32Hardware4timeEv>
 800491a:	4602      	mov	r2, r0
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004928:	f107 0308 	add.w	r3, r7, #8
 800492c:	6839      	ldr	r1, [r7, #0]
 800492e:	4618      	mov	r0, r3
 8004930:	f7fd fbb4 	bl	800209c <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	4915      	ldr	r1, [pc, #84]	; (8004990 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 800493a:	fba1 1303 	umull	r1, r3, r1, r3
 800493e:	099b      	lsrs	r3, r3, #6
 8004940:	4413      	add	r3, r2
 8004942:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004944:	6939      	ldr	r1, [r7, #16]
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	4b11      	ldr	r3, [pc, #68]	; (8004990 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 800494a:	fba3 0302 	umull	r0, r3, r3, r2
 800494e:	099b      	lsrs	r3, r3, #6
 8004950:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004954:	fb00 f303 	mul.w	r3, r0, r3
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	4a0e      	ldr	r2, [pc, #56]	; (8004994 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 800495c:	fb02 f303 	mul.w	r3, r2, r3
 8004960:	440b      	add	r3, r1
 8004962:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004964:	f107 0308 	add.w	r3, r7, #8
 8004968:	3304      	adds	r3, #4
 800496a:	4619      	mov	r1, r3
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 f8bf 	bl	8004af0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	3304      	adds	r3, #4
 8004976:	4618      	mov	r0, r3
 8004978:	f7fe fb44 	bl	8003004 <_ZN13STM32Hardware4timeEv>
 800497c:	4602      	mov	r2, r0
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004984:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
  }
 8004988:	bf00      	nop
 800498a:	3718      	adds	r7, #24
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	10624dd3 	.word	0x10624dd3
 8004994:	000f4240 	.word	0x000f4240

08004998 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8004998:	b580      	push	{r7, lr}
 800499a:	b088      	sub	sp, #32
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	2b63      	cmp	r3, #99	; 0x63
 80049a8:	dd0b      	ble.n	80049c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049b0:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 80049b4:	f083 0301 	eor.w	r3, r3, #1
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 80049be:	2300      	movs	r3, #0
 80049c0:	e090      	b.n	8004ae4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	68f9      	ldr	r1, [r7, #12]
 80049ca:	f241 2324 	movw	r3, #4644	; 0x1224
 80049ce:	440b      	add	r3, r1
 80049d0:	3307      	adds	r3, #7
 80049d2:	4619      	mov	r1, r3
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	4790      	blx	r2
 80049d8:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049e0:	22ff      	movs	r2, #255	; 0xff
 80049e2:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
    message_out[1] = PROTOCOL_VER;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049ec:	22fe      	movs	r2, #254	; 0xfe
 80049ee:	f883 2225 	strb.w	r2, [r3, #549]	; 0x225
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049fc:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	0a1b      	lsrs	r3, r3, #8
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	b2da      	uxtb	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a10:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a1a:	f893 2226 	ldrb.w	r2, [r3, #550]	; 0x226
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a24:	f893 3227 	ldrb.w	r3, [r3, #551]	; 0x227
 8004a28:	4413      	add	r3, r2
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	43db      	mvns	r3, r3
 8004a2e:	b2da      	uxtb	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a36:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	b2da      	uxtb	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a44:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	b21b      	sxth	r3, r3
 8004a4c:	121b      	asrs	r3, r3, #8
 8004a4e:	b21b      	sxth	r3, r3
 8004a50:	b2da      	uxtb	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a58:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a

    /* calculate checksum */
    int chk = 0;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004a60:	2305      	movs	r3, #5
 8004a62:	61bb      	str	r3, [r7, #24]
 8004a64:	e00d      	b.n	8004a82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xea>
      chk += message_out[i];
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	441a      	add	r2, r3
 8004a6c:	f241 2324 	movw	r3, #4644	; 0x1224
 8004a70:	4413      	add	r3, r2
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	461a      	mov	r2, r3
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	4413      	add	r3, r2
 8004a7a:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	61bb      	str	r3, [r7, #24]
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	3306      	adds	r3, #6
 8004a86:	69ba      	ldr	r2, [r7, #24]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	ddec      	ble.n	8004a66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xce>
    l += 7;
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	3307      	adds	r3, #7
 8004a90:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	425a      	negs	r2, r3
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	b2d2      	uxtb	r2, r2
 8004a9a:	bf58      	it	pl
 8004a9c:	4253      	negpl	r3, r2
 8004a9e:	b2da      	uxtb	r2, r3
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	1c59      	adds	r1, r3, #1
 8004aa4:	6179      	str	r1, [r7, #20]
 8004aa6:	43d2      	mvns	r2, r2
 8004aa8:	b2d1      	uxtb	r1, r2
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	441a      	add	r2, r3
 8004aae:	f241 2324 	movw	r3, #4644	; 0x1224
 8004ab2:	4413      	add	r3, r2
 8004ab4:	460a      	mov	r2, r1
 8004ab6:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004abe:	dc0b      	bgt.n	8004ad8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	1d18      	adds	r0, r3, #4
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	f241 2324 	movw	r3, #4644	; 0x1224
 8004aca:	4413      	add	r3, r2
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	4619      	mov	r1, r3
 8004ad0:	f7fe fa4e 	bl	8002f70 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	e005      	b.n	8004ae4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004ad8:	4904      	ldr	r1, [pc, #16]	; (8004aec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x154>)
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f000 f84c 	bl	8004b78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004ae0:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3720      	adds	r7, #32
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	080101d0 	.word	0x080101d0

08004af0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	3304      	adds	r3, #4
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7fe fa80 	bl	8003004 <_ZN13STM32Hardware4timeEv>
 8004b04:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4917      	ldr	r1, [pc, #92]	; (8004b6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004b0e:	fba1 1303 	umull	r1, r3, r1, r3
 8004b12:	099b      	lsrs	r3, r3, #6
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	3b01      	subs	r3, #1
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b1e:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	6859      	ldr	r1, [r3, #4]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	4b11      	ldr	r3, [pc, #68]	; (8004b6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004b28:	fba3 0302 	umull	r0, r3, r3, r2
 8004b2c:	099b      	lsrs	r3, r3, #6
 8004b2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b32:	fb00 f303 	mul.w	r3, r0, r3
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	4a0d      	ldr	r2, [pc, #52]	; (8004b70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x80>)
 8004b3a:	fb02 f303 	mul.w	r3, r2, r3
 8004b3e:	1aca      	subs	r2, r1, r3
 8004b40:	4b0c      	ldr	r3, [pc, #48]	; (8004b74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x84>)
 8004b42:	4413      	add	r3, r2
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b4a:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	f241 0318 	movw	r3, #4120	; 0x1018
 8004b52:	4413      	add	r3, r2
 8004b54:	6879      	ldr	r1, [r7, #4]
 8004b56:	f241 021c 	movw	r2, #4124	; 0x101c
 8004b5a:	440a      	add	r2, r1
 8004b5c:	4611      	mov	r1, r2
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7fb fd5c 	bl	800061c <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004b64:	bf00      	nop
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	10624dd3 	.word	0x10624dd3
 8004b70:	000f4240 	.word	0x000f4240
 8004b74:	3b9aca00 	.word	0x3b9aca00

08004b78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	2103      	movs	r1, #3
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f804 	bl	8004b94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004b8c:	bf00      	nop
 8004b8e:	3708      	adds	r7, #8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b088      	sub	sp, #32
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	607a      	str	r2, [r7, #4]
 8004ba0:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004ba2:	f107 0314 	add.w	r3, r7, #20
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7fd fcbc 	bl	8002524 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004bac:	7afb      	ldrb	r3, [r7, #11]
 8004bae:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f107 0214 	add.w	r2, r7, #20
 8004bbe:	2107      	movs	r1, #7
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	4798      	blx	r3
  }
 8004bc4:	bf00      	nop
 8004bc6:	3720      	adds	r7, #32
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <_Z41__static_initialization_and_destruction_0ii>:
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d11c      	bne.n	8004c16 <_Z41__static_initialization_and_destruction_0ii+0x4a>
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d117      	bne.n	8004c16 <_Z41__static_initialization_and_destruction_0ii+0x4a>
geometry_msgs::Twist speed;
 8004be6:	480e      	ldr	r0, [pc, #56]	; (8004c20 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004be8:	f7fe ff2e 	bl	8003a48 <_ZN13geometry_msgs5TwistC1Ev>
ros::NodeHandle nh;
 8004bec:	480d      	ldr	r0, [pc, #52]	; (8004c24 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8004bee:	f7ff f95f 	bl	8003eb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<geometry_msgs::Twist> sub_vel("/cmd_vel", vel_callback);
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	4a0c      	ldr	r2, [pc, #48]	; (8004c28 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004bf6:	490d      	ldr	r1, [pc, #52]	; (8004c2c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8004bf8:	480d      	ldr	r0, [pc, #52]	; (8004c30 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8004bfa:	f7ff fa03 	bl	8004004 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Publisher pub_vel("/realspeed", &speed);
 8004bfe:	2300      	movs	r3, #0
 8004c00:	4a07      	ldr	r2, [pc, #28]	; (8004c20 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004c02:	490c      	ldr	r1, [pc, #48]	; (8004c34 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8004c04:	480c      	ldr	r0, [pc, #48]	; (8004c38 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8004c06:	f7fd ffff 	bl	8002c08 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Int8> sub_ori("/cmd_ori", ori_callback);
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	4a0b      	ldr	r2, [pc, #44]	; (8004c3c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8004c0e:	490c      	ldr	r1, [pc, #48]	; (8004c40 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004c10:	480c      	ldr	r0, [pc, #48]	; (8004c44 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8004c12:	f7ff fa1b 	bl	800404c <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>
}
 8004c16:	bf00      	nop
 8004c18:	3708      	adds	r7, #8
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	240009d0 	.word	0x240009d0
 8004c24:	24000a18 	.word	0x24000a18
 8004c28:	08003c29 	.word	0x08003c29
 8004c2c:	0801020c 	.word	0x0801020c
 8004c30:	24001f58 	.word	0x24001f58
 8004c34:	08010218 	.word	0x08010218
 8004c38:	24001fb8 	.word	0x24001fb8
 8004c3c:	08003c6d 	.word	0x08003c6d
 8004c40:	08010224 	.word	0x08010224
 8004c44:	24001fcc 	.word	0x24001fcc

08004c48 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	330c      	adds	r3, #12
 8004c56:	6839      	ldr	r1, [r7, #0]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7fe ffa9 	bl	8003bb0 <_ZN8std_msgs4Int811deserializeEPh>
    this->cb_(msg);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	320c      	adds	r2, #12
 8004c66:	4610      	mov	r0, r2
 8004c68:	4798      	blx	r3
  }
 8004c6a:	bf00      	nop
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8004c72:	b480      	push	{r7}
 8004c74:	b083      	sub	sp, #12
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	699b      	ldr	r3, [r3, #24]
  }
 8004c7e:	4618      	mov	r0, r3
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <_ZN3ros10SubscriberIN8std_msgs4Int8EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b082      	sub	sp, #8
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	330c      	adds	r3, #12
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7fe ffaa 	bl	8003bf0 <_ZN8std_msgs4Int87getTypeEv>
 8004c9c:	4603      	mov	r3, r0
  }
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3708      	adds	r7, #8
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b082      	sub	sp, #8
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	330c      	adds	r3, #12
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7fe ffaa 	bl	8003c0c <_ZN8std_msgs4Int86getMD5Ev>
 8004cb8:	4603      	mov	r3, r0
  }
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b082      	sub	sp, #8
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
 8004cca:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3310      	adds	r3, #16
 8004cd0:	6839      	ldr	r1, [r7, #0]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7fe fefa 	bl	8003acc <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	3210      	adds	r2, #16
 8004ce0:	4610      	mov	r0, r2
 8004ce2:	4798      	blx	r3
  }
 8004ce4:	bf00      	nop
 8004ce6:	3708      	adds	r7, #8
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	3310      	adds	r3, #16
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7fe ff01 	bl	8003b18 <_ZN13geometry_msgs5Twist7getTypeEv>
 8004d16:	4603      	mov	r3, r0
  }
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3708      	adds	r7, #8
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	3310      	adds	r3, #16
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7fe ff01 	bl	8003b34 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8004d32:	4603      	mov	r3, r0
  }
 8004d34:	4618      	mov	r0, r3
 8004d36:	3708      	adds	r7, #8
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
    return configured_;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d4a:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
  };
 8004d4e:	4618      	mov	r0, r3
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <_GLOBAL__sub_I_run_inter0>:
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004d62:	2001      	movs	r0, #1
 8004d64:	f7ff ff32 	bl	8004bcc <_Z41__static_initialization_and_destruction_0ii>
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	0000      	movs	r0, r0
 8004d6c:	0000      	movs	r0, r0
	...

08004d70 <_Z6scriptv>:
SCRIPT script_b;
//extern PUSHER pusher_A;
//extern PUSHER pusher_B;
//extern PUSHER pusher_C;
//extern PUSHER pusher_D;
void script(){
 8004d70:	b580      	push	{r7, lr}
 8004d72:	af00      	add	r7, sp, #0
	if(script_a.scriptrun == 1){
 8004d74:	4ba8      	ldr	r3, [pc, #672]	; (8005018 <_Z6scriptv+0x2a8>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	f040 80d2 	bne.w	8004f22 <_Z6scriptv+0x1b2>
		if(delay_start == 0){
 8004d7e:	4ba7      	ldr	r3, [pc, #668]	; (800501c <_Z6scriptv+0x2ac>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d110      	bne.n	8004da8 <_Z6scriptv+0x38>
			script_wheel(5,0,0);
 8004d86:	ed9f 2ba2 	vldr	d2, [pc, #648]	; 8005010 <_Z6scriptv+0x2a0>
 8004d8a:	ed9f 1ba1 	vldr	d1, [pc, #644]	; 8005010 <_Z6scriptv+0x2a0>
 8004d8e:	eeb1 0b04 	vmov.f64	d0, #20	; 0x40a00000  5.0
 8004d92:	f000 f94d 	bl	8005030 <_Z12script_wheelddd>
			script_pusher(5,5);
 8004d96:	eeb1 1b04 	vmov.f64	d1, #20	; 0x40a00000  5.0
 8004d9a:	eeb1 0b04 	vmov.f64	d0, #20	; 0x40a00000  5.0
 8004d9e:	f7fd f87f 	bl	8001ea0 <_Z13script_pusherdd>
			delay_start = 1;
 8004da2:	4b9e      	ldr	r3, [pc, #632]	; (800501c <_Z6scriptv+0x2ac>)
 8004da4:	2201      	movs	r2, #1
 8004da6:	601a      	str	r2, [r3, #0]
		}
		if(delay == 250 && delay_start == 1){
 8004da8:	4b9d      	ldr	r3, [pc, #628]	; (8005020 <_Z6scriptv+0x2b0>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2bfa      	cmp	r3, #250	; 0xfa
 8004dae:	d10c      	bne.n	8004dca <_Z6scriptv+0x5a>
 8004db0:	4b9a      	ldr	r3, [pc, #616]	; (800501c <_Z6scriptv+0x2ac>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d108      	bne.n	8004dca <_Z6scriptv+0x5a>
//			script_wheel(0,0,0);
			script_pusher(12,5);
 8004db8:	eeb1 1b04 	vmov.f64	d1, #20	; 0x40a00000  5.0
 8004dbc:	eeb2 0b08 	vmov.f64	d0, #40	; 0x41400000  12.0
 8004dc0:	f7fd f86e 	bl	8001ea0 <_Z13script_pusherdd>
			delay_start = 2;
 8004dc4:	4b95      	ldr	r3, [pc, #596]	; (800501c <_Z6scriptv+0x2ac>)
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	601a      	str	r2, [r3, #0]
		}
		if(delay == 550 && delay_start == 2){
 8004dca:	4b95      	ldr	r3, [pc, #596]	; (8005020 <_Z6scriptv+0x2b0>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f240 2226 	movw	r2, #550	; 0x226
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d10e      	bne.n	8004df4 <_Z6scriptv+0x84>
 8004dd6:	4b91      	ldr	r3, [pc, #580]	; (800501c <_Z6scriptv+0x2ac>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d10a      	bne.n	8004df4 <_Z6scriptv+0x84>
			script_wheel(20,0,0);
 8004dde:	ed9f 2b8c 	vldr	d2, [pc, #560]	; 8005010 <_Z6scriptv+0x2a0>
 8004de2:	ed9f 1b8b 	vldr	d1, [pc, #556]	; 8005010 <_Z6scriptv+0x2a0>
 8004de6:	eeb3 0b04 	vmov.f64	d0, #52	; 0x41a00000  20.0
 8004dea:	f000 f921 	bl	8005030 <_Z12script_wheelddd>
			delay_start = 3;
 8004dee:	4b8b      	ldr	r3, [pc, #556]	; (800501c <_Z6scriptv+0x2ac>)
 8004df0:	2203      	movs	r2, #3
 8004df2:	601a      	str	r2, [r3, #0]
		}
		if(delay == 700 && delay_start == 3){
 8004df4:	4b8a      	ldr	r3, [pc, #552]	; (8005020 <_Z6scriptv+0x2b0>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8004dfc:	d114      	bne.n	8004e28 <_Z6scriptv+0xb8>
 8004dfe:	4b87      	ldr	r3, [pc, #540]	; (800501c <_Z6scriptv+0x2ac>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2b03      	cmp	r3, #3
 8004e04:	d110      	bne.n	8004e28 <_Z6scriptv+0xb8>
			script_wheel(10,0,0);
 8004e06:	ed9f 2b82 	vldr	d2, [pc, #520]	; 8005010 <_Z6scriptv+0x2a0>
 8004e0a:	ed9f 1b81 	vldr	d1, [pc, #516]	; 8005010 <_Z6scriptv+0x2a0>
 8004e0e:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8004e12:	f000 f90d 	bl	8005030 <_Z12script_wheelddd>
			script_pusher(-2,5);
 8004e16:	eeb1 1b04 	vmov.f64	d1, #20	; 0x40a00000  5.0
 8004e1a:	eeb8 0b00 	vmov.f64	d0, #128	; 0xc0000000 -2.0
 8004e1e:	f7fd f83f 	bl	8001ea0 <_Z13script_pusherdd>
			delay_start = 4;
 8004e22:	4b7e      	ldr	r3, [pc, #504]	; (800501c <_Z6scriptv+0x2ac>)
 8004e24:	2204      	movs	r2, #4
 8004e26:	601a      	str	r2, [r3, #0]
		}
		if(delay == 900 && delay_start == 4){
 8004e28:	4b7d      	ldr	r3, [pc, #500]	; (8005020 <_Z6scriptv+0x2b0>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8004e30:	d114      	bne.n	8004e5c <_Z6scriptv+0xec>
 8004e32:	4b7a      	ldr	r3, [pc, #488]	; (800501c <_Z6scriptv+0x2ac>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2b04      	cmp	r3, #4
 8004e38:	d110      	bne.n	8004e5c <_Z6scriptv+0xec>
			script_wheel(0,0,0);
 8004e3a:	ed9f 2b75 	vldr	d2, [pc, #468]	; 8005010 <_Z6scriptv+0x2a0>
 8004e3e:	ed9f 1b74 	vldr	d1, [pc, #464]	; 8005010 <_Z6scriptv+0x2a0>
 8004e42:	ed9f 0b73 	vldr	d0, [pc, #460]	; 8005010 <_Z6scriptv+0x2a0>
 8004e46:	f000 f8f3 	bl	8005030 <_Z12script_wheelddd>
			script_pusher(-2,10);
 8004e4a:	eeb2 1b04 	vmov.f64	d1, #36	; 0x41200000  10.0
 8004e4e:	eeb8 0b00 	vmov.f64	d0, #128	; 0xc0000000 -2.0
 8004e52:	f7fd f825 	bl	8001ea0 <_Z13script_pusherdd>
			delay_start = 5;
 8004e56:	4b71      	ldr	r3, [pc, #452]	; (800501c <_Z6scriptv+0x2ac>)
 8004e58:	2205      	movs	r2, #5
 8004e5a:	601a      	str	r2, [r3, #0]
		}
		if(delay == 1050 && delay_start == 5){/*-50*/
 8004e5c:	4b70      	ldr	r3, [pc, #448]	; (8005020 <_Z6scriptv+0x2b0>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f240 421a 	movw	r2, #1050	; 0x41a
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d10e      	bne.n	8004e86 <_Z6scriptv+0x116>
 8004e68:	4b6c      	ldr	r3, [pc, #432]	; (800501c <_Z6scriptv+0x2ac>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b05      	cmp	r3, #5
 8004e6e:	d10a      	bne.n	8004e86 <_Z6scriptv+0x116>
//			script_pusher(-2,10);
			script_wheel(10,0,0);
 8004e70:	ed9f 2b67 	vldr	d2, [pc, #412]	; 8005010 <_Z6scriptv+0x2a0>
 8004e74:	ed9f 1b66 	vldr	d1, [pc, #408]	; 8005010 <_Z6scriptv+0x2a0>
 8004e78:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8004e7c:	f000 f8d8 	bl	8005030 <_Z12script_wheelddd>
			delay_start = 6;
 8004e80:	4b66      	ldr	r3, [pc, #408]	; (800501c <_Z6scriptv+0x2ac>)
 8004e82:	2206      	movs	r2, #6
 8004e84:	601a      	str	r2, [r3, #0]
		}
		if(delay == 1250 && delay_start == 6){/*-50*/
 8004e86:	4b66      	ldr	r3, [pc, #408]	; (8005020 <_Z6scriptv+0x2b0>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d10c      	bne.n	8004eac <_Z6scriptv+0x13c>
 8004e92:	4b62      	ldr	r3, [pc, #392]	; (800501c <_Z6scriptv+0x2ac>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2b06      	cmp	r3, #6
 8004e98:	d108      	bne.n	8004eac <_Z6scriptv+0x13c>
			script_pusher(10,0);
 8004e9a:	ed9f 1b5d 	vldr	d1, [pc, #372]	; 8005010 <_Z6scriptv+0x2a0>
 8004e9e:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8004ea2:	f7fc fffd 	bl	8001ea0 <_Z13script_pusherdd>
			delay_start = 7;
 8004ea6:	4b5d      	ldr	r3, [pc, #372]	; (800501c <_Z6scriptv+0x2ac>)
 8004ea8:	2207      	movs	r2, #7
 8004eaa:	601a      	str	r2, [r3, #0]
//		if(delay == 1700 && delay_start == 6){
//			script_wheel(0,0,0);
//			script_pusher(10,0);
//			delay_start = 7;
//		}
		if(delay == 1800 && delay_start == 7){
 8004eac:	4b5c      	ldr	r3, [pc, #368]	; (8005020 <_Z6scriptv+0x2b0>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8004eb4:	d114      	bne.n	8004ee0 <_Z6scriptv+0x170>
 8004eb6:	4b59      	ldr	r3, [pc, #356]	; (800501c <_Z6scriptv+0x2ac>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2b07      	cmp	r3, #7
 8004ebc:	d110      	bne.n	8004ee0 <_Z6scriptv+0x170>
			script_wheel(10,0,0);
 8004ebe:	ed9f 2b54 	vldr	d2, [pc, #336]	; 8005010 <_Z6scriptv+0x2a0>
 8004ec2:	ed9f 1b53 	vldr	d1, [pc, #332]	; 8005010 <_Z6scriptv+0x2a0>
 8004ec6:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8004eca:	f000 f8b1 	bl	8005030 <_Z12script_wheelddd>
			script_pusher(-2,10);
 8004ece:	eeb2 1b04 	vmov.f64	d1, #36	; 0x41200000  10.0
 8004ed2:	eeb8 0b00 	vmov.f64	d0, #128	; 0xc0000000 -2.0
 8004ed6:	f7fc ffe3 	bl	8001ea0 <_Z13script_pusherdd>
			delay_start = 8;
 8004eda:	4b50      	ldr	r3, [pc, #320]	; (800501c <_Z6scriptv+0x2ac>)
 8004edc:	2208      	movs	r2, #8
 8004ede:	601a      	str	r2, [r3, #0]
//		}
//		if(delay == 2900 && delay_start == 9){
//			script_wheel(10,0,0);
//			delay_start = 10;
//		}
		if(delay == 2500 && delay_start == 8){
 8004ee0:	4b4f      	ldr	r3, [pc, #316]	; (8005020 <_Z6scriptv+0x2b0>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d11a      	bne.n	8004f22 <_Z6scriptv+0x1b2>
 8004eec:	4b4b      	ldr	r3, [pc, #300]	; (800501c <_Z6scriptv+0x2ac>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2b08      	cmp	r3, #8
 8004ef2:	d116      	bne.n	8004f22 <_Z6scriptv+0x1b2>
			script_wheel(0,0,0);
 8004ef4:	ed9f 2b46 	vldr	d2, [pc, #280]	; 8005010 <_Z6scriptv+0x2a0>
 8004ef8:	ed9f 1b45 	vldr	d1, [pc, #276]	; 8005010 <_Z6scriptv+0x2a0>
 8004efc:	ed9f 0b44 	vldr	d0, [pc, #272]	; 8005010 <_Z6scriptv+0x2a0>
 8004f00:	f000 f896 	bl	8005030 <_Z12script_wheelddd>
			script_pusher(-2,12);
 8004f04:	eeb2 1b08 	vmov.f64	d1, #40	; 0x41400000  12.0
 8004f08:	eeb8 0b00 	vmov.f64	d0, #128	; 0xc0000000 -2.0
 8004f0c:	f7fc ffc8 	bl	8001ea0 <_Z13script_pusherdd>
			delay_start = 0;
 8004f10:	4b42      	ldr	r3, [pc, #264]	; (800501c <_Z6scriptv+0x2ac>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	601a      	str	r2, [r3, #0]
			script_a.scriptrun = 0;
 8004f16:	4b40      	ldr	r3, [pc, #256]	; (8005018 <_Z6scriptv+0x2a8>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	601a      	str	r2, [r3, #0]
			delay = 0;
 8004f1c:	4b40      	ldr	r3, [pc, #256]	; (8005020 <_Z6scriptv+0x2b0>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	601a      	str	r2, [r3, #0]
		}
	}
	if(script_b.scriptrun == 1){
 8004f22:	4b40      	ldr	r3, [pc, #256]	; (8005024 <_Z6scriptv+0x2b4>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d170      	bne.n	800500c <_Z6scriptv+0x29c>
		if(delay_start_2 == 0){
 8004f2a:	4b3f      	ldr	r3, [pc, #252]	; (8005028 <_Z6scriptv+0x2b8>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d116      	bne.n	8004f60 <_Z6scriptv+0x1f0>
			script_pusher(12,12);
 8004f32:	eeb2 1b08 	vmov.f64	d1, #40	; 0x41400000  12.0
 8004f36:	eeb2 0b08 	vmov.f64	d0, #40	; 0x41400000  12.0
 8004f3a:	f7fc ffb1 	bl	8001ea0 <_Z13script_pusherdd>
//			script_wheel(10,0,0);
			UART_Send_SetMotorPosition(1, 850, 300);
 8004f3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004f42:	f240 3152 	movw	r1, #850	; 0x352
 8004f46:	2001      	movs	r0, #1
 8004f48:	f000 f8b2 	bl	80050b0 <_Z26UART_Send_SetMotorPositionttt>
			UART_Send_SetMotorPosition(3, 1650, 300);
 8004f4c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004f50:	f240 6172 	movw	r1, #1650	; 0x672
 8004f54:	2003      	movs	r0, #3
 8004f56:	f000 f8ab 	bl	80050b0 <_Z26UART_Send_SetMotorPositionttt>
			delay_start_2 =1;
 8004f5a:	4b33      	ldr	r3, [pc, #204]	; (8005028 <_Z6scriptv+0x2b8>)
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	601a      	str	r2, [r3, #0]
		}
		if(delay_2 == 1300 && delay_start_2 == 1){
 8004f60:	4b32      	ldr	r3, [pc, #200]	; (800502c <_Z6scriptv+0x2bc>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f240 5214 	movw	r2, #1300	; 0x514
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d11a      	bne.n	8004fa2 <_Z6scriptv+0x232>
 8004f6c:	4b2e      	ldr	r3, [pc, #184]	; (8005028 <_Z6scriptv+0x2b8>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d116      	bne.n	8004fa2 <_Z6scriptv+0x232>
			UART_Send_SetMotorPosition(1, 1300, 1000);
 8004f74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f78:	f240 5114 	movw	r1, #1300	; 0x514
 8004f7c:	2001      	movs	r0, #1
 8004f7e:	f000 f897 	bl	80050b0 <_Z26UART_Send_SetMotorPositionttt>
			UART_Send_SetMotorPosition(3, 1200, 1000);
 8004f82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f86:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8004f8a:	2003      	movs	r0, #3
 8004f8c:	f000 f890 	bl	80050b0 <_Z26UART_Send_SetMotorPositionttt>
//			script_wheel(0,0,0);
			script_pusher(-2,12);
 8004f90:	eeb2 1b08 	vmov.f64	d1, #40	; 0x41400000  12.0
 8004f94:	eeb8 0b00 	vmov.f64	d0, #128	; 0xc0000000 -2.0
 8004f98:	f7fc ff82 	bl	8001ea0 <_Z13script_pusherdd>
			delay_start_2 =2;
 8004f9c:	4b22      	ldr	r3, [pc, #136]	; (8005028 <_Z6scriptv+0x2b8>)
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	601a      	str	r2, [r3, #0]
		}
		if(delay_2 == 1900 && delay_start_2 == 2){
 8004fa2:	4b22      	ldr	r3, [pc, #136]	; (800502c <_Z6scriptv+0x2bc>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f240 726c 	movw	r2, #1900	; 0x76c
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d106      	bne.n	8004fbc <_Z6scriptv+0x24c>
 8004fae:	4b1e      	ldr	r3, [pc, #120]	; (8005028 <_Z6scriptv+0x2b8>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d102      	bne.n	8004fbc <_Z6scriptv+0x24c>
//			UART_Send_SetMotorPosition(1, 1300, 300);
//			script_wheel(10,0,0);
//			script_pusher(-2,12);
			delay_start_2 =3;
 8004fb6:	4b1c      	ldr	r3, [pc, #112]	; (8005028 <_Z6scriptv+0x2b8>)
 8004fb8:	2203      	movs	r2, #3
 8004fba:	601a      	str	r2, [r3, #0]
		}
		if(delay_2 == 2400 && delay_start_2 == 3){
 8004fbc:	4b1b      	ldr	r3, [pc, #108]	; (800502c <_Z6scriptv+0x2bc>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8004fc4:	d122      	bne.n	800500c <_Z6scriptv+0x29c>
 8004fc6:	4b18      	ldr	r3, [pc, #96]	; (8005028 <_Z6scriptv+0x2b8>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2b03      	cmp	r3, #3
 8004fcc:	d11e      	bne.n	800500c <_Z6scriptv+0x29c>
			UART_Send_SetMotorPosition(1, 1550, 500);
 8004fce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004fd2:	f240 610e 	movw	r1, #1550	; 0x60e
 8004fd6:	2001      	movs	r0, #1
 8004fd8:	f000 f86a 	bl	80050b0 <_Z26UART_Send_SetMotorPositionttt>
			UART_Send_SetMotorPosition(3, 950, 500);
 8004fdc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004fe0:	f240 31b6 	movw	r1, #950	; 0x3b6
 8004fe4:	2003      	movs	r0, #3
 8004fe6:	f000 f863 	bl	80050b0 <_Z26UART_Send_SetMotorPositionttt>
			script_wheel(0,0,0);
 8004fea:	ed9f 2b09 	vldr	d2, [pc, #36]	; 8005010 <_Z6scriptv+0x2a0>
 8004fee:	ed9f 1b08 	vldr	d1, [pc, #32]	; 8005010 <_Z6scriptv+0x2a0>
 8004ff2:	ed9f 0b07 	vldr	d0, [pc, #28]	; 8005010 <_Z6scriptv+0x2a0>
 8004ff6:	f000 f81b 	bl	8005030 <_Z12script_wheelddd>
			delay_start_2 =0;
 8004ffa:	4b0b      	ldr	r3, [pc, #44]	; (8005028 <_Z6scriptv+0x2b8>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	601a      	str	r2, [r3, #0]
			script_b.scriptrun =0;
 8005000:	4b08      	ldr	r3, [pc, #32]	; (8005024 <_Z6scriptv+0x2b4>)
 8005002:	2200      	movs	r2, #0
 8005004:	601a      	str	r2, [r3, #0]
			delay_2 = 0;
 8005006:	4b09      	ldr	r3, [pc, #36]	; (800502c <_Z6scriptv+0x2bc>)
 8005008:	2200      	movs	r2, #0
 800500a:	601a      	str	r2, [r3, #0]
		}
	}

}
 800500c:	bf00      	nop
 800500e:	bd80      	pop	{r7, pc}
	...
 8005018:	24001fe8 	.word	0x24001fe8
 800501c:	240002b0 	.word	0x240002b0
 8005020:	240002b4 	.word	0x240002b4
 8005024:	24001fec 	.word	0x24001fec
 8005028:	240002b8 	.word	0x240002b8
 800502c:	240002bc 	.word	0x240002bc

08005030 <_Z12script_wheelddd>:
void script_wheel(double s_Vx,double s_Vy,double s_w){
 8005030:	b480      	push	{r7}
 8005032:	b087      	sub	sp, #28
 8005034:	af00      	add	r7, sp, #0
 8005036:	ed87 0b04 	vstr	d0, [r7, #16]
 800503a:	ed87 1b02 	vstr	d1, [r7, #8]
 800503e:	ed87 2b00 	vstr	d2, [r7]
	Vx = s_Vx;
 8005042:	490a      	ldr	r1, [pc, #40]	; (800506c <_Z12script_wheelddd+0x3c>)
 8005044:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005048:	e9c1 2300 	strd	r2, r3, [r1]
	Vy = s_Vy;
 800504c:	4908      	ldr	r1, [pc, #32]	; (8005070 <_Z12script_wheelddd+0x40>)
 800504e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005052:	e9c1 2300 	strd	r2, r3, [r1]
	W = s_w;
 8005056:	4907      	ldr	r1, [pc, #28]	; (8005074 <_Z12script_wheelddd+0x44>)
 8005058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800505c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005060:	bf00      	nop
 8005062:	371c      	adds	r7, #28
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr
 800506c:	24000970 	.word	0x24000970
 8005070:	24000978 	.word	0x24000978
 8005074:	24000980 	.word	0x24000980

08005078 <_Z9UART_Sendh>:
 */
#include "servo.h"
#include"math.h"
extern UART_HandleTypeDef huart3;
int Checksum_Calc, count=0;
void UART_Send(uint8_t u8_data){
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	4603      	mov	r3, r0
 8005080:	71fb      	strb	r3, [r7, #7]
	uint8_t *u8_pointer = &u8_data;
 8005082:	1dfb      	adds	r3, r7, #7
 8005084:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart3, u8_pointer, 1,100);
 8005086:	2364      	movs	r3, #100	; 0x64
 8005088:	2201      	movs	r2, #1
 800508a:	68f9      	ldr	r1, [r7, #12]
 800508c:	4806      	ldr	r0, [pc, #24]	; (80050a8 <_Z9UART_Sendh+0x30>)
 800508e:	f008 fcf0 	bl	800da72 <HAL_UART_Transmit>

	Checksum_Calc += u8_data;
 8005092:	79fb      	ldrb	r3, [r7, #7]
 8005094:	461a      	mov	r2, r3
 8005096:	4b05      	ldr	r3, [pc, #20]	; (80050ac <_Z9UART_Sendh+0x34>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4413      	add	r3, r2
 800509c:	4a03      	ldr	r2, [pc, #12]	; (80050ac <_Z9UART_Sendh+0x34>)
 800509e:	6013      	str	r3, [r2, #0]
}
 80050a0:	bf00      	nop
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	240007e0 	.word	0x240007e0
 80050ac:	24001ff0 	.word	0x24001ff0

080050b0 <_Z26UART_Send_SetMotorPositionttt>:

void UART_Send_SetMotorPosition(uint16_t motorId, uint16_t Position, uint16_t Time){
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	4603      	mov	r3, r0
 80050b8:	80fb      	strh	r3, [r7, #6]
 80050ba:	460b      	mov	r3, r1
 80050bc:	80bb      	strh	r3, [r7, #4]
 80050be:	4613      	mov	r3, r2
 80050c0:	807b      	strh	r3, [r7, #2]
	Checksum_Calc = 0;
 80050c2:	4b1c      	ldr	r3, [pc, #112]	; (8005134 <_Z26UART_Send_SetMotorPositionttt+0x84>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]
	UART_Send(0x80 + motorId);
 80050c8:	88fb      	ldrh	r3, [r7, #6]
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	3b80      	subs	r3, #128	; 0x80
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7ff ffd1 	bl	8005078 <_Z9UART_Sendh>
	UART_Send(0x83);
 80050d6:	2083      	movs	r0, #131	; 0x83
 80050d8:	f7ff ffce 	bl	8005078 <_Z9UART_Sendh>
	UART_Send(0x05);
 80050dc:	2005      	movs	r0, #5
 80050de:	f7ff ffcb 	bl	8005078 <_Z9UART_Sendh>
	UART_Send((Position / 256)& 0x7F);
 80050e2:	88bb      	ldrh	r3, [r7, #4]
 80050e4:	0a1b      	lsrs	r3, r3, #8
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7ff ffc1 	bl	8005078 <_Z9UART_Sendh>
	UART_Send(Position % 256);
 80050f6:	88bb      	ldrh	r3, [r7, #4]
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7ff ffbc 	bl	8005078 <_Z9UART_Sendh>
	UART_Send((Time / 256)& 0x7F);
 8005100:	887b      	ldrh	r3, [r7, #2]
 8005102:	0a1b      	lsrs	r3, r3, #8
 8005104:	b29b      	uxth	r3, r3
 8005106:	b2db      	uxtb	r3, r3
 8005108:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800510c:	b2db      	uxtb	r3, r3
 800510e:	4618      	mov	r0, r3
 8005110:	f7ff ffb2 	bl	8005078 <_Z9UART_Sendh>
	UART_Send(Time % 256);
 8005114:	887b      	ldrh	r3, [r7, #2]
 8005116:	b2db      	uxtb	r3, r3
 8005118:	4618      	mov	r0, r3
 800511a:	f7ff ffad 	bl	8005078 <_Z9UART_Sendh>
	UART_Send(Checksum_Calc);
 800511e:	4b05      	ldr	r3, [pc, #20]	; (8005134 <_Z26UART_Send_SetMotorPositionttt+0x84>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	b2db      	uxtb	r3, r3
 8005124:	4618      	mov	r0, r3
 8005126:	f7ff ffa7 	bl	8005078 <_Z9UART_Sendh>
}
 800512a:	bf00      	nop
 800512c:	3708      	adds	r7, #8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	24001ff0 	.word	0x24001ff0

08005138 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800513e:	4b0a      	ldr	r3, [pc, #40]	; (8005168 <HAL_MspInit+0x30>)
 8005140:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005144:	4a08      	ldr	r2, [pc, #32]	; (8005168 <HAL_MspInit+0x30>)
 8005146:	f043 0302 	orr.w	r3, r3, #2
 800514a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800514e:	4b06      	ldr	r3, [pc, #24]	; (8005168 <HAL_MspInit+0x30>)
 8005150:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	607b      	str	r3, [r7, #4]
 800515a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr
 8005168:	58024400 	.word	0x58024400

0800516c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b086      	sub	sp, #24
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a43      	ldr	r2, [pc, #268]	; (8005288 <HAL_TIM_Base_MspInit+0x11c>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d12f      	bne.n	80051de <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800517e:	4b43      	ldr	r3, [pc, #268]	; (800528c <HAL_TIM_Base_MspInit+0x120>)
 8005180:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005184:	4a41      	ldr	r2, [pc, #260]	; (800528c <HAL_TIM_Base_MspInit+0x120>)
 8005186:	f043 0301 	orr.w	r3, r3, #1
 800518a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800518e:	4b3f      	ldr	r3, [pc, #252]	; (800528c <HAL_TIM_Base_MspInit+0x120>)
 8005190:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	617b      	str	r3, [r7, #20]
 800519a:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 800519c:	2200      	movs	r2, #0
 800519e:	2100      	movs	r1, #0
 80051a0:	2018      	movs	r0, #24
 80051a2:	f000 feec 	bl	8005f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80051a6:	2018      	movs	r0, #24
 80051a8:	f000 ff03 	bl	8005fb2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80051ac:	2200      	movs	r2, #0
 80051ae:	2100      	movs	r1, #0
 80051b0:	2019      	movs	r0, #25
 80051b2:	f000 fee4 	bl	8005f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80051b6:	2019      	movs	r0, #25
 80051b8:	f000 fefb 	bl	8005fb2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80051bc:	2200      	movs	r2, #0
 80051be:	2100      	movs	r1, #0
 80051c0:	201a      	movs	r0, #26
 80051c2:	f000 fedc 	bl	8005f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80051c6:	201a      	movs	r0, #26
 80051c8:	f000 fef3 	bl	8005fb2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80051cc:	2200      	movs	r2, #0
 80051ce:	2100      	movs	r1, #0
 80051d0:	201b      	movs	r0, #27
 80051d2:	f000 fed4 	bl	8005f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80051d6:	201b      	movs	r0, #27
 80051d8:	f000 feeb 	bl	8005fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }

}
 80051dc:	e050      	b.n	8005280 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM8)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a2b      	ldr	r2, [pc, #172]	; (8005290 <HAL_TIM_Base_MspInit+0x124>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d12f      	bne.n	8005248 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80051e8:	4b28      	ldr	r3, [pc, #160]	; (800528c <HAL_TIM_Base_MspInit+0x120>)
 80051ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051ee:	4a27      	ldr	r2, [pc, #156]	; (800528c <HAL_TIM_Base_MspInit+0x120>)
 80051f0:	f043 0302 	orr.w	r3, r3, #2
 80051f4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80051f8:	4b24      	ldr	r3, [pc, #144]	; (800528c <HAL_TIM_Base_MspInit+0x120>)
 80051fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	613b      	str	r3, [r7, #16]
 8005204:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8005206:	2200      	movs	r2, #0
 8005208:	2100      	movs	r1, #0
 800520a:	202b      	movs	r0, #43	; 0x2b
 800520c:	f000 feb7 	bl	8005f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8005210:	202b      	movs	r0, #43	; 0x2b
 8005212:	f000 fece 	bl	8005fb2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005216:	2200      	movs	r2, #0
 8005218:	2100      	movs	r1, #0
 800521a:	202c      	movs	r0, #44	; 0x2c
 800521c:	f000 feaf 	bl	8005f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005220:	202c      	movs	r0, #44	; 0x2c
 8005222:	f000 fec6 	bl	8005fb2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8005226:	2200      	movs	r2, #0
 8005228:	2100      	movs	r1, #0
 800522a:	202d      	movs	r0, #45	; 0x2d
 800522c:	f000 fea7 	bl	8005f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8005230:	202d      	movs	r0, #45	; 0x2d
 8005232:	f000 febe 	bl	8005fb2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8005236:	2200      	movs	r2, #0
 8005238:	2100      	movs	r1, #0
 800523a:	202e      	movs	r0, #46	; 0x2e
 800523c:	f000 fe9f 	bl	8005f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8005240:	202e      	movs	r0, #46	; 0x2e
 8005242:	f000 feb6 	bl	8005fb2 <HAL_NVIC_EnableIRQ>
}
 8005246:	e01b      	b.n	8005280 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM23)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a11      	ldr	r2, [pc, #68]	; (8005294 <HAL_TIM_Base_MspInit+0x128>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d116      	bne.n	8005280 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8005252:	4b0e      	ldr	r3, [pc, #56]	; (800528c <HAL_TIM_Base_MspInit+0x120>)
 8005254:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005258:	4a0c      	ldr	r2, [pc, #48]	; (800528c <HAL_TIM_Base_MspInit+0x120>)
 800525a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800525e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8005262:	4b0a      	ldr	r3, [pc, #40]	; (800528c <HAL_TIM_Base_MspInit+0x120>)
 8005264:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005268:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800526c:	60fb      	str	r3, [r7, #12]
 800526e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM23_IRQn, 0, 0);
 8005270:	2200      	movs	r2, #0
 8005272:	2100      	movs	r1, #0
 8005274:	20a1      	movs	r0, #161	; 0xa1
 8005276:	f000 fe82 	bl	8005f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM23_IRQn);
 800527a:	20a1      	movs	r0, #161	; 0xa1
 800527c:	f000 fe99 	bl	8005fb2 <HAL_NVIC_EnableIRQ>
}
 8005280:	bf00      	nop
 8005282:	3718      	adds	r7, #24
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	40010000 	.word	0x40010000
 800528c:	58024400 	.word	0x58024400
 8005290:	40010400 	.word	0x40010400
 8005294:	4000e000 	.word	0x4000e000

08005298 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b090      	sub	sp, #64	; 0x40
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80052a4:	2200      	movs	r2, #0
 80052a6:	601a      	str	r2, [r3, #0]
 80052a8:	605a      	str	r2, [r3, #4]
 80052aa:	609a      	str	r2, [r3, #8]
 80052ac:	60da      	str	r2, [r3, #12]
 80052ae:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052b8:	d14e      	bne.n	8005358 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80052ba:	4b77      	ldr	r3, [pc, #476]	; (8005498 <HAL_TIM_Encoder_MspInit+0x200>)
 80052bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80052c0:	4a75      	ldr	r2, [pc, #468]	; (8005498 <HAL_TIM_Encoder_MspInit+0x200>)
 80052c2:	f043 0301 	orr.w	r3, r3, #1
 80052c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80052ca:	4b73      	ldr	r3, [pc, #460]	; (8005498 <HAL_TIM_Encoder_MspInit+0x200>)
 80052cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80052d6:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052d8:	4b6f      	ldr	r3, [pc, #444]	; (8005498 <HAL_TIM_Encoder_MspInit+0x200>)
 80052da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052de:	4a6e      	ldr	r2, [pc, #440]	; (8005498 <HAL_TIM_Encoder_MspInit+0x200>)
 80052e0:	f043 0301 	orr.w	r3, r3, #1
 80052e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80052e8:	4b6b      	ldr	r3, [pc, #428]	; (8005498 <HAL_TIM_Encoder_MspInit+0x200>)
 80052ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	627b      	str	r3, [r7, #36]	; 0x24
 80052f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052f6:	4b68      	ldr	r3, [pc, #416]	; (8005498 <HAL_TIM_Encoder_MspInit+0x200>)
 80052f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052fc:	4a66      	ldr	r2, [pc, #408]	; (8005498 <HAL_TIM_Encoder_MspInit+0x200>)
 80052fe:	f043 0302 	orr.w	r3, r3, #2
 8005302:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005306:	4b64      	ldr	r3, [pc, #400]	; (8005498 <HAL_TIM_Encoder_MspInit+0x200>)
 8005308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800530c:	f003 0302 	and.w	r3, r3, #2
 8005310:	623b      	str	r3, [r7, #32]
 8005312:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005314:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005318:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800531a:	2302      	movs	r3, #2
 800531c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800531e:	2300      	movs	r3, #0
 8005320:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005322:	2300      	movs	r3, #0
 8005324:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005326:	2301      	movs	r3, #1
 8005328:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800532a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800532e:	4619      	mov	r1, r3
 8005330:	485a      	ldr	r0, [pc, #360]	; (800549c <HAL_TIM_Encoder_MspInit+0x204>)
 8005332:	f003 fe55 	bl	8008fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005336:	2308      	movs	r3, #8
 8005338:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800533a:	2302      	movs	r3, #2
 800533c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800533e:	2300      	movs	r3, #0
 8005340:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005342:	2300      	movs	r3, #0
 8005344:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005346:	2301      	movs	r3, #1
 8005348:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800534a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800534e:	4619      	mov	r1, r3
 8005350:	4853      	ldr	r0, [pc, #332]	; (80054a0 <HAL_TIM_Encoder_MspInit+0x208>)
 8005352:	f003 fe45 	bl	8008fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8005356:	e09b      	b.n	8005490 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM3)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a51      	ldr	r2, [pc, #324]	; (80054a4 <HAL_TIM_Encoder_MspInit+0x20c>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d12e      	bne.n	80053c0 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005362:	4b4d      	ldr	r3, [pc, #308]	; (8005498 <HAL_TIM_Encoder_MspInit+0x200>)
 8005364:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005368:	4a4b      	ldr	r2, [pc, #300]	; (8005498 <HAL_TIM_Encoder_MspInit+0x200>)
 800536a:	f043 0302 	orr.w	r3, r3, #2
 800536e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005372:	4b49      	ldr	r3, [pc, #292]	; (8005498 <HAL_TIM_Encoder_MspInit+0x200>)
 8005374:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005378:	f003 0302 	and.w	r3, r3, #2
 800537c:	61fb      	str	r3, [r7, #28]
 800537e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005380:	4b45      	ldr	r3, [pc, #276]	; (8005498 <HAL_TIM_Encoder_MspInit+0x200>)
 8005382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005386:	4a44      	ldr	r2, [pc, #272]	; (8005498 <HAL_TIM_Encoder_MspInit+0x200>)
 8005388:	f043 0302 	orr.w	r3, r3, #2
 800538c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005390:	4b41      	ldr	r3, [pc, #260]	; (8005498 <HAL_TIM_Encoder_MspInit+0x200>)
 8005392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	61bb      	str	r3, [r7, #24]
 800539c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800539e:	2330      	movs	r3, #48	; 0x30
 80053a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053a2:	2302      	movs	r3, #2
 80053a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053a6:	2300      	movs	r3, #0
 80053a8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053aa:	2300      	movs	r3, #0
 80053ac:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80053ae:	2302      	movs	r3, #2
 80053b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80053b6:	4619      	mov	r1, r3
 80053b8:	4839      	ldr	r0, [pc, #228]	; (80054a0 <HAL_TIM_Encoder_MspInit+0x208>)
 80053ba:	f003 fe11 	bl	8008fe0 <HAL_GPIO_Init>
}
 80053be:	e067      	b.n	8005490 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM4)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a38      	ldr	r2, [pc, #224]	; (80054a8 <HAL_TIM_Encoder_MspInit+0x210>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d12f      	bne.n	800542a <HAL_TIM_Encoder_MspInit+0x192>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80053ca:	4b33      	ldr	r3, [pc, #204]	; (8005498 <HAL_TIM_Encoder_MspInit+0x200>)
 80053cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80053d0:	4a31      	ldr	r2, [pc, #196]	; (8005498 <HAL_TIM_Encoder_MspInit+0x200>)
 80053d2:	f043 0304 	orr.w	r3, r3, #4
 80053d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80053da:	4b2f      	ldr	r3, [pc, #188]	; (8005498 <HAL_TIM_Encoder_MspInit+0x200>)
 80053dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80053e0:	f003 0304 	and.w	r3, r3, #4
 80053e4:	617b      	str	r3, [r7, #20]
 80053e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80053e8:	4b2b      	ldr	r3, [pc, #172]	; (8005498 <HAL_TIM_Encoder_MspInit+0x200>)
 80053ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053ee:	4a2a      	ldr	r2, [pc, #168]	; (8005498 <HAL_TIM_Encoder_MspInit+0x200>)
 80053f0:	f043 0308 	orr.w	r3, r3, #8
 80053f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80053f8:	4b27      	ldr	r3, [pc, #156]	; (8005498 <HAL_TIM_Encoder_MspInit+0x200>)
 80053fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053fe:	f003 0308 	and.w	r3, r3, #8
 8005402:	613b      	str	r3, [r7, #16]
 8005404:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8005406:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800540a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800540c:	2302      	movs	r3, #2
 800540e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005410:	2300      	movs	r3, #0
 8005412:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005414:	2300      	movs	r3, #0
 8005416:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005418:	2302      	movs	r3, #2
 800541a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800541c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005420:	4619      	mov	r1, r3
 8005422:	4822      	ldr	r0, [pc, #136]	; (80054ac <HAL_TIM_Encoder_MspInit+0x214>)
 8005424:	f003 fddc 	bl	8008fe0 <HAL_GPIO_Init>
}
 8005428:	e032      	b.n	8005490 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM5)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a20      	ldr	r2, [pc, #128]	; (80054b0 <HAL_TIM_Encoder_MspInit+0x218>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d12d      	bne.n	8005490 <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005434:	4b18      	ldr	r3, [pc, #96]	; (8005498 <HAL_TIM_Encoder_MspInit+0x200>)
 8005436:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800543a:	4a17      	ldr	r2, [pc, #92]	; (8005498 <HAL_TIM_Encoder_MspInit+0x200>)
 800543c:	f043 0308 	orr.w	r3, r3, #8
 8005440:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005444:	4b14      	ldr	r3, [pc, #80]	; (8005498 <HAL_TIM_Encoder_MspInit+0x200>)
 8005446:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800544a:	f003 0308 	and.w	r3, r3, #8
 800544e:	60fb      	str	r3, [r7, #12]
 8005450:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005452:	4b11      	ldr	r3, [pc, #68]	; (8005498 <HAL_TIM_Encoder_MspInit+0x200>)
 8005454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005458:	4a0f      	ldr	r2, [pc, #60]	; (8005498 <HAL_TIM_Encoder_MspInit+0x200>)
 800545a:	f043 0301 	orr.w	r3, r3, #1
 800545e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005462:	4b0d      	ldr	r3, [pc, #52]	; (8005498 <HAL_TIM_Encoder_MspInit+0x200>)
 8005464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005468:	f003 0301 	and.w	r3, r3, #1
 800546c:	60bb      	str	r3, [r7, #8]
 800546e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005470:	2303      	movs	r3, #3
 8005472:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005474:	2302      	movs	r3, #2
 8005476:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005478:	2300      	movs	r3, #0
 800547a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800547c:	2300      	movs	r3, #0
 800547e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005480:	2302      	movs	r3, #2
 8005482:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005484:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005488:	4619      	mov	r1, r3
 800548a:	4804      	ldr	r0, [pc, #16]	; (800549c <HAL_TIM_Encoder_MspInit+0x204>)
 800548c:	f003 fda8 	bl	8008fe0 <HAL_GPIO_Init>
}
 8005490:	bf00      	nop
 8005492:	3740      	adds	r7, #64	; 0x40
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	58024400 	.word	0x58024400
 800549c:	58020000 	.word	0x58020000
 80054a0:	58020400 	.word	0x58020400
 80054a4:	40000400 	.word	0x40000400
 80054a8:	40000800 	.word	0x40000800
 80054ac:	58020c00 	.word	0x58020c00
 80054b0:	40000c00 	.word	0x40000c00

080054b4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a19      	ldr	r2, [pc, #100]	; (8005528 <HAL_TIM_PWM_MspInit+0x74>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d117      	bne.n	80054f6 <HAL_TIM_PWM_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80054c6:	4b19      	ldr	r3, [pc, #100]	; (800552c <HAL_TIM_PWM_MspInit+0x78>)
 80054c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80054cc:	4a17      	ldr	r2, [pc, #92]	; (800552c <HAL_TIM_PWM_MspInit+0x78>)
 80054ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054d2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80054d6:	4b15      	ldr	r3, [pc, #84]	; (800552c <HAL_TIM_PWM_MspInit+0x78>)
 80054d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80054dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e0:	60fb      	str	r3, [r7, #12]
 80054e2:	68fb      	ldr	r3, [r7, #12]
    /* TIM12 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80054e4:	2200      	movs	r2, #0
 80054e6:	2100      	movs	r1, #0
 80054e8:	202b      	movs	r0, #43	; 0x2b
 80054ea:	f000 fd48 	bl	8005f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80054ee:	202b      	movs	r0, #43	; 0x2b
 80054f0:	f000 fd5f 	bl	8005fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80054f4:	e013      	b.n	800551e <HAL_TIM_PWM_MspInit+0x6a>
  else if(htim_pwm->Instance==TIM15)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a0d      	ldr	r2, [pc, #52]	; (8005530 <HAL_TIM_PWM_MspInit+0x7c>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d10e      	bne.n	800551e <HAL_TIM_PWM_MspInit+0x6a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005500:	4b0a      	ldr	r3, [pc, #40]	; (800552c <HAL_TIM_PWM_MspInit+0x78>)
 8005502:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005506:	4a09      	ldr	r2, [pc, #36]	; (800552c <HAL_TIM_PWM_MspInit+0x78>)
 8005508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800550c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005510:	4b06      	ldr	r3, [pc, #24]	; (800552c <HAL_TIM_PWM_MspInit+0x78>)
 8005512:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800551a:	60bb      	str	r3, [r7, #8]
 800551c:	68bb      	ldr	r3, [r7, #8]
}
 800551e:	bf00      	nop
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	40001800 	.word	0x40001800
 800552c:	58024400 	.word	0x58024400
 8005530:	40014000 	.word	0x40014000

08005534 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b08a      	sub	sp, #40	; 0x28
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800553c:	f107 0314 	add.w	r3, r7, #20
 8005540:	2200      	movs	r2, #0
 8005542:	601a      	str	r2, [r3, #0]
 8005544:	605a      	str	r2, [r3, #4]
 8005546:	609a      	str	r2, [r3, #8]
 8005548:	60da      	str	r2, [r3, #12]
 800554a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a25      	ldr	r2, [pc, #148]	; (80055e8 <HAL_TIM_MspPostInit+0xb4>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d120      	bne.n	8005598 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005556:	4b25      	ldr	r3, [pc, #148]	; (80055ec <HAL_TIM_MspPostInit+0xb8>)
 8005558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800555c:	4a23      	ldr	r2, [pc, #140]	; (80055ec <HAL_TIM_MspPostInit+0xb8>)
 800555e:	f043 0302 	orr.w	r3, r3, #2
 8005562:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005566:	4b21      	ldr	r3, [pc, #132]	; (80055ec <HAL_TIM_MspPostInit+0xb8>)
 8005568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	613b      	str	r3, [r7, #16]
 8005572:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8005574:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800557a:	2302      	movs	r3, #2
 800557c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800557e:	2300      	movs	r3, #0
 8005580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005582:	2300      	movs	r3, #0
 8005584:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8005586:	2302      	movs	r3, #2
 8005588:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800558a:	f107 0314 	add.w	r3, r7, #20
 800558e:	4619      	mov	r1, r3
 8005590:	4817      	ldr	r0, [pc, #92]	; (80055f0 <HAL_TIM_MspPostInit+0xbc>)
 8005592:	f003 fd25 	bl	8008fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8005596:	e023      	b.n	80055e0 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM15)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a15      	ldr	r2, [pc, #84]	; (80055f4 <HAL_TIM_MspPostInit+0xc0>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d11e      	bne.n	80055e0 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80055a2:	4b12      	ldr	r3, [pc, #72]	; (80055ec <HAL_TIM_MspPostInit+0xb8>)
 80055a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055a8:	4a10      	ldr	r2, [pc, #64]	; (80055ec <HAL_TIM_MspPostInit+0xb8>)
 80055aa:	f043 0310 	orr.w	r3, r3, #16
 80055ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80055b2:	4b0e      	ldr	r3, [pc, #56]	; (80055ec <HAL_TIM_MspPostInit+0xb8>)
 80055b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055b8:	f003 0310 	and.w	r3, r3, #16
 80055bc:	60fb      	str	r3, [r7, #12]
 80055be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80055c0:	2360      	movs	r3, #96	; 0x60
 80055c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055c4:	2302      	movs	r3, #2
 80055c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055c8:	2300      	movs	r3, #0
 80055ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055cc:	2300      	movs	r3, #0
 80055ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80055d0:	2304      	movs	r3, #4
 80055d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80055d4:	f107 0314 	add.w	r3, r7, #20
 80055d8:	4619      	mov	r1, r3
 80055da:	4807      	ldr	r0, [pc, #28]	; (80055f8 <HAL_TIM_MspPostInit+0xc4>)
 80055dc:	f003 fd00 	bl	8008fe0 <HAL_GPIO_Init>
}
 80055e0:	bf00      	nop
 80055e2:	3728      	adds	r7, #40	; 0x28
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	40001800 	.word	0x40001800
 80055ec:	58024400 	.word	0x58024400
 80055f0:	58020400 	.word	0x58020400
 80055f4:	40014000 	.word	0x40014000
 80055f8:	58021000 	.word	0x58021000

080055fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b0bc      	sub	sp, #240	; 0xf0
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005604:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005608:	2200      	movs	r2, #0
 800560a:	601a      	str	r2, [r3, #0]
 800560c:	605a      	str	r2, [r3, #4]
 800560e:	609a      	str	r2, [r3, #8]
 8005610:	60da      	str	r2, [r3, #12]
 8005612:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005614:	f107 0320 	add.w	r3, r7, #32
 8005618:	22b8      	movs	r2, #184	; 0xb8
 800561a:	2100      	movs	r1, #0
 800561c:	4618      	mov	r0, r3
 800561e:	f00a fbba 	bl	800fd96 <memset>
  if(huart->Instance==USART1)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a97      	ldr	r2, [pc, #604]	; (8005884 <HAL_UART_MspInit+0x288>)
 8005628:	4293      	cmp	r3, r2
 800562a:	f040 80ae 	bne.w	800578a <HAL_UART_MspInit+0x18e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800562e:	f04f 0201 	mov.w	r2, #1
 8005632:	f04f 0300 	mov.w	r3, #0
 8005636:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800563a:	2300      	movs	r3, #0
 800563c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005640:	f107 0320 	add.w	r3, r7, #32
 8005644:	4618      	mov	r0, r3
 8005646:	f004 ff2f 	bl	800a4a8 <HAL_RCCEx_PeriphCLKConfig>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d001      	beq.n	8005654 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8005650:	f7fc fbb4 	bl	8001dbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005654:	4b8c      	ldr	r3, [pc, #560]	; (8005888 <HAL_UART_MspInit+0x28c>)
 8005656:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800565a:	4a8b      	ldr	r2, [pc, #556]	; (8005888 <HAL_UART_MspInit+0x28c>)
 800565c:	f043 0310 	orr.w	r3, r3, #16
 8005660:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005664:	4b88      	ldr	r3, [pc, #544]	; (8005888 <HAL_UART_MspInit+0x28c>)
 8005666:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800566a:	f003 0310 	and.w	r3, r3, #16
 800566e:	61fb      	str	r3, [r7, #28]
 8005670:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005672:	4b85      	ldr	r3, [pc, #532]	; (8005888 <HAL_UART_MspInit+0x28c>)
 8005674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005678:	4a83      	ldr	r2, [pc, #524]	; (8005888 <HAL_UART_MspInit+0x28c>)
 800567a:	f043 0301 	orr.w	r3, r3, #1
 800567e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005682:	4b81      	ldr	r3, [pc, #516]	; (8005888 <HAL_UART_MspInit+0x28c>)
 8005684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005688:	f003 0301 	and.w	r3, r3, #1
 800568c:	61bb      	str	r3, [r7, #24]
 800568e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005690:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005694:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005698:	2302      	movs	r3, #2
 800569a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800569e:	2300      	movs	r3, #0
 80056a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056a4:	2300      	movs	r3, #0
 80056a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80056aa:	2307      	movs	r3, #7
 80056ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056b0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80056b4:	4619      	mov	r1, r3
 80056b6:	4875      	ldr	r0, [pc, #468]	; (800588c <HAL_UART_MspInit+0x290>)
 80056b8:	f003 fc92 	bl	8008fe0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 80056bc:	4b74      	ldr	r3, [pc, #464]	; (8005890 <HAL_UART_MspInit+0x294>)
 80056be:	4a75      	ldr	r2, [pc, #468]	; (8005894 <HAL_UART_MspInit+0x298>)
 80056c0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80056c2:	4b73      	ldr	r3, [pc, #460]	; (8005890 <HAL_UART_MspInit+0x294>)
 80056c4:	2229      	movs	r2, #41	; 0x29
 80056c6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80056c8:	4b71      	ldr	r3, [pc, #452]	; (8005890 <HAL_UART_MspInit+0x294>)
 80056ca:	2200      	movs	r2, #0
 80056cc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80056ce:	4b70      	ldr	r3, [pc, #448]	; (8005890 <HAL_UART_MspInit+0x294>)
 80056d0:	2200      	movs	r2, #0
 80056d2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80056d4:	4b6e      	ldr	r3, [pc, #440]	; (8005890 <HAL_UART_MspInit+0x294>)
 80056d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056da:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80056dc:	4b6c      	ldr	r3, [pc, #432]	; (8005890 <HAL_UART_MspInit+0x294>)
 80056de:	2200      	movs	r2, #0
 80056e0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80056e2:	4b6b      	ldr	r3, [pc, #428]	; (8005890 <HAL_UART_MspInit+0x294>)
 80056e4:	2200      	movs	r2, #0
 80056e6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80056e8:	4b69      	ldr	r3, [pc, #420]	; (8005890 <HAL_UART_MspInit+0x294>)
 80056ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056ee:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80056f0:	4b67      	ldr	r3, [pc, #412]	; (8005890 <HAL_UART_MspInit+0x294>)
 80056f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80056f6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80056f8:	4b65      	ldr	r3, [pc, #404]	; (8005890 <HAL_UART_MspInit+0x294>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80056fe:	4864      	ldr	r0, [pc, #400]	; (8005890 <HAL_UART_MspInit+0x294>)
 8005700:	f000 fc80 	bl	8006004 <HAL_DMA_Init>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d001      	beq.n	800570e <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800570a:	f7fc fb57 	bl	8001dbc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a5f      	ldr	r2, [pc, #380]	; (8005890 <HAL_UART_MspInit+0x294>)
 8005712:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8005716:	4a5e      	ldr	r2, [pc, #376]	; (8005890 <HAL_UART_MspInit+0x294>)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 800571c:	4b5e      	ldr	r3, [pc, #376]	; (8005898 <HAL_UART_MspInit+0x29c>)
 800571e:	4a5f      	ldr	r2, [pc, #380]	; (800589c <HAL_UART_MspInit+0x2a0>)
 8005720:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8005722:	4b5d      	ldr	r3, [pc, #372]	; (8005898 <HAL_UART_MspInit+0x29c>)
 8005724:	222a      	movs	r2, #42	; 0x2a
 8005726:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005728:	4b5b      	ldr	r3, [pc, #364]	; (8005898 <HAL_UART_MspInit+0x29c>)
 800572a:	2240      	movs	r2, #64	; 0x40
 800572c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800572e:	4b5a      	ldr	r3, [pc, #360]	; (8005898 <HAL_UART_MspInit+0x29c>)
 8005730:	2200      	movs	r2, #0
 8005732:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005734:	4b58      	ldr	r3, [pc, #352]	; (8005898 <HAL_UART_MspInit+0x29c>)
 8005736:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800573a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800573c:	4b56      	ldr	r3, [pc, #344]	; (8005898 <HAL_UART_MspInit+0x29c>)
 800573e:	2200      	movs	r2, #0
 8005740:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005742:	4b55      	ldr	r3, [pc, #340]	; (8005898 <HAL_UART_MspInit+0x29c>)
 8005744:	2200      	movs	r2, #0
 8005746:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005748:	4b53      	ldr	r3, [pc, #332]	; (8005898 <HAL_UART_MspInit+0x29c>)
 800574a:	2200      	movs	r2, #0
 800574c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800574e:	4b52      	ldr	r3, [pc, #328]	; (8005898 <HAL_UART_MspInit+0x29c>)
 8005750:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005754:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005756:	4b50      	ldr	r3, [pc, #320]	; (8005898 <HAL_UART_MspInit+0x29c>)
 8005758:	2200      	movs	r2, #0
 800575a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800575c:	484e      	ldr	r0, [pc, #312]	; (8005898 <HAL_UART_MspInit+0x29c>)
 800575e:	f000 fc51 	bl	8006004 <HAL_DMA_Init>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d001      	beq.n	800576c <HAL_UART_MspInit+0x170>
    {
      Error_Handler();
 8005768:	f7fc fb28 	bl	8001dbc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a4a      	ldr	r2, [pc, #296]	; (8005898 <HAL_UART_MspInit+0x29c>)
 8005770:	67da      	str	r2, [r3, #124]	; 0x7c
 8005772:	4a49      	ldr	r2, [pc, #292]	; (8005898 <HAL_UART_MspInit+0x29c>)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005778:	2200      	movs	r2, #0
 800577a:	2100      	movs	r1, #0
 800577c:	2025      	movs	r0, #37	; 0x25
 800577e:	f000 fbfe 	bl	8005f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005782:	2025      	movs	r0, #37	; 0x25
 8005784:	f000 fc15 	bl	8005fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005788:	e078      	b.n	800587c <HAL_UART_MspInit+0x280>
  else if(huart->Instance==USART3)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a44      	ldr	r2, [pc, #272]	; (80058a0 <HAL_UART_MspInit+0x2a4>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d173      	bne.n	800587c <HAL_UART_MspInit+0x280>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005794:	f04f 0202 	mov.w	r2, #2
 8005798:	f04f 0300 	mov.w	r3, #0
 800579c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80057a0:	2300      	movs	r3, #0
 80057a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80057a6:	f107 0320 	add.w	r3, r7, #32
 80057aa:	4618      	mov	r0, r3
 80057ac:	f004 fe7c 	bl	800a4a8 <HAL_RCCEx_PeriphCLKConfig>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d001      	beq.n	80057ba <HAL_UART_MspInit+0x1be>
      Error_Handler();
 80057b6:	f7fc fb01 	bl	8001dbc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80057ba:	4b33      	ldr	r3, [pc, #204]	; (8005888 <HAL_UART_MspInit+0x28c>)
 80057bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80057c0:	4a31      	ldr	r2, [pc, #196]	; (8005888 <HAL_UART_MspInit+0x28c>)
 80057c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80057ca:	4b2f      	ldr	r3, [pc, #188]	; (8005888 <HAL_UART_MspInit+0x28c>)
 80057cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80057d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057d4:	617b      	str	r3, [r7, #20]
 80057d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057d8:	4b2b      	ldr	r3, [pc, #172]	; (8005888 <HAL_UART_MspInit+0x28c>)
 80057da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057de:	4a2a      	ldr	r2, [pc, #168]	; (8005888 <HAL_UART_MspInit+0x28c>)
 80057e0:	f043 0302 	orr.w	r3, r3, #2
 80057e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80057e8:	4b27      	ldr	r3, [pc, #156]	; (8005888 <HAL_UART_MspInit+0x28c>)
 80057ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057ee:	f003 0302 	and.w	r3, r3, #2
 80057f2:	613b      	str	r3, [r7, #16]
 80057f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80057f6:	4b24      	ldr	r3, [pc, #144]	; (8005888 <HAL_UART_MspInit+0x28c>)
 80057f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057fc:	4a22      	ldr	r2, [pc, #136]	; (8005888 <HAL_UART_MspInit+0x28c>)
 80057fe:	f043 0308 	orr.w	r3, r3, #8
 8005802:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005806:	4b20      	ldr	r3, [pc, #128]	; (8005888 <HAL_UART_MspInit+0x28c>)
 8005808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800580c:	f003 0308 	and.w	r3, r3, #8
 8005810:	60fb      	str	r3, [r7, #12]
 8005812:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005814:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005818:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800581c:	2302      	movs	r3, #2
 800581e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005822:	2300      	movs	r3, #0
 8005824:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005828:	2300      	movs	r3, #0
 800582a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800582e:	2307      	movs	r3, #7
 8005830:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005834:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005838:	4619      	mov	r1, r3
 800583a:	481a      	ldr	r0, [pc, #104]	; (80058a4 <HAL_UART_MspInit+0x2a8>)
 800583c:	f003 fbd0 	bl	8008fe0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005840:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005844:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005848:	2302      	movs	r3, #2
 800584a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800584e:	2300      	movs	r3, #0
 8005850:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005854:	2300      	movs	r3, #0
 8005856:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800585a:	2307      	movs	r3, #7
 800585c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005860:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005864:	4619      	mov	r1, r3
 8005866:	4810      	ldr	r0, [pc, #64]	; (80058a8 <HAL_UART_MspInit+0x2ac>)
 8005868:	f003 fbba 	bl	8008fe0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800586c:	2200      	movs	r2, #0
 800586e:	2100      	movs	r1, #0
 8005870:	2027      	movs	r0, #39	; 0x27
 8005872:	f000 fb84 	bl	8005f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005876:	2027      	movs	r0, #39	; 0x27
 8005878:	f000 fb9b 	bl	8005fb2 <HAL_NVIC_EnableIRQ>
}
 800587c:	bf00      	nop
 800587e:	37f0      	adds	r7, #240	; 0xf0
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	40011000 	.word	0x40011000
 8005888:	58024400 	.word	0x58024400
 800588c:	58020000 	.word	0x58020000
 8005890:	24000874 	.word	0x24000874
 8005894:	40020010 	.word	0x40020010
 8005898:	240008ec 	.word	0x240008ec
 800589c:	40020028 	.word	0x40020028
 80058a0:	40004800 	.word	0x40004800
 80058a4:	58020400 	.word	0x58020400
 80058a8:	58020c00 	.word	0x58020c00

080058ac <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a1e      	ldr	r2, [pc, #120]	; (8005934 <HAL_UART_MspDeInit+0x88>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d11b      	bne.n	80058f6 <HAL_UART_MspDeInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80058be:	4b1e      	ldr	r3, [pc, #120]	; (8005938 <HAL_UART_MspDeInit+0x8c>)
 80058c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80058c4:	4a1c      	ldr	r2, [pc, #112]	; (8005938 <HAL_UART_MspDeInit+0x8c>)
 80058c6:	f023 0310 	bic.w	r3, r3, #16
 80058ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80058ce:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80058d2:	481a      	ldr	r0, [pc, #104]	; (800593c <HAL_UART_MspDeInit+0x90>)
 80058d4:	f003 fd2c 	bl	8009330 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 fee8 	bl	80066b4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058e8:	4618      	mov	r0, r3
 80058ea:	f000 fee3 	bl	80066b4 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80058ee:	2025      	movs	r0, #37	; 0x25
 80058f0:	f000 fb6d 	bl	8005fce <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 80058f4:	e019      	b.n	800592a <HAL_UART_MspDeInit+0x7e>
  else if(huart->Instance==USART3)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a11      	ldr	r2, [pc, #68]	; (8005940 <HAL_UART_MspDeInit+0x94>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d114      	bne.n	800592a <HAL_UART_MspDeInit+0x7e>
    __HAL_RCC_USART3_CLK_DISABLE();
 8005900:	4b0d      	ldr	r3, [pc, #52]	; (8005938 <HAL_UART_MspDeInit+0x8c>)
 8005902:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005906:	4a0c      	ldr	r2, [pc, #48]	; (8005938 <HAL_UART_MspDeInit+0x8c>)
 8005908:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800590c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8005910:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005914:	480b      	ldr	r0, [pc, #44]	; (8005944 <HAL_UART_MspDeInit+0x98>)
 8005916:	f003 fd0b 	bl	8009330 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_9);
 800591a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800591e:	480a      	ldr	r0, [pc, #40]	; (8005948 <HAL_UART_MspDeInit+0x9c>)
 8005920:	f003 fd06 	bl	8009330 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 8005924:	2027      	movs	r0, #39	; 0x27
 8005926:	f000 fb52 	bl	8005fce <HAL_NVIC_DisableIRQ>
}
 800592a:	bf00      	nop
 800592c:	3708      	adds	r7, #8
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	40011000 	.word	0x40011000
 8005938:	58024400 	.word	0x58024400
 800593c:	58020000 	.word	0x58020000
 8005940:	40004800 	.word	0x40004800
 8005944:	58020400 	.word	0x58020400
 8005948:	58020c00 	.word	0x58020c00

0800594c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800594c:	b480      	push	{r7}
 800594e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005950:	e7fe      	b.n	8005950 <NMI_Handler+0x4>

08005952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005952:	b480      	push	{r7}
 8005954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005956:	e7fe      	b.n	8005956 <HardFault_Handler+0x4>

08005958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005958:	b480      	push	{r7}
 800595a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800595c:	e7fe      	b.n	800595c <MemManage_Handler+0x4>

0800595e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800595e:	b480      	push	{r7}
 8005960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005962:	e7fe      	b.n	8005962 <BusFault_Handler+0x4>

08005964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005964:	b480      	push	{r7}
 8005966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005968:	e7fe      	b.n	8005968 <UsageFault_Handler+0x4>

0800596a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800596a:	b480      	push	{r7}
 800596c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800596e:	bf00      	nop
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005978:	b480      	push	{r7}
 800597a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800597c:	bf00      	nop
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005986:	b480      	push	{r7}
 8005988:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800598a:	bf00      	nop
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005998:	f000 f9d2 	bl	8005d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800599c:	bf00      	nop
 800599e:	bd80      	pop	{r7, pc}

080059a0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80059a4:	4802      	ldr	r0, [pc, #8]	; (80059b0 <DMA1_Stream0_IRQHandler+0x10>)
 80059a6:	f002 f809 	bl	80079bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80059aa:	bf00      	nop
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	24000874 	.word	0x24000874

080059b4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80059b8:	4802      	ldr	r0, [pc, #8]	; (80059c4 <DMA1_Stream1_IRQHandler+0x10>)
 80059ba:	f001 ffff 	bl	80079bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80059be:	bf00      	nop
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	240008ec 	.word	0x240008ec

080059c8 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80059cc:	4802      	ldr	r0, [pc, #8]	; (80059d8 <TIM1_BRK_IRQHandler+0x10>)
 80059ce:	f006 fed3 	bl	800c778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80059d2:	bf00      	nop
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	240004a0 	.word	0x240004a0

080059dc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80059e0:	4802      	ldr	r0, [pc, #8]	; (80059ec <TIM1_UP_IRQHandler+0x10>)
 80059e2:	f006 fec9 	bl	800c778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80059e6:	bf00      	nop
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	240004a0 	.word	0x240004a0

080059f0 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80059f4:	4802      	ldr	r0, [pc, #8]	; (8005a00 <TIM1_TRG_COM_IRQHandler+0x10>)
 80059f6:	f006 febf 	bl	800c778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80059fa:	bf00      	nop
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	240004a0 	.word	0x240004a0

08005a04 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005a08:	4802      	ldr	r0, [pc, #8]	; (8005a14 <TIM1_CC_IRQHandler+0x10>)
 8005a0a:	f006 feb5 	bl	800c778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8005a0e:	bf00      	nop
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	240004a0 	.word	0x240004a0

08005a18 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005a1c:	4802      	ldr	r0, [pc, #8]	; (8005a28 <USART1_IRQHandler+0x10>)
 8005a1e:	f008 f983 	bl	800dd28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005a22:	bf00      	nop
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	2400074c 	.word	0x2400074c

08005a2c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005a30:	4802      	ldr	r0, [pc, #8]	; (8005a3c <USART3_IRQHandler+0x10>)
 8005a32:	f008 f979 	bl	800dd28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005a36:	bf00      	nop
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	240007e0 	.word	0x240007e0

08005a40 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005a44:	4803      	ldr	r0, [pc, #12]	; (8005a54 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8005a46:	f006 fe97 	bl	800c778 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8005a4a:	4803      	ldr	r0, [pc, #12]	; (8005a58 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8005a4c:	f006 fe94 	bl	800c778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8005a50:	bf00      	nop
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	2400061c 	.word	0x2400061c
 8005a58:	24000668 	.word	0x24000668

08005a5c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005a60:	4802      	ldr	r0, [pc, #8]	; (8005a6c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8005a62:	f006 fe89 	bl	800c778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8005a66:	bf00      	nop
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	2400061c 	.word	0x2400061c

08005a70 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005a74:	4802      	ldr	r0, [pc, #8]	; (8005a80 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8005a76:	f006 fe7f 	bl	800c778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8005a7a:	bf00      	nop
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	2400061c 	.word	0x2400061c

08005a84 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005a88:	4802      	ldr	r0, [pc, #8]	; (8005a94 <TIM8_CC_IRQHandler+0x10>)
 8005a8a:	f006 fe75 	bl	800c778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8005a8e:	bf00      	nop
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	2400061c 	.word	0x2400061c

08005a98 <TIM23_IRQHandler>:

/**
  * @brief This function handles TIM23 global interrupt.
  */
void TIM23_IRQHandler(void)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM23_IRQn 0 */

  /* USER CODE END TIM23_IRQn 0 */
  HAL_TIM_IRQHandler(&htim23);
 8005a9c:	4802      	ldr	r0, [pc, #8]	; (8005aa8 <TIM23_IRQHandler+0x10>)
 8005a9e:	f006 fe6b 	bl	800c778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM23_IRQn 1 */

  /* USER CODE END TIM23_IRQn 1 */
}
 8005aa2:	bf00      	nop
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	24000700 	.word	0x24000700

08005aac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b086      	sub	sp, #24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005ab4:	4a14      	ldr	r2, [pc, #80]	; (8005b08 <_sbrk+0x5c>)
 8005ab6:	4b15      	ldr	r3, [pc, #84]	; (8005b0c <_sbrk+0x60>)
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005ac0:	4b13      	ldr	r3, [pc, #76]	; (8005b10 <_sbrk+0x64>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d102      	bne.n	8005ace <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005ac8:	4b11      	ldr	r3, [pc, #68]	; (8005b10 <_sbrk+0x64>)
 8005aca:	4a12      	ldr	r2, [pc, #72]	; (8005b14 <_sbrk+0x68>)
 8005acc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005ace:	4b10      	ldr	r3, [pc, #64]	; (8005b10 <_sbrk+0x64>)
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d207      	bcs.n	8005aec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005adc:	f00a f964 	bl	800fda8 <__errno>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	220c      	movs	r2, #12
 8005ae4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8005aea:	e009      	b.n	8005b00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005aec:	4b08      	ldr	r3, [pc, #32]	; (8005b10 <_sbrk+0x64>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005af2:	4b07      	ldr	r3, [pc, #28]	; (8005b10 <_sbrk+0x64>)
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4413      	add	r3, r2
 8005afa:	4a05      	ldr	r2, [pc, #20]	; (8005b10 <_sbrk+0x64>)
 8005afc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005afe:	68fb      	ldr	r3, [r7, #12]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3718      	adds	r7, #24
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	24050000 	.word	0x24050000
 8005b0c:	00000400 	.word	0x00000400
 8005b10:	24001ff4 	.word	0x24001ff4
 8005b14:	24002148 	.word	0x24002148

08005b18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005b1c:	4b32      	ldr	r3, [pc, #200]	; (8005be8 <SystemInit+0xd0>)
 8005b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b22:	4a31      	ldr	r2, [pc, #196]	; (8005be8 <SystemInit+0xd0>)
 8005b24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005b2c:	4b2f      	ldr	r3, [pc, #188]	; (8005bec <SystemInit+0xd4>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 030f 	and.w	r3, r3, #15
 8005b34:	2b06      	cmp	r3, #6
 8005b36:	d807      	bhi.n	8005b48 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005b38:	4b2c      	ldr	r3, [pc, #176]	; (8005bec <SystemInit+0xd4>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f023 030f 	bic.w	r3, r3, #15
 8005b40:	4a2a      	ldr	r2, [pc, #168]	; (8005bec <SystemInit+0xd4>)
 8005b42:	f043 0307 	orr.w	r3, r3, #7
 8005b46:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005b48:	4b29      	ldr	r3, [pc, #164]	; (8005bf0 <SystemInit+0xd8>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a28      	ldr	r2, [pc, #160]	; (8005bf0 <SystemInit+0xd8>)
 8005b4e:	f043 0301 	orr.w	r3, r3, #1
 8005b52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005b54:	4b26      	ldr	r3, [pc, #152]	; (8005bf0 <SystemInit+0xd8>)
 8005b56:	2200      	movs	r2, #0
 8005b58:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005b5a:	4b25      	ldr	r3, [pc, #148]	; (8005bf0 <SystemInit+0xd8>)
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	4924      	ldr	r1, [pc, #144]	; (8005bf0 <SystemInit+0xd8>)
 8005b60:	4b24      	ldr	r3, [pc, #144]	; (8005bf4 <SystemInit+0xdc>)
 8005b62:	4013      	ands	r3, r2
 8005b64:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005b66:	4b21      	ldr	r3, [pc, #132]	; (8005bec <SystemInit+0xd4>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0308 	and.w	r3, r3, #8
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d007      	beq.n	8005b82 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005b72:	4b1e      	ldr	r3, [pc, #120]	; (8005bec <SystemInit+0xd4>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f023 030f 	bic.w	r3, r3, #15
 8005b7a:	4a1c      	ldr	r2, [pc, #112]	; (8005bec <SystemInit+0xd4>)
 8005b7c:	f043 0307 	orr.w	r3, r3, #7
 8005b80:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005b82:	4b1b      	ldr	r3, [pc, #108]	; (8005bf0 <SystemInit+0xd8>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005b88:	4b19      	ldr	r3, [pc, #100]	; (8005bf0 <SystemInit+0xd8>)
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8005b8e:	4b18      	ldr	r3, [pc, #96]	; (8005bf0 <SystemInit+0xd8>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005b94:	4b16      	ldr	r3, [pc, #88]	; (8005bf0 <SystemInit+0xd8>)
 8005b96:	4a18      	ldr	r2, [pc, #96]	; (8005bf8 <SystemInit+0xe0>)
 8005b98:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005b9a:	4b15      	ldr	r3, [pc, #84]	; (8005bf0 <SystemInit+0xd8>)
 8005b9c:	4a17      	ldr	r2, [pc, #92]	; (8005bfc <SystemInit+0xe4>)
 8005b9e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005ba0:	4b13      	ldr	r3, [pc, #76]	; (8005bf0 <SystemInit+0xd8>)
 8005ba2:	4a17      	ldr	r2, [pc, #92]	; (8005c00 <SystemInit+0xe8>)
 8005ba4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005ba6:	4b12      	ldr	r3, [pc, #72]	; (8005bf0 <SystemInit+0xd8>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005bac:	4b10      	ldr	r3, [pc, #64]	; (8005bf0 <SystemInit+0xd8>)
 8005bae:	4a14      	ldr	r2, [pc, #80]	; (8005c00 <SystemInit+0xe8>)
 8005bb0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005bb2:	4b0f      	ldr	r3, [pc, #60]	; (8005bf0 <SystemInit+0xd8>)
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005bb8:	4b0d      	ldr	r3, [pc, #52]	; (8005bf0 <SystemInit+0xd8>)
 8005bba:	4a11      	ldr	r2, [pc, #68]	; (8005c00 <SystemInit+0xe8>)
 8005bbc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005bbe:	4b0c      	ldr	r3, [pc, #48]	; (8005bf0 <SystemInit+0xd8>)
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005bc4:	4b0a      	ldr	r3, [pc, #40]	; (8005bf0 <SystemInit+0xd8>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a09      	ldr	r2, [pc, #36]	; (8005bf0 <SystemInit+0xd8>)
 8005bca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005bd0:	4b07      	ldr	r3, [pc, #28]	; (8005bf0 <SystemInit+0xd8>)
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005bd6:	4b0b      	ldr	r3, [pc, #44]	; (8005c04 <SystemInit+0xec>)
 8005bd8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005bdc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8005bde:	bf00      	nop
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr
 8005be8:	e000ed00 	.word	0xe000ed00
 8005bec:	52002000 	.word	0x52002000
 8005bf0:	58024400 	.word	0x58024400
 8005bf4:	eaf6ed7f 	.word	0xeaf6ed7f
 8005bf8:	02020200 	.word	0x02020200
 8005bfc:	01ff0000 	.word	0x01ff0000
 8005c00:	01010280 	.word	0x01010280
 8005c04:	52004000 	.word	0x52004000

08005c08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005c08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005c40 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005c0c:	f7ff ff84 	bl	8005b18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005c10:	480c      	ldr	r0, [pc, #48]	; (8005c44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005c12:	490d      	ldr	r1, [pc, #52]	; (8005c48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005c14:	4a0d      	ldr	r2, [pc, #52]	; (8005c4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005c18:	e002      	b.n	8005c20 <LoopCopyDataInit>

08005c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005c1e:	3304      	adds	r3, #4

08005c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005c24:	d3f9      	bcc.n	8005c1a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005c26:	4a0a      	ldr	r2, [pc, #40]	; (8005c50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005c28:	4c0a      	ldr	r4, [pc, #40]	; (8005c54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005c2c:	e001      	b.n	8005c32 <LoopFillZerobss>

08005c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005c30:	3204      	adds	r2, #4

08005c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005c34:	d3fb      	bcc.n	8005c2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005c36:	f00a f8bd 	bl	800fdb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005c3a:	f7fb fb29 	bl	8001290 <main>
  bx  lr
 8005c3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005c40:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8005c44:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005c48:	240000b0 	.word	0x240000b0
  ldr r2, =_sidata
 8005c4c:	080103dc 	.word	0x080103dc
  ldr r2, =_sbss
 8005c50:	240000b0 	.word	0x240000b0
  ldr r4, =_ebss
 8005c54:	24002144 	.word	0x24002144

08005c58 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005c58:	e7fe      	b.n	8005c58 <ADC3_IRQHandler>
	...

08005c5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005c62:	2003      	movs	r0, #3
 8005c64:	f000 f980 	bl	8005f68 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005c68:	f004 fa48 	bl	800a0fc <HAL_RCC_GetSysClockFreq>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	4b15      	ldr	r3, [pc, #84]	; (8005cc4 <HAL_Init+0x68>)
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	0a1b      	lsrs	r3, r3, #8
 8005c74:	f003 030f 	and.w	r3, r3, #15
 8005c78:	4913      	ldr	r1, [pc, #76]	; (8005cc8 <HAL_Init+0x6c>)
 8005c7a:	5ccb      	ldrb	r3, [r1, r3]
 8005c7c:	f003 031f 	and.w	r3, r3, #31
 8005c80:	fa22 f303 	lsr.w	r3, r2, r3
 8005c84:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c86:	4b0f      	ldr	r3, [pc, #60]	; (8005cc4 <HAL_Init+0x68>)
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	f003 030f 	and.w	r3, r3, #15
 8005c8e:	4a0e      	ldr	r2, [pc, #56]	; (8005cc8 <HAL_Init+0x6c>)
 8005c90:	5cd3      	ldrb	r3, [r2, r3]
 8005c92:	f003 031f 	and.w	r3, r3, #31
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	fa22 f303 	lsr.w	r3, r2, r3
 8005c9c:	4a0b      	ldr	r2, [pc, #44]	; (8005ccc <HAL_Init+0x70>)
 8005c9e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ca0:	4a0b      	ldr	r2, [pc, #44]	; (8005cd0 <HAL_Init+0x74>)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005ca6:	200f      	movs	r0, #15
 8005ca8:	f000 f814 	bl	8005cd4 <HAL_InitTick>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d001      	beq.n	8005cb6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e002      	b.n	8005cbc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005cb6:	f7ff fa3f 	bl	8005138 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3708      	adds	r7, #8
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	58024400 	.word	0x58024400
 8005cc8:	0801037c 	.word	0x0801037c
 8005ccc:	24000054 	.word	0x24000054
 8005cd0:	24000050 	.word	0x24000050

08005cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005cdc:	4b15      	ldr	r3, [pc, #84]	; (8005d34 <HAL_InitTick+0x60>)
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d101      	bne.n	8005ce8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e021      	b.n	8005d2c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005ce8:	4b13      	ldr	r3, [pc, #76]	; (8005d38 <HAL_InitTick+0x64>)
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	4b11      	ldr	r3, [pc, #68]	; (8005d34 <HAL_InitTick+0x60>)
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005cf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f000 f973 	bl	8005fea <HAL_SYSTICK_Config>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d001      	beq.n	8005d0e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e00e      	b.n	8005d2c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2b0f      	cmp	r3, #15
 8005d12:	d80a      	bhi.n	8005d2a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005d14:	2200      	movs	r2, #0
 8005d16:	6879      	ldr	r1, [r7, #4]
 8005d18:	f04f 30ff 	mov.w	r0, #4294967295
 8005d1c:	f000 f92f 	bl	8005f7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005d20:	4a06      	ldr	r2, [pc, #24]	; (8005d3c <HAL_InitTick+0x68>)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
 8005d28:	e000      	b.n	8005d2c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3708      	adds	r7, #8
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	2400005c 	.word	0x2400005c
 8005d38:	24000050 	.word	0x24000050
 8005d3c:	24000058 	.word	0x24000058

08005d40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005d40:	b480      	push	{r7}
 8005d42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005d44:	4b06      	ldr	r3, [pc, #24]	; (8005d60 <HAL_IncTick+0x20>)
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	461a      	mov	r2, r3
 8005d4a:	4b06      	ldr	r3, [pc, #24]	; (8005d64 <HAL_IncTick+0x24>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4413      	add	r3, r2
 8005d50:	4a04      	ldr	r2, [pc, #16]	; (8005d64 <HAL_IncTick+0x24>)
 8005d52:	6013      	str	r3, [r2, #0]
}
 8005d54:	bf00      	nop
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	2400005c 	.word	0x2400005c
 8005d64:	24001ff8 	.word	0x24001ff8

08005d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8005d6c:	4b03      	ldr	r3, [pc, #12]	; (8005d7c <HAL_GetTick+0x14>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	24001ff8 	.word	0x24001ff8

08005d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f003 0307 	and.w	r3, r3, #7
 8005d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d90:	4b0b      	ldr	r3, [pc, #44]	; (8005dc0 <__NVIC_SetPriorityGrouping+0x40>)
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d96:	68ba      	ldr	r2, [r7, #8]
 8005d98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005da8:	4b06      	ldr	r3, [pc, #24]	; (8005dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005dae:	4a04      	ldr	r2, [pc, #16]	; (8005dc0 <__NVIC_SetPriorityGrouping+0x40>)
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	60d3      	str	r3, [r2, #12]
}
 8005db4:	bf00      	nop
 8005db6:	3714      	adds	r7, #20
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr
 8005dc0:	e000ed00 	.word	0xe000ed00
 8005dc4:	05fa0000 	.word	0x05fa0000

08005dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005dcc:	4b04      	ldr	r3, [pc, #16]	; (8005de0 <__NVIC_GetPriorityGrouping+0x18>)
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	0a1b      	lsrs	r3, r3, #8
 8005dd2:	f003 0307 	and.w	r3, r3, #7
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	e000ed00 	.word	0xe000ed00

08005de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	4603      	mov	r3, r0
 8005dec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005dee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	db0b      	blt.n	8005e0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005df6:	88fb      	ldrh	r3, [r7, #6]
 8005df8:	f003 021f 	and.w	r2, r3, #31
 8005dfc:	4907      	ldr	r1, [pc, #28]	; (8005e1c <__NVIC_EnableIRQ+0x38>)
 8005dfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e02:	095b      	lsrs	r3, r3, #5
 8005e04:	2001      	movs	r0, #1
 8005e06:	fa00 f202 	lsl.w	r2, r0, r2
 8005e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005e0e:	bf00      	nop
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	e000e100 	.word	0xe000e100

08005e20 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	4603      	mov	r3, r0
 8005e28:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005e2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	db12      	blt.n	8005e58 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e32:	88fb      	ldrh	r3, [r7, #6]
 8005e34:	f003 021f 	and.w	r2, r3, #31
 8005e38:	490a      	ldr	r1, [pc, #40]	; (8005e64 <__NVIC_DisableIRQ+0x44>)
 8005e3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e3e:	095b      	lsrs	r3, r3, #5
 8005e40:	2001      	movs	r0, #1
 8005e42:	fa00 f202 	lsl.w	r2, r0, r2
 8005e46:	3320      	adds	r3, #32
 8005e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005e4c:	f3bf 8f4f 	dsb	sy
}
 8005e50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005e52:	f3bf 8f6f 	isb	sy
}
 8005e56:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr
 8005e64:	e000e100 	.word	0xe000e100

08005e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	4603      	mov	r3, r0
 8005e70:	6039      	str	r1, [r7, #0]
 8005e72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005e74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	db0a      	blt.n	8005e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	490c      	ldr	r1, [pc, #48]	; (8005eb4 <__NVIC_SetPriority+0x4c>)
 8005e82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e86:	0112      	lsls	r2, r2, #4
 8005e88:	b2d2      	uxtb	r2, r2
 8005e8a:	440b      	add	r3, r1
 8005e8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005e90:	e00a      	b.n	8005ea8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	b2da      	uxtb	r2, r3
 8005e96:	4908      	ldr	r1, [pc, #32]	; (8005eb8 <__NVIC_SetPriority+0x50>)
 8005e98:	88fb      	ldrh	r3, [r7, #6]
 8005e9a:	f003 030f 	and.w	r3, r3, #15
 8005e9e:	3b04      	subs	r3, #4
 8005ea0:	0112      	lsls	r2, r2, #4
 8005ea2:	b2d2      	uxtb	r2, r2
 8005ea4:	440b      	add	r3, r1
 8005ea6:	761a      	strb	r2, [r3, #24]
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr
 8005eb4:	e000e100 	.word	0xe000e100
 8005eb8:	e000ed00 	.word	0xe000ed00

08005ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b089      	sub	sp, #36	; 0x24
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f003 0307 	and.w	r3, r3, #7
 8005ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	f1c3 0307 	rsb	r3, r3, #7
 8005ed6:	2b04      	cmp	r3, #4
 8005ed8:	bf28      	it	cs
 8005eda:	2304      	movcs	r3, #4
 8005edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	3304      	adds	r3, #4
 8005ee2:	2b06      	cmp	r3, #6
 8005ee4:	d902      	bls.n	8005eec <NVIC_EncodePriority+0x30>
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	3b03      	subs	r3, #3
 8005eea:	e000      	b.n	8005eee <NVIC_EncodePriority+0x32>
 8005eec:	2300      	movs	r3, #0
 8005eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8005efa:	43da      	mvns	r2, r3
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	401a      	ands	r2, r3
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f04:	f04f 31ff 	mov.w	r1, #4294967295
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f0e:	43d9      	mvns	r1, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f14:	4313      	orrs	r3, r2
         );
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3724      	adds	r7, #36	; 0x24
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
	...

08005f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f34:	d301      	bcc.n	8005f3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005f36:	2301      	movs	r3, #1
 8005f38:	e00f      	b.n	8005f5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005f3a:	4a0a      	ldr	r2, [pc, #40]	; (8005f64 <SysTick_Config+0x40>)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005f42:	210f      	movs	r1, #15
 8005f44:	f04f 30ff 	mov.w	r0, #4294967295
 8005f48:	f7ff ff8e 	bl	8005e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f4c:	4b05      	ldr	r3, [pc, #20]	; (8005f64 <SysTick_Config+0x40>)
 8005f4e:	2200      	movs	r2, #0
 8005f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f52:	4b04      	ldr	r3, [pc, #16]	; (8005f64 <SysTick_Config+0x40>)
 8005f54:	2207      	movs	r2, #7
 8005f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3708      	adds	r7, #8
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	e000e010 	.word	0xe000e010

08005f68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f7ff ff05 	bl	8005d80 <__NVIC_SetPriorityGrouping>
}
 8005f76:	bf00      	nop
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b086      	sub	sp, #24
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	4603      	mov	r3, r0
 8005f86:	60b9      	str	r1, [r7, #8]
 8005f88:	607a      	str	r2, [r7, #4]
 8005f8a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005f8c:	f7ff ff1c 	bl	8005dc8 <__NVIC_GetPriorityGrouping>
 8005f90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	68b9      	ldr	r1, [r7, #8]
 8005f96:	6978      	ldr	r0, [r7, #20]
 8005f98:	f7ff ff90 	bl	8005ebc <NVIC_EncodePriority>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005fa2:	4611      	mov	r1, r2
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f7ff ff5f 	bl	8005e68 <__NVIC_SetPriority>
}
 8005faa:	bf00      	nop
 8005fac:	3718      	adds	r7, #24
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b082      	sub	sp, #8
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	4603      	mov	r3, r0
 8005fba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005fbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7ff ff0f 	bl	8005de4 <__NVIC_EnableIRQ>
}
 8005fc6:	bf00      	nop
 8005fc8:	3708      	adds	r7, #8
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}

08005fce <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b082      	sub	sp, #8
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005fd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7ff ff1f 	bl	8005e20 <__NVIC_DisableIRQ>
}
 8005fe2:	bf00      	nop
 8005fe4:	3708      	adds	r7, #8
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b082      	sub	sp, #8
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f7ff ff96 	bl	8005f24 <SysTick_Config>
 8005ff8:	4603      	mov	r3, r0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3708      	adds	r7, #8
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
	...

08006004 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b086      	sub	sp, #24
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800600c:	f7ff feac 	bl	8005d68 <HAL_GetTick>
 8006010:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d101      	bne.n	800601c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e312      	b.n	8006642 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a66      	ldr	r2, [pc, #408]	; (80061bc <HAL_DMA_Init+0x1b8>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d04a      	beq.n	80060bc <HAL_DMA_Init+0xb8>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a65      	ldr	r2, [pc, #404]	; (80061c0 <HAL_DMA_Init+0x1bc>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d045      	beq.n	80060bc <HAL_DMA_Init+0xb8>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a63      	ldr	r2, [pc, #396]	; (80061c4 <HAL_DMA_Init+0x1c0>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d040      	beq.n	80060bc <HAL_DMA_Init+0xb8>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a62      	ldr	r2, [pc, #392]	; (80061c8 <HAL_DMA_Init+0x1c4>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d03b      	beq.n	80060bc <HAL_DMA_Init+0xb8>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a60      	ldr	r2, [pc, #384]	; (80061cc <HAL_DMA_Init+0x1c8>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d036      	beq.n	80060bc <HAL_DMA_Init+0xb8>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a5f      	ldr	r2, [pc, #380]	; (80061d0 <HAL_DMA_Init+0x1cc>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d031      	beq.n	80060bc <HAL_DMA_Init+0xb8>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a5d      	ldr	r2, [pc, #372]	; (80061d4 <HAL_DMA_Init+0x1d0>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d02c      	beq.n	80060bc <HAL_DMA_Init+0xb8>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a5c      	ldr	r2, [pc, #368]	; (80061d8 <HAL_DMA_Init+0x1d4>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d027      	beq.n	80060bc <HAL_DMA_Init+0xb8>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a5a      	ldr	r2, [pc, #360]	; (80061dc <HAL_DMA_Init+0x1d8>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d022      	beq.n	80060bc <HAL_DMA_Init+0xb8>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a59      	ldr	r2, [pc, #356]	; (80061e0 <HAL_DMA_Init+0x1dc>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d01d      	beq.n	80060bc <HAL_DMA_Init+0xb8>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a57      	ldr	r2, [pc, #348]	; (80061e4 <HAL_DMA_Init+0x1e0>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d018      	beq.n	80060bc <HAL_DMA_Init+0xb8>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a56      	ldr	r2, [pc, #344]	; (80061e8 <HAL_DMA_Init+0x1e4>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d013      	beq.n	80060bc <HAL_DMA_Init+0xb8>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a54      	ldr	r2, [pc, #336]	; (80061ec <HAL_DMA_Init+0x1e8>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d00e      	beq.n	80060bc <HAL_DMA_Init+0xb8>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a53      	ldr	r2, [pc, #332]	; (80061f0 <HAL_DMA_Init+0x1ec>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d009      	beq.n	80060bc <HAL_DMA_Init+0xb8>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a51      	ldr	r2, [pc, #324]	; (80061f4 <HAL_DMA_Init+0x1f0>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d004      	beq.n	80060bc <HAL_DMA_Init+0xb8>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a50      	ldr	r2, [pc, #320]	; (80061f8 <HAL_DMA_Init+0x1f4>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d101      	bne.n	80060c0 <HAL_DMA_Init+0xbc>
 80060bc:	2301      	movs	r3, #1
 80060be:	e000      	b.n	80060c2 <HAL_DMA_Init+0xbe>
 80060c0:	2300      	movs	r3, #0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f000 813c 	beq.w	8006340 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2202      	movs	r2, #2
 80060cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a37      	ldr	r2, [pc, #220]	; (80061bc <HAL_DMA_Init+0x1b8>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d04a      	beq.n	8006178 <HAL_DMA_Init+0x174>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a36      	ldr	r2, [pc, #216]	; (80061c0 <HAL_DMA_Init+0x1bc>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d045      	beq.n	8006178 <HAL_DMA_Init+0x174>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a34      	ldr	r2, [pc, #208]	; (80061c4 <HAL_DMA_Init+0x1c0>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d040      	beq.n	8006178 <HAL_DMA_Init+0x174>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a33      	ldr	r2, [pc, #204]	; (80061c8 <HAL_DMA_Init+0x1c4>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d03b      	beq.n	8006178 <HAL_DMA_Init+0x174>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a31      	ldr	r2, [pc, #196]	; (80061cc <HAL_DMA_Init+0x1c8>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d036      	beq.n	8006178 <HAL_DMA_Init+0x174>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a30      	ldr	r2, [pc, #192]	; (80061d0 <HAL_DMA_Init+0x1cc>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d031      	beq.n	8006178 <HAL_DMA_Init+0x174>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a2e      	ldr	r2, [pc, #184]	; (80061d4 <HAL_DMA_Init+0x1d0>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d02c      	beq.n	8006178 <HAL_DMA_Init+0x174>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a2d      	ldr	r2, [pc, #180]	; (80061d8 <HAL_DMA_Init+0x1d4>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d027      	beq.n	8006178 <HAL_DMA_Init+0x174>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a2b      	ldr	r2, [pc, #172]	; (80061dc <HAL_DMA_Init+0x1d8>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d022      	beq.n	8006178 <HAL_DMA_Init+0x174>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a2a      	ldr	r2, [pc, #168]	; (80061e0 <HAL_DMA_Init+0x1dc>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d01d      	beq.n	8006178 <HAL_DMA_Init+0x174>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a28      	ldr	r2, [pc, #160]	; (80061e4 <HAL_DMA_Init+0x1e0>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d018      	beq.n	8006178 <HAL_DMA_Init+0x174>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a27      	ldr	r2, [pc, #156]	; (80061e8 <HAL_DMA_Init+0x1e4>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d013      	beq.n	8006178 <HAL_DMA_Init+0x174>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a25      	ldr	r2, [pc, #148]	; (80061ec <HAL_DMA_Init+0x1e8>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d00e      	beq.n	8006178 <HAL_DMA_Init+0x174>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a24      	ldr	r2, [pc, #144]	; (80061f0 <HAL_DMA_Init+0x1ec>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d009      	beq.n	8006178 <HAL_DMA_Init+0x174>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a22      	ldr	r2, [pc, #136]	; (80061f4 <HAL_DMA_Init+0x1f0>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d004      	beq.n	8006178 <HAL_DMA_Init+0x174>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a21      	ldr	r2, [pc, #132]	; (80061f8 <HAL_DMA_Init+0x1f4>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d108      	bne.n	800618a <HAL_DMA_Init+0x186>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f022 0201 	bic.w	r2, r2, #1
 8006186:	601a      	str	r2, [r3, #0]
 8006188:	e007      	b.n	800619a <HAL_DMA_Init+0x196>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f022 0201 	bic.w	r2, r2, #1
 8006198:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800619a:	e02f      	b.n	80061fc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800619c:	f7ff fde4 	bl	8005d68 <HAL_GetTick>
 80061a0:	4602      	mov	r2, r0
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	2b05      	cmp	r3, #5
 80061a8:	d928      	bls.n	80061fc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2220      	movs	r2, #32
 80061ae:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2203      	movs	r2, #3
 80061b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e242      	b.n	8006642 <HAL_DMA_Init+0x63e>
 80061bc:	40020010 	.word	0x40020010
 80061c0:	40020028 	.word	0x40020028
 80061c4:	40020040 	.word	0x40020040
 80061c8:	40020058 	.word	0x40020058
 80061cc:	40020070 	.word	0x40020070
 80061d0:	40020088 	.word	0x40020088
 80061d4:	400200a0 	.word	0x400200a0
 80061d8:	400200b8 	.word	0x400200b8
 80061dc:	40020410 	.word	0x40020410
 80061e0:	40020428 	.word	0x40020428
 80061e4:	40020440 	.word	0x40020440
 80061e8:	40020458 	.word	0x40020458
 80061ec:	40020470 	.word	0x40020470
 80061f0:	40020488 	.word	0x40020488
 80061f4:	400204a0 	.word	0x400204a0
 80061f8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0301 	and.w	r3, r3, #1
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1c8      	bne.n	800619c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	4b83      	ldr	r3, [pc, #524]	; (8006424 <HAL_DMA_Init+0x420>)
 8006216:	4013      	ands	r3, r2
 8006218:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006222:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800622e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800623a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a1b      	ldr	r3, [r3, #32]
 8006240:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006242:	697a      	ldr	r2, [r7, #20]
 8006244:	4313      	orrs	r3, r2
 8006246:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624c:	2b04      	cmp	r3, #4
 800624e:	d107      	bne.n	8006260 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006258:	4313      	orrs	r3, r2
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	4313      	orrs	r3, r2
 800625e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	2b28      	cmp	r3, #40	; 0x28
 8006266:	d903      	bls.n	8006270 <HAL_DMA_Init+0x26c>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	2b2e      	cmp	r3, #46	; 0x2e
 800626e:	d91f      	bls.n	80062b0 <HAL_DMA_Init+0x2ac>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	2b3e      	cmp	r3, #62	; 0x3e
 8006276:	d903      	bls.n	8006280 <HAL_DMA_Init+0x27c>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	2b42      	cmp	r3, #66	; 0x42
 800627e:	d917      	bls.n	80062b0 <HAL_DMA_Init+0x2ac>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	2b46      	cmp	r3, #70	; 0x46
 8006286:	d903      	bls.n	8006290 <HAL_DMA_Init+0x28c>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	2b48      	cmp	r3, #72	; 0x48
 800628e:	d90f      	bls.n	80062b0 <HAL_DMA_Init+0x2ac>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	2b4e      	cmp	r3, #78	; 0x4e
 8006296:	d903      	bls.n	80062a0 <HAL_DMA_Init+0x29c>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	2b52      	cmp	r3, #82	; 0x52
 800629e:	d907      	bls.n	80062b0 <HAL_DMA_Init+0x2ac>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	2b73      	cmp	r3, #115	; 0x73
 80062a6:	d905      	bls.n	80062b4 <HAL_DMA_Init+0x2b0>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	2b77      	cmp	r3, #119	; 0x77
 80062ae:	d801      	bhi.n	80062b4 <HAL_DMA_Init+0x2b0>
 80062b0:	2301      	movs	r3, #1
 80062b2:	e000      	b.n	80062b6 <HAL_DMA_Init+0x2b2>
 80062b4:	2300      	movs	r3, #0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d003      	beq.n	80062c2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062c0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	695b      	ldr	r3, [r3, #20]
 80062d0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	f023 0307 	bic.w	r3, r3, #7
 80062d8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e8:	2b04      	cmp	r3, #4
 80062ea:	d117      	bne.n	800631c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f0:	697a      	ldr	r2, [r7, #20]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00e      	beq.n	800631c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f002 fce4 	bl	8008ccc <DMA_CheckFifoParam>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d008      	beq.n	800631c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2240      	movs	r2, #64	; 0x40
 800630e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e192      	b.n	8006642 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	697a      	ldr	r2, [r7, #20]
 8006322:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f002 fc1f 	bl	8008b68 <DMA_CalcBaseAndBitshift>
 800632a:	4603      	mov	r3, r0
 800632c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006332:	f003 031f 	and.w	r3, r3, #31
 8006336:	223f      	movs	r2, #63	; 0x3f
 8006338:	409a      	lsls	r2, r3
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	609a      	str	r2, [r3, #8]
 800633e:	e0c8      	b.n	80064d2 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a38      	ldr	r2, [pc, #224]	; (8006428 <HAL_DMA_Init+0x424>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d022      	beq.n	8006390 <HAL_DMA_Init+0x38c>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a37      	ldr	r2, [pc, #220]	; (800642c <HAL_DMA_Init+0x428>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d01d      	beq.n	8006390 <HAL_DMA_Init+0x38c>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a35      	ldr	r2, [pc, #212]	; (8006430 <HAL_DMA_Init+0x42c>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d018      	beq.n	8006390 <HAL_DMA_Init+0x38c>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a34      	ldr	r2, [pc, #208]	; (8006434 <HAL_DMA_Init+0x430>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d013      	beq.n	8006390 <HAL_DMA_Init+0x38c>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a32      	ldr	r2, [pc, #200]	; (8006438 <HAL_DMA_Init+0x434>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d00e      	beq.n	8006390 <HAL_DMA_Init+0x38c>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a31      	ldr	r2, [pc, #196]	; (800643c <HAL_DMA_Init+0x438>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d009      	beq.n	8006390 <HAL_DMA_Init+0x38c>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a2f      	ldr	r2, [pc, #188]	; (8006440 <HAL_DMA_Init+0x43c>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d004      	beq.n	8006390 <HAL_DMA_Init+0x38c>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a2e      	ldr	r2, [pc, #184]	; (8006444 <HAL_DMA_Init+0x440>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d101      	bne.n	8006394 <HAL_DMA_Init+0x390>
 8006390:	2301      	movs	r3, #1
 8006392:	e000      	b.n	8006396 <HAL_DMA_Init+0x392>
 8006394:	2300      	movs	r3, #0
 8006396:	2b00      	cmp	r3, #0
 8006398:	f000 8092 	beq.w	80064c0 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a21      	ldr	r2, [pc, #132]	; (8006428 <HAL_DMA_Init+0x424>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d021      	beq.n	80063ea <HAL_DMA_Init+0x3e6>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a20      	ldr	r2, [pc, #128]	; (800642c <HAL_DMA_Init+0x428>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d01c      	beq.n	80063ea <HAL_DMA_Init+0x3e6>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a1e      	ldr	r2, [pc, #120]	; (8006430 <HAL_DMA_Init+0x42c>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d017      	beq.n	80063ea <HAL_DMA_Init+0x3e6>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a1d      	ldr	r2, [pc, #116]	; (8006434 <HAL_DMA_Init+0x430>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d012      	beq.n	80063ea <HAL_DMA_Init+0x3e6>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a1b      	ldr	r2, [pc, #108]	; (8006438 <HAL_DMA_Init+0x434>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d00d      	beq.n	80063ea <HAL_DMA_Init+0x3e6>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a1a      	ldr	r2, [pc, #104]	; (800643c <HAL_DMA_Init+0x438>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d008      	beq.n	80063ea <HAL_DMA_Init+0x3e6>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a18      	ldr	r2, [pc, #96]	; (8006440 <HAL_DMA_Init+0x43c>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d003      	beq.n	80063ea <HAL_DMA_Init+0x3e6>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a17      	ldr	r2, [pc, #92]	; (8006444 <HAL_DMA_Init+0x440>)
 80063e8:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2202      	movs	r2, #2
 80063ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	4b10      	ldr	r3, [pc, #64]	; (8006448 <HAL_DMA_Init+0x444>)
 8006406:	4013      	ands	r3, r2
 8006408:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	2b40      	cmp	r3, #64	; 0x40
 8006410:	d01c      	beq.n	800644c <HAL_DMA_Init+0x448>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	2b80      	cmp	r3, #128	; 0x80
 8006418:	d102      	bne.n	8006420 <HAL_DMA_Init+0x41c>
 800641a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800641e:	e016      	b.n	800644e <HAL_DMA_Init+0x44a>
 8006420:	2300      	movs	r3, #0
 8006422:	e014      	b.n	800644e <HAL_DMA_Init+0x44a>
 8006424:	fe10803f 	.word	0xfe10803f
 8006428:	58025408 	.word	0x58025408
 800642c:	5802541c 	.word	0x5802541c
 8006430:	58025430 	.word	0x58025430
 8006434:	58025444 	.word	0x58025444
 8006438:	58025458 	.word	0x58025458
 800643c:	5802546c 	.word	0x5802546c
 8006440:	58025480 	.word	0x58025480
 8006444:	58025494 	.word	0x58025494
 8006448:	fffe000f 	.word	0xfffe000f
 800644c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	68d2      	ldr	r2, [r2, #12]
 8006452:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006454:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800645c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006464:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800646c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	69db      	ldr	r3, [r3, #28]
 8006472:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006474:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a1b      	ldr	r3, [r3, #32]
 800647a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800647c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	4313      	orrs	r3, r2
 8006482:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	697a      	ldr	r2, [r7, #20]
 800648a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	461a      	mov	r2, r3
 8006492:	4b6e      	ldr	r3, [pc, #440]	; (800664c <HAL_DMA_Init+0x648>)
 8006494:	4413      	add	r3, r2
 8006496:	4a6e      	ldr	r2, [pc, #440]	; (8006650 <HAL_DMA_Init+0x64c>)
 8006498:	fba2 2303 	umull	r2, r3, r2, r3
 800649c:	091b      	lsrs	r3, r3, #4
 800649e:	009a      	lsls	r2, r3, #2
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f002 fb5f 	bl	8008b68 <DMA_CalcBaseAndBitshift>
 80064aa:	4603      	mov	r3, r0
 80064ac:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064b2:	f003 031f 	and.w	r3, r3, #31
 80064b6:	2201      	movs	r2, #1
 80064b8:	409a      	lsls	r2, r3
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	605a      	str	r2, [r3, #4]
 80064be:	e008      	b.n	80064d2 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2240      	movs	r2, #64	; 0x40
 80064c4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2203      	movs	r2, #3
 80064ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e0b7      	b.n	8006642 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a5f      	ldr	r2, [pc, #380]	; (8006654 <HAL_DMA_Init+0x650>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d072      	beq.n	80065c2 <HAL_DMA_Init+0x5be>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a5d      	ldr	r2, [pc, #372]	; (8006658 <HAL_DMA_Init+0x654>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d06d      	beq.n	80065c2 <HAL_DMA_Init+0x5be>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a5c      	ldr	r2, [pc, #368]	; (800665c <HAL_DMA_Init+0x658>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d068      	beq.n	80065c2 <HAL_DMA_Init+0x5be>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a5a      	ldr	r2, [pc, #360]	; (8006660 <HAL_DMA_Init+0x65c>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d063      	beq.n	80065c2 <HAL_DMA_Init+0x5be>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a59      	ldr	r2, [pc, #356]	; (8006664 <HAL_DMA_Init+0x660>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d05e      	beq.n	80065c2 <HAL_DMA_Init+0x5be>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a57      	ldr	r2, [pc, #348]	; (8006668 <HAL_DMA_Init+0x664>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d059      	beq.n	80065c2 <HAL_DMA_Init+0x5be>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a56      	ldr	r2, [pc, #344]	; (800666c <HAL_DMA_Init+0x668>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d054      	beq.n	80065c2 <HAL_DMA_Init+0x5be>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a54      	ldr	r2, [pc, #336]	; (8006670 <HAL_DMA_Init+0x66c>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d04f      	beq.n	80065c2 <HAL_DMA_Init+0x5be>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a53      	ldr	r2, [pc, #332]	; (8006674 <HAL_DMA_Init+0x670>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d04a      	beq.n	80065c2 <HAL_DMA_Init+0x5be>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a51      	ldr	r2, [pc, #324]	; (8006678 <HAL_DMA_Init+0x674>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d045      	beq.n	80065c2 <HAL_DMA_Init+0x5be>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a50      	ldr	r2, [pc, #320]	; (800667c <HAL_DMA_Init+0x678>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d040      	beq.n	80065c2 <HAL_DMA_Init+0x5be>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a4e      	ldr	r2, [pc, #312]	; (8006680 <HAL_DMA_Init+0x67c>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d03b      	beq.n	80065c2 <HAL_DMA_Init+0x5be>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a4d      	ldr	r2, [pc, #308]	; (8006684 <HAL_DMA_Init+0x680>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d036      	beq.n	80065c2 <HAL_DMA_Init+0x5be>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a4b      	ldr	r2, [pc, #300]	; (8006688 <HAL_DMA_Init+0x684>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d031      	beq.n	80065c2 <HAL_DMA_Init+0x5be>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a4a      	ldr	r2, [pc, #296]	; (800668c <HAL_DMA_Init+0x688>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d02c      	beq.n	80065c2 <HAL_DMA_Init+0x5be>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a48      	ldr	r2, [pc, #288]	; (8006690 <HAL_DMA_Init+0x68c>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d027      	beq.n	80065c2 <HAL_DMA_Init+0x5be>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a47      	ldr	r2, [pc, #284]	; (8006694 <HAL_DMA_Init+0x690>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d022      	beq.n	80065c2 <HAL_DMA_Init+0x5be>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a45      	ldr	r2, [pc, #276]	; (8006698 <HAL_DMA_Init+0x694>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d01d      	beq.n	80065c2 <HAL_DMA_Init+0x5be>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a44      	ldr	r2, [pc, #272]	; (800669c <HAL_DMA_Init+0x698>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d018      	beq.n	80065c2 <HAL_DMA_Init+0x5be>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a42      	ldr	r2, [pc, #264]	; (80066a0 <HAL_DMA_Init+0x69c>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d013      	beq.n	80065c2 <HAL_DMA_Init+0x5be>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a41      	ldr	r2, [pc, #260]	; (80066a4 <HAL_DMA_Init+0x6a0>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d00e      	beq.n	80065c2 <HAL_DMA_Init+0x5be>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a3f      	ldr	r2, [pc, #252]	; (80066a8 <HAL_DMA_Init+0x6a4>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d009      	beq.n	80065c2 <HAL_DMA_Init+0x5be>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a3e      	ldr	r2, [pc, #248]	; (80066ac <HAL_DMA_Init+0x6a8>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d004      	beq.n	80065c2 <HAL_DMA_Init+0x5be>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a3c      	ldr	r2, [pc, #240]	; (80066b0 <HAL_DMA_Init+0x6ac>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d101      	bne.n	80065c6 <HAL_DMA_Init+0x5c2>
 80065c2:	2301      	movs	r3, #1
 80065c4:	e000      	b.n	80065c8 <HAL_DMA_Init+0x5c4>
 80065c6:	2300      	movs	r3, #0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d032      	beq.n	8006632 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f002 fbf9 	bl	8008dc4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	2b80      	cmp	r3, #128	; 0x80
 80065d8:	d102      	bne.n	80065e0 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685a      	ldr	r2, [r3, #4]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065e8:	b2d2      	uxtb	r2, r2
 80065ea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80065f4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d010      	beq.n	8006620 <HAL_DMA_Init+0x61c>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	2b08      	cmp	r3, #8
 8006604:	d80c      	bhi.n	8006620 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f002 fc76 	bl	8008ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006610:	2200      	movs	r2, #0
 8006612:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800661c:	605a      	str	r2, [r3, #4]
 800661e:	e008      	b.n	8006632 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3718      	adds	r7, #24
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	a7fdabf8 	.word	0xa7fdabf8
 8006650:	cccccccd 	.word	0xcccccccd
 8006654:	40020010 	.word	0x40020010
 8006658:	40020028 	.word	0x40020028
 800665c:	40020040 	.word	0x40020040
 8006660:	40020058 	.word	0x40020058
 8006664:	40020070 	.word	0x40020070
 8006668:	40020088 	.word	0x40020088
 800666c:	400200a0 	.word	0x400200a0
 8006670:	400200b8 	.word	0x400200b8
 8006674:	40020410 	.word	0x40020410
 8006678:	40020428 	.word	0x40020428
 800667c:	40020440 	.word	0x40020440
 8006680:	40020458 	.word	0x40020458
 8006684:	40020470 	.word	0x40020470
 8006688:	40020488 	.word	0x40020488
 800668c:	400204a0 	.word	0x400204a0
 8006690:	400204b8 	.word	0x400204b8
 8006694:	58025408 	.word	0x58025408
 8006698:	5802541c 	.word	0x5802541c
 800669c:	58025430 	.word	0x58025430
 80066a0:	58025444 	.word	0x58025444
 80066a4:	58025458 	.word	0x58025458
 80066a8:	5802546c 	.word	0x5802546c
 80066ac:	58025480 	.word	0x58025480
 80066b0:	58025494 	.word	0x58025494

080066b4 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d101      	bne.n	80066c6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e1a8      	b.n	8006a18 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a82      	ldr	r2, [pc, #520]	; (80068d4 <HAL_DMA_DeInit+0x220>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d04a      	beq.n	8006766 <HAL_DMA_DeInit+0xb2>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a80      	ldr	r2, [pc, #512]	; (80068d8 <HAL_DMA_DeInit+0x224>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d045      	beq.n	8006766 <HAL_DMA_DeInit+0xb2>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a7f      	ldr	r2, [pc, #508]	; (80068dc <HAL_DMA_DeInit+0x228>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d040      	beq.n	8006766 <HAL_DMA_DeInit+0xb2>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a7d      	ldr	r2, [pc, #500]	; (80068e0 <HAL_DMA_DeInit+0x22c>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d03b      	beq.n	8006766 <HAL_DMA_DeInit+0xb2>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a7c      	ldr	r2, [pc, #496]	; (80068e4 <HAL_DMA_DeInit+0x230>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d036      	beq.n	8006766 <HAL_DMA_DeInit+0xb2>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a7a      	ldr	r2, [pc, #488]	; (80068e8 <HAL_DMA_DeInit+0x234>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d031      	beq.n	8006766 <HAL_DMA_DeInit+0xb2>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a79      	ldr	r2, [pc, #484]	; (80068ec <HAL_DMA_DeInit+0x238>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d02c      	beq.n	8006766 <HAL_DMA_DeInit+0xb2>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a77      	ldr	r2, [pc, #476]	; (80068f0 <HAL_DMA_DeInit+0x23c>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d027      	beq.n	8006766 <HAL_DMA_DeInit+0xb2>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a76      	ldr	r2, [pc, #472]	; (80068f4 <HAL_DMA_DeInit+0x240>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d022      	beq.n	8006766 <HAL_DMA_DeInit+0xb2>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a74      	ldr	r2, [pc, #464]	; (80068f8 <HAL_DMA_DeInit+0x244>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d01d      	beq.n	8006766 <HAL_DMA_DeInit+0xb2>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a73      	ldr	r2, [pc, #460]	; (80068fc <HAL_DMA_DeInit+0x248>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d018      	beq.n	8006766 <HAL_DMA_DeInit+0xb2>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a71      	ldr	r2, [pc, #452]	; (8006900 <HAL_DMA_DeInit+0x24c>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d013      	beq.n	8006766 <HAL_DMA_DeInit+0xb2>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a70      	ldr	r2, [pc, #448]	; (8006904 <HAL_DMA_DeInit+0x250>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d00e      	beq.n	8006766 <HAL_DMA_DeInit+0xb2>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a6e      	ldr	r2, [pc, #440]	; (8006908 <HAL_DMA_DeInit+0x254>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d009      	beq.n	8006766 <HAL_DMA_DeInit+0xb2>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a6d      	ldr	r2, [pc, #436]	; (800690c <HAL_DMA_DeInit+0x258>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d004      	beq.n	8006766 <HAL_DMA_DeInit+0xb2>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a6b      	ldr	r2, [pc, #428]	; (8006910 <HAL_DMA_DeInit+0x25c>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d108      	bne.n	8006778 <HAL_DMA_DeInit+0xc4>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f022 0201 	bic.w	r2, r2, #1
 8006774:	601a      	str	r2, [r3, #0]
 8006776:	e007      	b.n	8006788 <HAL_DMA_DeInit+0xd4>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f022 0201 	bic.w	r2, r2, #1
 8006786:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a51      	ldr	r2, [pc, #324]	; (80068d4 <HAL_DMA_DeInit+0x220>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d04a      	beq.n	8006828 <HAL_DMA_DeInit+0x174>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a50      	ldr	r2, [pc, #320]	; (80068d8 <HAL_DMA_DeInit+0x224>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d045      	beq.n	8006828 <HAL_DMA_DeInit+0x174>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a4e      	ldr	r2, [pc, #312]	; (80068dc <HAL_DMA_DeInit+0x228>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d040      	beq.n	8006828 <HAL_DMA_DeInit+0x174>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a4d      	ldr	r2, [pc, #308]	; (80068e0 <HAL_DMA_DeInit+0x22c>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d03b      	beq.n	8006828 <HAL_DMA_DeInit+0x174>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a4b      	ldr	r2, [pc, #300]	; (80068e4 <HAL_DMA_DeInit+0x230>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d036      	beq.n	8006828 <HAL_DMA_DeInit+0x174>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a4a      	ldr	r2, [pc, #296]	; (80068e8 <HAL_DMA_DeInit+0x234>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d031      	beq.n	8006828 <HAL_DMA_DeInit+0x174>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a48      	ldr	r2, [pc, #288]	; (80068ec <HAL_DMA_DeInit+0x238>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d02c      	beq.n	8006828 <HAL_DMA_DeInit+0x174>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a47      	ldr	r2, [pc, #284]	; (80068f0 <HAL_DMA_DeInit+0x23c>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d027      	beq.n	8006828 <HAL_DMA_DeInit+0x174>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a45      	ldr	r2, [pc, #276]	; (80068f4 <HAL_DMA_DeInit+0x240>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d022      	beq.n	8006828 <HAL_DMA_DeInit+0x174>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a44      	ldr	r2, [pc, #272]	; (80068f8 <HAL_DMA_DeInit+0x244>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d01d      	beq.n	8006828 <HAL_DMA_DeInit+0x174>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a42      	ldr	r2, [pc, #264]	; (80068fc <HAL_DMA_DeInit+0x248>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d018      	beq.n	8006828 <HAL_DMA_DeInit+0x174>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a41      	ldr	r2, [pc, #260]	; (8006900 <HAL_DMA_DeInit+0x24c>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d013      	beq.n	8006828 <HAL_DMA_DeInit+0x174>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a3f      	ldr	r2, [pc, #252]	; (8006904 <HAL_DMA_DeInit+0x250>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d00e      	beq.n	8006828 <HAL_DMA_DeInit+0x174>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a3e      	ldr	r2, [pc, #248]	; (8006908 <HAL_DMA_DeInit+0x254>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d009      	beq.n	8006828 <HAL_DMA_DeInit+0x174>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a3c      	ldr	r2, [pc, #240]	; (800690c <HAL_DMA_DeInit+0x258>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d004      	beq.n	8006828 <HAL_DMA_DeInit+0x174>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a3b      	ldr	r2, [pc, #236]	; (8006910 <HAL_DMA_DeInit+0x25c>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d101      	bne.n	800682c <HAL_DMA_DeInit+0x178>
 8006828:	2301      	movs	r3, #1
 800682a:	e000      	b.n	800682e <HAL_DMA_DeInit+0x17a>
 800682c:	2300      	movs	r3, #0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d025      	beq.n	800687e <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2200      	movs	r2, #0
 8006838:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2200      	movs	r2, #0
 8006840:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2200      	movs	r2, #0
 8006848:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2200      	movs	r2, #0
 8006850:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2200      	movs	r2, #0
 8006858:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2221      	movs	r2, #33	; 0x21
 8006860:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f002 f980 	bl	8008b68 <DMA_CalcBaseAndBitshift>
 8006868:	4603      	mov	r3, r0
 800686a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006870:	f003 031f 	and.w	r3, r3, #31
 8006874:	223f      	movs	r2, #63	; 0x3f
 8006876:	409a      	lsls	r2, r3
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	609a      	str	r2, [r3, #8]
 800687c:	e081      	b.n	8006982 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a24      	ldr	r2, [pc, #144]	; (8006914 <HAL_DMA_DeInit+0x260>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d022      	beq.n	80068ce <HAL_DMA_DeInit+0x21a>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a22      	ldr	r2, [pc, #136]	; (8006918 <HAL_DMA_DeInit+0x264>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d01d      	beq.n	80068ce <HAL_DMA_DeInit+0x21a>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a21      	ldr	r2, [pc, #132]	; (800691c <HAL_DMA_DeInit+0x268>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d018      	beq.n	80068ce <HAL_DMA_DeInit+0x21a>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a1f      	ldr	r2, [pc, #124]	; (8006920 <HAL_DMA_DeInit+0x26c>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d013      	beq.n	80068ce <HAL_DMA_DeInit+0x21a>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a1e      	ldr	r2, [pc, #120]	; (8006924 <HAL_DMA_DeInit+0x270>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d00e      	beq.n	80068ce <HAL_DMA_DeInit+0x21a>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a1c      	ldr	r2, [pc, #112]	; (8006928 <HAL_DMA_DeInit+0x274>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d009      	beq.n	80068ce <HAL_DMA_DeInit+0x21a>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a1b      	ldr	r2, [pc, #108]	; (800692c <HAL_DMA_DeInit+0x278>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d004      	beq.n	80068ce <HAL_DMA_DeInit+0x21a>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a19      	ldr	r2, [pc, #100]	; (8006930 <HAL_DMA_DeInit+0x27c>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d132      	bne.n	8006934 <HAL_DMA_DeInit+0x280>
 80068ce:	2301      	movs	r3, #1
 80068d0:	e031      	b.n	8006936 <HAL_DMA_DeInit+0x282>
 80068d2:	bf00      	nop
 80068d4:	40020010 	.word	0x40020010
 80068d8:	40020028 	.word	0x40020028
 80068dc:	40020040 	.word	0x40020040
 80068e0:	40020058 	.word	0x40020058
 80068e4:	40020070 	.word	0x40020070
 80068e8:	40020088 	.word	0x40020088
 80068ec:	400200a0 	.word	0x400200a0
 80068f0:	400200b8 	.word	0x400200b8
 80068f4:	40020410 	.word	0x40020410
 80068f8:	40020428 	.word	0x40020428
 80068fc:	40020440 	.word	0x40020440
 8006900:	40020458 	.word	0x40020458
 8006904:	40020470 	.word	0x40020470
 8006908:	40020488 	.word	0x40020488
 800690c:	400204a0 	.word	0x400204a0
 8006910:	400204b8 	.word	0x400204b8
 8006914:	58025408 	.word	0x58025408
 8006918:	5802541c 	.word	0x5802541c
 800691c:	58025430 	.word	0x58025430
 8006920:	58025444 	.word	0x58025444
 8006924:	58025458 	.word	0x58025458
 8006928:	5802546c 	.word	0x5802546c
 800692c:	58025480 	.word	0x58025480
 8006930:	58025494 	.word	0x58025494
 8006934:	2300      	movs	r3, #0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d021      	beq.n	800697e <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2200      	movs	r2, #0
 8006940:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2200      	movs	r2, #0
 8006948:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	2200      	movs	r2, #0
 8006950:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2200      	movs	r2, #0
 8006958:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2200      	movs	r2, #0
 8006960:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f002 f900 	bl	8008b68 <DMA_CalcBaseAndBitshift>
 8006968:	4603      	mov	r3, r0
 800696a:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006970:	f003 031f 	and.w	r3, r3, #31
 8006974:	2201      	movs	r2, #1
 8006976:	409a      	lsls	r2, r3
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	605a      	str	r2, [r3, #4]
 800697c:	e001      	b.n	8006982 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e04a      	b.n	8006a18 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f002 fa1e 	bl	8008dc4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800698c:	2b00      	cmp	r3, #0
 800698e:	d008      	beq.n	80069a2 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006994:	2200      	movs	r2, #0
 8006996:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80069a0:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00f      	beq.n	80069ca <HAL_DMA_DeInit+0x316>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	2b08      	cmp	r3, #8
 80069b0:	d80b      	bhi.n	80069ca <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f002 faa0 	bl	8008ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069bc:	2200      	movs	r2, #0
 80069be:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80069c8:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3710      	adds	r7, #16
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b086      	sub	sp, #24
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	607a      	str	r2, [r7, #4]
 8006a2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d101      	bne.n	8006a3c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e226      	b.n	8006e8a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d101      	bne.n	8006a4a <HAL_DMA_Start_IT+0x2a>
 8006a46:	2302      	movs	r3, #2
 8006a48:	e21f      	b.n	8006e8a <HAL_DMA_Start_IT+0x46a>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	f040 820a 	bne.w	8006e74 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2202      	movs	r2, #2
 8006a64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a68      	ldr	r2, [pc, #416]	; (8006c14 <HAL_DMA_Start_IT+0x1f4>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d04a      	beq.n	8006b0e <HAL_DMA_Start_IT+0xee>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a66      	ldr	r2, [pc, #408]	; (8006c18 <HAL_DMA_Start_IT+0x1f8>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d045      	beq.n	8006b0e <HAL_DMA_Start_IT+0xee>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a65      	ldr	r2, [pc, #404]	; (8006c1c <HAL_DMA_Start_IT+0x1fc>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d040      	beq.n	8006b0e <HAL_DMA_Start_IT+0xee>
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a63      	ldr	r2, [pc, #396]	; (8006c20 <HAL_DMA_Start_IT+0x200>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d03b      	beq.n	8006b0e <HAL_DMA_Start_IT+0xee>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a62      	ldr	r2, [pc, #392]	; (8006c24 <HAL_DMA_Start_IT+0x204>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d036      	beq.n	8006b0e <HAL_DMA_Start_IT+0xee>
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a60      	ldr	r2, [pc, #384]	; (8006c28 <HAL_DMA_Start_IT+0x208>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d031      	beq.n	8006b0e <HAL_DMA_Start_IT+0xee>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a5f      	ldr	r2, [pc, #380]	; (8006c2c <HAL_DMA_Start_IT+0x20c>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d02c      	beq.n	8006b0e <HAL_DMA_Start_IT+0xee>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a5d      	ldr	r2, [pc, #372]	; (8006c30 <HAL_DMA_Start_IT+0x210>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d027      	beq.n	8006b0e <HAL_DMA_Start_IT+0xee>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a5c      	ldr	r2, [pc, #368]	; (8006c34 <HAL_DMA_Start_IT+0x214>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d022      	beq.n	8006b0e <HAL_DMA_Start_IT+0xee>
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a5a      	ldr	r2, [pc, #360]	; (8006c38 <HAL_DMA_Start_IT+0x218>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d01d      	beq.n	8006b0e <HAL_DMA_Start_IT+0xee>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a59      	ldr	r2, [pc, #356]	; (8006c3c <HAL_DMA_Start_IT+0x21c>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d018      	beq.n	8006b0e <HAL_DMA_Start_IT+0xee>
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a57      	ldr	r2, [pc, #348]	; (8006c40 <HAL_DMA_Start_IT+0x220>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d013      	beq.n	8006b0e <HAL_DMA_Start_IT+0xee>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a56      	ldr	r2, [pc, #344]	; (8006c44 <HAL_DMA_Start_IT+0x224>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d00e      	beq.n	8006b0e <HAL_DMA_Start_IT+0xee>
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a54      	ldr	r2, [pc, #336]	; (8006c48 <HAL_DMA_Start_IT+0x228>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d009      	beq.n	8006b0e <HAL_DMA_Start_IT+0xee>
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a53      	ldr	r2, [pc, #332]	; (8006c4c <HAL_DMA_Start_IT+0x22c>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d004      	beq.n	8006b0e <HAL_DMA_Start_IT+0xee>
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a51      	ldr	r2, [pc, #324]	; (8006c50 <HAL_DMA_Start_IT+0x230>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d108      	bne.n	8006b20 <HAL_DMA_Start_IT+0x100>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f022 0201 	bic.w	r2, r2, #1
 8006b1c:	601a      	str	r2, [r3, #0]
 8006b1e:	e007      	b.n	8006b30 <HAL_DMA_Start_IT+0x110>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f022 0201 	bic.w	r2, r2, #1
 8006b2e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	68b9      	ldr	r1, [r7, #8]
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	f001 fe6a 	bl	8008810 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a34      	ldr	r2, [pc, #208]	; (8006c14 <HAL_DMA_Start_IT+0x1f4>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d04a      	beq.n	8006bdc <HAL_DMA_Start_IT+0x1bc>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a33      	ldr	r2, [pc, #204]	; (8006c18 <HAL_DMA_Start_IT+0x1f8>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d045      	beq.n	8006bdc <HAL_DMA_Start_IT+0x1bc>
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a31      	ldr	r2, [pc, #196]	; (8006c1c <HAL_DMA_Start_IT+0x1fc>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d040      	beq.n	8006bdc <HAL_DMA_Start_IT+0x1bc>
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a30      	ldr	r2, [pc, #192]	; (8006c20 <HAL_DMA_Start_IT+0x200>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d03b      	beq.n	8006bdc <HAL_DMA_Start_IT+0x1bc>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a2e      	ldr	r2, [pc, #184]	; (8006c24 <HAL_DMA_Start_IT+0x204>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d036      	beq.n	8006bdc <HAL_DMA_Start_IT+0x1bc>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a2d      	ldr	r2, [pc, #180]	; (8006c28 <HAL_DMA_Start_IT+0x208>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d031      	beq.n	8006bdc <HAL_DMA_Start_IT+0x1bc>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a2b      	ldr	r2, [pc, #172]	; (8006c2c <HAL_DMA_Start_IT+0x20c>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d02c      	beq.n	8006bdc <HAL_DMA_Start_IT+0x1bc>
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a2a      	ldr	r2, [pc, #168]	; (8006c30 <HAL_DMA_Start_IT+0x210>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d027      	beq.n	8006bdc <HAL_DMA_Start_IT+0x1bc>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a28      	ldr	r2, [pc, #160]	; (8006c34 <HAL_DMA_Start_IT+0x214>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d022      	beq.n	8006bdc <HAL_DMA_Start_IT+0x1bc>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a27      	ldr	r2, [pc, #156]	; (8006c38 <HAL_DMA_Start_IT+0x218>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d01d      	beq.n	8006bdc <HAL_DMA_Start_IT+0x1bc>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a25      	ldr	r2, [pc, #148]	; (8006c3c <HAL_DMA_Start_IT+0x21c>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d018      	beq.n	8006bdc <HAL_DMA_Start_IT+0x1bc>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a24      	ldr	r2, [pc, #144]	; (8006c40 <HAL_DMA_Start_IT+0x220>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d013      	beq.n	8006bdc <HAL_DMA_Start_IT+0x1bc>
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a22      	ldr	r2, [pc, #136]	; (8006c44 <HAL_DMA_Start_IT+0x224>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d00e      	beq.n	8006bdc <HAL_DMA_Start_IT+0x1bc>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a21      	ldr	r2, [pc, #132]	; (8006c48 <HAL_DMA_Start_IT+0x228>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d009      	beq.n	8006bdc <HAL_DMA_Start_IT+0x1bc>
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a1f      	ldr	r2, [pc, #124]	; (8006c4c <HAL_DMA_Start_IT+0x22c>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d004      	beq.n	8006bdc <HAL_DMA_Start_IT+0x1bc>
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a1e      	ldr	r2, [pc, #120]	; (8006c50 <HAL_DMA_Start_IT+0x230>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d101      	bne.n	8006be0 <HAL_DMA_Start_IT+0x1c0>
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e000      	b.n	8006be2 <HAL_DMA_Start_IT+0x1c2>
 8006be0:	2300      	movs	r3, #0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d036      	beq.n	8006c54 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f023 021e 	bic.w	r2, r3, #30
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f042 0216 	orr.w	r2, r2, #22
 8006bf8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d03e      	beq.n	8006c80 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f042 0208 	orr.w	r2, r2, #8
 8006c10:	601a      	str	r2, [r3, #0]
 8006c12:	e035      	b.n	8006c80 <HAL_DMA_Start_IT+0x260>
 8006c14:	40020010 	.word	0x40020010
 8006c18:	40020028 	.word	0x40020028
 8006c1c:	40020040 	.word	0x40020040
 8006c20:	40020058 	.word	0x40020058
 8006c24:	40020070 	.word	0x40020070
 8006c28:	40020088 	.word	0x40020088
 8006c2c:	400200a0 	.word	0x400200a0
 8006c30:	400200b8 	.word	0x400200b8
 8006c34:	40020410 	.word	0x40020410
 8006c38:	40020428 	.word	0x40020428
 8006c3c:	40020440 	.word	0x40020440
 8006c40:	40020458 	.word	0x40020458
 8006c44:	40020470 	.word	0x40020470
 8006c48:	40020488 	.word	0x40020488
 8006c4c:	400204a0 	.word	0x400204a0
 8006c50:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f023 020e 	bic.w	r2, r3, #14
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f042 020a 	orr.w	r2, r2, #10
 8006c66:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d007      	beq.n	8006c80 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f042 0204 	orr.w	r2, r2, #4
 8006c7e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a83      	ldr	r2, [pc, #524]	; (8006e94 <HAL_DMA_Start_IT+0x474>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d072      	beq.n	8006d70 <HAL_DMA_Start_IT+0x350>
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a82      	ldr	r2, [pc, #520]	; (8006e98 <HAL_DMA_Start_IT+0x478>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d06d      	beq.n	8006d70 <HAL_DMA_Start_IT+0x350>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a80      	ldr	r2, [pc, #512]	; (8006e9c <HAL_DMA_Start_IT+0x47c>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d068      	beq.n	8006d70 <HAL_DMA_Start_IT+0x350>
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a7f      	ldr	r2, [pc, #508]	; (8006ea0 <HAL_DMA_Start_IT+0x480>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d063      	beq.n	8006d70 <HAL_DMA_Start_IT+0x350>
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a7d      	ldr	r2, [pc, #500]	; (8006ea4 <HAL_DMA_Start_IT+0x484>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d05e      	beq.n	8006d70 <HAL_DMA_Start_IT+0x350>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a7c      	ldr	r2, [pc, #496]	; (8006ea8 <HAL_DMA_Start_IT+0x488>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d059      	beq.n	8006d70 <HAL_DMA_Start_IT+0x350>
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a7a      	ldr	r2, [pc, #488]	; (8006eac <HAL_DMA_Start_IT+0x48c>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d054      	beq.n	8006d70 <HAL_DMA_Start_IT+0x350>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a79      	ldr	r2, [pc, #484]	; (8006eb0 <HAL_DMA_Start_IT+0x490>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d04f      	beq.n	8006d70 <HAL_DMA_Start_IT+0x350>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a77      	ldr	r2, [pc, #476]	; (8006eb4 <HAL_DMA_Start_IT+0x494>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d04a      	beq.n	8006d70 <HAL_DMA_Start_IT+0x350>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a76      	ldr	r2, [pc, #472]	; (8006eb8 <HAL_DMA_Start_IT+0x498>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d045      	beq.n	8006d70 <HAL_DMA_Start_IT+0x350>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a74      	ldr	r2, [pc, #464]	; (8006ebc <HAL_DMA_Start_IT+0x49c>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d040      	beq.n	8006d70 <HAL_DMA_Start_IT+0x350>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a73      	ldr	r2, [pc, #460]	; (8006ec0 <HAL_DMA_Start_IT+0x4a0>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d03b      	beq.n	8006d70 <HAL_DMA_Start_IT+0x350>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a71      	ldr	r2, [pc, #452]	; (8006ec4 <HAL_DMA_Start_IT+0x4a4>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d036      	beq.n	8006d70 <HAL_DMA_Start_IT+0x350>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a70      	ldr	r2, [pc, #448]	; (8006ec8 <HAL_DMA_Start_IT+0x4a8>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d031      	beq.n	8006d70 <HAL_DMA_Start_IT+0x350>
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a6e      	ldr	r2, [pc, #440]	; (8006ecc <HAL_DMA_Start_IT+0x4ac>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d02c      	beq.n	8006d70 <HAL_DMA_Start_IT+0x350>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a6d      	ldr	r2, [pc, #436]	; (8006ed0 <HAL_DMA_Start_IT+0x4b0>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d027      	beq.n	8006d70 <HAL_DMA_Start_IT+0x350>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a6b      	ldr	r2, [pc, #428]	; (8006ed4 <HAL_DMA_Start_IT+0x4b4>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d022      	beq.n	8006d70 <HAL_DMA_Start_IT+0x350>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a6a      	ldr	r2, [pc, #424]	; (8006ed8 <HAL_DMA_Start_IT+0x4b8>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d01d      	beq.n	8006d70 <HAL_DMA_Start_IT+0x350>
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a68      	ldr	r2, [pc, #416]	; (8006edc <HAL_DMA_Start_IT+0x4bc>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d018      	beq.n	8006d70 <HAL_DMA_Start_IT+0x350>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a67      	ldr	r2, [pc, #412]	; (8006ee0 <HAL_DMA_Start_IT+0x4c0>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d013      	beq.n	8006d70 <HAL_DMA_Start_IT+0x350>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a65      	ldr	r2, [pc, #404]	; (8006ee4 <HAL_DMA_Start_IT+0x4c4>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d00e      	beq.n	8006d70 <HAL_DMA_Start_IT+0x350>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a64      	ldr	r2, [pc, #400]	; (8006ee8 <HAL_DMA_Start_IT+0x4c8>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d009      	beq.n	8006d70 <HAL_DMA_Start_IT+0x350>
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a62      	ldr	r2, [pc, #392]	; (8006eec <HAL_DMA_Start_IT+0x4cc>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d004      	beq.n	8006d70 <HAL_DMA_Start_IT+0x350>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a61      	ldr	r2, [pc, #388]	; (8006ef0 <HAL_DMA_Start_IT+0x4d0>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d101      	bne.n	8006d74 <HAL_DMA_Start_IT+0x354>
 8006d70:	2301      	movs	r3, #1
 8006d72:	e000      	b.n	8006d76 <HAL_DMA_Start_IT+0x356>
 8006d74:	2300      	movs	r3, #0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d01a      	beq.n	8006db0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d007      	beq.n	8006d98 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d96:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d007      	beq.n	8006db0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006daa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006dae:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a37      	ldr	r2, [pc, #220]	; (8006e94 <HAL_DMA_Start_IT+0x474>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d04a      	beq.n	8006e50 <HAL_DMA_Start_IT+0x430>
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a36      	ldr	r2, [pc, #216]	; (8006e98 <HAL_DMA_Start_IT+0x478>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d045      	beq.n	8006e50 <HAL_DMA_Start_IT+0x430>
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a34      	ldr	r2, [pc, #208]	; (8006e9c <HAL_DMA_Start_IT+0x47c>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d040      	beq.n	8006e50 <HAL_DMA_Start_IT+0x430>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a33      	ldr	r2, [pc, #204]	; (8006ea0 <HAL_DMA_Start_IT+0x480>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d03b      	beq.n	8006e50 <HAL_DMA_Start_IT+0x430>
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a31      	ldr	r2, [pc, #196]	; (8006ea4 <HAL_DMA_Start_IT+0x484>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d036      	beq.n	8006e50 <HAL_DMA_Start_IT+0x430>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a30      	ldr	r2, [pc, #192]	; (8006ea8 <HAL_DMA_Start_IT+0x488>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d031      	beq.n	8006e50 <HAL_DMA_Start_IT+0x430>
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a2e      	ldr	r2, [pc, #184]	; (8006eac <HAL_DMA_Start_IT+0x48c>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d02c      	beq.n	8006e50 <HAL_DMA_Start_IT+0x430>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a2d      	ldr	r2, [pc, #180]	; (8006eb0 <HAL_DMA_Start_IT+0x490>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d027      	beq.n	8006e50 <HAL_DMA_Start_IT+0x430>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a2b      	ldr	r2, [pc, #172]	; (8006eb4 <HAL_DMA_Start_IT+0x494>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d022      	beq.n	8006e50 <HAL_DMA_Start_IT+0x430>
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a2a      	ldr	r2, [pc, #168]	; (8006eb8 <HAL_DMA_Start_IT+0x498>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d01d      	beq.n	8006e50 <HAL_DMA_Start_IT+0x430>
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a28      	ldr	r2, [pc, #160]	; (8006ebc <HAL_DMA_Start_IT+0x49c>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d018      	beq.n	8006e50 <HAL_DMA_Start_IT+0x430>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a27      	ldr	r2, [pc, #156]	; (8006ec0 <HAL_DMA_Start_IT+0x4a0>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d013      	beq.n	8006e50 <HAL_DMA_Start_IT+0x430>
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a25      	ldr	r2, [pc, #148]	; (8006ec4 <HAL_DMA_Start_IT+0x4a4>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d00e      	beq.n	8006e50 <HAL_DMA_Start_IT+0x430>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a24      	ldr	r2, [pc, #144]	; (8006ec8 <HAL_DMA_Start_IT+0x4a8>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d009      	beq.n	8006e50 <HAL_DMA_Start_IT+0x430>
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a22      	ldr	r2, [pc, #136]	; (8006ecc <HAL_DMA_Start_IT+0x4ac>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d004      	beq.n	8006e50 <HAL_DMA_Start_IT+0x430>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a21      	ldr	r2, [pc, #132]	; (8006ed0 <HAL_DMA_Start_IT+0x4b0>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d108      	bne.n	8006e62 <HAL_DMA_Start_IT+0x442>
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f042 0201 	orr.w	r2, r2, #1
 8006e5e:	601a      	str	r2, [r3, #0]
 8006e60:	e012      	b.n	8006e88 <HAL_DMA_Start_IT+0x468>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f042 0201 	orr.w	r2, r2, #1
 8006e70:	601a      	str	r2, [r3, #0]
 8006e72:	e009      	b.n	8006e88 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e7a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3718      	adds	r7, #24
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	40020010 	.word	0x40020010
 8006e98:	40020028 	.word	0x40020028
 8006e9c:	40020040 	.word	0x40020040
 8006ea0:	40020058 	.word	0x40020058
 8006ea4:	40020070 	.word	0x40020070
 8006ea8:	40020088 	.word	0x40020088
 8006eac:	400200a0 	.word	0x400200a0
 8006eb0:	400200b8 	.word	0x400200b8
 8006eb4:	40020410 	.word	0x40020410
 8006eb8:	40020428 	.word	0x40020428
 8006ebc:	40020440 	.word	0x40020440
 8006ec0:	40020458 	.word	0x40020458
 8006ec4:	40020470 	.word	0x40020470
 8006ec8:	40020488 	.word	0x40020488
 8006ecc:	400204a0 	.word	0x400204a0
 8006ed0:	400204b8 	.word	0x400204b8
 8006ed4:	58025408 	.word	0x58025408
 8006ed8:	5802541c 	.word	0x5802541c
 8006edc:	58025430 	.word	0x58025430
 8006ee0:	58025444 	.word	0x58025444
 8006ee4:	58025458 	.word	0x58025458
 8006ee8:	5802546c 	.word	0x5802546c
 8006eec:	58025480 	.word	0x58025480
 8006ef0:	58025494 	.word	0x58025494

08006ef4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b086      	sub	sp, #24
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006efc:	f7fe ff34 	bl	8005d68 <HAL_GetTick>
 8006f00:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d101      	bne.n	8006f0c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e2dc      	b.n	80074c6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	d008      	beq.n	8006f2a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2280      	movs	r2, #128	; 0x80
 8006f1c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e2cd      	b.n	80074c6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a76      	ldr	r2, [pc, #472]	; (8007108 <HAL_DMA_Abort+0x214>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d04a      	beq.n	8006fca <HAL_DMA_Abort+0xd6>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a74      	ldr	r2, [pc, #464]	; (800710c <HAL_DMA_Abort+0x218>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d045      	beq.n	8006fca <HAL_DMA_Abort+0xd6>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a73      	ldr	r2, [pc, #460]	; (8007110 <HAL_DMA_Abort+0x21c>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d040      	beq.n	8006fca <HAL_DMA_Abort+0xd6>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a71      	ldr	r2, [pc, #452]	; (8007114 <HAL_DMA_Abort+0x220>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d03b      	beq.n	8006fca <HAL_DMA_Abort+0xd6>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a70      	ldr	r2, [pc, #448]	; (8007118 <HAL_DMA_Abort+0x224>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d036      	beq.n	8006fca <HAL_DMA_Abort+0xd6>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a6e      	ldr	r2, [pc, #440]	; (800711c <HAL_DMA_Abort+0x228>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d031      	beq.n	8006fca <HAL_DMA_Abort+0xd6>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a6d      	ldr	r2, [pc, #436]	; (8007120 <HAL_DMA_Abort+0x22c>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d02c      	beq.n	8006fca <HAL_DMA_Abort+0xd6>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a6b      	ldr	r2, [pc, #428]	; (8007124 <HAL_DMA_Abort+0x230>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d027      	beq.n	8006fca <HAL_DMA_Abort+0xd6>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a6a      	ldr	r2, [pc, #424]	; (8007128 <HAL_DMA_Abort+0x234>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d022      	beq.n	8006fca <HAL_DMA_Abort+0xd6>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a68      	ldr	r2, [pc, #416]	; (800712c <HAL_DMA_Abort+0x238>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d01d      	beq.n	8006fca <HAL_DMA_Abort+0xd6>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a67      	ldr	r2, [pc, #412]	; (8007130 <HAL_DMA_Abort+0x23c>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d018      	beq.n	8006fca <HAL_DMA_Abort+0xd6>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a65      	ldr	r2, [pc, #404]	; (8007134 <HAL_DMA_Abort+0x240>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d013      	beq.n	8006fca <HAL_DMA_Abort+0xd6>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a64      	ldr	r2, [pc, #400]	; (8007138 <HAL_DMA_Abort+0x244>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d00e      	beq.n	8006fca <HAL_DMA_Abort+0xd6>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a62      	ldr	r2, [pc, #392]	; (800713c <HAL_DMA_Abort+0x248>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d009      	beq.n	8006fca <HAL_DMA_Abort+0xd6>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a61      	ldr	r2, [pc, #388]	; (8007140 <HAL_DMA_Abort+0x24c>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d004      	beq.n	8006fca <HAL_DMA_Abort+0xd6>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a5f      	ldr	r2, [pc, #380]	; (8007144 <HAL_DMA_Abort+0x250>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d101      	bne.n	8006fce <HAL_DMA_Abort+0xda>
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e000      	b.n	8006fd0 <HAL_DMA_Abort+0xdc>
 8006fce:	2300      	movs	r3, #0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d013      	beq.n	8006ffc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f022 021e 	bic.w	r2, r2, #30
 8006fe2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	695a      	ldr	r2, [r3, #20]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ff2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	617b      	str	r3, [r7, #20]
 8006ffa:	e00a      	b.n	8007012 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f022 020e 	bic.w	r2, r2, #14
 800700a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a3c      	ldr	r2, [pc, #240]	; (8007108 <HAL_DMA_Abort+0x214>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d072      	beq.n	8007102 <HAL_DMA_Abort+0x20e>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a3a      	ldr	r2, [pc, #232]	; (800710c <HAL_DMA_Abort+0x218>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d06d      	beq.n	8007102 <HAL_DMA_Abort+0x20e>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a39      	ldr	r2, [pc, #228]	; (8007110 <HAL_DMA_Abort+0x21c>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d068      	beq.n	8007102 <HAL_DMA_Abort+0x20e>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a37      	ldr	r2, [pc, #220]	; (8007114 <HAL_DMA_Abort+0x220>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d063      	beq.n	8007102 <HAL_DMA_Abort+0x20e>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a36      	ldr	r2, [pc, #216]	; (8007118 <HAL_DMA_Abort+0x224>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d05e      	beq.n	8007102 <HAL_DMA_Abort+0x20e>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a34      	ldr	r2, [pc, #208]	; (800711c <HAL_DMA_Abort+0x228>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d059      	beq.n	8007102 <HAL_DMA_Abort+0x20e>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a33      	ldr	r2, [pc, #204]	; (8007120 <HAL_DMA_Abort+0x22c>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d054      	beq.n	8007102 <HAL_DMA_Abort+0x20e>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a31      	ldr	r2, [pc, #196]	; (8007124 <HAL_DMA_Abort+0x230>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d04f      	beq.n	8007102 <HAL_DMA_Abort+0x20e>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a30      	ldr	r2, [pc, #192]	; (8007128 <HAL_DMA_Abort+0x234>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d04a      	beq.n	8007102 <HAL_DMA_Abort+0x20e>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a2e      	ldr	r2, [pc, #184]	; (800712c <HAL_DMA_Abort+0x238>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d045      	beq.n	8007102 <HAL_DMA_Abort+0x20e>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a2d      	ldr	r2, [pc, #180]	; (8007130 <HAL_DMA_Abort+0x23c>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d040      	beq.n	8007102 <HAL_DMA_Abort+0x20e>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a2b      	ldr	r2, [pc, #172]	; (8007134 <HAL_DMA_Abort+0x240>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d03b      	beq.n	8007102 <HAL_DMA_Abort+0x20e>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a2a      	ldr	r2, [pc, #168]	; (8007138 <HAL_DMA_Abort+0x244>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d036      	beq.n	8007102 <HAL_DMA_Abort+0x20e>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a28      	ldr	r2, [pc, #160]	; (800713c <HAL_DMA_Abort+0x248>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d031      	beq.n	8007102 <HAL_DMA_Abort+0x20e>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a27      	ldr	r2, [pc, #156]	; (8007140 <HAL_DMA_Abort+0x24c>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d02c      	beq.n	8007102 <HAL_DMA_Abort+0x20e>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a25      	ldr	r2, [pc, #148]	; (8007144 <HAL_DMA_Abort+0x250>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d027      	beq.n	8007102 <HAL_DMA_Abort+0x20e>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a24      	ldr	r2, [pc, #144]	; (8007148 <HAL_DMA_Abort+0x254>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d022      	beq.n	8007102 <HAL_DMA_Abort+0x20e>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a22      	ldr	r2, [pc, #136]	; (800714c <HAL_DMA_Abort+0x258>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d01d      	beq.n	8007102 <HAL_DMA_Abort+0x20e>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a21      	ldr	r2, [pc, #132]	; (8007150 <HAL_DMA_Abort+0x25c>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d018      	beq.n	8007102 <HAL_DMA_Abort+0x20e>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a1f      	ldr	r2, [pc, #124]	; (8007154 <HAL_DMA_Abort+0x260>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d013      	beq.n	8007102 <HAL_DMA_Abort+0x20e>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a1e      	ldr	r2, [pc, #120]	; (8007158 <HAL_DMA_Abort+0x264>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d00e      	beq.n	8007102 <HAL_DMA_Abort+0x20e>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a1c      	ldr	r2, [pc, #112]	; (800715c <HAL_DMA_Abort+0x268>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d009      	beq.n	8007102 <HAL_DMA_Abort+0x20e>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a1b      	ldr	r2, [pc, #108]	; (8007160 <HAL_DMA_Abort+0x26c>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d004      	beq.n	8007102 <HAL_DMA_Abort+0x20e>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a19      	ldr	r2, [pc, #100]	; (8007164 <HAL_DMA_Abort+0x270>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d132      	bne.n	8007168 <HAL_DMA_Abort+0x274>
 8007102:	2301      	movs	r3, #1
 8007104:	e031      	b.n	800716a <HAL_DMA_Abort+0x276>
 8007106:	bf00      	nop
 8007108:	40020010 	.word	0x40020010
 800710c:	40020028 	.word	0x40020028
 8007110:	40020040 	.word	0x40020040
 8007114:	40020058 	.word	0x40020058
 8007118:	40020070 	.word	0x40020070
 800711c:	40020088 	.word	0x40020088
 8007120:	400200a0 	.word	0x400200a0
 8007124:	400200b8 	.word	0x400200b8
 8007128:	40020410 	.word	0x40020410
 800712c:	40020428 	.word	0x40020428
 8007130:	40020440 	.word	0x40020440
 8007134:	40020458 	.word	0x40020458
 8007138:	40020470 	.word	0x40020470
 800713c:	40020488 	.word	0x40020488
 8007140:	400204a0 	.word	0x400204a0
 8007144:	400204b8 	.word	0x400204b8
 8007148:	58025408 	.word	0x58025408
 800714c:	5802541c 	.word	0x5802541c
 8007150:	58025430 	.word	0x58025430
 8007154:	58025444 	.word	0x58025444
 8007158:	58025458 	.word	0x58025458
 800715c:	5802546c 	.word	0x5802546c
 8007160:	58025480 	.word	0x58025480
 8007164:	58025494 	.word	0x58025494
 8007168:	2300      	movs	r3, #0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d007      	beq.n	800717e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007178:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800717c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a6d      	ldr	r2, [pc, #436]	; (8007338 <HAL_DMA_Abort+0x444>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d04a      	beq.n	800721e <HAL_DMA_Abort+0x32a>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a6b      	ldr	r2, [pc, #428]	; (800733c <HAL_DMA_Abort+0x448>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d045      	beq.n	800721e <HAL_DMA_Abort+0x32a>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a6a      	ldr	r2, [pc, #424]	; (8007340 <HAL_DMA_Abort+0x44c>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d040      	beq.n	800721e <HAL_DMA_Abort+0x32a>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a68      	ldr	r2, [pc, #416]	; (8007344 <HAL_DMA_Abort+0x450>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d03b      	beq.n	800721e <HAL_DMA_Abort+0x32a>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a67      	ldr	r2, [pc, #412]	; (8007348 <HAL_DMA_Abort+0x454>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d036      	beq.n	800721e <HAL_DMA_Abort+0x32a>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a65      	ldr	r2, [pc, #404]	; (800734c <HAL_DMA_Abort+0x458>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d031      	beq.n	800721e <HAL_DMA_Abort+0x32a>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a64      	ldr	r2, [pc, #400]	; (8007350 <HAL_DMA_Abort+0x45c>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d02c      	beq.n	800721e <HAL_DMA_Abort+0x32a>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a62      	ldr	r2, [pc, #392]	; (8007354 <HAL_DMA_Abort+0x460>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d027      	beq.n	800721e <HAL_DMA_Abort+0x32a>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a61      	ldr	r2, [pc, #388]	; (8007358 <HAL_DMA_Abort+0x464>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d022      	beq.n	800721e <HAL_DMA_Abort+0x32a>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a5f      	ldr	r2, [pc, #380]	; (800735c <HAL_DMA_Abort+0x468>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d01d      	beq.n	800721e <HAL_DMA_Abort+0x32a>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a5e      	ldr	r2, [pc, #376]	; (8007360 <HAL_DMA_Abort+0x46c>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d018      	beq.n	800721e <HAL_DMA_Abort+0x32a>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a5c      	ldr	r2, [pc, #368]	; (8007364 <HAL_DMA_Abort+0x470>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d013      	beq.n	800721e <HAL_DMA_Abort+0x32a>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a5b      	ldr	r2, [pc, #364]	; (8007368 <HAL_DMA_Abort+0x474>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d00e      	beq.n	800721e <HAL_DMA_Abort+0x32a>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a59      	ldr	r2, [pc, #356]	; (800736c <HAL_DMA_Abort+0x478>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d009      	beq.n	800721e <HAL_DMA_Abort+0x32a>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a58      	ldr	r2, [pc, #352]	; (8007370 <HAL_DMA_Abort+0x47c>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d004      	beq.n	800721e <HAL_DMA_Abort+0x32a>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a56      	ldr	r2, [pc, #344]	; (8007374 <HAL_DMA_Abort+0x480>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d108      	bne.n	8007230 <HAL_DMA_Abort+0x33c>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f022 0201 	bic.w	r2, r2, #1
 800722c:	601a      	str	r2, [r3, #0]
 800722e:	e007      	b.n	8007240 <HAL_DMA_Abort+0x34c>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f022 0201 	bic.w	r2, r2, #1
 800723e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007240:	e013      	b.n	800726a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007242:	f7fe fd91 	bl	8005d68 <HAL_GetTick>
 8007246:	4602      	mov	r2, r0
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	1ad3      	subs	r3, r2, r3
 800724c:	2b05      	cmp	r3, #5
 800724e:	d90c      	bls.n	800726a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2220      	movs	r2, #32
 8007254:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2203      	movs	r2, #3
 800725a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e12d      	b.n	80074c6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 0301 	and.w	r3, r3, #1
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1e5      	bne.n	8007242 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a2f      	ldr	r2, [pc, #188]	; (8007338 <HAL_DMA_Abort+0x444>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d04a      	beq.n	8007316 <HAL_DMA_Abort+0x422>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a2d      	ldr	r2, [pc, #180]	; (800733c <HAL_DMA_Abort+0x448>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d045      	beq.n	8007316 <HAL_DMA_Abort+0x422>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a2c      	ldr	r2, [pc, #176]	; (8007340 <HAL_DMA_Abort+0x44c>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d040      	beq.n	8007316 <HAL_DMA_Abort+0x422>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a2a      	ldr	r2, [pc, #168]	; (8007344 <HAL_DMA_Abort+0x450>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d03b      	beq.n	8007316 <HAL_DMA_Abort+0x422>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a29      	ldr	r2, [pc, #164]	; (8007348 <HAL_DMA_Abort+0x454>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d036      	beq.n	8007316 <HAL_DMA_Abort+0x422>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a27      	ldr	r2, [pc, #156]	; (800734c <HAL_DMA_Abort+0x458>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d031      	beq.n	8007316 <HAL_DMA_Abort+0x422>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a26      	ldr	r2, [pc, #152]	; (8007350 <HAL_DMA_Abort+0x45c>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d02c      	beq.n	8007316 <HAL_DMA_Abort+0x422>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a24      	ldr	r2, [pc, #144]	; (8007354 <HAL_DMA_Abort+0x460>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d027      	beq.n	8007316 <HAL_DMA_Abort+0x422>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a23      	ldr	r2, [pc, #140]	; (8007358 <HAL_DMA_Abort+0x464>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d022      	beq.n	8007316 <HAL_DMA_Abort+0x422>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a21      	ldr	r2, [pc, #132]	; (800735c <HAL_DMA_Abort+0x468>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d01d      	beq.n	8007316 <HAL_DMA_Abort+0x422>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a20      	ldr	r2, [pc, #128]	; (8007360 <HAL_DMA_Abort+0x46c>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d018      	beq.n	8007316 <HAL_DMA_Abort+0x422>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a1e      	ldr	r2, [pc, #120]	; (8007364 <HAL_DMA_Abort+0x470>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d013      	beq.n	8007316 <HAL_DMA_Abort+0x422>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a1d      	ldr	r2, [pc, #116]	; (8007368 <HAL_DMA_Abort+0x474>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d00e      	beq.n	8007316 <HAL_DMA_Abort+0x422>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a1b      	ldr	r2, [pc, #108]	; (800736c <HAL_DMA_Abort+0x478>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d009      	beq.n	8007316 <HAL_DMA_Abort+0x422>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a1a      	ldr	r2, [pc, #104]	; (8007370 <HAL_DMA_Abort+0x47c>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d004      	beq.n	8007316 <HAL_DMA_Abort+0x422>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a18      	ldr	r2, [pc, #96]	; (8007374 <HAL_DMA_Abort+0x480>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d101      	bne.n	800731a <HAL_DMA_Abort+0x426>
 8007316:	2301      	movs	r3, #1
 8007318:	e000      	b.n	800731c <HAL_DMA_Abort+0x428>
 800731a:	2300      	movs	r3, #0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d02b      	beq.n	8007378 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007324:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800732a:	f003 031f 	and.w	r3, r3, #31
 800732e:	223f      	movs	r2, #63	; 0x3f
 8007330:	409a      	lsls	r2, r3
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	609a      	str	r2, [r3, #8]
 8007336:	e02a      	b.n	800738e <HAL_DMA_Abort+0x49a>
 8007338:	40020010 	.word	0x40020010
 800733c:	40020028 	.word	0x40020028
 8007340:	40020040 	.word	0x40020040
 8007344:	40020058 	.word	0x40020058
 8007348:	40020070 	.word	0x40020070
 800734c:	40020088 	.word	0x40020088
 8007350:	400200a0 	.word	0x400200a0
 8007354:	400200b8 	.word	0x400200b8
 8007358:	40020410 	.word	0x40020410
 800735c:	40020428 	.word	0x40020428
 8007360:	40020440 	.word	0x40020440
 8007364:	40020458 	.word	0x40020458
 8007368:	40020470 	.word	0x40020470
 800736c:	40020488 	.word	0x40020488
 8007370:	400204a0 	.word	0x400204a0
 8007374:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800737c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007382:	f003 031f 	and.w	r3, r3, #31
 8007386:	2201      	movs	r2, #1
 8007388:	409a      	lsls	r2, r3
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a4f      	ldr	r2, [pc, #316]	; (80074d0 <HAL_DMA_Abort+0x5dc>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d072      	beq.n	800747e <HAL_DMA_Abort+0x58a>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a4d      	ldr	r2, [pc, #308]	; (80074d4 <HAL_DMA_Abort+0x5e0>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d06d      	beq.n	800747e <HAL_DMA_Abort+0x58a>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a4c      	ldr	r2, [pc, #304]	; (80074d8 <HAL_DMA_Abort+0x5e4>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d068      	beq.n	800747e <HAL_DMA_Abort+0x58a>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a4a      	ldr	r2, [pc, #296]	; (80074dc <HAL_DMA_Abort+0x5e8>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d063      	beq.n	800747e <HAL_DMA_Abort+0x58a>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a49      	ldr	r2, [pc, #292]	; (80074e0 <HAL_DMA_Abort+0x5ec>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d05e      	beq.n	800747e <HAL_DMA_Abort+0x58a>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a47      	ldr	r2, [pc, #284]	; (80074e4 <HAL_DMA_Abort+0x5f0>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d059      	beq.n	800747e <HAL_DMA_Abort+0x58a>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a46      	ldr	r2, [pc, #280]	; (80074e8 <HAL_DMA_Abort+0x5f4>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d054      	beq.n	800747e <HAL_DMA_Abort+0x58a>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a44      	ldr	r2, [pc, #272]	; (80074ec <HAL_DMA_Abort+0x5f8>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d04f      	beq.n	800747e <HAL_DMA_Abort+0x58a>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a43      	ldr	r2, [pc, #268]	; (80074f0 <HAL_DMA_Abort+0x5fc>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d04a      	beq.n	800747e <HAL_DMA_Abort+0x58a>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a41      	ldr	r2, [pc, #260]	; (80074f4 <HAL_DMA_Abort+0x600>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d045      	beq.n	800747e <HAL_DMA_Abort+0x58a>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a40      	ldr	r2, [pc, #256]	; (80074f8 <HAL_DMA_Abort+0x604>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d040      	beq.n	800747e <HAL_DMA_Abort+0x58a>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a3e      	ldr	r2, [pc, #248]	; (80074fc <HAL_DMA_Abort+0x608>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d03b      	beq.n	800747e <HAL_DMA_Abort+0x58a>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a3d      	ldr	r2, [pc, #244]	; (8007500 <HAL_DMA_Abort+0x60c>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d036      	beq.n	800747e <HAL_DMA_Abort+0x58a>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a3b      	ldr	r2, [pc, #236]	; (8007504 <HAL_DMA_Abort+0x610>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d031      	beq.n	800747e <HAL_DMA_Abort+0x58a>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a3a      	ldr	r2, [pc, #232]	; (8007508 <HAL_DMA_Abort+0x614>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d02c      	beq.n	800747e <HAL_DMA_Abort+0x58a>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a38      	ldr	r2, [pc, #224]	; (800750c <HAL_DMA_Abort+0x618>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d027      	beq.n	800747e <HAL_DMA_Abort+0x58a>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a37      	ldr	r2, [pc, #220]	; (8007510 <HAL_DMA_Abort+0x61c>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d022      	beq.n	800747e <HAL_DMA_Abort+0x58a>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a35      	ldr	r2, [pc, #212]	; (8007514 <HAL_DMA_Abort+0x620>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d01d      	beq.n	800747e <HAL_DMA_Abort+0x58a>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a34      	ldr	r2, [pc, #208]	; (8007518 <HAL_DMA_Abort+0x624>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d018      	beq.n	800747e <HAL_DMA_Abort+0x58a>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a32      	ldr	r2, [pc, #200]	; (800751c <HAL_DMA_Abort+0x628>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d013      	beq.n	800747e <HAL_DMA_Abort+0x58a>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a31      	ldr	r2, [pc, #196]	; (8007520 <HAL_DMA_Abort+0x62c>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d00e      	beq.n	800747e <HAL_DMA_Abort+0x58a>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a2f      	ldr	r2, [pc, #188]	; (8007524 <HAL_DMA_Abort+0x630>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d009      	beq.n	800747e <HAL_DMA_Abort+0x58a>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a2e      	ldr	r2, [pc, #184]	; (8007528 <HAL_DMA_Abort+0x634>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d004      	beq.n	800747e <HAL_DMA_Abort+0x58a>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a2c      	ldr	r2, [pc, #176]	; (800752c <HAL_DMA_Abort+0x638>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d101      	bne.n	8007482 <HAL_DMA_Abort+0x58e>
 800747e:	2301      	movs	r3, #1
 8007480:	e000      	b.n	8007484 <HAL_DMA_Abort+0x590>
 8007482:	2300      	movs	r3, #0
 8007484:	2b00      	cmp	r3, #0
 8007486:	d015      	beq.n	80074b4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007490:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00c      	beq.n	80074b4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074a8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80074b2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3718      	adds	r7, #24
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	40020010 	.word	0x40020010
 80074d4:	40020028 	.word	0x40020028
 80074d8:	40020040 	.word	0x40020040
 80074dc:	40020058 	.word	0x40020058
 80074e0:	40020070 	.word	0x40020070
 80074e4:	40020088 	.word	0x40020088
 80074e8:	400200a0 	.word	0x400200a0
 80074ec:	400200b8 	.word	0x400200b8
 80074f0:	40020410 	.word	0x40020410
 80074f4:	40020428 	.word	0x40020428
 80074f8:	40020440 	.word	0x40020440
 80074fc:	40020458 	.word	0x40020458
 8007500:	40020470 	.word	0x40020470
 8007504:	40020488 	.word	0x40020488
 8007508:	400204a0 	.word	0x400204a0
 800750c:	400204b8 	.word	0x400204b8
 8007510:	58025408 	.word	0x58025408
 8007514:	5802541c 	.word	0x5802541c
 8007518:	58025430 	.word	0x58025430
 800751c:	58025444 	.word	0x58025444
 8007520:	58025458 	.word	0x58025458
 8007524:	5802546c 	.word	0x5802546c
 8007528:	58025480 	.word	0x58025480
 800752c:	58025494 	.word	0x58025494

08007530 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d101      	bne.n	8007542 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e237      	b.n	80079b2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007548:	b2db      	uxtb	r3, r3
 800754a:	2b02      	cmp	r3, #2
 800754c:	d004      	beq.n	8007558 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2280      	movs	r2, #128	; 0x80
 8007552:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	e22c      	b.n	80079b2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a5c      	ldr	r2, [pc, #368]	; (80076d0 <HAL_DMA_Abort_IT+0x1a0>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d04a      	beq.n	80075f8 <HAL_DMA_Abort_IT+0xc8>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a5b      	ldr	r2, [pc, #364]	; (80076d4 <HAL_DMA_Abort_IT+0x1a4>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d045      	beq.n	80075f8 <HAL_DMA_Abort_IT+0xc8>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a59      	ldr	r2, [pc, #356]	; (80076d8 <HAL_DMA_Abort_IT+0x1a8>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d040      	beq.n	80075f8 <HAL_DMA_Abort_IT+0xc8>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a58      	ldr	r2, [pc, #352]	; (80076dc <HAL_DMA_Abort_IT+0x1ac>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d03b      	beq.n	80075f8 <HAL_DMA_Abort_IT+0xc8>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a56      	ldr	r2, [pc, #344]	; (80076e0 <HAL_DMA_Abort_IT+0x1b0>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d036      	beq.n	80075f8 <HAL_DMA_Abort_IT+0xc8>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a55      	ldr	r2, [pc, #340]	; (80076e4 <HAL_DMA_Abort_IT+0x1b4>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d031      	beq.n	80075f8 <HAL_DMA_Abort_IT+0xc8>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a53      	ldr	r2, [pc, #332]	; (80076e8 <HAL_DMA_Abort_IT+0x1b8>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d02c      	beq.n	80075f8 <HAL_DMA_Abort_IT+0xc8>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a52      	ldr	r2, [pc, #328]	; (80076ec <HAL_DMA_Abort_IT+0x1bc>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d027      	beq.n	80075f8 <HAL_DMA_Abort_IT+0xc8>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a50      	ldr	r2, [pc, #320]	; (80076f0 <HAL_DMA_Abort_IT+0x1c0>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d022      	beq.n	80075f8 <HAL_DMA_Abort_IT+0xc8>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a4f      	ldr	r2, [pc, #316]	; (80076f4 <HAL_DMA_Abort_IT+0x1c4>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d01d      	beq.n	80075f8 <HAL_DMA_Abort_IT+0xc8>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a4d      	ldr	r2, [pc, #308]	; (80076f8 <HAL_DMA_Abort_IT+0x1c8>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d018      	beq.n	80075f8 <HAL_DMA_Abort_IT+0xc8>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a4c      	ldr	r2, [pc, #304]	; (80076fc <HAL_DMA_Abort_IT+0x1cc>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d013      	beq.n	80075f8 <HAL_DMA_Abort_IT+0xc8>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a4a      	ldr	r2, [pc, #296]	; (8007700 <HAL_DMA_Abort_IT+0x1d0>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d00e      	beq.n	80075f8 <HAL_DMA_Abort_IT+0xc8>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a49      	ldr	r2, [pc, #292]	; (8007704 <HAL_DMA_Abort_IT+0x1d4>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d009      	beq.n	80075f8 <HAL_DMA_Abort_IT+0xc8>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a47      	ldr	r2, [pc, #284]	; (8007708 <HAL_DMA_Abort_IT+0x1d8>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d004      	beq.n	80075f8 <HAL_DMA_Abort_IT+0xc8>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a46      	ldr	r2, [pc, #280]	; (800770c <HAL_DMA_Abort_IT+0x1dc>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d101      	bne.n	80075fc <HAL_DMA_Abort_IT+0xcc>
 80075f8:	2301      	movs	r3, #1
 80075fa:	e000      	b.n	80075fe <HAL_DMA_Abort_IT+0xce>
 80075fc:	2300      	movs	r3, #0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	f000 8086 	beq.w	8007710 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2204      	movs	r2, #4
 8007608:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a2f      	ldr	r2, [pc, #188]	; (80076d0 <HAL_DMA_Abort_IT+0x1a0>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d04a      	beq.n	80076ac <HAL_DMA_Abort_IT+0x17c>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a2e      	ldr	r2, [pc, #184]	; (80076d4 <HAL_DMA_Abort_IT+0x1a4>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d045      	beq.n	80076ac <HAL_DMA_Abort_IT+0x17c>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a2c      	ldr	r2, [pc, #176]	; (80076d8 <HAL_DMA_Abort_IT+0x1a8>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d040      	beq.n	80076ac <HAL_DMA_Abort_IT+0x17c>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a2b      	ldr	r2, [pc, #172]	; (80076dc <HAL_DMA_Abort_IT+0x1ac>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d03b      	beq.n	80076ac <HAL_DMA_Abort_IT+0x17c>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a29      	ldr	r2, [pc, #164]	; (80076e0 <HAL_DMA_Abort_IT+0x1b0>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d036      	beq.n	80076ac <HAL_DMA_Abort_IT+0x17c>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a28      	ldr	r2, [pc, #160]	; (80076e4 <HAL_DMA_Abort_IT+0x1b4>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d031      	beq.n	80076ac <HAL_DMA_Abort_IT+0x17c>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a26      	ldr	r2, [pc, #152]	; (80076e8 <HAL_DMA_Abort_IT+0x1b8>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d02c      	beq.n	80076ac <HAL_DMA_Abort_IT+0x17c>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a25      	ldr	r2, [pc, #148]	; (80076ec <HAL_DMA_Abort_IT+0x1bc>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d027      	beq.n	80076ac <HAL_DMA_Abort_IT+0x17c>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a23      	ldr	r2, [pc, #140]	; (80076f0 <HAL_DMA_Abort_IT+0x1c0>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d022      	beq.n	80076ac <HAL_DMA_Abort_IT+0x17c>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a22      	ldr	r2, [pc, #136]	; (80076f4 <HAL_DMA_Abort_IT+0x1c4>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d01d      	beq.n	80076ac <HAL_DMA_Abort_IT+0x17c>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a20      	ldr	r2, [pc, #128]	; (80076f8 <HAL_DMA_Abort_IT+0x1c8>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d018      	beq.n	80076ac <HAL_DMA_Abort_IT+0x17c>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a1f      	ldr	r2, [pc, #124]	; (80076fc <HAL_DMA_Abort_IT+0x1cc>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d013      	beq.n	80076ac <HAL_DMA_Abort_IT+0x17c>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a1d      	ldr	r2, [pc, #116]	; (8007700 <HAL_DMA_Abort_IT+0x1d0>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d00e      	beq.n	80076ac <HAL_DMA_Abort_IT+0x17c>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a1c      	ldr	r2, [pc, #112]	; (8007704 <HAL_DMA_Abort_IT+0x1d4>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d009      	beq.n	80076ac <HAL_DMA_Abort_IT+0x17c>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a1a      	ldr	r2, [pc, #104]	; (8007708 <HAL_DMA_Abort_IT+0x1d8>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d004      	beq.n	80076ac <HAL_DMA_Abort_IT+0x17c>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a19      	ldr	r2, [pc, #100]	; (800770c <HAL_DMA_Abort_IT+0x1dc>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d108      	bne.n	80076be <HAL_DMA_Abort_IT+0x18e>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f022 0201 	bic.w	r2, r2, #1
 80076ba:	601a      	str	r2, [r3, #0]
 80076bc:	e178      	b.n	80079b0 <HAL_DMA_Abort_IT+0x480>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f022 0201 	bic.w	r2, r2, #1
 80076cc:	601a      	str	r2, [r3, #0]
 80076ce:	e16f      	b.n	80079b0 <HAL_DMA_Abort_IT+0x480>
 80076d0:	40020010 	.word	0x40020010
 80076d4:	40020028 	.word	0x40020028
 80076d8:	40020040 	.word	0x40020040
 80076dc:	40020058 	.word	0x40020058
 80076e0:	40020070 	.word	0x40020070
 80076e4:	40020088 	.word	0x40020088
 80076e8:	400200a0 	.word	0x400200a0
 80076ec:	400200b8 	.word	0x400200b8
 80076f0:	40020410 	.word	0x40020410
 80076f4:	40020428 	.word	0x40020428
 80076f8:	40020440 	.word	0x40020440
 80076fc:	40020458 	.word	0x40020458
 8007700:	40020470 	.word	0x40020470
 8007704:	40020488 	.word	0x40020488
 8007708:	400204a0 	.word	0x400204a0
 800770c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f022 020e 	bic.w	r2, r2, #14
 800771e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a6c      	ldr	r2, [pc, #432]	; (80078d8 <HAL_DMA_Abort_IT+0x3a8>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d04a      	beq.n	80077c0 <HAL_DMA_Abort_IT+0x290>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a6b      	ldr	r2, [pc, #428]	; (80078dc <HAL_DMA_Abort_IT+0x3ac>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d045      	beq.n	80077c0 <HAL_DMA_Abort_IT+0x290>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a69      	ldr	r2, [pc, #420]	; (80078e0 <HAL_DMA_Abort_IT+0x3b0>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d040      	beq.n	80077c0 <HAL_DMA_Abort_IT+0x290>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a68      	ldr	r2, [pc, #416]	; (80078e4 <HAL_DMA_Abort_IT+0x3b4>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d03b      	beq.n	80077c0 <HAL_DMA_Abort_IT+0x290>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a66      	ldr	r2, [pc, #408]	; (80078e8 <HAL_DMA_Abort_IT+0x3b8>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d036      	beq.n	80077c0 <HAL_DMA_Abort_IT+0x290>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a65      	ldr	r2, [pc, #404]	; (80078ec <HAL_DMA_Abort_IT+0x3bc>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d031      	beq.n	80077c0 <HAL_DMA_Abort_IT+0x290>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a63      	ldr	r2, [pc, #396]	; (80078f0 <HAL_DMA_Abort_IT+0x3c0>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d02c      	beq.n	80077c0 <HAL_DMA_Abort_IT+0x290>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a62      	ldr	r2, [pc, #392]	; (80078f4 <HAL_DMA_Abort_IT+0x3c4>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d027      	beq.n	80077c0 <HAL_DMA_Abort_IT+0x290>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a60      	ldr	r2, [pc, #384]	; (80078f8 <HAL_DMA_Abort_IT+0x3c8>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d022      	beq.n	80077c0 <HAL_DMA_Abort_IT+0x290>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a5f      	ldr	r2, [pc, #380]	; (80078fc <HAL_DMA_Abort_IT+0x3cc>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d01d      	beq.n	80077c0 <HAL_DMA_Abort_IT+0x290>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a5d      	ldr	r2, [pc, #372]	; (8007900 <HAL_DMA_Abort_IT+0x3d0>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d018      	beq.n	80077c0 <HAL_DMA_Abort_IT+0x290>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a5c      	ldr	r2, [pc, #368]	; (8007904 <HAL_DMA_Abort_IT+0x3d4>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d013      	beq.n	80077c0 <HAL_DMA_Abort_IT+0x290>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a5a      	ldr	r2, [pc, #360]	; (8007908 <HAL_DMA_Abort_IT+0x3d8>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d00e      	beq.n	80077c0 <HAL_DMA_Abort_IT+0x290>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a59      	ldr	r2, [pc, #356]	; (800790c <HAL_DMA_Abort_IT+0x3dc>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d009      	beq.n	80077c0 <HAL_DMA_Abort_IT+0x290>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a57      	ldr	r2, [pc, #348]	; (8007910 <HAL_DMA_Abort_IT+0x3e0>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d004      	beq.n	80077c0 <HAL_DMA_Abort_IT+0x290>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a56      	ldr	r2, [pc, #344]	; (8007914 <HAL_DMA_Abort_IT+0x3e4>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d108      	bne.n	80077d2 <HAL_DMA_Abort_IT+0x2a2>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f022 0201 	bic.w	r2, r2, #1
 80077ce:	601a      	str	r2, [r3, #0]
 80077d0:	e007      	b.n	80077e2 <HAL_DMA_Abort_IT+0x2b2>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f022 0201 	bic.w	r2, r2, #1
 80077e0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a3c      	ldr	r2, [pc, #240]	; (80078d8 <HAL_DMA_Abort_IT+0x3a8>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d072      	beq.n	80078d2 <HAL_DMA_Abort_IT+0x3a2>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a3a      	ldr	r2, [pc, #232]	; (80078dc <HAL_DMA_Abort_IT+0x3ac>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d06d      	beq.n	80078d2 <HAL_DMA_Abort_IT+0x3a2>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a39      	ldr	r2, [pc, #228]	; (80078e0 <HAL_DMA_Abort_IT+0x3b0>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d068      	beq.n	80078d2 <HAL_DMA_Abort_IT+0x3a2>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a37      	ldr	r2, [pc, #220]	; (80078e4 <HAL_DMA_Abort_IT+0x3b4>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d063      	beq.n	80078d2 <HAL_DMA_Abort_IT+0x3a2>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a36      	ldr	r2, [pc, #216]	; (80078e8 <HAL_DMA_Abort_IT+0x3b8>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d05e      	beq.n	80078d2 <HAL_DMA_Abort_IT+0x3a2>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a34      	ldr	r2, [pc, #208]	; (80078ec <HAL_DMA_Abort_IT+0x3bc>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d059      	beq.n	80078d2 <HAL_DMA_Abort_IT+0x3a2>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a33      	ldr	r2, [pc, #204]	; (80078f0 <HAL_DMA_Abort_IT+0x3c0>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d054      	beq.n	80078d2 <HAL_DMA_Abort_IT+0x3a2>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a31      	ldr	r2, [pc, #196]	; (80078f4 <HAL_DMA_Abort_IT+0x3c4>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d04f      	beq.n	80078d2 <HAL_DMA_Abort_IT+0x3a2>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a30      	ldr	r2, [pc, #192]	; (80078f8 <HAL_DMA_Abort_IT+0x3c8>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d04a      	beq.n	80078d2 <HAL_DMA_Abort_IT+0x3a2>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a2e      	ldr	r2, [pc, #184]	; (80078fc <HAL_DMA_Abort_IT+0x3cc>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d045      	beq.n	80078d2 <HAL_DMA_Abort_IT+0x3a2>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a2d      	ldr	r2, [pc, #180]	; (8007900 <HAL_DMA_Abort_IT+0x3d0>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d040      	beq.n	80078d2 <HAL_DMA_Abort_IT+0x3a2>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a2b      	ldr	r2, [pc, #172]	; (8007904 <HAL_DMA_Abort_IT+0x3d4>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d03b      	beq.n	80078d2 <HAL_DMA_Abort_IT+0x3a2>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a2a      	ldr	r2, [pc, #168]	; (8007908 <HAL_DMA_Abort_IT+0x3d8>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d036      	beq.n	80078d2 <HAL_DMA_Abort_IT+0x3a2>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a28      	ldr	r2, [pc, #160]	; (800790c <HAL_DMA_Abort_IT+0x3dc>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d031      	beq.n	80078d2 <HAL_DMA_Abort_IT+0x3a2>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a27      	ldr	r2, [pc, #156]	; (8007910 <HAL_DMA_Abort_IT+0x3e0>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d02c      	beq.n	80078d2 <HAL_DMA_Abort_IT+0x3a2>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a25      	ldr	r2, [pc, #148]	; (8007914 <HAL_DMA_Abort_IT+0x3e4>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d027      	beq.n	80078d2 <HAL_DMA_Abort_IT+0x3a2>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a24      	ldr	r2, [pc, #144]	; (8007918 <HAL_DMA_Abort_IT+0x3e8>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d022      	beq.n	80078d2 <HAL_DMA_Abort_IT+0x3a2>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a22      	ldr	r2, [pc, #136]	; (800791c <HAL_DMA_Abort_IT+0x3ec>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d01d      	beq.n	80078d2 <HAL_DMA_Abort_IT+0x3a2>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a21      	ldr	r2, [pc, #132]	; (8007920 <HAL_DMA_Abort_IT+0x3f0>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d018      	beq.n	80078d2 <HAL_DMA_Abort_IT+0x3a2>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a1f      	ldr	r2, [pc, #124]	; (8007924 <HAL_DMA_Abort_IT+0x3f4>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d013      	beq.n	80078d2 <HAL_DMA_Abort_IT+0x3a2>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a1e      	ldr	r2, [pc, #120]	; (8007928 <HAL_DMA_Abort_IT+0x3f8>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d00e      	beq.n	80078d2 <HAL_DMA_Abort_IT+0x3a2>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a1c      	ldr	r2, [pc, #112]	; (800792c <HAL_DMA_Abort_IT+0x3fc>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d009      	beq.n	80078d2 <HAL_DMA_Abort_IT+0x3a2>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a1b      	ldr	r2, [pc, #108]	; (8007930 <HAL_DMA_Abort_IT+0x400>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d004      	beq.n	80078d2 <HAL_DMA_Abort_IT+0x3a2>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a19      	ldr	r2, [pc, #100]	; (8007934 <HAL_DMA_Abort_IT+0x404>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d132      	bne.n	8007938 <HAL_DMA_Abort_IT+0x408>
 80078d2:	2301      	movs	r3, #1
 80078d4:	e031      	b.n	800793a <HAL_DMA_Abort_IT+0x40a>
 80078d6:	bf00      	nop
 80078d8:	40020010 	.word	0x40020010
 80078dc:	40020028 	.word	0x40020028
 80078e0:	40020040 	.word	0x40020040
 80078e4:	40020058 	.word	0x40020058
 80078e8:	40020070 	.word	0x40020070
 80078ec:	40020088 	.word	0x40020088
 80078f0:	400200a0 	.word	0x400200a0
 80078f4:	400200b8 	.word	0x400200b8
 80078f8:	40020410 	.word	0x40020410
 80078fc:	40020428 	.word	0x40020428
 8007900:	40020440 	.word	0x40020440
 8007904:	40020458 	.word	0x40020458
 8007908:	40020470 	.word	0x40020470
 800790c:	40020488 	.word	0x40020488
 8007910:	400204a0 	.word	0x400204a0
 8007914:	400204b8 	.word	0x400204b8
 8007918:	58025408 	.word	0x58025408
 800791c:	5802541c 	.word	0x5802541c
 8007920:	58025430 	.word	0x58025430
 8007924:	58025444 	.word	0x58025444
 8007928:	58025458 	.word	0x58025458
 800792c:	5802546c 	.word	0x5802546c
 8007930:	58025480 	.word	0x58025480
 8007934:	58025494 	.word	0x58025494
 8007938:	2300      	movs	r3, #0
 800793a:	2b00      	cmp	r3, #0
 800793c:	d028      	beq.n	8007990 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007948:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800794c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007952:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007958:	f003 031f 	and.w	r3, r3, #31
 800795c:	2201      	movs	r2, #1
 800795e:	409a      	lsls	r2, r3
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800796c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00c      	beq.n	8007990 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007980:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007984:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800798e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d003      	beq.n	80079b0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop

080079bc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b08a      	sub	sp, #40	; 0x28
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80079c4:	2300      	movs	r3, #0
 80079c6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80079c8:	4b67      	ldr	r3, [pc, #412]	; (8007b68 <HAL_DMA_IRQHandler+0x1ac>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a67      	ldr	r2, [pc, #412]	; (8007b6c <HAL_DMA_IRQHandler+0x1b0>)
 80079ce:	fba2 2303 	umull	r2, r3, r2, r3
 80079d2:	0a9b      	lsrs	r3, r3, #10
 80079d4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079da:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079e0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80079e2:	6a3b      	ldr	r3, [r7, #32]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a5f      	ldr	r2, [pc, #380]	; (8007b70 <HAL_DMA_IRQHandler+0x1b4>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d04a      	beq.n	8007a8e <HAL_DMA_IRQHandler+0xd2>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a5d      	ldr	r2, [pc, #372]	; (8007b74 <HAL_DMA_IRQHandler+0x1b8>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d045      	beq.n	8007a8e <HAL_DMA_IRQHandler+0xd2>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a5c      	ldr	r2, [pc, #368]	; (8007b78 <HAL_DMA_IRQHandler+0x1bc>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d040      	beq.n	8007a8e <HAL_DMA_IRQHandler+0xd2>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a5a      	ldr	r2, [pc, #360]	; (8007b7c <HAL_DMA_IRQHandler+0x1c0>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d03b      	beq.n	8007a8e <HAL_DMA_IRQHandler+0xd2>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a59      	ldr	r2, [pc, #356]	; (8007b80 <HAL_DMA_IRQHandler+0x1c4>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d036      	beq.n	8007a8e <HAL_DMA_IRQHandler+0xd2>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a57      	ldr	r2, [pc, #348]	; (8007b84 <HAL_DMA_IRQHandler+0x1c8>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d031      	beq.n	8007a8e <HAL_DMA_IRQHandler+0xd2>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a56      	ldr	r2, [pc, #344]	; (8007b88 <HAL_DMA_IRQHandler+0x1cc>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d02c      	beq.n	8007a8e <HAL_DMA_IRQHandler+0xd2>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a54      	ldr	r2, [pc, #336]	; (8007b8c <HAL_DMA_IRQHandler+0x1d0>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d027      	beq.n	8007a8e <HAL_DMA_IRQHandler+0xd2>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a53      	ldr	r2, [pc, #332]	; (8007b90 <HAL_DMA_IRQHandler+0x1d4>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d022      	beq.n	8007a8e <HAL_DMA_IRQHandler+0xd2>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a51      	ldr	r2, [pc, #324]	; (8007b94 <HAL_DMA_IRQHandler+0x1d8>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d01d      	beq.n	8007a8e <HAL_DMA_IRQHandler+0xd2>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a50      	ldr	r2, [pc, #320]	; (8007b98 <HAL_DMA_IRQHandler+0x1dc>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d018      	beq.n	8007a8e <HAL_DMA_IRQHandler+0xd2>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a4e      	ldr	r2, [pc, #312]	; (8007b9c <HAL_DMA_IRQHandler+0x1e0>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d013      	beq.n	8007a8e <HAL_DMA_IRQHandler+0xd2>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a4d      	ldr	r2, [pc, #308]	; (8007ba0 <HAL_DMA_IRQHandler+0x1e4>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d00e      	beq.n	8007a8e <HAL_DMA_IRQHandler+0xd2>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a4b      	ldr	r2, [pc, #300]	; (8007ba4 <HAL_DMA_IRQHandler+0x1e8>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d009      	beq.n	8007a8e <HAL_DMA_IRQHandler+0xd2>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a4a      	ldr	r2, [pc, #296]	; (8007ba8 <HAL_DMA_IRQHandler+0x1ec>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d004      	beq.n	8007a8e <HAL_DMA_IRQHandler+0xd2>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a48      	ldr	r2, [pc, #288]	; (8007bac <HAL_DMA_IRQHandler+0x1f0>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d101      	bne.n	8007a92 <HAL_DMA_IRQHandler+0xd6>
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e000      	b.n	8007a94 <HAL_DMA_IRQHandler+0xd8>
 8007a92:	2300      	movs	r3, #0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	f000 842b 	beq.w	80082f0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a9e:	f003 031f 	and.w	r3, r3, #31
 8007aa2:	2208      	movs	r2, #8
 8007aa4:	409a      	lsls	r2, r3
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f000 80a2 	beq.w	8007bf4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a2e      	ldr	r2, [pc, #184]	; (8007b70 <HAL_DMA_IRQHandler+0x1b4>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d04a      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x194>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a2d      	ldr	r2, [pc, #180]	; (8007b74 <HAL_DMA_IRQHandler+0x1b8>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d045      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x194>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a2b      	ldr	r2, [pc, #172]	; (8007b78 <HAL_DMA_IRQHandler+0x1bc>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d040      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x194>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a2a      	ldr	r2, [pc, #168]	; (8007b7c <HAL_DMA_IRQHandler+0x1c0>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d03b      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x194>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a28      	ldr	r2, [pc, #160]	; (8007b80 <HAL_DMA_IRQHandler+0x1c4>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d036      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x194>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a27      	ldr	r2, [pc, #156]	; (8007b84 <HAL_DMA_IRQHandler+0x1c8>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d031      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x194>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a25      	ldr	r2, [pc, #148]	; (8007b88 <HAL_DMA_IRQHandler+0x1cc>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d02c      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x194>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a24      	ldr	r2, [pc, #144]	; (8007b8c <HAL_DMA_IRQHandler+0x1d0>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d027      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x194>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a22      	ldr	r2, [pc, #136]	; (8007b90 <HAL_DMA_IRQHandler+0x1d4>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d022      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x194>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a21      	ldr	r2, [pc, #132]	; (8007b94 <HAL_DMA_IRQHandler+0x1d8>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d01d      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x194>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a1f      	ldr	r2, [pc, #124]	; (8007b98 <HAL_DMA_IRQHandler+0x1dc>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d018      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x194>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a1e      	ldr	r2, [pc, #120]	; (8007b9c <HAL_DMA_IRQHandler+0x1e0>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d013      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x194>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a1c      	ldr	r2, [pc, #112]	; (8007ba0 <HAL_DMA_IRQHandler+0x1e4>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d00e      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x194>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a1b      	ldr	r2, [pc, #108]	; (8007ba4 <HAL_DMA_IRQHandler+0x1e8>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d009      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x194>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a19      	ldr	r2, [pc, #100]	; (8007ba8 <HAL_DMA_IRQHandler+0x1ec>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d004      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x194>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a18      	ldr	r2, [pc, #96]	; (8007bac <HAL_DMA_IRQHandler+0x1f0>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d12f      	bne.n	8007bb0 <HAL_DMA_IRQHandler+0x1f4>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f003 0304 	and.w	r3, r3, #4
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	bf14      	ite	ne
 8007b5e:	2301      	movne	r3, #1
 8007b60:	2300      	moveq	r3, #0
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	e02e      	b.n	8007bc4 <HAL_DMA_IRQHandler+0x208>
 8007b66:	bf00      	nop
 8007b68:	24000050 	.word	0x24000050
 8007b6c:	1b4e81b5 	.word	0x1b4e81b5
 8007b70:	40020010 	.word	0x40020010
 8007b74:	40020028 	.word	0x40020028
 8007b78:	40020040 	.word	0x40020040
 8007b7c:	40020058 	.word	0x40020058
 8007b80:	40020070 	.word	0x40020070
 8007b84:	40020088 	.word	0x40020088
 8007b88:	400200a0 	.word	0x400200a0
 8007b8c:	400200b8 	.word	0x400200b8
 8007b90:	40020410 	.word	0x40020410
 8007b94:	40020428 	.word	0x40020428
 8007b98:	40020440 	.word	0x40020440
 8007b9c:	40020458 	.word	0x40020458
 8007ba0:	40020470 	.word	0x40020470
 8007ba4:	40020488 	.word	0x40020488
 8007ba8:	400204a0 	.word	0x400204a0
 8007bac:	400204b8 	.word	0x400204b8
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f003 0308 	and.w	r3, r3, #8
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	bf14      	ite	ne
 8007bbe:	2301      	movne	r3, #1
 8007bc0:	2300      	moveq	r3, #0
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d015      	beq.n	8007bf4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f022 0204 	bic.w	r2, r2, #4
 8007bd6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bdc:	f003 031f 	and.w	r3, r3, #31
 8007be0:	2208      	movs	r2, #8
 8007be2:	409a      	lsls	r2, r3
 8007be4:	6a3b      	ldr	r3, [r7, #32]
 8007be6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bec:	f043 0201 	orr.w	r2, r3, #1
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bf8:	f003 031f 	and.w	r3, r3, #31
 8007bfc:	69ba      	ldr	r2, [r7, #24]
 8007bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8007c02:	f003 0301 	and.w	r3, r3, #1
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d06e      	beq.n	8007ce8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a69      	ldr	r2, [pc, #420]	; (8007db4 <HAL_DMA_IRQHandler+0x3f8>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d04a      	beq.n	8007caa <HAL_DMA_IRQHandler+0x2ee>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a67      	ldr	r2, [pc, #412]	; (8007db8 <HAL_DMA_IRQHandler+0x3fc>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d045      	beq.n	8007caa <HAL_DMA_IRQHandler+0x2ee>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a66      	ldr	r2, [pc, #408]	; (8007dbc <HAL_DMA_IRQHandler+0x400>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d040      	beq.n	8007caa <HAL_DMA_IRQHandler+0x2ee>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a64      	ldr	r2, [pc, #400]	; (8007dc0 <HAL_DMA_IRQHandler+0x404>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d03b      	beq.n	8007caa <HAL_DMA_IRQHandler+0x2ee>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a63      	ldr	r2, [pc, #396]	; (8007dc4 <HAL_DMA_IRQHandler+0x408>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d036      	beq.n	8007caa <HAL_DMA_IRQHandler+0x2ee>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a61      	ldr	r2, [pc, #388]	; (8007dc8 <HAL_DMA_IRQHandler+0x40c>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d031      	beq.n	8007caa <HAL_DMA_IRQHandler+0x2ee>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a60      	ldr	r2, [pc, #384]	; (8007dcc <HAL_DMA_IRQHandler+0x410>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d02c      	beq.n	8007caa <HAL_DMA_IRQHandler+0x2ee>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a5e      	ldr	r2, [pc, #376]	; (8007dd0 <HAL_DMA_IRQHandler+0x414>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d027      	beq.n	8007caa <HAL_DMA_IRQHandler+0x2ee>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a5d      	ldr	r2, [pc, #372]	; (8007dd4 <HAL_DMA_IRQHandler+0x418>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d022      	beq.n	8007caa <HAL_DMA_IRQHandler+0x2ee>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a5b      	ldr	r2, [pc, #364]	; (8007dd8 <HAL_DMA_IRQHandler+0x41c>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d01d      	beq.n	8007caa <HAL_DMA_IRQHandler+0x2ee>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a5a      	ldr	r2, [pc, #360]	; (8007ddc <HAL_DMA_IRQHandler+0x420>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d018      	beq.n	8007caa <HAL_DMA_IRQHandler+0x2ee>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a58      	ldr	r2, [pc, #352]	; (8007de0 <HAL_DMA_IRQHandler+0x424>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d013      	beq.n	8007caa <HAL_DMA_IRQHandler+0x2ee>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a57      	ldr	r2, [pc, #348]	; (8007de4 <HAL_DMA_IRQHandler+0x428>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d00e      	beq.n	8007caa <HAL_DMA_IRQHandler+0x2ee>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a55      	ldr	r2, [pc, #340]	; (8007de8 <HAL_DMA_IRQHandler+0x42c>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d009      	beq.n	8007caa <HAL_DMA_IRQHandler+0x2ee>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a54      	ldr	r2, [pc, #336]	; (8007dec <HAL_DMA_IRQHandler+0x430>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d004      	beq.n	8007caa <HAL_DMA_IRQHandler+0x2ee>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a52      	ldr	r2, [pc, #328]	; (8007df0 <HAL_DMA_IRQHandler+0x434>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d10a      	bne.n	8007cc0 <HAL_DMA_IRQHandler+0x304>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	695b      	ldr	r3, [r3, #20]
 8007cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	bf14      	ite	ne
 8007cb8:	2301      	movne	r3, #1
 8007cba:	2300      	moveq	r3, #0
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	e003      	b.n	8007cc8 <HAL_DMA_IRQHandler+0x30c>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d00d      	beq.n	8007ce8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cd0:	f003 031f 	and.w	r3, r3, #31
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	409a      	lsls	r2, r3
 8007cd8:	6a3b      	ldr	r3, [r7, #32]
 8007cda:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ce0:	f043 0202 	orr.w	r2, r3, #2
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cec:	f003 031f 	and.w	r3, r3, #31
 8007cf0:	2204      	movs	r2, #4
 8007cf2:	409a      	lsls	r2, r3
 8007cf4:	69bb      	ldr	r3, [r7, #24]
 8007cf6:	4013      	ands	r3, r2
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	f000 808f 	beq.w	8007e1c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a2c      	ldr	r2, [pc, #176]	; (8007db4 <HAL_DMA_IRQHandler+0x3f8>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d04a      	beq.n	8007d9e <HAL_DMA_IRQHandler+0x3e2>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a2a      	ldr	r2, [pc, #168]	; (8007db8 <HAL_DMA_IRQHandler+0x3fc>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d045      	beq.n	8007d9e <HAL_DMA_IRQHandler+0x3e2>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a29      	ldr	r2, [pc, #164]	; (8007dbc <HAL_DMA_IRQHandler+0x400>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d040      	beq.n	8007d9e <HAL_DMA_IRQHandler+0x3e2>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a27      	ldr	r2, [pc, #156]	; (8007dc0 <HAL_DMA_IRQHandler+0x404>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d03b      	beq.n	8007d9e <HAL_DMA_IRQHandler+0x3e2>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a26      	ldr	r2, [pc, #152]	; (8007dc4 <HAL_DMA_IRQHandler+0x408>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d036      	beq.n	8007d9e <HAL_DMA_IRQHandler+0x3e2>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a24      	ldr	r2, [pc, #144]	; (8007dc8 <HAL_DMA_IRQHandler+0x40c>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d031      	beq.n	8007d9e <HAL_DMA_IRQHandler+0x3e2>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a23      	ldr	r2, [pc, #140]	; (8007dcc <HAL_DMA_IRQHandler+0x410>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d02c      	beq.n	8007d9e <HAL_DMA_IRQHandler+0x3e2>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a21      	ldr	r2, [pc, #132]	; (8007dd0 <HAL_DMA_IRQHandler+0x414>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d027      	beq.n	8007d9e <HAL_DMA_IRQHandler+0x3e2>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a20      	ldr	r2, [pc, #128]	; (8007dd4 <HAL_DMA_IRQHandler+0x418>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d022      	beq.n	8007d9e <HAL_DMA_IRQHandler+0x3e2>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a1e      	ldr	r2, [pc, #120]	; (8007dd8 <HAL_DMA_IRQHandler+0x41c>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d01d      	beq.n	8007d9e <HAL_DMA_IRQHandler+0x3e2>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a1d      	ldr	r2, [pc, #116]	; (8007ddc <HAL_DMA_IRQHandler+0x420>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d018      	beq.n	8007d9e <HAL_DMA_IRQHandler+0x3e2>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a1b      	ldr	r2, [pc, #108]	; (8007de0 <HAL_DMA_IRQHandler+0x424>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d013      	beq.n	8007d9e <HAL_DMA_IRQHandler+0x3e2>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a1a      	ldr	r2, [pc, #104]	; (8007de4 <HAL_DMA_IRQHandler+0x428>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d00e      	beq.n	8007d9e <HAL_DMA_IRQHandler+0x3e2>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a18      	ldr	r2, [pc, #96]	; (8007de8 <HAL_DMA_IRQHandler+0x42c>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d009      	beq.n	8007d9e <HAL_DMA_IRQHandler+0x3e2>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a17      	ldr	r2, [pc, #92]	; (8007dec <HAL_DMA_IRQHandler+0x430>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d004      	beq.n	8007d9e <HAL_DMA_IRQHandler+0x3e2>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a15      	ldr	r2, [pc, #84]	; (8007df0 <HAL_DMA_IRQHandler+0x434>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d12a      	bne.n	8007df4 <HAL_DMA_IRQHandler+0x438>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 0302 	and.w	r3, r3, #2
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	bf14      	ite	ne
 8007dac:	2301      	movne	r3, #1
 8007dae:	2300      	moveq	r3, #0
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	e023      	b.n	8007dfc <HAL_DMA_IRQHandler+0x440>
 8007db4:	40020010 	.word	0x40020010
 8007db8:	40020028 	.word	0x40020028
 8007dbc:	40020040 	.word	0x40020040
 8007dc0:	40020058 	.word	0x40020058
 8007dc4:	40020070 	.word	0x40020070
 8007dc8:	40020088 	.word	0x40020088
 8007dcc:	400200a0 	.word	0x400200a0
 8007dd0:	400200b8 	.word	0x400200b8
 8007dd4:	40020410 	.word	0x40020410
 8007dd8:	40020428 	.word	0x40020428
 8007ddc:	40020440 	.word	0x40020440
 8007de0:	40020458 	.word	0x40020458
 8007de4:	40020470 	.word	0x40020470
 8007de8:	40020488 	.word	0x40020488
 8007dec:	400204a0 	.word	0x400204a0
 8007df0:	400204b8 	.word	0x400204b8
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d00d      	beq.n	8007e1c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e04:	f003 031f 	and.w	r3, r3, #31
 8007e08:	2204      	movs	r2, #4
 8007e0a:	409a      	lsls	r2, r3
 8007e0c:	6a3b      	ldr	r3, [r7, #32]
 8007e0e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e14:	f043 0204 	orr.w	r2, r3, #4
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e20:	f003 031f 	and.w	r3, r3, #31
 8007e24:	2210      	movs	r2, #16
 8007e26:	409a      	lsls	r2, r3
 8007e28:	69bb      	ldr	r3, [r7, #24]
 8007e2a:	4013      	ands	r3, r2
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	f000 80a6 	beq.w	8007f7e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a85      	ldr	r2, [pc, #532]	; (800804c <HAL_DMA_IRQHandler+0x690>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d04a      	beq.n	8007ed2 <HAL_DMA_IRQHandler+0x516>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a83      	ldr	r2, [pc, #524]	; (8008050 <HAL_DMA_IRQHandler+0x694>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d045      	beq.n	8007ed2 <HAL_DMA_IRQHandler+0x516>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a82      	ldr	r2, [pc, #520]	; (8008054 <HAL_DMA_IRQHandler+0x698>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d040      	beq.n	8007ed2 <HAL_DMA_IRQHandler+0x516>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a80      	ldr	r2, [pc, #512]	; (8008058 <HAL_DMA_IRQHandler+0x69c>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d03b      	beq.n	8007ed2 <HAL_DMA_IRQHandler+0x516>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a7f      	ldr	r2, [pc, #508]	; (800805c <HAL_DMA_IRQHandler+0x6a0>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d036      	beq.n	8007ed2 <HAL_DMA_IRQHandler+0x516>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a7d      	ldr	r2, [pc, #500]	; (8008060 <HAL_DMA_IRQHandler+0x6a4>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d031      	beq.n	8007ed2 <HAL_DMA_IRQHandler+0x516>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a7c      	ldr	r2, [pc, #496]	; (8008064 <HAL_DMA_IRQHandler+0x6a8>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d02c      	beq.n	8007ed2 <HAL_DMA_IRQHandler+0x516>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a7a      	ldr	r2, [pc, #488]	; (8008068 <HAL_DMA_IRQHandler+0x6ac>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d027      	beq.n	8007ed2 <HAL_DMA_IRQHandler+0x516>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a79      	ldr	r2, [pc, #484]	; (800806c <HAL_DMA_IRQHandler+0x6b0>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d022      	beq.n	8007ed2 <HAL_DMA_IRQHandler+0x516>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a77      	ldr	r2, [pc, #476]	; (8008070 <HAL_DMA_IRQHandler+0x6b4>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d01d      	beq.n	8007ed2 <HAL_DMA_IRQHandler+0x516>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a76      	ldr	r2, [pc, #472]	; (8008074 <HAL_DMA_IRQHandler+0x6b8>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d018      	beq.n	8007ed2 <HAL_DMA_IRQHandler+0x516>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a74      	ldr	r2, [pc, #464]	; (8008078 <HAL_DMA_IRQHandler+0x6bc>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d013      	beq.n	8007ed2 <HAL_DMA_IRQHandler+0x516>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a73      	ldr	r2, [pc, #460]	; (800807c <HAL_DMA_IRQHandler+0x6c0>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d00e      	beq.n	8007ed2 <HAL_DMA_IRQHandler+0x516>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a71      	ldr	r2, [pc, #452]	; (8008080 <HAL_DMA_IRQHandler+0x6c4>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d009      	beq.n	8007ed2 <HAL_DMA_IRQHandler+0x516>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a70      	ldr	r2, [pc, #448]	; (8008084 <HAL_DMA_IRQHandler+0x6c8>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d004      	beq.n	8007ed2 <HAL_DMA_IRQHandler+0x516>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a6e      	ldr	r2, [pc, #440]	; (8008088 <HAL_DMA_IRQHandler+0x6cc>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d10a      	bne.n	8007ee8 <HAL_DMA_IRQHandler+0x52c>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f003 0308 	and.w	r3, r3, #8
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	bf14      	ite	ne
 8007ee0:	2301      	movne	r3, #1
 8007ee2:	2300      	moveq	r3, #0
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	e009      	b.n	8007efc <HAL_DMA_IRQHandler+0x540>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f003 0304 	and.w	r3, r3, #4
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	bf14      	ite	ne
 8007ef6:	2301      	movne	r3, #1
 8007ef8:	2300      	moveq	r3, #0
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d03e      	beq.n	8007f7e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f04:	f003 031f 	and.w	r3, r3, #31
 8007f08:	2210      	movs	r2, #16
 8007f0a:	409a      	lsls	r2, r3
 8007f0c:	6a3b      	ldr	r3, [r7, #32]
 8007f0e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d018      	beq.n	8007f50 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d108      	bne.n	8007f3e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d024      	beq.n	8007f7e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	4798      	blx	r3
 8007f3c:	e01f      	b.n	8007f7e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d01b      	beq.n	8007f7e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	4798      	blx	r3
 8007f4e:	e016      	b.n	8007f7e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d107      	bne.n	8007f6e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f022 0208 	bic.w	r2, r2, #8
 8007f6c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d003      	beq.n	8007f7e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f82:	f003 031f 	and.w	r3, r3, #31
 8007f86:	2220      	movs	r2, #32
 8007f88:	409a      	lsls	r2, r3
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	4013      	ands	r3, r2
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	f000 8110 	beq.w	80081b4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a2c      	ldr	r2, [pc, #176]	; (800804c <HAL_DMA_IRQHandler+0x690>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d04a      	beq.n	8008034 <HAL_DMA_IRQHandler+0x678>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a2b      	ldr	r2, [pc, #172]	; (8008050 <HAL_DMA_IRQHandler+0x694>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d045      	beq.n	8008034 <HAL_DMA_IRQHandler+0x678>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a29      	ldr	r2, [pc, #164]	; (8008054 <HAL_DMA_IRQHandler+0x698>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d040      	beq.n	8008034 <HAL_DMA_IRQHandler+0x678>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a28      	ldr	r2, [pc, #160]	; (8008058 <HAL_DMA_IRQHandler+0x69c>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d03b      	beq.n	8008034 <HAL_DMA_IRQHandler+0x678>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a26      	ldr	r2, [pc, #152]	; (800805c <HAL_DMA_IRQHandler+0x6a0>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d036      	beq.n	8008034 <HAL_DMA_IRQHandler+0x678>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a25      	ldr	r2, [pc, #148]	; (8008060 <HAL_DMA_IRQHandler+0x6a4>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d031      	beq.n	8008034 <HAL_DMA_IRQHandler+0x678>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a23      	ldr	r2, [pc, #140]	; (8008064 <HAL_DMA_IRQHandler+0x6a8>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d02c      	beq.n	8008034 <HAL_DMA_IRQHandler+0x678>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a22      	ldr	r2, [pc, #136]	; (8008068 <HAL_DMA_IRQHandler+0x6ac>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d027      	beq.n	8008034 <HAL_DMA_IRQHandler+0x678>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a20      	ldr	r2, [pc, #128]	; (800806c <HAL_DMA_IRQHandler+0x6b0>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d022      	beq.n	8008034 <HAL_DMA_IRQHandler+0x678>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a1f      	ldr	r2, [pc, #124]	; (8008070 <HAL_DMA_IRQHandler+0x6b4>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d01d      	beq.n	8008034 <HAL_DMA_IRQHandler+0x678>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a1d      	ldr	r2, [pc, #116]	; (8008074 <HAL_DMA_IRQHandler+0x6b8>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d018      	beq.n	8008034 <HAL_DMA_IRQHandler+0x678>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a1c      	ldr	r2, [pc, #112]	; (8008078 <HAL_DMA_IRQHandler+0x6bc>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d013      	beq.n	8008034 <HAL_DMA_IRQHandler+0x678>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a1a      	ldr	r2, [pc, #104]	; (800807c <HAL_DMA_IRQHandler+0x6c0>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d00e      	beq.n	8008034 <HAL_DMA_IRQHandler+0x678>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a19      	ldr	r2, [pc, #100]	; (8008080 <HAL_DMA_IRQHandler+0x6c4>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d009      	beq.n	8008034 <HAL_DMA_IRQHandler+0x678>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a17      	ldr	r2, [pc, #92]	; (8008084 <HAL_DMA_IRQHandler+0x6c8>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d004      	beq.n	8008034 <HAL_DMA_IRQHandler+0x678>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a16      	ldr	r2, [pc, #88]	; (8008088 <HAL_DMA_IRQHandler+0x6cc>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d12b      	bne.n	800808c <HAL_DMA_IRQHandler+0x6d0>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f003 0310 	and.w	r3, r3, #16
 800803e:	2b00      	cmp	r3, #0
 8008040:	bf14      	ite	ne
 8008042:	2301      	movne	r3, #1
 8008044:	2300      	moveq	r3, #0
 8008046:	b2db      	uxtb	r3, r3
 8008048:	e02a      	b.n	80080a0 <HAL_DMA_IRQHandler+0x6e4>
 800804a:	bf00      	nop
 800804c:	40020010 	.word	0x40020010
 8008050:	40020028 	.word	0x40020028
 8008054:	40020040 	.word	0x40020040
 8008058:	40020058 	.word	0x40020058
 800805c:	40020070 	.word	0x40020070
 8008060:	40020088 	.word	0x40020088
 8008064:	400200a0 	.word	0x400200a0
 8008068:	400200b8 	.word	0x400200b8
 800806c:	40020410 	.word	0x40020410
 8008070:	40020428 	.word	0x40020428
 8008074:	40020440 	.word	0x40020440
 8008078:	40020458 	.word	0x40020458
 800807c:	40020470 	.word	0x40020470
 8008080:	40020488 	.word	0x40020488
 8008084:	400204a0 	.word	0x400204a0
 8008088:	400204b8 	.word	0x400204b8
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 0302 	and.w	r3, r3, #2
 8008096:	2b00      	cmp	r3, #0
 8008098:	bf14      	ite	ne
 800809a:	2301      	movne	r3, #1
 800809c:	2300      	moveq	r3, #0
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f000 8087 	beq.w	80081b4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080aa:	f003 031f 	and.w	r3, r3, #31
 80080ae:	2220      	movs	r2, #32
 80080b0:	409a      	lsls	r2, r3
 80080b2:	6a3b      	ldr	r3, [r7, #32]
 80080b4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	2b04      	cmp	r3, #4
 80080c0:	d139      	bne.n	8008136 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f022 0216 	bic.w	r2, r2, #22
 80080d0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	695a      	ldr	r2, [r3, #20]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080e0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d103      	bne.n	80080f2 <HAL_DMA_IRQHandler+0x736>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d007      	beq.n	8008102 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f022 0208 	bic.w	r2, r2, #8
 8008100:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008106:	f003 031f 	and.w	r3, r3, #31
 800810a:	223f      	movs	r2, #63	; 0x3f
 800810c:	409a      	lsls	r2, r3
 800810e:	6a3b      	ldr	r3, [r7, #32]
 8008110:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2201      	movs	r2, #1
 8008116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008126:	2b00      	cmp	r3, #0
 8008128:	f000 834a 	beq.w	80087c0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	4798      	blx	r3
          }
          return;
 8008134:	e344      	b.n	80087c0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008140:	2b00      	cmp	r3, #0
 8008142:	d018      	beq.n	8008176 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800814e:	2b00      	cmp	r3, #0
 8008150:	d108      	bne.n	8008164 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008156:	2b00      	cmp	r3, #0
 8008158:	d02c      	beq.n	80081b4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	4798      	blx	r3
 8008162:	e027      	b.n	80081b4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008168:	2b00      	cmp	r3, #0
 800816a:	d023      	beq.n	80081b4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	4798      	blx	r3
 8008174:	e01e      	b.n	80081b4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008180:	2b00      	cmp	r3, #0
 8008182:	d10f      	bne.n	80081a4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f022 0210 	bic.w	r2, r2, #16
 8008192:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d003      	beq.n	80081b4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	f000 8306 	beq.w	80087ca <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081c2:	f003 0301 	and.w	r3, r3, #1
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	f000 8088 	beq.w	80082dc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2204      	movs	r2, #4
 80081d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a7a      	ldr	r2, [pc, #488]	; (80083c4 <HAL_DMA_IRQHandler+0xa08>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d04a      	beq.n	8008274 <HAL_DMA_IRQHandler+0x8b8>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a79      	ldr	r2, [pc, #484]	; (80083c8 <HAL_DMA_IRQHandler+0xa0c>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d045      	beq.n	8008274 <HAL_DMA_IRQHandler+0x8b8>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a77      	ldr	r2, [pc, #476]	; (80083cc <HAL_DMA_IRQHandler+0xa10>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d040      	beq.n	8008274 <HAL_DMA_IRQHandler+0x8b8>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a76      	ldr	r2, [pc, #472]	; (80083d0 <HAL_DMA_IRQHandler+0xa14>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d03b      	beq.n	8008274 <HAL_DMA_IRQHandler+0x8b8>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a74      	ldr	r2, [pc, #464]	; (80083d4 <HAL_DMA_IRQHandler+0xa18>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d036      	beq.n	8008274 <HAL_DMA_IRQHandler+0x8b8>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a73      	ldr	r2, [pc, #460]	; (80083d8 <HAL_DMA_IRQHandler+0xa1c>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d031      	beq.n	8008274 <HAL_DMA_IRQHandler+0x8b8>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a71      	ldr	r2, [pc, #452]	; (80083dc <HAL_DMA_IRQHandler+0xa20>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d02c      	beq.n	8008274 <HAL_DMA_IRQHandler+0x8b8>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a70      	ldr	r2, [pc, #448]	; (80083e0 <HAL_DMA_IRQHandler+0xa24>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d027      	beq.n	8008274 <HAL_DMA_IRQHandler+0x8b8>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a6e      	ldr	r2, [pc, #440]	; (80083e4 <HAL_DMA_IRQHandler+0xa28>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d022      	beq.n	8008274 <HAL_DMA_IRQHandler+0x8b8>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a6d      	ldr	r2, [pc, #436]	; (80083e8 <HAL_DMA_IRQHandler+0xa2c>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d01d      	beq.n	8008274 <HAL_DMA_IRQHandler+0x8b8>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a6b      	ldr	r2, [pc, #428]	; (80083ec <HAL_DMA_IRQHandler+0xa30>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d018      	beq.n	8008274 <HAL_DMA_IRQHandler+0x8b8>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a6a      	ldr	r2, [pc, #424]	; (80083f0 <HAL_DMA_IRQHandler+0xa34>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d013      	beq.n	8008274 <HAL_DMA_IRQHandler+0x8b8>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a68      	ldr	r2, [pc, #416]	; (80083f4 <HAL_DMA_IRQHandler+0xa38>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d00e      	beq.n	8008274 <HAL_DMA_IRQHandler+0x8b8>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a67      	ldr	r2, [pc, #412]	; (80083f8 <HAL_DMA_IRQHandler+0xa3c>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d009      	beq.n	8008274 <HAL_DMA_IRQHandler+0x8b8>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a65      	ldr	r2, [pc, #404]	; (80083fc <HAL_DMA_IRQHandler+0xa40>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d004      	beq.n	8008274 <HAL_DMA_IRQHandler+0x8b8>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a64      	ldr	r2, [pc, #400]	; (8008400 <HAL_DMA_IRQHandler+0xa44>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d108      	bne.n	8008286 <HAL_DMA_IRQHandler+0x8ca>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f022 0201 	bic.w	r2, r2, #1
 8008282:	601a      	str	r2, [r3, #0]
 8008284:	e007      	b.n	8008296 <HAL_DMA_IRQHandler+0x8da>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f022 0201 	bic.w	r2, r2, #1
 8008294:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	3301      	adds	r3, #1
 800829a:	60fb      	str	r3, [r7, #12]
 800829c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800829e:	429a      	cmp	r2, r3
 80082a0:	d307      	bcc.n	80082b2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f003 0301 	and.w	r3, r3, #1
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d1f2      	bne.n	8008296 <HAL_DMA_IRQHandler+0x8da>
 80082b0:	e000      	b.n	80082b4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80082b2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f003 0301 	and.w	r3, r3, #1
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d004      	beq.n	80082cc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2203      	movs	r2, #3
 80082c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80082ca:	e003      	b.n	80082d4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	f000 8272 	beq.w	80087ca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	4798      	blx	r3
 80082ee:	e26c      	b.n	80087ca <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a43      	ldr	r2, [pc, #268]	; (8008404 <HAL_DMA_IRQHandler+0xa48>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d022      	beq.n	8008340 <HAL_DMA_IRQHandler+0x984>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a42      	ldr	r2, [pc, #264]	; (8008408 <HAL_DMA_IRQHandler+0xa4c>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d01d      	beq.n	8008340 <HAL_DMA_IRQHandler+0x984>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a40      	ldr	r2, [pc, #256]	; (800840c <HAL_DMA_IRQHandler+0xa50>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d018      	beq.n	8008340 <HAL_DMA_IRQHandler+0x984>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a3f      	ldr	r2, [pc, #252]	; (8008410 <HAL_DMA_IRQHandler+0xa54>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d013      	beq.n	8008340 <HAL_DMA_IRQHandler+0x984>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a3d      	ldr	r2, [pc, #244]	; (8008414 <HAL_DMA_IRQHandler+0xa58>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d00e      	beq.n	8008340 <HAL_DMA_IRQHandler+0x984>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a3c      	ldr	r2, [pc, #240]	; (8008418 <HAL_DMA_IRQHandler+0xa5c>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d009      	beq.n	8008340 <HAL_DMA_IRQHandler+0x984>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a3a      	ldr	r2, [pc, #232]	; (800841c <HAL_DMA_IRQHandler+0xa60>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d004      	beq.n	8008340 <HAL_DMA_IRQHandler+0x984>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a39      	ldr	r2, [pc, #228]	; (8008420 <HAL_DMA_IRQHandler+0xa64>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d101      	bne.n	8008344 <HAL_DMA_IRQHandler+0x988>
 8008340:	2301      	movs	r3, #1
 8008342:	e000      	b.n	8008346 <HAL_DMA_IRQHandler+0x98a>
 8008344:	2300      	movs	r3, #0
 8008346:	2b00      	cmp	r3, #0
 8008348:	f000 823f 	beq.w	80087ca <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008358:	f003 031f 	and.w	r3, r3, #31
 800835c:	2204      	movs	r2, #4
 800835e:	409a      	lsls	r2, r3
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	4013      	ands	r3, r2
 8008364:	2b00      	cmp	r3, #0
 8008366:	f000 80cd 	beq.w	8008504 <HAL_DMA_IRQHandler+0xb48>
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	f003 0304 	and.w	r3, r3, #4
 8008370:	2b00      	cmp	r3, #0
 8008372:	f000 80c7 	beq.w	8008504 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800837a:	f003 031f 	and.w	r3, r3, #31
 800837e:	2204      	movs	r2, #4
 8008380:	409a      	lsls	r2, r3
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800838c:	2b00      	cmp	r3, #0
 800838e:	d049      	beq.n	8008424 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008396:	2b00      	cmp	r3, #0
 8008398:	d109      	bne.n	80083ae <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800839e:	2b00      	cmp	r3, #0
 80083a0:	f000 8210 	beq.w	80087c4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80083ac:	e20a      	b.n	80087c4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	f000 8206 	beq.w	80087c4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80083c0:	e200      	b.n	80087c4 <HAL_DMA_IRQHandler+0xe08>
 80083c2:	bf00      	nop
 80083c4:	40020010 	.word	0x40020010
 80083c8:	40020028 	.word	0x40020028
 80083cc:	40020040 	.word	0x40020040
 80083d0:	40020058 	.word	0x40020058
 80083d4:	40020070 	.word	0x40020070
 80083d8:	40020088 	.word	0x40020088
 80083dc:	400200a0 	.word	0x400200a0
 80083e0:	400200b8 	.word	0x400200b8
 80083e4:	40020410 	.word	0x40020410
 80083e8:	40020428 	.word	0x40020428
 80083ec:	40020440 	.word	0x40020440
 80083f0:	40020458 	.word	0x40020458
 80083f4:	40020470 	.word	0x40020470
 80083f8:	40020488 	.word	0x40020488
 80083fc:	400204a0 	.word	0x400204a0
 8008400:	400204b8 	.word	0x400204b8
 8008404:	58025408 	.word	0x58025408
 8008408:	5802541c 	.word	0x5802541c
 800840c:	58025430 	.word	0x58025430
 8008410:	58025444 	.word	0x58025444
 8008414:	58025458 	.word	0x58025458
 8008418:	5802546c 	.word	0x5802546c
 800841c:	58025480 	.word	0x58025480
 8008420:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	f003 0320 	and.w	r3, r3, #32
 800842a:	2b00      	cmp	r3, #0
 800842c:	d160      	bne.n	80084f0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a7f      	ldr	r2, [pc, #508]	; (8008630 <HAL_DMA_IRQHandler+0xc74>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d04a      	beq.n	80084ce <HAL_DMA_IRQHandler+0xb12>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a7d      	ldr	r2, [pc, #500]	; (8008634 <HAL_DMA_IRQHandler+0xc78>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d045      	beq.n	80084ce <HAL_DMA_IRQHandler+0xb12>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a7c      	ldr	r2, [pc, #496]	; (8008638 <HAL_DMA_IRQHandler+0xc7c>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d040      	beq.n	80084ce <HAL_DMA_IRQHandler+0xb12>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a7a      	ldr	r2, [pc, #488]	; (800863c <HAL_DMA_IRQHandler+0xc80>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d03b      	beq.n	80084ce <HAL_DMA_IRQHandler+0xb12>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a79      	ldr	r2, [pc, #484]	; (8008640 <HAL_DMA_IRQHandler+0xc84>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d036      	beq.n	80084ce <HAL_DMA_IRQHandler+0xb12>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a77      	ldr	r2, [pc, #476]	; (8008644 <HAL_DMA_IRQHandler+0xc88>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d031      	beq.n	80084ce <HAL_DMA_IRQHandler+0xb12>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a76      	ldr	r2, [pc, #472]	; (8008648 <HAL_DMA_IRQHandler+0xc8c>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d02c      	beq.n	80084ce <HAL_DMA_IRQHandler+0xb12>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a74      	ldr	r2, [pc, #464]	; (800864c <HAL_DMA_IRQHandler+0xc90>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d027      	beq.n	80084ce <HAL_DMA_IRQHandler+0xb12>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a73      	ldr	r2, [pc, #460]	; (8008650 <HAL_DMA_IRQHandler+0xc94>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d022      	beq.n	80084ce <HAL_DMA_IRQHandler+0xb12>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a71      	ldr	r2, [pc, #452]	; (8008654 <HAL_DMA_IRQHandler+0xc98>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d01d      	beq.n	80084ce <HAL_DMA_IRQHandler+0xb12>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a70      	ldr	r2, [pc, #448]	; (8008658 <HAL_DMA_IRQHandler+0xc9c>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d018      	beq.n	80084ce <HAL_DMA_IRQHandler+0xb12>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a6e      	ldr	r2, [pc, #440]	; (800865c <HAL_DMA_IRQHandler+0xca0>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d013      	beq.n	80084ce <HAL_DMA_IRQHandler+0xb12>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a6d      	ldr	r2, [pc, #436]	; (8008660 <HAL_DMA_IRQHandler+0xca4>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d00e      	beq.n	80084ce <HAL_DMA_IRQHandler+0xb12>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a6b      	ldr	r2, [pc, #428]	; (8008664 <HAL_DMA_IRQHandler+0xca8>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d009      	beq.n	80084ce <HAL_DMA_IRQHandler+0xb12>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a6a      	ldr	r2, [pc, #424]	; (8008668 <HAL_DMA_IRQHandler+0xcac>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d004      	beq.n	80084ce <HAL_DMA_IRQHandler+0xb12>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a68      	ldr	r2, [pc, #416]	; (800866c <HAL_DMA_IRQHandler+0xcb0>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d108      	bne.n	80084e0 <HAL_DMA_IRQHandler+0xb24>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f022 0208 	bic.w	r2, r2, #8
 80084dc:	601a      	str	r2, [r3, #0]
 80084de:	e007      	b.n	80084f0 <HAL_DMA_IRQHandler+0xb34>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f022 0204 	bic.w	r2, r2, #4
 80084ee:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	f000 8165 	beq.w	80087c4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008502:	e15f      	b.n	80087c4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008508:	f003 031f 	and.w	r3, r3, #31
 800850c:	2202      	movs	r2, #2
 800850e:	409a      	lsls	r2, r3
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	4013      	ands	r3, r2
 8008514:	2b00      	cmp	r3, #0
 8008516:	f000 80c5 	beq.w	80086a4 <HAL_DMA_IRQHandler+0xce8>
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	f003 0302 	and.w	r3, r3, #2
 8008520:	2b00      	cmp	r3, #0
 8008522:	f000 80bf 	beq.w	80086a4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800852a:	f003 031f 	and.w	r3, r3, #31
 800852e:	2202      	movs	r2, #2
 8008530:	409a      	lsls	r2, r3
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800853c:	2b00      	cmp	r3, #0
 800853e:	d018      	beq.n	8008572 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008546:	2b00      	cmp	r3, #0
 8008548:	d109      	bne.n	800855e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800854e:	2b00      	cmp	r3, #0
 8008550:	f000 813a 	beq.w	80087c8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800855c:	e134      	b.n	80087c8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008562:	2b00      	cmp	r3, #0
 8008564:	f000 8130 	beq.w	80087c8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008570:	e12a      	b.n	80087c8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	f003 0320 	and.w	r3, r3, #32
 8008578:	2b00      	cmp	r3, #0
 800857a:	f040 8089 	bne.w	8008690 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a2b      	ldr	r2, [pc, #172]	; (8008630 <HAL_DMA_IRQHandler+0xc74>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d04a      	beq.n	800861e <HAL_DMA_IRQHandler+0xc62>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a29      	ldr	r2, [pc, #164]	; (8008634 <HAL_DMA_IRQHandler+0xc78>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d045      	beq.n	800861e <HAL_DMA_IRQHandler+0xc62>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a28      	ldr	r2, [pc, #160]	; (8008638 <HAL_DMA_IRQHandler+0xc7c>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d040      	beq.n	800861e <HAL_DMA_IRQHandler+0xc62>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a26      	ldr	r2, [pc, #152]	; (800863c <HAL_DMA_IRQHandler+0xc80>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d03b      	beq.n	800861e <HAL_DMA_IRQHandler+0xc62>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a25      	ldr	r2, [pc, #148]	; (8008640 <HAL_DMA_IRQHandler+0xc84>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d036      	beq.n	800861e <HAL_DMA_IRQHandler+0xc62>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a23      	ldr	r2, [pc, #140]	; (8008644 <HAL_DMA_IRQHandler+0xc88>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d031      	beq.n	800861e <HAL_DMA_IRQHandler+0xc62>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a22      	ldr	r2, [pc, #136]	; (8008648 <HAL_DMA_IRQHandler+0xc8c>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d02c      	beq.n	800861e <HAL_DMA_IRQHandler+0xc62>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a20      	ldr	r2, [pc, #128]	; (800864c <HAL_DMA_IRQHandler+0xc90>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d027      	beq.n	800861e <HAL_DMA_IRQHandler+0xc62>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a1f      	ldr	r2, [pc, #124]	; (8008650 <HAL_DMA_IRQHandler+0xc94>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d022      	beq.n	800861e <HAL_DMA_IRQHandler+0xc62>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a1d      	ldr	r2, [pc, #116]	; (8008654 <HAL_DMA_IRQHandler+0xc98>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d01d      	beq.n	800861e <HAL_DMA_IRQHandler+0xc62>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a1c      	ldr	r2, [pc, #112]	; (8008658 <HAL_DMA_IRQHandler+0xc9c>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d018      	beq.n	800861e <HAL_DMA_IRQHandler+0xc62>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a1a      	ldr	r2, [pc, #104]	; (800865c <HAL_DMA_IRQHandler+0xca0>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d013      	beq.n	800861e <HAL_DMA_IRQHandler+0xc62>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a19      	ldr	r2, [pc, #100]	; (8008660 <HAL_DMA_IRQHandler+0xca4>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d00e      	beq.n	800861e <HAL_DMA_IRQHandler+0xc62>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a17      	ldr	r2, [pc, #92]	; (8008664 <HAL_DMA_IRQHandler+0xca8>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d009      	beq.n	800861e <HAL_DMA_IRQHandler+0xc62>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a16      	ldr	r2, [pc, #88]	; (8008668 <HAL_DMA_IRQHandler+0xcac>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d004      	beq.n	800861e <HAL_DMA_IRQHandler+0xc62>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a14      	ldr	r2, [pc, #80]	; (800866c <HAL_DMA_IRQHandler+0xcb0>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d128      	bne.n	8008670 <HAL_DMA_IRQHandler+0xcb4>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f022 0214 	bic.w	r2, r2, #20
 800862c:	601a      	str	r2, [r3, #0]
 800862e:	e027      	b.n	8008680 <HAL_DMA_IRQHandler+0xcc4>
 8008630:	40020010 	.word	0x40020010
 8008634:	40020028 	.word	0x40020028
 8008638:	40020040 	.word	0x40020040
 800863c:	40020058 	.word	0x40020058
 8008640:	40020070 	.word	0x40020070
 8008644:	40020088 	.word	0x40020088
 8008648:	400200a0 	.word	0x400200a0
 800864c:	400200b8 	.word	0x400200b8
 8008650:	40020410 	.word	0x40020410
 8008654:	40020428 	.word	0x40020428
 8008658:	40020440 	.word	0x40020440
 800865c:	40020458 	.word	0x40020458
 8008660:	40020470 	.word	0x40020470
 8008664:	40020488 	.word	0x40020488
 8008668:	400204a0 	.word	0x400204a0
 800866c:	400204b8 	.word	0x400204b8
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f022 020a 	bic.w	r2, r2, #10
 800867e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008694:	2b00      	cmp	r3, #0
 8008696:	f000 8097 	beq.w	80087c8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80086a2:	e091      	b.n	80087c8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086a8:	f003 031f 	and.w	r3, r3, #31
 80086ac:	2208      	movs	r2, #8
 80086ae:	409a      	lsls	r2, r3
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	4013      	ands	r3, r2
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	f000 8088 	beq.w	80087ca <HAL_DMA_IRQHandler+0xe0e>
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	f003 0308 	and.w	r3, r3, #8
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	f000 8082 	beq.w	80087ca <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a41      	ldr	r2, [pc, #260]	; (80087d0 <HAL_DMA_IRQHandler+0xe14>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d04a      	beq.n	8008766 <HAL_DMA_IRQHandler+0xdaa>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a3f      	ldr	r2, [pc, #252]	; (80087d4 <HAL_DMA_IRQHandler+0xe18>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d045      	beq.n	8008766 <HAL_DMA_IRQHandler+0xdaa>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a3e      	ldr	r2, [pc, #248]	; (80087d8 <HAL_DMA_IRQHandler+0xe1c>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d040      	beq.n	8008766 <HAL_DMA_IRQHandler+0xdaa>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a3c      	ldr	r2, [pc, #240]	; (80087dc <HAL_DMA_IRQHandler+0xe20>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d03b      	beq.n	8008766 <HAL_DMA_IRQHandler+0xdaa>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a3b      	ldr	r2, [pc, #236]	; (80087e0 <HAL_DMA_IRQHandler+0xe24>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d036      	beq.n	8008766 <HAL_DMA_IRQHandler+0xdaa>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a39      	ldr	r2, [pc, #228]	; (80087e4 <HAL_DMA_IRQHandler+0xe28>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d031      	beq.n	8008766 <HAL_DMA_IRQHandler+0xdaa>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a38      	ldr	r2, [pc, #224]	; (80087e8 <HAL_DMA_IRQHandler+0xe2c>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d02c      	beq.n	8008766 <HAL_DMA_IRQHandler+0xdaa>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a36      	ldr	r2, [pc, #216]	; (80087ec <HAL_DMA_IRQHandler+0xe30>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d027      	beq.n	8008766 <HAL_DMA_IRQHandler+0xdaa>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a35      	ldr	r2, [pc, #212]	; (80087f0 <HAL_DMA_IRQHandler+0xe34>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d022      	beq.n	8008766 <HAL_DMA_IRQHandler+0xdaa>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a33      	ldr	r2, [pc, #204]	; (80087f4 <HAL_DMA_IRQHandler+0xe38>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d01d      	beq.n	8008766 <HAL_DMA_IRQHandler+0xdaa>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a32      	ldr	r2, [pc, #200]	; (80087f8 <HAL_DMA_IRQHandler+0xe3c>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d018      	beq.n	8008766 <HAL_DMA_IRQHandler+0xdaa>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a30      	ldr	r2, [pc, #192]	; (80087fc <HAL_DMA_IRQHandler+0xe40>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d013      	beq.n	8008766 <HAL_DMA_IRQHandler+0xdaa>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a2f      	ldr	r2, [pc, #188]	; (8008800 <HAL_DMA_IRQHandler+0xe44>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d00e      	beq.n	8008766 <HAL_DMA_IRQHandler+0xdaa>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a2d      	ldr	r2, [pc, #180]	; (8008804 <HAL_DMA_IRQHandler+0xe48>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d009      	beq.n	8008766 <HAL_DMA_IRQHandler+0xdaa>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a2c      	ldr	r2, [pc, #176]	; (8008808 <HAL_DMA_IRQHandler+0xe4c>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d004      	beq.n	8008766 <HAL_DMA_IRQHandler+0xdaa>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a2a      	ldr	r2, [pc, #168]	; (800880c <HAL_DMA_IRQHandler+0xe50>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d108      	bne.n	8008778 <HAL_DMA_IRQHandler+0xdbc>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f022 021c 	bic.w	r2, r2, #28
 8008774:	601a      	str	r2, [r3, #0]
 8008776:	e007      	b.n	8008788 <HAL_DMA_IRQHandler+0xdcc>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f022 020e 	bic.w	r2, r2, #14
 8008786:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800878c:	f003 031f 	and.w	r3, r3, #31
 8008790:	2201      	movs	r2, #1
 8008792:	409a      	lsls	r2, r3
 8008794:	69fb      	ldr	r3, [r7, #28]
 8008796:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2201      	movs	r2, #1
 800879c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2201      	movs	r2, #1
 80087a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d009      	beq.n	80087ca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	4798      	blx	r3
 80087be:	e004      	b.n	80087ca <HAL_DMA_IRQHandler+0xe0e>
          return;
 80087c0:	bf00      	nop
 80087c2:	e002      	b.n	80087ca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80087c4:	bf00      	nop
 80087c6:	e000      	b.n	80087ca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80087c8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80087ca:	3728      	adds	r7, #40	; 0x28
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}
 80087d0:	40020010 	.word	0x40020010
 80087d4:	40020028 	.word	0x40020028
 80087d8:	40020040 	.word	0x40020040
 80087dc:	40020058 	.word	0x40020058
 80087e0:	40020070 	.word	0x40020070
 80087e4:	40020088 	.word	0x40020088
 80087e8:	400200a0 	.word	0x400200a0
 80087ec:	400200b8 	.word	0x400200b8
 80087f0:	40020410 	.word	0x40020410
 80087f4:	40020428 	.word	0x40020428
 80087f8:	40020440 	.word	0x40020440
 80087fc:	40020458 	.word	0x40020458
 8008800:	40020470 	.word	0x40020470
 8008804:	40020488 	.word	0x40020488
 8008808:	400204a0 	.word	0x400204a0
 800880c:	400204b8 	.word	0x400204b8

08008810 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008810:	b480      	push	{r7}
 8008812:	b087      	sub	sp, #28
 8008814:	af00      	add	r7, sp, #0
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	60b9      	str	r1, [r7, #8]
 800881a:	607a      	str	r2, [r7, #4]
 800881c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008822:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008828:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a7f      	ldr	r2, [pc, #508]	; (8008a2c <DMA_SetConfig+0x21c>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d072      	beq.n	800891a <DMA_SetConfig+0x10a>
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a7d      	ldr	r2, [pc, #500]	; (8008a30 <DMA_SetConfig+0x220>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d06d      	beq.n	800891a <DMA_SetConfig+0x10a>
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a7c      	ldr	r2, [pc, #496]	; (8008a34 <DMA_SetConfig+0x224>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d068      	beq.n	800891a <DMA_SetConfig+0x10a>
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a7a      	ldr	r2, [pc, #488]	; (8008a38 <DMA_SetConfig+0x228>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d063      	beq.n	800891a <DMA_SetConfig+0x10a>
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a79      	ldr	r2, [pc, #484]	; (8008a3c <DMA_SetConfig+0x22c>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d05e      	beq.n	800891a <DMA_SetConfig+0x10a>
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a77      	ldr	r2, [pc, #476]	; (8008a40 <DMA_SetConfig+0x230>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d059      	beq.n	800891a <DMA_SetConfig+0x10a>
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a76      	ldr	r2, [pc, #472]	; (8008a44 <DMA_SetConfig+0x234>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d054      	beq.n	800891a <DMA_SetConfig+0x10a>
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a74      	ldr	r2, [pc, #464]	; (8008a48 <DMA_SetConfig+0x238>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d04f      	beq.n	800891a <DMA_SetConfig+0x10a>
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a73      	ldr	r2, [pc, #460]	; (8008a4c <DMA_SetConfig+0x23c>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d04a      	beq.n	800891a <DMA_SetConfig+0x10a>
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a71      	ldr	r2, [pc, #452]	; (8008a50 <DMA_SetConfig+0x240>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d045      	beq.n	800891a <DMA_SetConfig+0x10a>
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a70      	ldr	r2, [pc, #448]	; (8008a54 <DMA_SetConfig+0x244>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d040      	beq.n	800891a <DMA_SetConfig+0x10a>
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a6e      	ldr	r2, [pc, #440]	; (8008a58 <DMA_SetConfig+0x248>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d03b      	beq.n	800891a <DMA_SetConfig+0x10a>
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a6d      	ldr	r2, [pc, #436]	; (8008a5c <DMA_SetConfig+0x24c>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d036      	beq.n	800891a <DMA_SetConfig+0x10a>
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a6b      	ldr	r2, [pc, #428]	; (8008a60 <DMA_SetConfig+0x250>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d031      	beq.n	800891a <DMA_SetConfig+0x10a>
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a6a      	ldr	r2, [pc, #424]	; (8008a64 <DMA_SetConfig+0x254>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d02c      	beq.n	800891a <DMA_SetConfig+0x10a>
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a68      	ldr	r2, [pc, #416]	; (8008a68 <DMA_SetConfig+0x258>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d027      	beq.n	800891a <DMA_SetConfig+0x10a>
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a67      	ldr	r2, [pc, #412]	; (8008a6c <DMA_SetConfig+0x25c>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d022      	beq.n	800891a <DMA_SetConfig+0x10a>
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a65      	ldr	r2, [pc, #404]	; (8008a70 <DMA_SetConfig+0x260>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d01d      	beq.n	800891a <DMA_SetConfig+0x10a>
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a64      	ldr	r2, [pc, #400]	; (8008a74 <DMA_SetConfig+0x264>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d018      	beq.n	800891a <DMA_SetConfig+0x10a>
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a62      	ldr	r2, [pc, #392]	; (8008a78 <DMA_SetConfig+0x268>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d013      	beq.n	800891a <DMA_SetConfig+0x10a>
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a61      	ldr	r2, [pc, #388]	; (8008a7c <DMA_SetConfig+0x26c>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d00e      	beq.n	800891a <DMA_SetConfig+0x10a>
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a5f      	ldr	r2, [pc, #380]	; (8008a80 <DMA_SetConfig+0x270>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d009      	beq.n	800891a <DMA_SetConfig+0x10a>
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a5e      	ldr	r2, [pc, #376]	; (8008a84 <DMA_SetConfig+0x274>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d004      	beq.n	800891a <DMA_SetConfig+0x10a>
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a5c      	ldr	r2, [pc, #368]	; (8008a88 <DMA_SetConfig+0x278>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d101      	bne.n	800891e <DMA_SetConfig+0x10e>
 800891a:	2301      	movs	r3, #1
 800891c:	e000      	b.n	8008920 <DMA_SetConfig+0x110>
 800891e:	2300      	movs	r3, #0
 8008920:	2b00      	cmp	r3, #0
 8008922:	d00d      	beq.n	8008940 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008928:	68fa      	ldr	r2, [r7, #12]
 800892a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800892c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008932:	2b00      	cmp	r3, #0
 8008934:	d004      	beq.n	8008940 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800893a:	68fa      	ldr	r2, [r7, #12]
 800893c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800893e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a39      	ldr	r2, [pc, #228]	; (8008a2c <DMA_SetConfig+0x21c>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d04a      	beq.n	80089e0 <DMA_SetConfig+0x1d0>
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a38      	ldr	r2, [pc, #224]	; (8008a30 <DMA_SetConfig+0x220>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d045      	beq.n	80089e0 <DMA_SetConfig+0x1d0>
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a36      	ldr	r2, [pc, #216]	; (8008a34 <DMA_SetConfig+0x224>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d040      	beq.n	80089e0 <DMA_SetConfig+0x1d0>
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a35      	ldr	r2, [pc, #212]	; (8008a38 <DMA_SetConfig+0x228>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d03b      	beq.n	80089e0 <DMA_SetConfig+0x1d0>
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a33      	ldr	r2, [pc, #204]	; (8008a3c <DMA_SetConfig+0x22c>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d036      	beq.n	80089e0 <DMA_SetConfig+0x1d0>
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a32      	ldr	r2, [pc, #200]	; (8008a40 <DMA_SetConfig+0x230>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d031      	beq.n	80089e0 <DMA_SetConfig+0x1d0>
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a30      	ldr	r2, [pc, #192]	; (8008a44 <DMA_SetConfig+0x234>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d02c      	beq.n	80089e0 <DMA_SetConfig+0x1d0>
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a2f      	ldr	r2, [pc, #188]	; (8008a48 <DMA_SetConfig+0x238>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d027      	beq.n	80089e0 <DMA_SetConfig+0x1d0>
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a2d      	ldr	r2, [pc, #180]	; (8008a4c <DMA_SetConfig+0x23c>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d022      	beq.n	80089e0 <DMA_SetConfig+0x1d0>
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a2c      	ldr	r2, [pc, #176]	; (8008a50 <DMA_SetConfig+0x240>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d01d      	beq.n	80089e0 <DMA_SetConfig+0x1d0>
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a2a      	ldr	r2, [pc, #168]	; (8008a54 <DMA_SetConfig+0x244>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d018      	beq.n	80089e0 <DMA_SetConfig+0x1d0>
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a29      	ldr	r2, [pc, #164]	; (8008a58 <DMA_SetConfig+0x248>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d013      	beq.n	80089e0 <DMA_SetConfig+0x1d0>
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a27      	ldr	r2, [pc, #156]	; (8008a5c <DMA_SetConfig+0x24c>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d00e      	beq.n	80089e0 <DMA_SetConfig+0x1d0>
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a26      	ldr	r2, [pc, #152]	; (8008a60 <DMA_SetConfig+0x250>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d009      	beq.n	80089e0 <DMA_SetConfig+0x1d0>
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a24      	ldr	r2, [pc, #144]	; (8008a64 <DMA_SetConfig+0x254>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d004      	beq.n	80089e0 <DMA_SetConfig+0x1d0>
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a23      	ldr	r2, [pc, #140]	; (8008a68 <DMA_SetConfig+0x258>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d101      	bne.n	80089e4 <DMA_SetConfig+0x1d4>
 80089e0:	2301      	movs	r3, #1
 80089e2:	e000      	b.n	80089e6 <DMA_SetConfig+0x1d6>
 80089e4:	2300      	movs	r3, #0
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d059      	beq.n	8008a9e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089ee:	f003 031f 	and.w	r3, r3, #31
 80089f2:	223f      	movs	r2, #63	; 0x3f
 80089f4:	409a      	lsls	r2, r3
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008a08:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	683a      	ldr	r2, [r7, #0]
 8008a10:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	2b40      	cmp	r3, #64	; 0x40
 8008a18:	d138      	bne.n	8008a8c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	68ba      	ldr	r2, [r7, #8]
 8008a28:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008a2a:	e086      	b.n	8008b3a <DMA_SetConfig+0x32a>
 8008a2c:	40020010 	.word	0x40020010
 8008a30:	40020028 	.word	0x40020028
 8008a34:	40020040 	.word	0x40020040
 8008a38:	40020058 	.word	0x40020058
 8008a3c:	40020070 	.word	0x40020070
 8008a40:	40020088 	.word	0x40020088
 8008a44:	400200a0 	.word	0x400200a0
 8008a48:	400200b8 	.word	0x400200b8
 8008a4c:	40020410 	.word	0x40020410
 8008a50:	40020428 	.word	0x40020428
 8008a54:	40020440 	.word	0x40020440
 8008a58:	40020458 	.word	0x40020458
 8008a5c:	40020470 	.word	0x40020470
 8008a60:	40020488 	.word	0x40020488
 8008a64:	400204a0 	.word	0x400204a0
 8008a68:	400204b8 	.word	0x400204b8
 8008a6c:	58025408 	.word	0x58025408
 8008a70:	5802541c 	.word	0x5802541c
 8008a74:	58025430 	.word	0x58025430
 8008a78:	58025444 	.word	0x58025444
 8008a7c:	58025458 	.word	0x58025458
 8008a80:	5802546c 	.word	0x5802546c
 8008a84:	58025480 	.word	0x58025480
 8008a88:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	68ba      	ldr	r2, [r7, #8]
 8008a92:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	60da      	str	r2, [r3, #12]
}
 8008a9c:	e04d      	b.n	8008b3a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4a29      	ldr	r2, [pc, #164]	; (8008b48 <DMA_SetConfig+0x338>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d022      	beq.n	8008aee <DMA_SetConfig+0x2de>
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a27      	ldr	r2, [pc, #156]	; (8008b4c <DMA_SetConfig+0x33c>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d01d      	beq.n	8008aee <DMA_SetConfig+0x2de>
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a26      	ldr	r2, [pc, #152]	; (8008b50 <DMA_SetConfig+0x340>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d018      	beq.n	8008aee <DMA_SetConfig+0x2de>
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a24      	ldr	r2, [pc, #144]	; (8008b54 <DMA_SetConfig+0x344>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d013      	beq.n	8008aee <DMA_SetConfig+0x2de>
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a23      	ldr	r2, [pc, #140]	; (8008b58 <DMA_SetConfig+0x348>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d00e      	beq.n	8008aee <DMA_SetConfig+0x2de>
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a21      	ldr	r2, [pc, #132]	; (8008b5c <DMA_SetConfig+0x34c>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d009      	beq.n	8008aee <DMA_SetConfig+0x2de>
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a20      	ldr	r2, [pc, #128]	; (8008b60 <DMA_SetConfig+0x350>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d004      	beq.n	8008aee <DMA_SetConfig+0x2de>
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a1e      	ldr	r2, [pc, #120]	; (8008b64 <DMA_SetConfig+0x354>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d101      	bne.n	8008af2 <DMA_SetConfig+0x2e2>
 8008aee:	2301      	movs	r3, #1
 8008af0:	e000      	b.n	8008af4 <DMA_SetConfig+0x2e4>
 8008af2:	2300      	movs	r3, #0
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d020      	beq.n	8008b3a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008afc:	f003 031f 	and.w	r3, r3, #31
 8008b00:	2201      	movs	r2, #1
 8008b02:	409a      	lsls	r2, r3
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	683a      	ldr	r2, [r7, #0]
 8008b0e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	2b40      	cmp	r3, #64	; 0x40
 8008b16:	d108      	bne.n	8008b2a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	68ba      	ldr	r2, [r7, #8]
 8008b26:	60da      	str	r2, [r3, #12]
}
 8008b28:	e007      	b.n	8008b3a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	68ba      	ldr	r2, [r7, #8]
 8008b30:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	60da      	str	r2, [r3, #12]
}
 8008b3a:	bf00      	nop
 8008b3c:	371c      	adds	r7, #28
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr
 8008b46:	bf00      	nop
 8008b48:	58025408 	.word	0x58025408
 8008b4c:	5802541c 	.word	0x5802541c
 8008b50:	58025430 	.word	0x58025430
 8008b54:	58025444 	.word	0x58025444
 8008b58:	58025458 	.word	0x58025458
 8008b5c:	5802546c 	.word	0x5802546c
 8008b60:	58025480 	.word	0x58025480
 8008b64:	58025494 	.word	0x58025494

08008b68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b085      	sub	sp, #20
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a42      	ldr	r2, [pc, #264]	; (8008c80 <DMA_CalcBaseAndBitshift+0x118>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d04a      	beq.n	8008c10 <DMA_CalcBaseAndBitshift+0xa8>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a41      	ldr	r2, [pc, #260]	; (8008c84 <DMA_CalcBaseAndBitshift+0x11c>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d045      	beq.n	8008c10 <DMA_CalcBaseAndBitshift+0xa8>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a3f      	ldr	r2, [pc, #252]	; (8008c88 <DMA_CalcBaseAndBitshift+0x120>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d040      	beq.n	8008c10 <DMA_CalcBaseAndBitshift+0xa8>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a3e      	ldr	r2, [pc, #248]	; (8008c8c <DMA_CalcBaseAndBitshift+0x124>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d03b      	beq.n	8008c10 <DMA_CalcBaseAndBitshift+0xa8>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a3c      	ldr	r2, [pc, #240]	; (8008c90 <DMA_CalcBaseAndBitshift+0x128>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d036      	beq.n	8008c10 <DMA_CalcBaseAndBitshift+0xa8>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a3b      	ldr	r2, [pc, #236]	; (8008c94 <DMA_CalcBaseAndBitshift+0x12c>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d031      	beq.n	8008c10 <DMA_CalcBaseAndBitshift+0xa8>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a39      	ldr	r2, [pc, #228]	; (8008c98 <DMA_CalcBaseAndBitshift+0x130>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d02c      	beq.n	8008c10 <DMA_CalcBaseAndBitshift+0xa8>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a38      	ldr	r2, [pc, #224]	; (8008c9c <DMA_CalcBaseAndBitshift+0x134>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d027      	beq.n	8008c10 <DMA_CalcBaseAndBitshift+0xa8>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a36      	ldr	r2, [pc, #216]	; (8008ca0 <DMA_CalcBaseAndBitshift+0x138>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d022      	beq.n	8008c10 <DMA_CalcBaseAndBitshift+0xa8>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a35      	ldr	r2, [pc, #212]	; (8008ca4 <DMA_CalcBaseAndBitshift+0x13c>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d01d      	beq.n	8008c10 <DMA_CalcBaseAndBitshift+0xa8>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a33      	ldr	r2, [pc, #204]	; (8008ca8 <DMA_CalcBaseAndBitshift+0x140>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d018      	beq.n	8008c10 <DMA_CalcBaseAndBitshift+0xa8>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a32      	ldr	r2, [pc, #200]	; (8008cac <DMA_CalcBaseAndBitshift+0x144>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d013      	beq.n	8008c10 <DMA_CalcBaseAndBitshift+0xa8>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a30      	ldr	r2, [pc, #192]	; (8008cb0 <DMA_CalcBaseAndBitshift+0x148>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d00e      	beq.n	8008c10 <DMA_CalcBaseAndBitshift+0xa8>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a2f      	ldr	r2, [pc, #188]	; (8008cb4 <DMA_CalcBaseAndBitshift+0x14c>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d009      	beq.n	8008c10 <DMA_CalcBaseAndBitshift+0xa8>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a2d      	ldr	r2, [pc, #180]	; (8008cb8 <DMA_CalcBaseAndBitshift+0x150>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d004      	beq.n	8008c10 <DMA_CalcBaseAndBitshift+0xa8>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a2c      	ldr	r2, [pc, #176]	; (8008cbc <DMA_CalcBaseAndBitshift+0x154>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d101      	bne.n	8008c14 <DMA_CalcBaseAndBitshift+0xac>
 8008c10:	2301      	movs	r3, #1
 8008c12:	e000      	b.n	8008c16 <DMA_CalcBaseAndBitshift+0xae>
 8008c14:	2300      	movs	r3, #0
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d024      	beq.n	8008c64 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	3b10      	subs	r3, #16
 8008c22:	4a27      	ldr	r2, [pc, #156]	; (8008cc0 <DMA_CalcBaseAndBitshift+0x158>)
 8008c24:	fba2 2303 	umull	r2, r3, r2, r3
 8008c28:	091b      	lsrs	r3, r3, #4
 8008c2a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f003 0307 	and.w	r3, r3, #7
 8008c32:	4a24      	ldr	r2, [pc, #144]	; (8008cc4 <DMA_CalcBaseAndBitshift+0x15c>)
 8008c34:	5cd3      	ldrb	r3, [r2, r3]
 8008c36:	461a      	mov	r2, r3
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2b03      	cmp	r3, #3
 8008c40:	d908      	bls.n	8008c54 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	461a      	mov	r2, r3
 8008c48:	4b1f      	ldr	r3, [pc, #124]	; (8008cc8 <DMA_CalcBaseAndBitshift+0x160>)
 8008c4a:	4013      	ands	r3, r2
 8008c4c:	1d1a      	adds	r2, r3, #4
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	659a      	str	r2, [r3, #88]	; 0x58
 8008c52:	e00d      	b.n	8008c70 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	461a      	mov	r2, r3
 8008c5a:	4b1b      	ldr	r3, [pc, #108]	; (8008cc8 <DMA_CalcBaseAndBitshift+0x160>)
 8008c5c:	4013      	ands	r3, r2
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	6593      	str	r3, [r2, #88]	; 0x58
 8008c62:	e005      	b.n	8008c70 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3714      	adds	r7, #20
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr
 8008c80:	40020010 	.word	0x40020010
 8008c84:	40020028 	.word	0x40020028
 8008c88:	40020040 	.word	0x40020040
 8008c8c:	40020058 	.word	0x40020058
 8008c90:	40020070 	.word	0x40020070
 8008c94:	40020088 	.word	0x40020088
 8008c98:	400200a0 	.word	0x400200a0
 8008c9c:	400200b8 	.word	0x400200b8
 8008ca0:	40020410 	.word	0x40020410
 8008ca4:	40020428 	.word	0x40020428
 8008ca8:	40020440 	.word	0x40020440
 8008cac:	40020458 	.word	0x40020458
 8008cb0:	40020470 	.word	0x40020470
 8008cb4:	40020488 	.word	0x40020488
 8008cb8:	400204a0 	.word	0x400204a0
 8008cbc:	400204b8 	.word	0x400204b8
 8008cc0:	aaaaaaab 	.word	0xaaaaaaab
 8008cc4:	0801038c 	.word	0x0801038c
 8008cc8:	fffffc00 	.word	0xfffffc00

08008ccc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b085      	sub	sp, #20
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	699b      	ldr	r3, [r3, #24]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d120      	bne.n	8008d22 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ce4:	2b03      	cmp	r3, #3
 8008ce6:	d858      	bhi.n	8008d9a <DMA_CheckFifoParam+0xce>
 8008ce8:	a201      	add	r2, pc, #4	; (adr r2, 8008cf0 <DMA_CheckFifoParam+0x24>)
 8008cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cee:	bf00      	nop
 8008cf0:	08008d01 	.word	0x08008d01
 8008cf4:	08008d13 	.word	0x08008d13
 8008cf8:	08008d01 	.word	0x08008d01
 8008cfc:	08008d9b 	.word	0x08008d9b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d048      	beq.n	8008d9e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008d10:	e045      	b.n	8008d9e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008d1a:	d142      	bne.n	8008da2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008d20:	e03f      	b.n	8008da2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	699b      	ldr	r3, [r3, #24]
 8008d26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d2a:	d123      	bne.n	8008d74 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d30:	2b03      	cmp	r3, #3
 8008d32:	d838      	bhi.n	8008da6 <DMA_CheckFifoParam+0xda>
 8008d34:	a201      	add	r2, pc, #4	; (adr r2, 8008d3c <DMA_CheckFifoParam+0x70>)
 8008d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d3a:	bf00      	nop
 8008d3c:	08008d4d 	.word	0x08008d4d
 8008d40:	08008d53 	.word	0x08008d53
 8008d44:	08008d4d 	.word	0x08008d4d
 8008d48:	08008d65 	.word	0x08008d65
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	73fb      	strb	r3, [r7, #15]
        break;
 8008d50:	e030      	b.n	8008db4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d025      	beq.n	8008daa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008d62:	e022      	b.n	8008daa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008d6c:	d11f      	bne.n	8008dae <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008d72:	e01c      	b.n	8008dae <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d78:	2b02      	cmp	r3, #2
 8008d7a:	d902      	bls.n	8008d82 <DMA_CheckFifoParam+0xb6>
 8008d7c:	2b03      	cmp	r3, #3
 8008d7e:	d003      	beq.n	8008d88 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008d80:	e018      	b.n	8008db4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008d82:	2301      	movs	r3, #1
 8008d84:	73fb      	strb	r3, [r7, #15]
        break;
 8008d86:	e015      	b.n	8008db4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d00e      	beq.n	8008db2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008d94:	2301      	movs	r3, #1
 8008d96:	73fb      	strb	r3, [r7, #15]
    break;
 8008d98:	e00b      	b.n	8008db2 <DMA_CheckFifoParam+0xe6>
        break;
 8008d9a:	bf00      	nop
 8008d9c:	e00a      	b.n	8008db4 <DMA_CheckFifoParam+0xe8>
        break;
 8008d9e:	bf00      	nop
 8008da0:	e008      	b.n	8008db4 <DMA_CheckFifoParam+0xe8>
        break;
 8008da2:	bf00      	nop
 8008da4:	e006      	b.n	8008db4 <DMA_CheckFifoParam+0xe8>
        break;
 8008da6:	bf00      	nop
 8008da8:	e004      	b.n	8008db4 <DMA_CheckFifoParam+0xe8>
        break;
 8008daa:	bf00      	nop
 8008dac:	e002      	b.n	8008db4 <DMA_CheckFifoParam+0xe8>
        break;
 8008dae:	bf00      	nop
 8008db0:	e000      	b.n	8008db4 <DMA_CheckFifoParam+0xe8>
    break;
 8008db2:	bf00      	nop
    }
  }

  return status;
 8008db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3714      	adds	r7, #20
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr
 8008dc2:	bf00      	nop

08008dc4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b085      	sub	sp, #20
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a38      	ldr	r2, [pc, #224]	; (8008eb8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d022      	beq.n	8008e22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a36      	ldr	r2, [pc, #216]	; (8008ebc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d01d      	beq.n	8008e22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a35      	ldr	r2, [pc, #212]	; (8008ec0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d018      	beq.n	8008e22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a33      	ldr	r2, [pc, #204]	; (8008ec4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d013      	beq.n	8008e22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a32      	ldr	r2, [pc, #200]	; (8008ec8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d00e      	beq.n	8008e22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a30      	ldr	r2, [pc, #192]	; (8008ecc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d009      	beq.n	8008e22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a2f      	ldr	r2, [pc, #188]	; (8008ed0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d004      	beq.n	8008e22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a2d      	ldr	r2, [pc, #180]	; (8008ed4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d101      	bne.n	8008e26 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008e22:	2301      	movs	r3, #1
 8008e24:	e000      	b.n	8008e28 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008e26:	2300      	movs	r3, #0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d01a      	beq.n	8008e62 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	3b08      	subs	r3, #8
 8008e34:	4a28      	ldr	r2, [pc, #160]	; (8008ed8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008e36:	fba2 2303 	umull	r2, r3, r2, r3
 8008e3a:	091b      	lsrs	r3, r3, #4
 8008e3c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008e3e:	68fa      	ldr	r2, [r7, #12]
 8008e40:	4b26      	ldr	r3, [pc, #152]	; (8008edc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008e42:	4413      	add	r3, r2
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	461a      	mov	r2, r3
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	4a24      	ldr	r2, [pc, #144]	; (8008ee0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008e50:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f003 031f 	and.w	r3, r3, #31
 8008e58:	2201      	movs	r2, #1
 8008e5a:	409a      	lsls	r2, r3
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008e60:	e024      	b.n	8008eac <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	3b10      	subs	r3, #16
 8008e6a:	4a1e      	ldr	r2, [pc, #120]	; (8008ee4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8008e70:	091b      	lsrs	r3, r3, #4
 8008e72:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	4a1c      	ldr	r2, [pc, #112]	; (8008ee8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d806      	bhi.n	8008e8a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	4a1b      	ldr	r2, [pc, #108]	; (8008eec <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d902      	bls.n	8008e8a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	3308      	adds	r3, #8
 8008e88:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008e8a:	68fa      	ldr	r2, [r7, #12]
 8008e8c:	4b18      	ldr	r3, [pc, #96]	; (8008ef0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008e8e:	4413      	add	r3, r2
 8008e90:	009b      	lsls	r3, r3, #2
 8008e92:	461a      	mov	r2, r3
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	4a16      	ldr	r2, [pc, #88]	; (8008ef4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008e9c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f003 031f 	and.w	r3, r3, #31
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	409a      	lsls	r2, r3
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008eac:	bf00      	nop
 8008eae:	3714      	adds	r7, #20
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr
 8008eb8:	58025408 	.word	0x58025408
 8008ebc:	5802541c 	.word	0x5802541c
 8008ec0:	58025430 	.word	0x58025430
 8008ec4:	58025444 	.word	0x58025444
 8008ec8:	58025458 	.word	0x58025458
 8008ecc:	5802546c 	.word	0x5802546c
 8008ed0:	58025480 	.word	0x58025480
 8008ed4:	58025494 	.word	0x58025494
 8008ed8:	cccccccd 	.word	0xcccccccd
 8008edc:	16009600 	.word	0x16009600
 8008ee0:	58025880 	.word	0x58025880
 8008ee4:	aaaaaaab 	.word	0xaaaaaaab
 8008ee8:	400204b8 	.word	0x400204b8
 8008eec:	4002040f 	.word	0x4002040f
 8008ef0:	10008200 	.word	0x10008200
 8008ef4:	40020880 	.word	0x40020880

08008ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b085      	sub	sp, #20
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d04a      	beq.n	8008fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2b08      	cmp	r3, #8
 8008f12:	d847      	bhi.n	8008fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a25      	ldr	r2, [pc, #148]	; (8008fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d022      	beq.n	8008f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a24      	ldr	r2, [pc, #144]	; (8008fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d01d      	beq.n	8008f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a22      	ldr	r2, [pc, #136]	; (8008fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d018      	beq.n	8008f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4a21      	ldr	r2, [pc, #132]	; (8008fbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d013      	beq.n	8008f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a1f      	ldr	r2, [pc, #124]	; (8008fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d00e      	beq.n	8008f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a1e      	ldr	r2, [pc, #120]	; (8008fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d009      	beq.n	8008f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a1c      	ldr	r2, [pc, #112]	; (8008fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d004      	beq.n	8008f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4a1b      	ldr	r2, [pc, #108]	; (8008fcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d101      	bne.n	8008f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008f64:	2301      	movs	r3, #1
 8008f66:	e000      	b.n	8008f6a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008f68:	2300      	movs	r3, #0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d00a      	beq.n	8008f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008f6e:	68fa      	ldr	r2, [r7, #12]
 8008f70:	4b17      	ldr	r3, [pc, #92]	; (8008fd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008f72:	4413      	add	r3, r2
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	461a      	mov	r2, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	4a15      	ldr	r2, [pc, #84]	; (8008fd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008f80:	671a      	str	r2, [r3, #112]	; 0x70
 8008f82:	e009      	b.n	8008f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008f84:	68fa      	ldr	r2, [r7, #12]
 8008f86:	4b14      	ldr	r3, [pc, #80]	; (8008fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008f88:	4413      	add	r3, r2
 8008f8a:	009b      	lsls	r3, r3, #2
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	4a11      	ldr	r2, [pc, #68]	; (8008fdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008f96:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	3b01      	subs	r3, #1
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	409a      	lsls	r2, r3
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008fa4:	bf00      	nop
 8008fa6:	3714      	adds	r7, #20
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr
 8008fb0:	58025408 	.word	0x58025408
 8008fb4:	5802541c 	.word	0x5802541c
 8008fb8:	58025430 	.word	0x58025430
 8008fbc:	58025444 	.word	0x58025444
 8008fc0:	58025458 	.word	0x58025458
 8008fc4:	5802546c 	.word	0x5802546c
 8008fc8:	58025480 	.word	0x58025480
 8008fcc:	58025494 	.word	0x58025494
 8008fd0:	1600963f 	.word	0x1600963f
 8008fd4:	58025940 	.word	0x58025940
 8008fd8:	1000823f 	.word	0x1000823f
 8008fdc:	40020940 	.word	0x40020940

08008fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b089      	sub	sp, #36	; 0x24
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008fea:	2300      	movs	r3, #0
 8008fec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008fee:	4b86      	ldr	r3, [pc, #536]	; (8009208 <HAL_GPIO_Init+0x228>)
 8008ff0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008ff2:	e18c      	b.n	800930e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	681a      	ldr	r2, [r3, #0]
 8008ff8:	2101      	movs	r1, #1
 8008ffa:	69fb      	ldr	r3, [r7, #28]
 8008ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8009000:	4013      	ands	r3, r2
 8009002:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	2b00      	cmp	r3, #0
 8009008:	f000 817e 	beq.w	8009308 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	f003 0303 	and.w	r3, r3, #3
 8009014:	2b01      	cmp	r3, #1
 8009016:	d005      	beq.n	8009024 <HAL_GPIO_Init+0x44>
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	f003 0303 	and.w	r3, r3, #3
 8009020:	2b02      	cmp	r3, #2
 8009022:	d130      	bne.n	8009086 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	005b      	lsls	r3, r3, #1
 800902e:	2203      	movs	r2, #3
 8009030:	fa02 f303 	lsl.w	r3, r2, r3
 8009034:	43db      	mvns	r3, r3
 8009036:	69ba      	ldr	r2, [r7, #24]
 8009038:	4013      	ands	r3, r2
 800903a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	68da      	ldr	r2, [r3, #12]
 8009040:	69fb      	ldr	r3, [r7, #28]
 8009042:	005b      	lsls	r3, r3, #1
 8009044:	fa02 f303 	lsl.w	r3, r2, r3
 8009048:	69ba      	ldr	r2, [r7, #24]
 800904a:	4313      	orrs	r3, r2
 800904c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	69ba      	ldr	r2, [r7, #24]
 8009052:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800905a:	2201      	movs	r2, #1
 800905c:	69fb      	ldr	r3, [r7, #28]
 800905e:	fa02 f303 	lsl.w	r3, r2, r3
 8009062:	43db      	mvns	r3, r3
 8009064:	69ba      	ldr	r2, [r7, #24]
 8009066:	4013      	ands	r3, r2
 8009068:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	091b      	lsrs	r3, r3, #4
 8009070:	f003 0201 	and.w	r2, r3, #1
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	fa02 f303 	lsl.w	r3, r2, r3
 800907a:	69ba      	ldr	r2, [r7, #24]
 800907c:	4313      	orrs	r3, r2
 800907e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	69ba      	ldr	r2, [r7, #24]
 8009084:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	f003 0303 	and.w	r3, r3, #3
 800908e:	2b03      	cmp	r3, #3
 8009090:	d017      	beq.n	80090c2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	005b      	lsls	r3, r3, #1
 800909c:	2203      	movs	r2, #3
 800909e:	fa02 f303 	lsl.w	r3, r2, r3
 80090a2:	43db      	mvns	r3, r3
 80090a4:	69ba      	ldr	r2, [r7, #24]
 80090a6:	4013      	ands	r3, r2
 80090a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	689a      	ldr	r2, [r3, #8]
 80090ae:	69fb      	ldr	r3, [r7, #28]
 80090b0:	005b      	lsls	r3, r3, #1
 80090b2:	fa02 f303 	lsl.w	r3, r2, r3
 80090b6:	69ba      	ldr	r2, [r7, #24]
 80090b8:	4313      	orrs	r3, r2
 80090ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	69ba      	ldr	r2, [r7, #24]
 80090c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	f003 0303 	and.w	r3, r3, #3
 80090ca:	2b02      	cmp	r3, #2
 80090cc:	d123      	bne.n	8009116 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80090ce:	69fb      	ldr	r3, [r7, #28]
 80090d0:	08da      	lsrs	r2, r3, #3
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	3208      	adds	r2, #8
 80090d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80090dc:	69fb      	ldr	r3, [r7, #28]
 80090de:	f003 0307 	and.w	r3, r3, #7
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	220f      	movs	r2, #15
 80090e6:	fa02 f303 	lsl.w	r3, r2, r3
 80090ea:	43db      	mvns	r3, r3
 80090ec:	69ba      	ldr	r2, [r7, #24]
 80090ee:	4013      	ands	r3, r2
 80090f0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	691a      	ldr	r2, [r3, #16]
 80090f6:	69fb      	ldr	r3, [r7, #28]
 80090f8:	f003 0307 	and.w	r3, r3, #7
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009102:	69ba      	ldr	r2, [r7, #24]
 8009104:	4313      	orrs	r3, r2
 8009106:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	08da      	lsrs	r2, r3, #3
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	3208      	adds	r2, #8
 8009110:	69b9      	ldr	r1, [r7, #24]
 8009112:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800911c:	69fb      	ldr	r3, [r7, #28]
 800911e:	005b      	lsls	r3, r3, #1
 8009120:	2203      	movs	r2, #3
 8009122:	fa02 f303 	lsl.w	r3, r2, r3
 8009126:	43db      	mvns	r3, r3
 8009128:	69ba      	ldr	r2, [r7, #24]
 800912a:	4013      	ands	r3, r2
 800912c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	f003 0203 	and.w	r2, r3, #3
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	005b      	lsls	r3, r3, #1
 800913a:	fa02 f303 	lsl.w	r3, r2, r3
 800913e:	69ba      	ldr	r2, [r7, #24]
 8009140:	4313      	orrs	r3, r2
 8009142:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	69ba      	ldr	r2, [r7, #24]
 8009148:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009152:	2b00      	cmp	r3, #0
 8009154:	f000 80d8 	beq.w	8009308 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009158:	4b2c      	ldr	r3, [pc, #176]	; (800920c <HAL_GPIO_Init+0x22c>)
 800915a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800915e:	4a2b      	ldr	r2, [pc, #172]	; (800920c <HAL_GPIO_Init+0x22c>)
 8009160:	f043 0302 	orr.w	r3, r3, #2
 8009164:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009168:	4b28      	ldr	r3, [pc, #160]	; (800920c <HAL_GPIO_Init+0x22c>)
 800916a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800916e:	f003 0302 	and.w	r3, r3, #2
 8009172:	60fb      	str	r3, [r7, #12]
 8009174:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009176:	4a26      	ldr	r2, [pc, #152]	; (8009210 <HAL_GPIO_Init+0x230>)
 8009178:	69fb      	ldr	r3, [r7, #28]
 800917a:	089b      	lsrs	r3, r3, #2
 800917c:	3302      	adds	r3, #2
 800917e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009182:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009184:	69fb      	ldr	r3, [r7, #28]
 8009186:	f003 0303 	and.w	r3, r3, #3
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	220f      	movs	r2, #15
 800918e:	fa02 f303 	lsl.w	r3, r2, r3
 8009192:	43db      	mvns	r3, r3
 8009194:	69ba      	ldr	r2, [r7, #24]
 8009196:	4013      	ands	r3, r2
 8009198:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	4a1d      	ldr	r2, [pc, #116]	; (8009214 <HAL_GPIO_Init+0x234>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d04a      	beq.n	8009238 <HAL_GPIO_Init+0x258>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	4a1c      	ldr	r2, [pc, #112]	; (8009218 <HAL_GPIO_Init+0x238>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d02b      	beq.n	8009202 <HAL_GPIO_Init+0x222>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	4a1b      	ldr	r2, [pc, #108]	; (800921c <HAL_GPIO_Init+0x23c>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d025      	beq.n	80091fe <HAL_GPIO_Init+0x21e>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	4a1a      	ldr	r2, [pc, #104]	; (8009220 <HAL_GPIO_Init+0x240>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d01f      	beq.n	80091fa <HAL_GPIO_Init+0x21a>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	4a19      	ldr	r2, [pc, #100]	; (8009224 <HAL_GPIO_Init+0x244>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d019      	beq.n	80091f6 <HAL_GPIO_Init+0x216>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	4a18      	ldr	r2, [pc, #96]	; (8009228 <HAL_GPIO_Init+0x248>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d013      	beq.n	80091f2 <HAL_GPIO_Init+0x212>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	4a17      	ldr	r2, [pc, #92]	; (800922c <HAL_GPIO_Init+0x24c>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d00d      	beq.n	80091ee <HAL_GPIO_Init+0x20e>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	4a16      	ldr	r2, [pc, #88]	; (8009230 <HAL_GPIO_Init+0x250>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d007      	beq.n	80091ea <HAL_GPIO_Init+0x20a>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	4a15      	ldr	r2, [pc, #84]	; (8009234 <HAL_GPIO_Init+0x254>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d101      	bne.n	80091e6 <HAL_GPIO_Init+0x206>
 80091e2:	2309      	movs	r3, #9
 80091e4:	e029      	b.n	800923a <HAL_GPIO_Init+0x25a>
 80091e6:	230a      	movs	r3, #10
 80091e8:	e027      	b.n	800923a <HAL_GPIO_Init+0x25a>
 80091ea:	2307      	movs	r3, #7
 80091ec:	e025      	b.n	800923a <HAL_GPIO_Init+0x25a>
 80091ee:	2306      	movs	r3, #6
 80091f0:	e023      	b.n	800923a <HAL_GPIO_Init+0x25a>
 80091f2:	2305      	movs	r3, #5
 80091f4:	e021      	b.n	800923a <HAL_GPIO_Init+0x25a>
 80091f6:	2304      	movs	r3, #4
 80091f8:	e01f      	b.n	800923a <HAL_GPIO_Init+0x25a>
 80091fa:	2303      	movs	r3, #3
 80091fc:	e01d      	b.n	800923a <HAL_GPIO_Init+0x25a>
 80091fe:	2302      	movs	r3, #2
 8009200:	e01b      	b.n	800923a <HAL_GPIO_Init+0x25a>
 8009202:	2301      	movs	r3, #1
 8009204:	e019      	b.n	800923a <HAL_GPIO_Init+0x25a>
 8009206:	bf00      	nop
 8009208:	58000080 	.word	0x58000080
 800920c:	58024400 	.word	0x58024400
 8009210:	58000400 	.word	0x58000400
 8009214:	58020000 	.word	0x58020000
 8009218:	58020400 	.word	0x58020400
 800921c:	58020800 	.word	0x58020800
 8009220:	58020c00 	.word	0x58020c00
 8009224:	58021000 	.word	0x58021000
 8009228:	58021400 	.word	0x58021400
 800922c:	58021800 	.word	0x58021800
 8009230:	58021c00 	.word	0x58021c00
 8009234:	58022400 	.word	0x58022400
 8009238:	2300      	movs	r3, #0
 800923a:	69fa      	ldr	r2, [r7, #28]
 800923c:	f002 0203 	and.w	r2, r2, #3
 8009240:	0092      	lsls	r2, r2, #2
 8009242:	4093      	lsls	r3, r2
 8009244:	69ba      	ldr	r2, [r7, #24]
 8009246:	4313      	orrs	r3, r2
 8009248:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800924a:	4938      	ldr	r1, [pc, #224]	; (800932c <HAL_GPIO_Init+0x34c>)
 800924c:	69fb      	ldr	r3, [r7, #28]
 800924e:	089b      	lsrs	r3, r3, #2
 8009250:	3302      	adds	r3, #2
 8009252:	69ba      	ldr	r2, [r7, #24]
 8009254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	43db      	mvns	r3, r3
 8009264:	69ba      	ldr	r2, [r7, #24]
 8009266:	4013      	ands	r3, r2
 8009268:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009272:	2b00      	cmp	r3, #0
 8009274:	d003      	beq.n	800927e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8009276:	69ba      	ldr	r2, [r7, #24]
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	4313      	orrs	r3, r2
 800927c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800927e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009282:	69bb      	ldr	r3, [r7, #24]
 8009284:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	43db      	mvns	r3, r3
 8009292:	69ba      	ldr	r2, [r7, #24]
 8009294:	4013      	ands	r3, r2
 8009296:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d003      	beq.n	80092ac <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80092a4:	69ba      	ldr	r2, [r7, #24]
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	4313      	orrs	r3, r2
 80092aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80092ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80092b0:	69bb      	ldr	r3, [r7, #24]
 80092b2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	43db      	mvns	r3, r3
 80092be:	69ba      	ldr	r2, [r7, #24]
 80092c0:	4013      	ands	r3, r2
 80092c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d003      	beq.n	80092d8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80092d0:	69ba      	ldr	r2, [r7, #24]
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	4313      	orrs	r3, r2
 80092d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	69ba      	ldr	r2, [r7, #24]
 80092dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	43db      	mvns	r3, r3
 80092e8:	69ba      	ldr	r2, [r7, #24]
 80092ea:	4013      	ands	r3, r2
 80092ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d003      	beq.n	8009302 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80092fa:	69ba      	ldr	r2, [r7, #24]
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	4313      	orrs	r3, r2
 8009300:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	69ba      	ldr	r2, [r7, #24]
 8009306:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009308:	69fb      	ldr	r3, [r7, #28]
 800930a:	3301      	adds	r3, #1
 800930c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	69fb      	ldr	r3, [r7, #28]
 8009314:	fa22 f303 	lsr.w	r3, r2, r3
 8009318:	2b00      	cmp	r3, #0
 800931a:	f47f ae6b 	bne.w	8008ff4 <HAL_GPIO_Init+0x14>
  }
}
 800931e:	bf00      	nop
 8009320:	bf00      	nop
 8009322:	3724      	adds	r7, #36	; 0x24
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr
 800932c:	58000400 	.word	0x58000400

08009330 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009330:	b480      	push	{r7}
 8009332:	b087      	sub	sp, #28
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800933a:	2300      	movs	r3, #0
 800933c:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800933e:	4b72      	ldr	r3, [pc, #456]	; (8009508 <HAL_GPIO_DeInit+0x1d8>)
 8009340:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8009342:	e0d3      	b.n	80094ec <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8009344:	2201      	movs	r2, #1
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	fa02 f303 	lsl.w	r3, r2, r3
 800934c:	683a      	ldr	r2, [r7, #0]
 800934e:	4013      	ands	r3, r2
 8009350:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2b00      	cmp	r3, #0
 8009356:	f000 80c6 	beq.w	80094e6 <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800935a:	4a6c      	ldr	r2, [pc, #432]	; (800950c <HAL_GPIO_DeInit+0x1dc>)
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	089b      	lsrs	r3, r3, #2
 8009360:	3302      	adds	r3, #2
 8009362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009366:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	f003 0303 	and.w	r3, r3, #3
 800936e:	009b      	lsls	r3, r3, #2
 8009370:	220f      	movs	r2, #15
 8009372:	fa02 f303 	lsl.w	r3, r2, r3
 8009376:	68ba      	ldr	r2, [r7, #8]
 8009378:	4013      	ands	r3, r2
 800937a:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	4a64      	ldr	r2, [pc, #400]	; (8009510 <HAL_GPIO_DeInit+0x1e0>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d031      	beq.n	80093e8 <HAL_GPIO_DeInit+0xb8>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	4a63      	ldr	r2, [pc, #396]	; (8009514 <HAL_GPIO_DeInit+0x1e4>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d02b      	beq.n	80093e4 <HAL_GPIO_DeInit+0xb4>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	4a62      	ldr	r2, [pc, #392]	; (8009518 <HAL_GPIO_DeInit+0x1e8>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d025      	beq.n	80093e0 <HAL_GPIO_DeInit+0xb0>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	4a61      	ldr	r2, [pc, #388]	; (800951c <HAL_GPIO_DeInit+0x1ec>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d01f      	beq.n	80093dc <HAL_GPIO_DeInit+0xac>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	4a60      	ldr	r2, [pc, #384]	; (8009520 <HAL_GPIO_DeInit+0x1f0>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d019      	beq.n	80093d8 <HAL_GPIO_DeInit+0xa8>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	4a5f      	ldr	r2, [pc, #380]	; (8009524 <HAL_GPIO_DeInit+0x1f4>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d013      	beq.n	80093d4 <HAL_GPIO_DeInit+0xa4>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	4a5e      	ldr	r2, [pc, #376]	; (8009528 <HAL_GPIO_DeInit+0x1f8>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d00d      	beq.n	80093d0 <HAL_GPIO_DeInit+0xa0>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	4a5d      	ldr	r2, [pc, #372]	; (800952c <HAL_GPIO_DeInit+0x1fc>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d007      	beq.n	80093cc <HAL_GPIO_DeInit+0x9c>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	4a5c      	ldr	r2, [pc, #368]	; (8009530 <HAL_GPIO_DeInit+0x200>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d101      	bne.n	80093c8 <HAL_GPIO_DeInit+0x98>
 80093c4:	2309      	movs	r3, #9
 80093c6:	e010      	b.n	80093ea <HAL_GPIO_DeInit+0xba>
 80093c8:	230a      	movs	r3, #10
 80093ca:	e00e      	b.n	80093ea <HAL_GPIO_DeInit+0xba>
 80093cc:	2307      	movs	r3, #7
 80093ce:	e00c      	b.n	80093ea <HAL_GPIO_DeInit+0xba>
 80093d0:	2306      	movs	r3, #6
 80093d2:	e00a      	b.n	80093ea <HAL_GPIO_DeInit+0xba>
 80093d4:	2305      	movs	r3, #5
 80093d6:	e008      	b.n	80093ea <HAL_GPIO_DeInit+0xba>
 80093d8:	2304      	movs	r3, #4
 80093da:	e006      	b.n	80093ea <HAL_GPIO_DeInit+0xba>
 80093dc:	2303      	movs	r3, #3
 80093de:	e004      	b.n	80093ea <HAL_GPIO_DeInit+0xba>
 80093e0:	2302      	movs	r3, #2
 80093e2:	e002      	b.n	80093ea <HAL_GPIO_DeInit+0xba>
 80093e4:	2301      	movs	r3, #1
 80093e6:	e000      	b.n	80093ea <HAL_GPIO_DeInit+0xba>
 80093e8:	2300      	movs	r3, #0
 80093ea:	697a      	ldr	r2, [r7, #20]
 80093ec:	f002 0203 	and.w	r2, r2, #3
 80093f0:	0092      	lsls	r2, r2, #2
 80093f2:	4093      	lsls	r3, r2
 80093f4:	68ba      	ldr	r2, [r7, #8]
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d136      	bne.n	8009468 <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	43db      	mvns	r3, r3
 8009402:	401a      	ands	r2, r3
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	685a      	ldr	r2, [r3, #4]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	43db      	mvns	r3, r3
 8009410:	401a      	ands	r2, r3
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8009416:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800941a:	685a      	ldr	r2, [r3, #4]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	43db      	mvns	r3, r3
 8009420:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009424:	4013      	ands	r3, r2
 8009426:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8009428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	43db      	mvns	r3, r3
 8009432:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009436:	4013      	ands	r3, r2
 8009438:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	f003 0303 	and.w	r3, r3, #3
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	220f      	movs	r2, #15
 8009444:	fa02 f303 	lsl.w	r3, r2, r3
 8009448:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800944a:	4a30      	ldr	r2, [pc, #192]	; (800950c <HAL_GPIO_DeInit+0x1dc>)
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	089b      	lsrs	r3, r3, #2
 8009450:	3302      	adds	r3, #2
 8009452:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	43da      	mvns	r2, r3
 800945a:	482c      	ldr	r0, [pc, #176]	; (800950c <HAL_GPIO_DeInit+0x1dc>)
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	089b      	lsrs	r3, r3, #2
 8009460:	400a      	ands	r2, r1
 8009462:	3302      	adds	r3, #2
 8009464:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	005b      	lsls	r3, r3, #1
 8009470:	2103      	movs	r1, #3
 8009472:	fa01 f303 	lsl.w	r3, r1, r3
 8009476:	431a      	orrs	r2, r3
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	08da      	lsrs	r2, r3, #3
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	3208      	adds	r2, #8
 8009484:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	f003 0307 	and.w	r3, r3, #7
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	220f      	movs	r2, #15
 8009492:	fa02 f303 	lsl.w	r3, r2, r3
 8009496:	43db      	mvns	r3, r3
 8009498:	697a      	ldr	r2, [r7, #20]
 800949a:	08d2      	lsrs	r2, r2, #3
 800949c:	4019      	ands	r1, r3
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	3208      	adds	r2, #8
 80094a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	68da      	ldr	r2, [r3, #12]
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	005b      	lsls	r3, r3, #1
 80094ae:	2103      	movs	r1, #3
 80094b0:	fa01 f303 	lsl.w	r3, r1, r3
 80094b4:	43db      	mvns	r3, r3
 80094b6:	401a      	ands	r2, r3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	685a      	ldr	r2, [r3, #4]
 80094c0:	2101      	movs	r1, #1
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	fa01 f303 	lsl.w	r3, r1, r3
 80094c8:	43db      	mvns	r3, r3
 80094ca:	401a      	ands	r2, r3
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	689a      	ldr	r2, [r3, #8]
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	005b      	lsls	r3, r3, #1
 80094d8:	2103      	movs	r1, #3
 80094da:	fa01 f303 	lsl.w	r3, r1, r3
 80094de:	43db      	mvns	r3, r3
 80094e0:	401a      	ands	r2, r3
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	609a      	str	r2, [r3, #8]
    }

    position++;
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	3301      	adds	r3, #1
 80094ea:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80094ec:	683a      	ldr	r2, [r7, #0]
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	fa22 f303 	lsr.w	r3, r2, r3
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	f47f af25 	bne.w	8009344 <HAL_GPIO_DeInit+0x14>
  }
}
 80094fa:	bf00      	nop
 80094fc:	bf00      	nop
 80094fe:	371c      	adds	r7, #28
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr
 8009508:	58000080 	.word	0x58000080
 800950c:	58000400 	.word	0x58000400
 8009510:	58020000 	.word	0x58020000
 8009514:	58020400 	.word	0x58020400
 8009518:	58020800 	.word	0x58020800
 800951c:	58020c00 	.word	0x58020c00
 8009520:	58021000 	.word	0x58021000
 8009524:	58021400 	.word	0x58021400
 8009528:	58021800 	.word	0x58021800
 800952c:	58021c00 	.word	0x58021c00
 8009530:	58022400 	.word	0x58022400

08009534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009534:	b480      	push	{r7}
 8009536:	b083      	sub	sp, #12
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	460b      	mov	r3, r1
 800953e:	807b      	strh	r3, [r7, #2]
 8009540:	4613      	mov	r3, r2
 8009542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009544:	787b      	ldrb	r3, [r7, #1]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d003      	beq.n	8009552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800954a:	887a      	ldrh	r2, [r7, #2]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009550:	e003      	b.n	800955a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009552:	887b      	ldrh	r3, [r7, #2]
 8009554:	041a      	lsls	r2, r3, #16
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	619a      	str	r2, [r3, #24]
}
 800955a:	bf00      	nop
 800955c:	370c      	adds	r7, #12
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr
	...

08009568 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b084      	sub	sp, #16
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009570:	4b19      	ldr	r3, [pc, #100]	; (80095d8 <HAL_PWREx_ConfigSupply+0x70>)
 8009572:	68db      	ldr	r3, [r3, #12]
 8009574:	f003 0304 	and.w	r3, r3, #4
 8009578:	2b04      	cmp	r3, #4
 800957a:	d00a      	beq.n	8009592 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800957c:	4b16      	ldr	r3, [pc, #88]	; (80095d8 <HAL_PWREx_ConfigSupply+0x70>)
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	f003 0307 	and.w	r3, r3, #7
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	429a      	cmp	r2, r3
 8009588:	d001      	beq.n	800958e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800958a:	2301      	movs	r3, #1
 800958c:	e01f      	b.n	80095ce <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800958e:	2300      	movs	r3, #0
 8009590:	e01d      	b.n	80095ce <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009592:	4b11      	ldr	r3, [pc, #68]	; (80095d8 <HAL_PWREx_ConfigSupply+0x70>)
 8009594:	68db      	ldr	r3, [r3, #12]
 8009596:	f023 0207 	bic.w	r2, r3, #7
 800959a:	490f      	ldr	r1, [pc, #60]	; (80095d8 <HAL_PWREx_ConfigSupply+0x70>)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	4313      	orrs	r3, r2
 80095a0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80095a2:	f7fc fbe1 	bl	8005d68 <HAL_GetTick>
 80095a6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80095a8:	e009      	b.n	80095be <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80095aa:	f7fc fbdd 	bl	8005d68 <HAL_GetTick>
 80095ae:	4602      	mov	r2, r0
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	1ad3      	subs	r3, r2, r3
 80095b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80095b8:	d901      	bls.n	80095be <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80095ba:	2301      	movs	r3, #1
 80095bc:	e007      	b.n	80095ce <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80095be:	4b06      	ldr	r3, [pc, #24]	; (80095d8 <HAL_PWREx_ConfigSupply+0x70>)
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80095c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095ca:	d1ee      	bne.n	80095aa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80095cc:	2300      	movs	r3, #0
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3710      	adds	r7, #16
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	58024800 	.word	0x58024800

080095dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b08c      	sub	sp, #48	; 0x30
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d101      	bne.n	80095ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80095ea:	2301      	movs	r3, #1
 80095ec:	e3c8      	b.n	8009d80 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f003 0301 	and.w	r3, r3, #1
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	f000 8087 	beq.w	800970a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80095fc:	4b88      	ldr	r3, [pc, #544]	; (8009820 <HAL_RCC_OscConfig+0x244>)
 80095fe:	691b      	ldr	r3, [r3, #16]
 8009600:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009604:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009606:	4b86      	ldr	r3, [pc, #536]	; (8009820 <HAL_RCC_OscConfig+0x244>)
 8009608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800960a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800960c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800960e:	2b10      	cmp	r3, #16
 8009610:	d007      	beq.n	8009622 <HAL_RCC_OscConfig+0x46>
 8009612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009614:	2b18      	cmp	r3, #24
 8009616:	d110      	bne.n	800963a <HAL_RCC_OscConfig+0x5e>
 8009618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961a:	f003 0303 	and.w	r3, r3, #3
 800961e:	2b02      	cmp	r3, #2
 8009620:	d10b      	bne.n	800963a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009622:	4b7f      	ldr	r3, [pc, #508]	; (8009820 <HAL_RCC_OscConfig+0x244>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800962a:	2b00      	cmp	r3, #0
 800962c:	d06c      	beq.n	8009708 <HAL_RCC_OscConfig+0x12c>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d168      	bne.n	8009708 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009636:	2301      	movs	r3, #1
 8009638:	e3a2      	b.n	8009d80 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009642:	d106      	bne.n	8009652 <HAL_RCC_OscConfig+0x76>
 8009644:	4b76      	ldr	r3, [pc, #472]	; (8009820 <HAL_RCC_OscConfig+0x244>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a75      	ldr	r2, [pc, #468]	; (8009820 <HAL_RCC_OscConfig+0x244>)
 800964a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800964e:	6013      	str	r3, [r2, #0]
 8009650:	e02e      	b.n	80096b0 <HAL_RCC_OscConfig+0xd4>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d10c      	bne.n	8009674 <HAL_RCC_OscConfig+0x98>
 800965a:	4b71      	ldr	r3, [pc, #452]	; (8009820 <HAL_RCC_OscConfig+0x244>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4a70      	ldr	r2, [pc, #448]	; (8009820 <HAL_RCC_OscConfig+0x244>)
 8009660:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009664:	6013      	str	r3, [r2, #0]
 8009666:	4b6e      	ldr	r3, [pc, #440]	; (8009820 <HAL_RCC_OscConfig+0x244>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a6d      	ldr	r2, [pc, #436]	; (8009820 <HAL_RCC_OscConfig+0x244>)
 800966c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009670:	6013      	str	r3, [r2, #0]
 8009672:	e01d      	b.n	80096b0 <HAL_RCC_OscConfig+0xd4>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800967c:	d10c      	bne.n	8009698 <HAL_RCC_OscConfig+0xbc>
 800967e:	4b68      	ldr	r3, [pc, #416]	; (8009820 <HAL_RCC_OscConfig+0x244>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a67      	ldr	r2, [pc, #412]	; (8009820 <HAL_RCC_OscConfig+0x244>)
 8009684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009688:	6013      	str	r3, [r2, #0]
 800968a:	4b65      	ldr	r3, [pc, #404]	; (8009820 <HAL_RCC_OscConfig+0x244>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a64      	ldr	r2, [pc, #400]	; (8009820 <HAL_RCC_OscConfig+0x244>)
 8009690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009694:	6013      	str	r3, [r2, #0]
 8009696:	e00b      	b.n	80096b0 <HAL_RCC_OscConfig+0xd4>
 8009698:	4b61      	ldr	r3, [pc, #388]	; (8009820 <HAL_RCC_OscConfig+0x244>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a60      	ldr	r2, [pc, #384]	; (8009820 <HAL_RCC_OscConfig+0x244>)
 800969e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096a2:	6013      	str	r3, [r2, #0]
 80096a4:	4b5e      	ldr	r3, [pc, #376]	; (8009820 <HAL_RCC_OscConfig+0x244>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a5d      	ldr	r2, [pc, #372]	; (8009820 <HAL_RCC_OscConfig+0x244>)
 80096aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80096ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d013      	beq.n	80096e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096b8:	f7fc fb56 	bl	8005d68 <HAL_GetTick>
 80096bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80096be:	e008      	b.n	80096d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80096c0:	f7fc fb52 	bl	8005d68 <HAL_GetTick>
 80096c4:	4602      	mov	r2, r0
 80096c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c8:	1ad3      	subs	r3, r2, r3
 80096ca:	2b64      	cmp	r3, #100	; 0x64
 80096cc:	d901      	bls.n	80096d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80096ce:	2303      	movs	r3, #3
 80096d0:	e356      	b.n	8009d80 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80096d2:	4b53      	ldr	r3, [pc, #332]	; (8009820 <HAL_RCC_OscConfig+0x244>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d0f0      	beq.n	80096c0 <HAL_RCC_OscConfig+0xe4>
 80096de:	e014      	b.n	800970a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096e0:	f7fc fb42 	bl	8005d68 <HAL_GetTick>
 80096e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80096e6:	e008      	b.n	80096fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80096e8:	f7fc fb3e 	bl	8005d68 <HAL_GetTick>
 80096ec:	4602      	mov	r2, r0
 80096ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f0:	1ad3      	subs	r3, r2, r3
 80096f2:	2b64      	cmp	r3, #100	; 0x64
 80096f4:	d901      	bls.n	80096fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80096f6:	2303      	movs	r3, #3
 80096f8:	e342      	b.n	8009d80 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80096fa:	4b49      	ldr	r3, [pc, #292]	; (8009820 <HAL_RCC_OscConfig+0x244>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009702:	2b00      	cmp	r3, #0
 8009704:	d1f0      	bne.n	80096e8 <HAL_RCC_OscConfig+0x10c>
 8009706:	e000      	b.n	800970a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f003 0302 	and.w	r3, r3, #2
 8009712:	2b00      	cmp	r3, #0
 8009714:	f000 808c 	beq.w	8009830 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009718:	4b41      	ldr	r3, [pc, #260]	; (8009820 <HAL_RCC_OscConfig+0x244>)
 800971a:	691b      	ldr	r3, [r3, #16]
 800971c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009720:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009722:	4b3f      	ldr	r3, [pc, #252]	; (8009820 <HAL_RCC_OscConfig+0x244>)
 8009724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009726:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009728:	6a3b      	ldr	r3, [r7, #32]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d007      	beq.n	800973e <HAL_RCC_OscConfig+0x162>
 800972e:	6a3b      	ldr	r3, [r7, #32]
 8009730:	2b18      	cmp	r3, #24
 8009732:	d137      	bne.n	80097a4 <HAL_RCC_OscConfig+0x1c8>
 8009734:	69fb      	ldr	r3, [r7, #28]
 8009736:	f003 0303 	and.w	r3, r3, #3
 800973a:	2b00      	cmp	r3, #0
 800973c:	d132      	bne.n	80097a4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800973e:	4b38      	ldr	r3, [pc, #224]	; (8009820 <HAL_RCC_OscConfig+0x244>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f003 0304 	and.w	r3, r3, #4
 8009746:	2b00      	cmp	r3, #0
 8009748:	d005      	beq.n	8009756 <HAL_RCC_OscConfig+0x17a>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d101      	bne.n	8009756 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009752:	2301      	movs	r3, #1
 8009754:	e314      	b.n	8009d80 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009756:	4b32      	ldr	r3, [pc, #200]	; (8009820 <HAL_RCC_OscConfig+0x244>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f023 0219 	bic.w	r2, r3, #25
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	68db      	ldr	r3, [r3, #12]
 8009762:	492f      	ldr	r1, [pc, #188]	; (8009820 <HAL_RCC_OscConfig+0x244>)
 8009764:	4313      	orrs	r3, r2
 8009766:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009768:	f7fc fafe 	bl	8005d68 <HAL_GetTick>
 800976c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800976e:	e008      	b.n	8009782 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009770:	f7fc fafa 	bl	8005d68 <HAL_GetTick>
 8009774:	4602      	mov	r2, r0
 8009776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009778:	1ad3      	subs	r3, r2, r3
 800977a:	2b02      	cmp	r3, #2
 800977c:	d901      	bls.n	8009782 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800977e:	2303      	movs	r3, #3
 8009780:	e2fe      	b.n	8009d80 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009782:	4b27      	ldr	r3, [pc, #156]	; (8009820 <HAL_RCC_OscConfig+0x244>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f003 0304 	and.w	r3, r3, #4
 800978a:	2b00      	cmp	r3, #0
 800978c:	d0f0      	beq.n	8009770 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800978e:	4b24      	ldr	r3, [pc, #144]	; (8009820 <HAL_RCC_OscConfig+0x244>)
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	691b      	ldr	r3, [r3, #16]
 800979a:	061b      	lsls	r3, r3, #24
 800979c:	4920      	ldr	r1, [pc, #128]	; (8009820 <HAL_RCC_OscConfig+0x244>)
 800979e:	4313      	orrs	r3, r2
 80097a0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80097a2:	e045      	b.n	8009830 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	68db      	ldr	r3, [r3, #12]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d026      	beq.n	80097fa <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80097ac:	4b1c      	ldr	r3, [pc, #112]	; (8009820 <HAL_RCC_OscConfig+0x244>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f023 0219 	bic.w	r2, r3, #25
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	68db      	ldr	r3, [r3, #12]
 80097b8:	4919      	ldr	r1, [pc, #100]	; (8009820 <HAL_RCC_OscConfig+0x244>)
 80097ba:	4313      	orrs	r3, r2
 80097bc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097be:	f7fc fad3 	bl	8005d68 <HAL_GetTick>
 80097c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80097c4:	e008      	b.n	80097d8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80097c6:	f7fc facf 	bl	8005d68 <HAL_GetTick>
 80097ca:	4602      	mov	r2, r0
 80097cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ce:	1ad3      	subs	r3, r2, r3
 80097d0:	2b02      	cmp	r3, #2
 80097d2:	d901      	bls.n	80097d8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80097d4:	2303      	movs	r3, #3
 80097d6:	e2d3      	b.n	8009d80 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80097d8:	4b11      	ldr	r3, [pc, #68]	; (8009820 <HAL_RCC_OscConfig+0x244>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f003 0304 	and.w	r3, r3, #4
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d0f0      	beq.n	80097c6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80097e4:	4b0e      	ldr	r3, [pc, #56]	; (8009820 <HAL_RCC_OscConfig+0x244>)
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	691b      	ldr	r3, [r3, #16]
 80097f0:	061b      	lsls	r3, r3, #24
 80097f2:	490b      	ldr	r1, [pc, #44]	; (8009820 <HAL_RCC_OscConfig+0x244>)
 80097f4:	4313      	orrs	r3, r2
 80097f6:	604b      	str	r3, [r1, #4]
 80097f8:	e01a      	b.n	8009830 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80097fa:	4b09      	ldr	r3, [pc, #36]	; (8009820 <HAL_RCC_OscConfig+0x244>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4a08      	ldr	r2, [pc, #32]	; (8009820 <HAL_RCC_OscConfig+0x244>)
 8009800:	f023 0301 	bic.w	r3, r3, #1
 8009804:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009806:	f7fc faaf 	bl	8005d68 <HAL_GetTick>
 800980a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800980c:	e00a      	b.n	8009824 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800980e:	f7fc faab 	bl	8005d68 <HAL_GetTick>
 8009812:	4602      	mov	r2, r0
 8009814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009816:	1ad3      	subs	r3, r2, r3
 8009818:	2b02      	cmp	r3, #2
 800981a:	d903      	bls.n	8009824 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800981c:	2303      	movs	r3, #3
 800981e:	e2af      	b.n	8009d80 <HAL_RCC_OscConfig+0x7a4>
 8009820:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009824:	4b96      	ldr	r3, [pc, #600]	; (8009a80 <HAL_RCC_OscConfig+0x4a4>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f003 0304 	and.w	r3, r3, #4
 800982c:	2b00      	cmp	r3, #0
 800982e:	d1ee      	bne.n	800980e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f003 0310 	and.w	r3, r3, #16
 8009838:	2b00      	cmp	r3, #0
 800983a:	d06a      	beq.n	8009912 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800983c:	4b90      	ldr	r3, [pc, #576]	; (8009a80 <HAL_RCC_OscConfig+0x4a4>)
 800983e:	691b      	ldr	r3, [r3, #16]
 8009840:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009844:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009846:	4b8e      	ldr	r3, [pc, #568]	; (8009a80 <HAL_RCC_OscConfig+0x4a4>)
 8009848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800984a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800984c:	69bb      	ldr	r3, [r7, #24]
 800984e:	2b08      	cmp	r3, #8
 8009850:	d007      	beq.n	8009862 <HAL_RCC_OscConfig+0x286>
 8009852:	69bb      	ldr	r3, [r7, #24]
 8009854:	2b18      	cmp	r3, #24
 8009856:	d11b      	bne.n	8009890 <HAL_RCC_OscConfig+0x2b4>
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	f003 0303 	and.w	r3, r3, #3
 800985e:	2b01      	cmp	r3, #1
 8009860:	d116      	bne.n	8009890 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009862:	4b87      	ldr	r3, [pc, #540]	; (8009a80 <HAL_RCC_OscConfig+0x4a4>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800986a:	2b00      	cmp	r3, #0
 800986c:	d005      	beq.n	800987a <HAL_RCC_OscConfig+0x29e>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	69db      	ldr	r3, [r3, #28]
 8009872:	2b80      	cmp	r3, #128	; 0x80
 8009874:	d001      	beq.n	800987a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009876:	2301      	movs	r3, #1
 8009878:	e282      	b.n	8009d80 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800987a:	4b81      	ldr	r3, [pc, #516]	; (8009a80 <HAL_RCC_OscConfig+0x4a4>)
 800987c:	68db      	ldr	r3, [r3, #12]
 800987e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6a1b      	ldr	r3, [r3, #32]
 8009886:	061b      	lsls	r3, r3, #24
 8009888:	497d      	ldr	r1, [pc, #500]	; (8009a80 <HAL_RCC_OscConfig+0x4a4>)
 800988a:	4313      	orrs	r3, r2
 800988c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800988e:	e040      	b.n	8009912 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	69db      	ldr	r3, [r3, #28]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d023      	beq.n	80098e0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009898:	4b79      	ldr	r3, [pc, #484]	; (8009a80 <HAL_RCC_OscConfig+0x4a4>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a78      	ldr	r2, [pc, #480]	; (8009a80 <HAL_RCC_OscConfig+0x4a4>)
 800989e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098a4:	f7fc fa60 	bl	8005d68 <HAL_GetTick>
 80098a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80098aa:	e008      	b.n	80098be <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80098ac:	f7fc fa5c 	bl	8005d68 <HAL_GetTick>
 80098b0:	4602      	mov	r2, r0
 80098b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b4:	1ad3      	subs	r3, r2, r3
 80098b6:	2b02      	cmp	r3, #2
 80098b8:	d901      	bls.n	80098be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80098ba:	2303      	movs	r3, #3
 80098bc:	e260      	b.n	8009d80 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80098be:	4b70      	ldr	r3, [pc, #448]	; (8009a80 <HAL_RCC_OscConfig+0x4a4>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d0f0      	beq.n	80098ac <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80098ca:	4b6d      	ldr	r3, [pc, #436]	; (8009a80 <HAL_RCC_OscConfig+0x4a4>)
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6a1b      	ldr	r3, [r3, #32]
 80098d6:	061b      	lsls	r3, r3, #24
 80098d8:	4969      	ldr	r1, [pc, #420]	; (8009a80 <HAL_RCC_OscConfig+0x4a4>)
 80098da:	4313      	orrs	r3, r2
 80098dc:	60cb      	str	r3, [r1, #12]
 80098de:	e018      	b.n	8009912 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80098e0:	4b67      	ldr	r3, [pc, #412]	; (8009a80 <HAL_RCC_OscConfig+0x4a4>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4a66      	ldr	r2, [pc, #408]	; (8009a80 <HAL_RCC_OscConfig+0x4a4>)
 80098e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80098ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098ec:	f7fc fa3c 	bl	8005d68 <HAL_GetTick>
 80098f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80098f2:	e008      	b.n	8009906 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80098f4:	f7fc fa38 	bl	8005d68 <HAL_GetTick>
 80098f8:	4602      	mov	r2, r0
 80098fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fc:	1ad3      	subs	r3, r2, r3
 80098fe:	2b02      	cmp	r3, #2
 8009900:	d901      	bls.n	8009906 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009902:	2303      	movs	r3, #3
 8009904:	e23c      	b.n	8009d80 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009906:	4b5e      	ldr	r3, [pc, #376]	; (8009a80 <HAL_RCC_OscConfig+0x4a4>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800990e:	2b00      	cmp	r3, #0
 8009910:	d1f0      	bne.n	80098f4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f003 0308 	and.w	r3, r3, #8
 800991a:	2b00      	cmp	r3, #0
 800991c:	d036      	beq.n	800998c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	695b      	ldr	r3, [r3, #20]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d019      	beq.n	800995a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009926:	4b56      	ldr	r3, [pc, #344]	; (8009a80 <HAL_RCC_OscConfig+0x4a4>)
 8009928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800992a:	4a55      	ldr	r2, [pc, #340]	; (8009a80 <HAL_RCC_OscConfig+0x4a4>)
 800992c:	f043 0301 	orr.w	r3, r3, #1
 8009930:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009932:	f7fc fa19 	bl	8005d68 <HAL_GetTick>
 8009936:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009938:	e008      	b.n	800994c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800993a:	f7fc fa15 	bl	8005d68 <HAL_GetTick>
 800993e:	4602      	mov	r2, r0
 8009940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009942:	1ad3      	subs	r3, r2, r3
 8009944:	2b02      	cmp	r3, #2
 8009946:	d901      	bls.n	800994c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009948:	2303      	movs	r3, #3
 800994a:	e219      	b.n	8009d80 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800994c:	4b4c      	ldr	r3, [pc, #304]	; (8009a80 <HAL_RCC_OscConfig+0x4a4>)
 800994e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009950:	f003 0302 	and.w	r3, r3, #2
 8009954:	2b00      	cmp	r3, #0
 8009956:	d0f0      	beq.n	800993a <HAL_RCC_OscConfig+0x35e>
 8009958:	e018      	b.n	800998c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800995a:	4b49      	ldr	r3, [pc, #292]	; (8009a80 <HAL_RCC_OscConfig+0x4a4>)
 800995c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800995e:	4a48      	ldr	r2, [pc, #288]	; (8009a80 <HAL_RCC_OscConfig+0x4a4>)
 8009960:	f023 0301 	bic.w	r3, r3, #1
 8009964:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009966:	f7fc f9ff 	bl	8005d68 <HAL_GetTick>
 800996a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800996c:	e008      	b.n	8009980 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800996e:	f7fc f9fb 	bl	8005d68 <HAL_GetTick>
 8009972:	4602      	mov	r2, r0
 8009974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009976:	1ad3      	subs	r3, r2, r3
 8009978:	2b02      	cmp	r3, #2
 800997a:	d901      	bls.n	8009980 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800997c:	2303      	movs	r3, #3
 800997e:	e1ff      	b.n	8009d80 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009980:	4b3f      	ldr	r3, [pc, #252]	; (8009a80 <HAL_RCC_OscConfig+0x4a4>)
 8009982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009984:	f003 0302 	and.w	r3, r3, #2
 8009988:	2b00      	cmp	r3, #0
 800998a:	d1f0      	bne.n	800996e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f003 0320 	and.w	r3, r3, #32
 8009994:	2b00      	cmp	r3, #0
 8009996:	d036      	beq.n	8009a06 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	699b      	ldr	r3, [r3, #24]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d019      	beq.n	80099d4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80099a0:	4b37      	ldr	r3, [pc, #220]	; (8009a80 <HAL_RCC_OscConfig+0x4a4>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a36      	ldr	r2, [pc, #216]	; (8009a80 <HAL_RCC_OscConfig+0x4a4>)
 80099a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80099aa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80099ac:	f7fc f9dc 	bl	8005d68 <HAL_GetTick>
 80099b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80099b2:	e008      	b.n	80099c6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80099b4:	f7fc f9d8 	bl	8005d68 <HAL_GetTick>
 80099b8:	4602      	mov	r2, r0
 80099ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099bc:	1ad3      	subs	r3, r2, r3
 80099be:	2b02      	cmp	r3, #2
 80099c0:	d901      	bls.n	80099c6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80099c2:	2303      	movs	r3, #3
 80099c4:	e1dc      	b.n	8009d80 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80099c6:	4b2e      	ldr	r3, [pc, #184]	; (8009a80 <HAL_RCC_OscConfig+0x4a4>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d0f0      	beq.n	80099b4 <HAL_RCC_OscConfig+0x3d8>
 80099d2:	e018      	b.n	8009a06 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80099d4:	4b2a      	ldr	r3, [pc, #168]	; (8009a80 <HAL_RCC_OscConfig+0x4a4>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4a29      	ldr	r2, [pc, #164]	; (8009a80 <HAL_RCC_OscConfig+0x4a4>)
 80099da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80099e0:	f7fc f9c2 	bl	8005d68 <HAL_GetTick>
 80099e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80099e6:	e008      	b.n	80099fa <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80099e8:	f7fc f9be 	bl	8005d68 <HAL_GetTick>
 80099ec:	4602      	mov	r2, r0
 80099ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f0:	1ad3      	subs	r3, r2, r3
 80099f2:	2b02      	cmp	r3, #2
 80099f4:	d901      	bls.n	80099fa <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80099f6:	2303      	movs	r3, #3
 80099f8:	e1c2      	b.n	8009d80 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80099fa:	4b21      	ldr	r3, [pc, #132]	; (8009a80 <HAL_RCC_OscConfig+0x4a4>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d1f0      	bne.n	80099e8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f003 0304 	and.w	r3, r3, #4
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	f000 8086 	beq.w	8009b20 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009a14:	4b1b      	ldr	r3, [pc, #108]	; (8009a84 <HAL_RCC_OscConfig+0x4a8>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a1a      	ldr	r2, [pc, #104]	; (8009a84 <HAL_RCC_OscConfig+0x4a8>)
 8009a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009a20:	f7fc f9a2 	bl	8005d68 <HAL_GetTick>
 8009a24:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009a26:	e008      	b.n	8009a3a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a28:	f7fc f99e 	bl	8005d68 <HAL_GetTick>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a30:	1ad3      	subs	r3, r2, r3
 8009a32:	2b64      	cmp	r3, #100	; 0x64
 8009a34:	d901      	bls.n	8009a3a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8009a36:	2303      	movs	r3, #3
 8009a38:	e1a2      	b.n	8009d80 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009a3a:	4b12      	ldr	r3, [pc, #72]	; (8009a84 <HAL_RCC_OscConfig+0x4a8>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d0f0      	beq.n	8009a28 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	2b01      	cmp	r3, #1
 8009a4c:	d106      	bne.n	8009a5c <HAL_RCC_OscConfig+0x480>
 8009a4e:	4b0c      	ldr	r3, [pc, #48]	; (8009a80 <HAL_RCC_OscConfig+0x4a4>)
 8009a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a52:	4a0b      	ldr	r2, [pc, #44]	; (8009a80 <HAL_RCC_OscConfig+0x4a4>)
 8009a54:	f043 0301 	orr.w	r3, r3, #1
 8009a58:	6713      	str	r3, [r2, #112]	; 0x70
 8009a5a:	e032      	b.n	8009ac2 <HAL_RCC_OscConfig+0x4e6>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d111      	bne.n	8009a88 <HAL_RCC_OscConfig+0x4ac>
 8009a64:	4b06      	ldr	r3, [pc, #24]	; (8009a80 <HAL_RCC_OscConfig+0x4a4>)
 8009a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a68:	4a05      	ldr	r2, [pc, #20]	; (8009a80 <HAL_RCC_OscConfig+0x4a4>)
 8009a6a:	f023 0301 	bic.w	r3, r3, #1
 8009a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8009a70:	4b03      	ldr	r3, [pc, #12]	; (8009a80 <HAL_RCC_OscConfig+0x4a4>)
 8009a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a74:	4a02      	ldr	r2, [pc, #8]	; (8009a80 <HAL_RCC_OscConfig+0x4a4>)
 8009a76:	f023 0304 	bic.w	r3, r3, #4
 8009a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8009a7c:	e021      	b.n	8009ac2 <HAL_RCC_OscConfig+0x4e6>
 8009a7e:	bf00      	nop
 8009a80:	58024400 	.word	0x58024400
 8009a84:	58024800 	.word	0x58024800
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	689b      	ldr	r3, [r3, #8]
 8009a8c:	2b05      	cmp	r3, #5
 8009a8e:	d10c      	bne.n	8009aaa <HAL_RCC_OscConfig+0x4ce>
 8009a90:	4b83      	ldr	r3, [pc, #524]	; (8009ca0 <HAL_RCC_OscConfig+0x6c4>)
 8009a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a94:	4a82      	ldr	r2, [pc, #520]	; (8009ca0 <HAL_RCC_OscConfig+0x6c4>)
 8009a96:	f043 0304 	orr.w	r3, r3, #4
 8009a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8009a9c:	4b80      	ldr	r3, [pc, #512]	; (8009ca0 <HAL_RCC_OscConfig+0x6c4>)
 8009a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aa0:	4a7f      	ldr	r2, [pc, #508]	; (8009ca0 <HAL_RCC_OscConfig+0x6c4>)
 8009aa2:	f043 0301 	orr.w	r3, r3, #1
 8009aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8009aa8:	e00b      	b.n	8009ac2 <HAL_RCC_OscConfig+0x4e6>
 8009aaa:	4b7d      	ldr	r3, [pc, #500]	; (8009ca0 <HAL_RCC_OscConfig+0x6c4>)
 8009aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aae:	4a7c      	ldr	r2, [pc, #496]	; (8009ca0 <HAL_RCC_OscConfig+0x6c4>)
 8009ab0:	f023 0301 	bic.w	r3, r3, #1
 8009ab4:	6713      	str	r3, [r2, #112]	; 0x70
 8009ab6:	4b7a      	ldr	r3, [pc, #488]	; (8009ca0 <HAL_RCC_OscConfig+0x6c4>)
 8009ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aba:	4a79      	ldr	r2, [pc, #484]	; (8009ca0 <HAL_RCC_OscConfig+0x6c4>)
 8009abc:	f023 0304 	bic.w	r3, r3, #4
 8009ac0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	689b      	ldr	r3, [r3, #8]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d015      	beq.n	8009af6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009aca:	f7fc f94d 	bl	8005d68 <HAL_GetTick>
 8009ace:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009ad0:	e00a      	b.n	8009ae8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ad2:	f7fc f949 	bl	8005d68 <HAL_GetTick>
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ada:	1ad3      	subs	r3, r2, r3
 8009adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d901      	bls.n	8009ae8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009ae4:	2303      	movs	r3, #3
 8009ae6:	e14b      	b.n	8009d80 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009ae8:	4b6d      	ldr	r3, [pc, #436]	; (8009ca0 <HAL_RCC_OscConfig+0x6c4>)
 8009aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aec:	f003 0302 	and.w	r3, r3, #2
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d0ee      	beq.n	8009ad2 <HAL_RCC_OscConfig+0x4f6>
 8009af4:	e014      	b.n	8009b20 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009af6:	f7fc f937 	bl	8005d68 <HAL_GetTick>
 8009afa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009afc:	e00a      	b.n	8009b14 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009afe:	f7fc f933 	bl	8005d68 <HAL_GetTick>
 8009b02:	4602      	mov	r2, r0
 8009b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b06:	1ad3      	subs	r3, r2, r3
 8009b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d901      	bls.n	8009b14 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009b10:	2303      	movs	r3, #3
 8009b12:	e135      	b.n	8009d80 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009b14:	4b62      	ldr	r3, [pc, #392]	; (8009ca0 <HAL_RCC_OscConfig+0x6c4>)
 8009b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b18:	f003 0302 	and.w	r3, r3, #2
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d1ee      	bne.n	8009afe <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	f000 812a 	beq.w	8009d7e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009b2a:	4b5d      	ldr	r3, [pc, #372]	; (8009ca0 <HAL_RCC_OscConfig+0x6c4>)
 8009b2c:	691b      	ldr	r3, [r3, #16]
 8009b2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b32:	2b18      	cmp	r3, #24
 8009b34:	f000 80ba 	beq.w	8009cac <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b3c:	2b02      	cmp	r3, #2
 8009b3e:	f040 8095 	bne.w	8009c6c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b42:	4b57      	ldr	r3, [pc, #348]	; (8009ca0 <HAL_RCC_OscConfig+0x6c4>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4a56      	ldr	r2, [pc, #344]	; (8009ca0 <HAL_RCC_OscConfig+0x6c4>)
 8009b48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b4e:	f7fc f90b 	bl	8005d68 <HAL_GetTick>
 8009b52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009b54:	e008      	b.n	8009b68 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b56:	f7fc f907 	bl	8005d68 <HAL_GetTick>
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5e:	1ad3      	subs	r3, r2, r3
 8009b60:	2b02      	cmp	r3, #2
 8009b62:	d901      	bls.n	8009b68 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009b64:	2303      	movs	r3, #3
 8009b66:	e10b      	b.n	8009d80 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009b68:	4b4d      	ldr	r3, [pc, #308]	; (8009ca0 <HAL_RCC_OscConfig+0x6c4>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d1f0      	bne.n	8009b56 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009b74:	4b4a      	ldr	r3, [pc, #296]	; (8009ca0 <HAL_RCC_OscConfig+0x6c4>)
 8009b76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009b78:	4b4a      	ldr	r3, [pc, #296]	; (8009ca4 <HAL_RCC_OscConfig+0x6c8>)
 8009b7a:	4013      	ands	r3, r2
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009b84:	0112      	lsls	r2, r2, #4
 8009b86:	430a      	orrs	r2, r1
 8009b88:	4945      	ldr	r1, [pc, #276]	; (8009ca0 <HAL_RCC_OscConfig+0x6c4>)
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	628b      	str	r3, [r1, #40]	; 0x28
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b92:	3b01      	subs	r3, #1
 8009b94:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b9c:	3b01      	subs	r3, #1
 8009b9e:	025b      	lsls	r3, r3, #9
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	431a      	orrs	r2, r3
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ba8:	3b01      	subs	r3, #1
 8009baa:	041b      	lsls	r3, r3, #16
 8009bac:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009bb0:	431a      	orrs	r2, r3
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bb6:	3b01      	subs	r3, #1
 8009bb8:	061b      	lsls	r3, r3, #24
 8009bba:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009bbe:	4938      	ldr	r1, [pc, #224]	; (8009ca0 <HAL_RCC_OscConfig+0x6c4>)
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009bc4:	4b36      	ldr	r3, [pc, #216]	; (8009ca0 <HAL_RCC_OscConfig+0x6c4>)
 8009bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc8:	4a35      	ldr	r2, [pc, #212]	; (8009ca0 <HAL_RCC_OscConfig+0x6c4>)
 8009bca:	f023 0301 	bic.w	r3, r3, #1
 8009bce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009bd0:	4b33      	ldr	r3, [pc, #204]	; (8009ca0 <HAL_RCC_OscConfig+0x6c4>)
 8009bd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bd4:	4b34      	ldr	r3, [pc, #208]	; (8009ca8 <HAL_RCC_OscConfig+0x6cc>)
 8009bd6:	4013      	ands	r3, r2
 8009bd8:	687a      	ldr	r2, [r7, #4]
 8009bda:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009bdc:	00d2      	lsls	r2, r2, #3
 8009bde:	4930      	ldr	r1, [pc, #192]	; (8009ca0 <HAL_RCC_OscConfig+0x6c4>)
 8009be0:	4313      	orrs	r3, r2
 8009be2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009be4:	4b2e      	ldr	r3, [pc, #184]	; (8009ca0 <HAL_RCC_OscConfig+0x6c4>)
 8009be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be8:	f023 020c 	bic.w	r2, r3, #12
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bf0:	492b      	ldr	r1, [pc, #172]	; (8009ca0 <HAL_RCC_OscConfig+0x6c4>)
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009bf6:	4b2a      	ldr	r3, [pc, #168]	; (8009ca0 <HAL_RCC_OscConfig+0x6c4>)
 8009bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bfa:	f023 0202 	bic.w	r2, r3, #2
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c02:	4927      	ldr	r1, [pc, #156]	; (8009ca0 <HAL_RCC_OscConfig+0x6c4>)
 8009c04:	4313      	orrs	r3, r2
 8009c06:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009c08:	4b25      	ldr	r3, [pc, #148]	; (8009ca0 <HAL_RCC_OscConfig+0x6c4>)
 8009c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c0c:	4a24      	ldr	r2, [pc, #144]	; (8009ca0 <HAL_RCC_OscConfig+0x6c4>)
 8009c0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c14:	4b22      	ldr	r3, [pc, #136]	; (8009ca0 <HAL_RCC_OscConfig+0x6c4>)
 8009c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c18:	4a21      	ldr	r2, [pc, #132]	; (8009ca0 <HAL_RCC_OscConfig+0x6c4>)
 8009c1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009c20:	4b1f      	ldr	r3, [pc, #124]	; (8009ca0 <HAL_RCC_OscConfig+0x6c4>)
 8009c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c24:	4a1e      	ldr	r2, [pc, #120]	; (8009ca0 <HAL_RCC_OscConfig+0x6c4>)
 8009c26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009c2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009c2c:	4b1c      	ldr	r3, [pc, #112]	; (8009ca0 <HAL_RCC_OscConfig+0x6c4>)
 8009c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c30:	4a1b      	ldr	r2, [pc, #108]	; (8009ca0 <HAL_RCC_OscConfig+0x6c4>)
 8009c32:	f043 0301 	orr.w	r3, r3, #1
 8009c36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009c38:	4b19      	ldr	r3, [pc, #100]	; (8009ca0 <HAL_RCC_OscConfig+0x6c4>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4a18      	ldr	r2, [pc, #96]	; (8009ca0 <HAL_RCC_OscConfig+0x6c4>)
 8009c3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c44:	f7fc f890 	bl	8005d68 <HAL_GetTick>
 8009c48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009c4a:	e008      	b.n	8009c5e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c4c:	f7fc f88c 	bl	8005d68 <HAL_GetTick>
 8009c50:	4602      	mov	r2, r0
 8009c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c54:	1ad3      	subs	r3, r2, r3
 8009c56:	2b02      	cmp	r3, #2
 8009c58:	d901      	bls.n	8009c5e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8009c5a:	2303      	movs	r3, #3
 8009c5c:	e090      	b.n	8009d80 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009c5e:	4b10      	ldr	r3, [pc, #64]	; (8009ca0 <HAL_RCC_OscConfig+0x6c4>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d0f0      	beq.n	8009c4c <HAL_RCC_OscConfig+0x670>
 8009c6a:	e088      	b.n	8009d7e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c6c:	4b0c      	ldr	r3, [pc, #48]	; (8009ca0 <HAL_RCC_OscConfig+0x6c4>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a0b      	ldr	r2, [pc, #44]	; (8009ca0 <HAL_RCC_OscConfig+0x6c4>)
 8009c72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009c76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c78:	f7fc f876 	bl	8005d68 <HAL_GetTick>
 8009c7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009c7e:	e008      	b.n	8009c92 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c80:	f7fc f872 	bl	8005d68 <HAL_GetTick>
 8009c84:	4602      	mov	r2, r0
 8009c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c88:	1ad3      	subs	r3, r2, r3
 8009c8a:	2b02      	cmp	r3, #2
 8009c8c:	d901      	bls.n	8009c92 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8009c8e:	2303      	movs	r3, #3
 8009c90:	e076      	b.n	8009d80 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009c92:	4b03      	ldr	r3, [pc, #12]	; (8009ca0 <HAL_RCC_OscConfig+0x6c4>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d1f0      	bne.n	8009c80 <HAL_RCC_OscConfig+0x6a4>
 8009c9e:	e06e      	b.n	8009d7e <HAL_RCC_OscConfig+0x7a2>
 8009ca0:	58024400 	.word	0x58024400
 8009ca4:	fffffc0c 	.word	0xfffffc0c
 8009ca8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009cac:	4b36      	ldr	r3, [pc, #216]	; (8009d88 <HAL_RCC_OscConfig+0x7ac>)
 8009cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cb0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009cb2:	4b35      	ldr	r3, [pc, #212]	; (8009d88 <HAL_RCC_OscConfig+0x7ac>)
 8009cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cb6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d031      	beq.n	8009d24 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	f003 0203 	and.w	r2, r3, #3
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d12a      	bne.n	8009d24 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	091b      	lsrs	r3, r3, #4
 8009cd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d122      	bne.n	8009d24 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ce8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d11a      	bne.n	8009d24 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	0a5b      	lsrs	r3, r3, #9
 8009cf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cfa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d111      	bne.n	8009d24 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	0c1b      	lsrs	r3, r3, #16
 8009d04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d0c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009d0e:	429a      	cmp	r2, r3
 8009d10:	d108      	bne.n	8009d24 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	0e1b      	lsrs	r3, r3, #24
 8009d16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d1e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009d20:	429a      	cmp	r2, r3
 8009d22:	d001      	beq.n	8009d28 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009d24:	2301      	movs	r3, #1
 8009d26:	e02b      	b.n	8009d80 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009d28:	4b17      	ldr	r3, [pc, #92]	; (8009d88 <HAL_RCC_OscConfig+0x7ac>)
 8009d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d2c:	08db      	lsrs	r3, r3, #3
 8009d2e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d32:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d38:	693a      	ldr	r2, [r7, #16]
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d01f      	beq.n	8009d7e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009d3e:	4b12      	ldr	r3, [pc, #72]	; (8009d88 <HAL_RCC_OscConfig+0x7ac>)
 8009d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d42:	4a11      	ldr	r2, [pc, #68]	; (8009d88 <HAL_RCC_OscConfig+0x7ac>)
 8009d44:	f023 0301 	bic.w	r3, r3, #1
 8009d48:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009d4a:	f7fc f80d 	bl	8005d68 <HAL_GetTick>
 8009d4e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009d50:	bf00      	nop
 8009d52:	f7fc f809 	bl	8005d68 <HAL_GetTick>
 8009d56:	4602      	mov	r2, r0
 8009d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d0f9      	beq.n	8009d52 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009d5e:	4b0a      	ldr	r3, [pc, #40]	; (8009d88 <HAL_RCC_OscConfig+0x7ac>)
 8009d60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d62:	4b0a      	ldr	r3, [pc, #40]	; (8009d8c <HAL_RCC_OscConfig+0x7b0>)
 8009d64:	4013      	ands	r3, r2
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009d6a:	00d2      	lsls	r2, r2, #3
 8009d6c:	4906      	ldr	r1, [pc, #24]	; (8009d88 <HAL_RCC_OscConfig+0x7ac>)
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009d72:	4b05      	ldr	r3, [pc, #20]	; (8009d88 <HAL_RCC_OscConfig+0x7ac>)
 8009d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d76:	4a04      	ldr	r2, [pc, #16]	; (8009d88 <HAL_RCC_OscConfig+0x7ac>)
 8009d78:	f043 0301 	orr.w	r3, r3, #1
 8009d7c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009d7e:	2300      	movs	r3, #0
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3730      	adds	r7, #48	; 0x30
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}
 8009d88:	58024400 	.word	0x58024400
 8009d8c:	ffff0007 	.word	0xffff0007

08009d90 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b086      	sub	sp, #24
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d101      	bne.n	8009da4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009da0:	2301      	movs	r3, #1
 8009da2:	e19c      	b.n	800a0de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009da4:	4b8a      	ldr	r3, [pc, #552]	; (8009fd0 <HAL_RCC_ClockConfig+0x240>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f003 030f 	and.w	r3, r3, #15
 8009dac:	683a      	ldr	r2, [r7, #0]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d910      	bls.n	8009dd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009db2:	4b87      	ldr	r3, [pc, #540]	; (8009fd0 <HAL_RCC_ClockConfig+0x240>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f023 020f 	bic.w	r2, r3, #15
 8009dba:	4985      	ldr	r1, [pc, #532]	; (8009fd0 <HAL_RCC_ClockConfig+0x240>)
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009dc2:	4b83      	ldr	r3, [pc, #524]	; (8009fd0 <HAL_RCC_ClockConfig+0x240>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f003 030f 	and.w	r3, r3, #15
 8009dca:	683a      	ldr	r2, [r7, #0]
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d001      	beq.n	8009dd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	e184      	b.n	800a0de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f003 0304 	and.w	r3, r3, #4
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d010      	beq.n	8009e02 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	691a      	ldr	r2, [r3, #16]
 8009de4:	4b7b      	ldr	r3, [pc, #492]	; (8009fd4 <HAL_RCC_ClockConfig+0x244>)
 8009de6:	699b      	ldr	r3, [r3, #24]
 8009de8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d908      	bls.n	8009e02 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009df0:	4b78      	ldr	r3, [pc, #480]	; (8009fd4 <HAL_RCC_ClockConfig+0x244>)
 8009df2:	699b      	ldr	r3, [r3, #24]
 8009df4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	691b      	ldr	r3, [r3, #16]
 8009dfc:	4975      	ldr	r1, [pc, #468]	; (8009fd4 <HAL_RCC_ClockConfig+0x244>)
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f003 0308 	and.w	r3, r3, #8
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d010      	beq.n	8009e30 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	695a      	ldr	r2, [r3, #20]
 8009e12:	4b70      	ldr	r3, [pc, #448]	; (8009fd4 <HAL_RCC_ClockConfig+0x244>)
 8009e14:	69db      	ldr	r3, [r3, #28]
 8009e16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d908      	bls.n	8009e30 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009e1e:	4b6d      	ldr	r3, [pc, #436]	; (8009fd4 <HAL_RCC_ClockConfig+0x244>)
 8009e20:	69db      	ldr	r3, [r3, #28]
 8009e22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	695b      	ldr	r3, [r3, #20]
 8009e2a:	496a      	ldr	r1, [pc, #424]	; (8009fd4 <HAL_RCC_ClockConfig+0x244>)
 8009e2c:	4313      	orrs	r3, r2
 8009e2e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f003 0310 	and.w	r3, r3, #16
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d010      	beq.n	8009e5e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	699a      	ldr	r2, [r3, #24]
 8009e40:	4b64      	ldr	r3, [pc, #400]	; (8009fd4 <HAL_RCC_ClockConfig+0x244>)
 8009e42:	69db      	ldr	r3, [r3, #28]
 8009e44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d908      	bls.n	8009e5e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009e4c:	4b61      	ldr	r3, [pc, #388]	; (8009fd4 <HAL_RCC_ClockConfig+0x244>)
 8009e4e:	69db      	ldr	r3, [r3, #28]
 8009e50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	699b      	ldr	r3, [r3, #24]
 8009e58:	495e      	ldr	r1, [pc, #376]	; (8009fd4 <HAL_RCC_ClockConfig+0x244>)
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f003 0320 	and.w	r3, r3, #32
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d010      	beq.n	8009e8c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	69da      	ldr	r2, [r3, #28]
 8009e6e:	4b59      	ldr	r3, [pc, #356]	; (8009fd4 <HAL_RCC_ClockConfig+0x244>)
 8009e70:	6a1b      	ldr	r3, [r3, #32]
 8009e72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d908      	bls.n	8009e8c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009e7a:	4b56      	ldr	r3, [pc, #344]	; (8009fd4 <HAL_RCC_ClockConfig+0x244>)
 8009e7c:	6a1b      	ldr	r3, [r3, #32]
 8009e7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	69db      	ldr	r3, [r3, #28]
 8009e86:	4953      	ldr	r1, [pc, #332]	; (8009fd4 <HAL_RCC_ClockConfig+0x244>)
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f003 0302 	and.w	r3, r3, #2
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d010      	beq.n	8009eba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	68da      	ldr	r2, [r3, #12]
 8009e9c:	4b4d      	ldr	r3, [pc, #308]	; (8009fd4 <HAL_RCC_ClockConfig+0x244>)
 8009e9e:	699b      	ldr	r3, [r3, #24]
 8009ea0:	f003 030f 	and.w	r3, r3, #15
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d908      	bls.n	8009eba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009ea8:	4b4a      	ldr	r3, [pc, #296]	; (8009fd4 <HAL_RCC_ClockConfig+0x244>)
 8009eaa:	699b      	ldr	r3, [r3, #24]
 8009eac:	f023 020f 	bic.w	r2, r3, #15
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	68db      	ldr	r3, [r3, #12]
 8009eb4:	4947      	ldr	r1, [pc, #284]	; (8009fd4 <HAL_RCC_ClockConfig+0x244>)
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f003 0301 	and.w	r3, r3, #1
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d055      	beq.n	8009f72 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009ec6:	4b43      	ldr	r3, [pc, #268]	; (8009fd4 <HAL_RCC_ClockConfig+0x244>)
 8009ec8:	699b      	ldr	r3, [r3, #24]
 8009eca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	689b      	ldr	r3, [r3, #8]
 8009ed2:	4940      	ldr	r1, [pc, #256]	; (8009fd4 <HAL_RCC_ClockConfig+0x244>)
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	2b02      	cmp	r3, #2
 8009ede:	d107      	bne.n	8009ef0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009ee0:	4b3c      	ldr	r3, [pc, #240]	; (8009fd4 <HAL_RCC_ClockConfig+0x244>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d121      	bne.n	8009f30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009eec:	2301      	movs	r3, #1
 8009eee:	e0f6      	b.n	800a0de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	685b      	ldr	r3, [r3, #4]
 8009ef4:	2b03      	cmp	r3, #3
 8009ef6:	d107      	bne.n	8009f08 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009ef8:	4b36      	ldr	r3, [pc, #216]	; (8009fd4 <HAL_RCC_ClockConfig+0x244>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d115      	bne.n	8009f30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009f04:	2301      	movs	r3, #1
 8009f06:	e0ea      	b.n	800a0de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	d107      	bne.n	8009f20 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009f10:	4b30      	ldr	r3, [pc, #192]	; (8009fd4 <HAL_RCC_ClockConfig+0x244>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d109      	bne.n	8009f30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	e0de      	b.n	800a0de <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f20:	4b2c      	ldr	r3, [pc, #176]	; (8009fd4 <HAL_RCC_ClockConfig+0x244>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f003 0304 	and.w	r3, r3, #4
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d101      	bne.n	8009f30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	e0d6      	b.n	800a0de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009f30:	4b28      	ldr	r3, [pc, #160]	; (8009fd4 <HAL_RCC_ClockConfig+0x244>)
 8009f32:	691b      	ldr	r3, [r3, #16]
 8009f34:	f023 0207 	bic.w	r2, r3, #7
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	4925      	ldr	r1, [pc, #148]	; (8009fd4 <HAL_RCC_ClockConfig+0x244>)
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f42:	f7fb ff11 	bl	8005d68 <HAL_GetTick>
 8009f46:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f48:	e00a      	b.n	8009f60 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f4a:	f7fb ff0d 	bl	8005d68 <HAL_GetTick>
 8009f4e:	4602      	mov	r2, r0
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	1ad3      	subs	r3, r2, r3
 8009f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d901      	bls.n	8009f60 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009f5c:	2303      	movs	r3, #3
 8009f5e:	e0be      	b.n	800a0de <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f60:	4b1c      	ldr	r3, [pc, #112]	; (8009fd4 <HAL_RCC_ClockConfig+0x244>)
 8009f62:	691b      	ldr	r3, [r3, #16]
 8009f64:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	00db      	lsls	r3, r3, #3
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d1eb      	bne.n	8009f4a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f003 0302 	and.w	r3, r3, #2
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d010      	beq.n	8009fa0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	68da      	ldr	r2, [r3, #12]
 8009f82:	4b14      	ldr	r3, [pc, #80]	; (8009fd4 <HAL_RCC_ClockConfig+0x244>)
 8009f84:	699b      	ldr	r3, [r3, #24]
 8009f86:	f003 030f 	and.w	r3, r3, #15
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d208      	bcs.n	8009fa0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009f8e:	4b11      	ldr	r3, [pc, #68]	; (8009fd4 <HAL_RCC_ClockConfig+0x244>)
 8009f90:	699b      	ldr	r3, [r3, #24]
 8009f92:	f023 020f 	bic.w	r2, r3, #15
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	68db      	ldr	r3, [r3, #12]
 8009f9a:	490e      	ldr	r1, [pc, #56]	; (8009fd4 <HAL_RCC_ClockConfig+0x244>)
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009fa0:	4b0b      	ldr	r3, [pc, #44]	; (8009fd0 <HAL_RCC_ClockConfig+0x240>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f003 030f 	and.w	r3, r3, #15
 8009fa8:	683a      	ldr	r2, [r7, #0]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d214      	bcs.n	8009fd8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009fae:	4b08      	ldr	r3, [pc, #32]	; (8009fd0 <HAL_RCC_ClockConfig+0x240>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f023 020f 	bic.w	r2, r3, #15
 8009fb6:	4906      	ldr	r1, [pc, #24]	; (8009fd0 <HAL_RCC_ClockConfig+0x240>)
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009fbe:	4b04      	ldr	r3, [pc, #16]	; (8009fd0 <HAL_RCC_ClockConfig+0x240>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f003 030f 	and.w	r3, r3, #15
 8009fc6:	683a      	ldr	r2, [r7, #0]
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d005      	beq.n	8009fd8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	e086      	b.n	800a0de <HAL_RCC_ClockConfig+0x34e>
 8009fd0:	52002000 	.word	0x52002000
 8009fd4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f003 0304 	and.w	r3, r3, #4
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d010      	beq.n	800a006 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	691a      	ldr	r2, [r3, #16]
 8009fe8:	4b3f      	ldr	r3, [pc, #252]	; (800a0e8 <HAL_RCC_ClockConfig+0x358>)
 8009fea:	699b      	ldr	r3, [r3, #24]
 8009fec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d208      	bcs.n	800a006 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009ff4:	4b3c      	ldr	r3, [pc, #240]	; (800a0e8 <HAL_RCC_ClockConfig+0x358>)
 8009ff6:	699b      	ldr	r3, [r3, #24]
 8009ff8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	691b      	ldr	r3, [r3, #16]
 800a000:	4939      	ldr	r1, [pc, #228]	; (800a0e8 <HAL_RCC_ClockConfig+0x358>)
 800a002:	4313      	orrs	r3, r2
 800a004:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f003 0308 	and.w	r3, r3, #8
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d010      	beq.n	800a034 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	695a      	ldr	r2, [r3, #20]
 800a016:	4b34      	ldr	r3, [pc, #208]	; (800a0e8 <HAL_RCC_ClockConfig+0x358>)
 800a018:	69db      	ldr	r3, [r3, #28]
 800a01a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a01e:	429a      	cmp	r2, r3
 800a020:	d208      	bcs.n	800a034 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a022:	4b31      	ldr	r3, [pc, #196]	; (800a0e8 <HAL_RCC_ClockConfig+0x358>)
 800a024:	69db      	ldr	r3, [r3, #28]
 800a026:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	695b      	ldr	r3, [r3, #20]
 800a02e:	492e      	ldr	r1, [pc, #184]	; (800a0e8 <HAL_RCC_ClockConfig+0x358>)
 800a030:	4313      	orrs	r3, r2
 800a032:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f003 0310 	and.w	r3, r3, #16
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d010      	beq.n	800a062 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	699a      	ldr	r2, [r3, #24]
 800a044:	4b28      	ldr	r3, [pc, #160]	; (800a0e8 <HAL_RCC_ClockConfig+0x358>)
 800a046:	69db      	ldr	r3, [r3, #28]
 800a048:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a04c:	429a      	cmp	r2, r3
 800a04e:	d208      	bcs.n	800a062 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a050:	4b25      	ldr	r3, [pc, #148]	; (800a0e8 <HAL_RCC_ClockConfig+0x358>)
 800a052:	69db      	ldr	r3, [r3, #28]
 800a054:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	699b      	ldr	r3, [r3, #24]
 800a05c:	4922      	ldr	r1, [pc, #136]	; (800a0e8 <HAL_RCC_ClockConfig+0x358>)
 800a05e:	4313      	orrs	r3, r2
 800a060:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f003 0320 	and.w	r3, r3, #32
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d010      	beq.n	800a090 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	69da      	ldr	r2, [r3, #28]
 800a072:	4b1d      	ldr	r3, [pc, #116]	; (800a0e8 <HAL_RCC_ClockConfig+0x358>)
 800a074:	6a1b      	ldr	r3, [r3, #32]
 800a076:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a07a:	429a      	cmp	r2, r3
 800a07c:	d208      	bcs.n	800a090 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a07e:	4b1a      	ldr	r3, [pc, #104]	; (800a0e8 <HAL_RCC_ClockConfig+0x358>)
 800a080:	6a1b      	ldr	r3, [r3, #32]
 800a082:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	69db      	ldr	r3, [r3, #28]
 800a08a:	4917      	ldr	r1, [pc, #92]	; (800a0e8 <HAL_RCC_ClockConfig+0x358>)
 800a08c:	4313      	orrs	r3, r2
 800a08e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a090:	f000 f834 	bl	800a0fc <HAL_RCC_GetSysClockFreq>
 800a094:	4602      	mov	r2, r0
 800a096:	4b14      	ldr	r3, [pc, #80]	; (800a0e8 <HAL_RCC_ClockConfig+0x358>)
 800a098:	699b      	ldr	r3, [r3, #24]
 800a09a:	0a1b      	lsrs	r3, r3, #8
 800a09c:	f003 030f 	and.w	r3, r3, #15
 800a0a0:	4912      	ldr	r1, [pc, #72]	; (800a0ec <HAL_RCC_ClockConfig+0x35c>)
 800a0a2:	5ccb      	ldrb	r3, [r1, r3]
 800a0a4:	f003 031f 	and.w	r3, r3, #31
 800a0a8:	fa22 f303 	lsr.w	r3, r2, r3
 800a0ac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a0ae:	4b0e      	ldr	r3, [pc, #56]	; (800a0e8 <HAL_RCC_ClockConfig+0x358>)
 800a0b0:	699b      	ldr	r3, [r3, #24]
 800a0b2:	f003 030f 	and.w	r3, r3, #15
 800a0b6:	4a0d      	ldr	r2, [pc, #52]	; (800a0ec <HAL_RCC_ClockConfig+0x35c>)
 800a0b8:	5cd3      	ldrb	r3, [r2, r3]
 800a0ba:	f003 031f 	and.w	r3, r3, #31
 800a0be:	693a      	ldr	r2, [r7, #16]
 800a0c0:	fa22 f303 	lsr.w	r3, r2, r3
 800a0c4:	4a0a      	ldr	r2, [pc, #40]	; (800a0f0 <HAL_RCC_ClockConfig+0x360>)
 800a0c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a0c8:	4a0a      	ldr	r2, [pc, #40]	; (800a0f4 <HAL_RCC_ClockConfig+0x364>)
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a0ce:	4b0a      	ldr	r3, [pc, #40]	; (800a0f8 <HAL_RCC_ClockConfig+0x368>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f7fb fdfe 	bl	8005cd4 <HAL_InitTick>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a0dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3718      	adds	r7, #24
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	58024400 	.word	0x58024400
 800a0ec:	0801037c 	.word	0x0801037c
 800a0f0:	24000054 	.word	0x24000054
 800a0f4:	24000050 	.word	0x24000050
 800a0f8:	24000058 	.word	0x24000058

0800a0fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b089      	sub	sp, #36	; 0x24
 800a100:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a102:	4bb3      	ldr	r3, [pc, #716]	; (800a3d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a104:	691b      	ldr	r3, [r3, #16]
 800a106:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a10a:	2b18      	cmp	r3, #24
 800a10c:	f200 8155 	bhi.w	800a3ba <HAL_RCC_GetSysClockFreq+0x2be>
 800a110:	a201      	add	r2, pc, #4	; (adr r2, 800a118 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a116:	bf00      	nop
 800a118:	0800a17d 	.word	0x0800a17d
 800a11c:	0800a3bb 	.word	0x0800a3bb
 800a120:	0800a3bb 	.word	0x0800a3bb
 800a124:	0800a3bb 	.word	0x0800a3bb
 800a128:	0800a3bb 	.word	0x0800a3bb
 800a12c:	0800a3bb 	.word	0x0800a3bb
 800a130:	0800a3bb 	.word	0x0800a3bb
 800a134:	0800a3bb 	.word	0x0800a3bb
 800a138:	0800a1a3 	.word	0x0800a1a3
 800a13c:	0800a3bb 	.word	0x0800a3bb
 800a140:	0800a3bb 	.word	0x0800a3bb
 800a144:	0800a3bb 	.word	0x0800a3bb
 800a148:	0800a3bb 	.word	0x0800a3bb
 800a14c:	0800a3bb 	.word	0x0800a3bb
 800a150:	0800a3bb 	.word	0x0800a3bb
 800a154:	0800a3bb 	.word	0x0800a3bb
 800a158:	0800a1a9 	.word	0x0800a1a9
 800a15c:	0800a3bb 	.word	0x0800a3bb
 800a160:	0800a3bb 	.word	0x0800a3bb
 800a164:	0800a3bb 	.word	0x0800a3bb
 800a168:	0800a3bb 	.word	0x0800a3bb
 800a16c:	0800a3bb 	.word	0x0800a3bb
 800a170:	0800a3bb 	.word	0x0800a3bb
 800a174:	0800a3bb 	.word	0x0800a3bb
 800a178:	0800a1af 	.word	0x0800a1af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a17c:	4b94      	ldr	r3, [pc, #592]	; (800a3d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f003 0320 	and.w	r3, r3, #32
 800a184:	2b00      	cmp	r3, #0
 800a186:	d009      	beq.n	800a19c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a188:	4b91      	ldr	r3, [pc, #580]	; (800a3d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	08db      	lsrs	r3, r3, #3
 800a18e:	f003 0303 	and.w	r3, r3, #3
 800a192:	4a90      	ldr	r2, [pc, #576]	; (800a3d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a194:	fa22 f303 	lsr.w	r3, r2, r3
 800a198:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a19a:	e111      	b.n	800a3c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a19c:	4b8d      	ldr	r3, [pc, #564]	; (800a3d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a19e:	61bb      	str	r3, [r7, #24]
      break;
 800a1a0:	e10e      	b.n	800a3c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a1a2:	4b8d      	ldr	r3, [pc, #564]	; (800a3d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a1a4:	61bb      	str	r3, [r7, #24]
      break;
 800a1a6:	e10b      	b.n	800a3c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a1a8:	4b8c      	ldr	r3, [pc, #560]	; (800a3dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a1aa:	61bb      	str	r3, [r7, #24]
      break;
 800a1ac:	e108      	b.n	800a3c0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a1ae:	4b88      	ldr	r3, [pc, #544]	; (800a3d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1b2:	f003 0303 	and.w	r3, r3, #3
 800a1b6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a1b8:	4b85      	ldr	r3, [pc, #532]	; (800a3d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1bc:	091b      	lsrs	r3, r3, #4
 800a1be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1c2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a1c4:	4b82      	ldr	r3, [pc, #520]	; (800a3d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1c8:	f003 0301 	and.w	r3, r3, #1
 800a1cc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a1ce:	4b80      	ldr	r3, [pc, #512]	; (800a3d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1d2:	08db      	lsrs	r3, r3, #3
 800a1d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a1d8:	68fa      	ldr	r2, [r7, #12]
 800a1da:	fb02 f303 	mul.w	r3, r2, r3
 800a1de:	ee07 3a90 	vmov	s15, r3
 800a1e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1e6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	f000 80e1 	beq.w	800a3b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	2b02      	cmp	r3, #2
 800a1f6:	f000 8083 	beq.w	800a300 <HAL_RCC_GetSysClockFreq+0x204>
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	2b02      	cmp	r3, #2
 800a1fe:	f200 80a1 	bhi.w	800a344 <HAL_RCC_GetSysClockFreq+0x248>
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d003      	beq.n	800a210 <HAL_RCC_GetSysClockFreq+0x114>
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	2b01      	cmp	r3, #1
 800a20c:	d056      	beq.n	800a2bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800a20e:	e099      	b.n	800a344 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a210:	4b6f      	ldr	r3, [pc, #444]	; (800a3d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f003 0320 	and.w	r3, r3, #32
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d02d      	beq.n	800a278 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a21c:	4b6c      	ldr	r3, [pc, #432]	; (800a3d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	08db      	lsrs	r3, r3, #3
 800a222:	f003 0303 	and.w	r3, r3, #3
 800a226:	4a6b      	ldr	r2, [pc, #428]	; (800a3d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a228:	fa22 f303 	lsr.w	r3, r2, r3
 800a22c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	ee07 3a90 	vmov	s15, r3
 800a234:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	ee07 3a90 	vmov	s15, r3
 800a23e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a246:	4b62      	ldr	r3, [pc, #392]	; (800a3d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a24a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a24e:	ee07 3a90 	vmov	s15, r3
 800a252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a256:	ed97 6a02 	vldr	s12, [r7, #8]
 800a25a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a3e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a25e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a266:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a26a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a26e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a272:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a276:	e087      	b.n	800a388 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	ee07 3a90 	vmov	s15, r3
 800a27e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a282:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a3e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a28a:	4b51      	ldr	r3, [pc, #324]	; (800a3d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a28c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a28e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a292:	ee07 3a90 	vmov	s15, r3
 800a296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a29a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a29e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a3e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a2a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a2ba:	e065      	b.n	800a388 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	ee07 3a90 	vmov	s15, r3
 800a2c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2c6:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a3e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a2ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2ce:	4b40      	ldr	r3, [pc, #256]	; (800a3d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2d6:	ee07 3a90 	vmov	s15, r3
 800a2da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2de:	ed97 6a02 	vldr	s12, [r7, #8]
 800a2e2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a3e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a2e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a2fe:	e043      	b.n	800a388 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	ee07 3a90 	vmov	s15, r3
 800a306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a30a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a3ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800a30e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a312:	4b2f      	ldr	r3, [pc, #188]	; (800a3d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a31a:	ee07 3a90 	vmov	s15, r3
 800a31e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a322:	ed97 6a02 	vldr	s12, [r7, #8]
 800a326:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a3e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a32a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a32e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a33a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a33e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a342:	e021      	b.n	800a388 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	ee07 3a90 	vmov	s15, r3
 800a34a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a34e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a3e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a356:	4b1e      	ldr	r3, [pc, #120]	; (800a3d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a35a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a35e:	ee07 3a90 	vmov	s15, r3
 800a362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a366:	ed97 6a02 	vldr	s12, [r7, #8]
 800a36a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a3e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a36e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a37a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a37e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a382:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a386:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a388:	4b11      	ldr	r3, [pc, #68]	; (800a3d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a38a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a38c:	0a5b      	lsrs	r3, r3, #9
 800a38e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a392:	3301      	adds	r3, #1
 800a394:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	ee07 3a90 	vmov	s15, r3
 800a39c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a3a0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3ac:	ee17 3a90 	vmov	r3, s15
 800a3b0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a3b2:	e005      	b.n	800a3c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	61bb      	str	r3, [r7, #24]
      break;
 800a3b8:	e002      	b.n	800a3c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a3ba:	4b07      	ldr	r3, [pc, #28]	; (800a3d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a3bc:	61bb      	str	r3, [r7, #24]
      break;
 800a3be:	bf00      	nop
  }

  return sysclockfreq;
 800a3c0:	69bb      	ldr	r3, [r7, #24]
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3724      	adds	r7, #36	; 0x24
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr
 800a3ce:	bf00      	nop
 800a3d0:	58024400 	.word	0x58024400
 800a3d4:	03d09000 	.word	0x03d09000
 800a3d8:	003d0900 	.word	0x003d0900
 800a3dc:	007a1200 	.word	0x007a1200
 800a3e0:	46000000 	.word	0x46000000
 800a3e4:	4c742400 	.word	0x4c742400
 800a3e8:	4a742400 	.word	0x4a742400
 800a3ec:	4af42400 	.word	0x4af42400

0800a3f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a3f6:	f7ff fe81 	bl	800a0fc <HAL_RCC_GetSysClockFreq>
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	4b10      	ldr	r3, [pc, #64]	; (800a440 <HAL_RCC_GetHCLKFreq+0x50>)
 800a3fe:	699b      	ldr	r3, [r3, #24]
 800a400:	0a1b      	lsrs	r3, r3, #8
 800a402:	f003 030f 	and.w	r3, r3, #15
 800a406:	490f      	ldr	r1, [pc, #60]	; (800a444 <HAL_RCC_GetHCLKFreq+0x54>)
 800a408:	5ccb      	ldrb	r3, [r1, r3]
 800a40a:	f003 031f 	and.w	r3, r3, #31
 800a40e:	fa22 f303 	lsr.w	r3, r2, r3
 800a412:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a414:	4b0a      	ldr	r3, [pc, #40]	; (800a440 <HAL_RCC_GetHCLKFreq+0x50>)
 800a416:	699b      	ldr	r3, [r3, #24]
 800a418:	f003 030f 	and.w	r3, r3, #15
 800a41c:	4a09      	ldr	r2, [pc, #36]	; (800a444 <HAL_RCC_GetHCLKFreq+0x54>)
 800a41e:	5cd3      	ldrb	r3, [r2, r3]
 800a420:	f003 031f 	and.w	r3, r3, #31
 800a424:	687a      	ldr	r2, [r7, #4]
 800a426:	fa22 f303 	lsr.w	r3, r2, r3
 800a42a:	4a07      	ldr	r2, [pc, #28]	; (800a448 <HAL_RCC_GetHCLKFreq+0x58>)
 800a42c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a42e:	4a07      	ldr	r2, [pc, #28]	; (800a44c <HAL_RCC_GetHCLKFreq+0x5c>)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a434:	4b04      	ldr	r3, [pc, #16]	; (800a448 <HAL_RCC_GetHCLKFreq+0x58>)
 800a436:	681b      	ldr	r3, [r3, #0]
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3708      	adds	r7, #8
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}
 800a440:	58024400 	.word	0x58024400
 800a444:	0801037c 	.word	0x0801037c
 800a448:	24000054 	.word	0x24000054
 800a44c:	24000050 	.word	0x24000050

0800a450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a454:	f7ff ffcc 	bl	800a3f0 <HAL_RCC_GetHCLKFreq>
 800a458:	4602      	mov	r2, r0
 800a45a:	4b06      	ldr	r3, [pc, #24]	; (800a474 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a45c:	69db      	ldr	r3, [r3, #28]
 800a45e:	091b      	lsrs	r3, r3, #4
 800a460:	f003 0307 	and.w	r3, r3, #7
 800a464:	4904      	ldr	r1, [pc, #16]	; (800a478 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a466:	5ccb      	ldrb	r3, [r1, r3]
 800a468:	f003 031f 	and.w	r3, r3, #31
 800a46c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a470:	4618      	mov	r0, r3
 800a472:	bd80      	pop	{r7, pc}
 800a474:	58024400 	.word	0x58024400
 800a478:	0801037c 	.word	0x0801037c

0800a47c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a480:	f7ff ffb6 	bl	800a3f0 <HAL_RCC_GetHCLKFreq>
 800a484:	4602      	mov	r2, r0
 800a486:	4b06      	ldr	r3, [pc, #24]	; (800a4a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a488:	69db      	ldr	r3, [r3, #28]
 800a48a:	0a1b      	lsrs	r3, r3, #8
 800a48c:	f003 0307 	and.w	r3, r3, #7
 800a490:	4904      	ldr	r1, [pc, #16]	; (800a4a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a492:	5ccb      	ldrb	r3, [r1, r3]
 800a494:	f003 031f 	and.w	r3, r3, #31
 800a498:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	bd80      	pop	{r7, pc}
 800a4a0:	58024400 	.word	0x58024400
 800a4a4:	0801037c 	.word	0x0801037c

0800a4a8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a4a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a4ac:	b0c6      	sub	sp, #280	; 0x118
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a4c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a4cc:	2500      	movs	r5, #0
 800a4ce:	ea54 0305 	orrs.w	r3, r4, r5
 800a4d2:	d049      	beq.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a4d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a4de:	d02f      	beq.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a4e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a4e4:	d828      	bhi.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a4e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a4ea:	d01a      	beq.n	800a522 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a4ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a4f0:	d822      	bhi.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d003      	beq.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a4f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a4fa:	d007      	beq.n	800a50c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a4fc:	e01c      	b.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4fe:	4bab      	ldr	r3, [pc, #684]	; (800a7ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a502:	4aaa      	ldr	r2, [pc, #680]	; (800a7ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a508:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a50a:	e01a      	b.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a50c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a510:	3308      	adds	r3, #8
 800a512:	2102      	movs	r1, #2
 800a514:	4618      	mov	r0, r3
 800a516:	f001 fc25 	bl	800bd64 <RCCEx_PLL2_Config>
 800a51a:	4603      	mov	r3, r0
 800a51c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a520:	e00f      	b.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a522:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a526:	3328      	adds	r3, #40	; 0x28
 800a528:	2102      	movs	r1, #2
 800a52a:	4618      	mov	r0, r3
 800a52c:	f001 fccc 	bl	800bec8 <RCCEx_PLL3_Config>
 800a530:	4603      	mov	r3, r0
 800a532:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a536:	e004      	b.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a538:	2301      	movs	r3, #1
 800a53a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a53e:	e000      	b.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a540:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a542:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a546:	2b00      	cmp	r3, #0
 800a548:	d10a      	bne.n	800a560 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a54a:	4b98      	ldr	r3, [pc, #608]	; (800a7ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a54c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a54e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a552:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a556:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a558:	4a94      	ldr	r2, [pc, #592]	; (800a7ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a55a:	430b      	orrs	r3, r1
 800a55c:	6513      	str	r3, [r2, #80]	; 0x50
 800a55e:	e003      	b.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a560:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a564:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a568:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a570:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800a574:	f04f 0900 	mov.w	r9, #0
 800a578:	ea58 0309 	orrs.w	r3, r8, r9
 800a57c:	d047      	beq.n	800a60e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a57e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a584:	2b04      	cmp	r3, #4
 800a586:	d82a      	bhi.n	800a5de <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a588:	a201      	add	r2, pc, #4	; (adr r2, 800a590 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a58a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a58e:	bf00      	nop
 800a590:	0800a5a5 	.word	0x0800a5a5
 800a594:	0800a5b3 	.word	0x0800a5b3
 800a598:	0800a5c9 	.word	0x0800a5c9
 800a59c:	0800a5e7 	.word	0x0800a5e7
 800a5a0:	0800a5e7 	.word	0x0800a5e7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5a4:	4b81      	ldr	r3, [pc, #516]	; (800a7ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5a8:	4a80      	ldr	r2, [pc, #512]	; (800a7ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a5aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a5b0:	e01a      	b.n	800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a5b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5b6:	3308      	adds	r3, #8
 800a5b8:	2100      	movs	r1, #0
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f001 fbd2 	bl	800bd64 <RCCEx_PLL2_Config>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a5c6:	e00f      	b.n	800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a5c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5cc:	3328      	adds	r3, #40	; 0x28
 800a5ce:	2100      	movs	r1, #0
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f001 fc79 	bl	800bec8 <RCCEx_PLL3_Config>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a5dc:	e004      	b.n	800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a5e4:	e000      	b.n	800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a5e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d10a      	bne.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a5f0:	4b6e      	ldr	r3, [pc, #440]	; (800a7ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a5f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5f4:	f023 0107 	bic.w	r1, r3, #7
 800a5f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5fe:	4a6b      	ldr	r2, [pc, #428]	; (800a7ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a600:	430b      	orrs	r3, r1
 800a602:	6513      	str	r3, [r2, #80]	; 0x50
 800a604:	e003      	b.n	800a60e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a606:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a60a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a60e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a616:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800a61a:	f04f 0b00 	mov.w	fp, #0
 800a61e:	ea5a 030b 	orrs.w	r3, sl, fp
 800a622:	d05b      	beq.n	800a6dc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a628:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a62c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a630:	d03b      	beq.n	800a6aa <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a632:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a636:	d834      	bhi.n	800a6a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a638:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a63c:	d037      	beq.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a63e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a642:	d82e      	bhi.n	800a6a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a644:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a648:	d033      	beq.n	800a6b2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a64a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a64e:	d828      	bhi.n	800a6a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a650:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a654:	d01a      	beq.n	800a68c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800a656:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a65a:	d822      	bhi.n	800a6a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d003      	beq.n	800a668 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800a660:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a664:	d007      	beq.n	800a676 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800a666:	e01c      	b.n	800a6a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a668:	4b50      	ldr	r3, [pc, #320]	; (800a7ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a66a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a66c:	4a4f      	ldr	r2, [pc, #316]	; (800a7ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a66e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a672:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a674:	e01e      	b.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a676:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a67a:	3308      	adds	r3, #8
 800a67c:	2100      	movs	r1, #0
 800a67e:	4618      	mov	r0, r3
 800a680:	f001 fb70 	bl	800bd64 <RCCEx_PLL2_Config>
 800a684:	4603      	mov	r3, r0
 800a686:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a68a:	e013      	b.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a68c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a690:	3328      	adds	r3, #40	; 0x28
 800a692:	2100      	movs	r1, #0
 800a694:	4618      	mov	r0, r3
 800a696:	f001 fc17 	bl	800bec8 <RCCEx_PLL3_Config>
 800a69a:	4603      	mov	r3, r0
 800a69c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a6a0:	e008      	b.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a6a8:	e004      	b.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a6aa:	bf00      	nop
 800a6ac:	e002      	b.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a6ae:	bf00      	nop
 800a6b0:	e000      	b.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a6b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d10b      	bne.n	800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a6bc:	4b3b      	ldr	r3, [pc, #236]	; (800a7ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a6be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6c0:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800a6c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a6cc:	4a37      	ldr	r2, [pc, #220]	; (800a7ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a6ce:	430b      	orrs	r3, r1
 800a6d0:	6593      	str	r3, [r2, #88]	; 0x58
 800a6d2:	e003      	b.n	800a6dc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a6d8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a6dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e4:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800a6e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a6f2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	d05d      	beq.n	800a7b8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a6fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a700:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a704:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a708:	d03b      	beq.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800a70a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a70e:	d834      	bhi.n	800a77a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a710:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a714:	d037      	beq.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800a716:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a71a:	d82e      	bhi.n	800a77a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a71c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a720:	d033      	beq.n	800a78a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800a722:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a726:	d828      	bhi.n	800a77a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a728:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a72c:	d01a      	beq.n	800a764 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800a72e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a732:	d822      	bhi.n	800a77a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a734:	2b00      	cmp	r3, #0
 800a736:	d003      	beq.n	800a740 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a738:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a73c:	d007      	beq.n	800a74e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a73e:	e01c      	b.n	800a77a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a740:	4b1a      	ldr	r3, [pc, #104]	; (800a7ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a744:	4a19      	ldr	r2, [pc, #100]	; (800a7ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a746:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a74a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a74c:	e01e      	b.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a74e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a752:	3308      	adds	r3, #8
 800a754:	2100      	movs	r1, #0
 800a756:	4618      	mov	r0, r3
 800a758:	f001 fb04 	bl	800bd64 <RCCEx_PLL2_Config>
 800a75c:	4603      	mov	r3, r0
 800a75e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a762:	e013      	b.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a764:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a768:	3328      	adds	r3, #40	; 0x28
 800a76a:	2100      	movs	r1, #0
 800a76c:	4618      	mov	r0, r3
 800a76e:	f001 fbab 	bl	800bec8 <RCCEx_PLL3_Config>
 800a772:	4603      	mov	r3, r0
 800a774:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a778:	e008      	b.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a77a:	2301      	movs	r3, #1
 800a77c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a780:	e004      	b.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a782:	bf00      	nop
 800a784:	e002      	b.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a786:	bf00      	nop
 800a788:	e000      	b.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a78a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a78c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a790:	2b00      	cmp	r3, #0
 800a792:	d10d      	bne.n	800a7b0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a794:	4b05      	ldr	r3, [pc, #20]	; (800a7ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a798:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800a79c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a7a4:	4a01      	ldr	r2, [pc, #4]	; (800a7ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a7a6:	430b      	orrs	r3, r1
 800a7a8:	6593      	str	r3, [r2, #88]	; 0x58
 800a7aa:	e005      	b.n	800a7b8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800a7ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a7b4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a7b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800a7c4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a7ce:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800a7d2:	460b      	mov	r3, r1
 800a7d4:	4313      	orrs	r3, r2
 800a7d6:	d03a      	beq.n	800a84e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800a7d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7de:	2b30      	cmp	r3, #48	; 0x30
 800a7e0:	d01f      	beq.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800a7e2:	2b30      	cmp	r3, #48	; 0x30
 800a7e4:	d819      	bhi.n	800a81a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a7e6:	2b20      	cmp	r3, #32
 800a7e8:	d00c      	beq.n	800a804 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a7ea:	2b20      	cmp	r3, #32
 800a7ec:	d815      	bhi.n	800a81a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d019      	beq.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a7f2:	2b10      	cmp	r3, #16
 800a7f4:	d111      	bne.n	800a81a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7f6:	4baa      	ldr	r3, [pc, #680]	; (800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a7f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7fa:	4aa9      	ldr	r2, [pc, #676]	; (800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a7fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a800:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a802:	e011      	b.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a804:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a808:	3308      	adds	r3, #8
 800a80a:	2102      	movs	r1, #2
 800a80c:	4618      	mov	r0, r3
 800a80e:	f001 faa9 	bl	800bd64 <RCCEx_PLL2_Config>
 800a812:	4603      	mov	r3, r0
 800a814:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a818:	e006      	b.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a81a:	2301      	movs	r3, #1
 800a81c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a820:	e002      	b.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a822:	bf00      	nop
 800a824:	e000      	b.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a826:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a828:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d10a      	bne.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a830:	4b9b      	ldr	r3, [pc, #620]	; (800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a834:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800a838:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a83c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a83e:	4a98      	ldr	r2, [pc, #608]	; (800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a840:	430b      	orrs	r3, r1
 800a842:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a844:	e003      	b.n	800a84e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a846:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a84a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a84e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a856:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800a85a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a85e:	2300      	movs	r3, #0
 800a860:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a864:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800a868:	460b      	mov	r3, r1
 800a86a:	4313      	orrs	r3, r2
 800a86c:	d051      	beq.n	800a912 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a86e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a874:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a878:	d035      	beq.n	800a8e6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800a87a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a87e:	d82e      	bhi.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a880:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a884:	d031      	beq.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0x442>
 800a886:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a88a:	d828      	bhi.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a88c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a890:	d01a      	beq.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800a892:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a896:	d822      	bhi.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d003      	beq.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800a89c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8a0:	d007      	beq.n	800a8b2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800a8a2:	e01c      	b.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8a4:	4b7e      	ldr	r3, [pc, #504]	; (800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a8a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8a8:	4a7d      	ldr	r2, [pc, #500]	; (800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a8aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a8b0:	e01c      	b.n	800a8ec <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a8b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8b6:	3308      	adds	r3, #8
 800a8b8:	2100      	movs	r1, #0
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f001 fa52 	bl	800bd64 <RCCEx_PLL2_Config>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a8c6:	e011      	b.n	800a8ec <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a8c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8cc:	3328      	adds	r3, #40	; 0x28
 800a8ce:	2100      	movs	r1, #0
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f001 faf9 	bl	800bec8 <RCCEx_PLL3_Config>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a8dc:	e006      	b.n	800a8ec <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8de:	2301      	movs	r3, #1
 800a8e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a8e4:	e002      	b.n	800a8ec <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a8e6:	bf00      	nop
 800a8e8:	e000      	b.n	800a8ec <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a8ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d10a      	bne.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a8f4:	4b6a      	ldr	r3, [pc, #424]	; (800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a8f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8f8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800a8fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a902:	4a67      	ldr	r2, [pc, #412]	; (800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a904:	430b      	orrs	r3, r1
 800a906:	6513      	str	r3, [r2, #80]	; 0x50
 800a908:	e003      	b.n	800a912 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a90a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a90e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a912:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800a91e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a922:	2300      	movs	r3, #0
 800a924:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a928:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800a92c:	460b      	mov	r3, r1
 800a92e:	4313      	orrs	r3, r2
 800a930:	d053      	beq.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a932:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a938:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a93c:	d033      	beq.n	800a9a6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800a93e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a942:	d82c      	bhi.n	800a99e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a944:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a948:	d02f      	beq.n	800a9aa <HAL_RCCEx_PeriphCLKConfig+0x502>
 800a94a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a94e:	d826      	bhi.n	800a99e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a950:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a954:	d02b      	beq.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0x506>
 800a956:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a95a:	d820      	bhi.n	800a99e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a95c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a960:	d012      	beq.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800a962:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a966:	d81a      	bhi.n	800a99e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d022      	beq.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800a96c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a970:	d115      	bne.n	800a99e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a976:	3308      	adds	r3, #8
 800a978:	2101      	movs	r1, #1
 800a97a:	4618      	mov	r0, r3
 800a97c:	f001 f9f2 	bl	800bd64 <RCCEx_PLL2_Config>
 800a980:	4603      	mov	r3, r0
 800a982:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a986:	e015      	b.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a988:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a98c:	3328      	adds	r3, #40	; 0x28
 800a98e:	2101      	movs	r1, #1
 800a990:	4618      	mov	r0, r3
 800a992:	f001 fa99 	bl	800bec8 <RCCEx_PLL3_Config>
 800a996:	4603      	mov	r3, r0
 800a998:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a99c:	e00a      	b.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a99e:	2301      	movs	r3, #1
 800a9a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a9a4:	e006      	b.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a9a6:	bf00      	nop
 800a9a8:	e004      	b.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a9aa:	bf00      	nop
 800a9ac:	e002      	b.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a9ae:	bf00      	nop
 800a9b0:	e000      	b.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a9b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d10a      	bne.n	800a9d2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a9bc:	4b38      	ldr	r3, [pc, #224]	; (800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a9be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9c0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800a9c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9ca:	4a35      	ldr	r2, [pc, #212]	; (800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a9cc:	430b      	orrs	r3, r1
 800a9ce:	6513      	str	r3, [r2, #80]	; 0x50
 800a9d0:	e003      	b.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9d2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a9d6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a9da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800a9e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a9f0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	d058      	beq.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a9fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800aa02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa06:	d033      	beq.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800aa08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa0c:	d82c      	bhi.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800aa0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa12:	d02f      	beq.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800aa14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa18:	d826      	bhi.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800aa1a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aa1e:	d02b      	beq.n	800aa78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800aa20:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aa24:	d820      	bhi.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800aa26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa2a:	d012      	beq.n	800aa52 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800aa2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa30:	d81a      	bhi.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d022      	beq.n	800aa7c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800aa36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa3a:	d115      	bne.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aa3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa40:	3308      	adds	r3, #8
 800aa42:	2101      	movs	r1, #1
 800aa44:	4618      	mov	r0, r3
 800aa46:	f001 f98d 	bl	800bd64 <RCCEx_PLL2_Config>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800aa50:	e015      	b.n	800aa7e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aa52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa56:	3328      	adds	r3, #40	; 0x28
 800aa58:	2101      	movs	r1, #1
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f001 fa34 	bl	800bec8 <RCCEx_PLL3_Config>
 800aa60:	4603      	mov	r3, r0
 800aa62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800aa66:	e00a      	b.n	800aa7e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800aa68:	2301      	movs	r3, #1
 800aa6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aa6e:	e006      	b.n	800aa7e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800aa70:	bf00      	nop
 800aa72:	e004      	b.n	800aa7e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800aa74:	bf00      	nop
 800aa76:	e002      	b.n	800aa7e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800aa78:	bf00      	nop
 800aa7a:	e000      	b.n	800aa7e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800aa7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa7e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d10e      	bne.n	800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800aa86:	4b06      	ldr	r3, [pc, #24]	; (800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aa88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa8a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800aa8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa92:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800aa96:	4a02      	ldr	r2, [pc, #8]	; (800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aa98:	430b      	orrs	r3, r1
 800aa9a:	6593      	str	r3, [r2, #88]	; 0x58
 800aa9c:	e006      	b.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0x604>
 800aa9e:	bf00      	nop
 800aaa0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aaa4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aaa8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800aaac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800aab8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aabc:	2300      	movs	r3, #0
 800aabe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800aac2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800aac6:	460b      	mov	r3, r1
 800aac8:	4313      	orrs	r3, r2
 800aaca:	d037      	beq.n	800ab3c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800aacc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aad2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aad6:	d00e      	beq.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800aad8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aadc:	d816      	bhi.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d018      	beq.n	800ab14 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800aae2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aae6:	d111      	bne.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aae8:	4bc4      	ldr	r3, [pc, #784]	; (800adfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aaea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaec:	4ac3      	ldr	r2, [pc, #780]	; (800adfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aaee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aaf2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800aaf4:	e00f      	b.n	800ab16 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aaf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aafa:	3308      	adds	r3, #8
 800aafc:	2101      	movs	r1, #1
 800aafe:	4618      	mov	r0, r3
 800ab00:	f001 f930 	bl	800bd64 <RCCEx_PLL2_Config>
 800ab04:	4603      	mov	r3, r0
 800ab06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ab0a:	e004      	b.n	800ab16 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ab12:	e000      	b.n	800ab16 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800ab14:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab16:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d10a      	bne.n	800ab34 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ab1e:	4bb7      	ldr	r3, [pc, #732]	; (800adfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ab20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab22:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800ab26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab2c:	4ab3      	ldr	r2, [pc, #716]	; (800adfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ab2e:	430b      	orrs	r3, r1
 800ab30:	6513      	str	r3, [r2, #80]	; 0x50
 800ab32:	e003      	b.n	800ab3c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab38:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ab3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab44:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800ab48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ab52:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800ab56:	460b      	mov	r3, r1
 800ab58:	4313      	orrs	r3, r2
 800ab5a:	d039      	beq.n	800abd0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800ab5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab62:	2b03      	cmp	r3, #3
 800ab64:	d81c      	bhi.n	800aba0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800ab66:	a201      	add	r2, pc, #4	; (adr r2, 800ab6c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800ab68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab6c:	0800aba9 	.word	0x0800aba9
 800ab70:	0800ab7d 	.word	0x0800ab7d
 800ab74:	0800ab8b 	.word	0x0800ab8b
 800ab78:	0800aba9 	.word	0x0800aba9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab7c:	4b9f      	ldr	r3, [pc, #636]	; (800adfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ab7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab80:	4a9e      	ldr	r2, [pc, #632]	; (800adfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ab82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ab88:	e00f      	b.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ab8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab8e:	3308      	adds	r3, #8
 800ab90:	2102      	movs	r1, #2
 800ab92:	4618      	mov	r0, r3
 800ab94:	f001 f8e6 	bl	800bd64 <RCCEx_PLL2_Config>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ab9e:	e004      	b.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800aba0:	2301      	movs	r3, #1
 800aba2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aba6:	e000      	b.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800aba8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abaa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d10a      	bne.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800abb2:	4b92      	ldr	r3, [pc, #584]	; (800adfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800abb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abb6:	f023 0103 	bic.w	r1, r3, #3
 800abba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abc0:	4a8e      	ldr	r2, [pc, #568]	; (800adfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800abc2:	430b      	orrs	r3, r1
 800abc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800abc6:	e003      	b.n	800abd0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abc8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800abcc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800abd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800abdc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800abe0:	2300      	movs	r3, #0
 800abe2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800abe6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800abea:	460b      	mov	r3, r1
 800abec:	4313      	orrs	r3, r2
 800abee:	f000 8099 	beq.w	800ad24 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800abf2:	4b83      	ldr	r3, [pc, #524]	; (800ae00 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4a82      	ldr	r2, [pc, #520]	; (800ae00 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800abf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800abfc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800abfe:	f7fb f8b3 	bl	8005d68 <HAL_GetTick>
 800ac02:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ac06:	e00b      	b.n	800ac20 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ac08:	f7fb f8ae 	bl	8005d68 <HAL_GetTick>
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ac12:	1ad3      	subs	r3, r2, r3
 800ac14:	2b64      	cmp	r3, #100	; 0x64
 800ac16:	d903      	bls.n	800ac20 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800ac18:	2303      	movs	r3, #3
 800ac1a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ac1e:	e005      	b.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ac20:	4b77      	ldr	r3, [pc, #476]	; (800ae00 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d0ed      	beq.n	800ac08 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800ac2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d173      	bne.n	800ad1c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ac34:	4b71      	ldr	r3, [pc, #452]	; (800adfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ac38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ac40:	4053      	eors	r3, r2
 800ac42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d015      	beq.n	800ac76 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ac4a:	4b6c      	ldr	r3, [pc, #432]	; (800adfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac52:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ac56:	4b69      	ldr	r3, [pc, #420]	; (800adfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac5a:	4a68      	ldr	r2, [pc, #416]	; (800adfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac60:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ac62:	4b66      	ldr	r3, [pc, #408]	; (800adfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac66:	4a65      	ldr	r2, [pc, #404]	; (800adfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ac6c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ac6e:	4a63      	ldr	r2, [pc, #396]	; (800adfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ac74:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ac76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ac7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac82:	d118      	bne.n	800acb6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac84:	f7fb f870 	bl	8005d68 <HAL_GetTick>
 800ac88:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ac8c:	e00d      	b.n	800acaa <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac8e:	f7fb f86b 	bl	8005d68 <HAL_GetTick>
 800ac92:	4602      	mov	r2, r0
 800ac94:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ac98:	1ad2      	subs	r2, r2, r3
 800ac9a:	f241 3388 	movw	r3, #5000	; 0x1388
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d903      	bls.n	800acaa <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800aca2:	2303      	movs	r3, #3
 800aca4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800aca8:	e005      	b.n	800acb6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800acaa:	4b54      	ldr	r3, [pc, #336]	; (800adfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800acac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acae:	f003 0302 	and.w	r3, r3, #2
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d0eb      	beq.n	800ac8e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800acb6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d129      	bne.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800acbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acc2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800acc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800acca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800acce:	d10e      	bne.n	800acee <HAL_RCCEx_PeriphCLKConfig+0x846>
 800acd0:	4b4a      	ldr	r3, [pc, #296]	; (800adfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800acd2:	691b      	ldr	r3, [r3, #16]
 800acd4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800acd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acdc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ace0:	091a      	lsrs	r2, r3, #4
 800ace2:	4b48      	ldr	r3, [pc, #288]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800ace4:	4013      	ands	r3, r2
 800ace6:	4a45      	ldr	r2, [pc, #276]	; (800adfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ace8:	430b      	orrs	r3, r1
 800acea:	6113      	str	r3, [r2, #16]
 800acec:	e005      	b.n	800acfa <HAL_RCCEx_PeriphCLKConfig+0x852>
 800acee:	4b43      	ldr	r3, [pc, #268]	; (800adfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800acf0:	691b      	ldr	r3, [r3, #16]
 800acf2:	4a42      	ldr	r2, [pc, #264]	; (800adfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800acf4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800acf8:	6113      	str	r3, [r2, #16]
 800acfa:	4b40      	ldr	r3, [pc, #256]	; (800adfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800acfc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800acfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ad06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ad0a:	4a3c      	ldr	r2, [pc, #240]	; (800adfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad0c:	430b      	orrs	r3, r1
 800ad0e:	6713      	str	r3, [r2, #112]	; 0x70
 800ad10:	e008      	b.n	800ad24 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ad12:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad16:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800ad1a:	e003      	b.n	800ad24 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad1c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad20:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ad24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad2c:	f002 0301 	and.w	r3, r2, #1
 800ad30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ad34:	2300      	movs	r3, #0
 800ad36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ad3a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800ad3e:	460b      	mov	r3, r1
 800ad40:	4313      	orrs	r3, r2
 800ad42:	f000 808f 	beq.w	800ae64 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800ad46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad4c:	2b28      	cmp	r3, #40	; 0x28
 800ad4e:	d871      	bhi.n	800ae34 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800ad50:	a201      	add	r2, pc, #4	; (adr r2, 800ad58 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800ad52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad56:	bf00      	nop
 800ad58:	0800ae3d 	.word	0x0800ae3d
 800ad5c:	0800ae35 	.word	0x0800ae35
 800ad60:	0800ae35 	.word	0x0800ae35
 800ad64:	0800ae35 	.word	0x0800ae35
 800ad68:	0800ae35 	.word	0x0800ae35
 800ad6c:	0800ae35 	.word	0x0800ae35
 800ad70:	0800ae35 	.word	0x0800ae35
 800ad74:	0800ae35 	.word	0x0800ae35
 800ad78:	0800ae09 	.word	0x0800ae09
 800ad7c:	0800ae35 	.word	0x0800ae35
 800ad80:	0800ae35 	.word	0x0800ae35
 800ad84:	0800ae35 	.word	0x0800ae35
 800ad88:	0800ae35 	.word	0x0800ae35
 800ad8c:	0800ae35 	.word	0x0800ae35
 800ad90:	0800ae35 	.word	0x0800ae35
 800ad94:	0800ae35 	.word	0x0800ae35
 800ad98:	0800ae1f 	.word	0x0800ae1f
 800ad9c:	0800ae35 	.word	0x0800ae35
 800ada0:	0800ae35 	.word	0x0800ae35
 800ada4:	0800ae35 	.word	0x0800ae35
 800ada8:	0800ae35 	.word	0x0800ae35
 800adac:	0800ae35 	.word	0x0800ae35
 800adb0:	0800ae35 	.word	0x0800ae35
 800adb4:	0800ae35 	.word	0x0800ae35
 800adb8:	0800ae3d 	.word	0x0800ae3d
 800adbc:	0800ae35 	.word	0x0800ae35
 800adc0:	0800ae35 	.word	0x0800ae35
 800adc4:	0800ae35 	.word	0x0800ae35
 800adc8:	0800ae35 	.word	0x0800ae35
 800adcc:	0800ae35 	.word	0x0800ae35
 800add0:	0800ae35 	.word	0x0800ae35
 800add4:	0800ae35 	.word	0x0800ae35
 800add8:	0800ae3d 	.word	0x0800ae3d
 800addc:	0800ae35 	.word	0x0800ae35
 800ade0:	0800ae35 	.word	0x0800ae35
 800ade4:	0800ae35 	.word	0x0800ae35
 800ade8:	0800ae35 	.word	0x0800ae35
 800adec:	0800ae35 	.word	0x0800ae35
 800adf0:	0800ae35 	.word	0x0800ae35
 800adf4:	0800ae35 	.word	0x0800ae35
 800adf8:	0800ae3d 	.word	0x0800ae3d
 800adfc:	58024400 	.word	0x58024400
 800ae00:	58024800 	.word	0x58024800
 800ae04:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae0c:	3308      	adds	r3, #8
 800ae0e:	2101      	movs	r1, #1
 800ae10:	4618      	mov	r0, r3
 800ae12:	f000 ffa7 	bl	800bd64 <RCCEx_PLL2_Config>
 800ae16:	4603      	mov	r3, r0
 800ae18:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ae1c:	e00f      	b.n	800ae3e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ae1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae22:	3328      	adds	r3, #40	; 0x28
 800ae24:	2101      	movs	r1, #1
 800ae26:	4618      	mov	r0, r3
 800ae28:	f001 f84e 	bl	800bec8 <RCCEx_PLL3_Config>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ae32:	e004      	b.n	800ae3e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae34:	2301      	movs	r3, #1
 800ae36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ae3a:	e000      	b.n	800ae3e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800ae3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae3e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d10a      	bne.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ae46:	4bbf      	ldr	r3, [pc, #764]	; (800b144 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ae48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae4a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800ae4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae54:	4abb      	ldr	r2, [pc, #748]	; (800b144 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ae56:	430b      	orrs	r3, r1
 800ae58:	6553      	str	r3, [r2, #84]	; 0x54
 800ae5a:	e003      	b.n	800ae64 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae60:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ae64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae6c:	f002 0302 	and.w	r3, r2, #2
 800ae70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ae74:	2300      	movs	r3, #0
 800ae76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ae7a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800ae7e:	460b      	mov	r3, r1
 800ae80:	4313      	orrs	r3, r2
 800ae82:	d041      	beq.n	800af08 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800ae84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae8a:	2b05      	cmp	r3, #5
 800ae8c:	d824      	bhi.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800ae8e:	a201      	add	r2, pc, #4	; (adr r2, 800ae94 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800ae90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae94:	0800aee1 	.word	0x0800aee1
 800ae98:	0800aead 	.word	0x0800aead
 800ae9c:	0800aec3 	.word	0x0800aec3
 800aea0:	0800aee1 	.word	0x0800aee1
 800aea4:	0800aee1 	.word	0x0800aee1
 800aea8:	0800aee1 	.word	0x0800aee1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aeac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeb0:	3308      	adds	r3, #8
 800aeb2:	2101      	movs	r1, #1
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f000 ff55 	bl	800bd64 <RCCEx_PLL2_Config>
 800aeba:	4603      	mov	r3, r0
 800aebc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800aec0:	e00f      	b.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aec6:	3328      	adds	r3, #40	; 0x28
 800aec8:	2101      	movs	r1, #1
 800aeca:	4618      	mov	r0, r3
 800aecc:	f000 fffc 	bl	800bec8 <RCCEx_PLL3_Config>
 800aed0:	4603      	mov	r3, r0
 800aed2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800aed6:	e004      	b.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aed8:	2301      	movs	r3, #1
 800aeda:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aede:	e000      	b.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800aee0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aee2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d10a      	bne.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800aeea:	4b96      	ldr	r3, [pc, #600]	; (800b144 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800aeec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aeee:	f023 0107 	bic.w	r1, r3, #7
 800aef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aef6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aef8:	4a92      	ldr	r2, [pc, #584]	; (800b144 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800aefa:	430b      	orrs	r3, r1
 800aefc:	6553      	str	r3, [r2, #84]	; 0x54
 800aefe:	e003      	b.n	800af08 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af04:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800af08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af10:	f002 0304 	and.w	r3, r2, #4
 800af14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800af18:	2300      	movs	r3, #0
 800af1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800af1e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800af22:	460b      	mov	r3, r1
 800af24:	4313      	orrs	r3, r2
 800af26:	d044      	beq.n	800afb2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800af28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af30:	2b05      	cmp	r3, #5
 800af32:	d825      	bhi.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800af34:	a201      	add	r2, pc, #4	; (adr r2, 800af3c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800af36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af3a:	bf00      	nop
 800af3c:	0800af89 	.word	0x0800af89
 800af40:	0800af55 	.word	0x0800af55
 800af44:	0800af6b 	.word	0x0800af6b
 800af48:	0800af89 	.word	0x0800af89
 800af4c:	0800af89 	.word	0x0800af89
 800af50:	0800af89 	.word	0x0800af89
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800af54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af58:	3308      	adds	r3, #8
 800af5a:	2101      	movs	r1, #1
 800af5c:	4618      	mov	r0, r3
 800af5e:	f000 ff01 	bl	800bd64 <RCCEx_PLL2_Config>
 800af62:	4603      	mov	r3, r0
 800af64:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800af68:	e00f      	b.n	800af8a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800af6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af6e:	3328      	adds	r3, #40	; 0x28
 800af70:	2101      	movs	r1, #1
 800af72:	4618      	mov	r0, r3
 800af74:	f000 ffa8 	bl	800bec8 <RCCEx_PLL3_Config>
 800af78:	4603      	mov	r3, r0
 800af7a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800af7e:	e004      	b.n	800af8a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af80:	2301      	movs	r3, #1
 800af82:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800af86:	e000      	b.n	800af8a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800af88:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af8a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d10b      	bne.n	800afaa <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800af92:	4b6c      	ldr	r3, [pc, #432]	; (800b144 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800af94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af96:	f023 0107 	bic.w	r1, r3, #7
 800af9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afa2:	4a68      	ldr	r2, [pc, #416]	; (800b144 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800afa4:	430b      	orrs	r3, r1
 800afa6:	6593      	str	r3, [r2, #88]	; 0x58
 800afa8:	e003      	b.n	800afb2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afaa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800afae:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800afb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afba:	f002 0320 	and.w	r3, r2, #32
 800afbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800afc2:	2300      	movs	r3, #0
 800afc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800afc8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800afcc:	460b      	mov	r3, r1
 800afce:	4313      	orrs	r3, r2
 800afd0:	d055      	beq.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800afd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800afda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800afde:	d033      	beq.n	800b048 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800afe0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800afe4:	d82c      	bhi.n	800b040 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800afe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afea:	d02f      	beq.n	800b04c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800afec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aff0:	d826      	bhi.n	800b040 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800aff2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aff6:	d02b      	beq.n	800b050 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800aff8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800affc:	d820      	bhi.n	800b040 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800affe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b002:	d012      	beq.n	800b02a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800b004:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b008:	d81a      	bhi.n	800b040 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d022      	beq.n	800b054 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b00e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b012:	d115      	bne.n	800b040 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b018:	3308      	adds	r3, #8
 800b01a:	2100      	movs	r1, #0
 800b01c:	4618      	mov	r0, r3
 800b01e:	f000 fea1 	bl	800bd64 <RCCEx_PLL2_Config>
 800b022:	4603      	mov	r3, r0
 800b024:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b028:	e015      	b.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b02a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b02e:	3328      	adds	r3, #40	; 0x28
 800b030:	2102      	movs	r1, #2
 800b032:	4618      	mov	r0, r3
 800b034:	f000 ff48 	bl	800bec8 <RCCEx_PLL3_Config>
 800b038:	4603      	mov	r3, r0
 800b03a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b03e:	e00a      	b.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b040:	2301      	movs	r3, #1
 800b042:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b046:	e006      	b.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b048:	bf00      	nop
 800b04a:	e004      	b.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b04c:	bf00      	nop
 800b04e:	e002      	b.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b050:	bf00      	nop
 800b052:	e000      	b.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b054:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b056:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d10b      	bne.n	800b076 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b05e:	4b39      	ldr	r3, [pc, #228]	; (800b144 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b062:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b066:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b06a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b06e:	4a35      	ldr	r2, [pc, #212]	; (800b144 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b070:	430b      	orrs	r3, r1
 800b072:	6553      	str	r3, [r2, #84]	; 0x54
 800b074:	e003      	b.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b076:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b07a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b07e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b086:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b08a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b08e:	2300      	movs	r3, #0
 800b090:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b094:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b098:	460b      	mov	r3, r1
 800b09a:	4313      	orrs	r3, r2
 800b09c:	d058      	beq.n	800b150 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b09e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b0a6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b0aa:	d033      	beq.n	800b114 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800b0ac:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b0b0:	d82c      	bhi.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b0b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0b6:	d02f      	beq.n	800b118 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b0b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0bc:	d826      	bhi.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b0be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b0c2:	d02b      	beq.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b0c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b0c8:	d820      	bhi.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b0ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b0ce:	d012      	beq.n	800b0f6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800b0d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b0d4:	d81a      	bhi.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d022      	beq.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b0da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0de:	d115      	bne.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b0e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0e4:	3308      	adds	r3, #8
 800b0e6:	2100      	movs	r1, #0
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f000 fe3b 	bl	800bd64 <RCCEx_PLL2_Config>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b0f4:	e015      	b.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b0f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0fa:	3328      	adds	r3, #40	; 0x28
 800b0fc:	2102      	movs	r1, #2
 800b0fe:	4618      	mov	r0, r3
 800b100:	f000 fee2 	bl	800bec8 <RCCEx_PLL3_Config>
 800b104:	4603      	mov	r3, r0
 800b106:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b10a:	e00a      	b.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b10c:	2301      	movs	r3, #1
 800b10e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b112:	e006      	b.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b114:	bf00      	nop
 800b116:	e004      	b.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b118:	bf00      	nop
 800b11a:	e002      	b.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b11c:	bf00      	nop
 800b11e:	e000      	b.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b120:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b122:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b126:	2b00      	cmp	r3, #0
 800b128:	d10e      	bne.n	800b148 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b12a:	4b06      	ldr	r3, [pc, #24]	; (800b144 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b12c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b12e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b132:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b136:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b13a:	4a02      	ldr	r2, [pc, #8]	; (800b144 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b13c:	430b      	orrs	r3, r1
 800b13e:	6593      	str	r3, [r2, #88]	; 0x58
 800b140:	e006      	b.n	800b150 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800b142:	bf00      	nop
 800b144:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b148:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b14c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b150:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b158:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b15c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b160:	2300      	movs	r3, #0
 800b162:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b166:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b16a:	460b      	mov	r3, r1
 800b16c:	4313      	orrs	r3, r2
 800b16e:	d055      	beq.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b170:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b174:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b178:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b17c:	d033      	beq.n	800b1e6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800b17e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b182:	d82c      	bhi.n	800b1de <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b184:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b188:	d02f      	beq.n	800b1ea <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b18a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b18e:	d826      	bhi.n	800b1de <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b190:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b194:	d02b      	beq.n	800b1ee <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b196:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b19a:	d820      	bhi.n	800b1de <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b19c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b1a0:	d012      	beq.n	800b1c8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800b1a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b1a6:	d81a      	bhi.n	800b1de <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d022      	beq.n	800b1f2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b1ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1b0:	d115      	bne.n	800b1de <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b1b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1b6:	3308      	adds	r3, #8
 800b1b8:	2100      	movs	r1, #0
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f000 fdd2 	bl	800bd64 <RCCEx_PLL2_Config>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b1c6:	e015      	b.n	800b1f4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b1c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1cc:	3328      	adds	r3, #40	; 0x28
 800b1ce:	2102      	movs	r1, #2
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f000 fe79 	bl	800bec8 <RCCEx_PLL3_Config>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b1dc:	e00a      	b.n	800b1f4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1de:	2301      	movs	r3, #1
 800b1e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b1e4:	e006      	b.n	800b1f4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b1e6:	bf00      	nop
 800b1e8:	e004      	b.n	800b1f4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b1ea:	bf00      	nop
 800b1ec:	e002      	b.n	800b1f4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b1ee:	bf00      	nop
 800b1f0:	e000      	b.n	800b1f4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b1f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d10b      	bne.n	800b214 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b1fc:	4ba0      	ldr	r3, [pc, #640]	; (800b480 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b1fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b200:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b208:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b20c:	4a9c      	ldr	r2, [pc, #624]	; (800b480 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b20e:	430b      	orrs	r3, r1
 800b210:	6593      	str	r3, [r2, #88]	; 0x58
 800b212:	e003      	b.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b214:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b218:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b21c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b224:	f002 0308 	and.w	r3, r2, #8
 800b228:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b22c:	2300      	movs	r3, #0
 800b22e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b232:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b236:	460b      	mov	r3, r1
 800b238:	4313      	orrs	r3, r2
 800b23a:	d01e      	beq.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800b23c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b240:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b244:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b248:	d10c      	bne.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b24a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b24e:	3328      	adds	r3, #40	; 0x28
 800b250:	2102      	movs	r1, #2
 800b252:	4618      	mov	r0, r3
 800b254:	f000 fe38 	bl	800bec8 <RCCEx_PLL3_Config>
 800b258:	4603      	mov	r3, r0
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d002      	beq.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800b25e:	2301      	movs	r3, #1
 800b260:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b264:	4b86      	ldr	r3, [pc, #536]	; (800b480 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b268:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b26c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b270:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b274:	4a82      	ldr	r2, [pc, #520]	; (800b480 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b276:	430b      	orrs	r3, r1
 800b278:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b27a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b282:	f002 0310 	and.w	r3, r2, #16
 800b286:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b28a:	2300      	movs	r3, #0
 800b28c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b290:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b294:	460b      	mov	r3, r1
 800b296:	4313      	orrs	r3, r2
 800b298:	d01e      	beq.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b29a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b29e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b2a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2a6:	d10c      	bne.n	800b2c2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b2a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2ac:	3328      	adds	r3, #40	; 0x28
 800b2ae:	2102      	movs	r1, #2
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f000 fe09 	bl	800bec8 <RCCEx_PLL3_Config>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d002      	beq.n	800b2c2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800b2bc:	2301      	movs	r3, #1
 800b2be:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b2c2:	4b6f      	ldr	r3, [pc, #444]	; (800b480 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b2c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b2ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b2d2:	4a6b      	ldr	r2, [pc, #428]	; (800b480 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b2d4:	430b      	orrs	r3, r1
 800b2d6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b2d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b2e4:	67bb      	str	r3, [r7, #120]	; 0x78
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b2ea:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b2ee:	460b      	mov	r3, r1
 800b2f0:	4313      	orrs	r3, r2
 800b2f2:	d03e      	beq.n	800b372 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b2f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b2fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b300:	d022      	beq.n	800b348 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b302:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b306:	d81b      	bhi.n	800b340 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d003      	beq.n	800b314 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800b30c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b310:	d00b      	beq.n	800b32a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800b312:	e015      	b.n	800b340 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b314:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b318:	3308      	adds	r3, #8
 800b31a:	2100      	movs	r1, #0
 800b31c:	4618      	mov	r0, r3
 800b31e:	f000 fd21 	bl	800bd64 <RCCEx_PLL2_Config>
 800b322:	4603      	mov	r3, r0
 800b324:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b328:	e00f      	b.n	800b34a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b32a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b32e:	3328      	adds	r3, #40	; 0x28
 800b330:	2102      	movs	r1, #2
 800b332:	4618      	mov	r0, r3
 800b334:	f000 fdc8 	bl	800bec8 <RCCEx_PLL3_Config>
 800b338:	4603      	mov	r3, r0
 800b33a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b33e:	e004      	b.n	800b34a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b340:	2301      	movs	r3, #1
 800b342:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b346:	e000      	b.n	800b34a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800b348:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b34a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d10b      	bne.n	800b36a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b352:	4b4b      	ldr	r3, [pc, #300]	; (800b480 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b356:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b35a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b35e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b362:	4a47      	ldr	r2, [pc, #284]	; (800b480 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b364:	430b      	orrs	r3, r1
 800b366:	6593      	str	r3, [r2, #88]	; 0x58
 800b368:	e003      	b.n	800b372 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b36a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b36e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b372:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b37a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b37e:	673b      	str	r3, [r7, #112]	; 0x70
 800b380:	2300      	movs	r3, #0
 800b382:	677b      	str	r3, [r7, #116]	; 0x74
 800b384:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b388:	460b      	mov	r3, r1
 800b38a:	4313      	orrs	r3, r2
 800b38c:	d03b      	beq.n	800b406 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b38e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b392:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b396:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b39a:	d01f      	beq.n	800b3dc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b39c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b3a0:	d818      	bhi.n	800b3d4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800b3a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3a6:	d003      	beq.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800b3a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b3ac:	d007      	beq.n	800b3be <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800b3ae:	e011      	b.n	800b3d4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3b0:	4b33      	ldr	r3, [pc, #204]	; (800b480 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b3b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3b4:	4a32      	ldr	r2, [pc, #200]	; (800b480 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b3b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b3bc:	e00f      	b.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b3be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3c2:	3328      	adds	r3, #40	; 0x28
 800b3c4:	2101      	movs	r1, #1
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f000 fd7e 	bl	800bec8 <RCCEx_PLL3_Config>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800b3d2:	e004      	b.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b3da:	e000      	b.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800b3dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d10b      	bne.n	800b3fe <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b3e6:	4b26      	ldr	r3, [pc, #152]	; (800b480 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b3e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3ea:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b3ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3f6:	4a22      	ldr	r2, [pc, #136]	; (800b480 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b3f8:	430b      	orrs	r3, r1
 800b3fa:	6553      	str	r3, [r2, #84]	; 0x54
 800b3fc:	e003      	b.n	800b406 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b402:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b406:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b40e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b412:	66bb      	str	r3, [r7, #104]	; 0x68
 800b414:	2300      	movs	r3, #0
 800b416:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b418:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b41c:	460b      	mov	r3, r1
 800b41e:	4313      	orrs	r3, r2
 800b420:	d034      	beq.n	800b48c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d003      	beq.n	800b434 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800b42c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b430:	d007      	beq.n	800b442 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800b432:	e011      	b.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b434:	4b12      	ldr	r3, [pc, #72]	; (800b480 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b438:	4a11      	ldr	r2, [pc, #68]	; (800b480 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b43a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b43e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b440:	e00e      	b.n	800b460 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b442:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b446:	3308      	adds	r3, #8
 800b448:	2102      	movs	r1, #2
 800b44a:	4618      	mov	r0, r3
 800b44c:	f000 fc8a 	bl	800bd64 <RCCEx_PLL2_Config>
 800b450:	4603      	mov	r3, r0
 800b452:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b456:	e003      	b.n	800b460 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800b458:	2301      	movs	r3, #1
 800b45a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b45e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b460:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b464:	2b00      	cmp	r3, #0
 800b466:	d10d      	bne.n	800b484 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b468:	4b05      	ldr	r3, [pc, #20]	; (800b480 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b46a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b46c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b470:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b476:	4a02      	ldr	r2, [pc, #8]	; (800b480 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b478:	430b      	orrs	r3, r1
 800b47a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b47c:	e006      	b.n	800b48c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800b47e:	bf00      	nop
 800b480:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b484:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b488:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b48c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b494:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800b498:	663b      	str	r3, [r7, #96]	; 0x60
 800b49a:	2300      	movs	r3, #0
 800b49c:	667b      	str	r3, [r7, #100]	; 0x64
 800b49e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b4a2:	460b      	mov	r3, r1
 800b4a4:	4313      	orrs	r3, r2
 800b4a6:	d00c      	beq.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b4a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4ac:	3328      	adds	r3, #40	; 0x28
 800b4ae:	2102      	movs	r1, #2
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f000 fd09 	bl	800bec8 <RCCEx_PLL3_Config>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d002      	beq.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800b4bc:	2301      	movs	r3, #1
 800b4be:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b4c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ca:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b4ce:	65bb      	str	r3, [r7, #88]	; 0x58
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b4d4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800b4d8:	460b      	mov	r3, r1
 800b4da:	4313      	orrs	r3, r2
 800b4dc:	d036      	beq.n	800b54c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b4de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b4e8:	d018      	beq.n	800b51c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800b4ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b4ee:	d811      	bhi.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b4f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4f4:	d014      	beq.n	800b520 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800b4f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4fa:	d80b      	bhi.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d011      	beq.n	800b524 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800b500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b504:	d106      	bne.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b506:	4bb7      	ldr	r3, [pc, #732]	; (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b50a:	4ab6      	ldr	r2, [pc, #728]	; (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b50c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b510:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b512:	e008      	b.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b514:	2301      	movs	r3, #1
 800b516:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b51a:	e004      	b.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b51c:	bf00      	nop
 800b51e:	e002      	b.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b520:	bf00      	nop
 800b522:	e000      	b.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b524:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b526:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d10a      	bne.n	800b544 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b52e:	4bad      	ldr	r3, [pc, #692]	; (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b532:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b536:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b53a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b53c:	4aa9      	ldr	r2, [pc, #676]	; (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b53e:	430b      	orrs	r3, r1
 800b540:	6553      	str	r3, [r2, #84]	; 0x54
 800b542:	e003      	b.n	800b54c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b544:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b548:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b54c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b554:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800b558:	653b      	str	r3, [r7, #80]	; 0x50
 800b55a:	2300      	movs	r3, #0
 800b55c:	657b      	str	r3, [r7, #84]	; 0x54
 800b55e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800b562:	460b      	mov	r3, r1
 800b564:	4313      	orrs	r3, r2
 800b566:	d009      	beq.n	800b57c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b568:	4b9e      	ldr	r3, [pc, #632]	; (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b56a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b56c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b570:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b576:	4a9b      	ldr	r2, [pc, #620]	; (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b578:	430b      	orrs	r3, r1
 800b57a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b57c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b584:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800b588:	64bb      	str	r3, [r7, #72]	; 0x48
 800b58a:	2300      	movs	r3, #0
 800b58c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b58e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800b592:	460b      	mov	r3, r1
 800b594:	4313      	orrs	r3, r2
 800b596:	d009      	beq.n	800b5ac <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b598:	4b92      	ldr	r3, [pc, #584]	; (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b59a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b59c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800b5a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b5a6:	4a8f      	ldr	r2, [pc, #572]	; (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b5a8:	430b      	orrs	r3, r1
 800b5aa:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b5ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b4:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800b5b8:	643b      	str	r3, [r7, #64]	; 0x40
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	647b      	str	r3, [r7, #68]	; 0x44
 800b5be:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b5c2:	460b      	mov	r3, r1
 800b5c4:	4313      	orrs	r3, r2
 800b5c6:	d00e      	beq.n	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b5c8:	4b86      	ldr	r3, [pc, #536]	; (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b5ca:	691b      	ldr	r3, [r3, #16]
 800b5cc:	4a85      	ldr	r2, [pc, #532]	; (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b5ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b5d2:	6113      	str	r3, [r2, #16]
 800b5d4:	4b83      	ldr	r3, [pc, #524]	; (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b5d6:	6919      	ldr	r1, [r3, #16]
 800b5d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b5e0:	4a80      	ldr	r2, [pc, #512]	; (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b5e2:	430b      	orrs	r3, r1
 800b5e4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b5e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ee:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800b5f2:	63bb      	str	r3, [r7, #56]	; 0x38
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5f8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b5fc:	460b      	mov	r3, r1
 800b5fe:	4313      	orrs	r3, r2
 800b600:	d009      	beq.n	800b616 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b602:	4b78      	ldr	r3, [pc, #480]	; (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b606:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b60a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b60e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b610:	4a74      	ldr	r2, [pc, #464]	; (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b612:	430b      	orrs	r3, r1
 800b614:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b616:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800b622:	633b      	str	r3, [r7, #48]	; 0x30
 800b624:	2300      	movs	r3, #0
 800b626:	637b      	str	r3, [r7, #52]	; 0x34
 800b628:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800b62c:	460b      	mov	r3, r1
 800b62e:	4313      	orrs	r3, r2
 800b630:	d00a      	beq.n	800b648 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b632:	4b6c      	ldr	r3, [pc, #432]	; (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b636:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800b63a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b63e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b642:	4a68      	ldr	r2, [pc, #416]	; (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b644:	430b      	orrs	r3, r1
 800b646:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b648:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b650:	2100      	movs	r1, #0
 800b652:	62b9      	str	r1, [r7, #40]	; 0x28
 800b654:	f003 0301 	and.w	r3, r3, #1
 800b658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b65a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800b65e:	460b      	mov	r3, r1
 800b660:	4313      	orrs	r3, r2
 800b662:	d011      	beq.n	800b688 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b664:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b668:	3308      	adds	r3, #8
 800b66a:	2100      	movs	r1, #0
 800b66c:	4618      	mov	r0, r3
 800b66e:	f000 fb79 	bl	800bd64 <RCCEx_PLL2_Config>
 800b672:	4603      	mov	r3, r0
 800b674:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b678:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d003      	beq.n	800b688 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b680:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b684:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b688:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b690:	2100      	movs	r1, #0
 800b692:	6239      	str	r1, [r7, #32]
 800b694:	f003 0302 	and.w	r3, r3, #2
 800b698:	627b      	str	r3, [r7, #36]	; 0x24
 800b69a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b69e:	460b      	mov	r3, r1
 800b6a0:	4313      	orrs	r3, r2
 800b6a2:	d011      	beq.n	800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b6a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6a8:	3308      	adds	r3, #8
 800b6aa:	2101      	movs	r1, #1
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f000 fb59 	bl	800bd64 <RCCEx_PLL2_Config>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b6b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d003      	beq.n	800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6c4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b6c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d0:	2100      	movs	r1, #0
 800b6d2:	61b9      	str	r1, [r7, #24]
 800b6d4:	f003 0304 	and.w	r3, r3, #4
 800b6d8:	61fb      	str	r3, [r7, #28]
 800b6da:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b6de:	460b      	mov	r3, r1
 800b6e0:	4313      	orrs	r3, r2
 800b6e2:	d011      	beq.n	800b708 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b6e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6e8:	3308      	adds	r3, #8
 800b6ea:	2102      	movs	r1, #2
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f000 fb39 	bl	800bd64 <RCCEx_PLL2_Config>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b6f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d003      	beq.n	800b708 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b700:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b704:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b708:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b710:	2100      	movs	r1, #0
 800b712:	6139      	str	r1, [r7, #16]
 800b714:	f003 0308 	and.w	r3, r3, #8
 800b718:	617b      	str	r3, [r7, #20]
 800b71a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b71e:	460b      	mov	r3, r1
 800b720:	4313      	orrs	r3, r2
 800b722:	d011      	beq.n	800b748 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b724:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b728:	3328      	adds	r3, #40	; 0x28
 800b72a:	2100      	movs	r1, #0
 800b72c:	4618      	mov	r0, r3
 800b72e:	f000 fbcb 	bl	800bec8 <RCCEx_PLL3_Config>
 800b732:	4603      	mov	r3, r0
 800b734:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800b738:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d003      	beq.n	800b748 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b740:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b744:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b748:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b750:	2100      	movs	r1, #0
 800b752:	60b9      	str	r1, [r7, #8]
 800b754:	f003 0310 	and.w	r3, r3, #16
 800b758:	60fb      	str	r3, [r7, #12]
 800b75a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b75e:	460b      	mov	r3, r1
 800b760:	4313      	orrs	r3, r2
 800b762:	d011      	beq.n	800b788 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b764:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b768:	3328      	adds	r3, #40	; 0x28
 800b76a:	2101      	movs	r1, #1
 800b76c:	4618      	mov	r0, r3
 800b76e:	f000 fbab 	bl	800bec8 <RCCEx_PLL3_Config>
 800b772:	4603      	mov	r3, r0
 800b774:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b778:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d003      	beq.n	800b788 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b780:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b784:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b788:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b790:	2100      	movs	r1, #0
 800b792:	6039      	str	r1, [r7, #0]
 800b794:	f003 0320 	and.w	r3, r3, #32
 800b798:	607b      	str	r3, [r7, #4]
 800b79a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b79e:	460b      	mov	r3, r1
 800b7a0:	4313      	orrs	r3, r2
 800b7a2:	d011      	beq.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b7a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7a8:	3328      	adds	r3, #40	; 0x28
 800b7aa:	2102      	movs	r1, #2
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f000 fb8b 	bl	800bec8 <RCCEx_PLL3_Config>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b7b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d003      	beq.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7c4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800b7c8:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d101      	bne.n	800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	e000      	b.n	800b7d6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800b7d4:	2301      	movs	r3, #1
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b7e2:	bf00      	nop
 800b7e4:	58024400 	.word	0x58024400

0800b7e8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b7ec:	f7fe fe00 	bl	800a3f0 <HAL_RCC_GetHCLKFreq>
 800b7f0:	4602      	mov	r2, r0
 800b7f2:	4b06      	ldr	r3, [pc, #24]	; (800b80c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b7f4:	6a1b      	ldr	r3, [r3, #32]
 800b7f6:	091b      	lsrs	r3, r3, #4
 800b7f8:	f003 0307 	and.w	r3, r3, #7
 800b7fc:	4904      	ldr	r1, [pc, #16]	; (800b810 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b7fe:	5ccb      	ldrb	r3, [r1, r3]
 800b800:	f003 031f 	and.w	r3, r3, #31
 800b804:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b808:	4618      	mov	r0, r3
 800b80a:	bd80      	pop	{r7, pc}
 800b80c:	58024400 	.word	0x58024400
 800b810:	0801037c 	.word	0x0801037c

0800b814 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b814:	b480      	push	{r7}
 800b816:	b089      	sub	sp, #36	; 0x24
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b81c:	4ba1      	ldr	r3, [pc, #644]	; (800baa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b81e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b820:	f003 0303 	and.w	r3, r3, #3
 800b824:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b826:	4b9f      	ldr	r3, [pc, #636]	; (800baa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b82a:	0b1b      	lsrs	r3, r3, #12
 800b82c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b830:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b832:	4b9c      	ldr	r3, [pc, #624]	; (800baa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b836:	091b      	lsrs	r3, r3, #4
 800b838:	f003 0301 	and.w	r3, r3, #1
 800b83c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b83e:	4b99      	ldr	r3, [pc, #612]	; (800baa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b842:	08db      	lsrs	r3, r3, #3
 800b844:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b848:	693a      	ldr	r2, [r7, #16]
 800b84a:	fb02 f303 	mul.w	r3, r2, r3
 800b84e:	ee07 3a90 	vmov	s15, r3
 800b852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b856:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	f000 8111 	beq.w	800ba84 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b862:	69bb      	ldr	r3, [r7, #24]
 800b864:	2b02      	cmp	r3, #2
 800b866:	f000 8083 	beq.w	800b970 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b86a:	69bb      	ldr	r3, [r7, #24]
 800b86c:	2b02      	cmp	r3, #2
 800b86e:	f200 80a1 	bhi.w	800b9b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b872:	69bb      	ldr	r3, [r7, #24]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d003      	beq.n	800b880 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b878:	69bb      	ldr	r3, [r7, #24]
 800b87a:	2b01      	cmp	r3, #1
 800b87c:	d056      	beq.n	800b92c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b87e:	e099      	b.n	800b9b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b880:	4b88      	ldr	r3, [pc, #544]	; (800baa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f003 0320 	and.w	r3, r3, #32
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d02d      	beq.n	800b8e8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b88c:	4b85      	ldr	r3, [pc, #532]	; (800baa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	08db      	lsrs	r3, r3, #3
 800b892:	f003 0303 	and.w	r3, r3, #3
 800b896:	4a84      	ldr	r2, [pc, #528]	; (800baa8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b898:	fa22 f303 	lsr.w	r3, r2, r3
 800b89c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	ee07 3a90 	vmov	s15, r3
 800b8a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	ee07 3a90 	vmov	s15, r3
 800b8ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8b6:	4b7b      	ldr	r3, [pc, #492]	; (800baa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8be:	ee07 3a90 	vmov	s15, r3
 800b8c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8ca:	eddf 5a78 	vldr	s11, [pc, #480]	; 800baac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b8ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b8e6:	e087      	b.n	800b9f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	ee07 3a90 	vmov	s15, r3
 800b8ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8f2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bab0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b8f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8fa:	4b6a      	ldr	r3, [pc, #424]	; (800baa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b902:	ee07 3a90 	vmov	s15, r3
 800b906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b90a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b90e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800baac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b91a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b91e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b922:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b926:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b92a:	e065      	b.n	800b9f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b92c:	697b      	ldr	r3, [r7, #20]
 800b92e:	ee07 3a90 	vmov	s15, r3
 800b932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b936:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bab4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b93a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b93e:	4b59      	ldr	r3, [pc, #356]	; (800baa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b946:	ee07 3a90 	vmov	s15, r3
 800b94a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b94e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b952:	eddf 5a56 	vldr	s11, [pc, #344]	; 800baac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b95a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b95e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b96a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b96e:	e043      	b.n	800b9f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	ee07 3a90 	vmov	s15, r3
 800b976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b97a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bab8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b97e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b982:	4b48      	ldr	r3, [pc, #288]	; (800baa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b98a:	ee07 3a90 	vmov	s15, r3
 800b98e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b992:	ed97 6a03 	vldr	s12, [r7, #12]
 800b996:	eddf 5a45 	vldr	s11, [pc, #276]	; 800baac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b99a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b99e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b9a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b9b2:	e021      	b.n	800b9f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	ee07 3a90 	vmov	s15, r3
 800b9ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9be:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bab4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b9c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9c6:	4b37      	ldr	r3, [pc, #220]	; (800baa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9ce:	ee07 3a90 	vmov	s15, r3
 800b9d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9da:	eddf 5a34 	vldr	s11, [pc, #208]	; 800baac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b9de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b9ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b9f6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b9f8:	4b2a      	ldr	r3, [pc, #168]	; (800baa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9fc:	0a5b      	lsrs	r3, r3, #9
 800b9fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba02:	ee07 3a90 	vmov	s15, r3
 800ba06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ba0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba12:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba1e:	ee17 2a90 	vmov	r2, s15
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ba26:	4b1f      	ldr	r3, [pc, #124]	; (800baa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba2a:	0c1b      	lsrs	r3, r3, #16
 800ba2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba30:	ee07 3a90 	vmov	s15, r3
 800ba34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ba3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba40:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba4c:	ee17 2a90 	vmov	r2, s15
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ba54:	4b13      	ldr	r3, [pc, #76]	; (800baa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba58:	0e1b      	lsrs	r3, r3, #24
 800ba5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba5e:	ee07 3a90 	vmov	s15, r3
 800ba62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ba6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba6e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba7a:	ee17 2a90 	vmov	r2, s15
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ba82:	e008      	b.n	800ba96 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2200      	movs	r2, #0
 800ba88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2200      	movs	r2, #0
 800ba94:	609a      	str	r2, [r3, #8]
}
 800ba96:	bf00      	nop
 800ba98:	3724      	adds	r7, #36	; 0x24
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa0:	4770      	bx	lr
 800baa2:	bf00      	nop
 800baa4:	58024400 	.word	0x58024400
 800baa8:	03d09000 	.word	0x03d09000
 800baac:	46000000 	.word	0x46000000
 800bab0:	4c742400 	.word	0x4c742400
 800bab4:	4a742400 	.word	0x4a742400
 800bab8:	4af42400 	.word	0x4af42400

0800babc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800babc:	b480      	push	{r7}
 800babe:	b089      	sub	sp, #36	; 0x24
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bac4:	4ba1      	ldr	r3, [pc, #644]	; (800bd4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bac8:	f003 0303 	and.w	r3, r3, #3
 800bacc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800bace:	4b9f      	ldr	r3, [pc, #636]	; (800bd4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bad2:	0d1b      	lsrs	r3, r3, #20
 800bad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bad8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bada:	4b9c      	ldr	r3, [pc, #624]	; (800bd4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800badc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bade:	0a1b      	lsrs	r3, r3, #8
 800bae0:	f003 0301 	and.w	r3, r3, #1
 800bae4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bae6:	4b99      	ldr	r3, [pc, #612]	; (800bd4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baea:	08db      	lsrs	r3, r3, #3
 800baec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800baf0:	693a      	ldr	r2, [r7, #16]
 800baf2:	fb02 f303 	mul.w	r3, r2, r3
 800baf6:	ee07 3a90 	vmov	s15, r3
 800bafa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bafe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	f000 8111 	beq.w	800bd2c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bb0a:	69bb      	ldr	r3, [r7, #24]
 800bb0c:	2b02      	cmp	r3, #2
 800bb0e:	f000 8083 	beq.w	800bc18 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bb12:	69bb      	ldr	r3, [r7, #24]
 800bb14:	2b02      	cmp	r3, #2
 800bb16:	f200 80a1 	bhi.w	800bc5c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bb1a:	69bb      	ldr	r3, [r7, #24]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d003      	beq.n	800bb28 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bb20:	69bb      	ldr	r3, [r7, #24]
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	d056      	beq.n	800bbd4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bb26:	e099      	b.n	800bc5c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb28:	4b88      	ldr	r3, [pc, #544]	; (800bd4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f003 0320 	and.w	r3, r3, #32
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d02d      	beq.n	800bb90 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb34:	4b85      	ldr	r3, [pc, #532]	; (800bd4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	08db      	lsrs	r3, r3, #3
 800bb3a:	f003 0303 	and.w	r3, r3, #3
 800bb3e:	4a84      	ldr	r2, [pc, #528]	; (800bd50 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bb40:	fa22 f303 	lsr.w	r3, r2, r3
 800bb44:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	ee07 3a90 	vmov	s15, r3
 800bb4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb50:	697b      	ldr	r3, [r7, #20]
 800bb52:	ee07 3a90 	vmov	s15, r3
 800bb56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb5e:	4b7b      	ldr	r3, [pc, #492]	; (800bd4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb66:	ee07 3a90 	vmov	s15, r3
 800bb6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb72:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bd54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bb76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb8a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bb8e:	e087      	b.n	800bca0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	ee07 3a90 	vmov	s15, r3
 800bb96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb9a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bd58 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bb9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bba2:	4b6a      	ldr	r3, [pc, #424]	; (800bd4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbaa:	ee07 3a90 	vmov	s15, r3
 800bbae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbb6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bd54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bbba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbd2:	e065      	b.n	800bca0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	ee07 3a90 	vmov	s15, r3
 800bbda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbde:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bd5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bbe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbe6:	4b59      	ldr	r3, [pc, #356]	; (800bd4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bbe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbee:	ee07 3a90 	vmov	s15, r3
 800bbf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbf6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbfa:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bd54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bbfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc16:	e043      	b.n	800bca0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	ee07 3a90 	vmov	s15, r3
 800bc1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc22:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bd60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bc26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc2a:	4b48      	ldr	r3, [pc, #288]	; (800bd4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc32:	ee07 3a90 	vmov	s15, r3
 800bc36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc3e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bd54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bc42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc5a:	e021      	b.n	800bca0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	ee07 3a90 	vmov	s15, r3
 800bc62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc66:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bd5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bc6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc6e:	4b37      	ldr	r3, [pc, #220]	; (800bd4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc76:	ee07 3a90 	vmov	s15, r3
 800bc7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc82:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bd54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bc86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc9e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800bca0:	4b2a      	ldr	r3, [pc, #168]	; (800bd4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bca4:	0a5b      	lsrs	r3, r3, #9
 800bca6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcaa:	ee07 3a90 	vmov	s15, r3
 800bcae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bcb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bcba:	edd7 6a07 	vldr	s13, [r7, #28]
 800bcbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bcc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bcc6:	ee17 2a90 	vmov	r2, s15
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800bcce:	4b1f      	ldr	r3, [pc, #124]	; (800bd4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bcd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcd2:	0c1b      	lsrs	r3, r3, #16
 800bcd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcd8:	ee07 3a90 	vmov	s15, r3
 800bcdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bce0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bce4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bce8:	edd7 6a07 	vldr	s13, [r7, #28]
 800bcec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bcf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bcf4:	ee17 2a90 	vmov	r2, s15
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800bcfc:	4b13      	ldr	r3, [pc, #76]	; (800bd4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bcfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd00:	0e1b      	lsrs	r3, r3, #24
 800bd02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd06:	ee07 3a90 	vmov	s15, r3
 800bd0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd12:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd16:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd22:	ee17 2a90 	vmov	r2, s15
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bd2a:	e008      	b.n	800bd3e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2200      	movs	r2, #0
 800bd36:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	609a      	str	r2, [r3, #8]
}
 800bd3e:	bf00      	nop
 800bd40:	3724      	adds	r7, #36	; 0x24
 800bd42:	46bd      	mov	sp, r7
 800bd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd48:	4770      	bx	lr
 800bd4a:	bf00      	nop
 800bd4c:	58024400 	.word	0x58024400
 800bd50:	03d09000 	.word	0x03d09000
 800bd54:	46000000 	.word	0x46000000
 800bd58:	4c742400 	.word	0x4c742400
 800bd5c:	4a742400 	.word	0x4a742400
 800bd60:	4af42400 	.word	0x4af42400

0800bd64 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b084      	sub	sp, #16
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
 800bd6c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bd72:	4b53      	ldr	r3, [pc, #332]	; (800bec0 <RCCEx_PLL2_Config+0x15c>)
 800bd74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd76:	f003 0303 	and.w	r3, r3, #3
 800bd7a:	2b03      	cmp	r3, #3
 800bd7c:	d101      	bne.n	800bd82 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bd7e:	2301      	movs	r3, #1
 800bd80:	e099      	b.n	800beb6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bd82:	4b4f      	ldr	r3, [pc, #316]	; (800bec0 <RCCEx_PLL2_Config+0x15c>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	4a4e      	ldr	r2, [pc, #312]	; (800bec0 <RCCEx_PLL2_Config+0x15c>)
 800bd88:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bd8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd8e:	f7f9 ffeb 	bl	8005d68 <HAL_GetTick>
 800bd92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bd94:	e008      	b.n	800bda8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bd96:	f7f9 ffe7 	bl	8005d68 <HAL_GetTick>
 800bd9a:	4602      	mov	r2, r0
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	1ad3      	subs	r3, r2, r3
 800bda0:	2b02      	cmp	r3, #2
 800bda2:	d901      	bls.n	800bda8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bda4:	2303      	movs	r3, #3
 800bda6:	e086      	b.n	800beb6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bda8:	4b45      	ldr	r3, [pc, #276]	; (800bec0 <RCCEx_PLL2_Config+0x15c>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d1f0      	bne.n	800bd96 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bdb4:	4b42      	ldr	r3, [pc, #264]	; (800bec0 <RCCEx_PLL2_Config+0x15c>)
 800bdb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdb8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	031b      	lsls	r3, r3, #12
 800bdc2:	493f      	ldr	r1, [pc, #252]	; (800bec0 <RCCEx_PLL2_Config+0x15c>)
 800bdc4:	4313      	orrs	r3, r2
 800bdc6:	628b      	str	r3, [r1, #40]	; 0x28
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	685b      	ldr	r3, [r3, #4]
 800bdcc:	3b01      	subs	r3, #1
 800bdce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	689b      	ldr	r3, [r3, #8]
 800bdd6:	3b01      	subs	r3, #1
 800bdd8:	025b      	lsls	r3, r3, #9
 800bdda:	b29b      	uxth	r3, r3
 800bddc:	431a      	orrs	r2, r3
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	68db      	ldr	r3, [r3, #12]
 800bde2:	3b01      	subs	r3, #1
 800bde4:	041b      	lsls	r3, r3, #16
 800bde6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bdea:	431a      	orrs	r2, r3
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	691b      	ldr	r3, [r3, #16]
 800bdf0:	3b01      	subs	r3, #1
 800bdf2:	061b      	lsls	r3, r3, #24
 800bdf4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bdf8:	4931      	ldr	r1, [pc, #196]	; (800bec0 <RCCEx_PLL2_Config+0x15c>)
 800bdfa:	4313      	orrs	r3, r2
 800bdfc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bdfe:	4b30      	ldr	r3, [pc, #192]	; (800bec0 <RCCEx_PLL2_Config+0x15c>)
 800be00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be02:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	695b      	ldr	r3, [r3, #20]
 800be0a:	492d      	ldr	r1, [pc, #180]	; (800bec0 <RCCEx_PLL2_Config+0x15c>)
 800be0c:	4313      	orrs	r3, r2
 800be0e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800be10:	4b2b      	ldr	r3, [pc, #172]	; (800bec0 <RCCEx_PLL2_Config+0x15c>)
 800be12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be14:	f023 0220 	bic.w	r2, r3, #32
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	699b      	ldr	r3, [r3, #24]
 800be1c:	4928      	ldr	r1, [pc, #160]	; (800bec0 <RCCEx_PLL2_Config+0x15c>)
 800be1e:	4313      	orrs	r3, r2
 800be20:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800be22:	4b27      	ldr	r3, [pc, #156]	; (800bec0 <RCCEx_PLL2_Config+0x15c>)
 800be24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be26:	4a26      	ldr	r2, [pc, #152]	; (800bec0 <RCCEx_PLL2_Config+0x15c>)
 800be28:	f023 0310 	bic.w	r3, r3, #16
 800be2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800be2e:	4b24      	ldr	r3, [pc, #144]	; (800bec0 <RCCEx_PLL2_Config+0x15c>)
 800be30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800be32:	4b24      	ldr	r3, [pc, #144]	; (800bec4 <RCCEx_PLL2_Config+0x160>)
 800be34:	4013      	ands	r3, r2
 800be36:	687a      	ldr	r2, [r7, #4]
 800be38:	69d2      	ldr	r2, [r2, #28]
 800be3a:	00d2      	lsls	r2, r2, #3
 800be3c:	4920      	ldr	r1, [pc, #128]	; (800bec0 <RCCEx_PLL2_Config+0x15c>)
 800be3e:	4313      	orrs	r3, r2
 800be40:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800be42:	4b1f      	ldr	r3, [pc, #124]	; (800bec0 <RCCEx_PLL2_Config+0x15c>)
 800be44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be46:	4a1e      	ldr	r2, [pc, #120]	; (800bec0 <RCCEx_PLL2_Config+0x15c>)
 800be48:	f043 0310 	orr.w	r3, r3, #16
 800be4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d106      	bne.n	800be62 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800be54:	4b1a      	ldr	r3, [pc, #104]	; (800bec0 <RCCEx_PLL2_Config+0x15c>)
 800be56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be58:	4a19      	ldr	r2, [pc, #100]	; (800bec0 <RCCEx_PLL2_Config+0x15c>)
 800be5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800be5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800be60:	e00f      	b.n	800be82 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	2b01      	cmp	r3, #1
 800be66:	d106      	bne.n	800be76 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800be68:	4b15      	ldr	r3, [pc, #84]	; (800bec0 <RCCEx_PLL2_Config+0x15c>)
 800be6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be6c:	4a14      	ldr	r2, [pc, #80]	; (800bec0 <RCCEx_PLL2_Config+0x15c>)
 800be6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be72:	62d3      	str	r3, [r2, #44]	; 0x2c
 800be74:	e005      	b.n	800be82 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800be76:	4b12      	ldr	r3, [pc, #72]	; (800bec0 <RCCEx_PLL2_Config+0x15c>)
 800be78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be7a:	4a11      	ldr	r2, [pc, #68]	; (800bec0 <RCCEx_PLL2_Config+0x15c>)
 800be7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800be80:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800be82:	4b0f      	ldr	r3, [pc, #60]	; (800bec0 <RCCEx_PLL2_Config+0x15c>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	4a0e      	ldr	r2, [pc, #56]	; (800bec0 <RCCEx_PLL2_Config+0x15c>)
 800be88:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800be8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be8e:	f7f9 ff6b 	bl	8005d68 <HAL_GetTick>
 800be92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800be94:	e008      	b.n	800bea8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800be96:	f7f9 ff67 	bl	8005d68 <HAL_GetTick>
 800be9a:	4602      	mov	r2, r0
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	1ad3      	subs	r3, r2, r3
 800bea0:	2b02      	cmp	r3, #2
 800bea2:	d901      	bls.n	800bea8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bea4:	2303      	movs	r3, #3
 800bea6:	e006      	b.n	800beb6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bea8:	4b05      	ldr	r3, [pc, #20]	; (800bec0 <RCCEx_PLL2_Config+0x15c>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d0f0      	beq.n	800be96 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800beb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3710      	adds	r7, #16
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	bf00      	nop
 800bec0:	58024400 	.word	0x58024400
 800bec4:	ffff0007 	.word	0xffff0007

0800bec8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b084      	sub	sp, #16
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
 800bed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bed2:	2300      	movs	r3, #0
 800bed4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bed6:	4b53      	ldr	r3, [pc, #332]	; (800c024 <RCCEx_PLL3_Config+0x15c>)
 800bed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beda:	f003 0303 	and.w	r3, r3, #3
 800bede:	2b03      	cmp	r3, #3
 800bee0:	d101      	bne.n	800bee6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bee2:	2301      	movs	r3, #1
 800bee4:	e099      	b.n	800c01a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bee6:	4b4f      	ldr	r3, [pc, #316]	; (800c024 <RCCEx_PLL3_Config+0x15c>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	4a4e      	ldr	r2, [pc, #312]	; (800c024 <RCCEx_PLL3_Config+0x15c>)
 800beec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bef0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bef2:	f7f9 ff39 	bl	8005d68 <HAL_GetTick>
 800bef6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bef8:	e008      	b.n	800bf0c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800befa:	f7f9 ff35 	bl	8005d68 <HAL_GetTick>
 800befe:	4602      	mov	r2, r0
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	1ad3      	subs	r3, r2, r3
 800bf04:	2b02      	cmp	r3, #2
 800bf06:	d901      	bls.n	800bf0c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bf08:	2303      	movs	r3, #3
 800bf0a:	e086      	b.n	800c01a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bf0c:	4b45      	ldr	r3, [pc, #276]	; (800c024 <RCCEx_PLL3_Config+0x15c>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d1f0      	bne.n	800befa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bf18:	4b42      	ldr	r3, [pc, #264]	; (800c024 <RCCEx_PLL3_Config+0x15c>)
 800bf1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf1c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	051b      	lsls	r3, r3, #20
 800bf26:	493f      	ldr	r1, [pc, #252]	; (800c024 <RCCEx_PLL3_Config+0x15c>)
 800bf28:	4313      	orrs	r3, r2
 800bf2a:	628b      	str	r3, [r1, #40]	; 0x28
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	685b      	ldr	r3, [r3, #4]
 800bf30:	3b01      	subs	r3, #1
 800bf32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	689b      	ldr	r3, [r3, #8]
 800bf3a:	3b01      	subs	r3, #1
 800bf3c:	025b      	lsls	r3, r3, #9
 800bf3e:	b29b      	uxth	r3, r3
 800bf40:	431a      	orrs	r2, r3
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	68db      	ldr	r3, [r3, #12]
 800bf46:	3b01      	subs	r3, #1
 800bf48:	041b      	lsls	r3, r3, #16
 800bf4a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bf4e:	431a      	orrs	r2, r3
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	691b      	ldr	r3, [r3, #16]
 800bf54:	3b01      	subs	r3, #1
 800bf56:	061b      	lsls	r3, r3, #24
 800bf58:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bf5c:	4931      	ldr	r1, [pc, #196]	; (800c024 <RCCEx_PLL3_Config+0x15c>)
 800bf5e:	4313      	orrs	r3, r2
 800bf60:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bf62:	4b30      	ldr	r3, [pc, #192]	; (800c024 <RCCEx_PLL3_Config+0x15c>)
 800bf64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf66:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	695b      	ldr	r3, [r3, #20]
 800bf6e:	492d      	ldr	r1, [pc, #180]	; (800c024 <RCCEx_PLL3_Config+0x15c>)
 800bf70:	4313      	orrs	r3, r2
 800bf72:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bf74:	4b2b      	ldr	r3, [pc, #172]	; (800c024 <RCCEx_PLL3_Config+0x15c>)
 800bf76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf78:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	699b      	ldr	r3, [r3, #24]
 800bf80:	4928      	ldr	r1, [pc, #160]	; (800c024 <RCCEx_PLL3_Config+0x15c>)
 800bf82:	4313      	orrs	r3, r2
 800bf84:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bf86:	4b27      	ldr	r3, [pc, #156]	; (800c024 <RCCEx_PLL3_Config+0x15c>)
 800bf88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf8a:	4a26      	ldr	r2, [pc, #152]	; (800c024 <RCCEx_PLL3_Config+0x15c>)
 800bf8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bf92:	4b24      	ldr	r3, [pc, #144]	; (800c024 <RCCEx_PLL3_Config+0x15c>)
 800bf94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf96:	4b24      	ldr	r3, [pc, #144]	; (800c028 <RCCEx_PLL3_Config+0x160>)
 800bf98:	4013      	ands	r3, r2
 800bf9a:	687a      	ldr	r2, [r7, #4]
 800bf9c:	69d2      	ldr	r2, [r2, #28]
 800bf9e:	00d2      	lsls	r2, r2, #3
 800bfa0:	4920      	ldr	r1, [pc, #128]	; (800c024 <RCCEx_PLL3_Config+0x15c>)
 800bfa2:	4313      	orrs	r3, r2
 800bfa4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bfa6:	4b1f      	ldr	r3, [pc, #124]	; (800c024 <RCCEx_PLL3_Config+0x15c>)
 800bfa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfaa:	4a1e      	ldr	r2, [pc, #120]	; (800c024 <RCCEx_PLL3_Config+0x15c>)
 800bfac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bfb0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d106      	bne.n	800bfc6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bfb8:	4b1a      	ldr	r3, [pc, #104]	; (800c024 <RCCEx_PLL3_Config+0x15c>)
 800bfba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfbc:	4a19      	ldr	r2, [pc, #100]	; (800c024 <RCCEx_PLL3_Config+0x15c>)
 800bfbe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bfc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bfc4:	e00f      	b.n	800bfe6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	2b01      	cmp	r3, #1
 800bfca:	d106      	bne.n	800bfda <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bfcc:	4b15      	ldr	r3, [pc, #84]	; (800c024 <RCCEx_PLL3_Config+0x15c>)
 800bfce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfd0:	4a14      	ldr	r2, [pc, #80]	; (800c024 <RCCEx_PLL3_Config+0x15c>)
 800bfd2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bfd6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bfd8:	e005      	b.n	800bfe6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bfda:	4b12      	ldr	r3, [pc, #72]	; (800c024 <RCCEx_PLL3_Config+0x15c>)
 800bfdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfde:	4a11      	ldr	r2, [pc, #68]	; (800c024 <RCCEx_PLL3_Config+0x15c>)
 800bfe0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bfe4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bfe6:	4b0f      	ldr	r3, [pc, #60]	; (800c024 <RCCEx_PLL3_Config+0x15c>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	4a0e      	ldr	r2, [pc, #56]	; (800c024 <RCCEx_PLL3_Config+0x15c>)
 800bfec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bff0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bff2:	f7f9 feb9 	bl	8005d68 <HAL_GetTick>
 800bff6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bff8:	e008      	b.n	800c00c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bffa:	f7f9 feb5 	bl	8005d68 <HAL_GetTick>
 800bffe:	4602      	mov	r2, r0
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	1ad3      	subs	r3, r2, r3
 800c004:	2b02      	cmp	r3, #2
 800c006:	d901      	bls.n	800c00c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c008:	2303      	movs	r3, #3
 800c00a:	e006      	b.n	800c01a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c00c:	4b05      	ldr	r3, [pc, #20]	; (800c024 <RCCEx_PLL3_Config+0x15c>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c014:	2b00      	cmp	r3, #0
 800c016:	d0f0      	beq.n	800bffa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c018:	7bfb      	ldrb	r3, [r7, #15]
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	3710      	adds	r7, #16
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}
 800c022:	bf00      	nop
 800c024:	58024400 	.word	0x58024400
 800c028:	ffff0007 	.word	0xffff0007

0800c02c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b082      	sub	sp, #8
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d101      	bne.n	800c03e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c03a:	2301      	movs	r3, #1
 800c03c:	e049      	b.n	800c0d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c044:	b2db      	uxtb	r3, r3
 800c046:	2b00      	cmp	r3, #0
 800c048:	d106      	bne.n	800c058 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2200      	movs	r2, #0
 800c04e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f7f9 f88a 	bl	800516c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2202      	movs	r2, #2
 800c05c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681a      	ldr	r2, [r3, #0]
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	3304      	adds	r3, #4
 800c068:	4619      	mov	r1, r3
 800c06a:	4610      	mov	r0, r2
 800c06c:	f000 fed8 	bl	800ce20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2201      	movs	r2, #1
 800c074:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2201      	movs	r2, #1
 800c07c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2201      	movs	r2, #1
 800c084:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2201      	movs	r2, #1
 800c08c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2201      	movs	r2, #1
 800c094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2201      	movs	r2, #1
 800c09c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2201      	movs	r2, #1
 800c0a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2201      	movs	r2, #1
 800c0ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2201      	movs	r2, #1
 800c0b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2201      	movs	r2, #1
 800c0bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2201      	movs	r2, #1
 800c0c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2201      	movs	r2, #1
 800c0cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c0d0:	2300      	movs	r3, #0
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3708      	adds	r7, #8
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}
	...

0800c0dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b085      	sub	sp, #20
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c0ea:	b2db      	uxtb	r3, r3
 800c0ec:	2b01      	cmp	r3, #1
 800c0ee:	d001      	beq.n	800c0f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	e05e      	b.n	800c1b2 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2202      	movs	r2, #2
 800c0f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	68da      	ldr	r2, [r3, #12]
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	f042 0201 	orr.w	r2, r2, #1
 800c10a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	4a2b      	ldr	r2, [pc, #172]	; (800c1c0 <HAL_TIM_Base_Start_IT+0xe4>)
 800c112:	4293      	cmp	r3, r2
 800c114:	d02c      	beq.n	800c170 <HAL_TIM_Base_Start_IT+0x94>
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c11e:	d027      	beq.n	800c170 <HAL_TIM_Base_Start_IT+0x94>
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	4a27      	ldr	r2, [pc, #156]	; (800c1c4 <HAL_TIM_Base_Start_IT+0xe8>)
 800c126:	4293      	cmp	r3, r2
 800c128:	d022      	beq.n	800c170 <HAL_TIM_Base_Start_IT+0x94>
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	4a26      	ldr	r2, [pc, #152]	; (800c1c8 <HAL_TIM_Base_Start_IT+0xec>)
 800c130:	4293      	cmp	r3, r2
 800c132:	d01d      	beq.n	800c170 <HAL_TIM_Base_Start_IT+0x94>
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	4a24      	ldr	r2, [pc, #144]	; (800c1cc <HAL_TIM_Base_Start_IT+0xf0>)
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d018      	beq.n	800c170 <HAL_TIM_Base_Start_IT+0x94>
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	4a23      	ldr	r2, [pc, #140]	; (800c1d0 <HAL_TIM_Base_Start_IT+0xf4>)
 800c144:	4293      	cmp	r3, r2
 800c146:	d013      	beq.n	800c170 <HAL_TIM_Base_Start_IT+0x94>
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	4a21      	ldr	r2, [pc, #132]	; (800c1d4 <HAL_TIM_Base_Start_IT+0xf8>)
 800c14e:	4293      	cmp	r3, r2
 800c150:	d00e      	beq.n	800c170 <HAL_TIM_Base_Start_IT+0x94>
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	4a20      	ldr	r2, [pc, #128]	; (800c1d8 <HAL_TIM_Base_Start_IT+0xfc>)
 800c158:	4293      	cmp	r3, r2
 800c15a:	d009      	beq.n	800c170 <HAL_TIM_Base_Start_IT+0x94>
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	4a1e      	ldr	r2, [pc, #120]	; (800c1dc <HAL_TIM_Base_Start_IT+0x100>)
 800c162:	4293      	cmp	r3, r2
 800c164:	d004      	beq.n	800c170 <HAL_TIM_Base_Start_IT+0x94>
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	4a1d      	ldr	r2, [pc, #116]	; (800c1e0 <HAL_TIM_Base_Start_IT+0x104>)
 800c16c:	4293      	cmp	r3, r2
 800c16e:	d115      	bne.n	800c19c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	689a      	ldr	r2, [r3, #8]
 800c176:	4b1b      	ldr	r3, [pc, #108]	; (800c1e4 <HAL_TIM_Base_Start_IT+0x108>)
 800c178:	4013      	ands	r3, r2
 800c17a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	2b06      	cmp	r3, #6
 800c180:	d015      	beq.n	800c1ae <HAL_TIM_Base_Start_IT+0xd2>
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c188:	d011      	beq.n	800c1ae <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	681a      	ldr	r2, [r3, #0]
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f042 0201 	orr.w	r2, r2, #1
 800c198:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c19a:	e008      	b.n	800c1ae <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	681a      	ldr	r2, [r3, #0]
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	f042 0201 	orr.w	r2, r2, #1
 800c1aa:	601a      	str	r2, [r3, #0]
 800c1ac:	e000      	b.n	800c1b0 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c1b0:	2300      	movs	r3, #0
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3714      	adds	r7, #20
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1bc:	4770      	bx	lr
 800c1be:	bf00      	nop
 800c1c0:	40010000 	.word	0x40010000
 800c1c4:	40000400 	.word	0x40000400
 800c1c8:	40000800 	.word	0x40000800
 800c1cc:	40000c00 	.word	0x40000c00
 800c1d0:	40010400 	.word	0x40010400
 800c1d4:	40001800 	.word	0x40001800
 800c1d8:	40014000 	.word	0x40014000
 800c1dc:	4000e000 	.word	0x4000e000
 800c1e0:	4000e400 	.word	0x4000e400
 800c1e4:	00010007 	.word	0x00010007

0800c1e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b082      	sub	sp, #8
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d101      	bne.n	800c1fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	e049      	b.n	800c28e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c200:	b2db      	uxtb	r3, r3
 800c202:	2b00      	cmp	r3, #0
 800c204:	d106      	bne.n	800c214 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2200      	movs	r2, #0
 800c20a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f7f9 f950 	bl	80054b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2202      	movs	r2, #2
 800c218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681a      	ldr	r2, [r3, #0]
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	3304      	adds	r3, #4
 800c224:	4619      	mov	r1, r3
 800c226:	4610      	mov	r0, r2
 800c228:	f000 fdfa 	bl	800ce20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2201      	movs	r2, #1
 800c230:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2201      	movs	r2, #1
 800c238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2201      	movs	r2, #1
 800c240:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2201      	movs	r2, #1
 800c248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2201      	movs	r2, #1
 800c250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2201      	movs	r2, #1
 800c258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2201      	movs	r2, #1
 800c260:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2201      	movs	r2, #1
 800c268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2201      	movs	r2, #1
 800c270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2201      	movs	r2, #1
 800c278:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2201      	movs	r2, #1
 800c280:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2201      	movs	r2, #1
 800c288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c28c:	2300      	movs	r3, #0
}
 800c28e:	4618      	mov	r0, r3
 800c290:	3708      	adds	r7, #8
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}
	...

0800c298 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b084      	sub	sp, #16
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
 800c2a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d109      	bne.n	800c2bc <HAL_TIM_PWM_Start+0x24>
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c2ae:	b2db      	uxtb	r3, r3
 800c2b0:	2b01      	cmp	r3, #1
 800c2b2:	bf14      	ite	ne
 800c2b4:	2301      	movne	r3, #1
 800c2b6:	2300      	moveq	r3, #0
 800c2b8:	b2db      	uxtb	r3, r3
 800c2ba:	e03c      	b.n	800c336 <HAL_TIM_PWM_Start+0x9e>
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	2b04      	cmp	r3, #4
 800c2c0:	d109      	bne.n	800c2d6 <HAL_TIM_PWM_Start+0x3e>
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c2c8:	b2db      	uxtb	r3, r3
 800c2ca:	2b01      	cmp	r3, #1
 800c2cc:	bf14      	ite	ne
 800c2ce:	2301      	movne	r3, #1
 800c2d0:	2300      	moveq	r3, #0
 800c2d2:	b2db      	uxtb	r3, r3
 800c2d4:	e02f      	b.n	800c336 <HAL_TIM_PWM_Start+0x9e>
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	2b08      	cmp	r3, #8
 800c2da:	d109      	bne.n	800c2f0 <HAL_TIM_PWM_Start+0x58>
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c2e2:	b2db      	uxtb	r3, r3
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	bf14      	ite	ne
 800c2e8:	2301      	movne	r3, #1
 800c2ea:	2300      	moveq	r3, #0
 800c2ec:	b2db      	uxtb	r3, r3
 800c2ee:	e022      	b.n	800c336 <HAL_TIM_PWM_Start+0x9e>
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	2b0c      	cmp	r3, #12
 800c2f4:	d109      	bne.n	800c30a <HAL_TIM_PWM_Start+0x72>
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c2fc:	b2db      	uxtb	r3, r3
 800c2fe:	2b01      	cmp	r3, #1
 800c300:	bf14      	ite	ne
 800c302:	2301      	movne	r3, #1
 800c304:	2300      	moveq	r3, #0
 800c306:	b2db      	uxtb	r3, r3
 800c308:	e015      	b.n	800c336 <HAL_TIM_PWM_Start+0x9e>
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	2b10      	cmp	r3, #16
 800c30e:	d109      	bne.n	800c324 <HAL_TIM_PWM_Start+0x8c>
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c316:	b2db      	uxtb	r3, r3
 800c318:	2b01      	cmp	r3, #1
 800c31a:	bf14      	ite	ne
 800c31c:	2301      	movne	r3, #1
 800c31e:	2300      	moveq	r3, #0
 800c320:	b2db      	uxtb	r3, r3
 800c322:	e008      	b.n	800c336 <HAL_TIM_PWM_Start+0x9e>
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c32a:	b2db      	uxtb	r3, r3
 800c32c:	2b01      	cmp	r3, #1
 800c32e:	bf14      	ite	ne
 800c330:	2301      	movne	r3, #1
 800c332:	2300      	moveq	r3, #0
 800c334:	b2db      	uxtb	r3, r3
 800c336:	2b00      	cmp	r3, #0
 800c338:	d001      	beq.n	800c33e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c33a:	2301      	movs	r3, #1
 800c33c:	e0ab      	b.n	800c496 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d104      	bne.n	800c34e <HAL_TIM_PWM_Start+0xb6>
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2202      	movs	r2, #2
 800c348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c34c:	e023      	b.n	800c396 <HAL_TIM_PWM_Start+0xfe>
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	2b04      	cmp	r3, #4
 800c352:	d104      	bne.n	800c35e <HAL_TIM_PWM_Start+0xc6>
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2202      	movs	r2, #2
 800c358:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c35c:	e01b      	b.n	800c396 <HAL_TIM_PWM_Start+0xfe>
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	2b08      	cmp	r3, #8
 800c362:	d104      	bne.n	800c36e <HAL_TIM_PWM_Start+0xd6>
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2202      	movs	r2, #2
 800c368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c36c:	e013      	b.n	800c396 <HAL_TIM_PWM_Start+0xfe>
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	2b0c      	cmp	r3, #12
 800c372:	d104      	bne.n	800c37e <HAL_TIM_PWM_Start+0xe6>
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2202      	movs	r2, #2
 800c378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c37c:	e00b      	b.n	800c396 <HAL_TIM_PWM_Start+0xfe>
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	2b10      	cmp	r3, #16
 800c382:	d104      	bne.n	800c38e <HAL_TIM_PWM_Start+0xf6>
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2202      	movs	r2, #2
 800c388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c38c:	e003      	b.n	800c396 <HAL_TIM_PWM_Start+0xfe>
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2202      	movs	r2, #2
 800c392:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	2201      	movs	r2, #1
 800c39c:	6839      	ldr	r1, [r7, #0]
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f001 f958 	bl	800d654 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	4a3d      	ldr	r2, [pc, #244]	; (800c4a0 <HAL_TIM_PWM_Start+0x208>)
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	d013      	beq.n	800c3d6 <HAL_TIM_PWM_Start+0x13e>
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	4a3c      	ldr	r2, [pc, #240]	; (800c4a4 <HAL_TIM_PWM_Start+0x20c>)
 800c3b4:	4293      	cmp	r3, r2
 800c3b6:	d00e      	beq.n	800c3d6 <HAL_TIM_PWM_Start+0x13e>
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	4a3a      	ldr	r2, [pc, #232]	; (800c4a8 <HAL_TIM_PWM_Start+0x210>)
 800c3be:	4293      	cmp	r3, r2
 800c3c0:	d009      	beq.n	800c3d6 <HAL_TIM_PWM_Start+0x13e>
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	4a39      	ldr	r2, [pc, #228]	; (800c4ac <HAL_TIM_PWM_Start+0x214>)
 800c3c8:	4293      	cmp	r3, r2
 800c3ca:	d004      	beq.n	800c3d6 <HAL_TIM_PWM_Start+0x13e>
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	4a37      	ldr	r2, [pc, #220]	; (800c4b0 <HAL_TIM_PWM_Start+0x218>)
 800c3d2:	4293      	cmp	r3, r2
 800c3d4:	d101      	bne.n	800c3da <HAL_TIM_PWM_Start+0x142>
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	e000      	b.n	800c3dc <HAL_TIM_PWM_Start+0x144>
 800c3da:	2300      	movs	r3, #0
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d007      	beq.n	800c3f0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c3ee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	4a2a      	ldr	r2, [pc, #168]	; (800c4a0 <HAL_TIM_PWM_Start+0x208>)
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d02c      	beq.n	800c454 <HAL_TIM_PWM_Start+0x1bc>
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c402:	d027      	beq.n	800c454 <HAL_TIM_PWM_Start+0x1bc>
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	4a2a      	ldr	r2, [pc, #168]	; (800c4b4 <HAL_TIM_PWM_Start+0x21c>)
 800c40a:	4293      	cmp	r3, r2
 800c40c:	d022      	beq.n	800c454 <HAL_TIM_PWM_Start+0x1bc>
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	4a29      	ldr	r2, [pc, #164]	; (800c4b8 <HAL_TIM_PWM_Start+0x220>)
 800c414:	4293      	cmp	r3, r2
 800c416:	d01d      	beq.n	800c454 <HAL_TIM_PWM_Start+0x1bc>
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	4a27      	ldr	r2, [pc, #156]	; (800c4bc <HAL_TIM_PWM_Start+0x224>)
 800c41e:	4293      	cmp	r3, r2
 800c420:	d018      	beq.n	800c454 <HAL_TIM_PWM_Start+0x1bc>
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	4a1f      	ldr	r2, [pc, #124]	; (800c4a4 <HAL_TIM_PWM_Start+0x20c>)
 800c428:	4293      	cmp	r3, r2
 800c42a:	d013      	beq.n	800c454 <HAL_TIM_PWM_Start+0x1bc>
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	4a23      	ldr	r2, [pc, #140]	; (800c4c0 <HAL_TIM_PWM_Start+0x228>)
 800c432:	4293      	cmp	r3, r2
 800c434:	d00e      	beq.n	800c454 <HAL_TIM_PWM_Start+0x1bc>
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	4a1b      	ldr	r2, [pc, #108]	; (800c4a8 <HAL_TIM_PWM_Start+0x210>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d009      	beq.n	800c454 <HAL_TIM_PWM_Start+0x1bc>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	4a1f      	ldr	r2, [pc, #124]	; (800c4c4 <HAL_TIM_PWM_Start+0x22c>)
 800c446:	4293      	cmp	r3, r2
 800c448:	d004      	beq.n	800c454 <HAL_TIM_PWM_Start+0x1bc>
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	4a1e      	ldr	r2, [pc, #120]	; (800c4c8 <HAL_TIM_PWM_Start+0x230>)
 800c450:	4293      	cmp	r3, r2
 800c452:	d115      	bne.n	800c480 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	689a      	ldr	r2, [r3, #8]
 800c45a:	4b1c      	ldr	r3, [pc, #112]	; (800c4cc <HAL_TIM_PWM_Start+0x234>)
 800c45c:	4013      	ands	r3, r2
 800c45e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	2b06      	cmp	r3, #6
 800c464:	d015      	beq.n	800c492 <HAL_TIM_PWM_Start+0x1fa>
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c46c:	d011      	beq.n	800c492 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	681a      	ldr	r2, [r3, #0]
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f042 0201 	orr.w	r2, r2, #1
 800c47c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c47e:	e008      	b.n	800c492 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	681a      	ldr	r2, [r3, #0]
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	f042 0201 	orr.w	r2, r2, #1
 800c48e:	601a      	str	r2, [r3, #0]
 800c490:	e000      	b.n	800c494 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c492:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c494:	2300      	movs	r3, #0
}
 800c496:	4618      	mov	r0, r3
 800c498:	3710      	adds	r7, #16
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}
 800c49e:	bf00      	nop
 800c4a0:	40010000 	.word	0x40010000
 800c4a4:	40010400 	.word	0x40010400
 800c4a8:	40014000 	.word	0x40014000
 800c4ac:	40014400 	.word	0x40014400
 800c4b0:	40014800 	.word	0x40014800
 800c4b4:	40000400 	.word	0x40000400
 800c4b8:	40000800 	.word	0x40000800
 800c4bc:	40000c00 	.word	0x40000c00
 800c4c0:	40001800 	.word	0x40001800
 800c4c4:	4000e000 	.word	0x4000e000
 800c4c8:	4000e400 	.word	0x4000e400
 800c4cc:	00010007 	.word	0x00010007

0800c4d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b086      	sub	sp, #24
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
 800c4d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d101      	bne.n	800c4e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	e08f      	b.n	800c604 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c4ea:	b2db      	uxtb	r3, r3
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d106      	bne.n	800c4fe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f7f8 fecd 	bl	8005298 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2202      	movs	r2, #2
 800c502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	6899      	ldr	r1, [r3, #8]
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681a      	ldr	r2, [r3, #0]
 800c510:	4b3e      	ldr	r3, [pc, #248]	; (800c60c <HAL_TIM_Encoder_Init+0x13c>)
 800c512:	400b      	ands	r3, r1
 800c514:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681a      	ldr	r2, [r3, #0]
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	3304      	adds	r3, #4
 800c51e:	4619      	mov	r1, r3
 800c520:	4610      	mov	r0, r2
 800c522:	f000 fc7d 	bl	800ce20 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	689b      	ldr	r3, [r3, #8]
 800c52c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	699b      	ldr	r3, [r3, #24]
 800c534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	6a1b      	ldr	r3, [r3, #32]
 800c53c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	697a      	ldr	r2, [r7, #20]
 800c544:	4313      	orrs	r3, r2
 800c546:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c548:	693a      	ldr	r2, [r7, #16]
 800c54a:	4b31      	ldr	r3, [pc, #196]	; (800c610 <HAL_TIM_Encoder_Init+0x140>)
 800c54c:	4013      	ands	r3, r2
 800c54e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	689a      	ldr	r2, [r3, #8]
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	699b      	ldr	r3, [r3, #24]
 800c558:	021b      	lsls	r3, r3, #8
 800c55a:	4313      	orrs	r3, r2
 800c55c:	693a      	ldr	r2, [r7, #16]
 800c55e:	4313      	orrs	r3, r2
 800c560:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c562:	693a      	ldr	r2, [r7, #16]
 800c564:	4b2b      	ldr	r3, [pc, #172]	; (800c614 <HAL_TIM_Encoder_Init+0x144>)
 800c566:	4013      	ands	r3, r2
 800c568:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c56a:	693a      	ldr	r2, [r7, #16]
 800c56c:	4b2a      	ldr	r3, [pc, #168]	; (800c618 <HAL_TIM_Encoder_Init+0x148>)
 800c56e:	4013      	ands	r3, r2
 800c570:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	68da      	ldr	r2, [r3, #12]
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	69db      	ldr	r3, [r3, #28]
 800c57a:	021b      	lsls	r3, r3, #8
 800c57c:	4313      	orrs	r3, r2
 800c57e:	693a      	ldr	r2, [r7, #16]
 800c580:	4313      	orrs	r3, r2
 800c582:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	691b      	ldr	r3, [r3, #16]
 800c588:	011a      	lsls	r2, r3, #4
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	6a1b      	ldr	r3, [r3, #32]
 800c58e:	031b      	lsls	r3, r3, #12
 800c590:	4313      	orrs	r3, r2
 800c592:	693a      	ldr	r2, [r7, #16]
 800c594:	4313      	orrs	r3, r2
 800c596:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c59e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c5a6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	685a      	ldr	r2, [r3, #4]
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	695b      	ldr	r3, [r3, #20]
 800c5b0:	011b      	lsls	r3, r3, #4
 800c5b2:	4313      	orrs	r3, r2
 800c5b4:	68fa      	ldr	r2, [r7, #12]
 800c5b6:	4313      	orrs	r3, r2
 800c5b8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	697a      	ldr	r2, [r7, #20]
 800c5c0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	693a      	ldr	r2, [r7, #16]
 800c5c8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	68fa      	ldr	r2, [r7, #12]
 800c5d0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2201      	movs	r2, #1
 800c5d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2201      	movs	r2, #1
 800c5de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2201      	movs	r2, #1
 800c5e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	2201      	movs	r2, #1
 800c5ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2201      	movs	r2, #1
 800c5f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2201      	movs	r2, #1
 800c5fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c602:	2300      	movs	r3, #0
}
 800c604:	4618      	mov	r0, r3
 800c606:	3718      	adds	r7, #24
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}
 800c60c:	fffebff8 	.word	0xfffebff8
 800c610:	fffffcfc 	.word	0xfffffcfc
 800c614:	fffff3f3 	.word	0xfffff3f3
 800c618:	ffff0f0f 	.word	0xffff0f0f

0800c61c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b084      	sub	sp, #16
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
 800c624:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c62c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c634:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c63c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c644:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d110      	bne.n	800c66e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c64c:	7bfb      	ldrb	r3, [r7, #15]
 800c64e:	2b01      	cmp	r3, #1
 800c650:	d102      	bne.n	800c658 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800c652:	7b7b      	ldrb	r3, [r7, #13]
 800c654:	2b01      	cmp	r3, #1
 800c656:	d001      	beq.n	800c65c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800c658:	2301      	movs	r3, #1
 800c65a:	e089      	b.n	800c770 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2202      	movs	r2, #2
 800c660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2202      	movs	r2, #2
 800c668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c66c:	e031      	b.n	800c6d2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	2b04      	cmp	r3, #4
 800c672:	d110      	bne.n	800c696 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c674:	7bbb      	ldrb	r3, [r7, #14]
 800c676:	2b01      	cmp	r3, #1
 800c678:	d102      	bne.n	800c680 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c67a:	7b3b      	ldrb	r3, [r7, #12]
 800c67c:	2b01      	cmp	r3, #1
 800c67e:	d001      	beq.n	800c684 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800c680:	2301      	movs	r3, #1
 800c682:	e075      	b.n	800c770 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2202      	movs	r2, #2
 800c688:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2202      	movs	r2, #2
 800c690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c694:	e01d      	b.n	800c6d2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c696:	7bfb      	ldrb	r3, [r7, #15]
 800c698:	2b01      	cmp	r3, #1
 800c69a:	d108      	bne.n	800c6ae <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c69c:	7bbb      	ldrb	r3, [r7, #14]
 800c69e:	2b01      	cmp	r3, #1
 800c6a0:	d105      	bne.n	800c6ae <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c6a2:	7b7b      	ldrb	r3, [r7, #13]
 800c6a4:	2b01      	cmp	r3, #1
 800c6a6:	d102      	bne.n	800c6ae <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c6a8:	7b3b      	ldrb	r3, [r7, #12]
 800c6aa:	2b01      	cmp	r3, #1
 800c6ac:	d001      	beq.n	800c6b2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	e05e      	b.n	800c770 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2202      	movs	r2, #2
 800c6b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2202      	movs	r2, #2
 800c6be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2202      	movs	r2, #2
 800c6c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2202      	movs	r2, #2
 800c6ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d003      	beq.n	800c6e0 <HAL_TIM_Encoder_Start_IT+0xc4>
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	2b04      	cmp	r3, #4
 800c6dc:	d010      	beq.n	800c700 <HAL_TIM_Encoder_Start_IT+0xe4>
 800c6de:	e01f      	b.n	800c720 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	2201      	movs	r2, #1
 800c6e6:	2100      	movs	r1, #0
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f000 ffb3 	bl	800d654 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	68da      	ldr	r2, [r3, #12]
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f042 0202 	orr.w	r2, r2, #2
 800c6fc:	60da      	str	r2, [r3, #12]
      break;
 800c6fe:	e02e      	b.n	800c75e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	2201      	movs	r2, #1
 800c706:	2104      	movs	r1, #4
 800c708:	4618      	mov	r0, r3
 800c70a:	f000 ffa3 	bl	800d654 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	68da      	ldr	r2, [r3, #12]
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	f042 0204 	orr.w	r2, r2, #4
 800c71c:	60da      	str	r2, [r3, #12]
      break;
 800c71e:	e01e      	b.n	800c75e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	2201      	movs	r2, #1
 800c726:	2100      	movs	r1, #0
 800c728:	4618      	mov	r0, r3
 800c72a:	f000 ff93 	bl	800d654 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	2201      	movs	r2, #1
 800c734:	2104      	movs	r1, #4
 800c736:	4618      	mov	r0, r3
 800c738:	f000 ff8c 	bl	800d654 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	68da      	ldr	r2, [r3, #12]
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	f042 0202 	orr.w	r2, r2, #2
 800c74a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	68da      	ldr	r2, [r3, #12]
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f042 0204 	orr.w	r2, r2, #4
 800c75a:	60da      	str	r2, [r3, #12]
      break;
 800c75c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	681a      	ldr	r2, [r3, #0]
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	f042 0201 	orr.w	r2, r2, #1
 800c76c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c76e:	2300      	movs	r3, #0
}
 800c770:	4618      	mov	r0, r3
 800c772:	3710      	adds	r7, #16
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}

0800c778 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b082      	sub	sp, #8
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	691b      	ldr	r3, [r3, #16]
 800c786:	f003 0302 	and.w	r3, r3, #2
 800c78a:	2b02      	cmp	r3, #2
 800c78c:	d122      	bne.n	800c7d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	68db      	ldr	r3, [r3, #12]
 800c794:	f003 0302 	and.w	r3, r3, #2
 800c798:	2b02      	cmp	r3, #2
 800c79a:	d11b      	bne.n	800c7d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	f06f 0202 	mvn.w	r2, #2
 800c7a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2201      	movs	r2, #1
 800c7aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	699b      	ldr	r3, [r3, #24]
 800c7b2:	f003 0303 	and.w	r3, r3, #3
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d003      	beq.n	800c7c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c7ba:	6878      	ldr	r0, [r7, #4]
 800c7bc:	f000 fb12 	bl	800cde4 <HAL_TIM_IC_CaptureCallback>
 800c7c0:	e005      	b.n	800c7ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f000 fb04 	bl	800cdd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f000 fb15 	bl	800cdf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	691b      	ldr	r3, [r3, #16]
 800c7da:	f003 0304 	and.w	r3, r3, #4
 800c7de:	2b04      	cmp	r3, #4
 800c7e0:	d122      	bne.n	800c828 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	68db      	ldr	r3, [r3, #12]
 800c7e8:	f003 0304 	and.w	r3, r3, #4
 800c7ec:	2b04      	cmp	r3, #4
 800c7ee:	d11b      	bne.n	800c828 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	f06f 0204 	mvn.w	r2, #4
 800c7f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2202      	movs	r2, #2
 800c7fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	699b      	ldr	r3, [r3, #24]
 800c806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d003      	beq.n	800c816 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f000 fae8 	bl	800cde4 <HAL_TIM_IC_CaptureCallback>
 800c814:	e005      	b.n	800c822 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c816:	6878      	ldr	r0, [r7, #4]
 800c818:	f000 fada 	bl	800cdd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f000 faeb 	bl	800cdf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2200      	movs	r2, #0
 800c826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	691b      	ldr	r3, [r3, #16]
 800c82e:	f003 0308 	and.w	r3, r3, #8
 800c832:	2b08      	cmp	r3, #8
 800c834:	d122      	bne.n	800c87c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	68db      	ldr	r3, [r3, #12]
 800c83c:	f003 0308 	and.w	r3, r3, #8
 800c840:	2b08      	cmp	r3, #8
 800c842:	d11b      	bne.n	800c87c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	f06f 0208 	mvn.w	r2, #8
 800c84c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2204      	movs	r2, #4
 800c852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	69db      	ldr	r3, [r3, #28]
 800c85a:	f003 0303 	and.w	r3, r3, #3
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d003      	beq.n	800c86a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f000 fabe 	bl	800cde4 <HAL_TIM_IC_CaptureCallback>
 800c868:	e005      	b.n	800c876 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f000 fab0 	bl	800cdd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c870:	6878      	ldr	r0, [r7, #4]
 800c872:	f000 fac1 	bl	800cdf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2200      	movs	r2, #0
 800c87a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	691b      	ldr	r3, [r3, #16]
 800c882:	f003 0310 	and.w	r3, r3, #16
 800c886:	2b10      	cmp	r3, #16
 800c888:	d122      	bne.n	800c8d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	68db      	ldr	r3, [r3, #12]
 800c890:	f003 0310 	and.w	r3, r3, #16
 800c894:	2b10      	cmp	r3, #16
 800c896:	d11b      	bne.n	800c8d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	f06f 0210 	mvn.w	r2, #16
 800c8a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2208      	movs	r2, #8
 800c8a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	69db      	ldr	r3, [r3, #28]
 800c8ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d003      	beq.n	800c8be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f000 fa94 	bl	800cde4 <HAL_TIM_IC_CaptureCallback>
 800c8bc:	e005      	b.n	800c8ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f000 fa86 	bl	800cdd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f000 fa97 	bl	800cdf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	691b      	ldr	r3, [r3, #16]
 800c8d6:	f003 0301 	and.w	r3, r3, #1
 800c8da:	2b01      	cmp	r3, #1
 800c8dc:	d10e      	bne.n	800c8fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	68db      	ldr	r3, [r3, #12]
 800c8e4:	f003 0301 	and.w	r3, r3, #1
 800c8e8:	2b01      	cmp	r3, #1
 800c8ea:	d107      	bne.n	800c8fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	f06f 0201 	mvn.w	r2, #1
 800c8f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	f7f4 f8c6 	bl	8000a88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	691b      	ldr	r3, [r3, #16]
 800c902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c906:	2b80      	cmp	r3, #128	; 0x80
 800c908:	d10e      	bne.n	800c928 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	68db      	ldr	r3, [r3, #12]
 800c910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c914:	2b80      	cmp	r3, #128	; 0x80
 800c916:	d107      	bne.n	800c928 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f001 f802 	bl	800d92c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	691b      	ldr	r3, [r3, #16]
 800c92e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c932:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c936:	d10e      	bne.n	800c956 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	68db      	ldr	r3, [r3, #12]
 800c93e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c942:	2b80      	cmp	r3, #128	; 0x80
 800c944:	d107      	bne.n	800c956 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c94e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f000 fff5 	bl	800d940 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	691b      	ldr	r3, [r3, #16]
 800c95c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c960:	2b40      	cmp	r3, #64	; 0x40
 800c962:	d10e      	bne.n	800c982 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	68db      	ldr	r3, [r3, #12]
 800c96a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c96e:	2b40      	cmp	r3, #64	; 0x40
 800c970:	d107      	bne.n	800c982 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c97a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c97c:	6878      	ldr	r0, [r7, #4]
 800c97e:	f000 fa45 	bl	800ce0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	691b      	ldr	r3, [r3, #16]
 800c988:	f003 0320 	and.w	r3, r3, #32
 800c98c:	2b20      	cmp	r3, #32
 800c98e:	d10e      	bne.n	800c9ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	68db      	ldr	r3, [r3, #12]
 800c996:	f003 0320 	and.w	r3, r3, #32
 800c99a:	2b20      	cmp	r3, #32
 800c99c:	d107      	bne.n	800c9ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	f06f 0220 	mvn.w	r2, #32
 800c9a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f000 ffb5 	bl	800d918 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c9ae:	bf00      	nop
 800c9b0:	3708      	adds	r7, #8
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}
	...

0800c9b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b086      	sub	sp, #24
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	60f8      	str	r0, [r7, #12]
 800c9c0:	60b9      	str	r1, [r7, #8]
 800c9c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c9ce:	2b01      	cmp	r3, #1
 800c9d0:	d101      	bne.n	800c9d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c9d2:	2302      	movs	r3, #2
 800c9d4:	e0ff      	b.n	800cbd6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	2201      	movs	r2, #1
 800c9da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2b14      	cmp	r3, #20
 800c9e2:	f200 80f0 	bhi.w	800cbc6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c9e6:	a201      	add	r2, pc, #4	; (adr r2, 800c9ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c9e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9ec:	0800ca41 	.word	0x0800ca41
 800c9f0:	0800cbc7 	.word	0x0800cbc7
 800c9f4:	0800cbc7 	.word	0x0800cbc7
 800c9f8:	0800cbc7 	.word	0x0800cbc7
 800c9fc:	0800ca81 	.word	0x0800ca81
 800ca00:	0800cbc7 	.word	0x0800cbc7
 800ca04:	0800cbc7 	.word	0x0800cbc7
 800ca08:	0800cbc7 	.word	0x0800cbc7
 800ca0c:	0800cac3 	.word	0x0800cac3
 800ca10:	0800cbc7 	.word	0x0800cbc7
 800ca14:	0800cbc7 	.word	0x0800cbc7
 800ca18:	0800cbc7 	.word	0x0800cbc7
 800ca1c:	0800cb03 	.word	0x0800cb03
 800ca20:	0800cbc7 	.word	0x0800cbc7
 800ca24:	0800cbc7 	.word	0x0800cbc7
 800ca28:	0800cbc7 	.word	0x0800cbc7
 800ca2c:	0800cb45 	.word	0x0800cb45
 800ca30:	0800cbc7 	.word	0x0800cbc7
 800ca34:	0800cbc7 	.word	0x0800cbc7
 800ca38:	0800cbc7 	.word	0x0800cbc7
 800ca3c:	0800cb85 	.word	0x0800cb85
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	68b9      	ldr	r1, [r7, #8]
 800ca46:	4618      	mov	r0, r3
 800ca48:	f000 fa90 	bl	800cf6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	699a      	ldr	r2, [r3, #24]
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	f042 0208 	orr.w	r2, r2, #8
 800ca5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	699a      	ldr	r2, [r3, #24]
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f022 0204 	bic.w	r2, r2, #4
 800ca6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	6999      	ldr	r1, [r3, #24]
 800ca72:	68bb      	ldr	r3, [r7, #8]
 800ca74:	691a      	ldr	r2, [r3, #16]
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	430a      	orrs	r2, r1
 800ca7c:	619a      	str	r2, [r3, #24]
      break;
 800ca7e:	e0a5      	b.n	800cbcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	68b9      	ldr	r1, [r7, #8]
 800ca86:	4618      	mov	r0, r3
 800ca88:	f000 fb00 	bl	800d08c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	699a      	ldr	r2, [r3, #24]
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ca9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	699a      	ldr	r2, [r3, #24]
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800caaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	6999      	ldr	r1, [r3, #24]
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	691b      	ldr	r3, [r3, #16]
 800cab6:	021a      	lsls	r2, r3, #8
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	430a      	orrs	r2, r1
 800cabe:	619a      	str	r2, [r3, #24]
      break;
 800cac0:	e084      	b.n	800cbcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	68b9      	ldr	r1, [r7, #8]
 800cac8:	4618      	mov	r0, r3
 800caca:	f000 fb69 	bl	800d1a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	69da      	ldr	r2, [r3, #28]
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	f042 0208 	orr.w	r2, r2, #8
 800cadc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	69da      	ldr	r2, [r3, #28]
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	f022 0204 	bic.w	r2, r2, #4
 800caec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	69d9      	ldr	r1, [r3, #28]
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	691a      	ldr	r2, [r3, #16]
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	430a      	orrs	r2, r1
 800cafe:	61da      	str	r2, [r3, #28]
      break;
 800cb00:	e064      	b.n	800cbcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	68b9      	ldr	r1, [r7, #8]
 800cb08:	4618      	mov	r0, r3
 800cb0a:	f000 fbd1 	bl	800d2b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	69da      	ldr	r2, [r3, #28]
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cb1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	69da      	ldr	r2, [r3, #28]
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cb2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	69d9      	ldr	r1, [r3, #28]
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	691b      	ldr	r3, [r3, #16]
 800cb38:	021a      	lsls	r2, r3, #8
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	430a      	orrs	r2, r1
 800cb40:	61da      	str	r2, [r3, #28]
      break;
 800cb42:	e043      	b.n	800cbcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	68b9      	ldr	r1, [r7, #8]
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f000 fc1a 	bl	800d384 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	f042 0208 	orr.w	r2, r2, #8
 800cb5e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	f022 0204 	bic.w	r2, r2, #4
 800cb6e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	691a      	ldr	r2, [r3, #16]
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	430a      	orrs	r2, r1
 800cb80:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cb82:	e023      	b.n	800cbcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	68b9      	ldr	r1, [r7, #8]
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f000 fc5e 	bl	800d44c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cb9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cbae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	691b      	ldr	r3, [r3, #16]
 800cbba:	021a      	lsls	r2, r3, #8
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	430a      	orrs	r2, r1
 800cbc2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cbc4:	e002      	b.n	800cbcc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cbc6:	2301      	movs	r3, #1
 800cbc8:	75fb      	strb	r3, [r7, #23]
      break;
 800cbca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	2200      	movs	r2, #0
 800cbd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cbd4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3718      	adds	r7, #24
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}
 800cbde:	bf00      	nop

0800cbe0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b084      	sub	sp, #16
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
 800cbe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cbea:	2300      	movs	r3, #0
 800cbec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cbf4:	2b01      	cmp	r3, #1
 800cbf6:	d101      	bne.n	800cbfc <HAL_TIM_ConfigClockSource+0x1c>
 800cbf8:	2302      	movs	r3, #2
 800cbfa:	e0dc      	b.n	800cdb6 <HAL_TIM_ConfigClockSource+0x1d6>
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2201      	movs	r2, #1
 800cc00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2202      	movs	r2, #2
 800cc08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	689b      	ldr	r3, [r3, #8]
 800cc12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cc14:	68ba      	ldr	r2, [r7, #8]
 800cc16:	4b6a      	ldr	r3, [pc, #424]	; (800cdc0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800cc18:	4013      	ands	r3, r2
 800cc1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cc22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	68ba      	ldr	r2, [r7, #8]
 800cc2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	4a64      	ldr	r2, [pc, #400]	; (800cdc4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800cc32:	4293      	cmp	r3, r2
 800cc34:	f000 80a9 	beq.w	800cd8a <HAL_TIM_ConfigClockSource+0x1aa>
 800cc38:	4a62      	ldr	r2, [pc, #392]	; (800cdc4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800cc3a:	4293      	cmp	r3, r2
 800cc3c:	f200 80ae 	bhi.w	800cd9c <HAL_TIM_ConfigClockSource+0x1bc>
 800cc40:	4a61      	ldr	r2, [pc, #388]	; (800cdc8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cc42:	4293      	cmp	r3, r2
 800cc44:	f000 80a1 	beq.w	800cd8a <HAL_TIM_ConfigClockSource+0x1aa>
 800cc48:	4a5f      	ldr	r2, [pc, #380]	; (800cdc8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	f200 80a6 	bhi.w	800cd9c <HAL_TIM_ConfigClockSource+0x1bc>
 800cc50:	4a5e      	ldr	r2, [pc, #376]	; (800cdcc <HAL_TIM_ConfigClockSource+0x1ec>)
 800cc52:	4293      	cmp	r3, r2
 800cc54:	f000 8099 	beq.w	800cd8a <HAL_TIM_ConfigClockSource+0x1aa>
 800cc58:	4a5c      	ldr	r2, [pc, #368]	; (800cdcc <HAL_TIM_ConfigClockSource+0x1ec>)
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	f200 809e 	bhi.w	800cd9c <HAL_TIM_ConfigClockSource+0x1bc>
 800cc60:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800cc64:	f000 8091 	beq.w	800cd8a <HAL_TIM_ConfigClockSource+0x1aa>
 800cc68:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800cc6c:	f200 8096 	bhi.w	800cd9c <HAL_TIM_ConfigClockSource+0x1bc>
 800cc70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc74:	f000 8089 	beq.w	800cd8a <HAL_TIM_ConfigClockSource+0x1aa>
 800cc78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc7c:	f200 808e 	bhi.w	800cd9c <HAL_TIM_ConfigClockSource+0x1bc>
 800cc80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cc84:	d03e      	beq.n	800cd04 <HAL_TIM_ConfigClockSource+0x124>
 800cc86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cc8a:	f200 8087 	bhi.w	800cd9c <HAL_TIM_ConfigClockSource+0x1bc>
 800cc8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc92:	f000 8086 	beq.w	800cda2 <HAL_TIM_ConfigClockSource+0x1c2>
 800cc96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc9a:	d87f      	bhi.n	800cd9c <HAL_TIM_ConfigClockSource+0x1bc>
 800cc9c:	2b70      	cmp	r3, #112	; 0x70
 800cc9e:	d01a      	beq.n	800ccd6 <HAL_TIM_ConfigClockSource+0xf6>
 800cca0:	2b70      	cmp	r3, #112	; 0x70
 800cca2:	d87b      	bhi.n	800cd9c <HAL_TIM_ConfigClockSource+0x1bc>
 800cca4:	2b60      	cmp	r3, #96	; 0x60
 800cca6:	d050      	beq.n	800cd4a <HAL_TIM_ConfigClockSource+0x16a>
 800cca8:	2b60      	cmp	r3, #96	; 0x60
 800ccaa:	d877      	bhi.n	800cd9c <HAL_TIM_ConfigClockSource+0x1bc>
 800ccac:	2b50      	cmp	r3, #80	; 0x50
 800ccae:	d03c      	beq.n	800cd2a <HAL_TIM_ConfigClockSource+0x14a>
 800ccb0:	2b50      	cmp	r3, #80	; 0x50
 800ccb2:	d873      	bhi.n	800cd9c <HAL_TIM_ConfigClockSource+0x1bc>
 800ccb4:	2b40      	cmp	r3, #64	; 0x40
 800ccb6:	d058      	beq.n	800cd6a <HAL_TIM_ConfigClockSource+0x18a>
 800ccb8:	2b40      	cmp	r3, #64	; 0x40
 800ccba:	d86f      	bhi.n	800cd9c <HAL_TIM_ConfigClockSource+0x1bc>
 800ccbc:	2b30      	cmp	r3, #48	; 0x30
 800ccbe:	d064      	beq.n	800cd8a <HAL_TIM_ConfigClockSource+0x1aa>
 800ccc0:	2b30      	cmp	r3, #48	; 0x30
 800ccc2:	d86b      	bhi.n	800cd9c <HAL_TIM_ConfigClockSource+0x1bc>
 800ccc4:	2b20      	cmp	r3, #32
 800ccc6:	d060      	beq.n	800cd8a <HAL_TIM_ConfigClockSource+0x1aa>
 800ccc8:	2b20      	cmp	r3, #32
 800ccca:	d867      	bhi.n	800cd9c <HAL_TIM_ConfigClockSource+0x1bc>
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d05c      	beq.n	800cd8a <HAL_TIM_ConfigClockSource+0x1aa>
 800ccd0:	2b10      	cmp	r3, #16
 800ccd2:	d05a      	beq.n	800cd8a <HAL_TIM_ConfigClockSource+0x1aa>
 800ccd4:	e062      	b.n	800cd9c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cce6:	f000 fc95 	bl	800d614 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	689b      	ldr	r3, [r3, #8]
 800ccf0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ccf8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	68ba      	ldr	r2, [r7, #8]
 800cd00:	609a      	str	r2, [r3, #8]
      break;
 800cd02:	e04f      	b.n	800cda4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cd14:	f000 fc7e 	bl	800d614 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	689a      	ldr	r2, [r3, #8]
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cd26:	609a      	str	r2, [r3, #8]
      break;
 800cd28:	e03c      	b.n	800cda4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cd36:	461a      	mov	r2, r3
 800cd38:	f000 fbee 	bl	800d518 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	2150      	movs	r1, #80	; 0x50
 800cd42:	4618      	mov	r0, r3
 800cd44:	f000 fc48 	bl	800d5d8 <TIM_ITRx_SetConfig>
      break;
 800cd48:	e02c      	b.n	800cda4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cd56:	461a      	mov	r2, r3
 800cd58:	f000 fc0d 	bl	800d576 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	2160      	movs	r1, #96	; 0x60
 800cd62:	4618      	mov	r0, r3
 800cd64:	f000 fc38 	bl	800d5d8 <TIM_ITRx_SetConfig>
      break;
 800cd68:	e01c      	b.n	800cda4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cd76:	461a      	mov	r2, r3
 800cd78:	f000 fbce 	bl	800d518 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	2140      	movs	r1, #64	; 0x40
 800cd82:	4618      	mov	r0, r3
 800cd84:	f000 fc28 	bl	800d5d8 <TIM_ITRx_SetConfig>
      break;
 800cd88:	e00c      	b.n	800cda4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681a      	ldr	r2, [r3, #0]
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	4619      	mov	r1, r3
 800cd94:	4610      	mov	r0, r2
 800cd96:	f000 fc1f 	bl	800d5d8 <TIM_ITRx_SetConfig>
      break;
 800cd9a:	e003      	b.n	800cda4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	73fb      	strb	r3, [r7, #15]
      break;
 800cda0:	e000      	b.n	800cda4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800cda2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2201      	movs	r2, #1
 800cda8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2200      	movs	r2, #0
 800cdb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cdb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	3710      	adds	r7, #16
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd80      	pop	{r7, pc}
 800cdbe:	bf00      	nop
 800cdc0:	ffceff88 	.word	0xffceff88
 800cdc4:	00100040 	.word	0x00100040
 800cdc8:	00100030 	.word	0x00100030
 800cdcc:	00100020 	.word	0x00100020

0800cdd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	b083      	sub	sp, #12
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cdd8:	bf00      	nop
 800cdda:	370c      	adds	r7, #12
 800cddc:	46bd      	mov	sp, r7
 800cdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde2:	4770      	bx	lr

0800cde4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cde4:	b480      	push	{r7}
 800cde6:	b083      	sub	sp, #12
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cdec:	bf00      	nop
 800cdee:	370c      	adds	r7, #12
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf6:	4770      	bx	lr

0800cdf8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b083      	sub	sp, #12
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ce00:	bf00      	nop
 800ce02:	370c      	adds	r7, #12
 800ce04:	46bd      	mov	sp, r7
 800ce06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0a:	4770      	bx	lr

0800ce0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b083      	sub	sp, #12
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ce14:	bf00      	nop
 800ce16:	370c      	adds	r7, #12
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1e:	4770      	bx	lr

0800ce20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ce20:	b480      	push	{r7}
 800ce22:	b085      	sub	sp, #20
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
 800ce28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	4a44      	ldr	r2, [pc, #272]	; (800cf44 <TIM_Base_SetConfig+0x124>)
 800ce34:	4293      	cmp	r3, r2
 800ce36:	d013      	beq.n	800ce60 <TIM_Base_SetConfig+0x40>
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce3e:	d00f      	beq.n	800ce60 <TIM_Base_SetConfig+0x40>
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	4a41      	ldr	r2, [pc, #260]	; (800cf48 <TIM_Base_SetConfig+0x128>)
 800ce44:	4293      	cmp	r3, r2
 800ce46:	d00b      	beq.n	800ce60 <TIM_Base_SetConfig+0x40>
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	4a40      	ldr	r2, [pc, #256]	; (800cf4c <TIM_Base_SetConfig+0x12c>)
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	d007      	beq.n	800ce60 <TIM_Base_SetConfig+0x40>
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	4a3f      	ldr	r2, [pc, #252]	; (800cf50 <TIM_Base_SetConfig+0x130>)
 800ce54:	4293      	cmp	r3, r2
 800ce56:	d003      	beq.n	800ce60 <TIM_Base_SetConfig+0x40>
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	4a3e      	ldr	r2, [pc, #248]	; (800cf54 <TIM_Base_SetConfig+0x134>)
 800ce5c:	4293      	cmp	r3, r2
 800ce5e:	d108      	bne.n	800ce72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	685b      	ldr	r3, [r3, #4]
 800ce6c:	68fa      	ldr	r2, [r7, #12]
 800ce6e:	4313      	orrs	r3, r2
 800ce70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	4a33      	ldr	r2, [pc, #204]	; (800cf44 <TIM_Base_SetConfig+0x124>)
 800ce76:	4293      	cmp	r3, r2
 800ce78:	d027      	beq.n	800ceca <TIM_Base_SetConfig+0xaa>
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce80:	d023      	beq.n	800ceca <TIM_Base_SetConfig+0xaa>
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	4a30      	ldr	r2, [pc, #192]	; (800cf48 <TIM_Base_SetConfig+0x128>)
 800ce86:	4293      	cmp	r3, r2
 800ce88:	d01f      	beq.n	800ceca <TIM_Base_SetConfig+0xaa>
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	4a2f      	ldr	r2, [pc, #188]	; (800cf4c <TIM_Base_SetConfig+0x12c>)
 800ce8e:	4293      	cmp	r3, r2
 800ce90:	d01b      	beq.n	800ceca <TIM_Base_SetConfig+0xaa>
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	4a2e      	ldr	r2, [pc, #184]	; (800cf50 <TIM_Base_SetConfig+0x130>)
 800ce96:	4293      	cmp	r3, r2
 800ce98:	d017      	beq.n	800ceca <TIM_Base_SetConfig+0xaa>
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	4a2d      	ldr	r2, [pc, #180]	; (800cf54 <TIM_Base_SetConfig+0x134>)
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	d013      	beq.n	800ceca <TIM_Base_SetConfig+0xaa>
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	4a2c      	ldr	r2, [pc, #176]	; (800cf58 <TIM_Base_SetConfig+0x138>)
 800cea6:	4293      	cmp	r3, r2
 800cea8:	d00f      	beq.n	800ceca <TIM_Base_SetConfig+0xaa>
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	4a2b      	ldr	r2, [pc, #172]	; (800cf5c <TIM_Base_SetConfig+0x13c>)
 800ceae:	4293      	cmp	r3, r2
 800ceb0:	d00b      	beq.n	800ceca <TIM_Base_SetConfig+0xaa>
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	4a2a      	ldr	r2, [pc, #168]	; (800cf60 <TIM_Base_SetConfig+0x140>)
 800ceb6:	4293      	cmp	r3, r2
 800ceb8:	d007      	beq.n	800ceca <TIM_Base_SetConfig+0xaa>
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	4a29      	ldr	r2, [pc, #164]	; (800cf64 <TIM_Base_SetConfig+0x144>)
 800cebe:	4293      	cmp	r3, r2
 800cec0:	d003      	beq.n	800ceca <TIM_Base_SetConfig+0xaa>
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	4a28      	ldr	r2, [pc, #160]	; (800cf68 <TIM_Base_SetConfig+0x148>)
 800cec6:	4293      	cmp	r3, r2
 800cec8:	d108      	bne.n	800cedc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ced0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	68db      	ldr	r3, [r3, #12]
 800ced6:	68fa      	ldr	r2, [r7, #12]
 800ced8:	4313      	orrs	r3, r2
 800ceda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	695b      	ldr	r3, [r3, #20]
 800cee6:	4313      	orrs	r3, r2
 800cee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	68fa      	ldr	r2, [r7, #12]
 800ceee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	689a      	ldr	r2, [r3, #8]
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	681a      	ldr	r2, [r3, #0]
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	4a10      	ldr	r2, [pc, #64]	; (800cf44 <TIM_Base_SetConfig+0x124>)
 800cf04:	4293      	cmp	r3, r2
 800cf06:	d00f      	beq.n	800cf28 <TIM_Base_SetConfig+0x108>
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	4a12      	ldr	r2, [pc, #72]	; (800cf54 <TIM_Base_SetConfig+0x134>)
 800cf0c:	4293      	cmp	r3, r2
 800cf0e:	d00b      	beq.n	800cf28 <TIM_Base_SetConfig+0x108>
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	4a11      	ldr	r2, [pc, #68]	; (800cf58 <TIM_Base_SetConfig+0x138>)
 800cf14:	4293      	cmp	r3, r2
 800cf16:	d007      	beq.n	800cf28 <TIM_Base_SetConfig+0x108>
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	4a10      	ldr	r2, [pc, #64]	; (800cf5c <TIM_Base_SetConfig+0x13c>)
 800cf1c:	4293      	cmp	r3, r2
 800cf1e:	d003      	beq.n	800cf28 <TIM_Base_SetConfig+0x108>
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	4a0f      	ldr	r2, [pc, #60]	; (800cf60 <TIM_Base_SetConfig+0x140>)
 800cf24:	4293      	cmp	r3, r2
 800cf26:	d103      	bne.n	800cf30 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	691a      	ldr	r2, [r3, #16]
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2201      	movs	r2, #1
 800cf34:	615a      	str	r2, [r3, #20]
}
 800cf36:	bf00      	nop
 800cf38:	3714      	adds	r7, #20
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf40:	4770      	bx	lr
 800cf42:	bf00      	nop
 800cf44:	40010000 	.word	0x40010000
 800cf48:	40000400 	.word	0x40000400
 800cf4c:	40000800 	.word	0x40000800
 800cf50:	40000c00 	.word	0x40000c00
 800cf54:	40010400 	.word	0x40010400
 800cf58:	40014000 	.word	0x40014000
 800cf5c:	40014400 	.word	0x40014400
 800cf60:	40014800 	.word	0x40014800
 800cf64:	4000e000 	.word	0x4000e000
 800cf68:	4000e400 	.word	0x4000e400

0800cf6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cf6c:	b480      	push	{r7}
 800cf6e:	b087      	sub	sp, #28
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
 800cf74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	6a1b      	ldr	r3, [r3, #32]
 800cf7a:	f023 0201 	bic.w	r2, r3, #1
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	6a1b      	ldr	r3, [r3, #32]
 800cf86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	685b      	ldr	r3, [r3, #4]
 800cf8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	699b      	ldr	r3, [r3, #24]
 800cf92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cf94:	68fa      	ldr	r2, [r7, #12]
 800cf96:	4b37      	ldr	r3, [pc, #220]	; (800d074 <TIM_OC1_SetConfig+0x108>)
 800cf98:	4013      	ands	r3, r2
 800cf9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	f023 0303 	bic.w	r3, r3, #3
 800cfa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	68fa      	ldr	r2, [r7, #12]
 800cfaa:	4313      	orrs	r3, r2
 800cfac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cfae:	697b      	ldr	r3, [r7, #20]
 800cfb0:	f023 0302 	bic.w	r3, r3, #2
 800cfb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	689b      	ldr	r3, [r3, #8]
 800cfba:	697a      	ldr	r2, [r7, #20]
 800cfbc:	4313      	orrs	r3, r2
 800cfbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	4a2d      	ldr	r2, [pc, #180]	; (800d078 <TIM_OC1_SetConfig+0x10c>)
 800cfc4:	4293      	cmp	r3, r2
 800cfc6:	d00f      	beq.n	800cfe8 <TIM_OC1_SetConfig+0x7c>
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	4a2c      	ldr	r2, [pc, #176]	; (800d07c <TIM_OC1_SetConfig+0x110>)
 800cfcc:	4293      	cmp	r3, r2
 800cfce:	d00b      	beq.n	800cfe8 <TIM_OC1_SetConfig+0x7c>
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	4a2b      	ldr	r2, [pc, #172]	; (800d080 <TIM_OC1_SetConfig+0x114>)
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	d007      	beq.n	800cfe8 <TIM_OC1_SetConfig+0x7c>
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	4a2a      	ldr	r2, [pc, #168]	; (800d084 <TIM_OC1_SetConfig+0x118>)
 800cfdc:	4293      	cmp	r3, r2
 800cfde:	d003      	beq.n	800cfe8 <TIM_OC1_SetConfig+0x7c>
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	4a29      	ldr	r2, [pc, #164]	; (800d088 <TIM_OC1_SetConfig+0x11c>)
 800cfe4:	4293      	cmp	r3, r2
 800cfe6:	d10c      	bne.n	800d002 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cfe8:	697b      	ldr	r3, [r7, #20]
 800cfea:	f023 0308 	bic.w	r3, r3, #8
 800cfee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	68db      	ldr	r3, [r3, #12]
 800cff4:	697a      	ldr	r2, [r7, #20]
 800cff6:	4313      	orrs	r3, r2
 800cff8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cffa:	697b      	ldr	r3, [r7, #20]
 800cffc:	f023 0304 	bic.w	r3, r3, #4
 800d000:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	4a1c      	ldr	r2, [pc, #112]	; (800d078 <TIM_OC1_SetConfig+0x10c>)
 800d006:	4293      	cmp	r3, r2
 800d008:	d00f      	beq.n	800d02a <TIM_OC1_SetConfig+0xbe>
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	4a1b      	ldr	r2, [pc, #108]	; (800d07c <TIM_OC1_SetConfig+0x110>)
 800d00e:	4293      	cmp	r3, r2
 800d010:	d00b      	beq.n	800d02a <TIM_OC1_SetConfig+0xbe>
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	4a1a      	ldr	r2, [pc, #104]	; (800d080 <TIM_OC1_SetConfig+0x114>)
 800d016:	4293      	cmp	r3, r2
 800d018:	d007      	beq.n	800d02a <TIM_OC1_SetConfig+0xbe>
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	4a19      	ldr	r2, [pc, #100]	; (800d084 <TIM_OC1_SetConfig+0x118>)
 800d01e:	4293      	cmp	r3, r2
 800d020:	d003      	beq.n	800d02a <TIM_OC1_SetConfig+0xbe>
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	4a18      	ldr	r2, [pc, #96]	; (800d088 <TIM_OC1_SetConfig+0x11c>)
 800d026:	4293      	cmp	r3, r2
 800d028:	d111      	bne.n	800d04e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d02a:	693b      	ldr	r3, [r7, #16]
 800d02c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d030:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d032:	693b      	ldr	r3, [r7, #16]
 800d034:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d038:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	695b      	ldr	r3, [r3, #20]
 800d03e:	693a      	ldr	r2, [r7, #16]
 800d040:	4313      	orrs	r3, r2
 800d042:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	699b      	ldr	r3, [r3, #24]
 800d048:	693a      	ldr	r2, [r7, #16]
 800d04a:	4313      	orrs	r3, r2
 800d04c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	693a      	ldr	r2, [r7, #16]
 800d052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	68fa      	ldr	r2, [r7, #12]
 800d058:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d05a:	683b      	ldr	r3, [r7, #0]
 800d05c:	685a      	ldr	r2, [r3, #4]
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	697a      	ldr	r2, [r7, #20]
 800d066:	621a      	str	r2, [r3, #32]
}
 800d068:	bf00      	nop
 800d06a:	371c      	adds	r7, #28
 800d06c:	46bd      	mov	sp, r7
 800d06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d072:	4770      	bx	lr
 800d074:	fffeff8f 	.word	0xfffeff8f
 800d078:	40010000 	.word	0x40010000
 800d07c:	40010400 	.word	0x40010400
 800d080:	40014000 	.word	0x40014000
 800d084:	40014400 	.word	0x40014400
 800d088:	40014800 	.word	0x40014800

0800d08c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d08c:	b480      	push	{r7}
 800d08e:	b087      	sub	sp, #28
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
 800d094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	6a1b      	ldr	r3, [r3, #32]
 800d09a:	f023 0210 	bic.w	r2, r3, #16
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6a1b      	ldr	r3, [r3, #32]
 800d0a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	685b      	ldr	r3, [r3, #4]
 800d0ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	699b      	ldr	r3, [r3, #24]
 800d0b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d0b4:	68fa      	ldr	r2, [r7, #12]
 800d0b6:	4b34      	ldr	r3, [pc, #208]	; (800d188 <TIM_OC2_SetConfig+0xfc>)
 800d0b8:	4013      	ands	r3, r2
 800d0ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d0c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	021b      	lsls	r3, r3, #8
 800d0ca:	68fa      	ldr	r2, [r7, #12]
 800d0cc:	4313      	orrs	r3, r2
 800d0ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d0d0:	697b      	ldr	r3, [r7, #20]
 800d0d2:	f023 0320 	bic.w	r3, r3, #32
 800d0d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	689b      	ldr	r3, [r3, #8]
 800d0dc:	011b      	lsls	r3, r3, #4
 800d0de:	697a      	ldr	r2, [r7, #20]
 800d0e0:	4313      	orrs	r3, r2
 800d0e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	4a29      	ldr	r2, [pc, #164]	; (800d18c <TIM_OC2_SetConfig+0x100>)
 800d0e8:	4293      	cmp	r3, r2
 800d0ea:	d003      	beq.n	800d0f4 <TIM_OC2_SetConfig+0x68>
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	4a28      	ldr	r2, [pc, #160]	; (800d190 <TIM_OC2_SetConfig+0x104>)
 800d0f0:	4293      	cmp	r3, r2
 800d0f2:	d10d      	bne.n	800d110 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d0f4:	697b      	ldr	r3, [r7, #20]
 800d0f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d0fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	68db      	ldr	r3, [r3, #12]
 800d100:	011b      	lsls	r3, r3, #4
 800d102:	697a      	ldr	r2, [r7, #20]
 800d104:	4313      	orrs	r3, r2
 800d106:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d108:	697b      	ldr	r3, [r7, #20]
 800d10a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d10e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	4a1e      	ldr	r2, [pc, #120]	; (800d18c <TIM_OC2_SetConfig+0x100>)
 800d114:	4293      	cmp	r3, r2
 800d116:	d00f      	beq.n	800d138 <TIM_OC2_SetConfig+0xac>
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	4a1d      	ldr	r2, [pc, #116]	; (800d190 <TIM_OC2_SetConfig+0x104>)
 800d11c:	4293      	cmp	r3, r2
 800d11e:	d00b      	beq.n	800d138 <TIM_OC2_SetConfig+0xac>
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	4a1c      	ldr	r2, [pc, #112]	; (800d194 <TIM_OC2_SetConfig+0x108>)
 800d124:	4293      	cmp	r3, r2
 800d126:	d007      	beq.n	800d138 <TIM_OC2_SetConfig+0xac>
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	4a1b      	ldr	r2, [pc, #108]	; (800d198 <TIM_OC2_SetConfig+0x10c>)
 800d12c:	4293      	cmp	r3, r2
 800d12e:	d003      	beq.n	800d138 <TIM_OC2_SetConfig+0xac>
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	4a1a      	ldr	r2, [pc, #104]	; (800d19c <TIM_OC2_SetConfig+0x110>)
 800d134:	4293      	cmp	r3, r2
 800d136:	d113      	bne.n	800d160 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d138:	693b      	ldr	r3, [r7, #16]
 800d13a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d13e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d140:	693b      	ldr	r3, [r7, #16]
 800d142:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d146:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	695b      	ldr	r3, [r3, #20]
 800d14c:	009b      	lsls	r3, r3, #2
 800d14e:	693a      	ldr	r2, [r7, #16]
 800d150:	4313      	orrs	r3, r2
 800d152:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	699b      	ldr	r3, [r3, #24]
 800d158:	009b      	lsls	r3, r3, #2
 800d15a:	693a      	ldr	r2, [r7, #16]
 800d15c:	4313      	orrs	r3, r2
 800d15e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	693a      	ldr	r2, [r7, #16]
 800d164:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	68fa      	ldr	r2, [r7, #12]
 800d16a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	685a      	ldr	r2, [r3, #4]
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	697a      	ldr	r2, [r7, #20]
 800d178:	621a      	str	r2, [r3, #32]
}
 800d17a:	bf00      	nop
 800d17c:	371c      	adds	r7, #28
 800d17e:	46bd      	mov	sp, r7
 800d180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d184:	4770      	bx	lr
 800d186:	bf00      	nop
 800d188:	feff8fff 	.word	0xfeff8fff
 800d18c:	40010000 	.word	0x40010000
 800d190:	40010400 	.word	0x40010400
 800d194:	40014000 	.word	0x40014000
 800d198:	40014400 	.word	0x40014400
 800d19c:	40014800 	.word	0x40014800

0800d1a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d1a0:	b480      	push	{r7}
 800d1a2:	b087      	sub	sp, #28
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
 800d1a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6a1b      	ldr	r3, [r3, #32]
 800d1ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6a1b      	ldr	r3, [r3, #32]
 800d1ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	685b      	ldr	r3, [r3, #4]
 800d1c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	69db      	ldr	r3, [r3, #28]
 800d1c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d1c8:	68fa      	ldr	r2, [r7, #12]
 800d1ca:	4b33      	ldr	r3, [pc, #204]	; (800d298 <TIM_OC3_SetConfig+0xf8>)
 800d1cc:	4013      	ands	r3, r2
 800d1ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	f023 0303 	bic.w	r3, r3, #3
 800d1d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	68fa      	ldr	r2, [r7, #12]
 800d1de:	4313      	orrs	r3, r2
 800d1e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d1e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	689b      	ldr	r3, [r3, #8]
 800d1ee:	021b      	lsls	r3, r3, #8
 800d1f0:	697a      	ldr	r2, [r7, #20]
 800d1f2:	4313      	orrs	r3, r2
 800d1f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	4a28      	ldr	r2, [pc, #160]	; (800d29c <TIM_OC3_SetConfig+0xfc>)
 800d1fa:	4293      	cmp	r3, r2
 800d1fc:	d003      	beq.n	800d206 <TIM_OC3_SetConfig+0x66>
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	4a27      	ldr	r2, [pc, #156]	; (800d2a0 <TIM_OC3_SetConfig+0x100>)
 800d202:	4293      	cmp	r3, r2
 800d204:	d10d      	bne.n	800d222 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d206:	697b      	ldr	r3, [r7, #20]
 800d208:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d20c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	68db      	ldr	r3, [r3, #12]
 800d212:	021b      	lsls	r3, r3, #8
 800d214:	697a      	ldr	r2, [r7, #20]
 800d216:	4313      	orrs	r3, r2
 800d218:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d21a:	697b      	ldr	r3, [r7, #20]
 800d21c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d220:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	4a1d      	ldr	r2, [pc, #116]	; (800d29c <TIM_OC3_SetConfig+0xfc>)
 800d226:	4293      	cmp	r3, r2
 800d228:	d00f      	beq.n	800d24a <TIM_OC3_SetConfig+0xaa>
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	4a1c      	ldr	r2, [pc, #112]	; (800d2a0 <TIM_OC3_SetConfig+0x100>)
 800d22e:	4293      	cmp	r3, r2
 800d230:	d00b      	beq.n	800d24a <TIM_OC3_SetConfig+0xaa>
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	4a1b      	ldr	r2, [pc, #108]	; (800d2a4 <TIM_OC3_SetConfig+0x104>)
 800d236:	4293      	cmp	r3, r2
 800d238:	d007      	beq.n	800d24a <TIM_OC3_SetConfig+0xaa>
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	4a1a      	ldr	r2, [pc, #104]	; (800d2a8 <TIM_OC3_SetConfig+0x108>)
 800d23e:	4293      	cmp	r3, r2
 800d240:	d003      	beq.n	800d24a <TIM_OC3_SetConfig+0xaa>
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	4a19      	ldr	r2, [pc, #100]	; (800d2ac <TIM_OC3_SetConfig+0x10c>)
 800d246:	4293      	cmp	r3, r2
 800d248:	d113      	bne.n	800d272 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d24a:	693b      	ldr	r3, [r7, #16]
 800d24c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d250:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d252:	693b      	ldr	r3, [r7, #16]
 800d254:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d258:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	695b      	ldr	r3, [r3, #20]
 800d25e:	011b      	lsls	r3, r3, #4
 800d260:	693a      	ldr	r2, [r7, #16]
 800d262:	4313      	orrs	r3, r2
 800d264:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d266:	683b      	ldr	r3, [r7, #0]
 800d268:	699b      	ldr	r3, [r3, #24]
 800d26a:	011b      	lsls	r3, r3, #4
 800d26c:	693a      	ldr	r2, [r7, #16]
 800d26e:	4313      	orrs	r3, r2
 800d270:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	693a      	ldr	r2, [r7, #16]
 800d276:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	68fa      	ldr	r2, [r7, #12]
 800d27c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	685a      	ldr	r2, [r3, #4]
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	697a      	ldr	r2, [r7, #20]
 800d28a:	621a      	str	r2, [r3, #32]
}
 800d28c:	bf00      	nop
 800d28e:	371c      	adds	r7, #28
 800d290:	46bd      	mov	sp, r7
 800d292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d296:	4770      	bx	lr
 800d298:	fffeff8f 	.word	0xfffeff8f
 800d29c:	40010000 	.word	0x40010000
 800d2a0:	40010400 	.word	0x40010400
 800d2a4:	40014000 	.word	0x40014000
 800d2a8:	40014400 	.word	0x40014400
 800d2ac:	40014800 	.word	0x40014800

0800d2b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d2b0:	b480      	push	{r7}
 800d2b2:	b087      	sub	sp, #28
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
 800d2b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	6a1b      	ldr	r3, [r3, #32]
 800d2be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	6a1b      	ldr	r3, [r3, #32]
 800d2ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	685b      	ldr	r3, [r3, #4]
 800d2d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	69db      	ldr	r3, [r3, #28]
 800d2d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d2d8:	68fa      	ldr	r2, [r7, #12]
 800d2da:	4b24      	ldr	r3, [pc, #144]	; (800d36c <TIM_OC4_SetConfig+0xbc>)
 800d2dc:	4013      	ands	r3, r2
 800d2de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d2e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	021b      	lsls	r3, r3, #8
 800d2ee:	68fa      	ldr	r2, [r7, #12]
 800d2f0:	4313      	orrs	r3, r2
 800d2f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d2f4:	693b      	ldr	r3, [r7, #16]
 800d2f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d2fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	689b      	ldr	r3, [r3, #8]
 800d300:	031b      	lsls	r3, r3, #12
 800d302:	693a      	ldr	r2, [r7, #16]
 800d304:	4313      	orrs	r3, r2
 800d306:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	4a19      	ldr	r2, [pc, #100]	; (800d370 <TIM_OC4_SetConfig+0xc0>)
 800d30c:	4293      	cmp	r3, r2
 800d30e:	d00f      	beq.n	800d330 <TIM_OC4_SetConfig+0x80>
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	4a18      	ldr	r2, [pc, #96]	; (800d374 <TIM_OC4_SetConfig+0xc4>)
 800d314:	4293      	cmp	r3, r2
 800d316:	d00b      	beq.n	800d330 <TIM_OC4_SetConfig+0x80>
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	4a17      	ldr	r2, [pc, #92]	; (800d378 <TIM_OC4_SetConfig+0xc8>)
 800d31c:	4293      	cmp	r3, r2
 800d31e:	d007      	beq.n	800d330 <TIM_OC4_SetConfig+0x80>
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	4a16      	ldr	r2, [pc, #88]	; (800d37c <TIM_OC4_SetConfig+0xcc>)
 800d324:	4293      	cmp	r3, r2
 800d326:	d003      	beq.n	800d330 <TIM_OC4_SetConfig+0x80>
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	4a15      	ldr	r2, [pc, #84]	; (800d380 <TIM_OC4_SetConfig+0xd0>)
 800d32c:	4293      	cmp	r3, r2
 800d32e:	d109      	bne.n	800d344 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d330:	697b      	ldr	r3, [r7, #20]
 800d332:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d336:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	695b      	ldr	r3, [r3, #20]
 800d33c:	019b      	lsls	r3, r3, #6
 800d33e:	697a      	ldr	r2, [r7, #20]
 800d340:	4313      	orrs	r3, r2
 800d342:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	697a      	ldr	r2, [r7, #20]
 800d348:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	68fa      	ldr	r2, [r7, #12]
 800d34e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	685a      	ldr	r2, [r3, #4]
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	693a      	ldr	r2, [r7, #16]
 800d35c:	621a      	str	r2, [r3, #32]
}
 800d35e:	bf00      	nop
 800d360:	371c      	adds	r7, #28
 800d362:	46bd      	mov	sp, r7
 800d364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d368:	4770      	bx	lr
 800d36a:	bf00      	nop
 800d36c:	feff8fff 	.word	0xfeff8fff
 800d370:	40010000 	.word	0x40010000
 800d374:	40010400 	.word	0x40010400
 800d378:	40014000 	.word	0x40014000
 800d37c:	40014400 	.word	0x40014400
 800d380:	40014800 	.word	0x40014800

0800d384 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d384:	b480      	push	{r7}
 800d386:	b087      	sub	sp, #28
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
 800d38c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6a1b      	ldr	r3, [r3, #32]
 800d392:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6a1b      	ldr	r3, [r3, #32]
 800d39e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	685b      	ldr	r3, [r3, #4]
 800d3a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d3ac:	68fa      	ldr	r2, [r7, #12]
 800d3ae:	4b21      	ldr	r3, [pc, #132]	; (800d434 <TIM_OC5_SetConfig+0xb0>)
 800d3b0:	4013      	ands	r3, r2
 800d3b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d3b4:	683b      	ldr	r3, [r7, #0]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	68fa      	ldr	r2, [r7, #12]
 800d3ba:	4313      	orrs	r3, r2
 800d3bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d3c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	689b      	ldr	r3, [r3, #8]
 800d3ca:	041b      	lsls	r3, r3, #16
 800d3cc:	693a      	ldr	r2, [r7, #16]
 800d3ce:	4313      	orrs	r3, r2
 800d3d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	4a18      	ldr	r2, [pc, #96]	; (800d438 <TIM_OC5_SetConfig+0xb4>)
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	d00f      	beq.n	800d3fa <TIM_OC5_SetConfig+0x76>
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	4a17      	ldr	r2, [pc, #92]	; (800d43c <TIM_OC5_SetConfig+0xb8>)
 800d3de:	4293      	cmp	r3, r2
 800d3e0:	d00b      	beq.n	800d3fa <TIM_OC5_SetConfig+0x76>
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	4a16      	ldr	r2, [pc, #88]	; (800d440 <TIM_OC5_SetConfig+0xbc>)
 800d3e6:	4293      	cmp	r3, r2
 800d3e8:	d007      	beq.n	800d3fa <TIM_OC5_SetConfig+0x76>
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	4a15      	ldr	r2, [pc, #84]	; (800d444 <TIM_OC5_SetConfig+0xc0>)
 800d3ee:	4293      	cmp	r3, r2
 800d3f0:	d003      	beq.n	800d3fa <TIM_OC5_SetConfig+0x76>
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	4a14      	ldr	r2, [pc, #80]	; (800d448 <TIM_OC5_SetConfig+0xc4>)
 800d3f6:	4293      	cmp	r3, r2
 800d3f8:	d109      	bne.n	800d40e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d3fa:	697b      	ldr	r3, [r7, #20]
 800d3fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d400:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	695b      	ldr	r3, [r3, #20]
 800d406:	021b      	lsls	r3, r3, #8
 800d408:	697a      	ldr	r2, [r7, #20]
 800d40a:	4313      	orrs	r3, r2
 800d40c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	697a      	ldr	r2, [r7, #20]
 800d412:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	68fa      	ldr	r2, [r7, #12]
 800d418:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	685a      	ldr	r2, [r3, #4]
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	693a      	ldr	r2, [r7, #16]
 800d426:	621a      	str	r2, [r3, #32]
}
 800d428:	bf00      	nop
 800d42a:	371c      	adds	r7, #28
 800d42c:	46bd      	mov	sp, r7
 800d42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d432:	4770      	bx	lr
 800d434:	fffeff8f 	.word	0xfffeff8f
 800d438:	40010000 	.word	0x40010000
 800d43c:	40010400 	.word	0x40010400
 800d440:	40014000 	.word	0x40014000
 800d444:	40014400 	.word	0x40014400
 800d448:	40014800 	.word	0x40014800

0800d44c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d44c:	b480      	push	{r7}
 800d44e:	b087      	sub	sp, #28
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
 800d454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	6a1b      	ldr	r3, [r3, #32]
 800d45a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6a1b      	ldr	r3, [r3, #32]
 800d466:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	685b      	ldr	r3, [r3, #4]
 800d46c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d474:	68fa      	ldr	r2, [r7, #12]
 800d476:	4b22      	ldr	r3, [pc, #136]	; (800d500 <TIM_OC6_SetConfig+0xb4>)
 800d478:	4013      	ands	r3, r2
 800d47a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	021b      	lsls	r3, r3, #8
 800d482:	68fa      	ldr	r2, [r7, #12]
 800d484:	4313      	orrs	r3, r2
 800d486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d48e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	689b      	ldr	r3, [r3, #8]
 800d494:	051b      	lsls	r3, r3, #20
 800d496:	693a      	ldr	r2, [r7, #16]
 800d498:	4313      	orrs	r3, r2
 800d49a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	4a19      	ldr	r2, [pc, #100]	; (800d504 <TIM_OC6_SetConfig+0xb8>)
 800d4a0:	4293      	cmp	r3, r2
 800d4a2:	d00f      	beq.n	800d4c4 <TIM_OC6_SetConfig+0x78>
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	4a18      	ldr	r2, [pc, #96]	; (800d508 <TIM_OC6_SetConfig+0xbc>)
 800d4a8:	4293      	cmp	r3, r2
 800d4aa:	d00b      	beq.n	800d4c4 <TIM_OC6_SetConfig+0x78>
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	4a17      	ldr	r2, [pc, #92]	; (800d50c <TIM_OC6_SetConfig+0xc0>)
 800d4b0:	4293      	cmp	r3, r2
 800d4b2:	d007      	beq.n	800d4c4 <TIM_OC6_SetConfig+0x78>
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	4a16      	ldr	r2, [pc, #88]	; (800d510 <TIM_OC6_SetConfig+0xc4>)
 800d4b8:	4293      	cmp	r3, r2
 800d4ba:	d003      	beq.n	800d4c4 <TIM_OC6_SetConfig+0x78>
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	4a15      	ldr	r2, [pc, #84]	; (800d514 <TIM_OC6_SetConfig+0xc8>)
 800d4c0:	4293      	cmp	r3, r2
 800d4c2:	d109      	bne.n	800d4d8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d4c4:	697b      	ldr	r3, [r7, #20]
 800d4c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d4ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	695b      	ldr	r3, [r3, #20]
 800d4d0:	029b      	lsls	r3, r3, #10
 800d4d2:	697a      	ldr	r2, [r7, #20]
 800d4d4:	4313      	orrs	r3, r2
 800d4d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	697a      	ldr	r2, [r7, #20]
 800d4dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	68fa      	ldr	r2, [r7, #12]
 800d4e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	685a      	ldr	r2, [r3, #4]
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	693a      	ldr	r2, [r7, #16]
 800d4f0:	621a      	str	r2, [r3, #32]
}
 800d4f2:	bf00      	nop
 800d4f4:	371c      	adds	r7, #28
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fc:	4770      	bx	lr
 800d4fe:	bf00      	nop
 800d500:	feff8fff 	.word	0xfeff8fff
 800d504:	40010000 	.word	0x40010000
 800d508:	40010400 	.word	0x40010400
 800d50c:	40014000 	.word	0x40014000
 800d510:	40014400 	.word	0x40014400
 800d514:	40014800 	.word	0x40014800

0800d518 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d518:	b480      	push	{r7}
 800d51a:	b087      	sub	sp, #28
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	60f8      	str	r0, [r7, #12]
 800d520:	60b9      	str	r1, [r7, #8]
 800d522:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	6a1b      	ldr	r3, [r3, #32]
 800d528:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	6a1b      	ldr	r3, [r3, #32]
 800d52e:	f023 0201 	bic.w	r2, r3, #1
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	699b      	ldr	r3, [r3, #24]
 800d53a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d53c:	693b      	ldr	r3, [r7, #16]
 800d53e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d542:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	011b      	lsls	r3, r3, #4
 800d548:	693a      	ldr	r2, [r7, #16]
 800d54a:	4313      	orrs	r3, r2
 800d54c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d54e:	697b      	ldr	r3, [r7, #20]
 800d550:	f023 030a 	bic.w	r3, r3, #10
 800d554:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d556:	697a      	ldr	r2, [r7, #20]
 800d558:	68bb      	ldr	r3, [r7, #8]
 800d55a:	4313      	orrs	r3, r2
 800d55c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	693a      	ldr	r2, [r7, #16]
 800d562:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	697a      	ldr	r2, [r7, #20]
 800d568:	621a      	str	r2, [r3, #32]
}
 800d56a:	bf00      	nop
 800d56c:	371c      	adds	r7, #28
 800d56e:	46bd      	mov	sp, r7
 800d570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d574:	4770      	bx	lr

0800d576 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d576:	b480      	push	{r7}
 800d578:	b087      	sub	sp, #28
 800d57a:	af00      	add	r7, sp, #0
 800d57c:	60f8      	str	r0, [r7, #12]
 800d57e:	60b9      	str	r1, [r7, #8]
 800d580:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	6a1b      	ldr	r3, [r3, #32]
 800d586:	f023 0210 	bic.w	r2, r3, #16
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	699b      	ldr	r3, [r3, #24]
 800d592:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	6a1b      	ldr	r3, [r3, #32]
 800d598:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d59a:	697b      	ldr	r3, [r7, #20]
 800d59c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d5a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	031b      	lsls	r3, r3, #12
 800d5a6:	697a      	ldr	r2, [r7, #20]
 800d5a8:	4313      	orrs	r3, r2
 800d5aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d5ac:	693b      	ldr	r3, [r7, #16]
 800d5ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d5b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	011b      	lsls	r3, r3, #4
 800d5b8:	693a      	ldr	r2, [r7, #16]
 800d5ba:	4313      	orrs	r3, r2
 800d5bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	697a      	ldr	r2, [r7, #20]
 800d5c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	693a      	ldr	r2, [r7, #16]
 800d5c8:	621a      	str	r2, [r3, #32]
}
 800d5ca:	bf00      	nop
 800d5cc:	371c      	adds	r7, #28
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d4:	4770      	bx	lr
	...

0800d5d8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d5d8:	b480      	push	{r7}
 800d5da:	b085      	sub	sp, #20
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
 800d5e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	689b      	ldr	r3, [r3, #8]
 800d5e6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d5e8:	68fa      	ldr	r2, [r7, #12]
 800d5ea:	4b09      	ldr	r3, [pc, #36]	; (800d610 <TIM_ITRx_SetConfig+0x38>)
 800d5ec:	4013      	ands	r3, r2
 800d5ee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d5f0:	683a      	ldr	r2, [r7, #0]
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	4313      	orrs	r3, r2
 800d5f6:	f043 0307 	orr.w	r3, r3, #7
 800d5fa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	68fa      	ldr	r2, [r7, #12]
 800d600:	609a      	str	r2, [r3, #8]
}
 800d602:	bf00      	nop
 800d604:	3714      	adds	r7, #20
 800d606:	46bd      	mov	sp, r7
 800d608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60c:	4770      	bx	lr
 800d60e:	bf00      	nop
 800d610:	ffcfff8f 	.word	0xffcfff8f

0800d614 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d614:	b480      	push	{r7}
 800d616:	b087      	sub	sp, #28
 800d618:	af00      	add	r7, sp, #0
 800d61a:	60f8      	str	r0, [r7, #12]
 800d61c:	60b9      	str	r1, [r7, #8]
 800d61e:	607a      	str	r2, [r7, #4]
 800d620:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	689b      	ldr	r3, [r3, #8]
 800d626:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d628:	697b      	ldr	r3, [r7, #20]
 800d62a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d62e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	021a      	lsls	r2, r3, #8
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	431a      	orrs	r2, r3
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	4313      	orrs	r3, r2
 800d63c:	697a      	ldr	r2, [r7, #20]
 800d63e:	4313      	orrs	r3, r2
 800d640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	697a      	ldr	r2, [r7, #20]
 800d646:	609a      	str	r2, [r3, #8]
}
 800d648:	bf00      	nop
 800d64a:	371c      	adds	r7, #28
 800d64c:	46bd      	mov	sp, r7
 800d64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d652:	4770      	bx	lr

0800d654 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d654:	b480      	push	{r7}
 800d656:	b087      	sub	sp, #28
 800d658:	af00      	add	r7, sp, #0
 800d65a:	60f8      	str	r0, [r7, #12]
 800d65c:	60b9      	str	r1, [r7, #8]
 800d65e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	f003 031f 	and.w	r3, r3, #31
 800d666:	2201      	movs	r2, #1
 800d668:	fa02 f303 	lsl.w	r3, r2, r3
 800d66c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	6a1a      	ldr	r2, [r3, #32]
 800d672:	697b      	ldr	r3, [r7, #20]
 800d674:	43db      	mvns	r3, r3
 800d676:	401a      	ands	r2, r3
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	6a1a      	ldr	r2, [r3, #32]
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	f003 031f 	and.w	r3, r3, #31
 800d686:	6879      	ldr	r1, [r7, #4]
 800d688:	fa01 f303 	lsl.w	r3, r1, r3
 800d68c:	431a      	orrs	r2, r3
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	621a      	str	r2, [r3, #32]
}
 800d692:	bf00      	nop
 800d694:	371c      	adds	r7, #28
 800d696:	46bd      	mov	sp, r7
 800d698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69c:	4770      	bx	lr
	...

0800d6a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d6a0:	b480      	push	{r7}
 800d6a2:	b085      	sub	sp, #20
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
 800d6a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d6b0:	2b01      	cmp	r3, #1
 800d6b2:	d101      	bne.n	800d6b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d6b4:	2302      	movs	r3, #2
 800d6b6:	e077      	b.n	800d7a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2201      	movs	r2, #1
 800d6bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2202      	movs	r2, #2
 800d6c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	685b      	ldr	r3, [r3, #4]
 800d6ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	689b      	ldr	r3, [r3, #8]
 800d6d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	4a35      	ldr	r2, [pc, #212]	; (800d7b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d6de:	4293      	cmp	r3, r2
 800d6e0:	d004      	beq.n	800d6ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	4a34      	ldr	r2, [pc, #208]	; (800d7b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d6e8:	4293      	cmp	r3, r2
 800d6ea:	d108      	bne.n	800d6fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d6f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	685b      	ldr	r3, [r3, #4]
 800d6f8:	68fa      	ldr	r2, [r7, #12]
 800d6fa:	4313      	orrs	r3, r2
 800d6fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d704:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	68fa      	ldr	r2, [r7, #12]
 800d70c:	4313      	orrs	r3, r2
 800d70e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	68fa      	ldr	r2, [r7, #12]
 800d716:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	4a25      	ldr	r2, [pc, #148]	; (800d7b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d71e:	4293      	cmp	r3, r2
 800d720:	d02c      	beq.n	800d77c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d72a:	d027      	beq.n	800d77c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	4a22      	ldr	r2, [pc, #136]	; (800d7bc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800d732:	4293      	cmp	r3, r2
 800d734:	d022      	beq.n	800d77c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	4a21      	ldr	r2, [pc, #132]	; (800d7c0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800d73c:	4293      	cmp	r3, r2
 800d73e:	d01d      	beq.n	800d77c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	4a1f      	ldr	r2, [pc, #124]	; (800d7c4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800d746:	4293      	cmp	r3, r2
 800d748:	d018      	beq.n	800d77c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	4a1a      	ldr	r2, [pc, #104]	; (800d7b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d750:	4293      	cmp	r3, r2
 800d752:	d013      	beq.n	800d77c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	4a1b      	ldr	r2, [pc, #108]	; (800d7c8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800d75a:	4293      	cmp	r3, r2
 800d75c:	d00e      	beq.n	800d77c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	4a1a      	ldr	r2, [pc, #104]	; (800d7cc <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800d764:	4293      	cmp	r3, r2
 800d766:	d009      	beq.n	800d77c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	4a18      	ldr	r2, [pc, #96]	; (800d7d0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800d76e:	4293      	cmp	r3, r2
 800d770:	d004      	beq.n	800d77c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	4a17      	ldr	r2, [pc, #92]	; (800d7d4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800d778:	4293      	cmp	r3, r2
 800d77a:	d10c      	bne.n	800d796 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d77c:	68bb      	ldr	r3, [r7, #8]
 800d77e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d782:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	689b      	ldr	r3, [r3, #8]
 800d788:	68ba      	ldr	r2, [r7, #8]
 800d78a:	4313      	orrs	r3, r2
 800d78c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	68ba      	ldr	r2, [r7, #8]
 800d794:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	2201      	movs	r2, #1
 800d79a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d7a6:	2300      	movs	r3, #0
}
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	3714      	adds	r7, #20
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b2:	4770      	bx	lr
 800d7b4:	40010000 	.word	0x40010000
 800d7b8:	40010400 	.word	0x40010400
 800d7bc:	40000400 	.word	0x40000400
 800d7c0:	40000800 	.word	0x40000800
 800d7c4:	40000c00 	.word	0x40000c00
 800d7c8:	40001800 	.word	0x40001800
 800d7cc:	40014000 	.word	0x40014000
 800d7d0:	4000e000 	.word	0x4000e000
 800d7d4:	4000e400 	.word	0x4000e400

0800d7d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d7d8:	b480      	push	{r7}
 800d7da:	b085      	sub	sp, #20
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
 800d7e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d7ec:	2b01      	cmp	r3, #1
 800d7ee:	d101      	bne.n	800d7f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d7f0:	2302      	movs	r3, #2
 800d7f2:	e087      	b.n	800d904 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	2201      	movs	r2, #1
 800d7f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	68db      	ldr	r3, [r3, #12]
 800d806:	4313      	orrs	r3, r2
 800d808:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	689b      	ldr	r3, [r3, #8]
 800d814:	4313      	orrs	r3, r2
 800d816:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	685b      	ldr	r3, [r3, #4]
 800d822:	4313      	orrs	r3, r2
 800d824:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	4313      	orrs	r3, r2
 800d832:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	691b      	ldr	r3, [r3, #16]
 800d83e:	4313      	orrs	r3, r2
 800d840:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	695b      	ldr	r3, [r3, #20]
 800d84c:	4313      	orrs	r3, r2
 800d84e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d85a:	4313      	orrs	r3, r2
 800d85c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d864:	683b      	ldr	r3, [r7, #0]
 800d866:	699b      	ldr	r3, [r3, #24]
 800d868:	041b      	lsls	r3, r3, #16
 800d86a:	4313      	orrs	r3, r2
 800d86c:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	4a27      	ldr	r2, [pc, #156]	; (800d910 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800d874:	4293      	cmp	r3, r2
 800d876:	d004      	beq.n	800d882 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	4a25      	ldr	r2, [pc, #148]	; (800d914 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800d87e:	4293      	cmp	r3, r2
 800d880:	d106      	bne.n	800d890 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	69db      	ldr	r3, [r3, #28]
 800d88c:	4313      	orrs	r3, r2
 800d88e:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	4a1e      	ldr	r2, [pc, #120]	; (800d910 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800d896:	4293      	cmp	r3, r2
 800d898:	d004      	beq.n	800d8a4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	4a1d      	ldr	r2, [pc, #116]	; (800d914 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800d8a0:	4293      	cmp	r3, r2
 800d8a2:	d126      	bne.n	800d8f2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8ae:	051b      	lsls	r3, r3, #20
 800d8b0:	4313      	orrs	r3, r2
 800d8b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	6a1b      	ldr	r3, [r3, #32]
 800d8be:	4313      	orrs	r3, r2
 800d8c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8cc:	4313      	orrs	r3, r2
 800d8ce:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	4a0e      	ldr	r2, [pc, #56]	; (800d910 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800d8d6:	4293      	cmp	r3, r2
 800d8d8:	d004      	beq.n	800d8e4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	4a0d      	ldr	r2, [pc, #52]	; (800d914 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800d8e0:	4293      	cmp	r3, r2
 800d8e2:	d106      	bne.n	800d8f2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8ee:	4313      	orrs	r3, r2
 800d8f0:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	68fa      	ldr	r2, [r7, #12]
 800d8f8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d902:	2300      	movs	r3, #0
}
 800d904:	4618      	mov	r0, r3
 800d906:	3714      	adds	r7, #20
 800d908:	46bd      	mov	sp, r7
 800d90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90e:	4770      	bx	lr
 800d910:	40010000 	.word	0x40010000
 800d914:	40010400 	.word	0x40010400

0800d918 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d918:	b480      	push	{r7}
 800d91a:	b083      	sub	sp, #12
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d920:	bf00      	nop
 800d922:	370c      	adds	r7, #12
 800d924:	46bd      	mov	sp, r7
 800d926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92a:	4770      	bx	lr

0800d92c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d92c:	b480      	push	{r7}
 800d92e:	b083      	sub	sp, #12
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d934:	bf00      	nop
 800d936:	370c      	adds	r7, #12
 800d938:	46bd      	mov	sp, r7
 800d93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93e:	4770      	bx	lr

0800d940 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d940:	b480      	push	{r7}
 800d942:	b083      	sub	sp, #12
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d948:	bf00      	nop
 800d94a:	370c      	adds	r7, #12
 800d94c:	46bd      	mov	sp, r7
 800d94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d952:	4770      	bx	lr

0800d954 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b082      	sub	sp, #8
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d101      	bne.n	800d966 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d962:	2301      	movs	r3, #1
 800d964:	e042      	b.n	800d9ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d106      	bne.n	800d97e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	2200      	movs	r2, #0
 800d974:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d978:	6878      	ldr	r0, [r7, #4]
 800d97a:	f7f7 fe3f 	bl	80055fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	2224      	movs	r2, #36	; 0x24
 800d982:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	681a      	ldr	r2, [r3, #0]
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	f022 0201 	bic.w	r2, r2, #1
 800d994:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d996:	6878      	ldr	r0, [r7, #4]
 800d998:	f000 fdaa 	bl	800e4f0 <UART_SetConfig>
 800d99c:	4603      	mov	r3, r0
 800d99e:	2b01      	cmp	r3, #1
 800d9a0:	d101      	bne.n	800d9a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	e022      	b.n	800d9ec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d002      	beq.n	800d9b4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d9ae:	6878      	ldr	r0, [r7, #4]
 800d9b0:	f001 fc0a 	bl	800f1c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	685a      	ldr	r2, [r3, #4]
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d9c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	689a      	ldr	r2, [r3, #8]
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d9d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	681a      	ldr	r2, [r3, #0]
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	f042 0201 	orr.w	r2, r2, #1
 800d9e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d9e4:	6878      	ldr	r0, [r7, #4]
 800d9e6:	f001 fc91 	bl	800f30c <UART_CheckIdleState>
 800d9ea:	4603      	mov	r3, r0
}
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	3708      	adds	r7, #8
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd80      	pop	{r7, pc}

0800d9f4 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b082      	sub	sp, #8
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d101      	bne.n	800da06 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800da02:	2301      	movs	r3, #1
 800da04:	e031      	b.n	800da6a <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2224      	movs	r2, #36	; 0x24
 800da0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	681a      	ldr	r2, [r3, #0]
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	f022 0201 	bic.w	r2, r2, #1
 800da1c:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	2200      	movs	r2, #0
 800da24:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	2200      	movs	r2, #0
 800da2c:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	2200      	movs	r2, #0
 800da34:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800da36:	6878      	ldr	r0, [r7, #4]
 800da38:	f7f7 ff38 	bl	80058ac <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	2200      	movs	r2, #0
 800da40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->gState = HAL_UART_STATE_RESET;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2200      	movs	r2, #0
 800da48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2200      	movs	r2, #0
 800da50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2200      	movs	r2, #0
 800da58:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	2200      	movs	r2, #0
 800da5e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	2200      	movs	r2, #0
 800da64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800da68:	2300      	movs	r3, #0
}
 800da6a:	4618      	mov	r0, r3
 800da6c:	3708      	adds	r7, #8
 800da6e:	46bd      	mov	sp, r7
 800da70:	bd80      	pop	{r7, pc}

0800da72 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800da72:	b580      	push	{r7, lr}
 800da74:	b08a      	sub	sp, #40	; 0x28
 800da76:	af02      	add	r7, sp, #8
 800da78:	60f8      	str	r0, [r7, #12]
 800da7a:	60b9      	str	r1, [r7, #8]
 800da7c:	603b      	str	r3, [r7, #0]
 800da7e:	4613      	mov	r3, r2
 800da80:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da88:	2b20      	cmp	r3, #32
 800da8a:	d17b      	bne.n	800db84 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d002      	beq.n	800da98 <HAL_UART_Transmit+0x26>
 800da92:	88fb      	ldrh	r3, [r7, #6]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d101      	bne.n	800da9c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800da98:	2301      	movs	r3, #1
 800da9a:	e074      	b.n	800db86 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	2200      	movs	r2, #0
 800daa0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	2221      	movs	r2, #33	; 0x21
 800daa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800daac:	f7f8 f95c 	bl	8005d68 <HAL_GetTick>
 800dab0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	88fa      	ldrh	r2, [r7, #6]
 800dab6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	88fa      	ldrh	r2, [r7, #6]
 800dabe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	689b      	ldr	r3, [r3, #8]
 800dac6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800daca:	d108      	bne.n	800dade <HAL_UART_Transmit+0x6c>
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	691b      	ldr	r3, [r3, #16]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d104      	bne.n	800dade <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800dad4:	2300      	movs	r3, #0
 800dad6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800dad8:	68bb      	ldr	r3, [r7, #8]
 800dada:	61bb      	str	r3, [r7, #24]
 800dadc:	e003      	b.n	800dae6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800dade:	68bb      	ldr	r3, [r7, #8]
 800dae0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800dae2:	2300      	movs	r3, #0
 800dae4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800dae6:	e030      	b.n	800db4a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	9300      	str	r3, [sp, #0]
 800daec:	697b      	ldr	r3, [r7, #20]
 800daee:	2200      	movs	r2, #0
 800daf0:	2180      	movs	r1, #128	; 0x80
 800daf2:	68f8      	ldr	r0, [r7, #12]
 800daf4:	f001 fcb4 	bl	800f460 <UART_WaitOnFlagUntilTimeout>
 800daf8:	4603      	mov	r3, r0
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d005      	beq.n	800db0a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	2220      	movs	r2, #32
 800db02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800db06:	2303      	movs	r3, #3
 800db08:	e03d      	b.n	800db86 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800db0a:	69fb      	ldr	r3, [r7, #28]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d10b      	bne.n	800db28 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800db10:	69bb      	ldr	r3, [r7, #24]
 800db12:	881b      	ldrh	r3, [r3, #0]
 800db14:	461a      	mov	r2, r3
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800db1e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800db20:	69bb      	ldr	r3, [r7, #24]
 800db22:	3302      	adds	r3, #2
 800db24:	61bb      	str	r3, [r7, #24]
 800db26:	e007      	b.n	800db38 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800db28:	69fb      	ldr	r3, [r7, #28]
 800db2a:	781a      	ldrb	r2, [r3, #0]
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800db32:	69fb      	ldr	r3, [r7, #28]
 800db34:	3301      	adds	r3, #1
 800db36:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800db3e:	b29b      	uxth	r3, r3
 800db40:	3b01      	subs	r3, #1
 800db42:	b29a      	uxth	r2, r3
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800db50:	b29b      	uxth	r3, r3
 800db52:	2b00      	cmp	r3, #0
 800db54:	d1c8      	bne.n	800dae8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	9300      	str	r3, [sp, #0]
 800db5a:	697b      	ldr	r3, [r7, #20]
 800db5c:	2200      	movs	r2, #0
 800db5e:	2140      	movs	r1, #64	; 0x40
 800db60:	68f8      	ldr	r0, [r7, #12]
 800db62:	f001 fc7d 	bl	800f460 <UART_WaitOnFlagUntilTimeout>
 800db66:	4603      	mov	r3, r0
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d005      	beq.n	800db78 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	2220      	movs	r2, #32
 800db70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800db74:	2303      	movs	r3, #3
 800db76:	e006      	b.n	800db86 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	2220      	movs	r2, #32
 800db7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800db80:	2300      	movs	r3, #0
 800db82:	e000      	b.n	800db86 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800db84:	2302      	movs	r3, #2
  }
}
 800db86:	4618      	mov	r0, r3
 800db88:	3720      	adds	r7, #32
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bd80      	pop	{r7, pc}
	...

0800db90 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b08a      	sub	sp, #40	; 0x28
 800db94:	af00      	add	r7, sp, #0
 800db96:	60f8      	str	r0, [r7, #12]
 800db98:	60b9      	str	r1, [r7, #8]
 800db9a:	4613      	mov	r3, r2
 800db9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dba4:	2b20      	cmp	r3, #32
 800dba6:	d167      	bne.n	800dc78 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800dba8:	68bb      	ldr	r3, [r7, #8]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d002      	beq.n	800dbb4 <HAL_UART_Transmit_DMA+0x24>
 800dbae:	88fb      	ldrh	r3, [r7, #6]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d101      	bne.n	800dbb8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	e060      	b.n	800dc7a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	68ba      	ldr	r2, [r7, #8]
 800dbbc:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	88fa      	ldrh	r2, [r7, #6]
 800dbc2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	88fa      	ldrh	r2, [r7, #6]
 800dbca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	2221      	movs	r2, #33	; 0x21
 800dbda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d028      	beq.n	800dc38 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dbea:	4a26      	ldr	r2, [pc, #152]	; (800dc84 <HAL_UART_Transmit_DMA+0xf4>)
 800dbec:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dbf2:	4a25      	ldr	r2, [pc, #148]	; (800dc88 <HAL_UART_Transmit_DMA+0xf8>)
 800dbf4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dbfa:	4a24      	ldr	r2, [pc, #144]	; (800dc8c <HAL_UART_Transmit_DMA+0xfc>)
 800dbfc:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc02:	2200      	movs	r2, #0
 800dc04:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc0e:	4619      	mov	r1, r3
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	3328      	adds	r3, #40	; 0x28
 800dc16:	461a      	mov	r2, r3
 800dc18:	88fb      	ldrh	r3, [r7, #6]
 800dc1a:	f7f8 ff01 	bl	8006a20 <HAL_DMA_Start_IT>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d009      	beq.n	800dc38 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	2210      	movs	r2, #16
 800dc28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	2220      	movs	r2, #32
 800dc30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800dc34:	2301      	movs	r3, #1
 800dc36:	e020      	b.n	800dc7a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	2240      	movs	r2, #64	; 0x40
 800dc3e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	3308      	adds	r3, #8
 800dc46:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc48:	697b      	ldr	r3, [r7, #20]
 800dc4a:	e853 3f00 	ldrex	r3, [r3]
 800dc4e:	613b      	str	r3, [r7, #16]
   return(result);
 800dc50:	693b      	ldr	r3, [r7, #16]
 800dc52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc56:	627b      	str	r3, [r7, #36]	; 0x24
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	3308      	adds	r3, #8
 800dc5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc60:	623a      	str	r2, [r7, #32]
 800dc62:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc64:	69f9      	ldr	r1, [r7, #28]
 800dc66:	6a3a      	ldr	r2, [r7, #32]
 800dc68:	e841 2300 	strex	r3, r2, [r1]
 800dc6c:	61bb      	str	r3, [r7, #24]
   return(result);
 800dc6e:	69bb      	ldr	r3, [r7, #24]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d1e5      	bne.n	800dc40 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800dc74:	2300      	movs	r3, #0
 800dc76:	e000      	b.n	800dc7a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800dc78:	2302      	movs	r3, #2
  }
}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	3728      	adds	r7, #40	; 0x28
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}
 800dc82:	bf00      	nop
 800dc84:	0800f7cd 	.word	0x0800f7cd
 800dc88:	0800f863 	.word	0x0800f863
 800dc8c:	0800f9e5 	.word	0x0800f9e5

0800dc90 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b08a      	sub	sp, #40	; 0x28
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	60f8      	str	r0, [r7, #12]
 800dc98:	60b9      	str	r1, [r7, #8]
 800dc9a:	4613      	mov	r3, r2
 800dc9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dca4:	2b20      	cmp	r3, #32
 800dca6:	d137      	bne.n	800dd18 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800dca8:	68bb      	ldr	r3, [r7, #8]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d002      	beq.n	800dcb4 <HAL_UART_Receive_DMA+0x24>
 800dcae:	88fb      	ldrh	r3, [r7, #6]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d101      	bne.n	800dcb8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800dcb4:	2301      	movs	r3, #1
 800dcb6:	e030      	b.n	800dd1a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	2200      	movs	r2, #0
 800dcbc:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	4a18      	ldr	r2, [pc, #96]	; (800dd24 <HAL_UART_Receive_DMA+0x94>)
 800dcc4:	4293      	cmp	r3, r2
 800dcc6:	d01f      	beq.n	800dd08 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	685b      	ldr	r3, [r3, #4]
 800dcce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d018      	beq.n	800dd08 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcdc:	697b      	ldr	r3, [r7, #20]
 800dcde:	e853 3f00 	ldrex	r3, [r3]
 800dce2:	613b      	str	r3, [r7, #16]
   return(result);
 800dce4:	693b      	ldr	r3, [r7, #16]
 800dce6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dcea:	627b      	str	r3, [r7, #36]	; 0x24
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	461a      	mov	r2, r3
 800dcf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcf4:	623b      	str	r3, [r7, #32]
 800dcf6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcf8:	69f9      	ldr	r1, [r7, #28]
 800dcfa:	6a3a      	ldr	r2, [r7, #32]
 800dcfc:	e841 2300 	strex	r3, r2, [r1]
 800dd00:	61bb      	str	r3, [r7, #24]
   return(result);
 800dd02:	69bb      	ldr	r3, [r7, #24]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d1e6      	bne.n	800dcd6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800dd08:	88fb      	ldrh	r3, [r7, #6]
 800dd0a:	461a      	mov	r2, r3
 800dd0c:	68b9      	ldr	r1, [r7, #8]
 800dd0e:	68f8      	ldr	r0, [r7, #12]
 800dd10:	f001 fc0e 	bl	800f530 <UART_Start_Receive_DMA>
 800dd14:	4603      	mov	r3, r0
 800dd16:	e000      	b.n	800dd1a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800dd18:	2302      	movs	r3, #2
  }
}
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	3728      	adds	r7, #40	; 0x28
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}
 800dd22:	bf00      	nop
 800dd24:	58000c00 	.word	0x58000c00

0800dd28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b0ba      	sub	sp, #232	; 0xe8
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	69db      	ldr	r3, [r3, #28]
 800dd36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	689b      	ldr	r3, [r3, #8]
 800dd4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800dd4e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800dd52:	f640 030f 	movw	r3, #2063	; 0x80f
 800dd56:	4013      	ands	r3, r2
 800dd58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800dd5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d11b      	bne.n	800dd9c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dd64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd68:	f003 0320 	and.w	r3, r3, #32
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d015      	beq.n	800dd9c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dd70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dd74:	f003 0320 	and.w	r3, r3, #32
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d105      	bne.n	800dd88 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dd7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dd80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d009      	beq.n	800dd9c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	f000 8377 	beq.w	800e480 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd96:	6878      	ldr	r0, [r7, #4]
 800dd98:	4798      	blx	r3
      }
      return;
 800dd9a:	e371      	b.n	800e480 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800dd9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	f000 8123 	beq.w	800dfec <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800dda6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ddaa:	4b8d      	ldr	r3, [pc, #564]	; (800dfe0 <HAL_UART_IRQHandler+0x2b8>)
 800ddac:	4013      	ands	r3, r2
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d106      	bne.n	800ddc0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ddb2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ddb6:	4b8b      	ldr	r3, [pc, #556]	; (800dfe4 <HAL_UART_IRQHandler+0x2bc>)
 800ddb8:	4013      	ands	r3, r2
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	f000 8116 	beq.w	800dfec <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ddc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ddc4:	f003 0301 	and.w	r3, r3, #1
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d011      	beq.n	800ddf0 <HAL_UART_IRQHandler+0xc8>
 800ddcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ddd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d00b      	beq.n	800ddf0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	2201      	movs	r2, #1
 800ddde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dde6:	f043 0201 	orr.w	r2, r3, #1
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ddf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ddf4:	f003 0302 	and.w	r3, r3, #2
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d011      	beq.n	800de20 <HAL_UART_IRQHandler+0xf8>
 800ddfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800de00:	f003 0301 	and.w	r3, r3, #1
 800de04:	2b00      	cmp	r3, #0
 800de06:	d00b      	beq.n	800de20 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	2202      	movs	r2, #2
 800de0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de16:	f043 0204 	orr.w	r2, r3, #4
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800de20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de24:	f003 0304 	and.w	r3, r3, #4
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d011      	beq.n	800de50 <HAL_UART_IRQHandler+0x128>
 800de2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800de30:	f003 0301 	and.w	r3, r3, #1
 800de34:	2b00      	cmp	r3, #0
 800de36:	d00b      	beq.n	800de50 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	2204      	movs	r2, #4
 800de3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de46:	f043 0202 	orr.w	r2, r3, #2
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800de50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de54:	f003 0308 	and.w	r3, r3, #8
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d017      	beq.n	800de8c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800de5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de60:	f003 0320 	and.w	r3, r3, #32
 800de64:	2b00      	cmp	r3, #0
 800de66:	d105      	bne.n	800de74 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800de68:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800de6c:	4b5c      	ldr	r3, [pc, #368]	; (800dfe0 <HAL_UART_IRQHandler+0x2b8>)
 800de6e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800de70:	2b00      	cmp	r3, #0
 800de72:	d00b      	beq.n	800de8c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	2208      	movs	r2, #8
 800de7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de82:	f043 0208 	orr.w	r2, r3, #8
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800de8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800de94:	2b00      	cmp	r3, #0
 800de96:	d012      	beq.n	800debe <HAL_UART_IRQHandler+0x196>
 800de98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d00c      	beq.n	800debe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800deac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800deb4:	f043 0220 	orr.w	r2, r3, #32
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	f000 82dd 	beq.w	800e484 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800deca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dece:	f003 0320 	and.w	r3, r3, #32
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d013      	beq.n	800defe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ded6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800deda:	f003 0320 	and.w	r3, r3, #32
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d105      	bne.n	800deee <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dee2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800deea:	2b00      	cmp	r3, #0
 800deec:	d007      	beq.n	800defe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800def2:	2b00      	cmp	r3, #0
 800def4:	d003      	beq.n	800defe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800defa:	6878      	ldr	r0, [r7, #4]
 800defc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	689b      	ldr	r3, [r3, #8]
 800df0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df12:	2b40      	cmp	r3, #64	; 0x40
 800df14:	d005      	beq.n	800df22 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800df16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800df1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d054      	beq.n	800dfcc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800df22:	6878      	ldr	r0, [r7, #4]
 800df24:	f001 fbec 	bl	800f700 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	689b      	ldr	r3, [r3, #8]
 800df2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df32:	2b40      	cmp	r3, #64	; 0x40
 800df34:	d146      	bne.n	800dfc4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	3308      	adds	r3, #8
 800df3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800df44:	e853 3f00 	ldrex	r3, [r3]
 800df48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800df4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800df50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800df54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	3308      	adds	r3, #8
 800df5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800df62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800df66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800df6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800df72:	e841 2300 	strex	r3, r2, [r1]
 800df76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800df7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d1d9      	bne.n	800df36 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d017      	beq.n	800dfbc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df92:	4a15      	ldr	r2, [pc, #84]	; (800dfe8 <HAL_UART_IRQHandler+0x2c0>)
 800df94:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df9c:	4618      	mov	r0, r3
 800df9e:	f7f9 fac7 	bl	8007530 <HAL_DMA_Abort_IT>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d019      	beq.n	800dfdc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dfae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dfb0:	687a      	ldr	r2, [r7, #4]
 800dfb2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800dfb6:	4610      	mov	r0, r2
 800dfb8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dfba:	e00f      	b.n	800dfdc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800dfbc:	6878      	ldr	r0, [r7, #4]
 800dfbe:	f7f5 fef3 	bl	8003da8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dfc2:	e00b      	b.n	800dfdc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dfc4:	6878      	ldr	r0, [r7, #4]
 800dfc6:	f7f5 feef 	bl	8003da8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dfca:	e007      	b.n	800dfdc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800dfcc:	6878      	ldr	r0, [r7, #4]
 800dfce:	f7f5 feeb 	bl	8003da8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800dfda:	e253      	b.n	800e484 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dfdc:	bf00      	nop
    return;
 800dfde:	e251      	b.n	800e484 <HAL_UART_IRQHandler+0x75c>
 800dfe0:	10000001 	.word	0x10000001
 800dfe4:	04000120 	.word	0x04000120
 800dfe8:	0800fa65 	.word	0x0800fa65

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dff0:	2b01      	cmp	r3, #1
 800dff2:	f040 81e7 	bne.w	800e3c4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800dff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dffa:	f003 0310 	and.w	r3, r3, #16
 800dffe:	2b00      	cmp	r3, #0
 800e000:	f000 81e0 	beq.w	800e3c4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e008:	f003 0310 	and.w	r3, r3, #16
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	f000 81d9 	beq.w	800e3c4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	2210      	movs	r2, #16
 800e018:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	689b      	ldr	r3, [r3, #8]
 800e020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e024:	2b40      	cmp	r3, #64	; 0x40
 800e026:	f040 8151 	bne.w	800e2cc <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	4a96      	ldr	r2, [pc, #600]	; (800e28c <HAL_UART_IRQHandler+0x564>)
 800e034:	4293      	cmp	r3, r2
 800e036:	d068      	beq.n	800e10a <HAL_UART_IRQHandler+0x3e2>
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	4a93      	ldr	r2, [pc, #588]	; (800e290 <HAL_UART_IRQHandler+0x568>)
 800e042:	4293      	cmp	r3, r2
 800e044:	d061      	beq.n	800e10a <HAL_UART_IRQHandler+0x3e2>
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	4a91      	ldr	r2, [pc, #580]	; (800e294 <HAL_UART_IRQHandler+0x56c>)
 800e050:	4293      	cmp	r3, r2
 800e052:	d05a      	beq.n	800e10a <HAL_UART_IRQHandler+0x3e2>
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	4a8e      	ldr	r2, [pc, #568]	; (800e298 <HAL_UART_IRQHandler+0x570>)
 800e05e:	4293      	cmp	r3, r2
 800e060:	d053      	beq.n	800e10a <HAL_UART_IRQHandler+0x3e2>
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	4a8c      	ldr	r2, [pc, #560]	; (800e29c <HAL_UART_IRQHandler+0x574>)
 800e06c:	4293      	cmp	r3, r2
 800e06e:	d04c      	beq.n	800e10a <HAL_UART_IRQHandler+0x3e2>
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	4a89      	ldr	r2, [pc, #548]	; (800e2a0 <HAL_UART_IRQHandler+0x578>)
 800e07a:	4293      	cmp	r3, r2
 800e07c:	d045      	beq.n	800e10a <HAL_UART_IRQHandler+0x3e2>
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	4a87      	ldr	r2, [pc, #540]	; (800e2a4 <HAL_UART_IRQHandler+0x57c>)
 800e088:	4293      	cmp	r3, r2
 800e08a:	d03e      	beq.n	800e10a <HAL_UART_IRQHandler+0x3e2>
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	4a84      	ldr	r2, [pc, #528]	; (800e2a8 <HAL_UART_IRQHandler+0x580>)
 800e096:	4293      	cmp	r3, r2
 800e098:	d037      	beq.n	800e10a <HAL_UART_IRQHandler+0x3e2>
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	4a82      	ldr	r2, [pc, #520]	; (800e2ac <HAL_UART_IRQHandler+0x584>)
 800e0a4:	4293      	cmp	r3, r2
 800e0a6:	d030      	beq.n	800e10a <HAL_UART_IRQHandler+0x3e2>
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	4a7f      	ldr	r2, [pc, #508]	; (800e2b0 <HAL_UART_IRQHandler+0x588>)
 800e0b2:	4293      	cmp	r3, r2
 800e0b4:	d029      	beq.n	800e10a <HAL_UART_IRQHandler+0x3e2>
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	4a7d      	ldr	r2, [pc, #500]	; (800e2b4 <HAL_UART_IRQHandler+0x58c>)
 800e0c0:	4293      	cmp	r3, r2
 800e0c2:	d022      	beq.n	800e10a <HAL_UART_IRQHandler+0x3e2>
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	4a7a      	ldr	r2, [pc, #488]	; (800e2b8 <HAL_UART_IRQHandler+0x590>)
 800e0ce:	4293      	cmp	r3, r2
 800e0d0:	d01b      	beq.n	800e10a <HAL_UART_IRQHandler+0x3e2>
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	4a78      	ldr	r2, [pc, #480]	; (800e2bc <HAL_UART_IRQHandler+0x594>)
 800e0dc:	4293      	cmp	r3, r2
 800e0de:	d014      	beq.n	800e10a <HAL_UART_IRQHandler+0x3e2>
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	4a75      	ldr	r2, [pc, #468]	; (800e2c0 <HAL_UART_IRQHandler+0x598>)
 800e0ea:	4293      	cmp	r3, r2
 800e0ec:	d00d      	beq.n	800e10a <HAL_UART_IRQHandler+0x3e2>
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	4a73      	ldr	r2, [pc, #460]	; (800e2c4 <HAL_UART_IRQHandler+0x59c>)
 800e0f8:	4293      	cmp	r3, r2
 800e0fa:	d006      	beq.n	800e10a <HAL_UART_IRQHandler+0x3e2>
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	4a70      	ldr	r2, [pc, #448]	; (800e2c8 <HAL_UART_IRQHandler+0x5a0>)
 800e106:	4293      	cmp	r3, r2
 800e108:	d106      	bne.n	800e118 <HAL_UART_IRQHandler+0x3f0>
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	685b      	ldr	r3, [r3, #4]
 800e114:	b29b      	uxth	r3, r3
 800e116:	e005      	b.n	800e124 <HAL_UART_IRQHandler+0x3fc>
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	685b      	ldr	r3, [r3, #4]
 800e122:	b29b      	uxth	r3, r3
 800e124:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e128:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	f000 81ab 	beq.w	800e488 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e138:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e13c:	429a      	cmp	r2, r3
 800e13e:	f080 81a3 	bcs.w	800e488 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e148:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e152:	69db      	ldr	r3, [r3, #28]
 800e154:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e158:	f000 8087 	beq.w	800e26a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e164:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e168:	e853 3f00 	ldrex	r3, [r3]
 800e16c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e170:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e174:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e178:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	461a      	mov	r2, r3
 800e182:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e186:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e18a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e18e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e192:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e196:	e841 2300 	strex	r3, r2, [r1]
 800e19a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e19e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d1da      	bne.n	800e15c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	3308      	adds	r3, #8
 800e1ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e1b0:	e853 3f00 	ldrex	r3, [r3]
 800e1b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e1b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e1b8:	f023 0301 	bic.w	r3, r3, #1
 800e1bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	3308      	adds	r3, #8
 800e1c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e1ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e1ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e1d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e1d6:	e841 2300 	strex	r3, r2, [r1]
 800e1da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e1dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d1e1      	bne.n	800e1a6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	3308      	adds	r3, #8
 800e1e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e1ec:	e853 3f00 	ldrex	r3, [r3]
 800e1f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e1f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e1f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e1f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	3308      	adds	r3, #8
 800e202:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e206:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e208:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e20a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e20c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e20e:	e841 2300 	strex	r3, r2, [r1]
 800e212:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e214:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e216:	2b00      	cmp	r3, #0
 800e218:	d1e3      	bne.n	800e1e2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	2220      	movs	r2, #32
 800e21e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	2200      	movs	r2, #0
 800e226:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e22e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e230:	e853 3f00 	ldrex	r3, [r3]
 800e234:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e236:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e238:	f023 0310 	bic.w	r3, r3, #16
 800e23c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	461a      	mov	r2, r3
 800e246:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e24a:	65bb      	str	r3, [r7, #88]	; 0x58
 800e24c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e24e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e250:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e252:	e841 2300 	strex	r3, r2, [r1]
 800e256:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d1e4      	bne.n	800e228 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e264:	4618      	mov	r0, r3
 800e266:	f7f8 fe45 	bl	8006ef4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	2202      	movs	r2, #2
 800e26e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e27c:	b29b      	uxth	r3, r3
 800e27e:	1ad3      	subs	r3, r2, r3
 800e280:	b29b      	uxth	r3, r3
 800e282:	4619      	mov	r1, r3
 800e284:	6878      	ldr	r0, [r7, #4]
 800e286:	f000 f927 	bl	800e4d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e28a:	e0fd      	b.n	800e488 <HAL_UART_IRQHandler+0x760>
 800e28c:	40020010 	.word	0x40020010
 800e290:	40020028 	.word	0x40020028
 800e294:	40020040 	.word	0x40020040
 800e298:	40020058 	.word	0x40020058
 800e29c:	40020070 	.word	0x40020070
 800e2a0:	40020088 	.word	0x40020088
 800e2a4:	400200a0 	.word	0x400200a0
 800e2a8:	400200b8 	.word	0x400200b8
 800e2ac:	40020410 	.word	0x40020410
 800e2b0:	40020428 	.word	0x40020428
 800e2b4:	40020440 	.word	0x40020440
 800e2b8:	40020458 	.word	0x40020458
 800e2bc:	40020470 	.word	0x40020470
 800e2c0:	40020488 	.word	0x40020488
 800e2c4:	400204a0 	.word	0x400204a0
 800e2c8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e2d8:	b29b      	uxth	r3, r3
 800e2da:	1ad3      	subs	r3, r2, r3
 800e2dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e2e6:	b29b      	uxth	r3, r3
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	f000 80cf 	beq.w	800e48c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800e2ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	f000 80ca 	beq.w	800e48c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e300:	e853 3f00 	ldrex	r3, [r3]
 800e304:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e308:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e30c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	461a      	mov	r2, r3
 800e316:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e31a:	647b      	str	r3, [r7, #68]	; 0x44
 800e31c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e31e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e320:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e322:	e841 2300 	strex	r3, r2, [r1]
 800e326:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d1e4      	bne.n	800e2f8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	3308      	adds	r3, #8
 800e334:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e338:	e853 3f00 	ldrex	r3, [r3]
 800e33c:	623b      	str	r3, [r7, #32]
   return(result);
 800e33e:	6a3a      	ldr	r2, [r7, #32]
 800e340:	4b55      	ldr	r3, [pc, #340]	; (800e498 <HAL_UART_IRQHandler+0x770>)
 800e342:	4013      	ands	r3, r2
 800e344:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	3308      	adds	r3, #8
 800e34e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e352:	633a      	str	r2, [r7, #48]	; 0x30
 800e354:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e356:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e35a:	e841 2300 	strex	r3, r2, [r1]
 800e35e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e362:	2b00      	cmp	r3, #0
 800e364:	d1e3      	bne.n	800e32e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	2220      	movs	r2, #32
 800e36a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	2200      	movs	r2, #0
 800e372:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	2200      	movs	r2, #0
 800e378:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e380:	693b      	ldr	r3, [r7, #16]
 800e382:	e853 3f00 	ldrex	r3, [r3]
 800e386:	60fb      	str	r3, [r7, #12]
   return(result);
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	f023 0310 	bic.w	r3, r3, #16
 800e38e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	461a      	mov	r2, r3
 800e398:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e39c:	61fb      	str	r3, [r7, #28]
 800e39e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3a0:	69b9      	ldr	r1, [r7, #24]
 800e3a2:	69fa      	ldr	r2, [r7, #28]
 800e3a4:	e841 2300 	strex	r3, r2, [r1]
 800e3a8:	617b      	str	r3, [r7, #20]
   return(result);
 800e3aa:	697b      	ldr	r3, [r7, #20]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d1e4      	bne.n	800e37a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2202      	movs	r2, #2
 800e3b4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e3b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e3ba:	4619      	mov	r1, r3
 800e3bc:	6878      	ldr	r0, [r7, #4]
 800e3be:	f000 f88b 	bl	800e4d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e3c2:	e063      	b.n	800e48c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e3c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e3c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d00e      	beq.n	800e3ee <HAL_UART_IRQHandler+0x6c6>
 800e3d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e3d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d008      	beq.n	800e3ee <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e3e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e3e6:	6878      	ldr	r0, [r7, #4]
 800e3e8:	f001 fb7d 	bl	800fae6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e3ec:	e051      	b.n	800e492 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e3ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e3f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d014      	beq.n	800e424 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e3fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e3fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e402:	2b00      	cmp	r3, #0
 800e404:	d105      	bne.n	800e412 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e406:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e40a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d008      	beq.n	800e424 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e416:	2b00      	cmp	r3, #0
 800e418:	d03a      	beq.n	800e490 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e41e:	6878      	ldr	r0, [r7, #4]
 800e420:	4798      	blx	r3
    }
    return;
 800e422:	e035      	b.n	800e490 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d009      	beq.n	800e444 <HAL_UART_IRQHandler+0x71c>
 800e430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d003      	beq.n	800e444 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f001 fb27 	bl	800fa90 <UART_EndTransmit_IT>
    return;
 800e442:	e026      	b.n	800e492 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e448:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d009      	beq.n	800e464 <HAL_UART_IRQHandler+0x73c>
 800e450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e454:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d003      	beq.n	800e464 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e45c:	6878      	ldr	r0, [r7, #4]
 800e45e:	f001 fb56 	bl	800fb0e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e462:	e016      	b.n	800e492 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e468:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d010      	beq.n	800e492 <HAL_UART_IRQHandler+0x76a>
 800e470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e474:	2b00      	cmp	r3, #0
 800e476:	da0c      	bge.n	800e492 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e478:	6878      	ldr	r0, [r7, #4]
 800e47a:	f001 fb3e 	bl	800fafa <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e47e:	e008      	b.n	800e492 <HAL_UART_IRQHandler+0x76a>
      return;
 800e480:	bf00      	nop
 800e482:	e006      	b.n	800e492 <HAL_UART_IRQHandler+0x76a>
    return;
 800e484:	bf00      	nop
 800e486:	e004      	b.n	800e492 <HAL_UART_IRQHandler+0x76a>
      return;
 800e488:	bf00      	nop
 800e48a:	e002      	b.n	800e492 <HAL_UART_IRQHandler+0x76a>
      return;
 800e48c:	bf00      	nop
 800e48e:	e000      	b.n	800e492 <HAL_UART_IRQHandler+0x76a>
    return;
 800e490:	bf00      	nop
  }
}
 800e492:	37e8      	adds	r7, #232	; 0xe8
 800e494:	46bd      	mov	sp, r7
 800e496:	bd80      	pop	{r7, pc}
 800e498:	effffffe 	.word	0xeffffffe

0800e49c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e49c:	b480      	push	{r7}
 800e49e:	b083      	sub	sp, #12
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800e4a4:	bf00      	nop
 800e4a6:	370c      	adds	r7, #12
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ae:	4770      	bx	lr

0800e4b0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e4b0:	b480      	push	{r7}
 800e4b2:	b083      	sub	sp, #12
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800e4b8:	bf00      	nop
 800e4ba:	370c      	adds	r7, #12
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c2:	4770      	bx	lr

0800e4c4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e4c4:	b480      	push	{r7}
 800e4c6:	b083      	sub	sp, #12
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e4cc:	bf00      	nop
 800e4ce:	370c      	adds	r7, #12
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d6:	4770      	bx	lr

0800e4d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e4d8:	b480      	push	{r7}
 800e4da:	b083      	sub	sp, #12
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
 800e4e0:	460b      	mov	r3, r1
 800e4e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e4e4:	bf00      	nop
 800e4e6:	370c      	adds	r7, #12
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ee:	4770      	bx	lr

0800e4f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e4f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e4f4:	b092      	sub	sp, #72	; 0x48
 800e4f6:	af00      	add	r7, sp, #0
 800e4f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e500:	697b      	ldr	r3, [r7, #20]
 800e502:	689a      	ldr	r2, [r3, #8]
 800e504:	697b      	ldr	r3, [r7, #20]
 800e506:	691b      	ldr	r3, [r3, #16]
 800e508:	431a      	orrs	r2, r3
 800e50a:	697b      	ldr	r3, [r7, #20]
 800e50c:	695b      	ldr	r3, [r3, #20]
 800e50e:	431a      	orrs	r2, r3
 800e510:	697b      	ldr	r3, [r7, #20]
 800e512:	69db      	ldr	r3, [r3, #28]
 800e514:	4313      	orrs	r3, r2
 800e516:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e518:	697b      	ldr	r3, [r7, #20]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	681a      	ldr	r2, [r3, #0]
 800e51e:	4bbe      	ldr	r3, [pc, #760]	; (800e818 <UART_SetConfig+0x328>)
 800e520:	4013      	ands	r3, r2
 800e522:	697a      	ldr	r2, [r7, #20]
 800e524:	6812      	ldr	r2, [r2, #0]
 800e526:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e528:	430b      	orrs	r3, r1
 800e52a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e52c:	697b      	ldr	r3, [r7, #20]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	685b      	ldr	r3, [r3, #4]
 800e532:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e536:	697b      	ldr	r3, [r7, #20]
 800e538:	68da      	ldr	r2, [r3, #12]
 800e53a:	697b      	ldr	r3, [r7, #20]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	430a      	orrs	r2, r1
 800e540:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e542:	697b      	ldr	r3, [r7, #20]
 800e544:	699b      	ldr	r3, [r3, #24]
 800e546:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e548:	697b      	ldr	r3, [r7, #20]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	4ab3      	ldr	r2, [pc, #716]	; (800e81c <UART_SetConfig+0x32c>)
 800e54e:	4293      	cmp	r3, r2
 800e550:	d004      	beq.n	800e55c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e552:	697b      	ldr	r3, [r7, #20]
 800e554:	6a1b      	ldr	r3, [r3, #32]
 800e556:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e558:	4313      	orrs	r3, r2
 800e55a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e55c:	697b      	ldr	r3, [r7, #20]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	689a      	ldr	r2, [r3, #8]
 800e562:	4baf      	ldr	r3, [pc, #700]	; (800e820 <UART_SetConfig+0x330>)
 800e564:	4013      	ands	r3, r2
 800e566:	697a      	ldr	r2, [r7, #20]
 800e568:	6812      	ldr	r2, [r2, #0]
 800e56a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e56c:	430b      	orrs	r3, r1
 800e56e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e570:	697b      	ldr	r3, [r7, #20]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e576:	f023 010f 	bic.w	r1, r3, #15
 800e57a:	697b      	ldr	r3, [r7, #20]
 800e57c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e57e:	697b      	ldr	r3, [r7, #20]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	430a      	orrs	r2, r1
 800e584:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e586:	697b      	ldr	r3, [r7, #20]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	4aa6      	ldr	r2, [pc, #664]	; (800e824 <UART_SetConfig+0x334>)
 800e58c:	4293      	cmp	r3, r2
 800e58e:	d177      	bne.n	800e680 <UART_SetConfig+0x190>
 800e590:	4ba5      	ldr	r3, [pc, #660]	; (800e828 <UART_SetConfig+0x338>)
 800e592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e594:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e598:	2b28      	cmp	r3, #40	; 0x28
 800e59a:	d86d      	bhi.n	800e678 <UART_SetConfig+0x188>
 800e59c:	a201      	add	r2, pc, #4	; (adr r2, 800e5a4 <UART_SetConfig+0xb4>)
 800e59e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5a2:	bf00      	nop
 800e5a4:	0800e649 	.word	0x0800e649
 800e5a8:	0800e679 	.word	0x0800e679
 800e5ac:	0800e679 	.word	0x0800e679
 800e5b0:	0800e679 	.word	0x0800e679
 800e5b4:	0800e679 	.word	0x0800e679
 800e5b8:	0800e679 	.word	0x0800e679
 800e5bc:	0800e679 	.word	0x0800e679
 800e5c0:	0800e679 	.word	0x0800e679
 800e5c4:	0800e651 	.word	0x0800e651
 800e5c8:	0800e679 	.word	0x0800e679
 800e5cc:	0800e679 	.word	0x0800e679
 800e5d0:	0800e679 	.word	0x0800e679
 800e5d4:	0800e679 	.word	0x0800e679
 800e5d8:	0800e679 	.word	0x0800e679
 800e5dc:	0800e679 	.word	0x0800e679
 800e5e0:	0800e679 	.word	0x0800e679
 800e5e4:	0800e659 	.word	0x0800e659
 800e5e8:	0800e679 	.word	0x0800e679
 800e5ec:	0800e679 	.word	0x0800e679
 800e5f0:	0800e679 	.word	0x0800e679
 800e5f4:	0800e679 	.word	0x0800e679
 800e5f8:	0800e679 	.word	0x0800e679
 800e5fc:	0800e679 	.word	0x0800e679
 800e600:	0800e679 	.word	0x0800e679
 800e604:	0800e661 	.word	0x0800e661
 800e608:	0800e679 	.word	0x0800e679
 800e60c:	0800e679 	.word	0x0800e679
 800e610:	0800e679 	.word	0x0800e679
 800e614:	0800e679 	.word	0x0800e679
 800e618:	0800e679 	.word	0x0800e679
 800e61c:	0800e679 	.word	0x0800e679
 800e620:	0800e679 	.word	0x0800e679
 800e624:	0800e669 	.word	0x0800e669
 800e628:	0800e679 	.word	0x0800e679
 800e62c:	0800e679 	.word	0x0800e679
 800e630:	0800e679 	.word	0x0800e679
 800e634:	0800e679 	.word	0x0800e679
 800e638:	0800e679 	.word	0x0800e679
 800e63c:	0800e679 	.word	0x0800e679
 800e640:	0800e679 	.word	0x0800e679
 800e644:	0800e671 	.word	0x0800e671
 800e648:	2301      	movs	r3, #1
 800e64a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e64e:	e326      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e650:	2304      	movs	r3, #4
 800e652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e656:	e322      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e658:	2308      	movs	r3, #8
 800e65a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e65e:	e31e      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e660:	2310      	movs	r3, #16
 800e662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e666:	e31a      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e668:	2320      	movs	r3, #32
 800e66a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e66e:	e316      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e670:	2340      	movs	r3, #64	; 0x40
 800e672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e676:	e312      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e678:	2380      	movs	r3, #128	; 0x80
 800e67a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e67e:	e30e      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e680:	697b      	ldr	r3, [r7, #20]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	4a69      	ldr	r2, [pc, #420]	; (800e82c <UART_SetConfig+0x33c>)
 800e686:	4293      	cmp	r3, r2
 800e688:	d130      	bne.n	800e6ec <UART_SetConfig+0x1fc>
 800e68a:	4b67      	ldr	r3, [pc, #412]	; (800e828 <UART_SetConfig+0x338>)
 800e68c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e68e:	f003 0307 	and.w	r3, r3, #7
 800e692:	2b05      	cmp	r3, #5
 800e694:	d826      	bhi.n	800e6e4 <UART_SetConfig+0x1f4>
 800e696:	a201      	add	r2, pc, #4	; (adr r2, 800e69c <UART_SetConfig+0x1ac>)
 800e698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e69c:	0800e6b5 	.word	0x0800e6b5
 800e6a0:	0800e6bd 	.word	0x0800e6bd
 800e6a4:	0800e6c5 	.word	0x0800e6c5
 800e6a8:	0800e6cd 	.word	0x0800e6cd
 800e6ac:	0800e6d5 	.word	0x0800e6d5
 800e6b0:	0800e6dd 	.word	0x0800e6dd
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6ba:	e2f0      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e6bc:	2304      	movs	r3, #4
 800e6be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6c2:	e2ec      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e6c4:	2308      	movs	r3, #8
 800e6c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6ca:	e2e8      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e6cc:	2310      	movs	r3, #16
 800e6ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6d2:	e2e4      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e6d4:	2320      	movs	r3, #32
 800e6d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6da:	e2e0      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e6dc:	2340      	movs	r3, #64	; 0x40
 800e6de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6e2:	e2dc      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e6e4:	2380      	movs	r3, #128	; 0x80
 800e6e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6ea:	e2d8      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e6ec:	697b      	ldr	r3, [r7, #20]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	4a4f      	ldr	r2, [pc, #316]	; (800e830 <UART_SetConfig+0x340>)
 800e6f2:	4293      	cmp	r3, r2
 800e6f4:	d130      	bne.n	800e758 <UART_SetConfig+0x268>
 800e6f6:	4b4c      	ldr	r3, [pc, #304]	; (800e828 <UART_SetConfig+0x338>)
 800e6f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6fa:	f003 0307 	and.w	r3, r3, #7
 800e6fe:	2b05      	cmp	r3, #5
 800e700:	d826      	bhi.n	800e750 <UART_SetConfig+0x260>
 800e702:	a201      	add	r2, pc, #4	; (adr r2, 800e708 <UART_SetConfig+0x218>)
 800e704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e708:	0800e721 	.word	0x0800e721
 800e70c:	0800e729 	.word	0x0800e729
 800e710:	0800e731 	.word	0x0800e731
 800e714:	0800e739 	.word	0x0800e739
 800e718:	0800e741 	.word	0x0800e741
 800e71c:	0800e749 	.word	0x0800e749
 800e720:	2300      	movs	r3, #0
 800e722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e726:	e2ba      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e728:	2304      	movs	r3, #4
 800e72a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e72e:	e2b6      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e730:	2308      	movs	r3, #8
 800e732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e736:	e2b2      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e738:	2310      	movs	r3, #16
 800e73a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e73e:	e2ae      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e740:	2320      	movs	r3, #32
 800e742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e746:	e2aa      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e748:	2340      	movs	r3, #64	; 0x40
 800e74a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e74e:	e2a6      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e750:	2380      	movs	r3, #128	; 0x80
 800e752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e756:	e2a2      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e758:	697b      	ldr	r3, [r7, #20]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	4a35      	ldr	r2, [pc, #212]	; (800e834 <UART_SetConfig+0x344>)
 800e75e:	4293      	cmp	r3, r2
 800e760:	d130      	bne.n	800e7c4 <UART_SetConfig+0x2d4>
 800e762:	4b31      	ldr	r3, [pc, #196]	; (800e828 <UART_SetConfig+0x338>)
 800e764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e766:	f003 0307 	and.w	r3, r3, #7
 800e76a:	2b05      	cmp	r3, #5
 800e76c:	d826      	bhi.n	800e7bc <UART_SetConfig+0x2cc>
 800e76e:	a201      	add	r2, pc, #4	; (adr r2, 800e774 <UART_SetConfig+0x284>)
 800e770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e774:	0800e78d 	.word	0x0800e78d
 800e778:	0800e795 	.word	0x0800e795
 800e77c:	0800e79d 	.word	0x0800e79d
 800e780:	0800e7a5 	.word	0x0800e7a5
 800e784:	0800e7ad 	.word	0x0800e7ad
 800e788:	0800e7b5 	.word	0x0800e7b5
 800e78c:	2300      	movs	r3, #0
 800e78e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e792:	e284      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e794:	2304      	movs	r3, #4
 800e796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e79a:	e280      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e79c:	2308      	movs	r3, #8
 800e79e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7a2:	e27c      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e7a4:	2310      	movs	r3, #16
 800e7a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7aa:	e278      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e7ac:	2320      	movs	r3, #32
 800e7ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7b2:	e274      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e7b4:	2340      	movs	r3, #64	; 0x40
 800e7b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7ba:	e270      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e7bc:	2380      	movs	r3, #128	; 0x80
 800e7be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7c2:	e26c      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e7c4:	697b      	ldr	r3, [r7, #20]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	4a1b      	ldr	r2, [pc, #108]	; (800e838 <UART_SetConfig+0x348>)
 800e7ca:	4293      	cmp	r3, r2
 800e7cc:	d142      	bne.n	800e854 <UART_SetConfig+0x364>
 800e7ce:	4b16      	ldr	r3, [pc, #88]	; (800e828 <UART_SetConfig+0x338>)
 800e7d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7d2:	f003 0307 	and.w	r3, r3, #7
 800e7d6:	2b05      	cmp	r3, #5
 800e7d8:	d838      	bhi.n	800e84c <UART_SetConfig+0x35c>
 800e7da:	a201      	add	r2, pc, #4	; (adr r2, 800e7e0 <UART_SetConfig+0x2f0>)
 800e7dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7e0:	0800e7f9 	.word	0x0800e7f9
 800e7e4:	0800e801 	.word	0x0800e801
 800e7e8:	0800e809 	.word	0x0800e809
 800e7ec:	0800e811 	.word	0x0800e811
 800e7f0:	0800e83d 	.word	0x0800e83d
 800e7f4:	0800e845 	.word	0x0800e845
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7fe:	e24e      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e800:	2304      	movs	r3, #4
 800e802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e806:	e24a      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e808:	2308      	movs	r3, #8
 800e80a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e80e:	e246      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e810:	2310      	movs	r3, #16
 800e812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e816:	e242      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e818:	cfff69f3 	.word	0xcfff69f3
 800e81c:	58000c00 	.word	0x58000c00
 800e820:	11fff4ff 	.word	0x11fff4ff
 800e824:	40011000 	.word	0x40011000
 800e828:	58024400 	.word	0x58024400
 800e82c:	40004400 	.word	0x40004400
 800e830:	40004800 	.word	0x40004800
 800e834:	40004c00 	.word	0x40004c00
 800e838:	40005000 	.word	0x40005000
 800e83c:	2320      	movs	r3, #32
 800e83e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e842:	e22c      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e844:	2340      	movs	r3, #64	; 0x40
 800e846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e84a:	e228      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e84c:	2380      	movs	r3, #128	; 0x80
 800e84e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e852:	e224      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e854:	697b      	ldr	r3, [r7, #20]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	4ab1      	ldr	r2, [pc, #708]	; (800eb20 <UART_SetConfig+0x630>)
 800e85a:	4293      	cmp	r3, r2
 800e85c:	d176      	bne.n	800e94c <UART_SetConfig+0x45c>
 800e85e:	4bb1      	ldr	r3, [pc, #708]	; (800eb24 <UART_SetConfig+0x634>)
 800e860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e862:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e866:	2b28      	cmp	r3, #40	; 0x28
 800e868:	d86c      	bhi.n	800e944 <UART_SetConfig+0x454>
 800e86a:	a201      	add	r2, pc, #4	; (adr r2, 800e870 <UART_SetConfig+0x380>)
 800e86c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e870:	0800e915 	.word	0x0800e915
 800e874:	0800e945 	.word	0x0800e945
 800e878:	0800e945 	.word	0x0800e945
 800e87c:	0800e945 	.word	0x0800e945
 800e880:	0800e945 	.word	0x0800e945
 800e884:	0800e945 	.word	0x0800e945
 800e888:	0800e945 	.word	0x0800e945
 800e88c:	0800e945 	.word	0x0800e945
 800e890:	0800e91d 	.word	0x0800e91d
 800e894:	0800e945 	.word	0x0800e945
 800e898:	0800e945 	.word	0x0800e945
 800e89c:	0800e945 	.word	0x0800e945
 800e8a0:	0800e945 	.word	0x0800e945
 800e8a4:	0800e945 	.word	0x0800e945
 800e8a8:	0800e945 	.word	0x0800e945
 800e8ac:	0800e945 	.word	0x0800e945
 800e8b0:	0800e925 	.word	0x0800e925
 800e8b4:	0800e945 	.word	0x0800e945
 800e8b8:	0800e945 	.word	0x0800e945
 800e8bc:	0800e945 	.word	0x0800e945
 800e8c0:	0800e945 	.word	0x0800e945
 800e8c4:	0800e945 	.word	0x0800e945
 800e8c8:	0800e945 	.word	0x0800e945
 800e8cc:	0800e945 	.word	0x0800e945
 800e8d0:	0800e92d 	.word	0x0800e92d
 800e8d4:	0800e945 	.word	0x0800e945
 800e8d8:	0800e945 	.word	0x0800e945
 800e8dc:	0800e945 	.word	0x0800e945
 800e8e0:	0800e945 	.word	0x0800e945
 800e8e4:	0800e945 	.word	0x0800e945
 800e8e8:	0800e945 	.word	0x0800e945
 800e8ec:	0800e945 	.word	0x0800e945
 800e8f0:	0800e935 	.word	0x0800e935
 800e8f4:	0800e945 	.word	0x0800e945
 800e8f8:	0800e945 	.word	0x0800e945
 800e8fc:	0800e945 	.word	0x0800e945
 800e900:	0800e945 	.word	0x0800e945
 800e904:	0800e945 	.word	0x0800e945
 800e908:	0800e945 	.word	0x0800e945
 800e90c:	0800e945 	.word	0x0800e945
 800e910:	0800e93d 	.word	0x0800e93d
 800e914:	2301      	movs	r3, #1
 800e916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e91a:	e1c0      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e91c:	2304      	movs	r3, #4
 800e91e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e922:	e1bc      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e924:	2308      	movs	r3, #8
 800e926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e92a:	e1b8      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e92c:	2310      	movs	r3, #16
 800e92e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e932:	e1b4      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e934:	2320      	movs	r3, #32
 800e936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e93a:	e1b0      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e93c:	2340      	movs	r3, #64	; 0x40
 800e93e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e942:	e1ac      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e944:	2380      	movs	r3, #128	; 0x80
 800e946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e94a:	e1a8      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e94c:	697b      	ldr	r3, [r7, #20]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	4a75      	ldr	r2, [pc, #468]	; (800eb28 <UART_SetConfig+0x638>)
 800e952:	4293      	cmp	r3, r2
 800e954:	d130      	bne.n	800e9b8 <UART_SetConfig+0x4c8>
 800e956:	4b73      	ldr	r3, [pc, #460]	; (800eb24 <UART_SetConfig+0x634>)
 800e958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e95a:	f003 0307 	and.w	r3, r3, #7
 800e95e:	2b05      	cmp	r3, #5
 800e960:	d826      	bhi.n	800e9b0 <UART_SetConfig+0x4c0>
 800e962:	a201      	add	r2, pc, #4	; (adr r2, 800e968 <UART_SetConfig+0x478>)
 800e964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e968:	0800e981 	.word	0x0800e981
 800e96c:	0800e989 	.word	0x0800e989
 800e970:	0800e991 	.word	0x0800e991
 800e974:	0800e999 	.word	0x0800e999
 800e978:	0800e9a1 	.word	0x0800e9a1
 800e97c:	0800e9a9 	.word	0x0800e9a9
 800e980:	2300      	movs	r3, #0
 800e982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e986:	e18a      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e988:	2304      	movs	r3, #4
 800e98a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e98e:	e186      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e990:	2308      	movs	r3, #8
 800e992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e996:	e182      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e998:	2310      	movs	r3, #16
 800e99a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e99e:	e17e      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e9a0:	2320      	movs	r3, #32
 800e9a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9a6:	e17a      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e9a8:	2340      	movs	r3, #64	; 0x40
 800e9aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9ae:	e176      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e9b0:	2380      	movs	r3, #128	; 0x80
 800e9b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9b6:	e172      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e9b8:	697b      	ldr	r3, [r7, #20]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	4a5b      	ldr	r2, [pc, #364]	; (800eb2c <UART_SetConfig+0x63c>)
 800e9be:	4293      	cmp	r3, r2
 800e9c0:	d130      	bne.n	800ea24 <UART_SetConfig+0x534>
 800e9c2:	4b58      	ldr	r3, [pc, #352]	; (800eb24 <UART_SetConfig+0x634>)
 800e9c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9c6:	f003 0307 	and.w	r3, r3, #7
 800e9ca:	2b05      	cmp	r3, #5
 800e9cc:	d826      	bhi.n	800ea1c <UART_SetConfig+0x52c>
 800e9ce:	a201      	add	r2, pc, #4	; (adr r2, 800e9d4 <UART_SetConfig+0x4e4>)
 800e9d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9d4:	0800e9ed 	.word	0x0800e9ed
 800e9d8:	0800e9f5 	.word	0x0800e9f5
 800e9dc:	0800e9fd 	.word	0x0800e9fd
 800e9e0:	0800ea05 	.word	0x0800ea05
 800e9e4:	0800ea0d 	.word	0x0800ea0d
 800e9e8:	0800ea15 	.word	0x0800ea15
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9f2:	e154      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e9f4:	2304      	movs	r3, #4
 800e9f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9fa:	e150      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800e9fc:	2308      	movs	r3, #8
 800e9fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea02:	e14c      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800ea04:	2310      	movs	r3, #16
 800ea06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea0a:	e148      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800ea0c:	2320      	movs	r3, #32
 800ea0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea12:	e144      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800ea14:	2340      	movs	r3, #64	; 0x40
 800ea16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea1a:	e140      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800ea1c:	2380      	movs	r3, #128	; 0x80
 800ea1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea22:	e13c      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800ea24:	697b      	ldr	r3, [r7, #20]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	4a41      	ldr	r2, [pc, #260]	; (800eb30 <UART_SetConfig+0x640>)
 800ea2a:	4293      	cmp	r3, r2
 800ea2c:	f040 8082 	bne.w	800eb34 <UART_SetConfig+0x644>
 800ea30:	4b3c      	ldr	r3, [pc, #240]	; (800eb24 <UART_SetConfig+0x634>)
 800ea32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ea38:	2b28      	cmp	r3, #40	; 0x28
 800ea3a:	d86d      	bhi.n	800eb18 <UART_SetConfig+0x628>
 800ea3c:	a201      	add	r2, pc, #4	; (adr r2, 800ea44 <UART_SetConfig+0x554>)
 800ea3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea42:	bf00      	nop
 800ea44:	0800eae9 	.word	0x0800eae9
 800ea48:	0800eb19 	.word	0x0800eb19
 800ea4c:	0800eb19 	.word	0x0800eb19
 800ea50:	0800eb19 	.word	0x0800eb19
 800ea54:	0800eb19 	.word	0x0800eb19
 800ea58:	0800eb19 	.word	0x0800eb19
 800ea5c:	0800eb19 	.word	0x0800eb19
 800ea60:	0800eb19 	.word	0x0800eb19
 800ea64:	0800eaf1 	.word	0x0800eaf1
 800ea68:	0800eb19 	.word	0x0800eb19
 800ea6c:	0800eb19 	.word	0x0800eb19
 800ea70:	0800eb19 	.word	0x0800eb19
 800ea74:	0800eb19 	.word	0x0800eb19
 800ea78:	0800eb19 	.word	0x0800eb19
 800ea7c:	0800eb19 	.word	0x0800eb19
 800ea80:	0800eb19 	.word	0x0800eb19
 800ea84:	0800eaf9 	.word	0x0800eaf9
 800ea88:	0800eb19 	.word	0x0800eb19
 800ea8c:	0800eb19 	.word	0x0800eb19
 800ea90:	0800eb19 	.word	0x0800eb19
 800ea94:	0800eb19 	.word	0x0800eb19
 800ea98:	0800eb19 	.word	0x0800eb19
 800ea9c:	0800eb19 	.word	0x0800eb19
 800eaa0:	0800eb19 	.word	0x0800eb19
 800eaa4:	0800eb01 	.word	0x0800eb01
 800eaa8:	0800eb19 	.word	0x0800eb19
 800eaac:	0800eb19 	.word	0x0800eb19
 800eab0:	0800eb19 	.word	0x0800eb19
 800eab4:	0800eb19 	.word	0x0800eb19
 800eab8:	0800eb19 	.word	0x0800eb19
 800eabc:	0800eb19 	.word	0x0800eb19
 800eac0:	0800eb19 	.word	0x0800eb19
 800eac4:	0800eb09 	.word	0x0800eb09
 800eac8:	0800eb19 	.word	0x0800eb19
 800eacc:	0800eb19 	.word	0x0800eb19
 800ead0:	0800eb19 	.word	0x0800eb19
 800ead4:	0800eb19 	.word	0x0800eb19
 800ead8:	0800eb19 	.word	0x0800eb19
 800eadc:	0800eb19 	.word	0x0800eb19
 800eae0:	0800eb19 	.word	0x0800eb19
 800eae4:	0800eb11 	.word	0x0800eb11
 800eae8:	2301      	movs	r3, #1
 800eaea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaee:	e0d6      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800eaf0:	2304      	movs	r3, #4
 800eaf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaf6:	e0d2      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800eaf8:	2308      	movs	r3, #8
 800eafa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eafe:	e0ce      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800eb00:	2310      	movs	r3, #16
 800eb02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb06:	e0ca      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800eb08:	2320      	movs	r3, #32
 800eb0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb0e:	e0c6      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800eb10:	2340      	movs	r3, #64	; 0x40
 800eb12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb16:	e0c2      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800eb18:	2380      	movs	r3, #128	; 0x80
 800eb1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb1e:	e0be      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800eb20:	40011400 	.word	0x40011400
 800eb24:	58024400 	.word	0x58024400
 800eb28:	40007800 	.word	0x40007800
 800eb2c:	40007c00 	.word	0x40007c00
 800eb30:	40011800 	.word	0x40011800
 800eb34:	697b      	ldr	r3, [r7, #20]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	4aad      	ldr	r2, [pc, #692]	; (800edf0 <UART_SetConfig+0x900>)
 800eb3a:	4293      	cmp	r3, r2
 800eb3c:	d176      	bne.n	800ec2c <UART_SetConfig+0x73c>
 800eb3e:	4bad      	ldr	r3, [pc, #692]	; (800edf4 <UART_SetConfig+0x904>)
 800eb40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800eb46:	2b28      	cmp	r3, #40	; 0x28
 800eb48:	d86c      	bhi.n	800ec24 <UART_SetConfig+0x734>
 800eb4a:	a201      	add	r2, pc, #4	; (adr r2, 800eb50 <UART_SetConfig+0x660>)
 800eb4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb50:	0800ebf5 	.word	0x0800ebf5
 800eb54:	0800ec25 	.word	0x0800ec25
 800eb58:	0800ec25 	.word	0x0800ec25
 800eb5c:	0800ec25 	.word	0x0800ec25
 800eb60:	0800ec25 	.word	0x0800ec25
 800eb64:	0800ec25 	.word	0x0800ec25
 800eb68:	0800ec25 	.word	0x0800ec25
 800eb6c:	0800ec25 	.word	0x0800ec25
 800eb70:	0800ebfd 	.word	0x0800ebfd
 800eb74:	0800ec25 	.word	0x0800ec25
 800eb78:	0800ec25 	.word	0x0800ec25
 800eb7c:	0800ec25 	.word	0x0800ec25
 800eb80:	0800ec25 	.word	0x0800ec25
 800eb84:	0800ec25 	.word	0x0800ec25
 800eb88:	0800ec25 	.word	0x0800ec25
 800eb8c:	0800ec25 	.word	0x0800ec25
 800eb90:	0800ec05 	.word	0x0800ec05
 800eb94:	0800ec25 	.word	0x0800ec25
 800eb98:	0800ec25 	.word	0x0800ec25
 800eb9c:	0800ec25 	.word	0x0800ec25
 800eba0:	0800ec25 	.word	0x0800ec25
 800eba4:	0800ec25 	.word	0x0800ec25
 800eba8:	0800ec25 	.word	0x0800ec25
 800ebac:	0800ec25 	.word	0x0800ec25
 800ebb0:	0800ec0d 	.word	0x0800ec0d
 800ebb4:	0800ec25 	.word	0x0800ec25
 800ebb8:	0800ec25 	.word	0x0800ec25
 800ebbc:	0800ec25 	.word	0x0800ec25
 800ebc0:	0800ec25 	.word	0x0800ec25
 800ebc4:	0800ec25 	.word	0x0800ec25
 800ebc8:	0800ec25 	.word	0x0800ec25
 800ebcc:	0800ec25 	.word	0x0800ec25
 800ebd0:	0800ec15 	.word	0x0800ec15
 800ebd4:	0800ec25 	.word	0x0800ec25
 800ebd8:	0800ec25 	.word	0x0800ec25
 800ebdc:	0800ec25 	.word	0x0800ec25
 800ebe0:	0800ec25 	.word	0x0800ec25
 800ebe4:	0800ec25 	.word	0x0800ec25
 800ebe8:	0800ec25 	.word	0x0800ec25
 800ebec:	0800ec25 	.word	0x0800ec25
 800ebf0:	0800ec1d 	.word	0x0800ec1d
 800ebf4:	2301      	movs	r3, #1
 800ebf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebfa:	e050      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800ebfc:	2304      	movs	r3, #4
 800ebfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec02:	e04c      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800ec04:	2308      	movs	r3, #8
 800ec06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec0a:	e048      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800ec0c:	2310      	movs	r3, #16
 800ec0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec12:	e044      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800ec14:	2320      	movs	r3, #32
 800ec16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec1a:	e040      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800ec1c:	2340      	movs	r3, #64	; 0x40
 800ec1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec22:	e03c      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800ec24:	2380      	movs	r3, #128	; 0x80
 800ec26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec2a:	e038      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800ec2c:	697b      	ldr	r3, [r7, #20]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	4a71      	ldr	r2, [pc, #452]	; (800edf8 <UART_SetConfig+0x908>)
 800ec32:	4293      	cmp	r3, r2
 800ec34:	d130      	bne.n	800ec98 <UART_SetConfig+0x7a8>
 800ec36:	4b6f      	ldr	r3, [pc, #444]	; (800edf4 <UART_SetConfig+0x904>)
 800ec38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec3a:	f003 0307 	and.w	r3, r3, #7
 800ec3e:	2b05      	cmp	r3, #5
 800ec40:	d826      	bhi.n	800ec90 <UART_SetConfig+0x7a0>
 800ec42:	a201      	add	r2, pc, #4	; (adr r2, 800ec48 <UART_SetConfig+0x758>)
 800ec44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec48:	0800ec61 	.word	0x0800ec61
 800ec4c:	0800ec69 	.word	0x0800ec69
 800ec50:	0800ec71 	.word	0x0800ec71
 800ec54:	0800ec79 	.word	0x0800ec79
 800ec58:	0800ec81 	.word	0x0800ec81
 800ec5c:	0800ec89 	.word	0x0800ec89
 800ec60:	2302      	movs	r3, #2
 800ec62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec66:	e01a      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800ec68:	2304      	movs	r3, #4
 800ec6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec6e:	e016      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800ec70:	2308      	movs	r3, #8
 800ec72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec76:	e012      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800ec78:	2310      	movs	r3, #16
 800ec7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec7e:	e00e      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800ec80:	2320      	movs	r3, #32
 800ec82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec86:	e00a      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800ec88:	2340      	movs	r3, #64	; 0x40
 800ec8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec8e:	e006      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800ec90:	2380      	movs	r3, #128	; 0x80
 800ec92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec96:	e002      	b.n	800ec9e <UART_SetConfig+0x7ae>
 800ec98:	2380      	movs	r3, #128	; 0x80
 800ec9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ec9e:	697b      	ldr	r3, [r7, #20]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	4a55      	ldr	r2, [pc, #340]	; (800edf8 <UART_SetConfig+0x908>)
 800eca4:	4293      	cmp	r3, r2
 800eca6:	f040 80f8 	bne.w	800ee9a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ecaa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ecae:	2b20      	cmp	r3, #32
 800ecb0:	dc46      	bgt.n	800ed40 <UART_SetConfig+0x850>
 800ecb2:	2b02      	cmp	r3, #2
 800ecb4:	db75      	blt.n	800eda2 <UART_SetConfig+0x8b2>
 800ecb6:	3b02      	subs	r3, #2
 800ecb8:	2b1e      	cmp	r3, #30
 800ecba:	d872      	bhi.n	800eda2 <UART_SetConfig+0x8b2>
 800ecbc:	a201      	add	r2, pc, #4	; (adr r2, 800ecc4 <UART_SetConfig+0x7d4>)
 800ecbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecc2:	bf00      	nop
 800ecc4:	0800ed47 	.word	0x0800ed47
 800ecc8:	0800eda3 	.word	0x0800eda3
 800eccc:	0800ed4f 	.word	0x0800ed4f
 800ecd0:	0800eda3 	.word	0x0800eda3
 800ecd4:	0800eda3 	.word	0x0800eda3
 800ecd8:	0800eda3 	.word	0x0800eda3
 800ecdc:	0800ed5f 	.word	0x0800ed5f
 800ece0:	0800eda3 	.word	0x0800eda3
 800ece4:	0800eda3 	.word	0x0800eda3
 800ece8:	0800eda3 	.word	0x0800eda3
 800ecec:	0800eda3 	.word	0x0800eda3
 800ecf0:	0800eda3 	.word	0x0800eda3
 800ecf4:	0800eda3 	.word	0x0800eda3
 800ecf8:	0800eda3 	.word	0x0800eda3
 800ecfc:	0800ed6f 	.word	0x0800ed6f
 800ed00:	0800eda3 	.word	0x0800eda3
 800ed04:	0800eda3 	.word	0x0800eda3
 800ed08:	0800eda3 	.word	0x0800eda3
 800ed0c:	0800eda3 	.word	0x0800eda3
 800ed10:	0800eda3 	.word	0x0800eda3
 800ed14:	0800eda3 	.word	0x0800eda3
 800ed18:	0800eda3 	.word	0x0800eda3
 800ed1c:	0800eda3 	.word	0x0800eda3
 800ed20:	0800eda3 	.word	0x0800eda3
 800ed24:	0800eda3 	.word	0x0800eda3
 800ed28:	0800eda3 	.word	0x0800eda3
 800ed2c:	0800eda3 	.word	0x0800eda3
 800ed30:	0800eda3 	.word	0x0800eda3
 800ed34:	0800eda3 	.word	0x0800eda3
 800ed38:	0800eda3 	.word	0x0800eda3
 800ed3c:	0800ed95 	.word	0x0800ed95
 800ed40:	2b40      	cmp	r3, #64	; 0x40
 800ed42:	d02a      	beq.n	800ed9a <UART_SetConfig+0x8aa>
 800ed44:	e02d      	b.n	800eda2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ed46:	f7fc fd4f 	bl	800b7e8 <HAL_RCCEx_GetD3PCLK1Freq>
 800ed4a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ed4c:	e02f      	b.n	800edae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ed4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ed52:	4618      	mov	r0, r3
 800ed54:	f7fc fd5e 	bl	800b814 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ed58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed5c:	e027      	b.n	800edae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ed5e:	f107 0318 	add.w	r3, r7, #24
 800ed62:	4618      	mov	r0, r3
 800ed64:	f7fc feaa 	bl	800babc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ed68:	69fb      	ldr	r3, [r7, #28]
 800ed6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed6c:	e01f      	b.n	800edae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ed6e:	4b21      	ldr	r3, [pc, #132]	; (800edf4 <UART_SetConfig+0x904>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	f003 0320 	and.w	r3, r3, #32
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d009      	beq.n	800ed8e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ed7a:	4b1e      	ldr	r3, [pc, #120]	; (800edf4 <UART_SetConfig+0x904>)
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	08db      	lsrs	r3, r3, #3
 800ed80:	f003 0303 	and.w	r3, r3, #3
 800ed84:	4a1d      	ldr	r2, [pc, #116]	; (800edfc <UART_SetConfig+0x90c>)
 800ed86:	fa22 f303 	lsr.w	r3, r2, r3
 800ed8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ed8c:	e00f      	b.n	800edae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ed8e:	4b1b      	ldr	r3, [pc, #108]	; (800edfc <UART_SetConfig+0x90c>)
 800ed90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed92:	e00c      	b.n	800edae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ed94:	4b1a      	ldr	r3, [pc, #104]	; (800ee00 <UART_SetConfig+0x910>)
 800ed96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed98:	e009      	b.n	800edae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ed9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ed9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eda0:	e005      	b.n	800edae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800eda2:	2300      	movs	r3, #0
 800eda4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800eda6:	2301      	movs	r3, #1
 800eda8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800edac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800edae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	f000 81ee 	beq.w	800f192 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800edb6:	697b      	ldr	r3, [r7, #20]
 800edb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edba:	4a12      	ldr	r2, [pc, #72]	; (800ee04 <UART_SetConfig+0x914>)
 800edbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800edc0:	461a      	mov	r2, r3
 800edc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edc4:	fbb3 f3f2 	udiv	r3, r3, r2
 800edc8:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800edca:	697b      	ldr	r3, [r7, #20]
 800edcc:	685a      	ldr	r2, [r3, #4]
 800edce:	4613      	mov	r3, r2
 800edd0:	005b      	lsls	r3, r3, #1
 800edd2:	4413      	add	r3, r2
 800edd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800edd6:	429a      	cmp	r2, r3
 800edd8:	d305      	bcc.n	800ede6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800edda:	697b      	ldr	r3, [r7, #20]
 800eddc:	685b      	ldr	r3, [r3, #4]
 800edde:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ede0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ede2:	429a      	cmp	r2, r3
 800ede4:	d910      	bls.n	800ee08 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800ede6:	2301      	movs	r3, #1
 800ede8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800edec:	e1d1      	b.n	800f192 <UART_SetConfig+0xca2>
 800edee:	bf00      	nop
 800edf0:	40011c00 	.word	0x40011c00
 800edf4:	58024400 	.word	0x58024400
 800edf8:	58000c00 	.word	0x58000c00
 800edfc:	03d09000 	.word	0x03d09000
 800ee00:	003d0900 	.word	0x003d0900
 800ee04:	08010394 	.word	0x08010394
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ee08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	60bb      	str	r3, [r7, #8]
 800ee0e:	60fa      	str	r2, [r7, #12]
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee14:	4ac0      	ldr	r2, [pc, #768]	; (800f118 <UART_SetConfig+0xc28>)
 800ee16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee1a:	b29b      	uxth	r3, r3
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	603b      	str	r3, [r7, #0]
 800ee20:	607a      	str	r2, [r7, #4]
 800ee22:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ee2a:	f7f1 fa79 	bl	8000320 <__aeabi_uldivmod>
 800ee2e:	4602      	mov	r2, r0
 800ee30:	460b      	mov	r3, r1
 800ee32:	4610      	mov	r0, r2
 800ee34:	4619      	mov	r1, r3
 800ee36:	f04f 0200 	mov.w	r2, #0
 800ee3a:	f04f 0300 	mov.w	r3, #0
 800ee3e:	020b      	lsls	r3, r1, #8
 800ee40:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ee44:	0202      	lsls	r2, r0, #8
 800ee46:	6979      	ldr	r1, [r7, #20]
 800ee48:	6849      	ldr	r1, [r1, #4]
 800ee4a:	0849      	lsrs	r1, r1, #1
 800ee4c:	2000      	movs	r0, #0
 800ee4e:	460c      	mov	r4, r1
 800ee50:	4605      	mov	r5, r0
 800ee52:	eb12 0804 	adds.w	r8, r2, r4
 800ee56:	eb43 0905 	adc.w	r9, r3, r5
 800ee5a:	697b      	ldr	r3, [r7, #20]
 800ee5c:	685b      	ldr	r3, [r3, #4]
 800ee5e:	2200      	movs	r2, #0
 800ee60:	469a      	mov	sl, r3
 800ee62:	4693      	mov	fp, r2
 800ee64:	4652      	mov	r2, sl
 800ee66:	465b      	mov	r3, fp
 800ee68:	4640      	mov	r0, r8
 800ee6a:	4649      	mov	r1, r9
 800ee6c:	f7f1 fa58 	bl	8000320 <__aeabi_uldivmod>
 800ee70:	4602      	mov	r2, r0
 800ee72:	460b      	mov	r3, r1
 800ee74:	4613      	mov	r3, r2
 800ee76:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ee78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ee7e:	d308      	bcc.n	800ee92 <UART_SetConfig+0x9a2>
 800ee80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ee86:	d204      	bcs.n	800ee92 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800ee88:	697b      	ldr	r3, [r7, #20]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee8e:	60da      	str	r2, [r3, #12]
 800ee90:	e17f      	b.n	800f192 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800ee92:	2301      	movs	r3, #1
 800ee94:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ee98:	e17b      	b.n	800f192 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ee9a:	697b      	ldr	r3, [r7, #20]
 800ee9c:	69db      	ldr	r3, [r3, #28]
 800ee9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eea2:	f040 80bd 	bne.w	800f020 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800eea6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800eeaa:	2b20      	cmp	r3, #32
 800eeac:	dc48      	bgt.n	800ef40 <UART_SetConfig+0xa50>
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	db7b      	blt.n	800efaa <UART_SetConfig+0xaba>
 800eeb2:	2b20      	cmp	r3, #32
 800eeb4:	d879      	bhi.n	800efaa <UART_SetConfig+0xaba>
 800eeb6:	a201      	add	r2, pc, #4	; (adr r2, 800eebc <UART_SetConfig+0x9cc>)
 800eeb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eebc:	0800ef47 	.word	0x0800ef47
 800eec0:	0800ef4f 	.word	0x0800ef4f
 800eec4:	0800efab 	.word	0x0800efab
 800eec8:	0800efab 	.word	0x0800efab
 800eecc:	0800ef57 	.word	0x0800ef57
 800eed0:	0800efab 	.word	0x0800efab
 800eed4:	0800efab 	.word	0x0800efab
 800eed8:	0800efab 	.word	0x0800efab
 800eedc:	0800ef67 	.word	0x0800ef67
 800eee0:	0800efab 	.word	0x0800efab
 800eee4:	0800efab 	.word	0x0800efab
 800eee8:	0800efab 	.word	0x0800efab
 800eeec:	0800efab 	.word	0x0800efab
 800eef0:	0800efab 	.word	0x0800efab
 800eef4:	0800efab 	.word	0x0800efab
 800eef8:	0800efab 	.word	0x0800efab
 800eefc:	0800ef77 	.word	0x0800ef77
 800ef00:	0800efab 	.word	0x0800efab
 800ef04:	0800efab 	.word	0x0800efab
 800ef08:	0800efab 	.word	0x0800efab
 800ef0c:	0800efab 	.word	0x0800efab
 800ef10:	0800efab 	.word	0x0800efab
 800ef14:	0800efab 	.word	0x0800efab
 800ef18:	0800efab 	.word	0x0800efab
 800ef1c:	0800efab 	.word	0x0800efab
 800ef20:	0800efab 	.word	0x0800efab
 800ef24:	0800efab 	.word	0x0800efab
 800ef28:	0800efab 	.word	0x0800efab
 800ef2c:	0800efab 	.word	0x0800efab
 800ef30:	0800efab 	.word	0x0800efab
 800ef34:	0800efab 	.word	0x0800efab
 800ef38:	0800efab 	.word	0x0800efab
 800ef3c:	0800ef9d 	.word	0x0800ef9d
 800ef40:	2b40      	cmp	r3, #64	; 0x40
 800ef42:	d02e      	beq.n	800efa2 <UART_SetConfig+0xab2>
 800ef44:	e031      	b.n	800efaa <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ef46:	f7fb fa83 	bl	800a450 <HAL_RCC_GetPCLK1Freq>
 800ef4a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ef4c:	e033      	b.n	800efb6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ef4e:	f7fb fa95 	bl	800a47c <HAL_RCC_GetPCLK2Freq>
 800ef52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ef54:	e02f      	b.n	800efb6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ef56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f7fc fc5a 	bl	800b814 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ef60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef64:	e027      	b.n	800efb6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ef66:	f107 0318 	add.w	r3, r7, #24
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	f7fc fda6 	bl	800babc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ef70:	69fb      	ldr	r3, [r7, #28]
 800ef72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef74:	e01f      	b.n	800efb6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ef76:	4b69      	ldr	r3, [pc, #420]	; (800f11c <UART_SetConfig+0xc2c>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	f003 0320 	and.w	r3, r3, #32
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d009      	beq.n	800ef96 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ef82:	4b66      	ldr	r3, [pc, #408]	; (800f11c <UART_SetConfig+0xc2c>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	08db      	lsrs	r3, r3, #3
 800ef88:	f003 0303 	and.w	r3, r3, #3
 800ef8c:	4a64      	ldr	r2, [pc, #400]	; (800f120 <UART_SetConfig+0xc30>)
 800ef8e:	fa22 f303 	lsr.w	r3, r2, r3
 800ef92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ef94:	e00f      	b.n	800efb6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800ef96:	4b62      	ldr	r3, [pc, #392]	; (800f120 <UART_SetConfig+0xc30>)
 800ef98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef9a:	e00c      	b.n	800efb6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ef9c:	4b61      	ldr	r3, [pc, #388]	; (800f124 <UART_SetConfig+0xc34>)
 800ef9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800efa0:	e009      	b.n	800efb6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800efa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800efa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800efa8:	e005      	b.n	800efb6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800efaa:	2300      	movs	r3, #0
 800efac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800efae:	2301      	movs	r3, #1
 800efb0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800efb4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800efb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efb8:	2b00      	cmp	r3, #0
 800efba:	f000 80ea 	beq.w	800f192 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800efbe:	697b      	ldr	r3, [r7, #20]
 800efc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efc2:	4a55      	ldr	r2, [pc, #340]	; (800f118 <UART_SetConfig+0xc28>)
 800efc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800efc8:	461a      	mov	r2, r3
 800efca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efcc:	fbb3 f3f2 	udiv	r3, r3, r2
 800efd0:	005a      	lsls	r2, r3, #1
 800efd2:	697b      	ldr	r3, [r7, #20]
 800efd4:	685b      	ldr	r3, [r3, #4]
 800efd6:	085b      	lsrs	r3, r3, #1
 800efd8:	441a      	add	r2, r3
 800efda:	697b      	ldr	r3, [r7, #20]
 800efdc:	685b      	ldr	r3, [r3, #4]
 800efde:	fbb2 f3f3 	udiv	r3, r2, r3
 800efe2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800efe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efe6:	2b0f      	cmp	r3, #15
 800efe8:	d916      	bls.n	800f018 <UART_SetConfig+0xb28>
 800efea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eff0:	d212      	bcs.n	800f018 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800eff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eff4:	b29b      	uxth	r3, r3
 800eff6:	f023 030f 	bic.w	r3, r3, #15
 800effa:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800effc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800effe:	085b      	lsrs	r3, r3, #1
 800f000:	b29b      	uxth	r3, r3
 800f002:	f003 0307 	and.w	r3, r3, #7
 800f006:	b29a      	uxth	r2, r3
 800f008:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f00a:	4313      	orrs	r3, r2
 800f00c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f00e:	697b      	ldr	r3, [r7, #20]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f014:	60da      	str	r2, [r3, #12]
 800f016:	e0bc      	b.n	800f192 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f018:	2301      	movs	r3, #1
 800f01a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f01e:	e0b8      	b.n	800f192 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f020:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f024:	2b20      	cmp	r3, #32
 800f026:	dc4b      	bgt.n	800f0c0 <UART_SetConfig+0xbd0>
 800f028:	2b00      	cmp	r3, #0
 800f02a:	f2c0 8087 	blt.w	800f13c <UART_SetConfig+0xc4c>
 800f02e:	2b20      	cmp	r3, #32
 800f030:	f200 8084 	bhi.w	800f13c <UART_SetConfig+0xc4c>
 800f034:	a201      	add	r2, pc, #4	; (adr r2, 800f03c <UART_SetConfig+0xb4c>)
 800f036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f03a:	bf00      	nop
 800f03c:	0800f0c7 	.word	0x0800f0c7
 800f040:	0800f0cf 	.word	0x0800f0cf
 800f044:	0800f13d 	.word	0x0800f13d
 800f048:	0800f13d 	.word	0x0800f13d
 800f04c:	0800f0d7 	.word	0x0800f0d7
 800f050:	0800f13d 	.word	0x0800f13d
 800f054:	0800f13d 	.word	0x0800f13d
 800f058:	0800f13d 	.word	0x0800f13d
 800f05c:	0800f0e7 	.word	0x0800f0e7
 800f060:	0800f13d 	.word	0x0800f13d
 800f064:	0800f13d 	.word	0x0800f13d
 800f068:	0800f13d 	.word	0x0800f13d
 800f06c:	0800f13d 	.word	0x0800f13d
 800f070:	0800f13d 	.word	0x0800f13d
 800f074:	0800f13d 	.word	0x0800f13d
 800f078:	0800f13d 	.word	0x0800f13d
 800f07c:	0800f0f7 	.word	0x0800f0f7
 800f080:	0800f13d 	.word	0x0800f13d
 800f084:	0800f13d 	.word	0x0800f13d
 800f088:	0800f13d 	.word	0x0800f13d
 800f08c:	0800f13d 	.word	0x0800f13d
 800f090:	0800f13d 	.word	0x0800f13d
 800f094:	0800f13d 	.word	0x0800f13d
 800f098:	0800f13d 	.word	0x0800f13d
 800f09c:	0800f13d 	.word	0x0800f13d
 800f0a0:	0800f13d 	.word	0x0800f13d
 800f0a4:	0800f13d 	.word	0x0800f13d
 800f0a8:	0800f13d 	.word	0x0800f13d
 800f0ac:	0800f13d 	.word	0x0800f13d
 800f0b0:	0800f13d 	.word	0x0800f13d
 800f0b4:	0800f13d 	.word	0x0800f13d
 800f0b8:	0800f13d 	.word	0x0800f13d
 800f0bc:	0800f12f 	.word	0x0800f12f
 800f0c0:	2b40      	cmp	r3, #64	; 0x40
 800f0c2:	d037      	beq.n	800f134 <UART_SetConfig+0xc44>
 800f0c4:	e03a      	b.n	800f13c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f0c6:	f7fb f9c3 	bl	800a450 <HAL_RCC_GetPCLK1Freq>
 800f0ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f0cc:	e03c      	b.n	800f148 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f0ce:	f7fb f9d5 	bl	800a47c <HAL_RCC_GetPCLK2Freq>
 800f0d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f0d4:	e038      	b.n	800f148 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f0d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f7fc fb9a 	bl	800b814 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f0e4:	e030      	b.n	800f148 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f0e6:	f107 0318 	add.w	r3, r7, #24
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	f7fc fce6 	bl	800babc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f0f0:	69fb      	ldr	r3, [r7, #28]
 800f0f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f0f4:	e028      	b.n	800f148 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f0f6:	4b09      	ldr	r3, [pc, #36]	; (800f11c <UART_SetConfig+0xc2c>)
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	f003 0320 	and.w	r3, r3, #32
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d012      	beq.n	800f128 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f102:	4b06      	ldr	r3, [pc, #24]	; (800f11c <UART_SetConfig+0xc2c>)
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	08db      	lsrs	r3, r3, #3
 800f108:	f003 0303 	and.w	r3, r3, #3
 800f10c:	4a04      	ldr	r2, [pc, #16]	; (800f120 <UART_SetConfig+0xc30>)
 800f10e:	fa22 f303 	lsr.w	r3, r2, r3
 800f112:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f114:	e018      	b.n	800f148 <UART_SetConfig+0xc58>
 800f116:	bf00      	nop
 800f118:	08010394 	.word	0x08010394
 800f11c:	58024400 	.word	0x58024400
 800f120:	03d09000 	.word	0x03d09000
 800f124:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800f128:	4b24      	ldr	r3, [pc, #144]	; (800f1bc <UART_SetConfig+0xccc>)
 800f12a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f12c:	e00c      	b.n	800f148 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f12e:	4b24      	ldr	r3, [pc, #144]	; (800f1c0 <UART_SetConfig+0xcd0>)
 800f130:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f132:	e009      	b.n	800f148 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f134:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f138:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f13a:	e005      	b.n	800f148 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800f13c:	2300      	movs	r3, #0
 800f13e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f140:	2301      	movs	r3, #1
 800f142:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f146:	bf00      	nop
    }

    if (pclk != 0U)
 800f148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d021      	beq.n	800f192 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f14e:	697b      	ldr	r3, [r7, #20]
 800f150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f152:	4a1c      	ldr	r2, [pc, #112]	; (800f1c4 <UART_SetConfig+0xcd4>)
 800f154:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f158:	461a      	mov	r2, r3
 800f15a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f15c:	fbb3 f2f2 	udiv	r2, r3, r2
 800f160:	697b      	ldr	r3, [r7, #20]
 800f162:	685b      	ldr	r3, [r3, #4]
 800f164:	085b      	lsrs	r3, r3, #1
 800f166:	441a      	add	r2, r3
 800f168:	697b      	ldr	r3, [r7, #20]
 800f16a:	685b      	ldr	r3, [r3, #4]
 800f16c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f170:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f174:	2b0f      	cmp	r3, #15
 800f176:	d909      	bls.n	800f18c <UART_SetConfig+0xc9c>
 800f178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f17a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f17e:	d205      	bcs.n	800f18c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f182:	b29a      	uxth	r2, r3
 800f184:	697b      	ldr	r3, [r7, #20]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	60da      	str	r2, [r3, #12]
 800f18a:	e002      	b.n	800f192 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f18c:	2301      	movs	r3, #1
 800f18e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f192:	697b      	ldr	r3, [r7, #20]
 800f194:	2201      	movs	r2, #1
 800f196:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f19a:	697b      	ldr	r3, [r7, #20]
 800f19c:	2201      	movs	r2, #1
 800f19e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f1a2:	697b      	ldr	r3, [r7, #20]
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800f1a8:	697b      	ldr	r3, [r7, #20]
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800f1ae:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	3748      	adds	r7, #72	; 0x48
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f1bc:	03d09000 	.word	0x03d09000
 800f1c0:	003d0900 	.word	0x003d0900
 800f1c4:	08010394 	.word	0x08010394

0800f1c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f1c8:	b480      	push	{r7}
 800f1ca:	b083      	sub	sp, #12
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1d4:	f003 0301 	and.w	r3, r3, #1
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d00a      	beq.n	800f1f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	685b      	ldr	r3, [r3, #4]
 800f1e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	430a      	orrs	r2, r1
 800f1f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1f6:	f003 0302 	and.w	r3, r3, #2
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d00a      	beq.n	800f214 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	685b      	ldr	r3, [r3, #4]
 800f204:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	430a      	orrs	r2, r1
 800f212:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f218:	f003 0304 	and.w	r3, r3, #4
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d00a      	beq.n	800f236 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	685b      	ldr	r3, [r3, #4]
 800f226:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	430a      	orrs	r2, r1
 800f234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f23a:	f003 0308 	and.w	r3, r3, #8
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d00a      	beq.n	800f258 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	685b      	ldr	r3, [r3, #4]
 800f248:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	430a      	orrs	r2, r1
 800f256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f25c:	f003 0310 	and.w	r3, r3, #16
 800f260:	2b00      	cmp	r3, #0
 800f262:	d00a      	beq.n	800f27a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	689b      	ldr	r3, [r3, #8]
 800f26a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	430a      	orrs	r2, r1
 800f278:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f27e:	f003 0320 	and.w	r3, r3, #32
 800f282:	2b00      	cmp	r3, #0
 800f284:	d00a      	beq.n	800f29c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	689b      	ldr	r3, [r3, #8]
 800f28c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	430a      	orrs	r2, r1
 800f29a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d01a      	beq.n	800f2de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	685b      	ldr	r3, [r3, #4]
 800f2ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	430a      	orrs	r2, r1
 800f2bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f2c6:	d10a      	bne.n	800f2de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	685b      	ldr	r3, [r3, #4]
 800f2ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	430a      	orrs	r2, r1
 800f2dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d00a      	beq.n	800f300 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	685b      	ldr	r3, [r3, #4]
 800f2f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	430a      	orrs	r2, r1
 800f2fe:	605a      	str	r2, [r3, #4]
  }
}
 800f300:	bf00      	nop
 800f302:	370c      	adds	r7, #12
 800f304:	46bd      	mov	sp, r7
 800f306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30a:	4770      	bx	lr

0800f30c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b098      	sub	sp, #96	; 0x60
 800f310:	af02      	add	r7, sp, #8
 800f312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	2200      	movs	r2, #0
 800f318:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f31c:	f7f6 fd24 	bl	8005d68 <HAL_GetTick>
 800f320:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	f003 0308 	and.w	r3, r3, #8
 800f32c:	2b08      	cmp	r3, #8
 800f32e:	d12f      	bne.n	800f390 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f330:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f334:	9300      	str	r3, [sp, #0]
 800f336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f338:	2200      	movs	r2, #0
 800f33a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f33e:	6878      	ldr	r0, [r7, #4]
 800f340:	f000 f88e 	bl	800f460 <UART_WaitOnFlagUntilTimeout>
 800f344:	4603      	mov	r3, r0
 800f346:	2b00      	cmp	r3, #0
 800f348:	d022      	beq.n	800f390 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f352:	e853 3f00 	ldrex	r3, [r3]
 800f356:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f35a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f35e:	653b      	str	r3, [r7, #80]	; 0x50
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	461a      	mov	r2, r3
 800f366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f368:	647b      	str	r3, [r7, #68]	; 0x44
 800f36a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f36c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f36e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f370:	e841 2300 	strex	r3, r2, [r1]
 800f374:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d1e6      	bne.n	800f34a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	2220      	movs	r2, #32
 800f380:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	2200      	movs	r2, #0
 800f388:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f38c:	2303      	movs	r3, #3
 800f38e:	e063      	b.n	800f458 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	f003 0304 	and.w	r3, r3, #4
 800f39a:	2b04      	cmp	r3, #4
 800f39c:	d149      	bne.n	800f432 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f39e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f3a2:	9300      	str	r3, [sp, #0]
 800f3a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f3ac:	6878      	ldr	r0, [r7, #4]
 800f3ae:	f000 f857 	bl	800f460 <UART_WaitOnFlagUntilTimeout>
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d03c      	beq.n	800f432 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3c0:	e853 3f00 	ldrex	r3, [r3]
 800f3c4:	623b      	str	r3, [r7, #32]
   return(result);
 800f3c6:	6a3b      	ldr	r3, [r7, #32]
 800f3c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f3cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	461a      	mov	r2, r3
 800f3d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f3d6:	633b      	str	r3, [r7, #48]	; 0x30
 800f3d8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f3dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3de:	e841 2300 	strex	r3, r2, [r1]
 800f3e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d1e6      	bne.n	800f3b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	3308      	adds	r3, #8
 800f3f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3f2:	693b      	ldr	r3, [r7, #16]
 800f3f4:	e853 3f00 	ldrex	r3, [r3]
 800f3f8:	60fb      	str	r3, [r7, #12]
   return(result);
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	f023 0301 	bic.w	r3, r3, #1
 800f400:	64bb      	str	r3, [r7, #72]	; 0x48
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	3308      	adds	r3, #8
 800f408:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f40a:	61fa      	str	r2, [r7, #28]
 800f40c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f40e:	69b9      	ldr	r1, [r7, #24]
 800f410:	69fa      	ldr	r2, [r7, #28]
 800f412:	e841 2300 	strex	r3, r2, [r1]
 800f416:	617b      	str	r3, [r7, #20]
   return(result);
 800f418:	697b      	ldr	r3, [r7, #20]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d1e5      	bne.n	800f3ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	2220      	movs	r2, #32
 800f422:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	2200      	movs	r2, #0
 800f42a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f42e:	2303      	movs	r3, #3
 800f430:	e012      	b.n	800f458 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	2220      	movs	r2, #32
 800f436:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	2220      	movs	r2, #32
 800f43e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	2200      	movs	r2, #0
 800f446:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	2200      	movs	r2, #0
 800f44c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	2200      	movs	r2, #0
 800f452:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f456:	2300      	movs	r3, #0
}
 800f458:	4618      	mov	r0, r3
 800f45a:	3758      	adds	r7, #88	; 0x58
 800f45c:	46bd      	mov	sp, r7
 800f45e:	bd80      	pop	{r7, pc}

0800f460 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f460:	b580      	push	{r7, lr}
 800f462:	b084      	sub	sp, #16
 800f464:	af00      	add	r7, sp, #0
 800f466:	60f8      	str	r0, [r7, #12]
 800f468:	60b9      	str	r1, [r7, #8]
 800f46a:	603b      	str	r3, [r7, #0]
 800f46c:	4613      	mov	r3, r2
 800f46e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f470:	e049      	b.n	800f506 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f472:	69bb      	ldr	r3, [r7, #24]
 800f474:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f478:	d045      	beq.n	800f506 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f47a:	f7f6 fc75 	bl	8005d68 <HAL_GetTick>
 800f47e:	4602      	mov	r2, r0
 800f480:	683b      	ldr	r3, [r7, #0]
 800f482:	1ad3      	subs	r3, r2, r3
 800f484:	69ba      	ldr	r2, [r7, #24]
 800f486:	429a      	cmp	r2, r3
 800f488:	d302      	bcc.n	800f490 <UART_WaitOnFlagUntilTimeout+0x30>
 800f48a:	69bb      	ldr	r3, [r7, #24]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d101      	bne.n	800f494 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f490:	2303      	movs	r3, #3
 800f492:	e048      	b.n	800f526 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	f003 0304 	and.w	r3, r3, #4
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d031      	beq.n	800f506 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	69db      	ldr	r3, [r3, #28]
 800f4a8:	f003 0308 	and.w	r3, r3, #8
 800f4ac:	2b08      	cmp	r3, #8
 800f4ae:	d110      	bne.n	800f4d2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	2208      	movs	r2, #8
 800f4b6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800f4b8:	68f8      	ldr	r0, [r7, #12]
 800f4ba:	f000 f921 	bl	800f700 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	2208      	movs	r2, #8
 800f4c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800f4ce:	2301      	movs	r3, #1
 800f4d0:	e029      	b.n	800f526 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	69db      	ldr	r3, [r3, #28]
 800f4d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f4dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f4e0:	d111      	bne.n	800f506 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f4ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f4ec:	68f8      	ldr	r0, [r7, #12]
 800f4ee:	f000 f907 	bl	800f700 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	2220      	movs	r2, #32
 800f4f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f502:	2303      	movs	r3, #3
 800f504:	e00f      	b.n	800f526 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	69da      	ldr	r2, [r3, #28]
 800f50c:	68bb      	ldr	r3, [r7, #8]
 800f50e:	4013      	ands	r3, r2
 800f510:	68ba      	ldr	r2, [r7, #8]
 800f512:	429a      	cmp	r2, r3
 800f514:	bf0c      	ite	eq
 800f516:	2301      	moveq	r3, #1
 800f518:	2300      	movne	r3, #0
 800f51a:	b2db      	uxtb	r3, r3
 800f51c:	461a      	mov	r2, r3
 800f51e:	79fb      	ldrb	r3, [r7, #7]
 800f520:	429a      	cmp	r2, r3
 800f522:	d0a6      	beq.n	800f472 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f524:	2300      	movs	r3, #0
}
 800f526:	4618      	mov	r0, r3
 800f528:	3710      	adds	r7, #16
 800f52a:	46bd      	mov	sp, r7
 800f52c:	bd80      	pop	{r7, pc}
	...

0800f530 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f530:	b580      	push	{r7, lr}
 800f532:	b096      	sub	sp, #88	; 0x58
 800f534:	af00      	add	r7, sp, #0
 800f536:	60f8      	str	r0, [r7, #12]
 800f538:	60b9      	str	r1, [r7, #8]
 800f53a:	4613      	mov	r3, r2
 800f53c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	68ba      	ldr	r2, [r7, #8]
 800f542:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	88fa      	ldrh	r2, [r7, #6]
 800f548:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	2200      	movs	r2, #0
 800f550:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	2222      	movs	r2, #34	; 0x22
 800f558:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f562:	2b00      	cmp	r3, #0
 800f564:	d02d      	beq.n	800f5c2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f56c:	4a40      	ldr	r2, [pc, #256]	; (800f670 <UART_Start_Receive_DMA+0x140>)
 800f56e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f576:	4a3f      	ldr	r2, [pc, #252]	; (800f674 <UART_Start_Receive_DMA+0x144>)
 800f578:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f580:	4a3d      	ldr	r2, [pc, #244]	; (800f678 <UART_Start_Receive_DMA+0x148>)
 800f582:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f58a:	2200      	movs	r2, #0
 800f58c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	3324      	adds	r3, #36	; 0x24
 800f59a:	4619      	mov	r1, r3
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5a0:	461a      	mov	r2, r3
 800f5a2:	88fb      	ldrh	r3, [r7, #6]
 800f5a4:	f7f7 fa3c 	bl	8006a20 <HAL_DMA_Start_IT>
 800f5a8:	4603      	mov	r3, r0
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d009      	beq.n	800f5c2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	2210      	movs	r2, #16
 800f5b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	2220      	movs	r2, #32
 800f5ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800f5be:	2301      	movs	r3, #1
 800f5c0:	e051      	b.n	800f666 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	691b      	ldr	r3, [r3, #16]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d018      	beq.n	800f5fc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5d2:	e853 3f00 	ldrex	r3, [r3]
 800f5d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f5de:	657b      	str	r3, [r7, #84]	; 0x54
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	461a      	mov	r2, r3
 800f5e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f5e8:	64bb      	str	r3, [r7, #72]	; 0x48
 800f5ea:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f5ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f5f0:	e841 2300 	strex	r3, r2, [r1]
 800f5f4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f5f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d1e6      	bne.n	800f5ca <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	3308      	adds	r3, #8
 800f602:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f606:	e853 3f00 	ldrex	r3, [r3]
 800f60a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f60e:	f043 0301 	orr.w	r3, r3, #1
 800f612:	653b      	str	r3, [r7, #80]	; 0x50
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	3308      	adds	r3, #8
 800f61a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f61c:	637a      	str	r2, [r7, #52]	; 0x34
 800f61e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f620:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f622:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f624:	e841 2300 	strex	r3, r2, [r1]
 800f628:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d1e5      	bne.n	800f5fc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	3308      	adds	r3, #8
 800f636:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f638:	697b      	ldr	r3, [r7, #20]
 800f63a:	e853 3f00 	ldrex	r3, [r3]
 800f63e:	613b      	str	r3, [r7, #16]
   return(result);
 800f640:	693b      	ldr	r3, [r7, #16]
 800f642:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f646:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	3308      	adds	r3, #8
 800f64e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f650:	623a      	str	r2, [r7, #32]
 800f652:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f654:	69f9      	ldr	r1, [r7, #28]
 800f656:	6a3a      	ldr	r2, [r7, #32]
 800f658:	e841 2300 	strex	r3, r2, [r1]
 800f65c:	61bb      	str	r3, [r7, #24]
   return(result);
 800f65e:	69bb      	ldr	r3, [r7, #24]
 800f660:	2b00      	cmp	r3, #0
 800f662:	d1e5      	bne.n	800f630 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800f664:	2300      	movs	r3, #0
}
 800f666:	4618      	mov	r0, r3
 800f668:	3758      	adds	r7, #88	; 0x58
 800f66a:	46bd      	mov	sp, r7
 800f66c:	bd80      	pop	{r7, pc}
 800f66e:	bf00      	nop
 800f670:	0800f87f 	.word	0x0800f87f
 800f674:	0800f9a7 	.word	0x0800f9a7
 800f678:	0800f9e5 	.word	0x0800f9e5

0800f67c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f67c:	b480      	push	{r7}
 800f67e:	b08f      	sub	sp, #60	; 0x3c
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f68a:	6a3b      	ldr	r3, [r7, #32]
 800f68c:	e853 3f00 	ldrex	r3, [r3]
 800f690:	61fb      	str	r3, [r7, #28]
   return(result);
 800f692:	69fb      	ldr	r3, [r7, #28]
 800f694:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f698:	637b      	str	r3, [r7, #52]	; 0x34
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	461a      	mov	r2, r3
 800f6a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f6a4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f6a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f6aa:	e841 2300 	strex	r3, r2, [r1]
 800f6ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d1e6      	bne.n	800f684 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	3308      	adds	r3, #8
 800f6bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	e853 3f00 	ldrex	r3, [r3]
 800f6c4:	60bb      	str	r3, [r7, #8]
   return(result);
 800f6c6:	68bb      	ldr	r3, [r7, #8]
 800f6c8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800f6cc:	633b      	str	r3, [r7, #48]	; 0x30
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	3308      	adds	r3, #8
 800f6d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6d6:	61ba      	str	r2, [r7, #24]
 800f6d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6da:	6979      	ldr	r1, [r7, #20]
 800f6dc:	69ba      	ldr	r2, [r7, #24]
 800f6de:	e841 2300 	strex	r3, r2, [r1]
 800f6e2:	613b      	str	r3, [r7, #16]
   return(result);
 800f6e4:	693b      	ldr	r3, [r7, #16]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d1e5      	bne.n	800f6b6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	2220      	movs	r2, #32
 800f6ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800f6f2:	bf00      	nop
 800f6f4:	373c      	adds	r7, #60	; 0x3c
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fc:	4770      	bx	lr
	...

0800f700 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f700:	b480      	push	{r7}
 800f702:	b095      	sub	sp, #84	; 0x54
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f70e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f710:	e853 3f00 	ldrex	r3, [r3]
 800f714:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f718:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f71c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	461a      	mov	r2, r3
 800f724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f726:	643b      	str	r3, [r7, #64]	; 0x40
 800f728:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f72a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f72c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f72e:	e841 2300 	strex	r3, r2, [r1]
 800f732:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f736:	2b00      	cmp	r3, #0
 800f738:	d1e6      	bne.n	800f708 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	3308      	adds	r3, #8
 800f740:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f742:	6a3b      	ldr	r3, [r7, #32]
 800f744:	e853 3f00 	ldrex	r3, [r3]
 800f748:	61fb      	str	r3, [r7, #28]
   return(result);
 800f74a:	69fa      	ldr	r2, [r7, #28]
 800f74c:	4b1e      	ldr	r3, [pc, #120]	; (800f7c8 <UART_EndRxTransfer+0xc8>)
 800f74e:	4013      	ands	r3, r2
 800f750:	64bb      	str	r3, [r7, #72]	; 0x48
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	3308      	adds	r3, #8
 800f758:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f75a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f75c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f75e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f760:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f762:	e841 2300 	strex	r3, r2, [r1]
 800f766:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d1e5      	bne.n	800f73a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f772:	2b01      	cmp	r3, #1
 800f774:	d118      	bne.n	800f7a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	e853 3f00 	ldrex	r3, [r3]
 800f782:	60bb      	str	r3, [r7, #8]
   return(result);
 800f784:	68bb      	ldr	r3, [r7, #8]
 800f786:	f023 0310 	bic.w	r3, r3, #16
 800f78a:	647b      	str	r3, [r7, #68]	; 0x44
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	461a      	mov	r2, r3
 800f792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f794:	61bb      	str	r3, [r7, #24]
 800f796:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f798:	6979      	ldr	r1, [r7, #20]
 800f79a:	69ba      	ldr	r2, [r7, #24]
 800f79c:	e841 2300 	strex	r3, r2, [r1]
 800f7a0:	613b      	str	r3, [r7, #16]
   return(result);
 800f7a2:	693b      	ldr	r3, [r7, #16]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d1e6      	bne.n	800f776 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	2220      	movs	r2, #32
 800f7ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f7bc:	bf00      	nop
 800f7be:	3754      	adds	r7, #84	; 0x54
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c6:	4770      	bx	lr
 800f7c8:	effffffe 	.word	0xeffffffe

0800f7cc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b090      	sub	sp, #64	; 0x40
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7d8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	69db      	ldr	r3, [r3, #28]
 800f7de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f7e2:	d037      	beq.n	800f854 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800f7e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f7ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	3308      	adds	r3, #8
 800f7f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7f6:	e853 3f00 	ldrex	r3, [r3]
 800f7fa:	623b      	str	r3, [r7, #32]
   return(result);
 800f7fc:	6a3b      	ldr	r3, [r7, #32]
 800f7fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f802:	63bb      	str	r3, [r7, #56]	; 0x38
 800f804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	3308      	adds	r3, #8
 800f80a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f80c:	633a      	str	r2, [r7, #48]	; 0x30
 800f80e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f810:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f814:	e841 2300 	strex	r3, r2, [r1]
 800f818:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d1e5      	bne.n	800f7ec <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f826:	693b      	ldr	r3, [r7, #16]
 800f828:	e853 3f00 	ldrex	r3, [r3]
 800f82c:	60fb      	str	r3, [r7, #12]
   return(result);
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f834:	637b      	str	r3, [r7, #52]	; 0x34
 800f836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	461a      	mov	r2, r3
 800f83c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f83e:	61fb      	str	r3, [r7, #28]
 800f840:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f842:	69b9      	ldr	r1, [r7, #24]
 800f844:	69fa      	ldr	r2, [r7, #28]
 800f846:	e841 2300 	strex	r3, r2, [r1]
 800f84a:	617b      	str	r3, [r7, #20]
   return(result);
 800f84c:	697b      	ldr	r3, [r7, #20]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d1e6      	bne.n	800f820 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f852:	e002      	b.n	800f85a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800f854:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f856:	f7f4 fac3 	bl	8003de0 <HAL_UART_TxCpltCallback>
}
 800f85a:	bf00      	nop
 800f85c:	3740      	adds	r7, #64	; 0x40
 800f85e:	46bd      	mov	sp, r7
 800f860:	bd80      	pop	{r7, pc}

0800f862 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f862:	b580      	push	{r7, lr}
 800f864:	b084      	sub	sp, #16
 800f866:	af00      	add	r7, sp, #0
 800f868:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f86e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800f870:	68f8      	ldr	r0, [r7, #12]
 800f872:	f7fe fe13 	bl	800e49c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f876:	bf00      	nop
 800f878:	3710      	adds	r7, #16
 800f87a:	46bd      	mov	sp, r7
 800f87c:	bd80      	pop	{r7, pc}

0800f87e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f87e:	b580      	push	{r7, lr}
 800f880:	b09c      	sub	sp, #112	; 0x70
 800f882:	af00      	add	r7, sp, #0
 800f884:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f88a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	69db      	ldr	r3, [r3, #28]
 800f890:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f894:	d071      	beq.n	800f97a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800f896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f898:	2200      	movs	r2, #0
 800f89a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f89e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8a6:	e853 3f00 	ldrex	r3, [r3]
 800f8aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f8ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f8ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f8b2:	66bb      	str	r3, [r7, #104]	; 0x68
 800f8b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	461a      	mov	r2, r3
 800f8ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f8bc:	65bb      	str	r3, [r7, #88]	; 0x58
 800f8be:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f8c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f8c4:	e841 2300 	strex	r3, r2, [r1]
 800f8c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f8ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d1e6      	bne.n	800f89e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f8d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	3308      	adds	r3, #8
 800f8d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8da:	e853 3f00 	ldrex	r3, [r3]
 800f8de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f8e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8e2:	f023 0301 	bic.w	r3, r3, #1
 800f8e6:	667b      	str	r3, [r7, #100]	; 0x64
 800f8e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	3308      	adds	r3, #8
 800f8ee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f8f0:	647a      	str	r2, [r7, #68]	; 0x44
 800f8f2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f8f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f8f8:	e841 2300 	strex	r3, r2, [r1]
 800f8fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f8fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f900:	2b00      	cmp	r3, #0
 800f902:	d1e5      	bne.n	800f8d0 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	3308      	adds	r3, #8
 800f90a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f90e:	e853 3f00 	ldrex	r3, [r3]
 800f912:	623b      	str	r3, [r7, #32]
   return(result);
 800f914:	6a3b      	ldr	r3, [r7, #32]
 800f916:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f91a:	663b      	str	r3, [r7, #96]	; 0x60
 800f91c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	3308      	adds	r3, #8
 800f922:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f924:	633a      	str	r2, [r7, #48]	; 0x30
 800f926:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f928:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f92a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f92c:	e841 2300 	strex	r3, r2, [r1]
 800f930:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f934:	2b00      	cmp	r3, #0
 800f936:	d1e5      	bne.n	800f904 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f93a:	2220      	movs	r2, #32
 800f93c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f940:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f942:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f944:	2b01      	cmp	r3, #1
 800f946:	d118      	bne.n	800f97a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f94e:	693b      	ldr	r3, [r7, #16]
 800f950:	e853 3f00 	ldrex	r3, [r3]
 800f954:	60fb      	str	r3, [r7, #12]
   return(result);
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	f023 0310 	bic.w	r3, r3, #16
 800f95c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f95e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	461a      	mov	r2, r3
 800f964:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f966:	61fb      	str	r3, [r7, #28]
 800f968:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f96a:	69b9      	ldr	r1, [r7, #24]
 800f96c:	69fa      	ldr	r2, [r7, #28]
 800f96e:	e841 2300 	strex	r3, r2, [r1]
 800f972:	617b      	str	r3, [r7, #20]
   return(result);
 800f974:	697b      	ldr	r3, [r7, #20]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d1e6      	bne.n	800f948 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f97a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f97c:	2200      	movs	r2, #0
 800f97e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f984:	2b01      	cmp	r3, #1
 800f986:	d107      	bne.n	800f998 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f988:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f98a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f98e:	4619      	mov	r1, r3
 800f990:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f992:	f7fe fda1 	bl	800e4d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f996:	e002      	b.n	800f99e <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800f998:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f99a:	f7fe fd89 	bl	800e4b0 <HAL_UART_RxCpltCallback>
}
 800f99e:	bf00      	nop
 800f9a0:	3770      	adds	r7, #112	; 0x70
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	bd80      	pop	{r7, pc}

0800f9a6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f9a6:	b580      	push	{r7, lr}
 800f9a8:	b084      	sub	sp, #16
 800f9aa:	af00      	add	r7, sp, #0
 800f9ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9b2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	2201      	movs	r2, #1
 800f9b8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9be:	2b01      	cmp	r3, #1
 800f9c0:	d109      	bne.n	800f9d6 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f9c8:	085b      	lsrs	r3, r3, #1
 800f9ca:	b29b      	uxth	r3, r3
 800f9cc:	4619      	mov	r1, r3
 800f9ce:	68f8      	ldr	r0, [r7, #12]
 800f9d0:	f7fe fd82 	bl	800e4d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f9d4:	e002      	b.n	800f9dc <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800f9d6:	68f8      	ldr	r0, [r7, #12]
 800f9d8:	f7fe fd74 	bl	800e4c4 <HAL_UART_RxHalfCpltCallback>
}
 800f9dc:	bf00      	nop
 800f9de:	3710      	adds	r7, #16
 800f9e0:	46bd      	mov	sp, r7
 800f9e2:	bd80      	pop	{r7, pc}

0800f9e4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b086      	sub	sp, #24
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9f0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f9f2:	697b      	ldr	r3, [r7, #20]
 800f9f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f9f8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f9fa:	697b      	ldr	r3, [r7, #20]
 800f9fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa00:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800fa02:	697b      	ldr	r3, [r7, #20]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	689b      	ldr	r3, [r3, #8]
 800fa08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa0c:	2b80      	cmp	r3, #128	; 0x80
 800fa0e:	d109      	bne.n	800fa24 <UART_DMAError+0x40>
 800fa10:	693b      	ldr	r3, [r7, #16]
 800fa12:	2b21      	cmp	r3, #33	; 0x21
 800fa14:	d106      	bne.n	800fa24 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800fa16:	697b      	ldr	r3, [r7, #20]
 800fa18:	2200      	movs	r2, #0
 800fa1a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800fa1e:	6978      	ldr	r0, [r7, #20]
 800fa20:	f7ff fe2c 	bl	800f67c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800fa24:	697b      	ldr	r3, [r7, #20]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	689b      	ldr	r3, [r3, #8]
 800fa2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa2e:	2b40      	cmp	r3, #64	; 0x40
 800fa30:	d109      	bne.n	800fa46 <UART_DMAError+0x62>
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	2b22      	cmp	r3, #34	; 0x22
 800fa36:	d106      	bne.n	800fa46 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800fa38:	697b      	ldr	r3, [r7, #20]
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800fa40:	6978      	ldr	r0, [r7, #20]
 800fa42:	f7ff fe5d 	bl	800f700 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fa46:	697b      	ldr	r3, [r7, #20]
 800fa48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa4c:	f043 0210 	orr.w	r2, r3, #16
 800fa50:	697b      	ldr	r3, [r7, #20]
 800fa52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fa56:	6978      	ldr	r0, [r7, #20]
 800fa58:	f7f4 f9a6 	bl	8003da8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fa5c:	bf00      	nop
 800fa5e:	3718      	adds	r7, #24
 800fa60:	46bd      	mov	sp, r7
 800fa62:	bd80      	pop	{r7, pc}

0800fa64 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b084      	sub	sp, #16
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	2200      	movs	r2, #0
 800fa76:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	2200      	movs	r2, #0
 800fa7e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fa82:	68f8      	ldr	r0, [r7, #12]
 800fa84:	f7f4 f990 	bl	8003da8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fa88:	bf00      	nop
 800fa8a:	3710      	adds	r7, #16
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	bd80      	pop	{r7, pc}

0800fa90 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b088      	sub	sp, #32
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	e853 3f00 	ldrex	r3, [r3]
 800faa4:	60bb      	str	r3, [r7, #8]
   return(result);
 800faa6:	68bb      	ldr	r3, [r7, #8]
 800faa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800faac:	61fb      	str	r3, [r7, #28]
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	461a      	mov	r2, r3
 800fab4:	69fb      	ldr	r3, [r7, #28]
 800fab6:	61bb      	str	r3, [r7, #24]
 800fab8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faba:	6979      	ldr	r1, [r7, #20]
 800fabc:	69ba      	ldr	r2, [r7, #24]
 800fabe:	e841 2300 	strex	r3, r2, [r1]
 800fac2:	613b      	str	r3, [r7, #16]
   return(result);
 800fac4:	693b      	ldr	r3, [r7, #16]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d1e6      	bne.n	800fa98 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	2220      	movs	r2, #32
 800face:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	2200      	movs	r2, #0
 800fad6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fad8:	6878      	ldr	r0, [r7, #4]
 800fada:	f7f4 f981 	bl	8003de0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fade:	bf00      	nop
 800fae0:	3720      	adds	r7, #32
 800fae2:	46bd      	mov	sp, r7
 800fae4:	bd80      	pop	{r7, pc}

0800fae6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fae6:	b480      	push	{r7}
 800fae8:	b083      	sub	sp, #12
 800faea:	af00      	add	r7, sp, #0
 800faec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800faee:	bf00      	nop
 800faf0:	370c      	adds	r7, #12
 800faf2:	46bd      	mov	sp, r7
 800faf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf8:	4770      	bx	lr

0800fafa <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fafa:	b480      	push	{r7}
 800fafc:	b083      	sub	sp, #12
 800fafe:	af00      	add	r7, sp, #0
 800fb00:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fb02:	bf00      	nop
 800fb04:	370c      	adds	r7, #12
 800fb06:	46bd      	mov	sp, r7
 800fb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0c:	4770      	bx	lr

0800fb0e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fb0e:	b480      	push	{r7}
 800fb10:	b083      	sub	sp, #12
 800fb12:	af00      	add	r7, sp, #0
 800fb14:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fb16:	bf00      	nop
 800fb18:	370c      	adds	r7, #12
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb20:	4770      	bx	lr

0800fb22 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fb22:	b480      	push	{r7}
 800fb24:	b085      	sub	sp, #20
 800fb26:	af00      	add	r7, sp, #0
 800fb28:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fb30:	2b01      	cmp	r3, #1
 800fb32:	d101      	bne.n	800fb38 <HAL_UARTEx_DisableFifoMode+0x16>
 800fb34:	2302      	movs	r3, #2
 800fb36:	e027      	b.n	800fb88 <HAL_UARTEx_DisableFifoMode+0x66>
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	2201      	movs	r2, #1
 800fb3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	2224      	movs	r2, #36	; 0x24
 800fb44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	681a      	ldr	r2, [r3, #0]
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	f022 0201 	bic.w	r2, r2, #1
 800fb5e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fb66:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2200      	movs	r2, #0
 800fb6c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	68fa      	ldr	r2, [r7, #12]
 800fb74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	2220      	movs	r2, #32
 800fb7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	2200      	movs	r2, #0
 800fb82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fb86:	2300      	movs	r3, #0
}
 800fb88:	4618      	mov	r0, r3
 800fb8a:	3714      	adds	r7, #20
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb92:	4770      	bx	lr

0800fb94 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b084      	sub	sp, #16
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	6078      	str	r0, [r7, #4]
 800fb9c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fba4:	2b01      	cmp	r3, #1
 800fba6:	d101      	bne.n	800fbac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fba8:	2302      	movs	r3, #2
 800fbaa:	e02d      	b.n	800fc08 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	2201      	movs	r2, #1
 800fbb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	2224      	movs	r2, #36	; 0x24
 800fbb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	681a      	ldr	r2, [r3, #0]
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	f022 0201 	bic.w	r2, r2, #1
 800fbd2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	689b      	ldr	r3, [r3, #8]
 800fbda:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	683a      	ldr	r2, [r7, #0]
 800fbe4:	430a      	orrs	r2, r1
 800fbe6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fbe8:	6878      	ldr	r0, [r7, #4]
 800fbea:	f000 f84f 	bl	800fc8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	68fa      	ldr	r2, [r7, #12]
 800fbf4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	2220      	movs	r2, #32
 800fbfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	2200      	movs	r2, #0
 800fc02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fc06:	2300      	movs	r3, #0
}
 800fc08:	4618      	mov	r0, r3
 800fc0a:	3710      	adds	r7, #16
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	bd80      	pop	{r7, pc}

0800fc10 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b084      	sub	sp, #16
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
 800fc18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fc20:	2b01      	cmp	r3, #1
 800fc22:	d101      	bne.n	800fc28 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fc24:	2302      	movs	r3, #2
 800fc26:	e02d      	b.n	800fc84 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	2201      	movs	r2, #1
 800fc2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	2224      	movs	r2, #36	; 0x24
 800fc34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	681a      	ldr	r2, [r3, #0]
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	f022 0201 	bic.w	r2, r2, #1
 800fc4e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	689b      	ldr	r3, [r3, #8]
 800fc56:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	683a      	ldr	r2, [r7, #0]
 800fc60:	430a      	orrs	r2, r1
 800fc62:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fc64:	6878      	ldr	r0, [r7, #4]
 800fc66:	f000 f811 	bl	800fc8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	68fa      	ldr	r2, [r7, #12]
 800fc70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	2220      	movs	r2, #32
 800fc76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	2200      	movs	r2, #0
 800fc7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fc82:	2300      	movs	r3, #0
}
 800fc84:	4618      	mov	r0, r3
 800fc86:	3710      	adds	r7, #16
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	bd80      	pop	{r7, pc}

0800fc8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fc8c:	b480      	push	{r7}
 800fc8e:	b085      	sub	sp, #20
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d108      	bne.n	800fcae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	2201      	movs	r2, #1
 800fca0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	2201      	movs	r2, #1
 800fca8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fcac:	e031      	b.n	800fd12 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fcae:	2310      	movs	r3, #16
 800fcb0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fcb2:	2310      	movs	r3, #16
 800fcb4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	689b      	ldr	r3, [r3, #8]
 800fcbc:	0e5b      	lsrs	r3, r3, #25
 800fcbe:	b2db      	uxtb	r3, r3
 800fcc0:	f003 0307 	and.w	r3, r3, #7
 800fcc4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	689b      	ldr	r3, [r3, #8]
 800fccc:	0f5b      	lsrs	r3, r3, #29
 800fcce:	b2db      	uxtb	r3, r3
 800fcd0:	f003 0307 	and.w	r3, r3, #7
 800fcd4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fcd6:	7bbb      	ldrb	r3, [r7, #14]
 800fcd8:	7b3a      	ldrb	r2, [r7, #12]
 800fcda:	4911      	ldr	r1, [pc, #68]	; (800fd20 <UARTEx_SetNbDataToProcess+0x94>)
 800fcdc:	5c8a      	ldrb	r2, [r1, r2]
 800fcde:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fce2:	7b3a      	ldrb	r2, [r7, #12]
 800fce4:	490f      	ldr	r1, [pc, #60]	; (800fd24 <UARTEx_SetNbDataToProcess+0x98>)
 800fce6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fce8:	fb93 f3f2 	sdiv	r3, r3, r2
 800fcec:	b29a      	uxth	r2, r3
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fcf4:	7bfb      	ldrb	r3, [r7, #15]
 800fcf6:	7b7a      	ldrb	r2, [r7, #13]
 800fcf8:	4909      	ldr	r1, [pc, #36]	; (800fd20 <UARTEx_SetNbDataToProcess+0x94>)
 800fcfa:	5c8a      	ldrb	r2, [r1, r2]
 800fcfc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fd00:	7b7a      	ldrb	r2, [r7, #13]
 800fd02:	4908      	ldr	r1, [pc, #32]	; (800fd24 <UARTEx_SetNbDataToProcess+0x98>)
 800fd04:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fd06:	fb93 f3f2 	sdiv	r3, r3, r2
 800fd0a:	b29a      	uxth	r2, r3
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800fd12:	bf00      	nop
 800fd14:	3714      	adds	r7, #20
 800fd16:	46bd      	mov	sp, r7
 800fd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1c:	4770      	bx	lr
 800fd1e:	bf00      	nop
 800fd20:	080103ac 	.word	0x080103ac
 800fd24:	080103b4 	.word	0x080103b4

0800fd28 <realloc>:
 800fd28:	4b02      	ldr	r3, [pc, #8]	; (800fd34 <realloc+0xc>)
 800fd2a:	460a      	mov	r2, r1
 800fd2c:	4601      	mov	r1, r0
 800fd2e:	6818      	ldr	r0, [r3, #0]
 800fd30:	f000 b802 	b.w	800fd38 <_realloc_r>
 800fd34:	240000ac 	.word	0x240000ac

0800fd38 <_realloc_r>:
 800fd38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd3c:	4680      	mov	r8, r0
 800fd3e:	4614      	mov	r4, r2
 800fd40:	460e      	mov	r6, r1
 800fd42:	b921      	cbnz	r1, 800fd4e <_realloc_r+0x16>
 800fd44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd48:	4611      	mov	r1, r2
 800fd4a:	f000 b8d3 	b.w	800fef4 <_malloc_r>
 800fd4e:	b92a      	cbnz	r2, 800fd5c <_realloc_r+0x24>
 800fd50:	f000 f864 	bl	800fe1c <_free_r>
 800fd54:	4625      	mov	r5, r4
 800fd56:	4628      	mov	r0, r5
 800fd58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd5c:	f000 f956 	bl	801000c <_malloc_usable_size_r>
 800fd60:	4284      	cmp	r4, r0
 800fd62:	4607      	mov	r7, r0
 800fd64:	d802      	bhi.n	800fd6c <_realloc_r+0x34>
 800fd66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fd6a:	d812      	bhi.n	800fd92 <_realloc_r+0x5a>
 800fd6c:	4621      	mov	r1, r4
 800fd6e:	4640      	mov	r0, r8
 800fd70:	f000 f8c0 	bl	800fef4 <_malloc_r>
 800fd74:	4605      	mov	r5, r0
 800fd76:	2800      	cmp	r0, #0
 800fd78:	d0ed      	beq.n	800fd56 <_realloc_r+0x1e>
 800fd7a:	42bc      	cmp	r4, r7
 800fd7c:	4622      	mov	r2, r4
 800fd7e:	4631      	mov	r1, r6
 800fd80:	bf28      	it	cs
 800fd82:	463a      	movcs	r2, r7
 800fd84:	f000 f83c 	bl	800fe00 <memcpy>
 800fd88:	4631      	mov	r1, r6
 800fd8a:	4640      	mov	r0, r8
 800fd8c:	f000 f846 	bl	800fe1c <_free_r>
 800fd90:	e7e1      	b.n	800fd56 <_realloc_r+0x1e>
 800fd92:	4635      	mov	r5, r6
 800fd94:	e7df      	b.n	800fd56 <_realloc_r+0x1e>

0800fd96 <memset>:
 800fd96:	4402      	add	r2, r0
 800fd98:	4603      	mov	r3, r0
 800fd9a:	4293      	cmp	r3, r2
 800fd9c:	d100      	bne.n	800fda0 <memset+0xa>
 800fd9e:	4770      	bx	lr
 800fda0:	f803 1b01 	strb.w	r1, [r3], #1
 800fda4:	e7f9      	b.n	800fd9a <memset+0x4>
	...

0800fda8 <__errno>:
 800fda8:	4b01      	ldr	r3, [pc, #4]	; (800fdb0 <__errno+0x8>)
 800fdaa:	6818      	ldr	r0, [r3, #0]
 800fdac:	4770      	bx	lr
 800fdae:	bf00      	nop
 800fdb0:	240000ac 	.word	0x240000ac

0800fdb4 <__libc_init_array>:
 800fdb4:	b570      	push	{r4, r5, r6, lr}
 800fdb6:	4d0d      	ldr	r5, [pc, #52]	; (800fdec <__libc_init_array+0x38>)
 800fdb8:	4c0d      	ldr	r4, [pc, #52]	; (800fdf0 <__libc_init_array+0x3c>)
 800fdba:	1b64      	subs	r4, r4, r5
 800fdbc:	10a4      	asrs	r4, r4, #2
 800fdbe:	2600      	movs	r6, #0
 800fdc0:	42a6      	cmp	r6, r4
 800fdc2:	d109      	bne.n	800fdd8 <__libc_init_array+0x24>
 800fdc4:	4d0b      	ldr	r5, [pc, #44]	; (800fdf4 <__libc_init_array+0x40>)
 800fdc6:	4c0c      	ldr	r4, [pc, #48]	; (800fdf8 <__libc_init_array+0x44>)
 800fdc8:	f000 f938 	bl	801003c <_init>
 800fdcc:	1b64      	subs	r4, r4, r5
 800fdce:	10a4      	asrs	r4, r4, #2
 800fdd0:	2600      	movs	r6, #0
 800fdd2:	42a6      	cmp	r6, r4
 800fdd4:	d105      	bne.n	800fde2 <__libc_init_array+0x2e>
 800fdd6:	bd70      	pop	{r4, r5, r6, pc}
 800fdd8:	f855 3b04 	ldr.w	r3, [r5], #4
 800fddc:	4798      	blx	r3
 800fdde:	3601      	adds	r6, #1
 800fde0:	e7ee      	b.n	800fdc0 <__libc_init_array+0xc>
 800fde2:	f855 3b04 	ldr.w	r3, [r5], #4
 800fde6:	4798      	blx	r3
 800fde8:	3601      	adds	r6, #1
 800fdea:	e7f2      	b.n	800fdd2 <__libc_init_array+0x1e>
 800fdec:	080103c4 	.word	0x080103c4
 800fdf0:	080103c4 	.word	0x080103c4
 800fdf4:	080103c4 	.word	0x080103c4
 800fdf8:	080103d8 	.word	0x080103d8

0800fdfc <__retarget_lock_acquire_recursive>:
 800fdfc:	4770      	bx	lr

0800fdfe <__retarget_lock_release_recursive>:
 800fdfe:	4770      	bx	lr

0800fe00 <memcpy>:
 800fe00:	440a      	add	r2, r1
 800fe02:	4291      	cmp	r1, r2
 800fe04:	f100 33ff 	add.w	r3, r0, #4294967295
 800fe08:	d100      	bne.n	800fe0c <memcpy+0xc>
 800fe0a:	4770      	bx	lr
 800fe0c:	b510      	push	{r4, lr}
 800fe0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe12:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fe16:	4291      	cmp	r1, r2
 800fe18:	d1f9      	bne.n	800fe0e <memcpy+0xe>
 800fe1a:	bd10      	pop	{r4, pc}

0800fe1c <_free_r>:
 800fe1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fe1e:	2900      	cmp	r1, #0
 800fe20:	d044      	beq.n	800feac <_free_r+0x90>
 800fe22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe26:	9001      	str	r0, [sp, #4]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	f1a1 0404 	sub.w	r4, r1, #4
 800fe2e:	bfb8      	it	lt
 800fe30:	18e4      	addlt	r4, r4, r3
 800fe32:	f000 f8df 	bl	800fff4 <__malloc_lock>
 800fe36:	4a1e      	ldr	r2, [pc, #120]	; (800feb0 <_free_r+0x94>)
 800fe38:	9801      	ldr	r0, [sp, #4]
 800fe3a:	6813      	ldr	r3, [r2, #0]
 800fe3c:	b933      	cbnz	r3, 800fe4c <_free_r+0x30>
 800fe3e:	6063      	str	r3, [r4, #4]
 800fe40:	6014      	str	r4, [r2, #0]
 800fe42:	b003      	add	sp, #12
 800fe44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fe48:	f000 b8da 	b.w	8010000 <__malloc_unlock>
 800fe4c:	42a3      	cmp	r3, r4
 800fe4e:	d908      	bls.n	800fe62 <_free_r+0x46>
 800fe50:	6825      	ldr	r5, [r4, #0]
 800fe52:	1961      	adds	r1, r4, r5
 800fe54:	428b      	cmp	r3, r1
 800fe56:	bf01      	itttt	eq
 800fe58:	6819      	ldreq	r1, [r3, #0]
 800fe5a:	685b      	ldreq	r3, [r3, #4]
 800fe5c:	1949      	addeq	r1, r1, r5
 800fe5e:	6021      	streq	r1, [r4, #0]
 800fe60:	e7ed      	b.n	800fe3e <_free_r+0x22>
 800fe62:	461a      	mov	r2, r3
 800fe64:	685b      	ldr	r3, [r3, #4]
 800fe66:	b10b      	cbz	r3, 800fe6c <_free_r+0x50>
 800fe68:	42a3      	cmp	r3, r4
 800fe6a:	d9fa      	bls.n	800fe62 <_free_r+0x46>
 800fe6c:	6811      	ldr	r1, [r2, #0]
 800fe6e:	1855      	adds	r5, r2, r1
 800fe70:	42a5      	cmp	r5, r4
 800fe72:	d10b      	bne.n	800fe8c <_free_r+0x70>
 800fe74:	6824      	ldr	r4, [r4, #0]
 800fe76:	4421      	add	r1, r4
 800fe78:	1854      	adds	r4, r2, r1
 800fe7a:	42a3      	cmp	r3, r4
 800fe7c:	6011      	str	r1, [r2, #0]
 800fe7e:	d1e0      	bne.n	800fe42 <_free_r+0x26>
 800fe80:	681c      	ldr	r4, [r3, #0]
 800fe82:	685b      	ldr	r3, [r3, #4]
 800fe84:	6053      	str	r3, [r2, #4]
 800fe86:	440c      	add	r4, r1
 800fe88:	6014      	str	r4, [r2, #0]
 800fe8a:	e7da      	b.n	800fe42 <_free_r+0x26>
 800fe8c:	d902      	bls.n	800fe94 <_free_r+0x78>
 800fe8e:	230c      	movs	r3, #12
 800fe90:	6003      	str	r3, [r0, #0]
 800fe92:	e7d6      	b.n	800fe42 <_free_r+0x26>
 800fe94:	6825      	ldr	r5, [r4, #0]
 800fe96:	1961      	adds	r1, r4, r5
 800fe98:	428b      	cmp	r3, r1
 800fe9a:	bf04      	itt	eq
 800fe9c:	6819      	ldreq	r1, [r3, #0]
 800fe9e:	685b      	ldreq	r3, [r3, #4]
 800fea0:	6063      	str	r3, [r4, #4]
 800fea2:	bf04      	itt	eq
 800fea4:	1949      	addeq	r1, r1, r5
 800fea6:	6021      	streq	r1, [r4, #0]
 800fea8:	6054      	str	r4, [r2, #4]
 800feaa:	e7ca      	b.n	800fe42 <_free_r+0x26>
 800feac:	b003      	add	sp, #12
 800feae:	bd30      	pop	{r4, r5, pc}
 800feb0:	2400213c 	.word	0x2400213c

0800feb4 <sbrk_aligned>:
 800feb4:	b570      	push	{r4, r5, r6, lr}
 800feb6:	4e0e      	ldr	r6, [pc, #56]	; (800fef0 <sbrk_aligned+0x3c>)
 800feb8:	460c      	mov	r4, r1
 800feba:	6831      	ldr	r1, [r6, #0]
 800febc:	4605      	mov	r5, r0
 800febe:	b911      	cbnz	r1, 800fec6 <sbrk_aligned+0x12>
 800fec0:	f000 f8ac 	bl	801001c <_sbrk_r>
 800fec4:	6030      	str	r0, [r6, #0]
 800fec6:	4621      	mov	r1, r4
 800fec8:	4628      	mov	r0, r5
 800feca:	f000 f8a7 	bl	801001c <_sbrk_r>
 800fece:	1c43      	adds	r3, r0, #1
 800fed0:	d00a      	beq.n	800fee8 <sbrk_aligned+0x34>
 800fed2:	1cc4      	adds	r4, r0, #3
 800fed4:	f024 0403 	bic.w	r4, r4, #3
 800fed8:	42a0      	cmp	r0, r4
 800feda:	d007      	beq.n	800feec <sbrk_aligned+0x38>
 800fedc:	1a21      	subs	r1, r4, r0
 800fede:	4628      	mov	r0, r5
 800fee0:	f000 f89c 	bl	801001c <_sbrk_r>
 800fee4:	3001      	adds	r0, #1
 800fee6:	d101      	bne.n	800feec <sbrk_aligned+0x38>
 800fee8:	f04f 34ff 	mov.w	r4, #4294967295
 800feec:	4620      	mov	r0, r4
 800feee:	bd70      	pop	{r4, r5, r6, pc}
 800fef0:	24002140 	.word	0x24002140

0800fef4 <_malloc_r>:
 800fef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fef8:	1ccd      	adds	r5, r1, #3
 800fefa:	f025 0503 	bic.w	r5, r5, #3
 800fefe:	3508      	adds	r5, #8
 800ff00:	2d0c      	cmp	r5, #12
 800ff02:	bf38      	it	cc
 800ff04:	250c      	movcc	r5, #12
 800ff06:	2d00      	cmp	r5, #0
 800ff08:	4607      	mov	r7, r0
 800ff0a:	db01      	blt.n	800ff10 <_malloc_r+0x1c>
 800ff0c:	42a9      	cmp	r1, r5
 800ff0e:	d905      	bls.n	800ff1c <_malloc_r+0x28>
 800ff10:	230c      	movs	r3, #12
 800ff12:	603b      	str	r3, [r7, #0]
 800ff14:	2600      	movs	r6, #0
 800ff16:	4630      	mov	r0, r6
 800ff18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff1c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800fff0 <_malloc_r+0xfc>
 800ff20:	f000 f868 	bl	800fff4 <__malloc_lock>
 800ff24:	f8d8 3000 	ldr.w	r3, [r8]
 800ff28:	461c      	mov	r4, r3
 800ff2a:	bb5c      	cbnz	r4, 800ff84 <_malloc_r+0x90>
 800ff2c:	4629      	mov	r1, r5
 800ff2e:	4638      	mov	r0, r7
 800ff30:	f7ff ffc0 	bl	800feb4 <sbrk_aligned>
 800ff34:	1c43      	adds	r3, r0, #1
 800ff36:	4604      	mov	r4, r0
 800ff38:	d155      	bne.n	800ffe6 <_malloc_r+0xf2>
 800ff3a:	f8d8 4000 	ldr.w	r4, [r8]
 800ff3e:	4626      	mov	r6, r4
 800ff40:	2e00      	cmp	r6, #0
 800ff42:	d145      	bne.n	800ffd0 <_malloc_r+0xdc>
 800ff44:	2c00      	cmp	r4, #0
 800ff46:	d048      	beq.n	800ffda <_malloc_r+0xe6>
 800ff48:	6823      	ldr	r3, [r4, #0]
 800ff4a:	4631      	mov	r1, r6
 800ff4c:	4638      	mov	r0, r7
 800ff4e:	eb04 0903 	add.w	r9, r4, r3
 800ff52:	f000 f863 	bl	801001c <_sbrk_r>
 800ff56:	4581      	cmp	r9, r0
 800ff58:	d13f      	bne.n	800ffda <_malloc_r+0xe6>
 800ff5a:	6821      	ldr	r1, [r4, #0]
 800ff5c:	1a6d      	subs	r5, r5, r1
 800ff5e:	4629      	mov	r1, r5
 800ff60:	4638      	mov	r0, r7
 800ff62:	f7ff ffa7 	bl	800feb4 <sbrk_aligned>
 800ff66:	3001      	adds	r0, #1
 800ff68:	d037      	beq.n	800ffda <_malloc_r+0xe6>
 800ff6a:	6823      	ldr	r3, [r4, #0]
 800ff6c:	442b      	add	r3, r5
 800ff6e:	6023      	str	r3, [r4, #0]
 800ff70:	f8d8 3000 	ldr.w	r3, [r8]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d038      	beq.n	800ffea <_malloc_r+0xf6>
 800ff78:	685a      	ldr	r2, [r3, #4]
 800ff7a:	42a2      	cmp	r2, r4
 800ff7c:	d12b      	bne.n	800ffd6 <_malloc_r+0xe2>
 800ff7e:	2200      	movs	r2, #0
 800ff80:	605a      	str	r2, [r3, #4]
 800ff82:	e00f      	b.n	800ffa4 <_malloc_r+0xb0>
 800ff84:	6822      	ldr	r2, [r4, #0]
 800ff86:	1b52      	subs	r2, r2, r5
 800ff88:	d41f      	bmi.n	800ffca <_malloc_r+0xd6>
 800ff8a:	2a0b      	cmp	r2, #11
 800ff8c:	d917      	bls.n	800ffbe <_malloc_r+0xca>
 800ff8e:	1961      	adds	r1, r4, r5
 800ff90:	42a3      	cmp	r3, r4
 800ff92:	6025      	str	r5, [r4, #0]
 800ff94:	bf18      	it	ne
 800ff96:	6059      	strne	r1, [r3, #4]
 800ff98:	6863      	ldr	r3, [r4, #4]
 800ff9a:	bf08      	it	eq
 800ff9c:	f8c8 1000 	streq.w	r1, [r8]
 800ffa0:	5162      	str	r2, [r4, r5]
 800ffa2:	604b      	str	r3, [r1, #4]
 800ffa4:	4638      	mov	r0, r7
 800ffa6:	f104 060b 	add.w	r6, r4, #11
 800ffaa:	f000 f829 	bl	8010000 <__malloc_unlock>
 800ffae:	f026 0607 	bic.w	r6, r6, #7
 800ffb2:	1d23      	adds	r3, r4, #4
 800ffb4:	1af2      	subs	r2, r6, r3
 800ffb6:	d0ae      	beq.n	800ff16 <_malloc_r+0x22>
 800ffb8:	1b9b      	subs	r3, r3, r6
 800ffba:	50a3      	str	r3, [r4, r2]
 800ffbc:	e7ab      	b.n	800ff16 <_malloc_r+0x22>
 800ffbe:	42a3      	cmp	r3, r4
 800ffc0:	6862      	ldr	r2, [r4, #4]
 800ffc2:	d1dd      	bne.n	800ff80 <_malloc_r+0x8c>
 800ffc4:	f8c8 2000 	str.w	r2, [r8]
 800ffc8:	e7ec      	b.n	800ffa4 <_malloc_r+0xb0>
 800ffca:	4623      	mov	r3, r4
 800ffcc:	6864      	ldr	r4, [r4, #4]
 800ffce:	e7ac      	b.n	800ff2a <_malloc_r+0x36>
 800ffd0:	4634      	mov	r4, r6
 800ffd2:	6876      	ldr	r6, [r6, #4]
 800ffd4:	e7b4      	b.n	800ff40 <_malloc_r+0x4c>
 800ffd6:	4613      	mov	r3, r2
 800ffd8:	e7cc      	b.n	800ff74 <_malloc_r+0x80>
 800ffda:	230c      	movs	r3, #12
 800ffdc:	603b      	str	r3, [r7, #0]
 800ffde:	4638      	mov	r0, r7
 800ffe0:	f000 f80e 	bl	8010000 <__malloc_unlock>
 800ffe4:	e797      	b.n	800ff16 <_malloc_r+0x22>
 800ffe6:	6025      	str	r5, [r4, #0]
 800ffe8:	e7dc      	b.n	800ffa4 <_malloc_r+0xb0>
 800ffea:	605b      	str	r3, [r3, #4]
 800ffec:	deff      	udf	#255	; 0xff
 800ffee:	bf00      	nop
 800fff0:	2400213c 	.word	0x2400213c

0800fff4 <__malloc_lock>:
 800fff4:	4801      	ldr	r0, [pc, #4]	; (800fffc <__malloc_lock+0x8>)
 800fff6:	f7ff bf01 	b.w	800fdfc <__retarget_lock_acquire_recursive>
 800fffa:	bf00      	nop
 800fffc:	24002138 	.word	0x24002138

08010000 <__malloc_unlock>:
 8010000:	4801      	ldr	r0, [pc, #4]	; (8010008 <__malloc_unlock+0x8>)
 8010002:	f7ff befc 	b.w	800fdfe <__retarget_lock_release_recursive>
 8010006:	bf00      	nop
 8010008:	24002138 	.word	0x24002138

0801000c <_malloc_usable_size_r>:
 801000c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010010:	1f18      	subs	r0, r3, #4
 8010012:	2b00      	cmp	r3, #0
 8010014:	bfbc      	itt	lt
 8010016:	580b      	ldrlt	r3, [r1, r0]
 8010018:	18c0      	addlt	r0, r0, r3
 801001a:	4770      	bx	lr

0801001c <_sbrk_r>:
 801001c:	b538      	push	{r3, r4, r5, lr}
 801001e:	4d06      	ldr	r5, [pc, #24]	; (8010038 <_sbrk_r+0x1c>)
 8010020:	2300      	movs	r3, #0
 8010022:	4604      	mov	r4, r0
 8010024:	4608      	mov	r0, r1
 8010026:	602b      	str	r3, [r5, #0]
 8010028:	f7f5 fd40 	bl	8005aac <_sbrk>
 801002c:	1c43      	adds	r3, r0, #1
 801002e:	d102      	bne.n	8010036 <_sbrk_r+0x1a>
 8010030:	682b      	ldr	r3, [r5, #0]
 8010032:	b103      	cbz	r3, 8010036 <_sbrk_r+0x1a>
 8010034:	6023      	str	r3, [r4, #0]
 8010036:	bd38      	pop	{r3, r4, r5, pc}
 8010038:	24002134 	.word	0x24002134

0801003c <_init>:
 801003c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801003e:	bf00      	nop
 8010040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010042:	bc08      	pop	{r3}
 8010044:	469e      	mov	lr, r3
 8010046:	4770      	bx	lr

08010048 <_fini>:
 8010048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801004a:	bf00      	nop
 801004c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801004e:	bc08      	pop	{r3}
 8010050:	469e      	mov	lr, r3
 8010052:	4770      	bx	lr
