
TDK_project_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001013c  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  0801040c  0801040c  0002040c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010774  08010774  00020774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000014  0801077c  0801077c  0002077c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010790  08010790  00020790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000b0  24000000  08010794  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000020bc  240000b0  08010844  000300b0  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  2400216c  08010844  0003216c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000300de  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002bb72  00000000  00000000  00030121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004b42  00000000  00000000  0005bc93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000015c8  00000000  00000000  000607d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000010f7  00000000  00000000  00061da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00035c92  00000000  00000000  00062e97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000216ef  00000000  00000000  00098b29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001525ac  00000000  00000000  000ba218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00005eb4  00000000  00000000  0020c7c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006c  00000000  00000000  00212678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240000b0 	.word	0x240000b0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080103f4 	.word	0x080103f4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240000b4 	.word	0x240000b4
 800030c:	080103f4 	.word	0x080103f4

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b970 	b.w	8000618 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9e08      	ldr	r6, [sp, #32]
 8000356:	460d      	mov	r5, r1
 8000358:	4604      	mov	r4, r0
 800035a:	460f      	mov	r7, r1
 800035c:	2b00      	cmp	r3, #0
 800035e:	d14a      	bne.n	80003f6 <__udivmoddi4+0xa6>
 8000360:	428a      	cmp	r2, r1
 8000362:	4694      	mov	ip, r2
 8000364:	d965      	bls.n	8000432 <__udivmoddi4+0xe2>
 8000366:	fab2 f382 	clz	r3, r2
 800036a:	b143      	cbz	r3, 800037e <__udivmoddi4+0x2e>
 800036c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000370:	f1c3 0220 	rsb	r2, r3, #32
 8000374:	409f      	lsls	r7, r3
 8000376:	fa20 f202 	lsr.w	r2, r0, r2
 800037a:	4317      	orrs	r7, r2
 800037c:	409c      	lsls	r4, r3
 800037e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000382:	fa1f f58c 	uxth.w	r5, ip
 8000386:	fbb7 f1fe 	udiv	r1, r7, lr
 800038a:	0c22      	lsrs	r2, r4, #16
 800038c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000390:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000394:	fb01 f005 	mul.w	r0, r1, r5
 8000398:	4290      	cmp	r0, r2
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x62>
 800039c:	eb1c 0202 	adds.w	r2, ip, r2
 80003a0:	f101 37ff 	add.w	r7, r1, #4294967295
 80003a4:	f080 811c 	bcs.w	80005e0 <__udivmoddi4+0x290>
 80003a8:	4290      	cmp	r0, r2
 80003aa:	f240 8119 	bls.w	80005e0 <__udivmoddi4+0x290>
 80003ae:	3902      	subs	r1, #2
 80003b0:	4462      	add	r2, ip
 80003b2:	1a12      	subs	r2, r2, r0
 80003b4:	b2a4      	uxth	r4, r4
 80003b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80003be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003c2:	fb00 f505 	mul.w	r5, r0, r5
 80003c6:	42a5      	cmp	r5, r4
 80003c8:	d90a      	bls.n	80003e0 <__udivmoddi4+0x90>
 80003ca:	eb1c 0404 	adds.w	r4, ip, r4
 80003ce:	f100 32ff 	add.w	r2, r0, #4294967295
 80003d2:	f080 8107 	bcs.w	80005e4 <__udivmoddi4+0x294>
 80003d6:	42a5      	cmp	r5, r4
 80003d8:	f240 8104 	bls.w	80005e4 <__udivmoddi4+0x294>
 80003dc:	4464      	add	r4, ip
 80003de:	3802      	subs	r0, #2
 80003e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	2100      	movs	r1, #0
 80003e8:	b11e      	cbz	r6, 80003f2 <__udivmoddi4+0xa2>
 80003ea:	40dc      	lsrs	r4, r3
 80003ec:	2300      	movs	r3, #0
 80003ee:	e9c6 4300 	strd	r4, r3, [r6]
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0xbc>
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	f000 80ed 	beq.w	80005da <__udivmoddi4+0x28a>
 8000400:	2100      	movs	r1, #0
 8000402:	e9c6 0500 	strd	r0, r5, [r6]
 8000406:	4608      	mov	r0, r1
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	fab3 f183 	clz	r1, r3
 8000410:	2900      	cmp	r1, #0
 8000412:	d149      	bne.n	80004a8 <__udivmoddi4+0x158>
 8000414:	42ab      	cmp	r3, r5
 8000416:	d302      	bcc.n	800041e <__udivmoddi4+0xce>
 8000418:	4282      	cmp	r2, r0
 800041a:	f200 80f8 	bhi.w	800060e <__udivmoddi4+0x2be>
 800041e:	1a84      	subs	r4, r0, r2
 8000420:	eb65 0203 	sbc.w	r2, r5, r3
 8000424:	2001      	movs	r0, #1
 8000426:	4617      	mov	r7, r2
 8000428:	2e00      	cmp	r6, #0
 800042a:	d0e2      	beq.n	80003f2 <__udivmoddi4+0xa2>
 800042c:	e9c6 4700 	strd	r4, r7, [r6]
 8000430:	e7df      	b.n	80003f2 <__udivmoddi4+0xa2>
 8000432:	b902      	cbnz	r2, 8000436 <__udivmoddi4+0xe6>
 8000434:	deff      	udf	#255	; 0xff
 8000436:	fab2 f382 	clz	r3, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	f040 8090 	bne.w	8000560 <__udivmoddi4+0x210>
 8000440:	1a8a      	subs	r2, r1, r2
 8000442:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000446:	fa1f fe8c 	uxth.w	lr, ip
 800044a:	2101      	movs	r1, #1
 800044c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000450:	fb07 2015 	mls	r0, r7, r5, r2
 8000454:	0c22      	lsrs	r2, r4, #16
 8000456:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800045a:	fb0e f005 	mul.w	r0, lr, r5
 800045e:	4290      	cmp	r0, r2
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x124>
 8000462:	eb1c 0202 	adds.w	r2, ip, r2
 8000466:	f105 38ff 	add.w	r8, r5, #4294967295
 800046a:	d202      	bcs.n	8000472 <__udivmoddi4+0x122>
 800046c:	4290      	cmp	r0, r2
 800046e:	f200 80cb 	bhi.w	8000608 <__udivmoddi4+0x2b8>
 8000472:	4645      	mov	r5, r8
 8000474:	1a12      	subs	r2, r2, r0
 8000476:	b2a4      	uxth	r4, r4
 8000478:	fbb2 f0f7 	udiv	r0, r2, r7
 800047c:	fb07 2210 	mls	r2, r7, r0, r2
 8000480:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000484:	fb0e fe00 	mul.w	lr, lr, r0
 8000488:	45a6      	cmp	lr, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x14e>
 800048c:	eb1c 0404 	adds.w	r4, ip, r4
 8000490:	f100 32ff 	add.w	r2, r0, #4294967295
 8000494:	d202      	bcs.n	800049c <__udivmoddi4+0x14c>
 8000496:	45a6      	cmp	lr, r4
 8000498:	f200 80bb 	bhi.w	8000612 <__udivmoddi4+0x2c2>
 800049c:	4610      	mov	r0, r2
 800049e:	eba4 040e 	sub.w	r4, r4, lr
 80004a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004a6:	e79f      	b.n	80003e8 <__udivmoddi4+0x98>
 80004a8:	f1c1 0720 	rsb	r7, r1, #32
 80004ac:	408b      	lsls	r3, r1
 80004ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80004b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004b6:	fa05 f401 	lsl.w	r4, r5, r1
 80004ba:	fa20 f307 	lsr.w	r3, r0, r7
 80004be:	40fd      	lsrs	r5, r7
 80004c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004c4:	4323      	orrs	r3, r4
 80004c6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004ca:	fa1f fe8c 	uxth.w	lr, ip
 80004ce:	fb09 5518 	mls	r5, r9, r8, r5
 80004d2:	0c1c      	lsrs	r4, r3, #16
 80004d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004d8:	fb08 f50e 	mul.w	r5, r8, lr
 80004dc:	42a5      	cmp	r5, r4
 80004de:	fa02 f201 	lsl.w	r2, r2, r1
 80004e2:	fa00 f001 	lsl.w	r0, r0, r1
 80004e6:	d90b      	bls.n	8000500 <__udivmoddi4+0x1b0>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f0:	f080 8088 	bcs.w	8000604 <__udivmoddi4+0x2b4>
 80004f4:	42a5      	cmp	r5, r4
 80004f6:	f240 8085 	bls.w	8000604 <__udivmoddi4+0x2b4>
 80004fa:	f1a8 0802 	sub.w	r8, r8, #2
 80004fe:	4464      	add	r4, ip
 8000500:	1b64      	subs	r4, r4, r5
 8000502:	b29d      	uxth	r5, r3
 8000504:	fbb4 f3f9 	udiv	r3, r4, r9
 8000508:	fb09 4413 	mls	r4, r9, r3, r4
 800050c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000510:	fb03 fe0e 	mul.w	lr, r3, lr
 8000514:	45a6      	cmp	lr, r4
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x1da>
 8000518:	eb1c 0404 	adds.w	r4, ip, r4
 800051c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000520:	d26c      	bcs.n	80005fc <__udivmoddi4+0x2ac>
 8000522:	45a6      	cmp	lr, r4
 8000524:	d96a      	bls.n	80005fc <__udivmoddi4+0x2ac>
 8000526:	3b02      	subs	r3, #2
 8000528:	4464      	add	r4, ip
 800052a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800052e:	fba3 9502 	umull	r9, r5, r3, r2
 8000532:	eba4 040e 	sub.w	r4, r4, lr
 8000536:	42ac      	cmp	r4, r5
 8000538:	46c8      	mov	r8, r9
 800053a:	46ae      	mov	lr, r5
 800053c:	d356      	bcc.n	80005ec <__udivmoddi4+0x29c>
 800053e:	d053      	beq.n	80005e8 <__udivmoddi4+0x298>
 8000540:	b156      	cbz	r6, 8000558 <__udivmoddi4+0x208>
 8000542:	ebb0 0208 	subs.w	r2, r0, r8
 8000546:	eb64 040e 	sbc.w	r4, r4, lr
 800054a:	fa04 f707 	lsl.w	r7, r4, r7
 800054e:	40ca      	lsrs	r2, r1
 8000550:	40cc      	lsrs	r4, r1
 8000552:	4317      	orrs	r7, r2
 8000554:	e9c6 7400 	strd	r7, r4, [r6]
 8000558:	4618      	mov	r0, r3
 800055a:	2100      	movs	r1, #0
 800055c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000560:	f1c3 0120 	rsb	r1, r3, #32
 8000564:	fa02 fc03 	lsl.w	ip, r2, r3
 8000568:	fa20 f201 	lsr.w	r2, r0, r1
 800056c:	fa25 f101 	lsr.w	r1, r5, r1
 8000570:	409d      	lsls	r5, r3
 8000572:	432a      	orrs	r2, r5
 8000574:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000578:	fa1f fe8c 	uxth.w	lr, ip
 800057c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000580:	fb07 1510 	mls	r5, r7, r0, r1
 8000584:	0c11      	lsrs	r1, r2, #16
 8000586:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800058a:	fb00 f50e 	mul.w	r5, r0, lr
 800058e:	428d      	cmp	r5, r1
 8000590:	fa04 f403 	lsl.w	r4, r4, r3
 8000594:	d908      	bls.n	80005a8 <__udivmoddi4+0x258>
 8000596:	eb1c 0101 	adds.w	r1, ip, r1
 800059a:	f100 38ff 	add.w	r8, r0, #4294967295
 800059e:	d22f      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005a0:	428d      	cmp	r5, r1
 80005a2:	d92d      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005a4:	3802      	subs	r0, #2
 80005a6:	4461      	add	r1, ip
 80005a8:	1b49      	subs	r1, r1, r5
 80005aa:	b292      	uxth	r2, r2
 80005ac:	fbb1 f5f7 	udiv	r5, r1, r7
 80005b0:	fb07 1115 	mls	r1, r7, r5, r1
 80005b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005b8:	fb05 f10e 	mul.w	r1, r5, lr
 80005bc:	4291      	cmp	r1, r2
 80005be:	d908      	bls.n	80005d2 <__udivmoddi4+0x282>
 80005c0:	eb1c 0202 	adds.w	r2, ip, r2
 80005c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005c8:	d216      	bcs.n	80005f8 <__udivmoddi4+0x2a8>
 80005ca:	4291      	cmp	r1, r2
 80005cc:	d914      	bls.n	80005f8 <__udivmoddi4+0x2a8>
 80005ce:	3d02      	subs	r5, #2
 80005d0:	4462      	add	r2, ip
 80005d2:	1a52      	subs	r2, r2, r1
 80005d4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005d8:	e738      	b.n	800044c <__udivmoddi4+0xfc>
 80005da:	4631      	mov	r1, r6
 80005dc:	4630      	mov	r0, r6
 80005de:	e708      	b.n	80003f2 <__udivmoddi4+0xa2>
 80005e0:	4639      	mov	r1, r7
 80005e2:	e6e6      	b.n	80003b2 <__udivmoddi4+0x62>
 80005e4:	4610      	mov	r0, r2
 80005e6:	e6fb      	b.n	80003e0 <__udivmoddi4+0x90>
 80005e8:	4548      	cmp	r0, r9
 80005ea:	d2a9      	bcs.n	8000540 <__udivmoddi4+0x1f0>
 80005ec:	ebb9 0802 	subs.w	r8, r9, r2
 80005f0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005f4:	3b01      	subs	r3, #1
 80005f6:	e7a3      	b.n	8000540 <__udivmoddi4+0x1f0>
 80005f8:	4645      	mov	r5, r8
 80005fa:	e7ea      	b.n	80005d2 <__udivmoddi4+0x282>
 80005fc:	462b      	mov	r3, r5
 80005fe:	e794      	b.n	800052a <__udivmoddi4+0x1da>
 8000600:	4640      	mov	r0, r8
 8000602:	e7d1      	b.n	80005a8 <__udivmoddi4+0x258>
 8000604:	46d0      	mov	r8, sl
 8000606:	e77b      	b.n	8000500 <__udivmoddi4+0x1b0>
 8000608:	3d02      	subs	r5, #2
 800060a:	4462      	add	r2, ip
 800060c:	e732      	b.n	8000474 <__udivmoddi4+0x124>
 800060e:	4608      	mov	r0, r1
 8000610:	e70a      	b.n	8000428 <__udivmoddi4+0xd8>
 8000612:	4464      	add	r4, ip
 8000614:	3802      	subs	r0, #2
 8000616:	e742      	b.n	800049e <__udivmoddi4+0x14e>

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	0a5a      	lsrs	r2, r3, #9
 800062c:	490f      	ldr	r1, [pc, #60]	; (800066c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800062e:	fba1 1202 	umull	r1, r2, r1, r2
 8000632:	09d2      	lsrs	r2, r2, #7
 8000634:	490e      	ldr	r1, [pc, #56]	; (8000670 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000636:	fb01 f202 	mul.w	r2, r1, r2
 800063a:	1a9b      	subs	r3, r3, r2
 800063c:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	0a5b      	lsrs	r3, r3, #9
 8000644:	4a09      	ldr	r2, [pc, #36]	; (800066c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000646:	fba2 2303 	umull	r2, r3, r2, r3
 800064a:	09db      	lsrs	r3, r3, #7
 800064c:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	441a      	add	r2, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	68fa      	ldr	r2, [r7, #12]
 800065e:	601a      	str	r2, [r3, #0]
}
 8000660:	bf00      	nop
 8000662:	3714      	adds	r7, #20
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	00044b83 	.word	0x00044b83
 8000670:	3b9aca00 	.word	0x3b9aca00
 8000674:	00000000 	.word	0x00000000

08000678 <pidCtrl>:
    {Kp[1], Ki[1], Kd[1], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
    {Kp[2], Ki[2], Kd[2], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
    {Kp[3], Ki[3], Kd[3], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0}
};

void pidCtrl(int i){
 8000678:	b490      	push	{r4, r7}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	Kpid[i].insVel = (double) Kpid[i].enc * PI * Dwheel
 8000680:	49c7      	ldr	r1, [pc, #796]	; (80009a0 <pidCtrl+0x328>)
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	4613      	mov	r3, r2
 8000686:	00db      	lsls	r3, r3, #3
 8000688:	1a9b      	subs	r3, r3, r2
 800068a:	011b      	lsls	r3, r3, #4
 800068c:	440b      	add	r3, r1
 800068e:	3318      	adds	r3, #24
 8000690:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000694:	ee07 3a90 	vmov	s15, r3
 8000698:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800069c:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8000978 <pidCtrl+0x300>
 80006a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006a4:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8000980 <pidCtrl+0x308>
 80006a8:	ee27 6b06 	vmul.f64	d6, d7, d6
			/ (4 * resolution * reduction_ratio * belt_ratio) * frequency;
 80006ac:	ed9f 5bb6 	vldr	d5, [pc, #728]	; 8000988 <pidCtrl+0x310>
 80006b0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80006b4:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8000990 <pidCtrl+0x318>
 80006b8:	ee27 7b06 	vmul.f64	d7, d7, d6
	Kpid[i].insVel = (double) Kpid[i].enc * PI * Dwheel
 80006bc:	49b8      	ldr	r1, [pc, #736]	; (80009a0 <pidCtrl+0x328>)
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	4613      	mov	r3, r2
 80006c2:	00db      	lsls	r3, r3, #3
 80006c4:	1a9b      	subs	r3, r3, r2
 80006c6:	011b      	lsls	r3, r3, #4
 80006c8:	440b      	add	r3, r1
 80006ca:	3328      	adds	r3, #40	; 0x28
 80006cc:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].error = Kpid[i].goalVel - Kpid[i].insVel;
 80006d0:	49b3      	ldr	r1, [pc, #716]	; (80009a0 <pidCtrl+0x328>)
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	4613      	mov	r3, r2
 80006d6:	00db      	lsls	r3, r3, #3
 80006d8:	1a9b      	subs	r3, r3, r2
 80006da:	011b      	lsls	r3, r3, #4
 80006dc:	440b      	add	r3, r1
 80006de:	3320      	adds	r3, #32
 80006e0:	ed93 6b00 	vldr	d6, [r3]
 80006e4:	49ae      	ldr	r1, [pc, #696]	; (80009a0 <pidCtrl+0x328>)
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	4613      	mov	r3, r2
 80006ea:	00db      	lsls	r3, r3, #3
 80006ec:	1a9b      	subs	r3, r3, r2
 80006ee:	011b      	lsls	r3, r3, #4
 80006f0:	440b      	add	r3, r1
 80006f2:	3328      	adds	r3, #40	; 0x28
 80006f4:	ed93 7b00 	vldr	d7, [r3]
 80006f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80006fc:	49a8      	ldr	r1, [pc, #672]	; (80009a0 <pidCtrl+0x328>)
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	4613      	mov	r3, r2
 8000702:	00db      	lsls	r3, r3, #3
 8000704:	1a9b      	subs	r3, r3, r2
 8000706:	011b      	lsls	r3, r3, #4
 8000708:	440b      	add	r3, r1
 800070a:	3330      	adds	r3, #48	; 0x30
 800070c:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].up = Kpid[i].Kp * Kpid[i].error;
 8000710:	49a3      	ldr	r1, [pc, #652]	; (80009a0 <pidCtrl+0x328>)
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	4613      	mov	r3, r2
 8000716:	00db      	lsls	r3, r3, #3
 8000718:	1a9b      	subs	r3, r3, r2
 800071a:	011b      	lsls	r3, r3, #4
 800071c:	440b      	add	r3, r1
 800071e:	ed93 6b00 	vldr	d6, [r3]
 8000722:	499f      	ldr	r1, [pc, #636]	; (80009a0 <pidCtrl+0x328>)
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	4613      	mov	r3, r2
 8000728:	00db      	lsls	r3, r3, #3
 800072a:	1a9b      	subs	r3, r3, r2
 800072c:	011b      	lsls	r3, r3, #4
 800072e:	440b      	add	r3, r1
 8000730:	3330      	adds	r3, #48	; 0x30
 8000732:	ed93 7b00 	vldr	d7, [r3]
 8000736:	ee26 7b07 	vmul.f64	d7, d6, d7
 800073a:	4999      	ldr	r1, [pc, #612]	; (80009a0 <pidCtrl+0x328>)
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	4613      	mov	r3, r2
 8000740:	00db      	lsls	r3, r3, #3
 8000742:	1a9b      	subs	r3, r3, r2
 8000744:	011b      	lsls	r3, r3, #4
 8000746:	440b      	add	r3, r1
 8000748:	3348      	adds	r3, #72	; 0x48
 800074a:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].ui += Kpid[i].Ki * Kpid[i].last_error / frequency;
 800074e:	4994      	ldr	r1, [pc, #592]	; (80009a0 <pidCtrl+0x328>)
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	4613      	mov	r3, r2
 8000754:	00db      	lsls	r3, r3, #3
 8000756:	1a9b      	subs	r3, r3, r2
 8000758:	011b      	lsls	r3, r3, #4
 800075a:	440b      	add	r3, r1
 800075c:	3350      	adds	r3, #80	; 0x50
 800075e:	ed93 6b00 	vldr	d6, [r3]
 8000762:	498f      	ldr	r1, [pc, #572]	; (80009a0 <pidCtrl+0x328>)
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	4613      	mov	r3, r2
 8000768:	00db      	lsls	r3, r3, #3
 800076a:	1a9b      	subs	r3, r3, r2
 800076c:	011b      	lsls	r3, r3, #4
 800076e:	440b      	add	r3, r1
 8000770:	3308      	adds	r3, #8
 8000772:	ed93 5b00 	vldr	d5, [r3]
 8000776:	498a      	ldr	r1, [pc, #552]	; (80009a0 <pidCtrl+0x328>)
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	4613      	mov	r3, r2
 800077c:	00db      	lsls	r3, r3, #3
 800077e:	1a9b      	subs	r3, r3, r2
 8000780:	011b      	lsls	r3, r3, #4
 8000782:	440b      	add	r3, r1
 8000784:	3338      	adds	r3, #56	; 0x38
 8000786:	ed93 7b00 	vldr	d7, [r3]
 800078a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800078e:	ed9f 4b80 	vldr	d4, [pc, #512]	; 8000990 <pidCtrl+0x318>
 8000792:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000796:	ee36 7b07 	vadd.f64	d7, d6, d7
 800079a:	4981      	ldr	r1, [pc, #516]	; (80009a0 <pidCtrl+0x328>)
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	4613      	mov	r3, r2
 80007a0:	00db      	lsls	r3, r3, #3
 80007a2:	1a9b      	subs	r3, r3, r2
 80007a4:	011b      	lsls	r3, r3, #4
 80007a6:	440b      	add	r3, r1
 80007a8:	3350      	adds	r3, #80	; 0x50
 80007aa:	ed83 7b00 	vstr	d7, [r3]
//	Kpid[i].ui = 0;
	Kpid[i].ud = Kpid[i].Kd * (Kpid[i].error - Kpid[i].last_error) * frequency;
 80007ae:	497c      	ldr	r1, [pc, #496]	; (80009a0 <pidCtrl+0x328>)
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	4613      	mov	r3, r2
 80007b4:	00db      	lsls	r3, r3, #3
 80007b6:	1a9b      	subs	r3, r3, r2
 80007b8:	011b      	lsls	r3, r3, #4
 80007ba:	440b      	add	r3, r1
 80007bc:	3310      	adds	r3, #16
 80007be:	ed93 6b00 	vldr	d6, [r3]
 80007c2:	4977      	ldr	r1, [pc, #476]	; (80009a0 <pidCtrl+0x328>)
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	4613      	mov	r3, r2
 80007c8:	00db      	lsls	r3, r3, #3
 80007ca:	1a9b      	subs	r3, r3, r2
 80007cc:	011b      	lsls	r3, r3, #4
 80007ce:	440b      	add	r3, r1
 80007d0:	3330      	adds	r3, #48	; 0x30
 80007d2:	ed93 5b00 	vldr	d5, [r3]
 80007d6:	4972      	ldr	r1, [pc, #456]	; (80009a0 <pidCtrl+0x328>)
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	4613      	mov	r3, r2
 80007dc:	00db      	lsls	r3, r3, #3
 80007de:	1a9b      	subs	r3, r3, r2
 80007e0:	011b      	lsls	r3, r3, #4
 80007e2:	440b      	add	r3, r1
 80007e4:	3338      	adds	r3, #56	; 0x38
 80007e6:	ed93 7b00 	vldr	d7, [r3]
 80007ea:	ee35 7b47 	vsub.f64	d7, d5, d7
 80007ee:	ee26 7b07 	vmul.f64	d7, d6, d7
 80007f2:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8000990 <pidCtrl+0x318>
 80007f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80007fa:	4969      	ldr	r1, [pc, #420]	; (80009a0 <pidCtrl+0x328>)
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	4613      	mov	r3, r2
 8000800:	00db      	lsls	r3, r3, #3
 8000802:	1a9b      	subs	r3, r3, r2
 8000804:	011b      	lsls	r3, r3, #4
 8000806:	440b      	add	r3, r1
 8000808:	3358      	adds	r3, #88	; 0x58
 800080a:	ed83 7b00 	vstr	d7, [r3]
	if( fabs(Kpid[i].ui) > max_ui )
 800080e:	4964      	ldr	r1, [pc, #400]	; (80009a0 <pidCtrl+0x328>)
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	4613      	mov	r3, r2
 8000814:	00db      	lsls	r3, r3, #3
 8000816:	1a9b      	subs	r3, r3, r2
 8000818:	011b      	lsls	r3, r3, #4
 800081a:	440b      	add	r3, r1
 800081c:	3350      	adds	r3, #80	; 0x50
 800081e:	ed93 7b00 	vldr	d7, [r3]
 8000822:	eeb0 7bc7 	vabs.f64	d7, d7
 8000826:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800082a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800082e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000832:	dd1f      	ble.n	8000874 <pidCtrl+0x1fc>
		Kpid[i].ui = (Kpid[i].ui >= 0)? max_ui: -1*max_ui;
 8000834:	495a      	ldr	r1, [pc, #360]	; (80009a0 <pidCtrl+0x328>)
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	4613      	mov	r3, r2
 800083a:	00db      	lsls	r3, r3, #3
 800083c:	1a9b      	subs	r3, r3, r2
 800083e:	011b      	lsls	r3, r3, #4
 8000840:	440b      	add	r3, r1
 8000842:	3350      	adds	r3, #80	; 0x50
 8000844:	ed93 7b00 	vldr	d7, [r3]
 8000848:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800084c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000850:	db03      	blt.n	800085a <pidCtrl+0x1e2>
 8000852:	f04f 0000 	mov.w	r0, #0
 8000856:	4953      	ldr	r1, [pc, #332]	; (80009a4 <pidCtrl+0x32c>)
 8000858:	e002      	b.n	8000860 <pidCtrl+0x1e8>
 800085a:	f04f 0000 	mov.w	r0, #0
 800085e:	4952      	ldr	r1, [pc, #328]	; (80009a8 <pidCtrl+0x330>)
 8000860:	4c4f      	ldr	r4, [pc, #316]	; (80009a0 <pidCtrl+0x328>)
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	4613      	mov	r3, r2
 8000866:	00db      	lsls	r3, r3, #3
 8000868:	1a9b      	subs	r3, r3, r2
 800086a:	011b      	lsls	r3, r3, #4
 800086c:	4423      	add	r3, r4
 800086e:	3350      	adds	r3, #80	; 0x50
 8000870:	e9c3 0100 	strd	r0, r1, [r3]
	Kpid[i].u = Kpid[i].up + Kpid[i].ui + Kpid[i].ud;
 8000874:	494a      	ldr	r1, [pc, #296]	; (80009a0 <pidCtrl+0x328>)
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	4613      	mov	r3, r2
 800087a:	00db      	lsls	r3, r3, #3
 800087c:	1a9b      	subs	r3, r3, r2
 800087e:	011b      	lsls	r3, r3, #4
 8000880:	440b      	add	r3, r1
 8000882:	3348      	adds	r3, #72	; 0x48
 8000884:	ed93 6b00 	vldr	d6, [r3]
 8000888:	4945      	ldr	r1, [pc, #276]	; (80009a0 <pidCtrl+0x328>)
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	4613      	mov	r3, r2
 800088e:	00db      	lsls	r3, r3, #3
 8000890:	1a9b      	subs	r3, r3, r2
 8000892:	011b      	lsls	r3, r3, #4
 8000894:	440b      	add	r3, r1
 8000896:	3350      	adds	r3, #80	; 0x50
 8000898:	ed93 7b00 	vldr	d7, [r3]
 800089c:	ee36 6b07 	vadd.f64	d6, d6, d7
 80008a0:	493f      	ldr	r1, [pc, #252]	; (80009a0 <pidCtrl+0x328>)
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	4613      	mov	r3, r2
 80008a6:	00db      	lsls	r3, r3, #3
 80008a8:	1a9b      	subs	r3, r3, r2
 80008aa:	011b      	lsls	r3, r3, #4
 80008ac:	440b      	add	r3, r1
 80008ae:	3358      	adds	r3, #88	; 0x58
 80008b0:	ed93 7b00 	vldr	d7, [r3]
 80008b4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80008b8:	4939      	ldr	r1, [pc, #228]	; (80009a0 <pidCtrl+0x328>)
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	4613      	mov	r3, r2
 80008be:	00db      	lsls	r3, r3, #3
 80008c0:	1a9b      	subs	r3, r3, r2
 80008c2:	011b      	lsls	r3, r3, #4
 80008c4:	440b      	add	r3, r1
 80008c6:	3340      	adds	r3, #64	; 0x40
 80008c8:	ed83 7b00 	vstr	d7, [r3]

	Kpid[i].last_error = Kpid[i].error;
 80008cc:	4934      	ldr	r1, [pc, #208]	; (80009a0 <pidCtrl+0x328>)
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	4613      	mov	r3, r2
 80008d2:	00db      	lsls	r3, r3, #3
 80008d4:	1a9b      	subs	r3, r3, r2
 80008d6:	011b      	lsls	r3, r3, #4
 80008d8:	440b      	add	r3, r1
 80008da:	3330      	adds	r3, #48	; 0x30
 80008dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80008e0:	4c2f      	ldr	r4, [pc, #188]	; (80009a0 <pidCtrl+0x328>)
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	4613      	mov	r3, r2
 80008e6:	00db      	lsls	r3, r3, #3
 80008e8:	1a9b      	subs	r3, r3, r2
 80008ea:	011b      	lsls	r3, r3, #4
 80008ec:	4423      	add	r3, r4
 80008ee:	3338      	adds	r3, #56	; 0x38
 80008f0:	e9c3 0100 	strd	r0, r1, [r3]

	Kpid[i].pulse = fabs(Kpid[i].u) * PWM_ARR;
 80008f4:	492a      	ldr	r1, [pc, #168]	; (80009a0 <pidCtrl+0x328>)
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	4613      	mov	r3, r2
 80008fa:	00db      	lsls	r3, r3, #3
 80008fc:	1a9b      	subs	r3, r3, r2
 80008fe:	011b      	lsls	r3, r3, #4
 8000900:	440b      	add	r3, r1
 8000902:	3340      	adds	r3, #64	; 0x40
 8000904:	ed93 7b00 	vldr	d7, [r3]
 8000908:	eeb0 7bc7 	vabs.f64	d7, d7
 800090c:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8000998 <pidCtrl+0x320>
 8000910:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000914:	4922      	ldr	r1, [pc, #136]	; (80009a0 <pidCtrl+0x328>)
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	4613      	mov	r3, r2
 800091a:	00db      	lsls	r3, r3, #3
 800091c:	1a9b      	subs	r3, r3, r2
 800091e:	011b      	lsls	r3, r3, #4
 8000920:	440b      	add	r3, r1
 8000922:	3360      	adds	r3, #96	; 0x60
 8000924:	ed83 7b00 	vstr	d7, [r3]
	if(Kpid[i].pulse > PWM_ARR)	Kpid[i].pulse = PWM_ARR;
 8000928:	491d      	ldr	r1, [pc, #116]	; (80009a0 <pidCtrl+0x328>)
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	4613      	mov	r3, r2
 800092e:	00db      	lsls	r3, r3, #3
 8000930:	1a9b      	subs	r3, r3, r2
 8000932:	011b      	lsls	r3, r3, #4
 8000934:	440b      	add	r3, r1
 8000936:	3360      	adds	r3, #96	; 0x60
 8000938:	ed93 7b00 	vldr	d7, [r3]
 800093c:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8000998 <pidCtrl+0x320>
 8000940:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000948:	dc00      	bgt.n	800094c <pidCtrl+0x2d4>
}
 800094a:	e00d      	b.n	8000968 <pidCtrl+0x2f0>
	if(Kpid[i].pulse > PWM_ARR)	Kpid[i].pulse = PWM_ARR;
 800094c:	4914      	ldr	r1, [pc, #80]	; (80009a0 <pidCtrl+0x328>)
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	4613      	mov	r3, r2
 8000952:	00db      	lsls	r3, r3, #3
 8000954:	1a9b      	subs	r3, r3, r2
 8000956:	011b      	lsls	r3, r3, #4
 8000958:	440b      	add	r3, r1
 800095a:	f103 0160 	add.w	r1, r3, #96	; 0x60
 800095e:	a30e      	add	r3, pc, #56	; (adr r3, 8000998 <pidCtrl+0x320>)
 8000960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000964:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bc90      	pop	{r4, r7}
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	f3af 8000 	nop.w
 8000978:	54cadf99 	.word	0x54cadf99
 800097c:	400921fb 	.word	0x400921fb
 8000980:	cccccccd 	.word	0xcccccccd
 8000984:	4029cccc 	.word	0x4029cccc
 8000988:	00000000 	.word	0x00000000
 800098c:	410b0000 	.word	0x410b0000
 8000990:	00000000 	.word	0x00000000
 8000994:	406f4000 	.word	0x406f4000
 8000998:	00000000 	.word	0x00000000
 800099c:	408f3800 	.word	0x408f3800
 80009a0:	240000f0 	.word	0x240000f0
 80009a4:	3ff00000 	.word	0x3ff00000
 80009a8:	bff00000 	.word	0xbff00000

080009ac <_Z41__static_initialization_and_destruction_0ii>:
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	6039      	str	r1, [r7, #0]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d14c      	bne.n	8000a56 <_Z41__static_initialization_and_destruction_0ii+0xaa>
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d147      	bne.n	8000a56 <_Z41__static_initialization_and_destruction_0ii+0xaa>
    {Kp[0], Ki[0], Kd[0], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 80009c6:	4b27      	ldr	r3, [pc, #156]	; (8000a64 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80009c8:	e9d3 2300 	ldrd	r2, r3, [r3]
};
 80009cc:	4926      	ldr	r1, [pc, #152]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80009ce:	e9c1 2300 	strd	r2, r3, [r1]
    {Kp[0], Ki[0], Kd[0], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 80009d2:	4b26      	ldr	r3, [pc, #152]	; (8000a6c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80009d4:	e9d3 2300 	ldrd	r2, r3, [r3]
};
 80009d8:	4923      	ldr	r1, [pc, #140]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80009da:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {Kp[0], Ki[0], Kd[0], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 80009de:	4b24      	ldr	r3, [pc, #144]	; (8000a70 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80009e0:	e9d3 2300 	ldrd	r2, r3, [r3]
};
 80009e4:	4920      	ldr	r1, [pc, #128]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80009e6:	e9c1 2304 	strd	r2, r3, [r1, #16]
    {Kp[1], Ki[1], Kd[1], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 80009ea:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80009ec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
};
 80009f0:	491d      	ldr	r1, [pc, #116]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80009f2:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
    {Kp[1], Ki[1], Kd[1], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 80009f6:	4b1d      	ldr	r3, [pc, #116]	; (8000a6c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80009f8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
};
 80009fc:	491a      	ldr	r1, [pc, #104]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80009fe:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
    {Kp[1], Ki[1], Kd[1], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 8000a02:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8000a04:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
};
 8000a08:	4917      	ldr	r1, [pc, #92]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000a0a:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
    {Kp[2], Ki[2], Kd[2], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 8000a0e:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8000a10:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
};
 8000a14:	4914      	ldr	r1, [pc, #80]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000a16:	e9c1 2338 	strd	r2, r3, [r1, #224]	; 0xe0
    {Kp[2], Ki[2], Kd[2], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 8000a1a:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8000a1c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
};
 8000a20:	4911      	ldr	r1, [pc, #68]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000a22:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
    {Kp[2], Ki[2], Kd[2], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 8000a26:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8000a28:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
};
 8000a2c:	490e      	ldr	r1, [pc, #56]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000a2e:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
    {Kp[3], Ki[3], Kd[3], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0}
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8000a34:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8000a38:	490b      	ldr	r1, [pc, #44]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000a3a:	e9c1 2354 	strd	r2, r3, [r1, #336]	; 0x150
    {Kp[3], Ki[3], Kd[3], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0}
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8000a40:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8000a44:	4908      	ldr	r1, [pc, #32]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000a46:	e9c1 2356 	strd	r2, r3, [r1, #344]	; 0x158
    {Kp[3], Ki[3], Kd[3], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0}
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8000a4c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8000a50:	4905      	ldr	r1, [pc, #20]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000a52:	e9c1 2358 	strd	r2, r3, [r1, #352]	; 0x160
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	24000000 	.word	0x24000000
 8000a68:	240000f0 	.word	0x240000f0
 8000a6c:	24000020 	.word	0x24000020
 8000a70:	240000d0 	.word	0x240000d0

08000a74 <_GLOBAL__sub_I_Kp>:
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	f7ff ff95 	bl	80009ac <_Z41__static_initialization_and_destruction_0ii>
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	0000      	movs	r0, r0
	...

08000a88 <HAL_TIM_PeriodElapsedCallback>:
extern PUSHER pusher_C;
extern PUSHER pusher_D;
double corr_vy = (double)100/94;
int t = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4aba      	ldr	r2, [pc, #744]	; (8000d80 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	f040 81e7 	bne.w	8000e6a <HAL_TIM_PeriodElapsedCallback+0x3e2>

		Kpid[0].goalVel = Vx + Vy * corr_vy + (W * coeffab);
 8000a9c:	4bb9      	ldr	r3, [pc, #740]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000a9e:	ed93 6b00 	vldr	d6, [r3]
 8000aa2:	4bb9      	ldr	r3, [pc, #740]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000aa4:	ed93 7b00 	vldr	d7, [r3]
 8000aa8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000aac:	4bb7      	ldr	r3, [pc, #732]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000aae:	ed93 7b00 	vldr	d7, [r3]
 8000ab2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000ab6:	4bb6      	ldr	r3, [pc, #728]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8000ab8:	ed93 5b00 	vldr	d5, [r3]
 8000abc:	4bb5      	ldr	r3, [pc, #724]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000abe:	ed93 7b00 	vldr	d7, [r3]
 8000ac2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000ac6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000aca:	4bb3      	ldr	r3, [pc, #716]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000acc:	ed83 7b08 	vstr	d7, [r3, #32]
		Kpid[1].goalVel = Vx - Vy * corr_vy - (W * coeffab);
 8000ad0:	4bae      	ldr	r3, [pc, #696]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000ad2:	ed93 6b00 	vldr	d6, [r3]
 8000ad6:	4bab      	ldr	r3, [pc, #684]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000ad8:	ed93 5b00 	vldr	d5, [r3]
 8000adc:	4baa      	ldr	r3, [pc, #680]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000ade:	ed93 7b00 	vldr	d7, [r3]
 8000ae2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000ae6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000aea:	4ba9      	ldr	r3, [pc, #676]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8000aec:	ed93 5b00 	vldr	d5, [r3]
 8000af0:	4ba8      	ldr	r3, [pc, #672]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000af2:	ed93 7b00 	vldr	d7, [r3]
 8000af6:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000afa:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000afe:	4ba6      	ldr	r3, [pc, #664]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000b00:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
		Kpid[2].goalVel = Vx + Vy * corr_vy - (W * coeffab);
 8000b04:	4b9f      	ldr	r3, [pc, #636]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000b06:	ed93 6b00 	vldr	d6, [r3]
 8000b0a:	4b9f      	ldr	r3, [pc, #636]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000b0c:	ed93 7b00 	vldr	d7, [r3]
 8000b10:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000b14:	4b9d      	ldr	r3, [pc, #628]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000b16:	ed93 7b00 	vldr	d7, [r3]
 8000b1a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000b1e:	4b9c      	ldr	r3, [pc, #624]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8000b20:	ed93 5b00 	vldr	d5, [r3]
 8000b24:	4b9b      	ldr	r3, [pc, #620]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000b26:	ed93 7b00 	vldr	d7, [r3]
 8000b2a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000b2e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000b32:	4b99      	ldr	r3, [pc, #612]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000b34:	ed83 7b40 	vstr	d7, [r3, #256]	; 0x100
		Kpid[3].goalVel = Vx - Vy * corr_vy + (W * coeffab);
 8000b38:	4b94      	ldr	r3, [pc, #592]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000b3a:	ed93 6b00 	vldr	d6, [r3]
 8000b3e:	4b91      	ldr	r3, [pc, #580]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000b40:	ed93 5b00 	vldr	d5, [r3]
 8000b44:	4b90      	ldr	r3, [pc, #576]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000b46:	ed93 7b00 	vldr	d7, [r3]
 8000b4a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000b4e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000b52:	4b8f      	ldr	r3, [pc, #572]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8000b54:	ed93 5b00 	vldr	d5, [r3]
 8000b58:	4b8e      	ldr	r3, [pc, #568]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000b5a:	ed93 7b00 	vldr	d7, [r3]
 8000b5e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000b62:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b66:	4b8c      	ldr	r3, [pc, #560]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000b68:	ed83 7b5c 	vstr	d7, [r3, #368]	; 0x170

		Kpid[0].enc = __HAL_TIM_GetCounter(FR_ENC);
 8000b6c:	4b8b      	ldr	r3, [pc, #556]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b72:	b21a      	sxth	r2, r3
 8000b74:	4b88      	ldr	r3, [pc, #544]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000b76:	831a      	strh	r2, [r3, #24]
		Kpid[1].enc = __HAL_TIM_GetCounter(FL_ENC);
 8000b78:	4b89      	ldr	r3, [pc, #548]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b7e:	b21a      	sxth	r2, r3
 8000b80:	4b85      	ldr	r3, [pc, #532]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000b82:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
		Kpid[2].enc = __HAL_TIM_GetCounter(BL_ENC) * -1;
 8000b86:	4b87      	ldr	r3, [pc, #540]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	425b      	negs	r3, r3
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	b21a      	sxth	r2, r3
 8000b94:	4b80      	ldr	r3, [pc, #512]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000b96:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
		Kpid[3].enc = __HAL_TIM_GetCounter(BR_ENC) * -1;
 8000b9a:	4b83      	ldr	r3, [pc, #524]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	425b      	negs	r3, r3
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	b21a      	sxth	r2, r3
 8000ba8:	4b7b      	ldr	r3, [pc, #492]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000baa:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
		__HAL_TIM_SetCounter(FR_ENC, 0);
 8000bae:	4b7b      	ldr	r3, [pc, #492]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(FL_ENC, 0);
 8000bb6:	4b7a      	ldr	r3, [pc, #488]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(BL_ENC, 0);
 8000bbe:	4b79      	ldr	r3, [pc, #484]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(BR_ENC, 0);
 8000bc6:	4b78      	ldr	r3, [pc, #480]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	625a      	str	r2, [r3, #36]	; 0x24





		for( int i = 0; i < 4; i ++){
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	e005      	b.n	8000be0 <HAL_TIM_PeriodElapsedCallback+0x158>
			pidCtrl(i);
 8000bd4:	68f8      	ldr	r0, [r7, #12]
 8000bd6:	f7ff fd4f 	bl	8000678 <pidCtrl>
		for( int i = 0; i < 4; i ++){
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	2b03      	cmp	r3, #3
 8000be4:	ddf6      	ble.n	8000bd4 <HAL_TIM_PeriodElapsedCallback+0x14c>
		}

		rVx= (Kpid[0].insVel+Kpid[1].insVel+Kpid[2].insVel+Kpid[3].insVel)/4;
 8000be6:	4b6c      	ldr	r3, [pc, #432]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000be8:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8000bec:	4b6a      	ldr	r3, [pc, #424]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000bee:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 8000bf2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000bf6:	4b68      	ldr	r3, [pc, #416]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000bf8:	ed93 7b42 	vldr	d7, [r3, #264]	; 0x108
 8000bfc:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000c00:	4b65      	ldr	r3, [pc, #404]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000c02:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 8000c06:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000c0a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000c0e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c12:	4b66      	ldr	r3, [pc, #408]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000c14:	ed83 7b00 	vstr	d7, [r3]
		rVy= (Kpid[0].insVel-Kpid[1].insVel+Kpid[2].insVel-Kpid[3].insVel)/4;
 8000c18:	4b5f      	ldr	r3, [pc, #380]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000c1a:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8000c1e:	4b5e      	ldr	r3, [pc, #376]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000c20:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 8000c24:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000c28:	4b5b      	ldr	r3, [pc, #364]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000c2a:	ed93 7b42 	vldr	d7, [r3, #264]	; 0x108
 8000c2e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000c32:	4b59      	ldr	r3, [pc, #356]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000c34:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 8000c38:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000c3c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000c40:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c44:	4b5a      	ldr	r3, [pc, #360]	; (8000db0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000c46:	ed83 7b00 	vstr	d7, [r3]
		rW= (-Kpid[0].insVel+Kpid[1].insVel+Kpid[2].insVel-Kpid[3].insVel)/(4*(car_len-width));
 8000c4a:	4b53      	ldr	r3, [pc, #332]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000c4c:	ed93 6b26 	vldr	d6, [r3, #152]	; 0x98
 8000c50:	4b51      	ldr	r3, [pc, #324]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000c52:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8000c56:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000c5a:	4b4f      	ldr	r3, [pc, #316]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000c5c:	ed93 7b42 	vldr	d7, [r3, #264]	; 0x108
 8000c60:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000c64:	4b4c      	ldr	r3, [pc, #304]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000c66:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 8000c6a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000c6e:	eebb 5b0a 	vmov.f64	d5, #186	; 0xc1d00000 -26.0
 8000c72:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c76:	4b4f      	ldr	r3, [pc, #316]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8000c78:	ed83 7b00 	vstr	d7, [r3]

		__HAL_TIM_SET_COMPARE(FR_PWM_TIMMER, FR_PWM_CHANNEL, Kpid[0].pulse);
 8000c7c:	4b46      	ldr	r3, [pc, #280]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000c7e:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8000c82:	4b4d      	ldr	r3, [pc, #308]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c8a:	ee17 2a90 	vmov	r2, s15
 8000c8e:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(FL_PWM_TIMMER, FL_PWM_CHANNEL, Kpid[1].pulse);
 8000c90:	4b41      	ldr	r3, [pc, #260]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000c92:	ed93 7b34 	vldr	d7, [r3, #208]	; 0xd0
 8000c96:	4b48      	ldr	r3, [pc, #288]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c9e:	ee17 2a90 	vmov	r2, s15
 8000ca2:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(BL_PWM_TIMMER, BL_PWM_CHANNEL, Kpid[2].pulse);
 8000ca4:	4b3c      	ldr	r3, [pc, #240]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000ca6:	ed93 7b50 	vldr	d7, [r3, #320]	; 0x140
 8000caa:	4b44      	ldr	r3, [pc, #272]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000cb2:	ee17 2a90 	vmov	r2, s15
 8000cb6:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(BR_PWM_TIMMER, BR_PWM_CHANNEL, Kpid[3].pulse);
 8000cb8:	4b37      	ldr	r3, [pc, #220]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000cba:	ed93 7b6c 	vldr	d7, [r3, #432]	; 0x1b0
 8000cbe:	4b3f      	ldr	r3, [pc, #252]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000cc6:	ee17 2a90 	vmov	r2, s15
 8000cca:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(FR_INA_PORT, FR_INA_PIN, GPIO_PIN_RESET);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cd2:	483b      	ldr	r0, [pc, #236]	; (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000cd4:	f008 fe0a 	bl	80098ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FR_INB_PORT, FR_INB_PIN, GPIO_PIN_RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cde:	4838      	ldr	r0, [pc, #224]	; (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000ce0:	f008 fe04 	bl	80098ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FL_INA_PORT, FL_INA_PIN, GPIO_PIN_RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cea:	4836      	ldr	r0, [pc, #216]	; (8000dc4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8000cec:	f008 fdfe 	bl	80098ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FL_INB_PORT, FL_INB_PIN, GPIO_PIN_RESET);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cf6:	4833      	ldr	r0, [pc, #204]	; (8000dc4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8000cf8:	f008 fdf8 	bl	80098ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BL_INA_PORT, BL_INA_PIN, GPIO_PIN_RESET);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2104      	movs	r1, #4
 8000d00:	4831      	ldr	r0, [pc, #196]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8000d02:	f008 fdf3 	bl	80098ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BL_INB_PORT, BL_INB_PIN, GPIO_PIN_RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2108      	movs	r1, #8
 8000d0a:	482f      	ldr	r0, [pc, #188]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8000d0c:	f008 fdee 	bl	80098ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BR_INA_PORT, BR_INA_PIN, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d16:	482d      	ldr	r0, [pc, #180]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x344>)
 8000d18:	f008 fde8 	bl	80098ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BR_INB_PORT, BR_INB_PIN, GPIO_PIN_RESET);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2110      	movs	r1, #16
 8000d20:	4829      	ldr	r0, [pc, #164]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8000d22:	f008 fde3 	bl	80098ec <HAL_GPIO_WritePin>
		if (Kpid[0].u > 0)HAL_GPIO_WritePin(FR_INA_PORT, FR_INA_PIN, GPIO_PIN_SET);
 8000d26:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000d28:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8000d2c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d34:	dd06      	ble.n	8000d44 <HAL_TIM_PeriodElapsedCallback+0x2bc>
 8000d36:	2201      	movs	r2, #1
 8000d38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d3c:	4820      	ldr	r0, [pc, #128]	; (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000d3e:	f008 fdd5 	bl	80098ec <HAL_GPIO_WritePin>
 8000d42:	e00d      	b.n	8000d60 <HAL_TIM_PeriodElapsedCallback+0x2d8>
		else if (Kpid[0].u < 0)HAL_GPIO_WritePin(FR_INB_PORT, FR_INB_PIN, GPIO_PIN_SET);
 8000d44:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000d46:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8000d4a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d52:	d505      	bpl.n	8000d60 <HAL_TIM_PeriodElapsedCallback+0x2d8>
 8000d54:	2201      	movs	r2, #1
 8000d56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d5a:	4819      	ldr	r0, [pc, #100]	; (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000d5c:	f008 fdc6 	bl	80098ec <HAL_GPIO_WritePin>
		if (Kpid[1].u > 0)HAL_GPIO_WritePin(FL_INA_PORT, FL_INA_PIN, GPIO_PIN_SET);
 8000d60:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000d62:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8000d66:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d6e:	dd2f      	ble.n	8000dd0 <HAL_TIM_PeriodElapsedCallback+0x348>
 8000d70:	2201      	movs	r2, #1
 8000d72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d76:	4813      	ldr	r0, [pc, #76]	; (8000dc4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8000d78:	f008 fdb8 	bl	80098ec <HAL_GPIO_WritePin>
 8000d7c:	e036      	b.n	8000dec <HAL_TIM_PeriodElapsedCallback+0x364>
 8000d7e:	bf00      	nop
 8000d80:	40010000 	.word	0x40010000
 8000d84:	24000980 	.word	0x24000980
 8000d88:	24000048 	.word	0x24000048
 8000d8c:	24000978 	.word	0x24000978
 8000d90:	24000988 	.word	0x24000988
 8000d94:	24000040 	.word	0x24000040
 8000d98:	240000f0 	.word	0x240000f0
 8000d9c:	240004f4 	.word	0x240004f4
 8000da0:	240005d8 	.word	0x240005d8
 8000da4:	24000540 	.word	0x24000540
 8000da8:	2400058c 	.word	0x2400058c
 8000dac:	24000990 	.word	0x24000990
 8000db0:	24000998 	.word	0x24000998
 8000db4:	240009a0 	.word	0x240009a0
 8000db8:	24000670 	.word	0x24000670
 8000dbc:	240006bc 	.word	0x240006bc
 8000dc0:	58020c00 	.word	0x58020c00
 8000dc4:	58020400 	.word	0x58020400
 8000dc8:	58021000 	.word	0x58021000
 8000dcc:	58020800 	.word	0x58020800
		else if (Kpid[1].u < 0)HAL_GPIO_WritePin(FL_INB_PORT, FL_INB_PIN, GPIO_PIN_SET);
 8000dd0:	4b1b      	ldr	r3, [pc, #108]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8000dd2:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8000dd6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dde:	d505      	bpl.n	8000dec <HAL_TIM_PeriodElapsedCallback+0x364>
 8000de0:	2201      	movs	r2, #1
 8000de2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000de6:	4817      	ldr	r0, [pc, #92]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8000de8:	f008 fd80 	bl	80098ec <HAL_GPIO_WritePin>
		if (Kpid[2].u > 0)HAL_GPIO_WritePin(BL_INA_PORT, BL_INA_PIN, GPIO_PIN_SET);
 8000dec:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8000dee:	ed93 7b48 	vldr	d7, [r3, #288]	; 0x120
 8000df2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dfa:	dd05      	ble.n	8000e08 <HAL_TIM_PeriodElapsedCallback+0x380>
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	2104      	movs	r1, #4
 8000e00:	4811      	ldr	r0, [pc, #68]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8000e02:	f008 fd73 	bl	80098ec <HAL_GPIO_WritePin>
 8000e06:	e00c      	b.n	8000e22 <HAL_TIM_PeriodElapsedCallback+0x39a>
		else if (Kpid[2].u < 0)HAL_GPIO_WritePin(BL_INB_PORT, BL_INB_PIN, GPIO_PIN_SET);
 8000e08:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8000e0a:	ed93 7b48 	vldr	d7, [r3, #288]	; 0x120
 8000e0e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e16:	d504      	bpl.n	8000e22 <HAL_TIM_PeriodElapsedCallback+0x39a>
 8000e18:	2201      	movs	r2, #1
 8000e1a:	2108      	movs	r1, #8
 8000e1c:	480a      	ldr	r0, [pc, #40]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8000e1e:	f008 fd65 	bl	80098ec <HAL_GPIO_WritePin>
		if (Kpid[3].u > 0)HAL_GPIO_WritePin(BR_INA_PORT, BR_INA_PIN, GPIO_PIN_SET);
 8000e22:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8000e24:	ed93 7b64 	vldr	d7, [r3, #400]	; 0x190
 8000e28:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e30:	dd0e      	ble.n	8000e50 <HAL_TIM_PeriodElapsedCallback+0x3c8>
 8000e32:	2201      	movs	r2, #1
 8000e34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e38:	4804      	ldr	r0, [pc, #16]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8000e3a:	f008 fd57 	bl	80098ec <HAL_GPIO_WritePin>
 8000e3e:	e014      	b.n	8000e6a <HAL_TIM_PeriodElapsedCallback+0x3e2>
 8000e40:	240000f0 	.word	0x240000f0
 8000e44:	58020400 	.word	0x58020400
 8000e48:	58021000 	.word	0x58021000
 8000e4c:	58020800 	.word	0x58020800
		else if (Kpid[3].u < 0)HAL_GPIO_WritePin(BR_INB_PORT, BR_INB_PIN, GPIO_PIN_SET);
 8000e50:	4baf      	ldr	r3, [pc, #700]	; (8001110 <HAL_TIM_PeriodElapsedCallback+0x688>)
 8000e52:	ed93 7b64 	vldr	d7, [r3, #400]	; 0x190
 8000e56:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e5e:	d504      	bpl.n	8000e6a <HAL_TIM_PeriodElapsedCallback+0x3e2>
 8000e60:	2201      	movs	r2, #1
 8000e62:	2110      	movs	r1, #16
 8000e64:	48ab      	ldr	r0, [pc, #684]	; (8001114 <HAL_TIM_PeriodElapsedCallback+0x68c>)
 8000e66:	f008 fd41 	bl	80098ec <HAL_GPIO_WritePin>
	}

	if(htim->Instance == TIM8){
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4aaa      	ldr	r2, [pc, #680]	; (8001118 <HAL_TIM_PeriodElapsedCallback+0x690>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	f040 8128 	bne.w	80010c6 <HAL_TIM_PeriodElapsedCallback+0x63e>
		t++;
 8000e76:	4ba9      	ldr	r3, [pc, #676]	; (800111c <HAL_TIM_PeriodElapsedCallback+0x694>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	4aa7      	ldr	r2, [pc, #668]	; (800111c <HAL_TIM_PeriodElapsedCallback+0x694>)
 8000e7e:	6013      	str	r3, [r2, #0]
		if(t%20 == 19){
 8000e80:	4ba6      	ldr	r3, [pc, #664]	; (800111c <HAL_TIM_PeriodElapsedCallback+0x694>)
 8000e82:	6819      	ldr	r1, [r3, #0]
 8000e84:	4ba6      	ldr	r3, [pc, #664]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8000e86:	fb83 2301 	smull	r2, r3, r3, r1
 8000e8a:	10da      	asrs	r2, r3, #3
 8000e8c:	17cb      	asrs	r3, r1, #31
 8000e8e:	1ad2      	subs	r2, r2, r3
 8000e90:	4613      	mov	r3, r2
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	4413      	add	r3, r2
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	1aca      	subs	r2, r1, r3
 8000e9a:	2a13      	cmp	r2, #19
 8000e9c:	d101      	bne.n	8000ea2 <HAL_TIM_PeriodElapsedCallback+0x41a>
			pub();
 8000e9e:	f002 fff7 	bl	8003e90 <_Z3pubv>
		}
		/*pusher down*/
		pusher_A.distence();
 8000ea2:	48a0      	ldr	r0, [pc, #640]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8000ea4:	f001 f904 	bl	80020b0 <_ZN6PUSHER8distenceEv>
		pusher_B.distence();
 8000ea8:	489f      	ldr	r0, [pc, #636]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8000eaa:	f001 f901 	bl	80020b0 <_ZN6PUSHER8distenceEv>
		if(pusher_A.d > 0){
 8000eae:	4b9d      	ldr	r3, [pc, #628]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8000eb0:	ed93 7b04 	vldr	d7, [r3, #16]
 8000eb4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ebc:	dd2f      	ble.n	8000f1e <HAL_TIM_PeriodElapsedCallback+0x496>
			pusher_A.count++;
 8000ebe:	4b99      	ldr	r3, [pc, #612]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8000ec0:	699b      	ldr	r3, [r3, #24]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	4a97      	ldr	r2, [pc, #604]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8000ec6:	6193      	str	r3, [r2, #24]
			HAL_GPIO_WritePin(PUSHER_A_IN1_PORT, PUSHER_A_IN1_PIN, GPIO_PIN_SET);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ece:	4891      	ldr	r0, [pc, #580]	; (8001114 <HAL_TIM_PeriodElapsedCallback+0x68c>)
 8000ed0:	f008 fd0c 	bl	80098ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUSHER_A_IN2_PORT, PUSHER_A_IN2_PIN, GPIO_PIN_RESET);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eda:	488e      	ldr	r0, [pc, #568]	; (8001114 <HAL_TIM_PeriodElapsedCallback+0x68c>)
 8000edc:	f008 fd06 	bl	80098ec <HAL_GPIO_WritePin>
			if(pusher_A.count > pusher_A.d*1000/PUSHER_SPEED){
 8000ee0:	4b90      	ldr	r3, [pc, #576]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	ee07 3a90 	vmov	s15, r3
 8000ee8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000eec:	4b8d      	ldr	r3, [pc, #564]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8000eee:	ed93 7b04 	vldr	d7, [r3, #16]
 8000ef2:	ed9f 5b83 	vldr	d5, [pc, #524]	; 8001100 <HAL_TIM_PeriodElapsedCallback+0x678>
 8000ef6:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000efa:	ed9f 4b83 	vldr	d4, [pc, #524]	; 8001108 <HAL_TIM_PeriodElapsedCallback+0x680>
 8000efe:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000f02:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f0a:	dd08      	ble.n	8000f1e <HAL_TIM_PeriodElapsedCallback+0x496>
				pusher_A.p_state = pusher_A.state;
 8000f0c:	4b85      	ldr	r3, [pc, #532]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8000f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f12:	4984      	ldr	r1, [pc, #528]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8000f14:	e9c1 2302 	strd	r2, r3, [r1, #8]
				pusher_A.count = 0;
 8000f18:	4b82      	ldr	r3, [pc, #520]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	619a      	str	r2, [r3, #24]
			}
		}
		if(pusher_B.d > 0){
 8000f1e:	4b82      	ldr	r3, [pc, #520]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8000f20:	ed93 7b04 	vldr	d7, [r3, #16]
 8000f24:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f2c:	dd2f      	ble.n	8000f8e <HAL_TIM_PeriodElapsedCallback+0x506>
			pusher_B.count++;
 8000f2e:	4b7e      	ldr	r3, [pc, #504]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8000f30:	699b      	ldr	r3, [r3, #24]
 8000f32:	3301      	adds	r3, #1
 8000f34:	4a7c      	ldr	r2, [pc, #496]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8000f36:	6193      	str	r3, [r2, #24]
			HAL_GPIO_WritePin(PUSHER_B_IN1_PORT, PUSHER_B_IN1_PIN, GPIO_PIN_SET);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f3e:	4875      	ldr	r0, [pc, #468]	; (8001114 <HAL_TIM_PeriodElapsedCallback+0x68c>)
 8000f40:	f008 fcd4 	bl	80098ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUSHER_B_IN2_PORT, PUSHER_B_IN2_PIN, GPIO_PIN_RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f4a:	4872      	ldr	r0, [pc, #456]	; (8001114 <HAL_TIM_PeriodElapsedCallback+0x68c>)
 8000f4c:	f008 fcce 	bl	80098ec <HAL_GPIO_WritePin>
			if(pusher_B.count > pusher_B.d*1000/PUSHER_SPEED){
 8000f50:	4b75      	ldr	r3, [pc, #468]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	ee07 3a90 	vmov	s15, r3
 8000f58:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000f5c:	4b72      	ldr	r3, [pc, #456]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8000f5e:	ed93 7b04 	vldr	d7, [r3, #16]
 8000f62:	ed9f 5b67 	vldr	d5, [pc, #412]	; 8001100 <HAL_TIM_PeriodElapsedCallback+0x678>
 8000f66:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000f6a:	ed9f 4b67 	vldr	d4, [pc, #412]	; 8001108 <HAL_TIM_PeriodElapsedCallback+0x680>
 8000f6e:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000f72:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f7a:	dd08      	ble.n	8000f8e <HAL_TIM_PeriodElapsedCallback+0x506>
				pusher_B.p_state = pusher_B.state;
 8000f7c:	4b6a      	ldr	r3, [pc, #424]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8000f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f82:	4969      	ldr	r1, [pc, #420]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8000f84:	e9c1 2302 	strd	r2, r3, [r1, #8]
				pusher_B.count = 0;
 8000f88:	4b67      	ldr	r3, [pc, #412]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	619a      	str	r2, [r3, #24]
//				pusher_D.p_state = pusher_D.state;
//				pusher_D.count = 0;
//			}
//		}
		/*pusher up*/
		if(pusher_A.d < 0){
 8000f8e:	4b65      	ldr	r3, [pc, #404]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8000f90:	ed93 7b04 	vldr	d7, [r3, #16]
 8000f94:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f9c:	d531      	bpl.n	8001002 <HAL_TIM_PeriodElapsedCallback+0x57a>
			pusher_A.count++;
 8000f9e:	4b61      	ldr	r3, [pc, #388]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	4a5f      	ldr	r2, [pc, #380]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8000fa6:	6193      	str	r3, [r2, #24]
			HAL_GPIO_WritePin(PUSHER_A_IN1_PORT, PUSHER_A_IN1_PIN, GPIO_PIN_RESET);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fae:	4859      	ldr	r0, [pc, #356]	; (8001114 <HAL_TIM_PeriodElapsedCallback+0x68c>)
 8000fb0:	f008 fc9c 	bl	80098ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUSHER_A_IN2_PORT, PUSHER_A_IN2_PIN, GPIO_PIN_SET);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fba:	4856      	ldr	r0, [pc, #344]	; (8001114 <HAL_TIM_PeriodElapsedCallback+0x68c>)
 8000fbc:	f008 fc96 	bl	80098ec <HAL_GPIO_WritePin>
			if(pusher_A.count > -pusher_A.d*1000/PUSHER_SPEED){
 8000fc0:	4b58      	ldr	r3, [pc, #352]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	ee07 3a90 	vmov	s15, r3
 8000fc8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000fcc:	4b55      	ldr	r3, [pc, #340]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8000fce:	ed93 7b04 	vldr	d7, [r3, #16]
 8000fd2:	eeb1 7b47 	vneg.f64	d7, d7
 8000fd6:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 8001100 <HAL_TIM_PeriodElapsedCallback+0x678>
 8000fda:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000fde:	ed9f 4b4a 	vldr	d4, [pc, #296]	; 8001108 <HAL_TIM_PeriodElapsedCallback+0x680>
 8000fe2:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000fe6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fee:	dd08      	ble.n	8001002 <HAL_TIM_PeriodElapsedCallback+0x57a>
				pusher_A.p_state = pusher_A.state;
 8000ff0:	4b4c      	ldr	r3, [pc, #304]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8000ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff6:	494b      	ldr	r1, [pc, #300]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8000ff8:	e9c1 2302 	strd	r2, r3, [r1, #8]
				pusher_A.count = 0;
 8000ffc:	4b49      	ldr	r3, [pc, #292]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	619a      	str	r2, [r3, #24]
			}
		}
		if(pusher_B.d < 0){
 8001002:	4b49      	ldr	r3, [pc, #292]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8001004:	ed93 7b04 	vldr	d7, [r3, #16]
 8001008:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800100c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001010:	d531      	bpl.n	8001076 <HAL_TIM_PeriodElapsedCallback+0x5ee>
			pusher_B.count++;
 8001012:	4b45      	ldr	r3, [pc, #276]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8001014:	699b      	ldr	r3, [r3, #24]
 8001016:	3301      	adds	r3, #1
 8001018:	4a43      	ldr	r2, [pc, #268]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 800101a:	6193      	str	r3, [r2, #24]
			HAL_GPIO_WritePin(PUSHER_B_IN1_PORT, PUSHER_B_IN1_PIN, GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001022:	483c      	ldr	r0, [pc, #240]	; (8001114 <HAL_TIM_PeriodElapsedCallback+0x68c>)
 8001024:	f008 fc62 	bl	80098ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUSHER_B_IN2_PORT, PUSHER_B_IN2_PIN, GPIO_PIN_SET);
 8001028:	2201      	movs	r2, #1
 800102a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800102e:	4839      	ldr	r0, [pc, #228]	; (8001114 <HAL_TIM_PeriodElapsedCallback+0x68c>)
 8001030:	f008 fc5c 	bl	80098ec <HAL_GPIO_WritePin>
			if(pusher_B.count > -pusher_B.d*1000/PUSHER_SPEED){
 8001034:	4b3c      	ldr	r3, [pc, #240]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	ee07 3a90 	vmov	s15, r3
 800103c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001040:	4b39      	ldr	r3, [pc, #228]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8001042:	ed93 7b04 	vldr	d7, [r3, #16]
 8001046:	eeb1 7b47 	vneg.f64	d7, d7
 800104a:	ed9f 5b2d 	vldr	d5, [pc, #180]	; 8001100 <HAL_TIM_PeriodElapsedCallback+0x678>
 800104e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001052:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 8001108 <HAL_TIM_PeriodElapsedCallback+0x680>
 8001056:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800105a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800105e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001062:	dd08      	ble.n	8001076 <HAL_TIM_PeriodElapsedCallback+0x5ee>
				pusher_B.p_state = pusher_B.state;
 8001064:	4b30      	ldr	r3, [pc, #192]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8001066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106a:	492f      	ldr	r1, [pc, #188]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 800106c:	e9c1 2302 	strd	r2, r3, [r1, #8]
				pusher_B.count = 0;
 8001070:	4b2d      	ldr	r3, [pc, #180]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8001072:	2200      	movs	r2, #0
 8001074:	619a      	str	r2, [r3, #24]
//				pusher_D.p_state = pusher_D.state;
//				pusher_D.count = 0;
//			}
//		}
		/*pusher stop*/
		if(pusher_A.d == 0){
 8001076:	4b2b      	ldr	r3, [pc, #172]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8001078:	ed93 7b04 	vldr	d7, [r3, #16]
 800107c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001084:	d10b      	bne.n	800109e <HAL_TIM_PeriodElapsedCallback+0x616>
			HAL_GPIO_WritePin(PUSHER_A_IN1_PORT, PUSHER_A_IN1_PIN, GPIO_PIN_RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800108c:	4821      	ldr	r0, [pc, #132]	; (8001114 <HAL_TIM_PeriodElapsedCallback+0x68c>)
 800108e:	f008 fc2d 	bl	80098ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUSHER_A_IN2_PORT, PUSHER_A_IN2_PIN, GPIO_PIN_RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001098:	481e      	ldr	r0, [pc, #120]	; (8001114 <HAL_TIM_PeriodElapsedCallback+0x68c>)
 800109a:	f008 fc27 	bl	80098ec <HAL_GPIO_WritePin>
		}
		if(pusher_B.d == 0){
 800109e:	4b22      	ldr	r3, [pc, #136]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 80010a0:	ed93 7b04 	vldr	d7, [r3, #16]
 80010a4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80010a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ac:	d10b      	bne.n	80010c6 <HAL_TIM_PeriodElapsedCallback+0x63e>
			HAL_GPIO_WritePin(PUSHER_B_IN1_PORT, PUSHER_B_IN1_PIN, GPIO_PIN_RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010b4:	4817      	ldr	r0, [pc, #92]	; (8001114 <HAL_TIM_PeriodElapsedCallback+0x68c>)
 80010b6:	f008 fc19 	bl	80098ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUSHER_B_IN2_PORT, PUSHER_B_IN2_PIN, GPIO_PIN_RESET);
 80010ba:	2200      	movs	r2, #0
 80010bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c0:	4814      	ldr	r0, [pc, #80]	; (8001114 <HAL_TIM_PeriodElapsedCallback+0x68c>)
 80010c2:	f008 fc13 	bl	80098ec <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(PUSHER_D_IN1_PORT, PUSHER_D_IN1_PIN, GPIO_PIN_RESET);
//			HAL_GPIO_WritePin(PUSHER_D_IN2_PORT, PUSHER_D_IN2_PIN, GPIO_PIN_RESET);
//		}
//
	}
	if(htim->Instance == TIM23){/*for script*/
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a18      	ldr	r2, [pc, #96]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d111      	bne.n	80010f4 <HAL_TIM_PeriodElapsedCallback+0x66c>
		if(delay_start!=0){
 80010d0:	4b17      	ldr	r3, [pc, #92]	; (8001130 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d004      	beq.n	80010e2 <HAL_TIM_PeriodElapsedCallback+0x65a>
			delay++;
 80010d8:	4b16      	ldr	r3, [pc, #88]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	3301      	adds	r3, #1
 80010de:	4a15      	ldr	r2, [pc, #84]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 80010e0:	6013      	str	r3, [r2, #0]
		}
		if(delay_start_2!=0){
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d004      	beq.n	80010f4 <HAL_TIM_PeriodElapsedCallback+0x66c>
			delay_2++;
 80010ea:	4b14      	ldr	r3, [pc, #80]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	3301      	adds	r3, #1
 80010f0:	4a12      	ldr	r2, [pc, #72]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 80010f2:	6013      	str	r3, [r2, #0]
//			script_wheel(0,0,0);
//			script_pusher(0,10,0,0);
//		}

	}
}
 80010f4:	bf00      	nop
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	f3af 8000 	nop.w
 8001100:	00000000 	.word	0x00000000
 8001104:	408f4000 	.word	0x408f4000
 8001108:	cccccccd 	.word	0xcccccccd
 800110c:	4040cccc 	.word	0x4040cccc
 8001110:	240000f0 	.word	0x240000f0
 8001114:	58021000 	.word	0x58021000
 8001118:	40010400 	.word	0x40010400
 800111c:	240002c0 	.word	0x240002c0
 8001120:	66666667 	.word	0x66666667
 8001124:	240009a8 	.word	0x240009a8
 8001128:	240009c8 	.word	0x240009c8
 800112c:	4000e000 	.word	0x4000e000
 8001130:	240002b0 	.word	0x240002b0
 8001134:	240002b4 	.word	0x240002b4
 8001138:	240002b8 	.word	0x240002b8
 800113c:	240002bc 	.word	0x240002bc

08001140 <_Z13DC_motor_initv>:
DC_motor FL(15.96559764,31.71747647,0,216,512,1000);//motor_1
DC_motor BL(24.18280423,91.68881006,0,216,512,1000);//motor_2
DC_motor BR(21.19552541,50.08697147,0,216,512,1000);//motor_3
DC_motor FR(32.6189283,77.45068509,0,216,512,1000);//motor_4

void DC_motor_init(){
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	//enc_1
	HAL_TIM_Encoder_Start_IT(&htim2,TIM_CHANNEL_1);
 8001144:	2100      	movs	r1, #0
 8001146:	4818      	ldr	r0, [pc, #96]	; (80011a8 <_Z13DC_motor_initv+0x68>)
 8001148:	f00b fc44 	bl	800c9d4 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim2,TIM_CHANNEL_2);
 800114c:	2104      	movs	r1, #4
 800114e:	4816      	ldr	r0, [pc, #88]	; (80011a8 <_Z13DC_motor_initv+0x68>)
 8001150:	f00b fc40 	bl	800c9d4 <HAL_TIM_Encoder_Start_IT>
 	HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_2);//VNH5019_1_PWM
 8001154:	2104      	movs	r1, #4
 8001156:	4815      	ldr	r0, [pc, #84]	; (80011ac <_Z13DC_motor_initv+0x6c>)
 8001158:	f00b fa7a 	bl	800c650 <HAL_TIM_PWM_Start>
 	//enc_2
 	HAL_TIM_Encoder_Start_IT(&htim5,TIM_CHANNEL_1);
 800115c:	2100      	movs	r1, #0
 800115e:	4814      	ldr	r0, [pc, #80]	; (80011b0 <_Z13DC_motor_initv+0x70>)
 8001160:	f00b fc38 	bl	800c9d4 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim5,TIM_CHANNEL_2);
 8001164:	2104      	movs	r1, #4
 8001166:	4812      	ldr	r0, [pc, #72]	; (80011b0 <_Z13DC_motor_initv+0x70>)
 8001168:	f00b fc34 	bl	800c9d4 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_1);//VNH5019_2_PWM
 800116c:	2100      	movs	r1, #0
 800116e:	480f      	ldr	r0, [pc, #60]	; (80011ac <_Z13DC_motor_initv+0x6c>)
 8001170:	f00b fa6e 	bl	800c650 <HAL_TIM_PWM_Start>
	//enc_3
	HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_1);
 8001174:	2100      	movs	r1, #0
 8001176:	480f      	ldr	r0, [pc, #60]	; (80011b4 <_Z13DC_motor_initv+0x74>)
 8001178:	f00b fc2c 	bl	800c9d4 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_2);
 800117c:	2104      	movs	r1, #4
 800117e:	480d      	ldr	r0, [pc, #52]	; (80011b4 <_Z13DC_motor_initv+0x74>)
 8001180:	f00b fc28 	bl	800c9d4 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(&htim15,TIM_CHANNEL_1);//VNH5019_3_PWM
 8001184:	2100      	movs	r1, #0
 8001186:	480c      	ldr	r0, [pc, #48]	; (80011b8 <_Z13DC_motor_initv+0x78>)
 8001188:	f00b fa62 	bl	800c650 <HAL_TIM_PWM_Start>
	//enc_4
	HAL_TIM_Encoder_Start_IT(&htim4,TIM_CHANNEL_1);
 800118c:	2100      	movs	r1, #0
 800118e:	480b      	ldr	r0, [pc, #44]	; (80011bc <_Z13DC_motor_initv+0x7c>)
 8001190:	f00b fc20 	bl	800c9d4 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim4,TIM_CHANNEL_2);
 8001194:	2104      	movs	r1, #4
 8001196:	4809      	ldr	r0, [pc, #36]	; (80011bc <_Z13DC_motor_initv+0x7c>)
 8001198:	f00b fc1c 	bl	800c9d4 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(&htim15,TIM_CHANNEL_2);//VNH5019_4_PWM
 800119c:	2104      	movs	r1, #4
 800119e:	4806      	ldr	r0, [pc, #24]	; (80011b8 <_Z13DC_motor_initv+0x78>)
 80011a0:	f00b fa56 	bl	800c650 <HAL_TIM_PWM_Start>
}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	240004f4 	.word	0x240004f4
 80011ac:	24000670 	.word	0x24000670
 80011b0:	240005d8 	.word	0x240005d8
 80011b4:	24000540 	.word	0x24000540
 80011b8:	240006bc 	.word	0x240006bc
 80011bc:	2400058c 	.word	0x2400058c

080011c0 <_ZN8DC_motorC1Edddddd>:

//motor Instance
DC_motor::DC_motor(double p, double i, double d, double ratio, double res, double PWM_span){
 80011c0:	b480      	push	{r7}
 80011c2:	b08f      	sub	sp, #60	; 0x3c
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6378      	str	r0, [r7, #52]	; 0x34
 80011c8:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 80011cc:	ed87 1b08 	vstr	d1, [r7, #32]
 80011d0:	ed87 2b06 	vstr	d2, [r7, #24]
 80011d4:	ed87 3b04 	vstr	d3, [r7, #16]
 80011d8:	ed87 4b02 	vstr	d4, [r7, #8]
 80011dc:	ed87 5b00 	vstr	d5, [r7]
 80011e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80011e2:	f04f 0200 	mov.w	r2, #0
 80011e6:	f04f 0300 	mov.w	r3, #0
 80011ea:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80011ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80011f0:	f04f 0200 	mov.w	r2, #0
 80011f4:	f04f 0300 	mov.w	r3, #0
 80011f8:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80011fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	f04f 0300 	mov.w	r3, #0
 8001206:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 800120a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800120c:	f04f 0200 	mov.w	r2, #0
 8001210:	f04f 0300 	mov.w	r3, #0
 8001214:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	this->kp = p;
 8001218:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800121a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800121e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	this->ki = i;
 8001222:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001224:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001228:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	this->kd = d;
 800122c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800122e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001232:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	this->reduction_ratio = ratio;
 8001236:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001238:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800123c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	this->resolution = res;
 8001240:	ed97 7b02 	vldr	d7, [r7, #8]
 8001244:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001248:	ee17 2a90 	vmov	r2, s15
 800124c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800124e:	601a      	str	r2, [r3, #0]
	this->ARR = PWM_span;
 8001250:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001252:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001256:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 800125a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800125c:	4618      	mov	r0, r3
 800125e:	373c      	adds	r7, #60	; 0x3c
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <_Z41__static_initialization_and_destruction_0ii>:
	u = kp * error + ki * integral + kd * differential;
	if (u > 1) u = 1;
	else if (u < -1) u = -1;

	return (int) u*ARR;
}
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d140      	bne.n	80012fa <_Z41__static_initialization_and_destruction_0ii+0x92>
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800127e:	4293      	cmp	r3, r2
 8001280:	d13b      	bne.n	80012fa <_Z41__static_initialization_and_destruction_0ii+0x92>
DC_motor FL(15.96559764,31.71747647,0,216,512,1000);//motor_1
 8001282:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8001308 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 8001286:	ed9f 4b22 	vldr	d4, [pc, #136]	; 8001310 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 800128a:	ed9f 3b23 	vldr	d3, [pc, #140]	; 8001318 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 800128e:	ed9f 2b24 	vldr	d2, [pc, #144]	; 8001320 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 8001292:	ed9f 1b25 	vldr	d1, [pc, #148]	; 8001328 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8001296:	ed9f 0b26 	vldr	d0, [pc, #152]	; 8001330 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 800129a:	4833      	ldr	r0, [pc, #204]	; (8001368 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 800129c:	f7ff ff90 	bl	80011c0 <_ZN8DC_motorC1Edddddd>
DC_motor BL(24.18280423,91.68881006,0,216,512,1000);//motor_2
 80012a0:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8001308 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 80012a4:	ed9f 4b1a 	vldr	d4, [pc, #104]	; 8001310 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 80012a8:	ed9f 3b1b 	vldr	d3, [pc, #108]	; 8001318 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 80012ac:	ed9f 2b1c 	vldr	d2, [pc, #112]	; 8001320 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 80012b0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8001338 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 80012b4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8001340 <_Z41__static_initialization_and_destruction_0ii+0xd8>
 80012b8:	482c      	ldr	r0, [pc, #176]	; (800136c <_Z41__static_initialization_and_destruction_0ii+0x104>)
 80012ba:	f7ff ff81 	bl	80011c0 <_ZN8DC_motorC1Edddddd>
DC_motor BR(21.19552541,50.08697147,0,216,512,1000);//motor_3
 80012be:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8001308 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 80012c2:	ed9f 4b13 	vldr	d4, [pc, #76]	; 8001310 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 80012c6:	ed9f 3b14 	vldr	d3, [pc, #80]	; 8001318 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 80012ca:	ed9f 2b15 	vldr	d2, [pc, #84]	; 8001320 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 80012ce:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 8001348 <_Z41__static_initialization_and_destruction_0ii+0xe0>
 80012d2:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8001350 <_Z41__static_initialization_and_destruction_0ii+0xe8>
 80012d6:	4826      	ldr	r0, [pc, #152]	; (8001370 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 80012d8:	f7ff ff72 	bl	80011c0 <_ZN8DC_motorC1Edddddd>
DC_motor FR(32.6189283,77.45068509,0,216,512,1000);//motor_4
 80012dc:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8001308 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 80012e0:	ed9f 4b0b 	vldr	d4, [pc, #44]	; 8001310 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 80012e4:	ed9f 3b0c 	vldr	d3, [pc, #48]	; 8001318 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 80012e8:	ed9f 2b0d 	vldr	d2, [pc, #52]	; 8001320 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 80012ec:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8001358 <_Z41__static_initialization_and_destruction_0ii+0xf0>
 80012f0:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8001360 <_Z41__static_initialization_and_destruction_0ii+0xf8>
 80012f4:	481f      	ldr	r0, [pc, #124]	; (8001374 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 80012f6:	f7ff ff63 	bl	80011c0 <_ZN8DC_motorC1Edddddd>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	f3af 8000 	nop.w
 8001308:	00000000 	.word	0x00000000
 800130c:	408f4000 	.word	0x408f4000
 8001310:	00000000 	.word	0x00000000
 8001314:	40800000 	.word	0x40800000
 8001318:	00000000 	.word	0x00000000
 800131c:	406b0000 	.word	0x406b0000
	...
 8001328:	89b64cae 	.word	0x89b64cae
 800132c:	403fb7ac 	.word	0x403fb7ac
 8001330:	d059ca21 	.word	0xd059ca21
 8001334:	402fee62 	.word	0x402fee62
 8001338:	76ca36c5 	.word	0x76ca36c5
 800133c:	4056ec15 	.word	0x4056ec15
 8001340:	420d6ba3 	.word	0x420d6ba3
 8001344:	40382ecc 	.word	0x40382ecc
 8001348:	e191aae3 	.word	0xe191aae3
 800134c:	40490b21 	.word	0x40490b21
 8001350:	f4097cab 	.word	0xf4097cab
 8001354:	4035320d 	.word	0x4035320d
 8001358:	06469611 	.word	0x06469611
 800135c:	40535cd8 	.word	0x40535cd8
 8001360:	0ae388d1 	.word	0x0ae388d1
 8001364:	40404f39 	.word	0x40404f39
 8001368:	240002c8 	.word	0x240002c8
 800136c:	24000340 	.word	0x24000340
 8001370:	240003b8 	.word	0x240003b8
 8001374:	24000430 	.word	0x24000430

08001378 <_GLOBAL__sub_I_FL>:
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
 800137c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001380:	2001      	movs	r0, #1
 8001382:	f7ff ff71 	bl	8001268 <_Z41__static_initialization_and_destruction_0ii>
 8001386:	bd80      	pop	{r7, pc}

08001388 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800138c:	f004 fe1e 	bl	8005fcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001390:	f000 f81e 	bl	80013d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001394:	f000 fc92 	bl	8001cbc <MX_GPIO_Init>
  MX_DMA_Init();
 8001398:	f000 fc68 	bl	8001c6c <MX_DMA_Init>
  MX_TIM3_Init();
 800139c:	f000 f930 	bl	8001600 <MX_TIM3_Init>
  MX_TIM4_Init();
 80013a0:	f000 f984 	bl	80016ac <MX_TIM4_Init>
  MX_TIM5_Init();
 80013a4:	f000 f9d8 	bl	8001758 <MX_TIM5_Init>
  MX_TIM12_Init();
 80013a8:	f000 fa80 	bl	80018ac <MX_TIM12_Init>
  MX_TIM15_Init();
 80013ac:	f000 fae4 	bl	8001978 <MX_TIM15_Init>
  MX_TIM1_Init();
 80013b0:	f000 f87e 	bl	80014b0 <MX_TIM1_Init>
  MX_TIM8_Init();
 80013b4:	f000 fa26 	bl	8001804 <MX_TIM8_Init>
  MX_TIM23_Init();
 80013b8:	f000 fb70 	bl	8001a9c <MX_TIM23_Init>
  MX_USART1_UART_Init();
 80013bc:	f000 fbbc 	bl	8001b38 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80013c0:	f000 f8ca 	bl	8001558 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80013c4:	f000 fc04 	bl	8001bd0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 80013c8:	f000 fdb2 	bl	8001f30 <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <main+0x44>
	...

080013d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b09c      	sub	sp, #112	; 0x70
 80013d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013da:	224c      	movs	r2, #76	; 0x4c
 80013dc:	2100      	movs	r1, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f00e feb5 	bl	801014e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	2220      	movs	r2, #32
 80013e8:	2100      	movs	r1, #0
 80013ea:	4618      	mov	r0, r3
 80013ec:	f00e feaf 	bl	801014e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80013f0:	2002      	movs	r0, #2
 80013f2:	f008 fa95 	bl	8009920 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013f6:	2300      	movs	r3, #0
 80013f8:	603b      	str	r3, [r7, #0]
 80013fa:	4b2c      	ldr	r3, [pc, #176]	; (80014ac <SystemClock_Config+0xdc>)
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001402:	4a2a      	ldr	r2, [pc, #168]	; (80014ac <SystemClock_Config+0xdc>)
 8001404:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001408:	6193      	str	r3, [r2, #24]
 800140a:	4b28      	ldr	r3, [pc, #160]	; (80014ac <SystemClock_Config+0xdc>)
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001412:	603b      	str	r3, [r7, #0]
 8001414:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001416:	bf00      	nop
 8001418:	4b24      	ldr	r3, [pc, #144]	; (80014ac <SystemClock_Config+0xdc>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001420:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001424:	d1f8      	bne.n	8001418 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001426:	2301      	movs	r3, #1
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800142a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800142e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001430:	2302      	movs	r3, #2
 8001432:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001434:	2302      	movs	r3, #2
 8001436:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001438:	2301      	movs	r3, #1
 800143a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 42;
 800143c:	232a      	movs	r3, #42	; 0x2a
 800143e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001440:	2302      	movs	r3, #2
 8001442:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001444:	2302      	movs	r3, #2
 8001446:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001448:	2302      	movs	r3, #2
 800144a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800144c:	230c      	movs	r3, #12
 800144e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001450:	2300      	movs	r3, #0
 8001452:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001458:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145c:	4618      	mov	r0, r3
 800145e:	f008 fa99 	bl	8009994 <HAL_RCC_OscConfig>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001468:	f000 fd3a 	bl	8001ee0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800146c:	233f      	movs	r3, #63	; 0x3f
 800146e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001470:	2303      	movs	r3, #3
 8001472:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001478:	2308      	movs	r3, #8
 800147a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800147c:	2340      	movs	r3, #64	; 0x40
 800147e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001480:	2340      	movs	r3, #64	; 0x40
 8001482:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001484:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001488:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800148a:	2340      	movs	r3, #64	; 0x40
 800148c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	2102      	movs	r1, #2
 8001492:	4618      	mov	r0, r3
 8001494:	f008 fe58 	bl	800a148 <HAL_RCC_ClockConfig>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800149e:	f000 fd1f 	bl	8001ee0 <Error_Handler>
  }
}
 80014a2:	bf00      	nop
 80014a4:	3770      	adds	r7, #112	; 0x70
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	58024800 	.word	0x58024800

080014b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b088      	sub	sp, #32
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014b6:	f107 0310 	add.w	r3, r7, #16
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014ce:	4b20      	ldr	r3, [pc, #128]	; (8001550 <MX_TIM1_Init+0xa0>)
 80014d0:	4a20      	ldr	r2, [pc, #128]	; (8001554 <MX_TIM1_Init+0xa4>)
 80014d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 80014d4:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <MX_TIM1_Init+0xa0>)
 80014d6:	2253      	movs	r2, #83	; 0x53
 80014d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014da:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <MX_TIM1_Init+0xa0>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3999;
 80014e0:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <MX_TIM1_Init+0xa0>)
 80014e2:	f640 729f 	movw	r2, #3999	; 0xf9f
 80014e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e8:	4b19      	ldr	r3, [pc, #100]	; (8001550 <MX_TIM1_Init+0xa0>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014ee:	4b18      	ldr	r3, [pc, #96]	; (8001550 <MX_TIM1_Init+0xa0>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f4:	4b16      	ldr	r3, [pc, #88]	; (8001550 <MX_TIM1_Init+0xa0>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014fa:	4815      	ldr	r0, [pc, #84]	; (8001550 <MX_TIM1_Init+0xa0>)
 80014fc:	f00a ff72 	bl	800c3e4 <HAL_TIM_Base_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001506:	f000 fceb 	bl	8001ee0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800150a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800150e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001510:	f107 0310 	add.w	r3, r7, #16
 8001514:	4619      	mov	r1, r3
 8001516:	480e      	ldr	r0, [pc, #56]	; (8001550 <MX_TIM1_Init+0xa0>)
 8001518:	f00b fd3e 	bl	800cf98 <HAL_TIM_ConfigClockSource>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001522:	f000 fcdd 	bl	8001ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001526:	2300      	movs	r3, #0
 8001528:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800152a:	2300      	movs	r3, #0
 800152c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	4619      	mov	r1, r3
 8001536:	4806      	ldr	r0, [pc, #24]	; (8001550 <MX_TIM1_Init+0xa0>)
 8001538:	f00c fa8e 	bl	800da58 <HAL_TIMEx_MasterConfigSynchronization>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001542:	f000 fccd 	bl	8001ee0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001546:	bf00      	nop
 8001548:	3720      	adds	r7, #32
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	240004a8 	.word	0x240004a8
 8001554:	40010000 	.word	0x40010000

08001558 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08c      	sub	sp, #48	; 0x30
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800155e:	f107 030c 	add.w	r3, r7, #12
 8001562:	2224      	movs	r2, #36	; 0x24
 8001564:	2100      	movs	r1, #0
 8001566:	4618      	mov	r0, r3
 8001568:	f00e fdf1 	bl	801014e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800156c:	463b      	mov	r3, r7
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001576:	4b21      	ldr	r3, [pc, #132]	; (80015fc <MX_TIM2_Init+0xa4>)
 8001578:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800157c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800157e:	4b1f      	ldr	r3, [pc, #124]	; (80015fc <MX_TIM2_Init+0xa4>)
 8001580:	2200      	movs	r2, #0
 8001582:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001584:	4b1d      	ldr	r3, [pc, #116]	; (80015fc <MX_TIM2_Init+0xa4>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800158a:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <MX_TIM2_Init+0xa4>)
 800158c:	f04f 32ff 	mov.w	r2, #4294967295
 8001590:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001592:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <MX_TIM2_Init+0xa4>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001598:	4b18      	ldr	r3, [pc, #96]	; (80015fc <MX_TIM2_Init+0xa4>)
 800159a:	2200      	movs	r2, #0
 800159c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800159e:	2303      	movs	r3, #3
 80015a0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015a6:	2301      	movs	r3, #1
 80015a8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015b2:	2300      	movs	r3, #0
 80015b4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015b6:	2301      	movs	r3, #1
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015ba:	2300      	movs	r3, #0
 80015bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80015c2:	f107 030c 	add.w	r3, r7, #12
 80015c6:	4619      	mov	r1, r3
 80015c8:	480c      	ldr	r0, [pc, #48]	; (80015fc <MX_TIM2_Init+0xa4>)
 80015ca:	f00b f95d 	bl	800c888 <HAL_TIM_Encoder_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80015d4:	f000 fc84 	bl	8001ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d8:	2300      	movs	r3, #0
 80015da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015e0:	463b      	mov	r3, r7
 80015e2:	4619      	mov	r1, r3
 80015e4:	4805      	ldr	r0, [pc, #20]	; (80015fc <MX_TIM2_Init+0xa4>)
 80015e6:	f00c fa37 	bl	800da58 <HAL_TIMEx_MasterConfigSynchronization>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80015f0:	f000 fc76 	bl	8001ee0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015f4:	bf00      	nop
 80015f6:	3730      	adds	r7, #48	; 0x30
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	240004f4 	.word	0x240004f4

08001600 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08c      	sub	sp, #48	; 0x30
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001606:	f107 030c 	add.w	r3, r7, #12
 800160a:	2224      	movs	r2, #36	; 0x24
 800160c:	2100      	movs	r1, #0
 800160e:	4618      	mov	r0, r3
 8001610:	f00e fd9d 	bl	801014e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001614:	463b      	mov	r3, r7
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800161e:	4b21      	ldr	r3, [pc, #132]	; (80016a4 <MX_TIM3_Init+0xa4>)
 8001620:	4a21      	ldr	r2, [pc, #132]	; (80016a8 <MX_TIM3_Init+0xa8>)
 8001622:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001624:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <MX_TIM3_Init+0xa4>)
 8001626:	2200      	movs	r2, #0
 8001628:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162a:	4b1e      	ldr	r3, [pc, #120]	; (80016a4 <MX_TIM3_Init+0xa4>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001630:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <MX_TIM3_Init+0xa4>)
 8001632:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001636:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001638:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <MX_TIM3_Init+0xa4>)
 800163a:	2200      	movs	r2, #0
 800163c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800163e:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <MX_TIM3_Init+0xa4>)
 8001640:	2200      	movs	r2, #0
 8001642:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001644:	2303      	movs	r3, #3
 8001646:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001648:	2300      	movs	r3, #0
 800164a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800164c:	2301      	movs	r3, #1
 800164e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001650:	2300      	movs	r3, #0
 8001652:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001658:	2300      	movs	r3, #0
 800165a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800165c:	2301      	movs	r3, #1
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001660:	2300      	movs	r3, #0
 8001662:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001664:	2300      	movs	r3, #0
 8001666:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001668:	f107 030c 	add.w	r3, r7, #12
 800166c:	4619      	mov	r1, r3
 800166e:	480d      	ldr	r0, [pc, #52]	; (80016a4 <MX_TIM3_Init+0xa4>)
 8001670:	f00b f90a 	bl	800c888 <HAL_TIM_Encoder_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800167a:	f000 fc31 	bl	8001ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800167e:	2300      	movs	r3, #0
 8001680:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001686:	463b      	mov	r3, r7
 8001688:	4619      	mov	r1, r3
 800168a:	4806      	ldr	r0, [pc, #24]	; (80016a4 <MX_TIM3_Init+0xa4>)
 800168c:	f00c f9e4 	bl	800da58 <HAL_TIMEx_MasterConfigSynchronization>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001696:	f000 fc23 	bl	8001ee0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800169a:	bf00      	nop
 800169c:	3730      	adds	r7, #48	; 0x30
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	24000540 	.word	0x24000540
 80016a8:	40000400 	.word	0x40000400

080016ac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08c      	sub	sp, #48	; 0x30
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016b2:	f107 030c 	add.w	r3, r7, #12
 80016b6:	2224      	movs	r2, #36	; 0x24
 80016b8:	2100      	movs	r1, #0
 80016ba:	4618      	mov	r0, r3
 80016bc:	f00e fd47 	bl	801014e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c0:	463b      	mov	r3, r7
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016ca:	4b21      	ldr	r3, [pc, #132]	; (8001750 <MX_TIM4_Init+0xa4>)
 80016cc:	4a21      	ldr	r2, [pc, #132]	; (8001754 <MX_TIM4_Init+0xa8>)
 80016ce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80016d0:	4b1f      	ldr	r3, [pc, #124]	; (8001750 <MX_TIM4_Init+0xa4>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d6:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <MX_TIM4_Init+0xa4>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80016dc:	4b1c      	ldr	r3, [pc, #112]	; (8001750 <MX_TIM4_Init+0xa4>)
 80016de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016e2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e4:	4b1a      	ldr	r3, [pc, #104]	; (8001750 <MX_TIM4_Init+0xa4>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ea:	4b19      	ldr	r3, [pc, #100]	; (8001750 <MX_TIM4_Init+0xa4>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016f0:	2303      	movs	r3, #3
 80016f2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016f4:	2300      	movs	r3, #0
 80016f6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016f8:	2301      	movs	r3, #1
 80016fa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001700:	2300      	movs	r3, #0
 8001702:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001704:	2300      	movs	r3, #0
 8001706:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001708:	2301      	movs	r3, #1
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800170c:	2300      	movs	r3, #0
 800170e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	4619      	mov	r1, r3
 800171a:	480d      	ldr	r0, [pc, #52]	; (8001750 <MX_TIM4_Init+0xa4>)
 800171c:	f00b f8b4 	bl	800c888 <HAL_TIM_Encoder_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001726:	f000 fbdb 	bl	8001ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800172a:	2300      	movs	r3, #0
 800172c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800172e:	2300      	movs	r3, #0
 8001730:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001732:	463b      	mov	r3, r7
 8001734:	4619      	mov	r1, r3
 8001736:	4806      	ldr	r0, [pc, #24]	; (8001750 <MX_TIM4_Init+0xa4>)
 8001738:	f00c f98e 	bl	800da58 <HAL_TIMEx_MasterConfigSynchronization>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001742:	f000 fbcd 	bl	8001ee0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001746:	bf00      	nop
 8001748:	3730      	adds	r7, #48	; 0x30
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	2400058c 	.word	0x2400058c
 8001754:	40000800 	.word	0x40000800

08001758 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08c      	sub	sp, #48	; 0x30
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800175e:	f107 030c 	add.w	r3, r7, #12
 8001762:	2224      	movs	r2, #36	; 0x24
 8001764:	2100      	movs	r1, #0
 8001766:	4618      	mov	r0, r3
 8001768:	f00e fcf1 	bl	801014e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800176c:	463b      	mov	r3, r7
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001776:	4b21      	ldr	r3, [pc, #132]	; (80017fc <MX_TIM5_Init+0xa4>)
 8001778:	4a21      	ldr	r2, [pc, #132]	; (8001800 <MX_TIM5_Init+0xa8>)
 800177a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800177c:	4b1f      	ldr	r3, [pc, #124]	; (80017fc <MX_TIM5_Init+0xa4>)
 800177e:	2200      	movs	r2, #0
 8001780:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001782:	4b1e      	ldr	r3, [pc, #120]	; (80017fc <MX_TIM5_Init+0xa4>)
 8001784:	2200      	movs	r2, #0
 8001786:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001788:	4b1c      	ldr	r3, [pc, #112]	; (80017fc <MX_TIM5_Init+0xa4>)
 800178a:	f04f 32ff 	mov.w	r2, #4294967295
 800178e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001790:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <MX_TIM5_Init+0xa4>)
 8001792:	2200      	movs	r2, #0
 8001794:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001796:	4b19      	ldr	r3, [pc, #100]	; (80017fc <MX_TIM5_Init+0xa4>)
 8001798:	2200      	movs	r2, #0
 800179a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800179c:	2303      	movs	r3, #3
 800179e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017a0:	2300      	movs	r3, #0
 80017a2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017a4:	2301      	movs	r3, #1
 80017a6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017a8:	2300      	movs	r3, #0
 80017aa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017b0:	2300      	movs	r3, #0
 80017b2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017b4:	2301      	movs	r3, #1
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017b8:	2300      	movs	r3, #0
 80017ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80017bc:	2300      	movs	r3, #0
 80017be:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80017c0:	f107 030c 	add.w	r3, r7, #12
 80017c4:	4619      	mov	r1, r3
 80017c6:	480d      	ldr	r0, [pc, #52]	; (80017fc <MX_TIM5_Init+0xa4>)
 80017c8:	f00b f85e 	bl	800c888 <HAL_TIM_Encoder_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 80017d2:	f000 fb85 	bl	8001ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d6:	2300      	movs	r3, #0
 80017d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017da:	2300      	movs	r3, #0
 80017dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80017de:	463b      	mov	r3, r7
 80017e0:	4619      	mov	r1, r3
 80017e2:	4806      	ldr	r0, [pc, #24]	; (80017fc <MX_TIM5_Init+0xa4>)
 80017e4:	f00c f938 	bl	800da58 <HAL_TIMEx_MasterConfigSynchronization>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80017ee:	f000 fb77 	bl	8001ee0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80017f2:	bf00      	nop
 80017f4:	3730      	adds	r7, #48	; 0x30
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	240005d8 	.word	0x240005d8
 8001800:	40000c00 	.word	0x40000c00

08001804 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800180a:	f107 0310 	add.w	r3, r7, #16
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	605a      	str	r2, [r3, #4]
 8001814:	609a      	str	r2, [r3, #8]
 8001816:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001818:	1d3b      	adds	r3, r7, #4
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001822:	4b20      	ldr	r3, [pc, #128]	; (80018a4 <MX_TIM8_Init+0xa0>)
 8001824:	4a20      	ldr	r2, [pc, #128]	; (80018a8 <MX_TIM8_Init+0xa4>)
 8001826:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 8001828:	4b1e      	ldr	r3, [pc, #120]	; (80018a4 <MX_TIM8_Init+0xa0>)
 800182a:	2253      	movs	r2, #83	; 0x53
 800182c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800182e:	4b1d      	ldr	r3, [pc, #116]	; (80018a4 <MX_TIM8_Init+0xa0>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8001834:	4b1b      	ldr	r3, [pc, #108]	; (80018a4 <MX_TIM8_Init+0xa0>)
 8001836:	f240 32e7 	movw	r2, #999	; 0x3e7
 800183a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800183c:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <MX_TIM8_Init+0xa0>)
 800183e:	2200      	movs	r2, #0
 8001840:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001842:	4b18      	ldr	r3, [pc, #96]	; (80018a4 <MX_TIM8_Init+0xa0>)
 8001844:	2200      	movs	r2, #0
 8001846:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001848:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <MX_TIM8_Init+0xa0>)
 800184a:	2200      	movs	r2, #0
 800184c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800184e:	4815      	ldr	r0, [pc, #84]	; (80018a4 <MX_TIM8_Init+0xa0>)
 8001850:	f00a fdc8 	bl	800c3e4 <HAL_TIM_Base_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800185a:	f000 fb41 	bl	8001ee0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800185e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001862:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001864:	f107 0310 	add.w	r3, r7, #16
 8001868:	4619      	mov	r1, r3
 800186a:	480e      	ldr	r0, [pc, #56]	; (80018a4 <MX_TIM8_Init+0xa0>)
 800186c:	f00b fb94 	bl	800cf98 <HAL_TIM_ConfigClockSource>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001876:	f000 fb33 	bl	8001ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800187a:	2300      	movs	r3, #0
 800187c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800187e:	2300      	movs	r3, #0
 8001880:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001886:	1d3b      	adds	r3, r7, #4
 8001888:	4619      	mov	r1, r3
 800188a:	4806      	ldr	r0, [pc, #24]	; (80018a4 <MX_TIM8_Init+0xa0>)
 800188c:	f00c f8e4 	bl	800da58 <HAL_TIMEx_MasterConfigSynchronization>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001896:	f000 fb23 	bl	8001ee0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800189a:	bf00      	nop
 800189c:	3720      	adds	r7, #32
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	24000624 	.word	0x24000624
 80018a8:	40010400 	.word	0x40010400

080018ac <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08a      	sub	sp, #40	; 0x28
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018b2:	f107 031c 	add.w	r3, r7, #28
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018be:	463b      	mov	r3, r7
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
 80018cc:	615a      	str	r2, [r3, #20]
 80018ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80018d0:	4b27      	ldr	r3, [pc, #156]	; (8001970 <MX_TIM12_Init+0xc4>)
 80018d2:	4a28      	ldr	r2, [pc, #160]	; (8001974 <MX_TIM12_Init+0xc8>)
 80018d4:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80018d6:	4b26      	ldr	r3, [pc, #152]	; (8001970 <MX_TIM12_Init+0xc4>)
 80018d8:	2200      	movs	r2, #0
 80018da:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018dc:	4b24      	ldr	r3, [pc, #144]	; (8001970 <MX_TIM12_Init+0xc4>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 80018e2:	4b23      	ldr	r3, [pc, #140]	; (8001970 <MX_TIM12_Init+0xc4>)
 80018e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018e8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ea:	4b21      	ldr	r3, [pc, #132]	; (8001970 <MX_TIM12_Init+0xc4>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f0:	4b1f      	ldr	r3, [pc, #124]	; (8001970 <MX_TIM12_Init+0xc4>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80018f6:	481e      	ldr	r0, [pc, #120]	; (8001970 <MX_TIM12_Init+0xc4>)
 80018f8:	f00a fe52 	bl	800c5a0 <HAL_TIM_PWM_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 8001902:	f000 faed 	bl	8001ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800190a:	2300      	movs	r3, #0
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 800190e:	f107 031c 	add.w	r3, r7, #28
 8001912:	4619      	mov	r1, r3
 8001914:	4816      	ldr	r0, [pc, #88]	; (8001970 <MX_TIM12_Init+0xc4>)
 8001916:	f00c f89f 	bl	800da58 <HAL_TIMEx_MasterConfigSynchronization>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001920:	f000 fade 	bl	8001ee0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001924:	2360      	movs	r3, #96	; 0x60
 8001926:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800192c:	2300      	movs	r3, #0
 800192e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001930:	2300      	movs	r3, #0
 8001932:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001934:	463b      	mov	r3, r7
 8001936:	2200      	movs	r2, #0
 8001938:	4619      	mov	r1, r3
 800193a:	480d      	ldr	r0, [pc, #52]	; (8001970 <MX_TIM12_Init+0xc4>)
 800193c:	f00b fa18 	bl	800cd70 <HAL_TIM_PWM_ConfigChannel>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_TIM12_Init+0x9e>
  {
    Error_Handler();
 8001946:	f000 facb 	bl	8001ee0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800194a:	463b      	mov	r3, r7
 800194c:	2204      	movs	r2, #4
 800194e:	4619      	mov	r1, r3
 8001950:	4807      	ldr	r0, [pc, #28]	; (8001970 <MX_TIM12_Init+0xc4>)
 8001952:	f00b fa0d 	bl	800cd70 <HAL_TIM_PWM_ConfigChannel>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM12_Init+0xb4>
  {
    Error_Handler();
 800195c:	f000 fac0 	bl	8001ee0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001960:	4803      	ldr	r0, [pc, #12]	; (8001970 <MX_TIM12_Init+0xc4>)
 8001962:	f003 ff9f 	bl	80058a4 <HAL_TIM_MspPostInit>

}
 8001966:	bf00      	nop
 8001968:	3728      	adds	r7, #40	; 0x28
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	24000670 	.word	0x24000670
 8001974:	40001800 	.word	0x40001800

08001978 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b098      	sub	sp, #96	; 0x60
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800197e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]
 8001988:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800198a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]
 8001994:	609a      	str	r2, [r3, #8]
 8001996:	60da      	str	r2, [r3, #12]
 8001998:	611a      	str	r2, [r3, #16]
 800199a:	615a      	str	r2, [r3, #20]
 800199c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	2234      	movs	r2, #52	; 0x34
 80019a2:	2100      	movs	r1, #0
 80019a4:	4618      	mov	r0, r3
 80019a6:	f00e fbd2 	bl	801014e <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80019aa:	4b3a      	ldr	r3, [pc, #232]	; (8001a94 <MX_TIM15_Init+0x11c>)
 80019ac:	4a3a      	ldr	r2, [pc, #232]	; (8001a98 <MX_TIM15_Init+0x120>)
 80019ae:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80019b0:	4b38      	ldr	r3, [pc, #224]	; (8001a94 <MX_TIM15_Init+0x11c>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b6:	4b37      	ldr	r3, [pc, #220]	; (8001a94 <MX_TIM15_Init+0x11c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 80019bc:	4b35      	ldr	r3, [pc, #212]	; (8001a94 <MX_TIM15_Init+0x11c>)
 80019be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019c2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c4:	4b33      	ldr	r3, [pc, #204]	; (8001a94 <MX_TIM15_Init+0x11c>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80019ca:	4b32      	ldr	r3, [pc, #200]	; (8001a94 <MX_TIM15_Init+0x11c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d0:	4b30      	ldr	r3, [pc, #192]	; (8001a94 <MX_TIM15_Init+0x11c>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80019d6:	482f      	ldr	r0, [pc, #188]	; (8001a94 <MX_TIM15_Init+0x11c>)
 80019d8:	f00a fde2 	bl	800c5a0 <HAL_TIM_PWM_Init>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80019e2:	f000 fa7d 	bl	8001ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019e6:	2300      	movs	r3, #0
 80019e8:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80019ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019f2:	4619      	mov	r1, r3
 80019f4:	4827      	ldr	r0, [pc, #156]	; (8001a94 <MX_TIM15_Init+0x11c>)
 80019f6:	f00c f82f 	bl	800da58 <HAL_TIMEx_MasterConfigSynchronization>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001a00:	f000 fa6e 	bl	8001ee0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a04:	2360      	movs	r3, #96	; 0x60
 8001a06:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a10:	2300      	movs	r3, #0
 8001a12:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a20:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a24:	2200      	movs	r2, #0
 8001a26:	4619      	mov	r1, r3
 8001a28:	481a      	ldr	r0, [pc, #104]	; (8001a94 <MX_TIM15_Init+0x11c>)
 8001a2a:	f00b f9a1 	bl	800cd70 <HAL_TIM_PWM_ConfigChannel>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001a34:	f000 fa54 	bl	8001ee0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a38:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a3c:	2204      	movs	r2, #4
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4814      	ldr	r0, [pc, #80]	; (8001a94 <MX_TIM15_Init+0x11c>)
 8001a42:	f00b f995 	bl	800cd70 <HAL_TIM_PWM_ConfigChannel>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8001a4c:	f000 fa48 	bl	8001ee0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a50:	2300      	movs	r3, #0
 8001a52:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a68:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	4619      	mov	r1, r3
 8001a76:	4807      	ldr	r0, [pc, #28]	; (8001a94 <MX_TIM15_Init+0x11c>)
 8001a78:	f00c f88a 	bl	800db90 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8001a82:	f000 fa2d 	bl	8001ee0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001a86:	4803      	ldr	r0, [pc, #12]	; (8001a94 <MX_TIM15_Init+0x11c>)
 8001a88:	f003 ff0c 	bl	80058a4 <HAL_TIM_MspPostInit>

}
 8001a8c:	bf00      	nop
 8001a8e:	3760      	adds	r7, #96	; 0x60
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	240006bc 	.word	0x240006bc
 8001a98:	40014000 	.word	0x40014000

08001a9c <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b088      	sub	sp, #32
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aa2:	f107 0310 	add.w	r3, r7, #16
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	609a      	str	r2, [r3, #8]
 8001aae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ab0:	1d3b      	adds	r3, r7, #4
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8001aba:	4b1d      	ldr	r3, [pc, #116]	; (8001b30 <MX_TIM23_Init+0x94>)
 8001abc:	4a1d      	ldr	r2, [pc, #116]	; (8001b34 <MX_TIM23_Init+0x98>)
 8001abe:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 83;
 8001ac0:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <MX_TIM23_Init+0x94>)
 8001ac2:	2253      	movs	r2, #83	; 0x53
 8001ac4:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac6:	4b1a      	ldr	r3, [pc, #104]	; (8001b30 <MX_TIM23_Init+0x94>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 9999;
 8001acc:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <MX_TIM23_Init+0x94>)
 8001ace:	f242 720f 	movw	r2, #9999	; 0x270f
 8001ad2:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad4:	4b16      	ldr	r3, [pc, #88]	; (8001b30 <MX_TIM23_Init+0x94>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ada:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <MX_TIM23_Init+0x94>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 8001ae0:	4813      	ldr	r0, [pc, #76]	; (8001b30 <MX_TIM23_Init+0x94>)
 8001ae2:	f00a fc7f 	bl	800c3e4 <HAL_TIM_Base_Init>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_TIM23_Init+0x54>
  {
    Error_Handler();
 8001aec:	f000 f9f8 	bl	8001ee0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001af0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001af4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 8001af6:	f107 0310 	add.w	r3, r7, #16
 8001afa:	4619      	mov	r1, r3
 8001afc:	480c      	ldr	r0, [pc, #48]	; (8001b30 <MX_TIM23_Init+0x94>)
 8001afe:	f00b fa4b 	bl	800cf98 <HAL_TIM_ConfigClockSource>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM23_Init+0x70>
  {
    Error_Handler();
 8001b08:	f000 f9ea 	bl	8001ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8001b14:	1d3b      	adds	r3, r7, #4
 8001b16:	4619      	mov	r1, r3
 8001b18:	4805      	ldr	r0, [pc, #20]	; (8001b30 <MX_TIM23_Init+0x94>)
 8001b1a:	f00b ff9d 	bl	800da58 <HAL_TIMEx_MasterConfigSynchronization>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM23_Init+0x8c>
  {
    Error_Handler();
 8001b24:	f000 f9dc 	bl	8001ee0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8001b28:	bf00      	nop
 8001b2a:	3720      	adds	r7, #32
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	24000708 	.word	0x24000708
 8001b34:	4000e000 	.word	0x4000e000

08001b38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b3c:	4b22      	ldr	r3, [pc, #136]	; (8001bc8 <MX_USART1_UART_Init+0x90>)
 8001b3e:	4a23      	ldr	r2, [pc, #140]	; (8001bcc <MX_USART1_UART_Init+0x94>)
 8001b40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001b42:	4b21      	ldr	r3, [pc, #132]	; (8001bc8 <MX_USART1_UART_Init+0x90>)
 8001b44:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001b48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b4a:	4b1f      	ldr	r3, [pc, #124]	; (8001bc8 <MX_USART1_UART_Init+0x90>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b50:	4b1d      	ldr	r3, [pc, #116]	; (8001bc8 <MX_USART1_UART_Init+0x90>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b56:	4b1c      	ldr	r3, [pc, #112]	; (8001bc8 <MX_USART1_UART_Init+0x90>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b5c:	4b1a      	ldr	r3, [pc, #104]	; (8001bc8 <MX_USART1_UART_Init+0x90>)
 8001b5e:	220c      	movs	r2, #12
 8001b60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b62:	4b19      	ldr	r3, [pc, #100]	; (8001bc8 <MX_USART1_UART_Init+0x90>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b68:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <MX_USART1_UART_Init+0x90>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b6e:	4b16      	ldr	r3, [pc, #88]	; (8001bc8 <MX_USART1_UART_Init+0x90>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b74:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <MX_USART1_UART_Init+0x90>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b7a:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <MX_USART1_UART_Init+0x90>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b80:	4811      	ldr	r0, [pc, #68]	; (8001bc8 <MX_USART1_UART_Init+0x90>)
 8001b82:	f00c f8c3 	bl	800dd0c <HAL_UART_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001b8c:	f000 f9a8 	bl	8001ee0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b90:	2100      	movs	r1, #0
 8001b92:	480d      	ldr	r0, [pc, #52]	; (8001bc8 <MX_USART1_UART_Init+0x90>)
 8001b94:	f00e f9da 	bl	800ff4c <HAL_UARTEx_SetTxFifoThreshold>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001b9e:	f000 f99f 	bl	8001ee0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	4808      	ldr	r0, [pc, #32]	; (8001bc8 <MX_USART1_UART_Init+0x90>)
 8001ba6:	f00e fa0f 	bl	800ffc8 <HAL_UARTEx_SetRxFifoThreshold>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001bb0:	f000 f996 	bl	8001ee0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001bb4:	4804      	ldr	r0, [pc, #16]	; (8001bc8 <MX_USART1_UART_Init+0x90>)
 8001bb6:	f00e f990 	bl	800feda <HAL_UARTEx_DisableFifoMode>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001bc0:	f000 f98e 	bl	8001ee0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bc4:	bf00      	nop
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	24000754 	.word	0x24000754
 8001bcc:	40011000 	.word	0x40011000

08001bd0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001bd4:	4b22      	ldr	r3, [pc, #136]	; (8001c60 <MX_USART3_UART_Init+0x90>)
 8001bd6:	4a23      	ldr	r2, [pc, #140]	; (8001c64 <MX_USART3_UART_Init+0x94>)
 8001bd8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 500000;
 8001bda:	4b21      	ldr	r3, [pc, #132]	; (8001c60 <MX_USART3_UART_Init+0x90>)
 8001bdc:	4a22      	ldr	r2, [pc, #136]	; (8001c68 <MX_USART3_UART_Init+0x98>)
 8001bde:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001be0:	4b1f      	ldr	r3, [pc, #124]	; (8001c60 <MX_USART3_UART_Init+0x90>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001be6:	4b1e      	ldr	r3, [pc, #120]	; (8001c60 <MX_USART3_UART_Init+0x90>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001bec:	4b1c      	ldr	r3, [pc, #112]	; (8001c60 <MX_USART3_UART_Init+0x90>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001bf2:	4b1b      	ldr	r3, [pc, #108]	; (8001c60 <MX_USART3_UART_Init+0x90>)
 8001bf4:	220c      	movs	r2, #12
 8001bf6:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bf8:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <MX_USART3_UART_Init+0x90>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bfe:	4b18      	ldr	r3, [pc, #96]	; (8001c60 <MX_USART3_UART_Init+0x90>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c04:	4b16      	ldr	r3, [pc, #88]	; (8001c60 <MX_USART3_UART_Init+0x90>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c0a:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <MX_USART3_UART_Init+0x90>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c10:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <MX_USART3_UART_Init+0x90>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c16:	4812      	ldr	r0, [pc, #72]	; (8001c60 <MX_USART3_UART_Init+0x90>)
 8001c18:	f00c f878 	bl	800dd0c <HAL_UART_Init>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8001c22:	f000 f95d 	bl	8001ee0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c26:	2100      	movs	r1, #0
 8001c28:	480d      	ldr	r0, [pc, #52]	; (8001c60 <MX_USART3_UART_Init+0x90>)
 8001c2a:	f00e f98f 	bl	800ff4c <HAL_UARTEx_SetTxFifoThreshold>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8001c34:	f000 f954 	bl	8001ee0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c38:	2100      	movs	r1, #0
 8001c3a:	4809      	ldr	r0, [pc, #36]	; (8001c60 <MX_USART3_UART_Init+0x90>)
 8001c3c:	f00e f9c4 	bl	800ffc8 <HAL_UARTEx_SetRxFifoThreshold>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8001c46:	f000 f94b 	bl	8001ee0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001c4a:	4805      	ldr	r0, [pc, #20]	; (8001c60 <MX_USART3_UART_Init+0x90>)
 8001c4c:	f00e f945 	bl	800feda <HAL_UARTEx_DisableFifoMode>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8001c56:	f000 f943 	bl	8001ee0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	240007e8 	.word	0x240007e8
 8001c64:	40004800 	.word	0x40004800
 8001c68:	0007a120 	.word	0x0007a120

08001c6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c72:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <MX_DMA_Init+0x4c>)
 8001c74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c78:	4a0f      	ldr	r2, [pc, #60]	; (8001cb8 <MX_DMA_Init+0x4c>)
 8001c7a:	f043 0301 	orr.w	r3, r3, #1
 8001c7e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c82:	4b0d      	ldr	r3, [pc, #52]	; (8001cb8 <MX_DMA_Init+0x4c>)
 8001c84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	607b      	str	r3, [r7, #4]
 8001c8e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001c90:	2200      	movs	r2, #0
 8001c92:	2100      	movs	r1, #0
 8001c94:	200b      	movs	r0, #11
 8001c96:	f004 fb4e 	bl	8006336 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001c9a:	200b      	movs	r0, #11
 8001c9c:	f004 fb65 	bl	800636a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	200c      	movs	r0, #12
 8001ca6:	f004 fb46 	bl	8006336 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001caa:	200c      	movs	r0, #12
 8001cac:	f004 fb5d 	bl	800636a <HAL_NVIC_EnableIRQ>

}
 8001cb0:	bf00      	nop
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	58024400 	.word	0x58024400

08001cbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08e      	sub	sp, #56	; 0x38
 8001cc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	605a      	str	r2, [r3, #4]
 8001ccc:	609a      	str	r2, [r3, #8]
 8001cce:	60da      	str	r2, [r3, #12]
 8001cd0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cd2:	4b7c      	ldr	r3, [pc, #496]	; (8001ec4 <MX_GPIO_Init+0x208>)
 8001cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd8:	4a7a      	ldr	r2, [pc, #488]	; (8001ec4 <MX_GPIO_Init+0x208>)
 8001cda:	f043 0310 	orr.w	r3, r3, #16
 8001cde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ce2:	4b78      	ldr	r3, [pc, #480]	; (8001ec4 <MX_GPIO_Init+0x208>)
 8001ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce8:	f003 0310 	and.w	r3, r3, #16
 8001cec:	623b      	str	r3, [r7, #32]
 8001cee:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf0:	4b74      	ldr	r3, [pc, #464]	; (8001ec4 <MX_GPIO_Init+0x208>)
 8001cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf6:	4a73      	ldr	r2, [pc, #460]	; (8001ec4 <MX_GPIO_Init+0x208>)
 8001cf8:	f043 0304 	orr.w	r3, r3, #4
 8001cfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d00:	4b70      	ldr	r3, [pc, #448]	; (8001ec4 <MX_GPIO_Init+0x208>)
 8001d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	61fb      	str	r3, [r7, #28]
 8001d0c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d0e:	4b6d      	ldr	r3, [pc, #436]	; (8001ec4 <MX_GPIO_Init+0x208>)
 8001d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d14:	4a6b      	ldr	r2, [pc, #428]	; (8001ec4 <MX_GPIO_Init+0x208>)
 8001d16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d1e:	4b69      	ldr	r3, [pc, #420]	; (8001ec4 <MX_GPIO_Init+0x208>)
 8001d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d28:	61bb      	str	r3, [r7, #24]
 8001d2a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2c:	4b65      	ldr	r3, [pc, #404]	; (8001ec4 <MX_GPIO_Init+0x208>)
 8001d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d32:	4a64      	ldr	r2, [pc, #400]	; (8001ec4 <MX_GPIO_Init+0x208>)
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d3c:	4b61      	ldr	r3, [pc, #388]	; (8001ec4 <MX_GPIO_Init+0x208>)
 8001d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	617b      	str	r3, [r7, #20]
 8001d48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d4a:	4b5e      	ldr	r3, [pc, #376]	; (8001ec4 <MX_GPIO_Init+0x208>)
 8001d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d50:	4a5c      	ldr	r2, [pc, #368]	; (8001ec4 <MX_GPIO_Init+0x208>)
 8001d52:	f043 0320 	orr.w	r3, r3, #32
 8001d56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d5a:	4b5a      	ldr	r3, [pc, #360]	; (8001ec4 <MX_GPIO_Init+0x208>)
 8001d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d60:	f003 0320 	and.w	r3, r3, #32
 8001d64:	613b      	str	r3, [r7, #16]
 8001d66:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d68:	4b56      	ldr	r3, [pc, #344]	; (8001ec4 <MX_GPIO_Init+0x208>)
 8001d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d6e:	4a55      	ldr	r2, [pc, #340]	; (8001ec4 <MX_GPIO_Init+0x208>)
 8001d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d78:	4b52      	ldr	r3, [pc, #328]	; (8001ec4 <MX_GPIO_Init+0x208>)
 8001d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d86:	4b4f      	ldr	r3, [pc, #316]	; (8001ec4 <MX_GPIO_Init+0x208>)
 8001d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d8c:	4a4d      	ldr	r2, [pc, #308]	; (8001ec4 <MX_GPIO_Init+0x208>)
 8001d8e:	f043 0302 	orr.w	r3, r3, #2
 8001d92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d96:	4b4b      	ldr	r3, [pc, #300]	; (8001ec4 <MX_GPIO_Init+0x208>)
 8001d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	60bb      	str	r3, [r7, #8]
 8001da2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001da4:	4b47      	ldr	r3, [pc, #284]	; (8001ec4 <MX_GPIO_Init+0x208>)
 8001da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001daa:	4a46      	ldr	r2, [pc, #280]	; (8001ec4 <MX_GPIO_Init+0x208>)
 8001dac:	f043 0308 	orr.w	r3, r3, #8
 8001db0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001db4:	4b43      	ldr	r3, [pc, #268]	; (8001ec4 <MX_GPIO_Init+0x208>)
 8001db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dba:	f003 0308 	and.w	r3, r3, #8
 8001dbe:	607b      	str	r3, [r7, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f248 711c 	movw	r1, #34588	; 0x871c
 8001dc8:	483f      	ldr	r0, [pc, #252]	; (8001ec8 <MX_GPIO_Init+0x20c>)
 8001dca:	f007 fd8f 	bl	80098ec <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dd4:	483d      	ldr	r0, [pc, #244]	; (8001ecc <MX_GPIO_Init+0x210>)
 8001dd6:	f007 fd89 	bl	80098ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001de0:	483b      	ldr	r0, [pc, #236]	; (8001ed0 <MX_GPIO_Init+0x214>)
 8001de2:	f007 fd83 	bl	80098ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 8001de6:	2200      	movs	r2, #0
 8001de8:	2101      	movs	r1, #1
 8001dea:	483a      	ldr	r0, [pc, #232]	; (8001ed4 <MX_GPIO_Init+0x218>)
 8001dec:	f007 fd7e 	bl	80098ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001df0:	2200      	movs	r2, #0
 8001df2:	f44f 5143 	mov.w	r1, #12480	; 0x30c0
 8001df6:	4838      	ldr	r0, [pc, #224]	; (8001ed8 <MX_GPIO_Init+0x21c>)
 8001df8:	f007 fd78 	bl	80098ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_14, GPIO_PIN_RESET);
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f44f 4182 	mov.w	r1, #16640	; 0x4100
 8001e02:	4836      	ldr	r0, [pc, #216]	; (8001edc <MX_GPIO_Init+0x220>)
 8001e04:	f007 fd72 	bl	80098ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE8
                           PE9 PE10 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8
 8001e08:	f248 731c 	movw	r3, #34588	; 0x871c
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e16:	2300      	movs	r3, #0
 8001e18:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4829      	ldr	r0, [pc, #164]	; (8001ec8 <MX_GPIO_Init+0x20c>)
 8001e22:	f007 fab9 	bl	8009398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001e26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e34:	2300      	movs	r3, #0
 8001e36:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4823      	ldr	r0, [pc, #140]	; (8001ecc <MX_GPIO_Init+0x210>)
 8001e40:	f007 faaa 	bl	8009398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001e44:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e52:	2300      	movs	r3, #0
 8001e54:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	481c      	ldr	r0, [pc, #112]	; (8001ed0 <MX_GPIO_Init+0x214>)
 8001e5e:	f007 fa9b 	bl	8009398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e62:	2301      	movs	r3, #1
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e66:	2301      	movs	r3, #1
 8001e68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e76:	4619      	mov	r1, r3
 8001e78:	4816      	ldr	r0, [pc, #88]	; (8001ed4 <MX_GPIO_Init+0x218>)
 8001e7a:	f007 fa8d 	bl	8009398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7;
 8001e7e:	f44f 5343 	mov.w	r3, #12480	; 0x30c0
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e84:	2301      	movs	r3, #1
 8001e86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e94:	4619      	mov	r1, r3
 8001e96:	4810      	ldr	r0, [pc, #64]	; (8001ed8 <MX_GPIO_Init+0x21c>)
 8001e98:	f007 fa7e 	bl	8009398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_14;
 8001e9c:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4809      	ldr	r0, [pc, #36]	; (8001edc <MX_GPIO_Init+0x220>)
 8001eb6:	f007 fa6f 	bl	8009398 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001eba:	bf00      	nop
 8001ebc:	3738      	adds	r7, #56	; 0x38
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	58024400 	.word	0x58024400
 8001ec8:	58021000 	.word	0x58021000
 8001ecc:	58020800 	.word	0x58020800
 8001ed0:	58021400 	.word	0x58021400
 8001ed4:	58021800 	.word	0x58021800
 8001ed8:	58020400 	.word	0x58020400
 8001edc:	58020c00 	.word	0x58020c00

08001ee0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ee4:	b672      	cpsid	i
}
 8001ee6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ee8:	e7fe      	b.n	8001ee8 <Error_Handler+0x8>

08001eea <_ZN6PUSHERC1Ev>:
#define PUSHER_D_IN2_PIN GPIO_PIN_15

#define PUSHER_SPEED 33.6

void pusher_reset();
class PUSHER{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	f04f 0200 	mov.w	r2, #0
 8001ef8:	f04f 0300 	mov.w	r3, #0
 8001efc:	e9c1 2300 	strd	r2, r3, [r1]
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	f04f 0200 	mov.w	r2, #0
 8001f14:	f04f 0300 	mov.w	r3, #0
 8001f18:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	619a      	str	r2, [r3, #24]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4618      	mov	r0, r3
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <main_function>:
int a=0;
int flag = 0;
double Vx = 0, Vy = 0, W, rVx, rVy, rW;
int script_state = 0;

void main_function(){
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b090      	sub	sp, #64	; 0x40
 8001f34:	af00      	add	r7, sp, #0
	PUSHER pusher_A;
 8001f36:	f107 0320 	add.w	r3, r7, #32
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff ffd5 	bl	8001eea <_ZN6PUSHERC1Ev>
	PUSHER pusher_B;
 8001f40:	463b      	mov	r3, r7
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff ffd1 	bl	8001eea <_ZN6PUSHERC1Ev>
//	PUSHER pusher_C;
//	PUSHER pusher_D;
//	SCRIPT script_a;
	ros_setup();
 8001f48:	f001 ffc6 	bl	8003ed8 <_Z9ros_setupv>
	stm_setup();
 8001f4c:	f000 f846 	bl	8001fdc <stm_setup>
	pusher_reset();
 8001f50:	f000 f876 	bl	8002040 <_Z12pusher_resetv>
	script_a.scriptrun = 0;
 8001f54:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <main_function+0x94>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
	script_b.scriptrun = 0;
 8001f5a:	4b1b      	ldr	r3, [pc, #108]	; (8001fc8 <main_function+0x98>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
	while(1){
		a++;
 8001f60:	4b1a      	ldr	r3, [pc, #104]	; (8001fcc <main_function+0x9c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	3301      	adds	r3, #1
 8001f66:	4a19      	ldr	r2, [pc, #100]	; (8001fcc <main_function+0x9c>)
 8001f68:	6013      	str	r3, [r2, #0]
		ros_loop();
 8001f6a:	f001 ffd1 	bl	8003f10 <_Z8ros_loopv>
		if(flag == 6 ){
 8001f6e:	4b18      	ldr	r3, [pc, #96]	; (8001fd0 <main_function+0xa0>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2b06      	cmp	r3, #6
 8001f74:	d105      	bne.n	8001f82 <main_function+0x52>
			script_a.scriptrun = 1;
 8001f76:	4b13      	ldr	r3, [pc, #76]	; (8001fc4 <main_function+0x94>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	601a      	str	r2, [r3, #0]
			flag = 0;
 8001f7c:	4b14      	ldr	r3, [pc, #80]	; (8001fd0 <main_function+0xa0>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
		}
		if(flag == 7){
 8001f82:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <main_function+0xa0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2b07      	cmp	r3, #7
 8001f88:	d113      	bne.n	8001fb2 <main_function+0x82>
			script_b.scriptrun = 1;
 8001f8a:	4b0f      	ldr	r3, [pc, #60]	; (8001fc8 <main_function+0x98>)
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	601a      	str	r2, [r3, #0]
			flag = 0;
 8001f90:	4b0f      	ldr	r3, [pc, #60]	; (8001fd0 <main_function+0xa0>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]
		}
		while(script_a.scriptrun == 1 || script_b.scriptrun == 1){
 8001f96:	e00c      	b.n	8001fb2 <main_function+0x82>
			if(everRun == 1 || everRun2 == 1){
 8001f98:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <main_function+0xa4>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d003      	beq.n	8001fa8 <main_function+0x78>
 8001fa0:	4b0d      	ldr	r3, [pc, #52]	; (8001fd8 <main_function+0xa8>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d102      	bne.n	8001fae <main_function+0x7e>
				script_a.scriptrun = 0;
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <main_function+0x94>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
			}
			script();
 8001fae:	f003 f803 	bl	8004fb8 <_Z6scriptv>
		while(script_a.scriptrun == 1 || script_b.scriptrun == 1){
 8001fb2:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <main_function+0x94>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d0ee      	beq.n	8001f98 <main_function+0x68>
 8001fba:	4b03      	ldr	r3, [pc, #12]	; (8001fc8 <main_function+0x98>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d0ea      	beq.n	8001f98 <main_function+0x68>
		a++;
 8001fc2:	e7cd      	b.n	8001f60 <main_function+0x30>
 8001fc4:	24002008 	.word	0x24002008
 8001fc8:	2400200c 	.word	0x2400200c
 8001fcc:	2400096c 	.word	0x2400096c
 8001fd0:	24000970 	.word	0x24000970
 8001fd4:	24002010 	.word	0x24002010
 8001fd8:	24002014 	.word	0x24002014

08001fdc <stm_setup>:
		}

	}
}
void stm_setup(void){
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim1);
 8001fe0:	4806      	ldr	r0, [pc, #24]	; (8001ffc <stm_setup+0x20>)
 8001fe2:	f00a fa57 	bl	800c494 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 8001fe6:	4806      	ldr	r0, [pc, #24]	; (8002000 <stm_setup+0x24>)
 8001fe8:	f00a fa54 	bl	800c494 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim23);//main Timer
 8001fec:	4805      	ldr	r0, [pc, #20]	; (8002004 <stm_setup+0x28>)
 8001fee:	f00a fa51 	bl	800c494 <HAL_TIM_Base_Start_IT>
	DC_motor_init();
 8001ff2:	f7ff f8a5 	bl	8001140 <_Z13DC_motor_initv>
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	240004a8 	.word	0x240004a8
 8002000:	24000624 	.word	0x24000624
 8002004:	24000708 	.word	0x24000708

08002008 <_Z13script_pusherdd>:
PUSHER pusher_B;
//PUSHER pusher_C;
//PUSHER pusher_D;


void script_pusher(double hight_a,double hight_b){
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	ed87 0b02 	vstr	d0, [r7, #8]
 8002012:	ed87 1b00 	vstr	d1, [r7]
	pusher_A.state = hight_a;
 8002016:	4908      	ldr	r1, [pc, #32]	; (8002038 <_Z13script_pusherdd+0x30>)
 8002018:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800201c:	e9c1 2300 	strd	r2, r3, [r1]
	pusher_B.state = hight_b;
 8002020:	4906      	ldr	r1, [pc, #24]	; (800203c <_Z13script_pusherdd+0x34>)
 8002022:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002026:	e9c1 2300 	strd	r2, r3, [r1]
}
 800202a:	bf00      	nop
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	240009a8 	.word	0x240009a8
 800203c:	240009c8 	.word	0x240009c8

08002040 <_Z12pusher_resetv>:

void pusher_reset(){
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
	script_pusher(-15,15);
 8002044:	eeb2 1b0e 	vmov.f64	d1, #46	; 0x41700000  15.0
 8002048:	eeba 0b0e 	vmov.f64	d0, #174	; 0xc1700000 -15.0
 800204c:	f7ff ffdc 	bl	8002008 <_Z13script_pusherdd>
	HAL_Delay(3500);
 8002050:	f640 50ac 	movw	r0, #3500	; 0xdac
 8002054:	f004 f84c 	bl	80060f0 <HAL_Delay>
	script_pusher(-15,14);
 8002058:	eeb2 1b0c 	vmov.f64	d1, #44	; 0x41600000  14.0
 800205c:	eeba 0b0e 	vmov.f64	d0, #174	; 0xc1700000 -15.0
 8002060:	f7ff ffd2 	bl	8002008 <_Z13script_pusherdd>
	HAL_Delay(1000);
 8002064:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002068:	f004 f842 	bl	80060f0 <HAL_Delay>
	pusher_A.state = 0;
 800206c:	490d      	ldr	r1, [pc, #52]	; (80020a4 <_Z12pusher_resetv+0x64>)
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	f04f 0300 	mov.w	r3, #0
 8002076:	e9c1 2300 	strd	r2, r3, [r1]
	pusher_A.p_state = 0;
 800207a:	490a      	ldr	r1, [pc, #40]	; (80020a4 <_Z12pusher_resetv+0x64>)
 800207c:	f04f 0200 	mov.w	r2, #0
 8002080:	f04f 0300 	mov.w	r3, #0
 8002084:	e9c1 2302 	strd	r2, r3, [r1, #8]
	pusher_B.state = 12;
 8002088:	4907      	ldr	r1, [pc, #28]	; (80020a8 <_Z12pusher_resetv+0x68>)
 800208a:	f04f 0200 	mov.w	r2, #0
 800208e:	4b07      	ldr	r3, [pc, #28]	; (80020ac <_Z12pusher_resetv+0x6c>)
 8002090:	e9c1 2300 	strd	r2, r3, [r1]
	pusher_B.p_state = 12;
 8002094:	4904      	ldr	r1, [pc, #16]	; (80020a8 <_Z12pusher_resetv+0x68>)
 8002096:	f04f 0200 	mov.w	r2, #0
 800209a:	4b04      	ldr	r3, [pc, #16]	; (80020ac <_Z12pusher_resetv+0x6c>)
 800209c:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 80020a0:	bf00      	nop
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	240009a8 	.word	0x240009a8
 80020a8:	240009c8 	.word	0x240009c8
 80020ac:	40280000 	.word	0x40280000

080020b0 <_ZN6PUSHER8distenceEv>:
void PUSHER::distence(){
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]

	pusher_A.d = (pusher_A.state - pusher_A.p_state)*10;
 80020b8:	4b11      	ldr	r3, [pc, #68]	; (8002100 <_ZN6PUSHER8distenceEv+0x50>)
 80020ba:	ed93 6b00 	vldr	d6, [r3]
 80020be:	4b10      	ldr	r3, [pc, #64]	; (8002100 <_ZN6PUSHER8distenceEv+0x50>)
 80020c0:	ed93 7b02 	vldr	d7, [r3, #8]
 80020c4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80020c8:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80020cc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80020d0:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <_ZN6PUSHER8distenceEv+0x50>)
 80020d2:	ed83 7b04 	vstr	d7, [r3, #16]
	pusher_B.d = (pusher_B.state - pusher_B.p_state)*10;
 80020d6:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <_ZN6PUSHER8distenceEv+0x54>)
 80020d8:	ed93 6b00 	vldr	d6, [r3]
 80020dc:	4b09      	ldr	r3, [pc, #36]	; (8002104 <_ZN6PUSHER8distenceEv+0x54>)
 80020de:	ed93 7b02 	vldr	d7, [r3, #8]
 80020e2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80020e6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80020ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80020ee:	4b05      	ldr	r3, [pc, #20]	; (8002104 <_ZN6PUSHER8distenceEv+0x54>)
 80020f0:	ed83 7b04 	vstr	d7, [r3, #16]
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	240009a8 	.word	0x240009a8
 8002104:	240009c8 	.word	0x240009c8

08002108 <_Z41__static_initialization_and_destruction_0ii>:
//	if(pusher_D.d ==0){
//		HAL_GPIO_WritePin(PUSHER_D_IN1_PORT, PUSHER_D_IN1_PIN, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(PUSHER_D_IN2_PORT, PUSHER_D_IN2_PIN, GPIO_PIN_RESET);
//
//	}
}
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d10a      	bne.n	800212e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800211e:	4293      	cmp	r3, r2
 8002120:	d105      	bne.n	800212e <_Z41__static_initialization_and_destruction_0ii+0x26>
PUSHER pusher_A;
 8002122:	4805      	ldr	r0, [pc, #20]	; (8002138 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8002124:	f7ff fee1 	bl	8001eea <_ZN6PUSHERC1Ev>
PUSHER pusher_B;
 8002128:	4804      	ldr	r0, [pc, #16]	; (800213c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800212a:	f7ff fede 	bl	8001eea <_ZN6PUSHERC1Ev>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	240009a8 	.word	0x240009a8
 800213c:	240009c8 	.word	0x240009c8

08002140 <_GLOBAL__sub_I_pusher_A>:
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
 8002144:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002148:	2001      	movs	r0, #1
 800214a:	f7ff ffdd 	bl	8002108 <_Z41__static_initialization_and_destruction_0ii>
 800214e:	bd80      	pop	{r7, pc}

08002150 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	605a      	str	r2, [r3, #4]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4618      	mov	r0, r3
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
	...

08002174 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	4a04      	ldr	r2, [pc, #16]	; (8002190 <_ZN3ros3MsgC1Ev+0x1c>)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4618      	mov	r0, r3
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	08010724 	.word	0x08010724

08002194 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
      data()
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff ffe8 	bl	8002174 <_ZN3ros3MsgC1Ev>
 80021a4:	4a06      	ldr	r2, [pc, #24]	; (80021c0 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	3304      	adds	r3, #4
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff ffce 	bl	8002150 <_ZN3ros4TimeC1Ev>
    {
    }
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4618      	mov	r0, r3
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	0801070c 	.word	0x0801070c

080021c4 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6859      	ldr	r1, [r3, #4]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	4413      	add	r3, r2
 80021dc:	b2ca      	uxtb	r2, r1
 80021de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	0a19      	lsrs	r1, r3, #8
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	3301      	adds	r3, #1
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	4413      	add	r3, r2
 80021ee:	b2ca      	uxtb	r2, r1
 80021f0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	0c19      	lsrs	r1, r3, #16
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	3302      	adds	r3, #2
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	4413      	add	r3, r2
 8002200:	b2ca      	uxtb	r2, r1
 8002202:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	0e19      	lsrs	r1, r3, #24
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	3303      	adds	r3, #3
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	4413      	add	r3, r2
 8002212:	b2ca      	uxtb	r2, r1
 8002214:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	3304      	adds	r3, #4
 800221a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6899      	ldr	r1, [r3, #8]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	4413      	add	r3, r2
 8002226:	b2ca      	uxtb	r2, r1
 8002228:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	0a19      	lsrs	r1, r3, #8
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	3301      	adds	r3, #1
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	4413      	add	r3, r2
 8002238:	b2ca      	uxtb	r2, r1
 800223a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	0c19      	lsrs	r1, r3, #16
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	3302      	adds	r3, #2
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	4413      	add	r3, r2
 800224a:	b2ca      	uxtb	r2, r1
 800224c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	0e19      	lsrs	r1, r3, #24
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	3303      	adds	r3, #3
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	4413      	add	r3, r2
 800225c:	b2ca      	uxtb	r2, r1
 800225e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	3304      	adds	r3, #4
 8002264:	60fb      	str	r3, [r7, #12]
      return offset;
 8002266:	68fb      	ldr	r3, [r7, #12]
    }
 8002268:	4618      	mov	r0, r3
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800227e:	2300      	movs	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	4413      	add	r3, r2
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	461a      	mov	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	3301      	adds	r3, #1
 8002298:	6839      	ldr	r1, [r7, #0]
 800229a:	440b      	add	r3, r1
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	021b      	lsls	r3, r3, #8
 80022a0:	431a      	orrs	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	3302      	adds	r3, #2
 80022ae:	6839      	ldr	r1, [r7, #0]
 80022b0:	440b      	add	r3, r1
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	041b      	lsls	r3, r3, #16
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	3303      	adds	r3, #3
 80022c4:	6839      	ldr	r1, [r7, #0]
 80022c6:	440b      	add	r3, r1
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	061b      	lsls	r3, r3, #24
 80022cc:	431a      	orrs	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	3304      	adds	r3, #4
 80022d6:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	4413      	add	r3, r2
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	461a      	mov	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	3301      	adds	r3, #1
 80022ee:	6839      	ldr	r1, [r7, #0]
 80022f0:	440b      	add	r3, r1
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	021b      	lsls	r3, r3, #8
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	3302      	adds	r3, #2
 8002304:	6839      	ldr	r1, [r7, #0]
 8002306:	440b      	add	r3, r1
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	041b      	lsls	r3, r3, #16
 800230c:	431a      	orrs	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	3303      	adds	r3, #3
 800231a:	6839      	ldr	r1, [r7, #0]
 800231c:	440b      	add	r3, r1
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	061b      	lsls	r3, r3, #24
 8002322:	431a      	orrs	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	3304      	adds	r3, #4
 800232c:	60fb      	str	r3, [r7, #12]
     return offset;
 800232e:	68fb      	ldr	r3, [r7, #12]
    }
 8002330:	4618      	mov	r0, r3
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	4b03      	ldr	r3, [pc, #12]	; (8002354 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	0801040c 	.word	0x0801040c

08002358 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	4b03      	ldr	r3, [pc, #12]	; (8002370 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8002362:	4618      	mov	r0, r3
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	0801041c 	.word	0x0801041c

08002374 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff fef8 	bl	8002174 <_ZN3ros3MsgC1Ev>
 8002384:	4a0b      	ldr	r2, [pc, #44]	; (80023b4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	601a      	str	r2, [r3, #0]
      topic_id(0),
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a09      	ldr	r2, [pc, #36]	; (80023b8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002394:	609a      	str	r2, [r3, #8]
      message_type(""),
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a07      	ldr	r2, [pc, #28]	; (80023b8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800239a:	60da      	str	r2, [r3, #12]
      md5sum(""),
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a06      	ldr	r2, [pc, #24]	; (80023b8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80023a0:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	615a      	str	r2, [r3, #20]
    {
    }
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4618      	mov	r0, r3
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	080106f4 	.word	0x080106f4
 80023b8:	08010440 	.word	0x08010440

080023bc <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80023bc:	b580      	push	{r7, lr}
 80023be:	b088      	sub	sp, #32
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80023c6:	2300      	movs	r3, #0
 80023c8:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	8899      	ldrh	r1, [r3, #4]
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	4413      	add	r3, r2
 80023d4:	b2ca      	uxtb	r2, r1
 80023d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	889b      	ldrh	r3, [r3, #4]
 80023dc:	0a1b      	lsrs	r3, r3, #8
 80023de:	b299      	uxth	r1, r3
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	3301      	adds	r3, #1
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	4413      	add	r3, r2
 80023e8:	b2ca      	uxtb	r2, r1
 80023ea:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	3302      	adds	r3, #2
 80023f0:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7fd ff8a 	bl	8000310 <strlen>
 80023fc:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	4413      	add	r3, r2
 8002404:	69b9      	ldr	r1, [r7, #24]
 8002406:	4618      	mov	r0, r3
 8002408:	f001 fe20 	bl	800404c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	3304      	adds	r3, #4
 8002410:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	18d0      	adds	r0, r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4619      	mov	r1, r3
 8002420:	f00d feca 	bl	80101b8 <memcpy>
      offset += length_topic_name;
 8002424:	69fa      	ldr	r2, [r7, #28]
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	4413      	add	r3, r2
 800242a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	4618      	mov	r0, r3
 8002432:	f7fd ff6d 	bl	8000310 <strlen>
 8002436:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	4413      	add	r3, r2
 800243e:	6979      	ldr	r1, [r7, #20]
 8002440:	4618      	mov	r0, r3
 8002442:	f001 fe03 	bl	800404c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	3304      	adds	r3, #4
 800244a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	18d0      	adds	r0, r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	4619      	mov	r1, r3
 800245a:	f00d fead 	bl	80101b8 <memcpy>
      offset += length_message_type;
 800245e:	69fa      	ldr	r2, [r7, #28]
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	4413      	add	r3, r2
 8002464:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	4618      	mov	r0, r3
 800246c:	f7fd ff50 	bl	8000310 <strlen>
 8002470:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	4413      	add	r3, r2
 8002478:	6939      	ldr	r1, [r7, #16]
 800247a:	4618      	mov	r0, r3
 800247c:	f001 fde6 	bl	800404c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	3304      	adds	r3, #4
 8002484:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	18d0      	adds	r0, r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	4619      	mov	r1, r3
 8002494:	f00d fe90 	bl	80101b8 <memcpy>
      offset += length_md5sum;
 8002498:	69fa      	ldr	r2, [r7, #28]
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	4413      	add	r3, r2
 800249e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80024a6:	68f9      	ldr	r1, [r7, #12]
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	4413      	add	r3, r2
 80024ae:	b2ca      	uxtb	r2, r1
 80024b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	0a19      	lsrs	r1, r3, #8
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	3301      	adds	r3, #1
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	4413      	add	r3, r2
 80024be:	b2ca      	uxtb	r2, r1
 80024c0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	0c19      	lsrs	r1, r3, #16
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	3302      	adds	r3, #2
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	4413      	add	r3, r2
 80024ce:	b2ca      	uxtb	r2, r1
 80024d0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	0e19      	lsrs	r1, r3, #24
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3303      	adds	r3, #3
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	4413      	add	r3, r2
 80024de:	b2ca      	uxtb	r2, r1
 80024e0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	3304      	adds	r3, #4
 80024e6:	61fb      	str	r3, [r7, #28]
      return offset;
 80024e8:	69fb      	ldr	r3, [r7, #28]
    }
 80024ea:	4618      	mov	r0, r3
 80024ec:	3720      	adds	r7, #32
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b08a      	sub	sp, #40	; 0x28
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
 80024fa:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80024fc:	2300      	movs	r3, #0
 80024fe:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	4413      	add	r3, r2
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	b29a      	uxth	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	889b      	ldrh	r3, [r3, #4]
 8002512:	b21a      	sxth	r2, r3
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	3301      	adds	r3, #1
 8002518:	6839      	ldr	r1, [r7, #0]
 800251a:	440b      	add	r3, r1
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	021b      	lsls	r3, r3, #8
 8002520:	b21b      	sxth	r3, r3
 8002522:	4313      	orrs	r3, r2
 8002524:	b21b      	sxth	r3, r3
 8002526:	b29a      	uxth	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	3302      	adds	r3, #2
 8002530:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	441a      	add	r2, r3
 8002538:	f107 0314 	add.w	r3, r7, #20
 800253c:	4611      	mov	r1, r2
 800253e:	4618      	mov	r0, r3
 8002540:	f001 fda3 	bl	800408a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	3304      	adds	r3, #4
 8002548:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	627b      	str	r3, [r7, #36]	; 0x24
 800254e:	e00b      	b.n	8002568 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	441a      	add	r2, r3
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	3b01      	subs	r3, #1
 800255a:	6839      	ldr	r1, [r7, #0]
 800255c:	440b      	add	r3, r1
 800255e:	7812      	ldrb	r2, [r2, #0]
 8002560:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	3301      	adds	r3, #1
 8002566:	627b      	str	r3, [r7, #36]	; 0x24
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	4413      	add	r3, r2
 800256e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002570:	429a      	cmp	r2, r3
 8002572:	d3ed      	bcc.n	8002550 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	4413      	add	r3, r2
 800257a:	3b01      	subs	r3, #1
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	4413      	add	r3, r2
 8002580:	2200      	movs	r2, #0
 8002582:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	3b01      	subs	r3, #1
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	441a      	add	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	4413      	add	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	441a      	add	r2, r3
 800259e:	f107 0310 	add.w	r3, r7, #16
 80025a2:	4611      	mov	r1, r2
 80025a4:	4618      	mov	r0, r3
 80025a6:	f001 fd70 	bl	800408a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	3304      	adds	r3, #4
 80025ae:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	623b      	str	r3, [r7, #32]
 80025b4:	e00b      	b.n	80025ce <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	6a3b      	ldr	r3, [r7, #32]
 80025ba:	441a      	add	r2, r3
 80025bc:	6a3b      	ldr	r3, [r7, #32]
 80025be:	3b01      	subs	r3, #1
 80025c0:	6839      	ldr	r1, [r7, #0]
 80025c2:	440b      	add	r3, r1
 80025c4:	7812      	ldrb	r2, [r2, #0]
 80025c6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80025c8:	6a3b      	ldr	r3, [r7, #32]
 80025ca:	3301      	adds	r3, #1
 80025cc:	623b      	str	r3, [r7, #32]
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	4413      	add	r3, r2
 80025d4:	6a3a      	ldr	r2, [r7, #32]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d3ed      	bcc.n	80025b6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	4413      	add	r3, r2
 80025e0:	3b01      	subs	r3, #1
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	4413      	add	r3, r2
 80025e6:	2200      	movs	r2, #0
 80025e8:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	3b01      	subs	r3, #1
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	441a      	add	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4413      	add	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	441a      	add	r2, r3
 8002604:	f107 030c 	add.w	r3, r7, #12
 8002608:	4611      	mov	r1, r2
 800260a:	4618      	mov	r0, r3
 800260c:	f001 fd3d 	bl	800408a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	3304      	adds	r3, #4
 8002614:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	61fb      	str	r3, [r7, #28]
 800261a:	e00b      	b.n	8002634 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	441a      	add	r2, r3
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	3b01      	subs	r3, #1
 8002626:	6839      	ldr	r1, [r7, #0]
 8002628:	440b      	add	r3, r1
 800262a:	7812      	ldrb	r2, [r2, #0]
 800262c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	3301      	adds	r3, #1
 8002632:	61fb      	str	r3, [r7, #28]
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	4413      	add	r3, r2
 800263a:	69fa      	ldr	r2, [r7, #28]
 800263c:	429a      	cmp	r2, r3
 800263e:	d3ed      	bcc.n	800261c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	4413      	add	r3, r2
 8002646:	3b01      	subs	r3, #1
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	4413      	add	r3, r2
 800264c:	2200      	movs	r2, #0
 800264e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	3b01      	subs	r3, #1
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	441a      	add	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	4413      	add	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002664:	2300      	movs	r3, #0
 8002666:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	6839      	ldr	r1, [r7, #0]
 800266e:	440a      	add	r2, r1
 8002670:	7812      	ldrb	r2, [r2, #0]
 8002672:	4313      	orrs	r3, r2
 8002674:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	3301      	adds	r3, #1
 800267c:	6839      	ldr	r1, [r7, #0]
 800267e:	440b      	add	r3, r1
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	021b      	lsls	r3, r3, #8
 8002684:	4313      	orrs	r3, r2
 8002686:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002688:	68ba      	ldr	r2, [r7, #8]
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	3302      	adds	r3, #2
 800268e:	6839      	ldr	r1, [r7, #0]
 8002690:	440b      	add	r3, r1
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	041b      	lsls	r3, r3, #16
 8002696:	4313      	orrs	r3, r2
 8002698:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	3303      	adds	r3, #3
 80026a0:	6839      	ldr	r1, [r7, #0]
 80026a2:	440b      	add	r3, r1
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	061b      	lsls	r3, r3, #24
 80026a8:	4313      	orrs	r3, r2
 80026aa:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	3304      	adds	r3, #4
 80026b6:	61bb      	str	r3, [r7, #24]
     return offset;
 80026b8:	69bb      	ldr	r3, [r7, #24]
    }
 80026ba:	4618      	mov	r0, r3
 80026bc:	3728      	adds	r7, #40	; 0x28
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
	...

080026c4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	4b03      	ldr	r3, [pc, #12]	; (80026dc <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80026ce:	4618      	mov	r0, r3
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	08010444 	.word	0x08010444

080026e0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	4b03      	ldr	r3, [pc, #12]	; (80026f8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80026ea:	4618      	mov	r0, r3
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	08010460 	.word	0x08010460

080026fc <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff fd34 	bl	8002174 <_ZN3ros3MsgC1Ev>
 800270c:	4a06      	ldr	r2, [pc, #24]	; (8002728 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	601a      	str	r2, [r3, #0]
      level(0),
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	711a      	strb	r2, [r3, #4]
      msg("")
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a04      	ldr	r2, [pc, #16]	; (800272c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 800271c:	609a      	str	r2, [r3, #8]
    {
    }
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4618      	mov	r0, r3
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	080106dc 	.word	0x080106dc
 800272c:	08010440 	.word	0x08010440

08002730 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800273a:	2300      	movs	r3, #0
 800273c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	4413      	add	r3, r2
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	7912      	ldrb	r2, [r2, #4]
 8002748:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	3301      	adds	r3, #1
 800274e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	4618      	mov	r0, r3
 8002756:	f7fd fddb 	bl	8000310 <strlen>
 800275a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	4413      	add	r3, r2
 8002762:	68b9      	ldr	r1, [r7, #8]
 8002764:	4618      	mov	r0, r3
 8002766:	f001 fc71 	bl	800404c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	3304      	adds	r3, #4
 800276e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	18d0      	adds	r0, r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	4619      	mov	r1, r3
 800277e:	f00d fd1b 	bl	80101b8 <memcpy>
      offset += length_msg;
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	4413      	add	r3, r2
 8002788:	60fb      	str	r3, [r7, #12]
      return offset;
 800278a:	68fb      	ldr	r3, [r7, #12]
    }
 800278c:	4618      	mov	r0, r3
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800279e:	2300      	movs	r3, #0
 80027a0:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	4413      	add	r3, r2
 80027a8:	781a      	ldrb	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	3301      	adds	r3, #1
 80027b2:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	441a      	add	r2, r3
 80027ba:	f107 030c 	add.w	r3, r7, #12
 80027be:	4611      	mov	r1, r2
 80027c0:	4618      	mov	r0, r3
 80027c2:	f001 fc62 	bl	800408a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	3304      	adds	r3, #4
 80027ca:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	617b      	str	r3, [r7, #20]
 80027d0:	e00b      	b.n	80027ea <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	441a      	add	r2, r3
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	3b01      	subs	r3, #1
 80027dc:	6839      	ldr	r1, [r7, #0]
 80027de:	440b      	add	r3, r1
 80027e0:	7812      	ldrb	r2, [r2, #0]
 80027e2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	3301      	adds	r3, #1
 80027e8:	617b      	str	r3, [r7, #20]
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4413      	add	r3, r2
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d3ed      	bcc.n	80027d2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4413      	add	r3, r2
 80027fc:	3b01      	subs	r3, #1
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	4413      	add	r3, r2
 8002802:	2200      	movs	r2, #0
 8002804:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	3b01      	subs	r3, #1
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	441a      	add	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4413      	add	r3, r2
 8002818:	613b      	str	r3, [r7, #16]
     return offset;
 800281a:	693b      	ldr	r3, [r7, #16]
    }
 800281c:	4618      	mov	r0, r3
 800281e:	3718      	adds	r7, #24
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	4b03      	ldr	r3, [pc, #12]	; (800283c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800282e:	4618      	mov	r0, r3
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	08010484 	.word	0x08010484

08002840 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	4b03      	ldr	r3, [pc, #12]	; (8002858 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800284a:	4618      	mov	r0, r3
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	08010498 	.word	0x08010498

0800285c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff fc84 	bl	8002174 <_ZN3ros3MsgC1Ev>
 800286c:	4a0c      	ldr	r2, [pc, #48]	; (80028a0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	601a      	str	r2, [r3, #0]
      ints_length(0), ints(NULL),
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	605a      	str	r2, [r3, #4]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	60da      	str	r2, [r3, #12]
      floats_length(0), floats(NULL),
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	611a      	str	r2, [r3, #16]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	619a      	str	r2, [r3, #24]
      strings_length(0), strings(NULL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	61da      	str	r2, [r3, #28]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4618      	mov	r0, r3
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	080106c4 	.word	0x080106c4

080028a4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b08a      	sub	sp, #40	; 0x28
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80028ae:	2300      	movs	r3, #0
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6859      	ldr	r1, [r3, #4]
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	4413      	add	r3, r2
 80028bc:	b2ca      	uxtb	r2, r1
 80028be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	0a19      	lsrs	r1, r3, #8
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	3301      	adds	r3, #1
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	4413      	add	r3, r2
 80028ce:	b2ca      	uxtb	r2, r1
 80028d0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	0c19      	lsrs	r1, r3, #16
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	3302      	adds	r3, #2
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	4413      	add	r3, r2
 80028e0:	b2ca      	uxtb	r2, r1
 80028e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	0e19      	lsrs	r1, r3, #24
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	3303      	adds	r3, #3
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	4413      	add	r3, r2
 80028f2:	b2ca      	uxtb	r2, r1
 80028f4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	3304      	adds	r3, #4
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80028fc:	2300      	movs	r3, #0
 80028fe:	623b      	str	r3, [r7, #32]
 8002900:	e02a      	b.n	8002958 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68da      	ldr	r2, [r3, #12]
 8002906:	6a3b      	ldr	r3, [r7, #32]
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002910:	6939      	ldr	r1, [r7, #16]
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	4413      	add	r3, r2
 8002918:	b2ca      	uxtb	r2, r1
 800291a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	0a19      	lsrs	r1, r3, #8
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	3301      	adds	r3, #1
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	4413      	add	r3, r2
 8002928:	b2ca      	uxtb	r2, r1
 800292a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	0c19      	lsrs	r1, r3, #16
 8002930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002932:	3302      	adds	r3, #2
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	4413      	add	r3, r2
 8002938:	b2ca      	uxtb	r2, r1
 800293a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	0e19      	lsrs	r1, r3, #24
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	3303      	adds	r3, #3
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	4413      	add	r3, r2
 8002948:	b2ca      	uxtb	r2, r1
 800294a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	3304      	adds	r3, #4
 8002950:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002952:	6a3b      	ldr	r3, [r7, #32]
 8002954:	3301      	adds	r3, #1
 8002956:	623b      	str	r3, [r7, #32]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	6a3a      	ldr	r2, [r7, #32]
 800295e:	429a      	cmp	r2, r3
 8002960:	d3cf      	bcc.n	8002902 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6919      	ldr	r1, [r3, #16]
 8002966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	4413      	add	r3, r2
 800296c:	b2ca      	uxtb	r2, r1
 800296e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	0a19      	lsrs	r1, r3, #8
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	3301      	adds	r3, #1
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	4413      	add	r3, r2
 800297e:	b2ca      	uxtb	r2, r1
 8002980:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	0c19      	lsrs	r1, r3, #16
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	3302      	adds	r3, #2
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	4413      	add	r3, r2
 8002990:	b2ca      	uxtb	r2, r1
 8002992:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	0e19      	lsrs	r1, r3, #24
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	3303      	adds	r3, #3
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	4413      	add	r3, r2
 80029a2:	b2ca      	uxtb	r2, r1
 80029a4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	3304      	adds	r3, #4
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80029ac:	2300      	movs	r3, #0
 80029ae:	61fb      	str	r3, [r7, #28]
 80029b0:	e02a      	b.n	8002a08 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	699a      	ldr	r2, [r3, #24]
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80029c0:	68f9      	ldr	r1, [r7, #12]
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	4413      	add	r3, r2
 80029c8:	b2ca      	uxtb	r2, r1
 80029ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	0a19      	lsrs	r1, r3, #8
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	3301      	adds	r3, #1
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	4413      	add	r3, r2
 80029d8:	b2ca      	uxtb	r2, r1
 80029da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	0c19      	lsrs	r1, r3, #16
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e2:	3302      	adds	r3, #2
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	4413      	add	r3, r2
 80029e8:	b2ca      	uxtb	r2, r1
 80029ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	0e19      	lsrs	r1, r3, #24
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	3303      	adds	r3, #3
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	4413      	add	r3, r2
 80029f8:	b2ca      	uxtb	r2, r1
 80029fa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	3304      	adds	r3, #4
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	3301      	adds	r3, #1
 8002a06:	61fb      	str	r3, [r7, #28]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	69fa      	ldr	r2, [r7, #28]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d3cf      	bcc.n	80029b2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	69d9      	ldr	r1, [r3, #28]
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	b2ca      	uxtb	r2, r1
 8002a1e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	69db      	ldr	r3, [r3, #28]
 8002a24:	0a19      	lsrs	r1, r3, #8
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	3301      	adds	r3, #1
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	b2ca      	uxtb	r2, r1
 8002a30:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	0c19      	lsrs	r1, r3, #16
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	3302      	adds	r3, #2
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	4413      	add	r3, r2
 8002a40:	b2ca      	uxtb	r2, r1
 8002a42:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	69db      	ldr	r3, [r3, #28]
 8002a48:	0e19      	lsrs	r1, r3, #24
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	3303      	adds	r3, #3
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	4413      	add	r3, r2
 8002a52:	b2ca      	uxtb	r2, r1
 8002a54:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	3304      	adds	r3, #4
 8002a5a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	61bb      	str	r3, [r7, #24]
 8002a60:	e027      	b.n	8002ab2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4413      	add	r3, r2
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fd fc4e 	bl	8000310 <strlen>
 8002a74:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	6979      	ldr	r1, [r7, #20]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f001 fae4 	bl	800404c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	3304      	adds	r3, #4
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	18d0      	adds	r0, r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	f00d fb8a 	bl	80101b8 <memcpy>
      offset += length_stringsi;
 8002aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	3301      	adds	r3, #1
 8002ab0:	61bb      	str	r3, [r7, #24]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d3d2      	bcc.n	8002a62 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3728      	adds	r7, #40	; 0x28
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b08e      	sub	sp, #56	; 0x38
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
 8002ace:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	4413      	add	r3, r2
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	021b      	lsls	r3, r3, #8
 8002aea:	6a3a      	ldr	r2, [r7, #32]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af2:	3302      	adds	r3, #2
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	4413      	add	r3, r2
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	041b      	lsls	r3, r3, #16
 8002afc:	6a3a      	ldr	r2, [r7, #32]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b04:	3303      	adds	r3, #3
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	4413      	add	r3, r2
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	061b      	lsls	r3, r3, #24
 8002b0e:	6a3a      	ldr	r2, [r7, #32]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b16:	3304      	adds	r3, #4
 8002b18:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	6a3a      	ldr	r2, [r7, #32]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d90a      	bls.n	8002b3a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68da      	ldr	r2, [r3, #12]
 8002b28:	6a3b      	ldr	r3, [r7, #32]
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4610      	mov	r0, r2
 8002b30:	f00d fad6 	bl	80100e0 <realloc>
 8002b34:	4602      	mov	r2, r0
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a3a      	ldr	r2, [r7, #32]
 8002b3e:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002b40:	2300      	movs	r3, #0
 8002b42:	633b      	str	r3, [r7, #48]	; 0x30
 8002b44:	e035      	b.n	8002bb2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002b46:	2300      	movs	r3, #0
 8002b48:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b4e:	6839      	ldr	r1, [r7, #0]
 8002b50:	440a      	add	r2, r1
 8002b52:	7812      	ldrb	r2, [r2, #0]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	6839      	ldr	r1, [r7, #0]
 8002b60:	440b      	add	r3, r1
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	021b      	lsls	r3, r3, #8
 8002b66:	4313      	orrs	r3, r2
 8002b68:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b6e:	3302      	adds	r3, #2
 8002b70:	6839      	ldr	r1, [r7, #0]
 8002b72:	440b      	add	r3, r1
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	041b      	lsls	r3, r3, #16
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b80:	3303      	adds	r3, #3
 8002b82:	6839      	ldr	r1, [r7, #0]
 8002b84:	440b      	add	r3, r1
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	061b      	lsls	r3, r3, #24
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b96:	3304      	adds	r3, #4
 8002b98:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68da      	ldr	r2, [r3, #12]
 8002b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	3208      	adds	r2, #8
 8002ba8:	6812      	ldr	r2, [r2, #0]
 8002baa:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bae:	3301      	adds	r3, #1
 8002bb0:	633b      	str	r3, [r7, #48]	; 0x30
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d3c4      	bcc.n	8002b46 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc8:	3301      	adds	r3, #1
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	4413      	add	r3, r2
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	021b      	lsls	r3, r3, #8
 8002bd2:	69fa      	ldr	r2, [r7, #28]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bda:	3302      	adds	r3, #2
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	4413      	add	r3, r2
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	041b      	lsls	r3, r3, #16
 8002be4:	69fa      	ldr	r2, [r7, #28]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bec:	3303      	adds	r3, #3
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	061b      	lsls	r3, r3, #24
 8002bf6:	69fa      	ldr	r2, [r7, #28]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bfe:	3304      	adds	r3, #4
 8002c00:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	69fa      	ldr	r2, [r7, #28]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d90a      	bls.n	8002c22 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	699a      	ldr	r2, [r3, #24]
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4619      	mov	r1, r3
 8002c16:	4610      	mov	r0, r2
 8002c18:	f00d fa62 	bl	80100e0 <realloc>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69fa      	ldr	r2, [r7, #28]
 8002c26:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002c28:	2300      	movs	r3, #0
 8002c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c2c:	e035      	b.n	8002c9a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c36:	6839      	ldr	r1, [r7, #0]
 8002c38:	440a      	add	r2, r1
 8002c3a:	7812      	ldrb	r2, [r2, #0]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c44:	3301      	adds	r3, #1
 8002c46:	6839      	ldr	r1, [r7, #0]
 8002c48:	440b      	add	r3, r1
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	021b      	lsls	r3, r3, #8
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c56:	3302      	adds	r3, #2
 8002c58:	6839      	ldr	r1, [r7, #0]
 8002c5a:	440b      	add	r3, r1
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	041b      	lsls	r3, r3, #16
 8002c60:	4313      	orrs	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c68:	3303      	adds	r3, #3
 8002c6a:	6839      	ldr	r1, [r7, #0]
 8002c6c:	440b      	add	r3, r1
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	061b      	lsls	r3, r3, #24
 8002c72:	4313      	orrs	r3, r2
 8002c74:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c7e:	3304      	adds	r3, #4
 8002c80:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	699a      	ldr	r2, [r3, #24]
 8002c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	3214      	adds	r2, #20
 8002c90:	6812      	ldr	r2, [r2, #0]
 8002c92:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c96:	3301      	adds	r3, #1
 8002c98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d3c4      	bcc.n	8002c2e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	4413      	add	r3, r2
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	021b      	lsls	r3, r3, #8
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cc2:	3302      	adds	r3, #2
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	041b      	lsls	r3, r3, #16
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd4:	3303      	adds	r3, #3
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	4413      	add	r3, r2
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	061b      	lsls	r3, r3, #24
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce6:	3304      	adds	r3, #4
 8002ce8:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d90a      	bls.n	8002d0a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4610      	mov	r0, r2
 8002d00:	f00d f9ee 	bl	80100e0 <realloc>
 8002d04:	4602      	mov	r2, r0
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002d10:	2300      	movs	r3, #0
 8002d12:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d14:	e03e      	b.n	8002d94 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	441a      	add	r2, r3
 8002d1c:	f107 030c 	add.w	r3, r7, #12
 8002d20:	4611      	mov	r1, r2
 8002d22:	4618      	mov	r0, r3
 8002d24:	f001 f9b1 	bl	800408a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d2a:	3304      	adds	r3, #4
 8002d2c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d30:	627b      	str	r3, [r7, #36]	; 0x24
 8002d32:	e00b      	b.n	8002d4c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	441a      	add	r2, r3
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	6839      	ldr	r1, [r7, #0]
 8002d40:	440b      	add	r3, r1
 8002d42:	7812      	ldrb	r2, [r2, #0]
 8002d44:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	3301      	adds	r3, #1
 8002d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	4413      	add	r3, r2
 8002d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d3ed      	bcc.n	8002d34 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002d58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	4413      	add	r3, r2
 8002d64:	2200      	movs	r2, #0
 8002d66:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	441a      	add	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002d74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	4413      	add	r3, r2
 8002d7a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	3220      	adds	r2, #32
 8002d8a:	6812      	ldr	r2, [r2, #0]
 8002d8c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d90:	3301      	adds	r3, #1
 8002d92:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d3bb      	bcc.n	8002d16 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8002d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002da0:	4618      	mov	r0, r3
 8002da2:	3738      	adds	r7, #56	; 0x38
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	4b03      	ldr	r3, [pc, #12]	; (8002dc0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002db2:	4618      	mov	r0, r3
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	080105e8 	.word	0x080105e8

08002dc4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	4b03      	ldr	r3, [pc, #12]	; (8002ddc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002dce:	4618      	mov	r0, r3
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	080104bc 	.word	0x080104bc

08002de0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
 8002dec:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	68ba      	ldr	r2, [r7, #8]
 8002df2:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	611a      	str	r2, [r3, #16]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4618      	mov	r0, r3
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b082      	sub	sp, #8
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
 8002e16:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68d8      	ldr	r0, [r3, #12]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6891      	ldr	r1, [r2, #8]
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	4798      	blx	r3
 8002e2c:	4603      	mov	r3, r0
  };
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002e36:	b480      	push	{r7}
 8002e38:	b083      	sub	sp, #12
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	691b      	ldr	r3, [r3, #16]
  }
 8002e42:	4618      	mov	r0, r3
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
	...

08002e50 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 2048;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a4b      	ldr	r2, [pc, #300]	; (8002f90 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d077      	beq.n	8002f58 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a48      	ldr	r2, [pc, #288]	; (8002f94 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d06f      	beq.n	8002f58 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a45      	ldr	r2, [pc, #276]	; (8002f98 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d067      	beq.n	8002f58 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a42      	ldr	r2, [pc, #264]	; (8002f9c <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d05f      	beq.n	8002f58 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a3f      	ldr	r2, [pc, #252]	; (8002fa0 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d057      	beq.n	8002f58 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a3c      	ldr	r2, [pc, #240]	; (8002fa4 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d04f      	beq.n	8002f58 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a39      	ldr	r2, [pc, #228]	; (8002fa8 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d047      	beq.n	8002f58 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a36      	ldr	r2, [pc, #216]	; (8002fac <_ZN13STM32Hardware10getRdmaIndEv+0x15c>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d03f      	beq.n	8002f58 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a33      	ldr	r2, [pc, #204]	; (8002fb0 <_ZN13STM32Hardware10getRdmaIndEv+0x160>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d037      	beq.n	8002f58 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a30      	ldr	r2, [pc, #192]	; (8002fb4 <_ZN13STM32Hardware10getRdmaIndEv+0x164>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d02f      	beq.n	8002f58 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a2d      	ldr	r2, [pc, #180]	; (8002fb8 <_ZN13STM32Hardware10getRdmaIndEv+0x168>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d027      	beq.n	8002f58 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a2a      	ldr	r2, [pc, #168]	; (8002fbc <_ZN13STM32Hardware10getRdmaIndEv+0x16c>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d01f      	beq.n	8002f58 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a27      	ldr	r2, [pc, #156]	; (8002fc0 <_ZN13STM32Hardware10getRdmaIndEv+0x170>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d017      	beq.n	8002f58 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a24      	ldr	r2, [pc, #144]	; (8002fc4 <_ZN13STM32Hardware10getRdmaIndEv+0x174>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d00f      	beq.n	8002f58 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a21      	ldr	r2, [pc, #132]	; (8002fc8 <_ZN13STM32Hardware10getRdmaIndEv+0x178>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d007      	beq.n	8002f58 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a1e      	ldr	r2, [pc, #120]	; (8002fcc <_ZN13STM32Hardware10getRdmaIndEv+0x17c>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d10a      	bne.n	8002f6e <_ZN13STM32Hardware10getRdmaIndEv+0x11e>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002f68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f6c:	e009      	b.n	8002f82 <_ZN13STM32Hardware10getRdmaIndEv+0x132>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002f7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f82:	4618      	mov	r0, r3
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	40020010 	.word	0x40020010
 8002f94:	40020028 	.word	0x40020028
 8002f98:	40020040 	.word	0x40020040
 8002f9c:	40020058 	.word	0x40020058
 8002fa0:	40020070 	.word	0x40020070
 8002fa4:	40020088 	.word	0x40020088
 8002fa8:	400200a0 	.word	0x400200a0
 8002fac:	400200b8 	.word	0x400200b8
 8002fb0:	40020410 	.word	0x40020410
 8002fb4:	40020428 	.word	0x40020428
 8002fb8:	40020440 	.word	0x40020440
 8002fbc:	40020458 	.word	0x40020458
 8002fc0:	40020470 	.word	0x40020470
 8002fc4:	40020488 	.word	0x40020488
 8002fc8:	400204a0 	.word	0x400204a0
 8002fcc:	400204b8 	.word	0x400204b8

08002fd0 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a0c      	ldr	r2, [pc, #48]	; (800300c <_ZN13STM32HardwareC1Ev+0x3c>)
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fec:	461a      	mov	r2, r3
 8002fee:	2300      	movs	r3, #0
 8002ff0:	6093      	str	r3, [r2, #8]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60d3      	str	r3, [r2, #12]
    }
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4618      	mov	r0, r3
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	24000754 	.word	0x24000754

08003010 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f804 	bl	8003026 <_ZN13STM32Hardware10reset_rbufEv>
    }
 800301e:	bf00      	nop
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8003026:	b580      	push	{r7, lr}
 8003028:	b082      	sub	sp, #8
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6818      	ldr	r0, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	3304      	adds	r3, #4
 8003036:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800303a:	4619      	mov	r1, r3
 800303c:	f00b f804 	bl	800e048 <HAL_UART_Receive_DMA>
    }
 8003040:	bf00      	nop
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <_ZN13STM32Hardware4readEv>:

    int read(){
 8003048:	b590      	push	{r4, r7, lr}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
      int c = -1;
 8003050:	f04f 33ff 	mov.w	r3, #4294967295
 8003054:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f7ff fef7 	bl	8002e50 <_ZN13STM32Hardware10getRdmaIndEv>
 8003062:	4603      	mov	r3, r0
 8003064:	429c      	cmp	r4, r3
 8003066:	bf14      	ite	ne
 8003068:	2301      	movne	r3, #1
 800306a:	2300      	moveq	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d012      	beq.n	8003098 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8003078:	1c59      	adds	r1, r3, #1
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	f8c2 1804 	str.w	r1, [r2, #2052]	; 0x804
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	4413      	add	r3, r2
 8003084:	791b      	ldrb	r3, [r3, #4]
 8003086:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800308e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      }
      return c;
 8003098:	68fb      	ldr	r3, [r7, #12]
    }
 800309a:	4618      	mov	r0, r3
 800309c:	3714      	adds	r7, #20
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd90      	pop	{r4, r7, pc}
	...

080030a4 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b4:	2b20      	cmp	r3, #32
 80030b6:	d108      	bne.n	80030ca <_ZN13STM32Hardware5flushEv+0x26>
 80030b8:	4b2c      	ldr	r3, [pc, #176]	; (800316c <_ZN13STM32Hardware5flushEv+0xc8>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	f083 0301 	eor.w	r3, r3, #1
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <_ZN13STM32Hardware5flushEv+0x26>
 80030c6:	2301      	movs	r3, #1
 80030c8:	e000      	b.n	80030cc <_ZN13STM32Hardware5flushEv+0x28>
 80030ca:	2300      	movs	r3, #0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d049      	beq.n	8003164 <_ZN13STM32Hardware5flushEv+0xc0>
        mutex = true;
 80030d0:	4b26      	ldr	r3, [pc, #152]	; (800316c <_ZN13STM32Hardware5flushEv+0xc8>)
 80030d2:	2201      	movs	r2, #1
 80030d4:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030dc:	689a      	ldr	r2, [r3, #8]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d039      	beq.n	800315e <_ZN13STM32Hardware5flushEv+0xba>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030f0:	68da      	ldr	r2, [r3, #12]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d20c      	bcs.n	8003118 <_ZN13STM32Hardware5flushEv+0x74>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	b29a      	uxth	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	b29b      	uxth	r3, r3
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	b29b      	uxth	r3, r3
 8003116:	e007      	b.n	8003128 <_ZN13STM32Hardware5flushEv+0x84>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	b29b      	uxth	r3, r3
 8003122:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8003126:	b29b      	uxth	r3, r3
 8003128:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6818      	ldr	r0, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	f603 0308 	addw	r3, r3, #2056	; 0x808
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	4413      	add	r3, r2
 800313e:	89fa      	ldrh	r2, [r7, #14]
 8003140:	4619      	mov	r1, r3
 8003142:	f00a ff01 	bl	800df48 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800314c:	68da      	ldr	r2, [r3, #12]
 800314e:	89fb      	ldrh	r3, [r7, #14]
 8003150:	4413      	add	r3, r2
 8003152:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800315c:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 800315e:	4b03      	ldr	r3, [pc, #12]	; (800316c <_ZN13STM32Hardware5flushEv+0xc8>)
 8003160:	2200      	movs	r2, #0
 8003162:	701a      	strb	r2, [r3, #0]
      }
    }
 8003164:	bf00      	nop
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	240009e8 	.word	0x240009e8

08003170 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
      int n = length;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003186:	bfa8      	it	ge
 8003188:	f44f 6300 	movge.w	r3, #2048	; 0x800
 800318c:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	4293      	cmp	r3, r2
 800319e:	bf28      	it	cs
 80031a0:	4613      	movcs	r3, r2
 80031a2:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f603 0308 	addw	r3, r3, #2056	; 0x808
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	4413      	add	r3, r2
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	68b9      	ldr	r1, [r7, #8]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f00c fffd 	bl	80101b8 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	4413      	add	r3, r2
 80031ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80031d4:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d00b      	beq.n	80031f6 <_ZN13STM32Hardware5writeEPhi+0x86>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f603 0008 	addw	r0, r3, #2056	; 0x808
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	18d1      	adds	r1, r2, r3
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	461a      	mov	r2, r3
 80031f2:	f00c ffe1 	bl	80101b8 <memcpy>
      }

      flush();
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f7ff ff54 	bl	80030a4 <_ZN13STM32Hardware5flushEv>
    }
 80031fc:	bf00      	nop
 80031fe:	3718      	adds	r7, #24
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	f002 ff64 	bl	80060d8 <HAL_GetTick>
 8003210:	4603      	mov	r3, r0
 8003212:	4618      	mov	r0, r3
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
	...

0800321c <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4618      	mov	r0, r3
 8003228:	f7fe ffa4 	bl	8002174 <_ZN3ros3MsgC1Ev>
 800322c:	4a0e      	ldr	r2, [pc, #56]	; (8003268 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	601a      	str	r2, [r3, #0]
      x(0),
 8003232:	6879      	ldr	r1, [r7, #4]
 8003234:	f04f 0200 	mov.w	r2, #0
 8003238:	f04f 0300 	mov.w	r3, #0
 800323c:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	f04f 0200 	mov.w	r2, #0
 8003246:	f04f 0300 	mov.w	r3, #0
 800324a:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0)
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	f04f 0200 	mov.w	r2, #0
 8003254:	f04f 0300 	mov.w	r3, #0
 8003258:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4618      	mov	r0, r3
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	08010680 	.word	0x08010680

0800326c <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800326c:	b480      	push	{r7}
 800326e:	b08b      	sub	sp, #44	; 0x2c
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003276:	2300      	movs	r3, #0
 8003278:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003280:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8003284:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003288:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800328a:	6838      	ldr	r0, [r7, #0]
 800328c:	4401      	add	r1, r0
 800328e:	b2d3      	uxtb	r3, r2
 8003290:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8003292:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003296:	f04f 0200 	mov.w	r2, #0
 800329a:	f04f 0300 	mov.w	r3, #0
 800329e:	0a02      	lsrs	r2, r0, #8
 80032a0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80032a4:	0a0b      	lsrs	r3, r1, #8
 80032a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032a8:	3101      	adds	r1, #1
 80032aa:	6838      	ldr	r0, [r7, #0]
 80032ac:	4401      	add	r1, r0
 80032ae:	b2d3      	uxtb	r3, r2
 80032b0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80032b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80032b6:	f04f 0200 	mov.w	r2, #0
 80032ba:	f04f 0300 	mov.w	r3, #0
 80032be:	0c02      	lsrs	r2, r0, #16
 80032c0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80032c4:	0c0b      	lsrs	r3, r1, #16
 80032c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032c8:	3102      	adds	r1, #2
 80032ca:	6838      	ldr	r0, [r7, #0]
 80032cc:	4401      	add	r1, r0
 80032ce:	b2d3      	uxtb	r3, r2
 80032d0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80032d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	f04f 0300 	mov.w	r3, #0
 80032de:	0e02      	lsrs	r2, r0, #24
 80032e0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80032e4:	0e0b      	lsrs	r3, r1, #24
 80032e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032e8:	3103      	adds	r1, #3
 80032ea:	6838      	ldr	r0, [r7, #0]
 80032ec:	4401      	add	r1, r0
 80032ee:	b2d3      	uxtb	r3, r2
 80032f0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80032f2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80032f6:	f04f 0200 	mov.w	r2, #0
 80032fa:	f04f 0300 	mov.w	r3, #0
 80032fe:	000a      	movs	r2, r1
 8003300:	2300      	movs	r3, #0
 8003302:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003304:	3104      	adds	r1, #4
 8003306:	6838      	ldr	r0, [r7, #0]
 8003308:	4401      	add	r1, r0
 800330a:	b2d3      	uxtb	r3, r2
 800330c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800330e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003312:	f04f 0200 	mov.w	r2, #0
 8003316:	f04f 0300 	mov.w	r3, #0
 800331a:	0a0a      	lsrs	r2, r1, #8
 800331c:	2300      	movs	r3, #0
 800331e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003320:	3105      	adds	r1, #5
 8003322:	6838      	ldr	r0, [r7, #0]
 8003324:	4401      	add	r1, r0
 8003326:	b2d3      	uxtb	r3, r2
 8003328:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 800332a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800332e:	f04f 0200 	mov.w	r2, #0
 8003332:	f04f 0300 	mov.w	r3, #0
 8003336:	0c0a      	lsrs	r2, r1, #16
 8003338:	2300      	movs	r3, #0
 800333a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800333c:	3106      	adds	r1, #6
 800333e:	6838      	ldr	r0, [r7, #0]
 8003340:	4401      	add	r1, r0
 8003342:	b2d3      	uxtb	r3, r2
 8003344:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8003346:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	f04f 0300 	mov.w	r3, #0
 8003352:	0e0a      	lsrs	r2, r1, #24
 8003354:	2300      	movs	r3, #0
 8003356:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003358:	3107      	adds	r1, #7
 800335a:	6838      	ldr	r0, [r7, #0]
 800335c:	4401      	add	r1, r0
 800335e:	b2d3      	uxtb	r3, r2
 8003360:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8003362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003364:	3308      	adds	r3, #8
 8003366:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800336e:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8003372:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003376:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003378:	6838      	ldr	r0, [r7, #0]
 800337a:	4401      	add	r1, r0
 800337c:	b2d3      	uxtb	r3, r2
 800337e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8003380:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003384:	f04f 0200 	mov.w	r2, #0
 8003388:	f04f 0300 	mov.w	r3, #0
 800338c:	0a02      	lsrs	r2, r0, #8
 800338e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003392:	0a0b      	lsrs	r3, r1, #8
 8003394:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003396:	3101      	adds	r1, #1
 8003398:	6838      	ldr	r0, [r7, #0]
 800339a:	4401      	add	r1, r0
 800339c:	b2d3      	uxtb	r3, r2
 800339e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80033a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033a4:	f04f 0200 	mov.w	r2, #0
 80033a8:	f04f 0300 	mov.w	r3, #0
 80033ac:	0c02      	lsrs	r2, r0, #16
 80033ae:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80033b2:	0c0b      	lsrs	r3, r1, #16
 80033b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033b6:	3102      	adds	r1, #2
 80033b8:	6838      	ldr	r0, [r7, #0]
 80033ba:	4401      	add	r1, r0
 80033bc:	b2d3      	uxtb	r3, r2
 80033be:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80033c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033c4:	f04f 0200 	mov.w	r2, #0
 80033c8:	f04f 0300 	mov.w	r3, #0
 80033cc:	0e02      	lsrs	r2, r0, #24
 80033ce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80033d2:	0e0b      	lsrs	r3, r1, #24
 80033d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033d6:	3103      	adds	r1, #3
 80033d8:	6838      	ldr	r0, [r7, #0]
 80033da:	4401      	add	r1, r0
 80033dc:	b2d3      	uxtb	r3, r2
 80033de:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80033e0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033e4:	f04f 0200 	mov.w	r2, #0
 80033e8:	f04f 0300 	mov.w	r3, #0
 80033ec:	000a      	movs	r2, r1
 80033ee:	2300      	movs	r3, #0
 80033f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033f2:	3104      	adds	r1, #4
 80033f4:	6838      	ldr	r0, [r7, #0]
 80033f6:	4401      	add	r1, r0
 80033f8:	b2d3      	uxtb	r3, r2
 80033fa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80033fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003400:	f04f 0200 	mov.w	r2, #0
 8003404:	f04f 0300 	mov.w	r3, #0
 8003408:	0a0a      	lsrs	r2, r1, #8
 800340a:	2300      	movs	r3, #0
 800340c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800340e:	3105      	adds	r1, #5
 8003410:	6838      	ldr	r0, [r7, #0]
 8003412:	4401      	add	r1, r0
 8003414:	b2d3      	uxtb	r3, r2
 8003416:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8003418:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800341c:	f04f 0200 	mov.w	r2, #0
 8003420:	f04f 0300 	mov.w	r3, #0
 8003424:	0c0a      	lsrs	r2, r1, #16
 8003426:	2300      	movs	r3, #0
 8003428:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800342a:	3106      	adds	r1, #6
 800342c:	6838      	ldr	r0, [r7, #0]
 800342e:	4401      	add	r1, r0
 8003430:	b2d3      	uxtb	r3, r2
 8003432:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8003434:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003438:	f04f 0200 	mov.w	r2, #0
 800343c:	f04f 0300 	mov.w	r3, #0
 8003440:	0e0a      	lsrs	r2, r1, #24
 8003442:	2300      	movs	r3, #0
 8003444:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003446:	3107      	adds	r1, #7
 8003448:	6838      	ldr	r0, [r7, #0]
 800344a:	4401      	add	r1, r0
 800344c:	b2d3      	uxtb	r3, r2
 800344e:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	3308      	adds	r3, #8
 8003454:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800345c:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8003460:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003464:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003466:	6838      	ldr	r0, [r7, #0]
 8003468:	4401      	add	r1, r0
 800346a:	b2d3      	uxtb	r3, r2
 800346c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 800346e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003472:	f04f 0200 	mov.w	r2, #0
 8003476:	f04f 0300 	mov.w	r3, #0
 800347a:	0a02      	lsrs	r2, r0, #8
 800347c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003480:	0a0b      	lsrs	r3, r1, #8
 8003482:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003484:	3101      	adds	r1, #1
 8003486:	6838      	ldr	r0, [r7, #0]
 8003488:	4401      	add	r1, r0
 800348a:	b2d3      	uxtb	r3, r2
 800348c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 800348e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003492:	f04f 0200 	mov.w	r2, #0
 8003496:	f04f 0300 	mov.w	r3, #0
 800349a:	0c02      	lsrs	r2, r0, #16
 800349c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80034a0:	0c0b      	lsrs	r3, r1, #16
 80034a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034a4:	3102      	adds	r1, #2
 80034a6:	6838      	ldr	r0, [r7, #0]
 80034a8:	4401      	add	r1, r0
 80034aa:	b2d3      	uxtb	r3, r2
 80034ac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80034ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	f04f 0300 	mov.w	r3, #0
 80034ba:	0e02      	lsrs	r2, r0, #24
 80034bc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80034c0:	0e0b      	lsrs	r3, r1, #24
 80034c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034c4:	3103      	adds	r1, #3
 80034c6:	6838      	ldr	r0, [r7, #0]
 80034c8:	4401      	add	r1, r0
 80034ca:	b2d3      	uxtb	r3, r2
 80034cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80034ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	f04f 0300 	mov.w	r3, #0
 80034da:	000a      	movs	r2, r1
 80034dc:	2300      	movs	r3, #0
 80034de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034e0:	3104      	adds	r1, #4
 80034e2:	6838      	ldr	r0, [r7, #0]
 80034e4:	4401      	add	r1, r0
 80034e6:	b2d3      	uxtb	r3, r2
 80034e8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80034ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80034ee:	f04f 0200 	mov.w	r2, #0
 80034f2:	f04f 0300 	mov.w	r3, #0
 80034f6:	0a0a      	lsrs	r2, r1, #8
 80034f8:	2300      	movs	r3, #0
 80034fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034fc:	3105      	adds	r1, #5
 80034fe:	6838      	ldr	r0, [r7, #0]
 8003500:	4401      	add	r1, r0
 8003502:	b2d3      	uxtb	r3, r2
 8003504:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8003506:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	f04f 0300 	mov.w	r3, #0
 8003512:	0c0a      	lsrs	r2, r1, #16
 8003514:	2300      	movs	r3, #0
 8003516:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003518:	3106      	adds	r1, #6
 800351a:	6838      	ldr	r0, [r7, #0]
 800351c:	4401      	add	r1, r0
 800351e:	b2d3      	uxtb	r3, r2
 8003520:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8003522:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003526:	f04f 0200 	mov.w	r2, #0
 800352a:	f04f 0300 	mov.w	r3, #0
 800352e:	0e0a      	lsrs	r2, r1, #24
 8003530:	2300      	movs	r3, #0
 8003532:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003534:	3107      	adds	r1, #7
 8003536:	6838      	ldr	r0, [r7, #0]
 8003538:	4401      	add	r1, r0
 800353a:	b2d3      	uxtb	r3, r2
 800353c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	3308      	adds	r3, #8
 8003542:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8003544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003546:	4618      	mov	r0, r3
 8003548:	372c      	adds	r7, #44	; 0x2c
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003552:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003556:	b0eb      	sub	sp, #428	; 0x1ac
 8003558:	af00      	add	r7, sp, #0
 800355a:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 800355e:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8003562:	2300      	movs	r3, #0
 8003564:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	f04f 0300 	mov.w	r3, #0
 8003570:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003574:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003578:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800357c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003580:	4413      	add	r3, r2
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2200      	movs	r2, #0
 8003588:	461c      	mov	r4, r3
 800358a:	4615      	mov	r5, r2
 800358c:	ea40 0804 	orr.w	r8, r0, r4
 8003590:	ea41 0905 	orr.w	r9, r1, r5
 8003594:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003598:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800359c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80035a0:	1c5a      	adds	r2, r3, #1
 80035a2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80035a6:	4413      	add	r3, r2
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2200      	movs	r2, #0
 80035ae:	469a      	mov	sl, r3
 80035b0:	4693      	mov	fp, r2
 80035b2:	f04f 0200 	mov.w	r2, #0
 80035b6:	f04f 0300 	mov.w	r3, #0
 80035ba:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80035be:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80035c2:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80035c6:	ea40 0402 	orr.w	r4, r0, r2
 80035ca:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 80035ce:	430b      	orrs	r3, r1
 80035d0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80035d4:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 80035d8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80035dc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80035e0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80035e4:	1c9a      	adds	r2, r3, #2
 80035e6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80035ea:	4413      	add	r3, r2
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2200      	movs	r2, #0
 80035f2:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80035f6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 80035fa:	f04f 0200 	mov.w	r2, #0
 80035fe:	f04f 0300 	mov.w	r3, #0
 8003602:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8003606:	464c      	mov	r4, r9
 8003608:	0423      	lsls	r3, r4, #16
 800360a:	4644      	mov	r4, r8
 800360c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003610:	4644      	mov	r4, r8
 8003612:	0422      	lsls	r2, r4, #16
 8003614:	ea40 0402 	orr.w	r4, r0, r2
 8003618:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 800361c:	430b      	orrs	r3, r1
 800361e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8003622:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8003626:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800362a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800362e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003632:	1cda      	adds	r2, r3, #3
 8003634:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003638:	4413      	add	r3, r2
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2200      	movs	r2, #0
 8003640:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8003644:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8003648:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 800364c:	4623      	mov	r3, r4
 800364e:	0a1b      	lsrs	r3, r3, #8
 8003650:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8003654:	4623      	mov	r3, r4
 8003656:	061b      	lsls	r3, r3, #24
 8003658:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800365c:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8003660:	4623      	mov	r3, r4
 8003662:	4303      	orrs	r3, r0
 8003664:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003668:	462b      	mov	r3, r5
 800366a:	430b      	orrs	r3, r1
 800366c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003670:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8003674:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003678:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800367c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003680:	1d1a      	adds	r2, r3, #4
 8003682:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003686:	4413      	add	r3, r2
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2200      	movs	r2, #0
 800368e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8003692:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003696:	f04f 0200 	mov.w	r2, #0
 800369a:	f04f 0300 	mov.w	r3, #0
 800369e:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 80036a2:	0023      	movs	r3, r4
 80036a4:	2200      	movs	r2, #0
 80036a6:	ea40 0402 	orr.w	r4, r0, r2
 80036aa:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 80036ae:	430b      	orrs	r3, r1
 80036b0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80036b4:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80036b8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80036bc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80036c0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80036c4:	1d5a      	adds	r2, r3, #5
 80036c6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80036ca:	4413      	add	r3, r2
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2200      	movs	r2, #0
 80036d2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80036d6:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80036da:	f04f 0200 	mov.w	r2, #0
 80036de:	f04f 0300 	mov.w	r3, #0
 80036e2:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 80036e6:	0223      	lsls	r3, r4, #8
 80036e8:	2200      	movs	r2, #0
 80036ea:	ea40 0402 	orr.w	r4, r0, r2
 80036ee:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 80036f2:	430b      	orrs	r3, r1
 80036f4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80036f8:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 80036fc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003700:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003704:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003708:	1d9a      	adds	r2, r3, #6
 800370a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800370e:	4413      	add	r3, r2
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2200      	movs	r2, #0
 8003716:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800371a:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800371e:	f04f 0200 	mov.w	r2, #0
 8003722:	f04f 0300 	mov.w	r3, #0
 8003726:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 800372a:	0423      	lsls	r3, r4, #16
 800372c:	2200      	movs	r2, #0
 800372e:	ea40 0402 	orr.w	r4, r0, r2
 8003732:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8003736:	430b      	orrs	r3, r1
 8003738:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800373c:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8003740:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003744:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003748:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800374c:	1dda      	adds	r2, r3, #7
 800374e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003752:	4413      	add	r3, r2
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2200      	movs	r2, #0
 800375a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800375e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003762:	f04f 0200 	mov.w	r2, #0
 8003766:	f04f 0300 	mov.w	r3, #0
 800376a:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 800376e:	0623      	lsls	r3, r4, #24
 8003770:	2200      	movs	r2, #0
 8003772:	ea40 0402 	orr.w	r4, r0, r2
 8003776:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 800377a:	430b      	orrs	r3, r1
 800377c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003780:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8003784:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8003788:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800378c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003790:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8003794:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003798:	3308      	adds	r3, #8
 800379a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 800379e:	f04f 0200 	mov.w	r2, #0
 80037a2:	f04f 0300 	mov.w	r3, #0
 80037a6:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80037aa:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80037ae:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80037b2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80037b6:	4413      	add	r3, r2
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2200      	movs	r2, #0
 80037be:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80037c2:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80037c6:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80037ca:	4623      	mov	r3, r4
 80037cc:	4303      	orrs	r3, r0
 80037ce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80037d2:	462b      	mov	r3, r5
 80037d4:	430b      	orrs	r3, r1
 80037d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80037da:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 80037de:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80037e2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80037e6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80037ea:	1c5a      	adds	r2, r3, #1
 80037ec:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80037f0:	4413      	add	r3, r2
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2200      	movs	r2, #0
 80037f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80037fc:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8003800:	f04f 0200 	mov.w	r2, #0
 8003804:	f04f 0300 	mov.w	r3, #0
 8003808:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 800380c:	464c      	mov	r4, r9
 800380e:	0223      	lsls	r3, r4, #8
 8003810:	4644      	mov	r4, r8
 8003812:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003816:	4644      	mov	r4, r8
 8003818:	0222      	lsls	r2, r4, #8
 800381a:	ea40 0402 	orr.w	r4, r0, r2
 800381e:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8003822:	430b      	orrs	r3, r1
 8003824:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003828:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 800382c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003830:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003834:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003838:	1c9a      	adds	r2, r3, #2
 800383a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800383e:	4413      	add	r3, r2
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2200      	movs	r2, #0
 8003846:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800384a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800384e:	f04f 0200 	mov.w	r2, #0
 8003852:	f04f 0300 	mov.w	r3, #0
 8003856:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800385a:	464c      	mov	r4, r9
 800385c:	0423      	lsls	r3, r4, #16
 800385e:	4644      	mov	r4, r8
 8003860:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003864:	4644      	mov	r4, r8
 8003866:	0422      	lsls	r2, r4, #16
 8003868:	ea40 0402 	orr.w	r4, r0, r2
 800386c:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8003870:	430b      	orrs	r3, r1
 8003872:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003876:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800387a:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800387e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003882:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003886:	1cda      	adds	r2, r3, #3
 8003888:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800388c:	4413      	add	r3, r2
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2200      	movs	r2, #0
 8003894:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003898:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800389c:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80038a0:	4623      	mov	r3, r4
 80038a2:	0a1b      	lsrs	r3, r3, #8
 80038a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80038a8:	4623      	mov	r3, r4
 80038aa:	061b      	lsls	r3, r3, #24
 80038ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038b0:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80038b4:	4623      	mov	r3, r4
 80038b6:	4303      	orrs	r3, r0
 80038b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038bc:	462b      	mov	r3, r5
 80038be:	430b      	orrs	r3, r1
 80038c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80038c4:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80038c8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80038cc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80038d0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80038d4:	1d1a      	adds	r2, r3, #4
 80038d6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80038da:	4413      	add	r3, r2
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2200      	movs	r2, #0
 80038e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80038e6:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80038ea:	f04f 0200 	mov.w	r2, #0
 80038ee:	f04f 0300 	mov.w	r3, #0
 80038f2:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 80038f6:	0023      	movs	r3, r4
 80038f8:	2200      	movs	r2, #0
 80038fa:	ea40 0402 	orr.w	r4, r0, r2
 80038fe:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8003902:	430b      	orrs	r3, r1
 8003904:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003908:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 800390c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003910:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003914:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003918:	1d5a      	adds	r2, r3, #5
 800391a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800391e:	4413      	add	r3, r2
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2200      	movs	r2, #0
 8003926:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800392a:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800392e:	f04f 0200 	mov.w	r2, #0
 8003932:	f04f 0300 	mov.w	r3, #0
 8003936:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 800393a:	0223      	lsls	r3, r4, #8
 800393c:	2200      	movs	r2, #0
 800393e:	ea40 0402 	orr.w	r4, r0, r2
 8003942:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8003946:	430b      	orrs	r3, r1
 8003948:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800394c:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8003950:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003954:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003958:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800395c:	1d9a      	adds	r2, r3, #6
 800395e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003962:	4413      	add	r3, r2
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2200      	movs	r2, #0
 800396a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800396e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003972:	f04f 0200 	mov.w	r2, #0
 8003976:	f04f 0300 	mov.w	r3, #0
 800397a:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 800397e:	0423      	lsls	r3, r4, #16
 8003980:	2200      	movs	r2, #0
 8003982:	ea40 0402 	orr.w	r4, r0, r2
 8003986:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800398a:	430b      	orrs	r3, r1
 800398c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003990:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003994:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003998:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800399c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80039a0:	1dda      	adds	r2, r3, #7
 80039a2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80039a6:	4413      	add	r3, r2
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2200      	movs	r2, #0
 80039ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80039b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039b6:	f04f 0200 	mov.w	r2, #0
 80039ba:	f04f 0300 	mov.w	r3, #0
 80039be:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 80039c2:	0623      	lsls	r3, r4, #24
 80039c4:	2200      	movs	r2, #0
 80039c6:	ea40 0402 	orr.w	r4, r0, r2
 80039ca:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 80039ce:	430b      	orrs	r3, r1
 80039d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80039d4:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80039d8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 80039dc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80039e0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80039e4:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 80039e8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80039ec:	3308      	adds	r3, #8
 80039ee:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 80039f2:	f04f 0200 	mov.w	r2, #0
 80039f6:	f04f 0300 	mov.w	r3, #0
 80039fa:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80039fe:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003a02:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003a06:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a0a:	4413      	add	r3, r2
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	2200      	movs	r2, #0
 8003a12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a16:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003a1a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8003a1e:	4623      	mov	r3, r4
 8003a20:	4303      	orrs	r3, r0
 8003a22:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a24:	462b      	mov	r3, r5
 8003a26:	430b      	orrs	r3, r1
 8003a28:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a2a:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8003a2e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003a32:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003a36:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a3a:	1c5a      	adds	r2, r3, #1
 8003a3c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a40:	4413      	add	r3, r2
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2200      	movs	r2, #0
 8003a48:	673b      	str	r3, [r7, #112]	; 0x70
 8003a4a:	677a      	str	r2, [r7, #116]	; 0x74
 8003a4c:	f04f 0200 	mov.w	r2, #0
 8003a50:	f04f 0300 	mov.w	r3, #0
 8003a54:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003a58:	464c      	mov	r4, r9
 8003a5a:	0223      	lsls	r3, r4, #8
 8003a5c:	4644      	mov	r4, r8
 8003a5e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003a62:	4644      	mov	r4, r8
 8003a64:	0222      	lsls	r2, r4, #8
 8003a66:	ea40 0402 	orr.w	r4, r0, r2
 8003a6a:	66bc      	str	r4, [r7, #104]	; 0x68
 8003a6c:	430b      	orrs	r3, r1
 8003a6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a70:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003a74:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003a78:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003a7c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a80:	1c9a      	adds	r2, r3, #2
 8003a82:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a86:	4413      	add	r3, r2
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	663b      	str	r3, [r7, #96]	; 0x60
 8003a90:	667a      	str	r2, [r7, #100]	; 0x64
 8003a92:	f04f 0200 	mov.w	r2, #0
 8003a96:	f04f 0300 	mov.w	r3, #0
 8003a9a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003a9e:	464c      	mov	r4, r9
 8003aa0:	0423      	lsls	r3, r4, #16
 8003aa2:	4644      	mov	r4, r8
 8003aa4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003aa8:	4644      	mov	r4, r8
 8003aaa:	0422      	lsls	r2, r4, #16
 8003aac:	ea40 0402 	orr.w	r4, r0, r2
 8003ab0:	65bc      	str	r4, [r7, #88]	; 0x58
 8003ab2:	430b      	orrs	r3, r1
 8003ab4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ab6:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003aba:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003abe:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003ac2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003ac6:	1cda      	adds	r2, r3, #3
 8003ac8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003acc:	4413      	add	r3, r2
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	653b      	str	r3, [r7, #80]	; 0x50
 8003ad6:	657a      	str	r2, [r7, #84]	; 0x54
 8003ad8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003adc:	4623      	mov	r3, r4
 8003ade:	0a1b      	lsrs	r3, r3, #8
 8003ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ae2:	4623      	mov	r3, r4
 8003ae4:	061b      	lsls	r3, r3, #24
 8003ae6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ae8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003aec:	4623      	mov	r3, r4
 8003aee:	4303      	orrs	r3, r0
 8003af0:	643b      	str	r3, [r7, #64]	; 0x40
 8003af2:	462b      	mov	r3, r5
 8003af4:	430b      	orrs	r3, r1
 8003af6:	647b      	str	r3, [r7, #68]	; 0x44
 8003af8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003afc:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003b00:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003b04:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b08:	1d1a      	adds	r2, r3, #4
 8003b0a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b0e:	4413      	add	r3, r2
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2200      	movs	r2, #0
 8003b16:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b18:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b1a:	f04f 0200 	mov.w	r2, #0
 8003b1e:	f04f 0300 	mov.w	r3, #0
 8003b22:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003b24:	0023      	movs	r3, r4
 8003b26:	2200      	movs	r2, #0
 8003b28:	ea40 0402 	orr.w	r4, r0, r2
 8003b2c:	633c      	str	r4, [r7, #48]	; 0x30
 8003b2e:	430b      	orrs	r3, r1
 8003b30:	637b      	str	r3, [r7, #52]	; 0x34
 8003b32:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003b36:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003b3a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003b3e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b42:	1d5a      	adds	r2, r3, #5
 8003b44:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b48:	4413      	add	r3, r2
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2200      	movs	r2, #0
 8003b50:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b54:	f04f 0200 	mov.w	r2, #0
 8003b58:	f04f 0300 	mov.w	r3, #0
 8003b5c:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003b5e:	0223      	lsls	r3, r4, #8
 8003b60:	2200      	movs	r2, #0
 8003b62:	ea40 0402 	orr.w	r4, r0, r2
 8003b66:	623c      	str	r4, [r7, #32]
 8003b68:	430b      	orrs	r3, r1
 8003b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b6c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003b70:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003b74:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003b78:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b7c:	3306      	adds	r3, #6
 8003b7e:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003b82:	4413      	add	r3, r2
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2200      	movs	r2, #0
 8003b8a:	61bb      	str	r3, [r7, #24]
 8003b8c:	61fa      	str	r2, [r7, #28]
 8003b8e:	f04f 0200 	mov.w	r2, #0
 8003b92:	f04f 0300 	mov.w	r3, #0
 8003b96:	69bc      	ldr	r4, [r7, #24]
 8003b98:	0423      	lsls	r3, r4, #16
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	ea40 0402 	orr.w	r4, r0, r2
 8003ba0:	613c      	str	r4, [r7, #16]
 8003ba2:	430b      	orrs	r3, r1
 8003ba4:	617b      	str	r3, [r7, #20]
 8003ba6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003baa:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003bae:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003bb2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003bb6:	3307      	adds	r3, #7
 8003bb8:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003bbc:	4413      	add	r3, r2
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	60bb      	str	r3, [r7, #8]
 8003bc6:	60fa      	str	r2, [r7, #12]
 8003bc8:	f04f 0200 	mov.w	r2, #0
 8003bcc:	f04f 0300 	mov.w	r3, #0
 8003bd0:	68bc      	ldr	r4, [r7, #8]
 8003bd2:	0623      	lsls	r3, r4, #24
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	ea40 0402 	orr.w	r4, r0, r2
 8003bda:	603c      	str	r4, [r7, #0]
 8003bdc:	430b      	orrs	r3, r1
 8003bde:	607b      	str	r3, [r7, #4]
 8003be0:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003be4:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8003be8:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003bec:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8003bf0:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8003bf4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003bf8:	3308      	adds	r3, #8
 8003bfa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8003bfe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8003c02:	4618      	mov	r0, r3
 8003c04:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003c0e:	4770      	bx	lr

08003c10 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	4b03      	ldr	r3, [pc, #12]	; (8003c28 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	080104e0 	.word	0x080104e0

08003c2c <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	4b03      	ldr	r3, [pc, #12]	; (8003c44 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8003c36:	4618      	mov	r0, r3
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	080104f8 	.word	0x080104f8

08003c48 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7fe fa8e 	bl	8002174 <_ZN3ros3MsgC1Ev>
 8003c58:	4a08      	ldr	r2, [pc, #32]	; (8003c7c <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	601a      	str	r2, [r3, #0]
      linear(),
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	3308      	adds	r3, #8
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7ff fada 	bl	800321c <_ZN13geometry_msgs7Vector3C1Ev>
      angular()
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	3328      	adds	r3, #40	; 0x28
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7ff fad5 	bl	800321c <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4618      	mov	r0, r3
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	08010668 	.word	0x08010668

08003c80 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f103 0008 	add.w	r0, r3, #8
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	4413      	add	r3, r2
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	f7ff fae6 	bl	800326c <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	f7ff fad9 	bl	800326c <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	60fb      	str	r3, [r7, #12]
      return offset;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
    }
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f103 0008 	add.w	r0, r3, #8
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	f7ff fc33 	bl	8003552 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003cec:	4602      	mov	r2, r0
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	4413      	add	r3, r2
 8003d00:	4619      	mov	r1, r3
 8003d02:	f7ff fc26 	bl	8003552 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003d06:	4602      	mov	r2, r0
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	60fb      	str	r3, [r7, #12]
     return offset;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
    }
 8003d10:	4618      	mov	r0, r3
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	4b03      	ldr	r3, [pc, #12]	; (8003d30 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8003d22:	4618      	mov	r0, r3
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	0801051c 	.word	0x0801051c

08003d34 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	4b03      	ldr	r3, [pc, #12]	; (8003d4c <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8003d3e:	4618      	mov	r0, r3
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	08010530 	.word	0x08010530

08003d50 <_ZN8std_msgs4Int8C1Ev>:
  {
    public:
      typedef int8_t _data_type;
      _data_type data;

    Int8():
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
      data(0)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fe fa0a 	bl	8002174 <_ZN3ros3MsgC1Ev>
 8003d60:	4a05      	ldr	r2, [pc, #20]	; (8003d78 <_ZN8std_msgs4Int8C1Ev+0x28>)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	601a      	str	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	711a      	strb	r2, [r3, #4]
    {
    }
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	08010650 	.word	0x08010650

08003d7c <_ZNK8std_msgs4Int89serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003d86:	2300      	movs	r3, #0
 8003d88:	60fb      	str	r3, [r7, #12]
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003d90:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	4413      	add	r3, r2
 8003d98:	7a3a      	ldrb	r2, [r7, #8]
 8003d9a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	3301      	adds	r3, #1
 8003da0:	60fb      	str	r3, [r7, #12]
      return offset;
 8003da2:	68fb      	ldr	r3, [r7, #12]
    }
 8003da4:	4618      	mov	r0, r3
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <_ZN8std_msgs4Int811deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60fb      	str	r3, [r7, #12]
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003dc2:	7a3a      	ldrb	r2, [r7, #8]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6839      	ldr	r1, [r7, #0]
 8003dc8:	440b      	add	r3, r1
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 8003dd2:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	60fb      	str	r3, [r7, #12]
     return offset;
 8003de0:	68fb      	ldr	r3, [r7, #12]
    }
 8003de2:	4618      	mov	r0, r3
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
	...

08003df0 <_ZN8std_msgs4Int87getTypeEv>:

    const char * getType(){ return "std_msgs/Int8"; };
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	4b03      	ldr	r3, [pc, #12]	; (8003e08 <_ZN8std_msgs4Int87getTypeEv+0x18>)
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	08010554 	.word	0x08010554

08003e0c <_ZN8std_msgs4Int86getMD5Ev>:
    const char * getMD5(){ return "27ffa0c9c4b8fb8492252bcad9e5c57b"; };
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	4b03      	ldr	r3, [pc, #12]	; (8003e24 <_ZN8std_msgs4Int86getMD5Ev+0x18>)
 8003e16:	4618      	mov	r0, r3
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	08010564 	.word	0x08010564

08003e28 <_Z12vel_callbackRKN13geometry_msgs5TwistE>:


geometry_msgs::Twist speed;

void vel_callback(const geometry_msgs::Twist &msg)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
	Vx = msg.linear.x;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003e36:	490a      	ldr	r1, [pc, #40]	; (8003e60 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x38>)
 8003e38:	e9c1 2300 	strd	r2, r3, [r1]
	Vy = msg.linear.y;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003e42:	4908      	ldr	r1, [pc, #32]	; (8003e64 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x3c>)
 8003e44:	e9c1 2300 	strd	r2, r3, [r1]
	W = msg.angular.z;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003e4e:	4906      	ldr	r1, [pc, #24]	; (8003e68 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x40>)
 8003e50:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	24000978 	.word	0x24000978
 8003e64:	24000980 	.word	0x24000980
 8003e68:	24000988 	.word	0x24000988

08003e6c <_Z12ori_callbackRKN8std_msgs4Int8E>:
void ori_callback(const std_msgs::Int8 &msg){
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
	flag = msg.data;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	4b03      	ldr	r3, [pc, #12]	; (8003e8c <_Z12ori_callbackRKN8std_msgs4Int8E+0x20>)
 8003e7e:	601a      	str	r2, [r3, #0]
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	24000970 	.word	0x24000970

08003e90 <_Z3pubv>:
ros::Subscriber<geometry_msgs::Twist> sub_vel("/cmd_vel", vel_callback);
ros::Publisher pub_vel("/realspeed", &speed);
ros::Subscriber<std_msgs::Int8> sub_ori("/cmd_ori", ori_callback);
//ros::Subscriber<std_msgs::Int8> sub_laji("cmd_laji", laji_callback);
//ros::Publisher pub_laji("laji_ok", &speed);
void pub(void){
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
	speed.linear.x = rVx;
 8003e94:	4b0b      	ldr	r3, [pc, #44]	; (8003ec4 <_Z3pubv+0x34>)
 8003e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9a:	490b      	ldr	r1, [pc, #44]	; (8003ec8 <_Z3pubv+0x38>)
 8003e9c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	speed.linear.y = rVy;
 8003ea0:	4b0a      	ldr	r3, [pc, #40]	; (8003ecc <_Z3pubv+0x3c>)
 8003ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea6:	4908      	ldr	r1, [pc, #32]	; (8003ec8 <_Z3pubv+0x38>)
 8003ea8:	e9c1 2306 	strd	r2, r3, [r1, #24]
	speed.angular.z = rW;
 8003eac:	4b08      	ldr	r3, [pc, #32]	; (8003ed0 <_Z3pubv+0x40>)
 8003eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb2:	4905      	ldr	r1, [pc, #20]	; (8003ec8 <_Z3pubv+0x38>)
 8003eb4:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	pub_vel.publish(&speed);
 8003eb8:	4903      	ldr	r1, [pc, #12]	; (8003ec8 <_Z3pubv+0x38>)
 8003eba:	4806      	ldr	r0, [pc, #24]	; (8003ed4 <_Z3pubv+0x44>)
 8003ebc:	f7fe ffa7 	bl	8002e0e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8003ec0:	bf00      	nop
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	24000990 	.word	0x24000990
 8003ec8:	240009f0 	.word	0x240009f0
 8003ecc:	24000998 	.word	0x24000998
 8003ed0:	240009a0 	.word	0x240009a0
 8003ed4:	24001fd8 	.word	0x24001fd8

08003ed8 <_Z9ros_setupv>:
void ros_setup(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
    nh.initNode();
 8003edc:	4808      	ldr	r0, [pc, #32]	; (8003f00 <_Z9ros_setupv+0x28>)
 8003ede:	f000 f9fd 	bl	80042dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
    nh.subscribe(sub_vel);
 8003ee2:	4908      	ldr	r1, [pc, #32]	; (8003f04 <_Z9ros_setupv+0x2c>)
 8003ee4:	4806      	ldr	r0, [pc, #24]	; (8003f00 <_Z9ros_setupv+0x28>)
 8003ee6:	f000 fa22 	bl	800432e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
    nh.advertise(pub_vel);
 8003eea:	4907      	ldr	r1, [pc, #28]	; (8003f08 <_Z9ros_setupv+0x30>)
 8003eec:	4804      	ldr	r0, [pc, #16]	; (8003f00 <_Z9ros_setupv+0x28>)
 8003eee:	f000 fa49 	bl	8004384 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
    nh.subscribe(sub_ori);
 8003ef2:	4906      	ldr	r1, [pc, #24]	; (8003f0c <_Z9ros_setupv+0x34>)
 8003ef4:	4802      	ldr	r0, [pc, #8]	; (8003f00 <_Z9ros_setupv+0x28>)
 8003ef6:	f000 fa75 	bl	80043e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>
//  nh.subscribe(sub_laji);
//	nh.advertise(pub_laji);

}
 8003efa:	bf00      	nop
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	24000a38 	.word	0x24000a38
 8003f04:	24001f78 	.word	0x24001f78
 8003f08:	24001fd8 	.word	0x24001fd8
 8003f0c:	24001fec 	.word	0x24001fec

08003f10 <_Z8ros_loopv>:
void ros_loop(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
    nh.spinOnce();
 8003f14:	4802      	ldr	r0, [pc, #8]	; (8003f20 <_Z8ros_loopv+0x10>)
 8003f16:	f000 fa90 	bl	800443a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
//    interPub();
}
 8003f1a:	bf00      	nop
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	24000a38 	.word	0x24000a38

08003f24 <_Z13Error_Handlerv>:
/* UART Communication */
void Error_Handler(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003f28:	b672      	cpsid	i
}
 8003f2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003f2c:	e7fe      	b.n	8003f2c <_Z13Error_Handlerv+0x8>
	...

08003f30 <_ZL19MX_USART1_UART_Initv>:
  }
  /* USER CODE END Error_Handler_Debug */
}

static void MX_USART1_UART_Init(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart1.Instance = USART1;
 8003f34:	4b2c      	ldr	r3, [pc, #176]	; (8003fe8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003f36:	4a2d      	ldr	r2, [pc, #180]	; (8003fec <_ZL19MX_USART1_UART_Initv+0xbc>)
 8003f38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8003f3a:	4b2b      	ldr	r3, [pc, #172]	; (8003fe8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003f3c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8003f40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003f42:	4b29      	ldr	r3, [pc, #164]	; (8003fe8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003f48:	4b27      	ldr	r3, [pc, #156]	; (8003fe8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003f4e:	4b26      	ldr	r3, [pc, #152]	; (8003fe8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003f54:	4b24      	ldr	r3, [pc, #144]	; (8003fe8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003f56:	220c      	movs	r2, #12
 8003f58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f5a:	4b23      	ldr	r3, [pc, #140]	; (8003fe8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f60:	4b21      	ldr	r3, [pc, #132]	; (8003fe8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f66:	4b20      	ldr	r3, [pc, #128]	; (8003fe8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003f6c:	4b1e      	ldr	r3, [pc, #120]	; (8003fe8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f72:	4b1d      	ldr	r3, [pc, #116]	; (8003fe8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003f78:	481b      	ldr	r0, [pc, #108]	; (8003fe8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003f7a:	f009 fec7 	bl	800dd0c <HAL_UART_Init>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	bf14      	ite	ne
 8003f84:	2301      	movne	r3, #1
 8003f86:	2300      	moveq	r3, #0
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8003f8e:	f7ff ffc9 	bl	8003f24 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f92:	2100      	movs	r1, #0
 8003f94:	4814      	ldr	r0, [pc, #80]	; (8003fe8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003f96:	f00b ffd9 	bl	800ff4c <HAL_UARTEx_SetTxFifoThreshold>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	bf14      	ite	ne
 8003fa0:	2301      	movne	r3, #1
 8003fa2:	2300      	moveq	r3, #0
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 8003faa:	f7ff ffbb 	bl	8003f24 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003fae:	2100      	movs	r1, #0
 8003fb0:	480d      	ldr	r0, [pc, #52]	; (8003fe8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003fb2:	f00c f809 	bl	800ffc8 <HAL_UARTEx_SetRxFifoThreshold>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	bf14      	ite	ne
 8003fbc:	2301      	movne	r3, #1
 8003fbe:	2300      	moveq	r3, #0
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8003fc6:	f7ff ffad 	bl	8003f24 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003fca:	4807      	ldr	r0, [pc, #28]	; (8003fe8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003fcc:	f00b ff85 	bl	800feda <HAL_UARTEx_DisableFifoMode>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	bf14      	ite	ne
 8003fd6:	2301      	movne	r3, #1
 8003fd8:	2300      	moveq	r3, #0
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8003fe0:	f7ff ffa0 	bl	8003f24 <_Z13Error_Handlerv>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003fe4:	bf00      	nop
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	24000754 	.word	0x24000754
 8003fec:	40011000 	.word	0x40011000

08003ff0 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
    if(huart == &huart1){
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a09      	ldr	r2, [pc, #36]	; (8004020 <HAL_UART_ErrorCallback+0x30>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d10b      	bne.n	8004018 <HAL_UART_ErrorCallback+0x28>
    // set velocity 0 before uart reinitialization


		HAL_UART_DeInit(&huart1);
 8004000:	4807      	ldr	r0, [pc, #28]	; (8004020 <HAL_UART_ErrorCallback+0x30>)
 8004002:	f009 fed3 	bl	800ddac <HAL_UART_DeInit>
		MX_USART1_UART_Init();
 8004006:	f7ff ff93 	bl	8003f30 <_ZL19MX_USART1_UART_Initv>
		nh.getHardware()->init();
 800400a:	4806      	ldr	r0, [pc, #24]	; (8004024 <HAL_UART_ErrorCallback+0x34>)
 800400c:	f000 fc8d 	bl	800492a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8004010:	4603      	mov	r3, r0
 8004012:	4618      	mov	r0, r3
 8004014:	f7fe fffc 	bl	8003010 <_ZN13STM32Hardware4initEv>
    }
}
 8004018:	bf00      	nop
 800401a:	3708      	adds	r7, #8
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	24000754 	.word	0x24000754
 8004024:	24000a38 	.word	0x24000a38

08004028 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8004030:	4805      	ldr	r0, [pc, #20]	; (8004048 <HAL_UART_TxCpltCallback+0x20>)
 8004032:	f000 fc7a 	bl	800492a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8004036:	4603      	mov	r3, r0
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff f833 	bl	80030a4 <_ZN13STM32Hardware5flushEv>
}
 800403e:	bf00      	nop
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	24000a38 	.word	0x24000a38

0800404c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8004056:	2300      	movs	r3, #0
 8004058:	60fb      	str	r3, [r7, #12]
 800405a:	e00c      	b.n	8004076 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	00db      	lsls	r3, r3, #3
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	fa22 f103 	lsr.w	r1, r2, r3
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4413      	add	r3, r2
 800406c:	b2ca      	uxtb	r2, r1
 800406e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	3301      	adds	r3, #1
 8004074:	60fb      	str	r3, [r7, #12]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2b03      	cmp	r3, #3
 800407a:	d9ef      	bls.n	800405c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 800407c:	bf00      	nop
 800407e:	bf00      	nop
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 800408a:	b480      	push	{r7}
 800408c:	b085      	sub	sp, #20
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
 8004092:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800409a:	2300      	movs	r3, #0
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	e010      	b.n	80040c2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6839      	ldr	r1, [r7, #0]
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	440a      	add	r2, r1
 80040aa:	7812      	ldrb	r2, [r2, #0]
 80040ac:	4611      	mov	r1, r2
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	00d2      	lsls	r2, r2, #3
 80040b2:	fa01 f202 	lsl.w	r2, r1, r2
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	3301      	adds	r3, #1
 80040c0:	60fb      	str	r3, [r7, #12]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2b03      	cmp	r3, #3
 80040c6:	d9eb      	bls.n	80040a0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 80040c8:	bf00      	nop
 80040ca:	bf00      	nop
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
	...

080040d8 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	4a04      	ldr	r2, [pc, #16]	; (80040f4 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4618      	mov	r0, r3
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	080106b0 	.word	0x080106b0

080040f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4618      	mov	r0, r3
 8004104:	f7ff ffe8 	bl	80040d8 <_ZN3ros15NodeHandleBase_C1Ev>
 8004108:	4a47      	ldr	r2, [pc, #284]	; (8004228 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x130>)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	3304      	adds	r3, #4
 8004112:	4618      	mov	r0, r3
 8004114:	f7fe ff5c 	bl	8002fd0 <_ZN13STM32HardwareC1Ev>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	f241 5314 	movw	r3, #5396	; 0x1514
 800412a:	4413      	add	r3, r2
 800412c:	4618      	mov	r0, r3
 800412e:	f7fe fb95 	bl	800285c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8004132:	2300      	movs	r3, #0
 8004134:	617b      	str	r3, [r7, #20]
 8004136:	e00a      	b.n	800414e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4413      	add	r3, r2
 8004144:	2200      	movs	r2, #0
 8004146:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	3301      	adds	r3, #1
 800414c:	617b      	str	r3, [r7, #20]
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	2b18      	cmp	r3, #24
 8004152:	d9f1      	bls.n	8004138 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x40>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004154:	2300      	movs	r3, #0
 8004156:	613b      	str	r3, [r7, #16]
 8004158:	e009      	b.n	800416e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004162:	2100      	movs	r1, #0
 8004164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	3301      	adds	r3, #1
 800416c:	613b      	str	r3, [r7, #16]
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	2b18      	cmp	r3, #24
 8004172:	d9f2      	bls.n	800415a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x62>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8004174:	2300      	movs	r3, #0
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	e00a      	b.n	8004190 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	441a      	add	r2, r3
 8004180:	f241 0324 	movw	r3, #4132	; 0x1024
 8004184:	4413      	add	r3, r2
 8004186:	2200      	movs	r2, #0
 8004188:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	3301      	adds	r3, #1
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004196:	d3f0      	bcc.n	800417a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x82>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8004198:	2300      	movs	r3, #0
 800419a:	60bb      	str	r3, [r7, #8]
 800419c:	e00a      	b.n	80041b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xbc>
      message_out[i] = 0;
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	441a      	add	r2, r3
 80041a4:	f241 2324 	movw	r3, #4644	; 0x1224
 80041a8:	4413      	add	r3, r2
 80041aa:	2200      	movs	r2, #0
 80041ac:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	3301      	adds	r3, #1
 80041b2:	60bb      	str	r3, [r7, #8]
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041ba:	d3f0      	bcc.n	800419e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa6>

    req_param_resp.ints_length = 0;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041c2:	461a      	mov	r2, r3
 80041c4:	2300      	movs	r3, #0
 80041c6:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041d0:	461a      	mov	r2, r3
 80041d2:	2300      	movs	r3, #0
 80041d4:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
    req_param_resp.floats_length = 0;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041de:	461a      	mov	r2, r3
 80041e0:	2300      	movs	r3, #0
 80041e2:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
    req_param_resp.floats = NULL;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041ec:	461a      	mov	r2, r3
 80041ee:	2300      	movs	r3, #0
 80041f0:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    req_param_resp.ints_length = 0;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041fa:	461a      	mov	r2, r3
 80041fc:	2300      	movs	r3, #0
 80041fe:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004208:	461a      	mov	r2, r3
 800420a:	2300      	movs	r3, #0
 800420c:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520

    spin_timeout_ = 0;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004216:	461a      	mov	r2, r3
 8004218:	2300      	movs	r3, #0
 800421a:	6213      	str	r3, [r2, #32]
  }
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4618      	mov	r0, r3
 8004220:	3718      	adds	r7, #24
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	0801063c 	.word	0x0801063c

0800422c <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	4a04      	ldr	r2, [pc, #16]	; (8004248 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4618      	mov	r0, r3
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	08010698 	.word	0x08010698

0800424c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
 8004258:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	4618      	mov	r0, r3
 800425e:	f7ff ffe5 	bl	800422c <_ZN3ros11Subscriber_C1Ev>
 8004262:	4a0b      	ldr	r2, [pc, #44]	; (8004290 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	3310      	adds	r3, #16
 800426c:	4618      	mov	r0, r3
 800426e:	f7ff fceb 	bl	8003c48 <_ZN13geometry_msgs5TwistC1Ev>
    cb_(cb),
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	659a      	str	r2, [r3, #88]	; 0x58
    endpoint_(endpoint)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	68ba      	ldr	r2, [r7, #8]
 8004282:	609a      	str	r2, [r3, #8]
  };
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4618      	mov	r0, r3
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	08010624 	.word	0x08010624

08004294 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
 80042a0:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7ff ffc1 	bl	800422c <_ZN3ros11Subscriber_C1Ev>
 80042aa:	4a0b      	ldr	r2, [pc, #44]	; (80042d8 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei+0x44>)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	601a      	str	r2, [r3, #0]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	330c      	adds	r3, #12
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7ff fd4b 	bl	8003d50 <_ZN8std_msgs4Int8C1Ev>
    cb_(cb),
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	619a      	str	r2, [r3, #24]
    topic_ = topic_name;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	609a      	str	r2, [r3, #8]
  };
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	0801060c 	.word	0x0801060c

080042dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	3304      	adds	r3, #4
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7fe fe91 	bl	8003010 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042f4:	461a      	mov	r2, r3
 80042f6:	2300      	movs	r3, #0
 80042f8:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
    bytes_ = 0;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004302:	461a      	mov	r2, r3
 8004304:	2300      	movs	r3, #0
 8004306:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
    index_ = 0;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004310:	461a      	mov	r2, r3
 8004312:	2300      	movs	r3, #0
 8004314:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
    topic_ = 0;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800431e:	461a      	mov	r2, r3
 8004320:	2300      	movs	r3, #0
 8004322:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
  };
 8004326:	bf00      	nop
 8004328:	3708      	adds	r7, #8
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 800432e:	b480      	push	{r7}
 8004330:	b085      	sub	sp, #20
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
 8004336:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004338:	2300      	movs	r3, #0
 800433a:	60fb      	str	r3, [r7, #12]
 800433c:	e018      	b.n	8004370 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x42>
    {
      if (subscribers[i] == 0) // empty slot
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10d      	bne.n	800436a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x3c>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 800434e:	6839      	ldr	r1, [r7, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	605a      	str	r2, [r3, #4]
        return true;
 8004366:	2301      	movs	r3, #1
 8004368:	e006      	b.n	8004378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	3301      	adds	r3, #1
 800436e:	60fb      	str	r3, [r7, #12]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2b18      	cmp	r3, #24
 8004374:	dde3      	ble.n	800433e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x10>
      }
    }
    return false;
 8004376:	2300      	movs	r3, #0
  }
 8004378:	4618      	mov	r0, r3
 800437a:	3714      	adds	r7, #20
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800438e:	2300      	movs	r3, #0
 8004390:	60fb      	str	r3, [r7, #12]
 8004392:	e01d      	b.n	80043d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
      if (publishers[i] == 0) // empty slot
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4413      	add	r3, r2
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d111      	bne.n	80043ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
        publishers[i] = &p;
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	60da      	str	r2, [r3, #12]
        return true;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e006      	b.n	80043d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	3301      	adds	r3, #1
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2b18      	cmp	r3, #24
 80043d4:	ddde      	ble.n	8004394 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
    return false;
 80043d6:	2300      	movs	r3, #0
  }
 80043d8:	4618      	mov	r0, r3
 80043da:	3714      	adds	r7, #20
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80043ee:	2300      	movs	r3, #0
 80043f0:	60fb      	str	r3, [r7, #12]
 80043f2:	e018      	b.n	8004426 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0x42>
      if (subscribers[i] == 0) // empty slot
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80043fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10d      	bne.n	8004420 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0x3c>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8004404:	6839      	ldr	r1, [r7, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800440e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	605a      	str	r2, [r3, #4]
        return true;
 800441c:	2301      	movs	r3, #1
 800441e:	e006      	b.n	800442e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	3301      	adds	r3, #1
 8004424:	60fb      	str	r3, [r7, #12]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2b18      	cmp	r3, #24
 800442a:	dde3      	ble.n	80043f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0x10>
    return false;
 800442c:	2300      	movs	r3, #0
  }
 800442e:	4618      	mov	r0, r3
 8004430:	3714      	adds	r7, #20
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 800443a:	b580      	push	{r7, lr}
 800443c:	b084      	sub	sp, #16
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
	  uint32_t c_time = hardware_.time();
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	3304      	adds	r3, #4
 8004446:	4618      	mov	r0, r3
 8004448:	f7fe fedc 	bl	8003204 <_ZN13STM32Hardware4timeEv>
 800444c:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004454:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004460:	4293      	cmp	r3, r2
 8004462:	d905      	bls.n	8004470 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      configured_ = false;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
    if (mode_ != MODE_FIRST_FF)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004476:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00e      	beq.n	800449c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004484:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	429a      	cmp	r2, r3
 800448c:	d906      	bls.n	800449c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004494:	461a      	mov	r2, r3
 8004496:	2300      	movs	r3, #0
 8004498:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
      if (spin_timeout_ > 0)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d015      	beq.n	80044d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3304      	adds	r3, #4
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7fe fea9 	bl	8003204 <_ZN13STM32Hardware4timeEv>
 80044b2:	4602      	mov	r2, r0
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	1ad2      	subs	r2, r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	bf8c      	ite	hi
 80044c4:	2301      	movhi	r3, #1
 80044c6:	2300      	movls	r3, #0
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d002      	beq.n	80044d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
          return SPIN_TIMEOUT;
 80044ce:	f06f 0301 	mvn.w	r3, #1
 80044d2:	e226      	b.n	8004922 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      int data = hardware_.read();
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3304      	adds	r3, #4
 80044d8:	4618      	mov	r0, r3
 80044da:	f7fe fdb5 	bl	8003048 <_ZN13STM32Hardware4readEv>
 80044de:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f2c0 81ff 	blt.w	80048e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ac>
      checksum_ += data;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044ee:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	; 0x4fc
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	4413      	add	r3, r2
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044fc:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004506:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800450a:	2b07      	cmp	r3, #7
 800450c:	d12d      	bne.n	800456a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004514:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 8004518:	1c5a      	adds	r2, r3, #1
 800451a:	6879      	ldr	r1, [r7, #4]
 800451c:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8004520:	f8c1 24f8 	str.w	r2, [r1, #1272]	; 0x4f8
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	b2d1      	uxtb	r1, r2
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	441a      	add	r2, r3
 800452c:	f241 0324 	movw	r3, #4132	; 0x1024
 8004530:	4413      	add	r3, r2
 8004532:	460a      	mov	r2, r1
 8004534:	701a      	strb	r2, [r3, #0]
        bytes_--;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800453c:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8004540:	3b01      	subs	r3, #1
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004548:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004552:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1a0      	bne.n	800449c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004560:	461a      	mov	r2, r3
 8004562:	2308      	movs	r3, #8
 8004564:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004568:	e798      	b.n	800449c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004570:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004574:	2b00      	cmp	r3, #0
 8004576:	d130      	bne.n	80045da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	2bff      	cmp	r3, #255	; 0xff
 800457c:	d112      	bne.n	80045a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x16a>
          mode_++;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004584:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004588:	3301      	adds	r3, #1
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004590:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	3314      	adds	r3, #20
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800459e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
 80045a2:	e77b      	b.n	800449c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	3304      	adds	r3, #4
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7fe fe2b 	bl	8003204 <_ZN13STM32Hardware4timeEv>
 80045ae:	4602      	mov	r2, r0
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b8:	4293      	cmp	r3, r2
 80045ba:	bf8c      	ite	hi
 80045bc:	2301      	movhi	r3, #1
 80045be:	2300      	movls	r3, #0
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f43f af6a 	beq.w	800449c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          configured_ = false;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
          return SPIN_TIMEOUT;
 80045d4:	f06f 0301 	mvn.w	r3, #1
 80045d8:	e1a3      	b.n	8004922 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      else if (mode_ == MODE_PROTOCOL_VER)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045e0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d121      	bne.n	800462c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	2bfe      	cmp	r3, #254	; 0xfe
 80045ec:	d10b      	bne.n	8004606 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1cc>
          mode_++;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045f4:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80045f8:	3301      	adds	r3, #1
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004600:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004604:	e74a      	b.n	800449c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800460c:	461a      	mov	r2, r3
 800460e:	2300      	movs	r3, #0
 8004610:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          if (configured_ == false)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800461a:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 800461e:	2b00      	cmp	r3, #0
 8004620:	f47f af3c 	bne.w	800449c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 f98c 	bl	8004942 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 800462a:	e737      	b.n	800449c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004632:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004636:	2b02      	cmp	r3, #2
 8004638:	d120      	bne.n	800467c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
        bytes_ = data;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004640:	461a      	mov	r2, r3
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        index_ = 0;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800464e:	461a      	mov	r2, r3
 8004650:	2300      	movs	r3, #0
 8004652:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
        mode_++;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800465c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004660:	3301      	adds	r3, #1
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004668:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte for calculating size checksum */
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004672:	461a      	mov	r2, r3
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 800467a:	e70f      	b.n	800449c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004682:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004686:	2b03      	cmp	r3, #3
 8004688:	d118      	bne.n	80046bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004690:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	021b      	lsls	r3, r3, #8
 8004698:	4413      	add	r3, r2
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046a0:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        mode_++;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046aa:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80046ae:	3301      	adds	r3, #1
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046b6:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80046ba:	e6ef      	b.n	800449c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046c2:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	d11f      	bne.n	800470a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046d0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80046d4:	425a      	negs	r2, r3
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	b2d2      	uxtb	r2, r2
 80046da:	bf58      	it	pl
 80046dc:	4253      	negpl	r3, r2
 80046de:	2bff      	cmp	r3, #255	; 0xff
 80046e0:	d10b      	bne.n	80046fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>
          mode_++;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046e8:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80046ec:	3301      	adds	r3, #1
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046f4:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80046f8:	e6d0      	b.n	800449c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004700:	461a      	mov	r2, r3
 8004702:	2300      	movs	r3, #0
 8004704:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004708:	e6c8      	b.n	800449c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004710:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004714:	2b05      	cmp	r3, #5
 8004716:	d119      	bne.n	800474c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
        topic_ = data;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800471e:	461a      	mov	r2, r3
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_++;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800472c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004730:	3301      	adds	r3, #1
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004738:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte included in checksum */
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004742:	461a      	mov	r2, r3
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 800474a:	e6a7      	b.n	800449c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004752:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004756:	2b06      	cmp	r3, #6
 8004758:	d123      	bne.n	80047a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>
        topic_ += data << 8;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004760:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	021b      	lsls	r3, r3, #8
 8004768:	4413      	add	r3, r2
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004770:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_ = MODE_MESSAGE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800477a:	461a      	mov	r2, r3
 800477c:	2307      	movs	r3, #7
 800477e:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if (bytes_ == 0)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004788:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 800478c:	2b00      	cmp	r3, #0
 800478e:	f47f ae85 	bne.w	800449c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004798:	461a      	mov	r2, r3
 800479a:	2308      	movs	r3, #8
 800479c:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80047a0:	e67c      	b.n	800449c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047a8:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80047ac:	2b08      	cmp	r3, #8
 80047ae:	f47f ae75 	bne.w	800449c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047b8:	461a      	mov	r2, r3
 80047ba:	2300      	movs	r3, #0
 80047bc:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if ((checksum_ % 256) == 255)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047c6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80047ca:	425a      	negs	r2, r3
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	b2d2      	uxtb	r2, r2
 80047d0:	bf58      	it	pl
 80047d2:	4253      	negpl	r3, r2
 80047d4:	2bff      	cmp	r3, #255	; 0xff
 80047d6:	f47f ae61 	bne.w	800449c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047e0:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d116      	bne.n	8004816 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3dc>
            requestSyncTime();
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 f8aa 	bl	8004942 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f8c6 	bl	8004980 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047fa:	461a      	mov	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
            last_sync_receive_time = c_time;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004808:	461a      	mov	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
            return SPIN_ERR;
 8004810:	f04f 33ff 	mov.w	r3, #4294967295
 8004814:	e085      	b.n	8004922 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
          else if (topic_ == TopicInfo::ID_TIME)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800481c:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004820:	2b0a      	cmp	r3, #10
 8004822:	d108      	bne.n	8004836 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3fc>
            syncTime(message_in);
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	f241 0324 	movw	r3, #4132	; 0x1024
 800482a:	4413      	add	r3, r2
 800482c:	4619      	mov	r1, r3
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f988 	bl	8004b44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8004834:	e632      	b.n	800449c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800483c:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004840:	2b06      	cmp	r3, #6
 8004842:	d112      	bne.n	800486a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	f241 5314 	movw	r3, #5396	; 0x1514
 800484a:	4413      	add	r3, r2
 800484c:	6879      	ldr	r1, [r7, #4]
 800484e:	f241 0224 	movw	r2, #4132	; 0x1024
 8004852:	440a      	add	r2, r1
 8004854:	4611      	mov	r1, r2
 8004856:	4618      	mov	r0, r3
 8004858:	f7fe f935 	bl	8002ac6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 8004868:	e618      	b.n	800449c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004870:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004874:	2b0b      	cmp	r3, #11
 8004876:	d106      	bne.n	8004886 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44c>
            configured_ = false;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800487e:	2200      	movs	r2, #0
 8004880:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 8004884:	e60a      	b.n	800449c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800488c:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004890:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800489a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f43f adfc 	beq.w	800449c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048aa:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80048ae:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80048b8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048c2:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80048c6:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80048d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	6879      	ldr	r1, [r7, #4]
 80048da:	f241 0324 	movw	r3, #4132	; 0x1024
 80048de:	440b      	add	r3, r1
 80048e0:	4619      	mov	r1, r3
 80048e2:	4790      	blx	r2
    while (true)
 80048e4:	e5da      	b.n	800449c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        break;
 80048e6:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048ee:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d014      	beq.n	8004920 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048fc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004908:	4293      	cmp	r3, r2
 800490a:	d909      	bls.n	8004920 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
      requestSyncTime();
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f818 	bl	8004942 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004918:	461a      	mov	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    return SPIN_OK;
 8004920:	2300      	movs	r3, #0
  }
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:
  Hardware* getHardware()
 800492a:	b480      	push	{r7}
 800492c:	b083      	sub	sp, #12
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
    return &hardware_;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	3304      	adds	r3, #4
  }
 8004936:	4618      	mov	r0, r3
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8004942:	b580      	push	{r7, lr}
 8004944:	b086      	sub	sp, #24
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800494a:	f107 030c 	add.w	r3, r7, #12
 800494e:	4618      	mov	r0, r3
 8004950:	f7fd fc20 	bl	8002194 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f107 020c 	add.w	r2, r7, #12
 800495e:	210a      	movs	r1, #10
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	4798      	blx	r3
    rt_time = hardware_.time();
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	3304      	adds	r3, #4
 8004968:	4618      	mov	r0, r3
 800496a:	f7fe fc4b 	bl	8003204 <_ZN13STM32Hardware4timeEv>
 800496e:	4602      	mov	r2, r0
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004976:	615a      	str	r2, [r3, #20]
  }
 8004978:	bf00      	nop
 800497a:	3718      	adds	r7, #24
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8004980:	b590      	push	{r4, r7, lr}
 8004982:	b08b      	sub	sp, #44	; 0x2c
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004988:	f107 030c 	add.w	r3, r7, #12
 800498c:	4618      	mov	r0, r3
 800498e:	f7fd fcf1 	bl	8002374 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004992:	2300      	movs	r3, #0
 8004994:	627b      	str	r3, [r7, #36]	; 0x24
 8004996:	e062      	b.n	8004a5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d056      	beq.n	8004a58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ae:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4413      	add	r3, r2
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c2:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4413      	add	r3, r2
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d4:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	6859      	ldr	r1, [r3, #4]
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	4413      	add	r3, r2
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	3308      	adds	r3, #8
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4608      	mov	r0, r1
 80049f8:	4798      	blx	r3
 80049fa:	4603      	mov	r3, r0
 80049fc:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a02:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4413      	add	r3, r2
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	6859      	ldr	r1, [r3, #4]
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	330c      	adds	r3, #12
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4608      	mov	r0, r1
 8004a26:	4798      	blx	r3
 8004a28:	4603      	mov	r3, r0
 8004a2a:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004a2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a30:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681c      	ldr	r4, [r3, #0]
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4413      	add	r3, r2
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fe f9f5 	bl	8002e36 <_ZN3ros9Publisher15getEndpointTypeEv>
 8004a4c:	4601      	mov	r1, r0
 8004a4e:	f107 030c 	add.w	r3, r7, #12
 8004a52:	461a      	mov	r2, r3
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	2b18      	cmp	r3, #24
 8004a62:	dd99      	ble.n	8004998 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004a64:	2300      	movs	r3, #0
 8004a66:	627b      	str	r3, [r7, #36]	; 0x24
 8004a68:	e05e      	b.n	8004b28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a6e:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d053      	beq.n	8004b22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a7e:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a90:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa0:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004aa4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aac:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	3308      	adds	r3, #8
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4608      	mov	r0, r1
 8004abc:	4798      	blx	r3
 8004abe:	4603      	mov	r3, r0
 8004ac0:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ac6:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004aca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ad2:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	330c      	adds	r3, #12
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4608      	mov	r0, r1
 8004ae2:	4798      	blx	r3
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8004ae8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004aec:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681c      	ldr	r4, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004af8:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004afc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b04:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	3304      	adds	r3, #4
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4608      	mov	r0, r1
 8004b14:	4798      	blx	r3
 8004b16:	4601      	mov	r1, r0
 8004b18:	f107 030c 	add.w	r3, r7, #12
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b24:	3301      	adds	r3, #1
 8004b26:	627b      	str	r3, [r7, #36]	; 0x24
 8004b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2a:	2b18      	cmp	r3, #24
 8004b2c:	dd9d      	ble.n	8004a6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
  }
 8004b3a:	bf00      	nop
 8004b3c:	372c      	adds	r7, #44	; 0x2c
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd90      	pop	{r4, r7, pc}
	...

08004b44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004b4e:	f107 0308 	add.w	r3, r7, #8
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7fd fb1e 	bl	8002194 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	3304      	adds	r3, #4
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7fe fb51 	bl	8003204 <_ZN13STM32Hardware4timeEv>
 8004b62:	4602      	mov	r2, r0
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004b70:	f107 0308 	add.w	r3, r7, #8
 8004b74:	6839      	ldr	r1, [r7, #0]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7fd fb7c 	bl	8002274 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	4915      	ldr	r1, [pc, #84]	; (8004bd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004b82:	fba1 1303 	umull	r1, r3, r1, r3
 8004b86:	099b      	lsrs	r3, r3, #6
 8004b88:	4413      	add	r3, r2
 8004b8a:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004b8c:	6939      	ldr	r1, [r7, #16]
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	4b11      	ldr	r3, [pc, #68]	; (8004bd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004b92:	fba3 0302 	umull	r0, r3, r3, r2
 8004b96:	099b      	lsrs	r3, r3, #6
 8004b98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b9c:	fb00 f303 	mul.w	r3, r0, r3
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	4a0e      	ldr	r2, [pc, #56]	; (8004bdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 8004ba4:	fb02 f303 	mul.w	r3, r2, r3
 8004ba8:	440b      	add	r3, r1
 8004baa:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004bac:	f107 0308 	add.w	r3, r7, #8
 8004bb0:	3304      	adds	r3, #4
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f8bf 	bl	8004d38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	3304      	adds	r3, #4
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7fe fb20 	bl	8003204 <_ZN13STM32Hardware4timeEv>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bcc:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
  }
 8004bd0:	bf00      	nop
 8004bd2:	3718      	adds	r7, #24
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	10624dd3 	.word	0x10624dd3
 8004bdc:	000f4240 	.word	0x000f4240

08004be0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b088      	sub	sp, #32
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	2b63      	cmp	r3, #99	; 0x63
 8004bf0:	dd0b      	ble.n	8004c0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bf8:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8004bfc:	f083 0301 	eor.w	r3, r3, #1
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d001      	beq.n	8004c0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8004c06:	2300      	movs	r3, #0
 8004c08:	e090      	b.n	8004d2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	68f9      	ldr	r1, [r7, #12]
 8004c12:	f241 2324 	movw	r3, #4644	; 0x1224
 8004c16:	440b      	add	r3, r1
 8004c18:	3307      	adds	r3, #7
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	4790      	blx	r2
 8004c20:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c28:	22ff      	movs	r2, #255	; 0xff
 8004c2a:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
    message_out[1] = PROTOCOL_VER;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c34:	22fe      	movs	r2, #254	; 0xfe
 8004c36:	f883 2225 	strb.w	r2, [r3, #549]	; 0x225
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	b2da      	uxtb	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c44:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	0a1b      	lsrs	r3, r3, #8
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	b2da      	uxtb	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c58:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c62:	f893 2226 	ldrb.w	r2, [r3, #550]	; 0x226
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c6c:	f893 3227 	ldrb.w	r3, [r3, #551]	; 0x227
 8004c70:	4413      	add	r3, r2
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	43db      	mvns	r3, r3
 8004c76:	b2da      	uxtb	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c7e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c8c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	b21b      	sxth	r3, r3
 8004c94:	121b      	asrs	r3, r3, #8
 8004c96:	b21b      	sxth	r3, r3
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ca0:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a

    /* calculate checksum */
    int chk = 0;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004ca8:	2305      	movs	r3, #5
 8004caa:	61bb      	str	r3, [r7, #24]
 8004cac:	e00d      	b.n	8004cca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xea>
      chk += message_out[i];
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	441a      	add	r2, r3
 8004cb4:	f241 2324 	movw	r3, #4644	; 0x1224
 8004cb8:	4413      	add	r3, r2
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	61bb      	str	r3, [r7, #24]
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	3306      	adds	r3, #6
 8004cce:	69ba      	ldr	r2, [r7, #24]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	ddec      	ble.n	8004cae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xce>
    l += 7;
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	3307      	adds	r3, #7
 8004cd8:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	425a      	negs	r2, r3
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	b2d2      	uxtb	r2, r2
 8004ce2:	bf58      	it	pl
 8004ce4:	4253      	negpl	r3, r2
 8004ce6:	b2da      	uxtb	r2, r3
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	1c59      	adds	r1, r3, #1
 8004cec:	6179      	str	r1, [r7, #20]
 8004cee:	43d2      	mvns	r2, r2
 8004cf0:	b2d1      	uxtb	r1, r2
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	441a      	add	r2, r3
 8004cf6:	f241 2324 	movw	r3, #4644	; 0x1224
 8004cfa:	4413      	add	r3, r2
 8004cfc:	460a      	mov	r2, r1
 8004cfe:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d06:	dc0b      	bgt.n	8004d20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	1d18      	adds	r0, r3, #4
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	f241 2324 	movw	r3, #4644	; 0x1224
 8004d12:	4413      	add	r3, r2
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	4619      	mov	r1, r3
 8004d18:	f7fe fa2a 	bl	8003170 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	e005      	b.n	8004d2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004d20:	4904      	ldr	r1, [pc, #16]	; (8004d34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x154>)
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f000 f84c 	bl	8004dc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004d28:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3720      	adds	r7, #32
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	08010588 	.word	0x08010588

08004d38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	3304      	adds	r3, #4
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fe fa5c 	bl	8003204 <_ZN13STM32Hardware4timeEv>
 8004d4c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	4917      	ldr	r1, [pc, #92]	; (8004db4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004d56:	fba1 1303 	umull	r1, r3, r1, r3
 8004d5a:	099b      	lsrs	r3, r3, #6
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004d66:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	6859      	ldr	r1, [r3, #4]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	4b11      	ldr	r3, [pc, #68]	; (8004db4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004d70:	fba3 0302 	umull	r0, r3, r3, r2
 8004d74:	099b      	lsrs	r3, r3, #6
 8004d76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d7a:	fb00 f303 	mul.w	r3, r0, r3
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	4a0d      	ldr	r2, [pc, #52]	; (8004db8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x80>)
 8004d82:	fb02 f303 	mul.w	r3, r2, r3
 8004d86:	1aca      	subs	r2, r1, r3
 8004d88:	4b0c      	ldr	r3, [pc, #48]	; (8004dbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x84>)
 8004d8a:	4413      	add	r3, r2
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004d92:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	f241 0318 	movw	r3, #4120	; 0x1018
 8004d9a:	4413      	add	r3, r2
 8004d9c:	6879      	ldr	r1, [r7, #4]
 8004d9e:	f241 021c 	movw	r2, #4124	; 0x101c
 8004da2:	440a      	add	r2, r1
 8004da4:	4611      	mov	r1, r2
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fb fc38 	bl	800061c <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004dac:	bf00      	nop
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	10624dd3 	.word	0x10624dd3
 8004db8:	000f4240 	.word	0x000f4240
 8004dbc:	3b9aca00 	.word	0x3b9aca00

08004dc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	2103      	movs	r1, #3
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f804 	bl	8004ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004dd4:	bf00      	nop
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b088      	sub	sp, #32
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	460b      	mov	r3, r1
 8004de6:	607a      	str	r2, [r7, #4]
 8004de8:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004dea:	f107 0314 	add.w	r3, r7, #20
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7fd fc84 	bl	80026fc <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004df4:	7afb      	ldrb	r3, [r7, #11]
 8004df6:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f107 0214 	add.w	r2, r7, #20
 8004e06:	2107      	movs	r1, #7
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	4798      	blx	r3
  }
 8004e0c:	bf00      	nop
 8004e0e:	3720      	adds	r7, #32
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <_Z41__static_initialization_and_destruction_0ii>:
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d11c      	bne.n	8004e5e <_Z41__static_initialization_and_destruction_0ii+0x4a>
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d117      	bne.n	8004e5e <_Z41__static_initialization_and_destruction_0ii+0x4a>
geometry_msgs::Twist speed;
 8004e2e:	480e      	ldr	r0, [pc, #56]	; (8004e68 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004e30:	f7fe ff0a 	bl	8003c48 <_ZN13geometry_msgs5TwistC1Ev>
ros::NodeHandle nh;
 8004e34:	480d      	ldr	r0, [pc, #52]	; (8004e6c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8004e36:	f7ff f95f 	bl	80040f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<geometry_msgs::Twist> sub_vel("/cmd_vel", vel_callback);
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	4a0c      	ldr	r2, [pc, #48]	; (8004e70 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004e3e:	490d      	ldr	r1, [pc, #52]	; (8004e74 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8004e40:	480d      	ldr	r0, [pc, #52]	; (8004e78 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8004e42:	f7ff fa03 	bl	800424c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Publisher pub_vel("/realspeed", &speed);
 8004e46:	2300      	movs	r3, #0
 8004e48:	4a07      	ldr	r2, [pc, #28]	; (8004e68 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004e4a:	490c      	ldr	r1, [pc, #48]	; (8004e7c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8004e4c:	480c      	ldr	r0, [pc, #48]	; (8004e80 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8004e4e:	f7fd ffc7 	bl	8002de0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Int8> sub_ori("/cmd_ori", ori_callback);
 8004e52:	2301      	movs	r3, #1
 8004e54:	4a0b      	ldr	r2, [pc, #44]	; (8004e84 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8004e56:	490c      	ldr	r1, [pc, #48]	; (8004e88 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004e58:	480c      	ldr	r0, [pc, #48]	; (8004e8c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8004e5a:	f7ff fa1b 	bl	8004294 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>
}
 8004e5e:	bf00      	nop
 8004e60:	3708      	adds	r7, #8
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	240009f0 	.word	0x240009f0
 8004e6c:	24000a38 	.word	0x24000a38
 8004e70:	08003e29 	.word	0x08003e29
 8004e74:	080105c4 	.word	0x080105c4
 8004e78:	24001f78 	.word	0x24001f78
 8004e7c:	080105d0 	.word	0x080105d0
 8004e80:	24001fd8 	.word	0x24001fd8
 8004e84:	08003e6d 	.word	0x08003e6d
 8004e88:	080105dc 	.word	0x080105dc
 8004e8c:	24001fec 	.word	0x24001fec

08004e90 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	330c      	adds	r3, #12
 8004e9e:	6839      	ldr	r1, [r7, #0]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7fe ff85 	bl	8003db0 <_ZN8std_msgs4Int811deserializeEPh>
    this->cb_(msg);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	320c      	adds	r2, #12
 8004eae:	4610      	mov	r0, r2
 8004eb0:	4798      	blx	r3
  }
 8004eb2:	bf00      	nop
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <_ZN3ros10SubscriberIN8std_msgs4Int8EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	699b      	ldr	r3, [r3, #24]
  }
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	370c      	adds	r7, #12
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b082      	sub	sp, #8
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	330c      	adds	r3, #12
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7fe ff86 	bl	8003df0 <_ZN8std_msgs4Int87getTypeEv>
 8004ee4:	4603      	mov	r3, r0
  }
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <_ZN3ros10SubscriberIN8std_msgs4Int8EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b082      	sub	sp, #8
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	330c      	adds	r3, #12
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7fe ff86 	bl	8003e0c <_ZN8std_msgs4Int86getMD5Ev>
 8004f00:	4603      	mov	r3, r0
  }
 8004f02:	4618      	mov	r0, r3
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b082      	sub	sp, #8
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
 8004f12:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	3310      	adds	r3, #16
 8004f18:	6839      	ldr	r1, [r7, #0]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7fe fed6 	bl	8003ccc <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	3210      	adds	r2, #16
 8004f28:	4610      	mov	r0, r2
 8004f2a:	4798      	blx	r3
  }
 8004f2c:	bf00      	nop
 8004f2e:	3708      	adds	r7, #8
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8004f40:	4618      	mov	r0, r3
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	3310      	adds	r3, #16
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7fe fedd 	bl	8003d18 <_ZN13geometry_msgs5Twist7getTypeEv>
 8004f5e:	4603      	mov	r3, r0
  }
 8004f60:	4618      	mov	r0, r3
 8004f62:	3708      	adds	r7, #8
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	3310      	adds	r3, #16
 8004f74:	4618      	mov	r0, r3
 8004f76:	f7fe fedd 	bl	8003d34 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8004f7a:	4603      	mov	r3, r0
  }
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3708      	adds	r7, #8
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
    return configured_;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f92:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
  };
 8004f96:	4618      	mov	r0, r3
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <_GLOBAL__sub_I_speed>:
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004faa:	2001      	movs	r0, #1
 8004fac:	f7ff ff32 	bl	8004e14 <_Z41__static_initialization_and_destruction_0ii>
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	0000      	movs	r0, r0
 8004fb4:	0000      	movs	r0, r0
	...

08004fb8 <_Z6scriptv>:
int everRun2 = 0;

//void pusher_reset(){
//	script_pusher(-15,-15);
//}
void script(){
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	af00      	add	r7, sp, #0
	if(script_a.scriptrun == 1){
 8004fbc:	4bb8      	ldr	r3, [pc, #736]	; (80052a0 <_Z6scriptv+0x2e8>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	f040 810f 	bne.w	80051e4 <_Z6scriptv+0x22c>
		if(delay_start == 0){
 8004fc6:	4bb7      	ldr	r3, [pc, #732]	; (80052a4 <_Z6scriptv+0x2ec>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d110      	bne.n	8004ff0 <_Z6scriptv+0x38>
			script_wheel(5,0,0);
 8004fce:	ed9f 2bb2 	vldr	d2, [pc, #712]	; 8005298 <_Z6scriptv+0x2e0>
 8004fd2:	ed9f 1bb1 	vldr	d1, [pc, #708]	; 8005298 <_Z6scriptv+0x2e0>
 8004fd6:	eeb1 0b04 	vmov.f64	d0, #20	; 0x40a00000  5.0
 8004fda:	f000 f9e1 	bl	80053a0 <_Z12script_wheelddd>
			script_pusher(5,5);
 8004fde:	eeb1 1b04 	vmov.f64	d1, #20	; 0x40a00000  5.0
 8004fe2:	eeb1 0b04 	vmov.f64	d0, #20	; 0x40a00000  5.0
 8004fe6:	f7fd f80f 	bl	8002008 <_Z13script_pusherdd>
			delay_start = 1;
 8004fea:	4bae      	ldr	r3, [pc, #696]	; (80052a4 <_Z6scriptv+0x2ec>)
 8004fec:	2201      	movs	r2, #1
 8004fee:	601a      	str	r2, [r3, #0]
		}
		if(delay == 250 && delay_start == 1){
 8004ff0:	4bad      	ldr	r3, [pc, #692]	; (80052a8 <_Z6scriptv+0x2f0>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2bfa      	cmp	r3, #250	; 0xfa
 8004ff6:	d114      	bne.n	8005022 <_Z6scriptv+0x6a>
 8004ff8:	4baa      	ldr	r3, [pc, #680]	; (80052a4 <_Z6scriptv+0x2ec>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d110      	bne.n	8005022 <_Z6scriptv+0x6a>
			script_wheel(0,0,0);
 8005000:	ed9f 2ba5 	vldr	d2, [pc, #660]	; 8005298 <_Z6scriptv+0x2e0>
 8005004:	ed9f 1ba4 	vldr	d1, [pc, #656]	; 8005298 <_Z6scriptv+0x2e0>
 8005008:	ed9f 0ba3 	vldr	d0, [pc, #652]	; 8005298 <_Z6scriptv+0x2e0>
 800500c:	f000 f9c8 	bl	80053a0 <_Z12script_wheelddd>
			script_pusher(13,5);
 8005010:	eeb1 1b04 	vmov.f64	d1, #20	; 0x40a00000  5.0
 8005014:	eeb2 0b0a 	vmov.f64	d0, #42	; 0x41500000  13.0
 8005018:	f7fc fff6 	bl	8002008 <_Z13script_pusherdd>
			delay_start = 2;
 800501c:	4ba1      	ldr	r3, [pc, #644]	; (80052a4 <_Z6scriptv+0x2ec>)
 800501e:	2202      	movs	r2, #2
 8005020:	601a      	str	r2, [r3, #0]
		}
		if(delay == 550 && delay_start == 2){
 8005022:	4ba1      	ldr	r3, [pc, #644]	; (80052a8 <_Z6scriptv+0x2f0>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f240 2226 	movw	r2, #550	; 0x226
 800502a:	4293      	cmp	r3, r2
 800502c:	d10e      	bne.n	800504c <_Z6scriptv+0x94>
 800502e:	4b9d      	ldr	r3, [pc, #628]	; (80052a4 <_Z6scriptv+0x2ec>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2b02      	cmp	r3, #2
 8005034:	d10a      	bne.n	800504c <_Z6scriptv+0x94>
			script_wheel(20,0,0);
 8005036:	ed9f 2b98 	vldr	d2, [pc, #608]	; 8005298 <_Z6scriptv+0x2e0>
 800503a:	ed9f 1b97 	vldr	d1, [pc, #604]	; 8005298 <_Z6scriptv+0x2e0>
 800503e:	eeb3 0b04 	vmov.f64	d0, #52	; 0x41a00000  20.0
 8005042:	f000 f9ad 	bl	80053a0 <_Z12script_wheelddd>
			delay_start = 3;
 8005046:	4b97      	ldr	r3, [pc, #604]	; (80052a4 <_Z6scriptv+0x2ec>)
 8005048:	2203      	movs	r2, #3
 800504a:	601a      	str	r2, [r3, #0]
		}
		if(delay == 850 && delay_start == 3){
 800504c:	4b96      	ldr	r3, [pc, #600]	; (80052a8 <_Z6scriptv+0x2f0>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f240 3252 	movw	r2, #850	; 0x352
 8005054:	4293      	cmp	r3, r2
 8005056:	d114      	bne.n	8005082 <_Z6scriptv+0xca>
 8005058:	4b92      	ldr	r3, [pc, #584]	; (80052a4 <_Z6scriptv+0x2ec>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2b03      	cmp	r3, #3
 800505e:	d110      	bne.n	8005082 <_Z6scriptv+0xca>
			script_wheel(0,0,0);
 8005060:	ed9f 2b8d 	vldr	d2, [pc, #564]	; 8005298 <_Z6scriptv+0x2e0>
 8005064:	ed9f 1b8c 	vldr	d1, [pc, #560]	; 8005298 <_Z6scriptv+0x2e0>
 8005068:	ed9f 0b8b 	vldr	d0, [pc, #556]	; 8005298 <_Z6scriptv+0x2e0>
 800506c:	f000 f998 	bl	80053a0 <_Z12script_wheelddd>
			script_pusher(-2,13);
 8005070:	eeb2 1b0a 	vmov.f64	d1, #42	; 0x41500000  13.0
 8005074:	eeb8 0b00 	vmov.f64	d0, #128	; 0xc0000000 -2.0
 8005078:	f7fc ffc6 	bl	8002008 <_Z13script_pusherdd>
			delay_start = 4;
 800507c:	4b89      	ldr	r3, [pc, #548]	; (80052a4 <_Z6scriptv+0x2ec>)
 800507e:	2204      	movs	r2, #4
 8005080:	601a      	str	r2, [r3, #0]
		}
		if(delay == 1100 && delay_start == 4){
 8005082:	4b89      	ldr	r3, [pc, #548]	; (80052a8 <_Z6scriptv+0x2f0>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f240 424c 	movw	r2, #1100	; 0x44c
 800508a:	4293      	cmp	r3, r2
 800508c:	d114      	bne.n	80050b8 <_Z6scriptv+0x100>
 800508e:	4b85      	ldr	r3, [pc, #532]	; (80052a4 <_Z6scriptv+0x2ec>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2b04      	cmp	r3, #4
 8005094:	d110      	bne.n	80050b8 <_Z6scriptv+0x100>
			script_wheel(20,0,0);
 8005096:	ed9f 2b80 	vldr	d2, [pc, #512]	; 8005298 <_Z6scriptv+0x2e0>
 800509a:	ed9f 1b7f 	vldr	d1, [pc, #508]	; 8005298 <_Z6scriptv+0x2e0>
 800509e:	eeb3 0b04 	vmov.f64	d0, #52	; 0x41a00000  20.0
 80050a2:	f000 f97d 	bl	80053a0 <_Z12script_wheelddd>
			script_pusher(-2,13);
 80050a6:	eeb2 1b0a 	vmov.f64	d1, #42	; 0x41500000  13.0
 80050aa:	eeb8 0b00 	vmov.f64	d0, #128	; 0xc0000000 -2.0
 80050ae:	f7fc ffab 	bl	8002008 <_Z13script_pusherdd>
			delay_start = 5;
 80050b2:	4b7c      	ldr	r3, [pc, #496]	; (80052a4 <_Z6scriptv+0x2ec>)
 80050b4:	2205      	movs	r2, #5
 80050b6:	601a      	str	r2, [r3, #0]
		}
		if(delay == 1200 && delay_start == 5){/*-50*/
 80050b8:	4b7b      	ldr	r3, [pc, #492]	; (80052a8 <_Z6scriptv+0x2f0>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80050c0:	d10e      	bne.n	80050e0 <_Z6scriptv+0x128>
 80050c2:	4b78      	ldr	r3, [pc, #480]	; (80052a4 <_Z6scriptv+0x2ec>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2b05      	cmp	r3, #5
 80050c8:	d10a      	bne.n	80050e0 <_Z6scriptv+0x128>
//			script_pusher(-2,10);
			script_wheel(30,0,0);
 80050ca:	ed9f 2b73 	vldr	d2, [pc, #460]	; 8005298 <_Z6scriptv+0x2e0>
 80050ce:	ed9f 1b72 	vldr	d1, [pc, #456]	; 8005298 <_Z6scriptv+0x2e0>
 80050d2:	eeb3 0b0e 	vmov.f64	d0, #62	; 0x41f00000  30.0
 80050d6:	f000 f963 	bl	80053a0 <_Z12script_wheelddd>
			delay_start = 6;
 80050da:	4b72      	ldr	r3, [pc, #456]	; (80052a4 <_Z6scriptv+0x2ec>)
 80050dc:	2206      	movs	r2, #6
 80050de:	601a      	str	r2, [r3, #0]
		}
		if(delay == 1400 && delay_start == 6){/*-50*/
 80050e0:	4b71      	ldr	r3, [pc, #452]	; (80052a8 <_Z6scriptv+0x2f0>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80050e8:	d114      	bne.n	8005114 <_Z6scriptv+0x15c>
 80050ea:	4b6e      	ldr	r3, [pc, #440]	; (80052a4 <_Z6scriptv+0x2ec>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2b06      	cmp	r3, #6
 80050f0:	d110      	bne.n	8005114 <_Z6scriptv+0x15c>
			script_wheel(10,0,0);
 80050f2:	ed9f 2b69 	vldr	d2, [pc, #420]	; 8005298 <_Z6scriptv+0x2e0>
 80050f6:	ed9f 1b68 	vldr	d1, [pc, #416]	; 8005298 <_Z6scriptv+0x2e0>
 80050fa:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 80050fe:	f000 f94f 	bl	80053a0 <_Z12script_wheelddd>
			script_pusher(13,-2);
 8005102:	eeb8 1b00 	vmov.f64	d1, #128	; 0xc0000000 -2.0
 8005106:	eeb2 0b0a 	vmov.f64	d0, #42	; 0x41500000  13.0
 800510a:	f7fc ff7d 	bl	8002008 <_Z13script_pusherdd>
			delay_start = 7;
 800510e:	4b65      	ldr	r3, [pc, #404]	; (80052a4 <_Z6scriptv+0x2ec>)
 8005110:	2207      	movs	r2, #7
 8005112:	601a      	str	r2, [r3, #0]
		}
		if(delay == 1700 && delay_start == 7){
 8005114:	4b64      	ldr	r3, [pc, #400]	; (80052a8 <_Z6scriptv+0x2f0>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800511c:	4293      	cmp	r3, r2
 800511e:	d10e      	bne.n	800513e <_Z6scriptv+0x186>
 8005120:	4b60      	ldr	r3, [pc, #384]	; (80052a4 <_Z6scriptv+0x2ec>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2b07      	cmp	r3, #7
 8005126:	d10a      	bne.n	800513e <_Z6scriptv+0x186>
			script_wheel(15,0,0);
 8005128:	ed9f 2b5b 	vldr	d2, [pc, #364]	; 8005298 <_Z6scriptv+0x2e0>
 800512c:	ed9f 1b5a 	vldr	d1, [pc, #360]	; 8005298 <_Z6scriptv+0x2e0>
 8005130:	eeb2 0b0e 	vmov.f64	d0, #46	; 0x41700000  15.0
 8005134:	f000 f934 	bl	80053a0 <_Z12script_wheelddd>
//			script_pusher(12,0);
			delay_start = 8;
 8005138:	4b5a      	ldr	r3, [pc, #360]	; (80052a4 <_Z6scriptv+0x2ec>)
 800513a:	2208      	movs	r2, #8
 800513c:	601a      	str	r2, [r3, #0]
		}
		if(delay == 2000 && delay_start == 8){
 800513e:	4b5a      	ldr	r3, [pc, #360]	; (80052a8 <_Z6scriptv+0x2f0>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005146:	d114      	bne.n	8005172 <_Z6scriptv+0x1ba>
 8005148:	4b56      	ldr	r3, [pc, #344]	; (80052a4 <_Z6scriptv+0x2ec>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2b08      	cmp	r3, #8
 800514e:	d110      	bne.n	8005172 <_Z6scriptv+0x1ba>
			script_wheel(0,0,0);
 8005150:	ed9f 2b51 	vldr	d2, [pc, #324]	; 8005298 <_Z6scriptv+0x2e0>
 8005154:	ed9f 1b50 	vldr	d1, [pc, #320]	; 8005298 <_Z6scriptv+0x2e0>
 8005158:	ed9f 0b4f 	vldr	d0, [pc, #316]	; 8005298 <_Z6scriptv+0x2e0>
 800515c:	f000 f920 	bl	80053a0 <_Z12script_wheelddd>
			script_pusher(-2,11);
 8005160:	eeb2 1b06 	vmov.f64	d1, #38	; 0x41300000  11.0
 8005164:	eeb8 0b00 	vmov.f64	d0, #128	; 0xc0000000 -2.0
 8005168:	f7fc ff4e 	bl	8002008 <_Z13script_pusherdd>
			delay_start = 9;
 800516c:	4b4d      	ldr	r3, [pc, #308]	; (80052a4 <_Z6scriptv+0x2ec>)
 800516e:	2209      	movs	r2, #9
 8005170:	601a      	str	r2, [r3, #0]
//		if(delay == 2000 && delay_start == 8){
//			script_wheel(0,0,0);
//			script_pusher(-2,10);
//			delay_start = 9;
//		}
		if(delay == 2500 && delay_start == 9){
 8005172:	4b4d      	ldr	r3, [pc, #308]	; (80052a8 <_Z6scriptv+0x2f0>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800517a:	4293      	cmp	r3, r2
 800517c:	d10e      	bne.n	800519c <_Z6scriptv+0x1e4>
 800517e:	4b49      	ldr	r3, [pc, #292]	; (80052a4 <_Z6scriptv+0x2ec>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2b09      	cmp	r3, #9
 8005184:	d10a      	bne.n	800519c <_Z6scriptv+0x1e4>
			script_wheel(15,0,0);
 8005186:	ed9f 2b44 	vldr	d2, [pc, #272]	; 8005298 <_Z6scriptv+0x2e0>
 800518a:	ed9f 1b43 	vldr	d1, [pc, #268]	; 8005298 <_Z6scriptv+0x2e0>
 800518e:	eeb2 0b0e 	vmov.f64	d0, #46	; 0x41700000  15.0
 8005192:	f000 f905 	bl	80053a0 <_Z12script_wheelddd>
			delay_start = 10;
 8005196:	4b43      	ldr	r3, [pc, #268]	; (80052a4 <_Z6scriptv+0x2ec>)
 8005198:	220a      	movs	r2, #10
 800519a:	601a      	str	r2, [r3, #0]
		}
		if(delay == 2900 && delay_start == 10){
 800519c:	4b42      	ldr	r3, [pc, #264]	; (80052a8 <_Z6scriptv+0x2f0>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f640 3254 	movw	r2, #2900	; 0xb54
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d11d      	bne.n	80051e4 <_Z6scriptv+0x22c>
 80051a8:	4b3e      	ldr	r3, [pc, #248]	; (80052a4 <_Z6scriptv+0x2ec>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2b0a      	cmp	r3, #10
 80051ae:	d119      	bne.n	80051e4 <_Z6scriptv+0x22c>
			script_wheel(0,0,0);
 80051b0:	ed9f 2b39 	vldr	d2, [pc, #228]	; 8005298 <_Z6scriptv+0x2e0>
 80051b4:	ed9f 1b38 	vldr	d1, [pc, #224]	; 8005298 <_Z6scriptv+0x2e0>
 80051b8:	ed9f 0b37 	vldr	d0, [pc, #220]	; 8005298 <_Z6scriptv+0x2e0>
 80051bc:	f000 f8f0 	bl	80053a0 <_Z12script_wheelddd>
			script_pusher(-2,15);
 80051c0:	eeb2 1b0e 	vmov.f64	d1, #46	; 0x41700000  15.0
 80051c4:	eeb8 0b00 	vmov.f64	d0, #128	; 0xc0000000 -2.0
 80051c8:	f7fc ff1e 	bl	8002008 <_Z13script_pusherdd>
			delay_start = 0;
 80051cc:	4b35      	ldr	r3, [pc, #212]	; (80052a4 <_Z6scriptv+0x2ec>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	601a      	str	r2, [r3, #0]
			script_a.scriptrun = 0;
 80051d2:	4b33      	ldr	r3, [pc, #204]	; (80052a0 <_Z6scriptv+0x2e8>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	601a      	str	r2, [r3, #0]
			delay = 0;
 80051d8:	4b33      	ldr	r3, [pc, #204]	; (80052a8 <_Z6scriptv+0x2f0>)
 80051da:	2200      	movs	r2, #0
 80051dc:	601a      	str	r2, [r3, #0]
			everRun =1;
 80051de:	4b33      	ldr	r3, [pc, #204]	; (80052ac <_Z6scriptv+0x2f4>)
 80051e0:	2201      	movs	r2, #1
 80051e2:	601a      	str	r2, [r3, #0]
		}
	}
	if(script_b.scriptrun == 1){
 80051e4:	4b32      	ldr	r3, [pc, #200]	; (80052b0 <_Z6scriptv+0x2f8>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	f040 80cb 	bne.w	8005384 <_Z6scriptv+0x3cc>
		if(delay_start_2 == 0){
 80051ee:	4b31      	ldr	r3, [pc, #196]	; (80052b4 <_Z6scriptv+0x2fc>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d11e      	bne.n	8005234 <_Z6scriptv+0x27c>
			script_pusher(3,12);
 80051f6:	eeb2 1b08 	vmov.f64	d1, #40	; 0x41400000  12.0
 80051fa:	eeb0 0b08 	vmov.f64	d0, #8	; 0x40400000  3.0
 80051fe:	f7fc ff03 	bl	8002008 <_Z13script_pusherdd>
			script_wheel(10,0,0);
 8005202:	ed9f 2b25 	vldr	d2, [pc, #148]	; 8005298 <_Z6scriptv+0x2e0>
 8005206:	ed9f 1b24 	vldr	d1, [pc, #144]	; 8005298 <_Z6scriptv+0x2e0>
 800520a:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 800520e:	f000 f8c7 	bl	80053a0 <_Z12script_wheelddd>
			UART_Send_SetMotorPosition(3, 1650, 500);
 8005212:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005216:	f240 6172 	movw	r1, #1650	; 0x672
 800521a:	2003      	movs	r0, #3
 800521c:	f000 f900 	bl	8005420 <_Z26UART_Send_SetMotorPositionttt>
			UART_Send_SetMotorPosition(1, 850, 500);
 8005220:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005224:	f240 3152 	movw	r1, #850	; 0x352
 8005228:	2001      	movs	r0, #1
 800522a:	f000 f8f9 	bl	8005420 <_Z26UART_Send_SetMotorPositionttt>
			delay_start_2 =1;
 800522e:	4b21      	ldr	r3, [pc, #132]	; (80052b4 <_Z6scriptv+0x2fc>)
 8005230:	2201      	movs	r2, #1
 8005232:	601a      	str	r2, [r3, #0]
		}
		if(delay_2 == 550 && delay_start_2 == 1){
 8005234:	4b20      	ldr	r3, [pc, #128]	; (80052b8 <_Z6scriptv+0x300>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f240 2226 	movw	r2, #550	; 0x226
 800523c:	4293      	cmp	r3, r2
 800523e:	d122      	bne.n	8005286 <_Z6scriptv+0x2ce>
 8005240:	4b1c      	ldr	r3, [pc, #112]	; (80052b4 <_Z6scriptv+0x2fc>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d11e      	bne.n	8005286 <_Z6scriptv+0x2ce>
			script_pusher(-2,12);
 8005248:	eeb2 1b08 	vmov.f64	d1, #40	; 0x41400000  12.0
 800524c:	eeb8 0b00 	vmov.f64	d0, #128	; 0xc0000000 -2.0
 8005250:	f7fc feda 	bl	8002008 <_Z13script_pusherdd>
			UART_Send_SetMotorPosition(1, 1300, 1500);
 8005254:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005258:	f240 5114 	movw	r1, #1300	; 0x514
 800525c:	2001      	movs	r0, #1
 800525e:	f000 f8df 	bl	8005420 <_Z26UART_Send_SetMotorPositionttt>
			UART_Send_SetMotorPosition(3, 1200, 1500);
 8005262:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005266:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800526a:	2003      	movs	r0, #3
 800526c:	f000 f8d8 	bl	8005420 <_Z26UART_Send_SetMotorPositionttt>
			script_wheel(0,0,0);
 8005270:	ed9f 2b09 	vldr	d2, [pc, #36]	; 8005298 <_Z6scriptv+0x2e0>
 8005274:	ed9f 1b08 	vldr	d1, [pc, #32]	; 8005298 <_Z6scriptv+0x2e0>
 8005278:	ed9f 0b07 	vldr	d0, [pc, #28]	; 8005298 <_Z6scriptv+0x2e0>
 800527c:	f000 f890 	bl	80053a0 <_Z12script_wheelddd>
			delay_start_2 =2;
 8005280:	4b0c      	ldr	r3, [pc, #48]	; (80052b4 <_Z6scriptv+0x2fc>)
 8005282:	2202      	movs	r2, #2
 8005284:	601a      	str	r2, [r3, #0]
		}
		if(delay_2 == 750 && delay_start_2 == 2){
 8005286:	4b0c      	ldr	r3, [pc, #48]	; (80052b8 <_Z6scriptv+0x300>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f240 22ee 	movw	r2, #750	; 0x2ee
 800528e:	4293      	cmp	r3, r2
 8005290:	d137      	bne.n	8005302 <_Z6scriptv+0x34a>
 8005292:	e013      	b.n	80052bc <_Z6scriptv+0x304>
 8005294:	f3af 8000 	nop.w
	...
 80052a0:	24002008 	.word	0x24002008
 80052a4:	240002b0 	.word	0x240002b0
 80052a8:	240002b4 	.word	0x240002b4
 80052ac:	24002010 	.word	0x24002010
 80052b0:	2400200c 	.word	0x2400200c
 80052b4:	240002b8 	.word	0x240002b8
 80052b8:	240002bc 	.word	0x240002bc
 80052bc:	4b34      	ldr	r3, [pc, #208]	; (8005390 <_Z6scriptv+0x3d8>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d11e      	bne.n	8005302 <_Z6scriptv+0x34a>
			script_pusher(-2,12);
 80052c4:	eeb2 1b08 	vmov.f64	d1, #40	; 0x41400000  12.0
 80052c8:	eeb8 0b00 	vmov.f64	d0, #128	; 0xc0000000 -2.0
 80052cc:	f7fc fe9c 	bl	8002008 <_Z13script_pusherdd>
			UART_Send_SetMotorPosition(1, 1300, 1500);
 80052d0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80052d4:	f240 5114 	movw	r1, #1300	; 0x514
 80052d8:	2001      	movs	r0, #1
 80052da:	f000 f8a1 	bl	8005420 <_Z26UART_Send_SetMotorPositionttt>
			UART_Send_SetMotorPosition(3, 1200, 1500);
 80052de:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80052e2:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80052e6:	2003      	movs	r0, #3
 80052e8:	f000 f89a 	bl	8005420 <_Z26UART_Send_SetMotorPositionttt>
			script_wheel(2,0,0);
 80052ec:	ed9f 2b26 	vldr	d2, [pc, #152]	; 8005388 <_Z6scriptv+0x3d0>
 80052f0:	ed9f 1b25 	vldr	d1, [pc, #148]	; 8005388 <_Z6scriptv+0x3d0>
 80052f4:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80052f8:	f000 f852 	bl	80053a0 <_Z12script_wheelddd>
			delay_start_2 =3;
 80052fc:	4b24      	ldr	r3, [pc, #144]	; (8005390 <_Z6scriptv+0x3d8>)
 80052fe:	2203      	movs	r2, #3
 8005300:	601a      	str	r2, [r3, #0]
		}
		if(delay_2 == 1500 && delay_start_2 == 3){
 8005302:	4b24      	ldr	r3, [pc, #144]	; (8005394 <_Z6scriptv+0x3dc>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800530a:	4293      	cmp	r3, r2
 800530c:	d10e      	bne.n	800532c <_Z6scriptv+0x374>
 800530e:	4b20      	ldr	r3, [pc, #128]	; (8005390 <_Z6scriptv+0x3d8>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2b03      	cmp	r3, #3
 8005314:	d10a      	bne.n	800532c <_Z6scriptv+0x374>
//			UART_Send_SetMotorPosition(1, 1300, 300);
			script_wheel(10,0,0);
 8005316:	ed9f 2b1c 	vldr	d2, [pc, #112]	; 8005388 <_Z6scriptv+0x3d0>
 800531a:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8005388 <_Z6scriptv+0x3d0>
 800531e:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8005322:	f000 f83d 	bl	80053a0 <_Z12script_wheelddd>
//			script_pusher(-2,12);
			delay_start_2 =4;
 8005326:	4b1a      	ldr	r3, [pc, #104]	; (8005390 <_Z6scriptv+0x3d8>)
 8005328:	2204      	movs	r2, #4
 800532a:	601a      	str	r2, [r3, #0]
		}
		if(delay_2 == 2100 && delay_start_2 == 4){
 800532c:	4b19      	ldr	r3, [pc, #100]	; (8005394 <_Z6scriptv+0x3dc>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f640 0234 	movw	r2, #2100	; 0x834
 8005334:	4293      	cmp	r3, r2
 8005336:	d125      	bne.n	8005384 <_Z6scriptv+0x3cc>
 8005338:	4b15      	ldr	r3, [pc, #84]	; (8005390 <_Z6scriptv+0x3d8>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2b04      	cmp	r3, #4
 800533e:	d121      	bne.n	8005384 <_Z6scriptv+0x3cc>
			UART_Send_SetMotorPosition(1, 1400, 500);
 8005340:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005344:	f44f 61af 	mov.w	r1, #1400	; 0x578
 8005348:	2001      	movs	r0, #1
 800534a:	f000 f869 	bl	8005420 <_Z26UART_Send_SetMotorPositionttt>
			UART_Send_SetMotorPosition(3, 1100, 500);
 800534e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005352:	f240 414c 	movw	r1, #1100	; 0x44c
 8005356:	2003      	movs	r0, #3
 8005358:	f000 f862 	bl	8005420 <_Z26UART_Send_SetMotorPositionttt>
			script_wheel(0,0,0);
 800535c:	ed9f 2b0a 	vldr	d2, [pc, #40]	; 8005388 <_Z6scriptv+0x3d0>
 8005360:	ed9f 1b09 	vldr	d1, [pc, #36]	; 8005388 <_Z6scriptv+0x3d0>
 8005364:	ed9f 0b08 	vldr	d0, [pc, #32]	; 8005388 <_Z6scriptv+0x3d0>
 8005368:	f000 f81a 	bl	80053a0 <_Z12script_wheelddd>
			delay_start_2 =0;
 800536c:	4b08      	ldr	r3, [pc, #32]	; (8005390 <_Z6scriptv+0x3d8>)
 800536e:	2200      	movs	r2, #0
 8005370:	601a      	str	r2, [r3, #0]
			script_b.scriptrun =0;
 8005372:	4b09      	ldr	r3, [pc, #36]	; (8005398 <_Z6scriptv+0x3e0>)
 8005374:	2200      	movs	r2, #0
 8005376:	601a      	str	r2, [r3, #0]
			delay_2 = 0;
 8005378:	4b06      	ldr	r3, [pc, #24]	; (8005394 <_Z6scriptv+0x3dc>)
 800537a:	2200      	movs	r2, #0
 800537c:	601a      	str	r2, [r3, #0]
			everRun2 = 1;
 800537e:	4b07      	ldr	r3, [pc, #28]	; (800539c <_Z6scriptv+0x3e4>)
 8005380:	2201      	movs	r2, #1
 8005382:	601a      	str	r2, [r3, #0]
		}
	}

}
 8005384:	bf00      	nop
 8005386:	bd80      	pop	{r7, pc}
	...
 8005390:	240002b8 	.word	0x240002b8
 8005394:	240002bc 	.word	0x240002bc
 8005398:	2400200c 	.word	0x2400200c
 800539c:	24002014 	.word	0x24002014

080053a0 <_Z12script_wheelddd>:
void script_wheel(double s_Vx,double s_Vy,double s_w){
 80053a0:	b480      	push	{r7}
 80053a2:	b087      	sub	sp, #28
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	ed87 0b04 	vstr	d0, [r7, #16]
 80053aa:	ed87 1b02 	vstr	d1, [r7, #8]
 80053ae:	ed87 2b00 	vstr	d2, [r7]
	Vx = s_Vx;
 80053b2:	490a      	ldr	r1, [pc, #40]	; (80053dc <_Z12script_wheelddd+0x3c>)
 80053b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80053b8:	e9c1 2300 	strd	r2, r3, [r1]
	Vy = s_Vy;
 80053bc:	4908      	ldr	r1, [pc, #32]	; (80053e0 <_Z12script_wheelddd+0x40>)
 80053be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053c2:	e9c1 2300 	strd	r2, r3, [r1]
	W = s_w;
 80053c6:	4907      	ldr	r1, [pc, #28]	; (80053e4 <_Z12script_wheelddd+0x44>)
 80053c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053cc:	e9c1 2300 	strd	r2, r3, [r1]
}
 80053d0:	bf00      	nop
 80053d2:	371c      	adds	r7, #28
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr
 80053dc:	24000978 	.word	0x24000978
 80053e0:	24000980 	.word	0x24000980
 80053e4:	24000988 	.word	0x24000988

080053e8 <_Z9UART_Sendh>:
 */
#include "servo.h"
#include"math.h"
extern UART_HandleTypeDef huart3;
int Checksum_Calc, count=0;
void UART_Send(uint8_t u8_data){
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	4603      	mov	r3, r0
 80053f0:	71fb      	strb	r3, [r7, #7]
	uint8_t *u8_pointer = &u8_data;
 80053f2:	1dfb      	adds	r3, r7, #7
 80053f4:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart3, u8_pointer, 1,100);
 80053f6:	2364      	movs	r3, #100	; 0x64
 80053f8:	2201      	movs	r2, #1
 80053fa:	68f9      	ldr	r1, [r7, #12]
 80053fc:	4806      	ldr	r0, [pc, #24]	; (8005418 <_Z9UART_Sendh+0x30>)
 80053fe:	f008 fd14 	bl	800de2a <HAL_UART_Transmit>

	Checksum_Calc += u8_data;
 8005402:	79fb      	ldrb	r3, [r7, #7]
 8005404:	461a      	mov	r2, r3
 8005406:	4b05      	ldr	r3, [pc, #20]	; (800541c <_Z9UART_Sendh+0x34>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4413      	add	r3, r2
 800540c:	4a03      	ldr	r2, [pc, #12]	; (800541c <_Z9UART_Sendh+0x34>)
 800540e:	6013      	str	r3, [r2, #0]
}
 8005410:	bf00      	nop
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	240007e8 	.word	0x240007e8
 800541c:	24002018 	.word	0x24002018

08005420 <_Z26UART_Send_SetMotorPositionttt>:

void UART_Send_SetMotorPosition(uint16_t motorId, uint16_t Position, uint16_t Time){
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	4603      	mov	r3, r0
 8005428:	80fb      	strh	r3, [r7, #6]
 800542a:	460b      	mov	r3, r1
 800542c:	80bb      	strh	r3, [r7, #4]
 800542e:	4613      	mov	r3, r2
 8005430:	807b      	strh	r3, [r7, #2]
	Checksum_Calc = 0;
 8005432:	4b1c      	ldr	r3, [pc, #112]	; (80054a4 <_Z26UART_Send_SetMotorPositionttt+0x84>)
 8005434:	2200      	movs	r2, #0
 8005436:	601a      	str	r2, [r3, #0]
	UART_Send(0x80 + motorId);
 8005438:	88fb      	ldrh	r3, [r7, #6]
 800543a:	b2db      	uxtb	r3, r3
 800543c:	3b80      	subs	r3, #128	; 0x80
 800543e:	b2db      	uxtb	r3, r3
 8005440:	4618      	mov	r0, r3
 8005442:	f7ff ffd1 	bl	80053e8 <_Z9UART_Sendh>
	UART_Send(0x83);
 8005446:	2083      	movs	r0, #131	; 0x83
 8005448:	f7ff ffce 	bl	80053e8 <_Z9UART_Sendh>
	UART_Send(0x05);
 800544c:	2005      	movs	r0, #5
 800544e:	f7ff ffcb 	bl	80053e8 <_Z9UART_Sendh>
	UART_Send((Position / 256)& 0x7F);
 8005452:	88bb      	ldrh	r3, [r7, #4]
 8005454:	0a1b      	lsrs	r3, r3, #8
 8005456:	b29b      	uxth	r3, r3
 8005458:	b2db      	uxtb	r3, r3
 800545a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800545e:	b2db      	uxtb	r3, r3
 8005460:	4618      	mov	r0, r3
 8005462:	f7ff ffc1 	bl	80053e8 <_Z9UART_Sendh>
	UART_Send(Position % 256);
 8005466:	88bb      	ldrh	r3, [r7, #4]
 8005468:	b2db      	uxtb	r3, r3
 800546a:	4618      	mov	r0, r3
 800546c:	f7ff ffbc 	bl	80053e8 <_Z9UART_Sendh>
	UART_Send((Time / 256)& 0x7F);
 8005470:	887b      	ldrh	r3, [r7, #2]
 8005472:	0a1b      	lsrs	r3, r3, #8
 8005474:	b29b      	uxth	r3, r3
 8005476:	b2db      	uxtb	r3, r3
 8005478:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800547c:	b2db      	uxtb	r3, r3
 800547e:	4618      	mov	r0, r3
 8005480:	f7ff ffb2 	bl	80053e8 <_Z9UART_Sendh>
	UART_Send(Time % 256);
 8005484:	887b      	ldrh	r3, [r7, #2]
 8005486:	b2db      	uxtb	r3, r3
 8005488:	4618      	mov	r0, r3
 800548a:	f7ff ffad 	bl	80053e8 <_Z9UART_Sendh>
	UART_Send(Checksum_Calc);
 800548e:	4b05      	ldr	r3, [pc, #20]	; (80054a4 <_Z26UART_Send_SetMotorPositionttt+0x84>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	b2db      	uxtb	r3, r3
 8005494:	4618      	mov	r0, r3
 8005496:	f7ff ffa7 	bl	80053e8 <_Z9UART_Sendh>
}
 800549a:	bf00      	nop
 800549c:	3708      	adds	r7, #8
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	24002018 	.word	0x24002018

080054a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054ae:	4b0a      	ldr	r3, [pc, #40]	; (80054d8 <HAL_MspInit+0x30>)
 80054b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80054b4:	4a08      	ldr	r2, [pc, #32]	; (80054d8 <HAL_MspInit+0x30>)
 80054b6:	f043 0302 	orr.w	r3, r3, #2
 80054ba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80054be:	4b06      	ldr	r3, [pc, #24]	; (80054d8 <HAL_MspInit+0x30>)
 80054c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	607b      	str	r3, [r7, #4]
 80054ca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr
 80054d8:	58024400 	.word	0x58024400

080054dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b086      	sub	sp, #24
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a43      	ldr	r2, [pc, #268]	; (80055f8 <HAL_TIM_Base_MspInit+0x11c>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d12f      	bne.n	800554e <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80054ee:	4b43      	ldr	r3, [pc, #268]	; (80055fc <HAL_TIM_Base_MspInit+0x120>)
 80054f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054f4:	4a41      	ldr	r2, [pc, #260]	; (80055fc <HAL_TIM_Base_MspInit+0x120>)
 80054f6:	f043 0301 	orr.w	r3, r3, #1
 80054fa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80054fe:	4b3f      	ldr	r3, [pc, #252]	; (80055fc <HAL_TIM_Base_MspInit+0x120>)
 8005500:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	617b      	str	r3, [r7, #20]
 800550a:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 800550c:	2200      	movs	r2, #0
 800550e:	2100      	movs	r1, #0
 8005510:	2018      	movs	r0, #24
 8005512:	f000 ff10 	bl	8006336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8005516:	2018      	movs	r0, #24
 8005518:	f000 ff27 	bl	800636a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800551c:	2200      	movs	r2, #0
 800551e:	2100      	movs	r1, #0
 8005520:	2019      	movs	r0, #25
 8005522:	f000 ff08 	bl	8006336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8005526:	2019      	movs	r0, #25
 8005528:	f000 ff1f 	bl	800636a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800552c:	2200      	movs	r2, #0
 800552e:	2100      	movs	r1, #0
 8005530:	201a      	movs	r0, #26
 8005532:	f000 ff00 	bl	8006336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8005536:	201a      	movs	r0, #26
 8005538:	f000 ff17 	bl	800636a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800553c:	2200      	movs	r2, #0
 800553e:	2100      	movs	r1, #0
 8005540:	201b      	movs	r0, #27
 8005542:	f000 fef8 	bl	8006336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8005546:	201b      	movs	r0, #27
 8005548:	f000 ff0f 	bl	800636a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }

}
 800554c:	e050      	b.n	80055f0 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM8)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a2b      	ldr	r2, [pc, #172]	; (8005600 <HAL_TIM_Base_MspInit+0x124>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d12f      	bne.n	80055b8 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005558:	4b28      	ldr	r3, [pc, #160]	; (80055fc <HAL_TIM_Base_MspInit+0x120>)
 800555a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800555e:	4a27      	ldr	r2, [pc, #156]	; (80055fc <HAL_TIM_Base_MspInit+0x120>)
 8005560:	f043 0302 	orr.w	r3, r3, #2
 8005564:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005568:	4b24      	ldr	r3, [pc, #144]	; (80055fc <HAL_TIM_Base_MspInit+0x120>)
 800556a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	613b      	str	r3, [r7, #16]
 8005574:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8005576:	2200      	movs	r2, #0
 8005578:	2100      	movs	r1, #0
 800557a:	202b      	movs	r0, #43	; 0x2b
 800557c:	f000 fedb 	bl	8006336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8005580:	202b      	movs	r0, #43	; 0x2b
 8005582:	f000 fef2 	bl	800636a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005586:	2200      	movs	r2, #0
 8005588:	2100      	movs	r1, #0
 800558a:	202c      	movs	r0, #44	; 0x2c
 800558c:	f000 fed3 	bl	8006336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005590:	202c      	movs	r0, #44	; 0x2c
 8005592:	f000 feea 	bl	800636a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8005596:	2200      	movs	r2, #0
 8005598:	2100      	movs	r1, #0
 800559a:	202d      	movs	r0, #45	; 0x2d
 800559c:	f000 fecb 	bl	8006336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80055a0:	202d      	movs	r0, #45	; 0x2d
 80055a2:	f000 fee2 	bl	800636a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 80055a6:	2200      	movs	r2, #0
 80055a8:	2100      	movs	r1, #0
 80055aa:	202e      	movs	r0, #46	; 0x2e
 80055ac:	f000 fec3 	bl	8006336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80055b0:	202e      	movs	r0, #46	; 0x2e
 80055b2:	f000 feda 	bl	800636a <HAL_NVIC_EnableIRQ>
}
 80055b6:	e01b      	b.n	80055f0 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM23)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a11      	ldr	r2, [pc, #68]	; (8005604 <HAL_TIM_Base_MspInit+0x128>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d116      	bne.n	80055f0 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM23_CLK_ENABLE();
 80055c2:	4b0e      	ldr	r3, [pc, #56]	; (80055fc <HAL_TIM_Base_MspInit+0x120>)
 80055c4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80055c8:	4a0c      	ldr	r2, [pc, #48]	; (80055fc <HAL_TIM_Base_MspInit+0x120>)
 80055ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055ce:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80055d2:	4b0a      	ldr	r3, [pc, #40]	; (80055fc <HAL_TIM_Base_MspInit+0x120>)
 80055d4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80055d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055dc:	60fb      	str	r3, [r7, #12]
 80055de:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM23_IRQn, 0, 0);
 80055e0:	2200      	movs	r2, #0
 80055e2:	2100      	movs	r1, #0
 80055e4:	20a1      	movs	r0, #161	; 0xa1
 80055e6:	f000 fea6 	bl	8006336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM23_IRQn);
 80055ea:	20a1      	movs	r0, #161	; 0xa1
 80055ec:	f000 febd 	bl	800636a <HAL_NVIC_EnableIRQ>
}
 80055f0:	bf00      	nop
 80055f2:	3718      	adds	r7, #24
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	40010000 	.word	0x40010000
 80055fc:	58024400 	.word	0x58024400
 8005600:	40010400 	.word	0x40010400
 8005604:	4000e000 	.word	0x4000e000

08005608 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b090      	sub	sp, #64	; 0x40
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005610:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005614:	2200      	movs	r2, #0
 8005616:	601a      	str	r2, [r3, #0]
 8005618:	605a      	str	r2, [r3, #4]
 800561a:	609a      	str	r2, [r3, #8]
 800561c:	60da      	str	r2, [r3, #12]
 800561e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005628:	d14e      	bne.n	80056c8 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800562a:	4b77      	ldr	r3, [pc, #476]	; (8005808 <HAL_TIM_Encoder_MspInit+0x200>)
 800562c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005630:	4a75      	ldr	r2, [pc, #468]	; (8005808 <HAL_TIM_Encoder_MspInit+0x200>)
 8005632:	f043 0301 	orr.w	r3, r3, #1
 8005636:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800563a:	4b73      	ldr	r3, [pc, #460]	; (8005808 <HAL_TIM_Encoder_MspInit+0x200>)
 800563c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005640:	f003 0301 	and.w	r3, r3, #1
 8005644:	62bb      	str	r3, [r7, #40]	; 0x28
 8005646:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005648:	4b6f      	ldr	r3, [pc, #444]	; (8005808 <HAL_TIM_Encoder_MspInit+0x200>)
 800564a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800564e:	4a6e      	ldr	r2, [pc, #440]	; (8005808 <HAL_TIM_Encoder_MspInit+0x200>)
 8005650:	f043 0301 	orr.w	r3, r3, #1
 8005654:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005658:	4b6b      	ldr	r3, [pc, #428]	; (8005808 <HAL_TIM_Encoder_MspInit+0x200>)
 800565a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800565e:	f003 0301 	and.w	r3, r3, #1
 8005662:	627b      	str	r3, [r7, #36]	; 0x24
 8005664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005666:	4b68      	ldr	r3, [pc, #416]	; (8005808 <HAL_TIM_Encoder_MspInit+0x200>)
 8005668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800566c:	4a66      	ldr	r2, [pc, #408]	; (8005808 <HAL_TIM_Encoder_MspInit+0x200>)
 800566e:	f043 0302 	orr.w	r3, r3, #2
 8005672:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005676:	4b64      	ldr	r3, [pc, #400]	; (8005808 <HAL_TIM_Encoder_MspInit+0x200>)
 8005678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800567c:	f003 0302 	and.w	r3, r3, #2
 8005680:	623b      	str	r3, [r7, #32]
 8005682:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005684:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005688:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800568a:	2302      	movs	r3, #2
 800568c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800568e:	2300      	movs	r3, #0
 8005690:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005692:	2300      	movs	r3, #0
 8005694:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005696:	2301      	movs	r3, #1
 8005698:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800569a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800569e:	4619      	mov	r1, r3
 80056a0:	485a      	ldr	r0, [pc, #360]	; (800580c <HAL_TIM_Encoder_MspInit+0x204>)
 80056a2:	f003 fe79 	bl	8009398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80056a6:	2308      	movs	r3, #8
 80056a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056aa:	2302      	movs	r3, #2
 80056ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ae:	2300      	movs	r3, #0
 80056b0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056b2:	2300      	movs	r3, #0
 80056b4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80056b6:	2301      	movs	r3, #1
 80056b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80056be:	4619      	mov	r1, r3
 80056c0:	4853      	ldr	r0, [pc, #332]	; (8005810 <HAL_TIM_Encoder_MspInit+0x208>)
 80056c2:	f003 fe69 	bl	8009398 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80056c6:	e09b      	b.n	8005800 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM3)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a51      	ldr	r2, [pc, #324]	; (8005814 <HAL_TIM_Encoder_MspInit+0x20c>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d12e      	bne.n	8005730 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80056d2:	4b4d      	ldr	r3, [pc, #308]	; (8005808 <HAL_TIM_Encoder_MspInit+0x200>)
 80056d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80056d8:	4a4b      	ldr	r2, [pc, #300]	; (8005808 <HAL_TIM_Encoder_MspInit+0x200>)
 80056da:	f043 0302 	orr.w	r3, r3, #2
 80056de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80056e2:	4b49      	ldr	r3, [pc, #292]	; (8005808 <HAL_TIM_Encoder_MspInit+0x200>)
 80056e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80056e8:	f003 0302 	and.w	r3, r3, #2
 80056ec:	61fb      	str	r3, [r7, #28]
 80056ee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056f0:	4b45      	ldr	r3, [pc, #276]	; (8005808 <HAL_TIM_Encoder_MspInit+0x200>)
 80056f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056f6:	4a44      	ldr	r2, [pc, #272]	; (8005808 <HAL_TIM_Encoder_MspInit+0x200>)
 80056f8:	f043 0302 	orr.w	r3, r3, #2
 80056fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005700:	4b41      	ldr	r3, [pc, #260]	; (8005808 <HAL_TIM_Encoder_MspInit+0x200>)
 8005702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	61bb      	str	r3, [r7, #24]
 800570c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800570e:	2330      	movs	r3, #48	; 0x30
 8005710:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005712:	2302      	movs	r3, #2
 8005714:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005716:	2300      	movs	r3, #0
 8005718:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800571a:	2300      	movs	r3, #0
 800571c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800571e:	2302      	movs	r3, #2
 8005720:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005722:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005726:	4619      	mov	r1, r3
 8005728:	4839      	ldr	r0, [pc, #228]	; (8005810 <HAL_TIM_Encoder_MspInit+0x208>)
 800572a:	f003 fe35 	bl	8009398 <HAL_GPIO_Init>
}
 800572e:	e067      	b.n	8005800 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM4)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a38      	ldr	r2, [pc, #224]	; (8005818 <HAL_TIM_Encoder_MspInit+0x210>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d12f      	bne.n	800579a <HAL_TIM_Encoder_MspInit+0x192>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800573a:	4b33      	ldr	r3, [pc, #204]	; (8005808 <HAL_TIM_Encoder_MspInit+0x200>)
 800573c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005740:	4a31      	ldr	r2, [pc, #196]	; (8005808 <HAL_TIM_Encoder_MspInit+0x200>)
 8005742:	f043 0304 	orr.w	r3, r3, #4
 8005746:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800574a:	4b2f      	ldr	r3, [pc, #188]	; (8005808 <HAL_TIM_Encoder_MspInit+0x200>)
 800574c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005750:	f003 0304 	and.w	r3, r3, #4
 8005754:	617b      	str	r3, [r7, #20]
 8005756:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005758:	4b2b      	ldr	r3, [pc, #172]	; (8005808 <HAL_TIM_Encoder_MspInit+0x200>)
 800575a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800575e:	4a2a      	ldr	r2, [pc, #168]	; (8005808 <HAL_TIM_Encoder_MspInit+0x200>)
 8005760:	f043 0308 	orr.w	r3, r3, #8
 8005764:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005768:	4b27      	ldr	r3, [pc, #156]	; (8005808 <HAL_TIM_Encoder_MspInit+0x200>)
 800576a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800576e:	f003 0308 	and.w	r3, r3, #8
 8005772:	613b      	str	r3, [r7, #16]
 8005774:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8005776:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800577a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800577c:	2302      	movs	r3, #2
 800577e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005780:	2300      	movs	r3, #0
 8005782:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005784:	2300      	movs	r3, #0
 8005786:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005788:	2302      	movs	r3, #2
 800578a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800578c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005790:	4619      	mov	r1, r3
 8005792:	4822      	ldr	r0, [pc, #136]	; (800581c <HAL_TIM_Encoder_MspInit+0x214>)
 8005794:	f003 fe00 	bl	8009398 <HAL_GPIO_Init>
}
 8005798:	e032      	b.n	8005800 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM5)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a20      	ldr	r2, [pc, #128]	; (8005820 <HAL_TIM_Encoder_MspInit+0x218>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d12d      	bne.n	8005800 <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80057a4:	4b18      	ldr	r3, [pc, #96]	; (8005808 <HAL_TIM_Encoder_MspInit+0x200>)
 80057a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80057aa:	4a17      	ldr	r2, [pc, #92]	; (8005808 <HAL_TIM_Encoder_MspInit+0x200>)
 80057ac:	f043 0308 	orr.w	r3, r3, #8
 80057b0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80057b4:	4b14      	ldr	r3, [pc, #80]	; (8005808 <HAL_TIM_Encoder_MspInit+0x200>)
 80057b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80057ba:	f003 0308 	and.w	r3, r3, #8
 80057be:	60fb      	str	r3, [r7, #12]
 80057c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057c2:	4b11      	ldr	r3, [pc, #68]	; (8005808 <HAL_TIM_Encoder_MspInit+0x200>)
 80057c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057c8:	4a0f      	ldr	r2, [pc, #60]	; (8005808 <HAL_TIM_Encoder_MspInit+0x200>)
 80057ca:	f043 0301 	orr.w	r3, r3, #1
 80057ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80057d2:	4b0d      	ldr	r3, [pc, #52]	; (8005808 <HAL_TIM_Encoder_MspInit+0x200>)
 80057d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057d8:	f003 0301 	and.w	r3, r3, #1
 80057dc:	60bb      	str	r3, [r7, #8]
 80057de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80057e0:	2303      	movs	r3, #3
 80057e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057e4:	2302      	movs	r3, #2
 80057e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057e8:	2300      	movs	r3, #0
 80057ea:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057ec:	2300      	movs	r3, #0
 80057ee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80057f0:	2302      	movs	r3, #2
 80057f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80057f8:	4619      	mov	r1, r3
 80057fa:	4804      	ldr	r0, [pc, #16]	; (800580c <HAL_TIM_Encoder_MspInit+0x204>)
 80057fc:	f003 fdcc 	bl	8009398 <HAL_GPIO_Init>
}
 8005800:	bf00      	nop
 8005802:	3740      	adds	r7, #64	; 0x40
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	58024400 	.word	0x58024400
 800580c:	58020000 	.word	0x58020000
 8005810:	58020400 	.word	0x58020400
 8005814:	40000400 	.word	0x40000400
 8005818:	40000800 	.word	0x40000800
 800581c:	58020c00 	.word	0x58020c00
 8005820:	40000c00 	.word	0x40000c00

08005824 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a19      	ldr	r2, [pc, #100]	; (8005898 <HAL_TIM_PWM_MspInit+0x74>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d117      	bne.n	8005866 <HAL_TIM_PWM_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8005836:	4b19      	ldr	r3, [pc, #100]	; (800589c <HAL_TIM_PWM_MspInit+0x78>)
 8005838:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800583c:	4a17      	ldr	r2, [pc, #92]	; (800589c <HAL_TIM_PWM_MspInit+0x78>)
 800583e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005842:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005846:	4b15      	ldr	r3, [pc, #84]	; (800589c <HAL_TIM_PWM_MspInit+0x78>)
 8005848:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800584c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005850:	60fb      	str	r3, [r7, #12]
 8005852:	68fb      	ldr	r3, [r7, #12]
    /* TIM12 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8005854:	2200      	movs	r2, #0
 8005856:	2100      	movs	r1, #0
 8005858:	202b      	movs	r0, #43	; 0x2b
 800585a:	f000 fd6c 	bl	8006336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800585e:	202b      	movs	r0, #43	; 0x2b
 8005860:	f000 fd83 	bl	800636a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8005864:	e013      	b.n	800588e <HAL_TIM_PWM_MspInit+0x6a>
  else if(htim_pwm->Instance==TIM15)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a0d      	ldr	r2, [pc, #52]	; (80058a0 <HAL_TIM_PWM_MspInit+0x7c>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d10e      	bne.n	800588e <HAL_TIM_PWM_MspInit+0x6a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005870:	4b0a      	ldr	r3, [pc, #40]	; (800589c <HAL_TIM_PWM_MspInit+0x78>)
 8005872:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005876:	4a09      	ldr	r2, [pc, #36]	; (800589c <HAL_TIM_PWM_MspInit+0x78>)
 8005878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800587c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005880:	4b06      	ldr	r3, [pc, #24]	; (800589c <HAL_TIM_PWM_MspInit+0x78>)
 8005882:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005886:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800588a:	60bb      	str	r3, [r7, #8]
 800588c:	68bb      	ldr	r3, [r7, #8]
}
 800588e:	bf00      	nop
 8005890:	3710      	adds	r7, #16
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	40001800 	.word	0x40001800
 800589c:	58024400 	.word	0x58024400
 80058a0:	40014000 	.word	0x40014000

080058a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b08a      	sub	sp, #40	; 0x28
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058ac:	f107 0314 	add.w	r3, r7, #20
 80058b0:	2200      	movs	r2, #0
 80058b2:	601a      	str	r2, [r3, #0]
 80058b4:	605a      	str	r2, [r3, #4]
 80058b6:	609a      	str	r2, [r3, #8]
 80058b8:	60da      	str	r2, [r3, #12]
 80058ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a25      	ldr	r2, [pc, #148]	; (8005958 <HAL_TIM_MspPostInit+0xb4>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d120      	bne.n	8005908 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058c6:	4b25      	ldr	r3, [pc, #148]	; (800595c <HAL_TIM_MspPostInit+0xb8>)
 80058c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80058cc:	4a23      	ldr	r2, [pc, #140]	; (800595c <HAL_TIM_MspPostInit+0xb8>)
 80058ce:	f043 0302 	orr.w	r3, r3, #2
 80058d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80058d6:	4b21      	ldr	r3, [pc, #132]	; (800595c <HAL_TIM_MspPostInit+0xb8>)
 80058d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80058dc:	f003 0302 	and.w	r3, r3, #2
 80058e0:	613b      	str	r3, [r7, #16]
 80058e2:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80058e4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80058e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058ea:	2302      	movs	r3, #2
 80058ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058ee:	2300      	movs	r3, #0
 80058f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058f2:	2300      	movs	r3, #0
 80058f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 80058f6:	2302      	movs	r3, #2
 80058f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058fa:	f107 0314 	add.w	r3, r7, #20
 80058fe:	4619      	mov	r1, r3
 8005900:	4817      	ldr	r0, [pc, #92]	; (8005960 <HAL_TIM_MspPostInit+0xbc>)
 8005902:	f003 fd49 	bl	8009398 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8005906:	e023      	b.n	8005950 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM15)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a15      	ldr	r2, [pc, #84]	; (8005964 <HAL_TIM_MspPostInit+0xc0>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d11e      	bne.n	8005950 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005912:	4b12      	ldr	r3, [pc, #72]	; (800595c <HAL_TIM_MspPostInit+0xb8>)
 8005914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005918:	4a10      	ldr	r2, [pc, #64]	; (800595c <HAL_TIM_MspPostInit+0xb8>)
 800591a:	f043 0310 	orr.w	r3, r3, #16
 800591e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005922:	4b0e      	ldr	r3, [pc, #56]	; (800595c <HAL_TIM_MspPostInit+0xb8>)
 8005924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005928:	f003 0310 	and.w	r3, r3, #16
 800592c:	60fb      	str	r3, [r7, #12]
 800592e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005930:	2360      	movs	r3, #96	; 0x60
 8005932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005934:	2302      	movs	r3, #2
 8005936:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005938:	2300      	movs	r3, #0
 800593a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800593c:	2300      	movs	r3, #0
 800593e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8005940:	2304      	movs	r3, #4
 8005942:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005944:	f107 0314 	add.w	r3, r7, #20
 8005948:	4619      	mov	r1, r3
 800594a:	4807      	ldr	r0, [pc, #28]	; (8005968 <HAL_TIM_MspPostInit+0xc4>)
 800594c:	f003 fd24 	bl	8009398 <HAL_GPIO_Init>
}
 8005950:	bf00      	nop
 8005952:	3728      	adds	r7, #40	; 0x28
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	40001800 	.word	0x40001800
 800595c:	58024400 	.word	0x58024400
 8005960:	58020400 	.word	0x58020400
 8005964:	40014000 	.word	0x40014000
 8005968:	58021000 	.word	0x58021000

0800596c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b0bc      	sub	sp, #240	; 0xf0
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005974:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005978:	2200      	movs	r2, #0
 800597a:	601a      	str	r2, [r3, #0]
 800597c:	605a      	str	r2, [r3, #4]
 800597e:	609a      	str	r2, [r3, #8]
 8005980:	60da      	str	r2, [r3, #12]
 8005982:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005984:	f107 0320 	add.w	r3, r7, #32
 8005988:	22b8      	movs	r2, #184	; 0xb8
 800598a:	2100      	movs	r1, #0
 800598c:	4618      	mov	r0, r3
 800598e:	f00a fbde 	bl	801014e <memset>
  if(huart->Instance==USART1)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a97      	ldr	r2, [pc, #604]	; (8005bf4 <HAL_UART_MspInit+0x288>)
 8005998:	4293      	cmp	r3, r2
 800599a:	f040 80ae 	bne.w	8005afa <HAL_UART_MspInit+0x18e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800599e:	f04f 0201 	mov.w	r2, #1
 80059a2:	f04f 0300 	mov.w	r3, #0
 80059a6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80059aa:	2300      	movs	r3, #0
 80059ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80059b0:	f107 0320 	add.w	r3, r7, #32
 80059b4:	4618      	mov	r0, r3
 80059b6:	f004 ff53 	bl	800a860 <HAL_RCCEx_PeriphCLKConfig>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d001      	beq.n	80059c4 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 80059c0:	f7fc fa8e 	bl	8001ee0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80059c4:	4b8c      	ldr	r3, [pc, #560]	; (8005bf8 <HAL_UART_MspInit+0x28c>)
 80059c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059ca:	4a8b      	ldr	r2, [pc, #556]	; (8005bf8 <HAL_UART_MspInit+0x28c>)
 80059cc:	f043 0310 	orr.w	r3, r3, #16
 80059d0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80059d4:	4b88      	ldr	r3, [pc, #544]	; (8005bf8 <HAL_UART_MspInit+0x28c>)
 80059d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059da:	f003 0310 	and.w	r3, r3, #16
 80059de:	61fb      	str	r3, [r7, #28]
 80059e0:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059e2:	4b85      	ldr	r3, [pc, #532]	; (8005bf8 <HAL_UART_MspInit+0x28c>)
 80059e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059e8:	4a83      	ldr	r2, [pc, #524]	; (8005bf8 <HAL_UART_MspInit+0x28c>)
 80059ea:	f043 0301 	orr.w	r3, r3, #1
 80059ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80059f2:	4b81      	ldr	r3, [pc, #516]	; (8005bf8 <HAL_UART_MspInit+0x28c>)
 80059f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	61bb      	str	r3, [r7, #24]
 80059fe:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005a00:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005a04:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a08:	2302      	movs	r3, #2
 8005a0a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a14:	2300      	movs	r3, #0
 8005a16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005a1a:	2307      	movs	r3, #7
 8005a1c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a20:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005a24:	4619      	mov	r1, r3
 8005a26:	4875      	ldr	r0, [pc, #468]	; (8005bfc <HAL_UART_MspInit+0x290>)
 8005a28:	f003 fcb6 	bl	8009398 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8005a2c:	4b74      	ldr	r3, [pc, #464]	; (8005c00 <HAL_UART_MspInit+0x294>)
 8005a2e:	4a75      	ldr	r2, [pc, #468]	; (8005c04 <HAL_UART_MspInit+0x298>)
 8005a30:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8005a32:	4b73      	ldr	r3, [pc, #460]	; (8005c00 <HAL_UART_MspInit+0x294>)
 8005a34:	2229      	movs	r2, #41	; 0x29
 8005a36:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005a38:	4b71      	ldr	r3, [pc, #452]	; (8005c00 <HAL_UART_MspInit+0x294>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a3e:	4b70      	ldr	r3, [pc, #448]	; (8005c00 <HAL_UART_MspInit+0x294>)
 8005a40:	2200      	movs	r2, #0
 8005a42:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005a44:	4b6e      	ldr	r3, [pc, #440]	; (8005c00 <HAL_UART_MspInit+0x294>)
 8005a46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a4a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a4c:	4b6c      	ldr	r3, [pc, #432]	; (8005c00 <HAL_UART_MspInit+0x294>)
 8005a4e:	2200      	movs	r2, #0
 8005a50:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a52:	4b6b      	ldr	r3, [pc, #428]	; (8005c00 <HAL_UART_MspInit+0x294>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8005a58:	4b69      	ldr	r3, [pc, #420]	; (8005c00 <HAL_UART_MspInit+0x294>)
 8005a5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a5e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005a60:	4b67      	ldr	r3, [pc, #412]	; (8005c00 <HAL_UART_MspInit+0x294>)
 8005a62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005a66:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005a68:	4b65      	ldr	r3, [pc, #404]	; (8005c00 <HAL_UART_MspInit+0x294>)
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005a6e:	4864      	ldr	r0, [pc, #400]	; (8005c00 <HAL_UART_MspInit+0x294>)
 8005a70:	f000 fca4 	bl	80063bc <HAL_DMA_Init>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8005a7a:	f7fc fa31 	bl	8001ee0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a5f      	ldr	r2, [pc, #380]	; (8005c00 <HAL_UART_MspInit+0x294>)
 8005a82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8005a86:	4a5e      	ldr	r2, [pc, #376]	; (8005c00 <HAL_UART_MspInit+0x294>)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 8005a8c:	4b5e      	ldr	r3, [pc, #376]	; (8005c08 <HAL_UART_MspInit+0x29c>)
 8005a8e:	4a5f      	ldr	r2, [pc, #380]	; (8005c0c <HAL_UART_MspInit+0x2a0>)
 8005a90:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8005a92:	4b5d      	ldr	r3, [pc, #372]	; (8005c08 <HAL_UART_MspInit+0x29c>)
 8005a94:	222a      	movs	r2, #42	; 0x2a
 8005a96:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005a98:	4b5b      	ldr	r3, [pc, #364]	; (8005c08 <HAL_UART_MspInit+0x29c>)
 8005a9a:	2240      	movs	r2, #64	; 0x40
 8005a9c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a9e:	4b5a      	ldr	r3, [pc, #360]	; (8005c08 <HAL_UART_MspInit+0x29c>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005aa4:	4b58      	ldr	r3, [pc, #352]	; (8005c08 <HAL_UART_MspInit+0x29c>)
 8005aa6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005aaa:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005aac:	4b56      	ldr	r3, [pc, #344]	; (8005c08 <HAL_UART_MspInit+0x29c>)
 8005aae:	2200      	movs	r2, #0
 8005ab0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005ab2:	4b55      	ldr	r3, [pc, #340]	; (8005c08 <HAL_UART_MspInit+0x29c>)
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005ab8:	4b53      	ldr	r3, [pc, #332]	; (8005c08 <HAL_UART_MspInit+0x29c>)
 8005aba:	2200      	movs	r2, #0
 8005abc:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005abe:	4b52      	ldr	r3, [pc, #328]	; (8005c08 <HAL_UART_MspInit+0x29c>)
 8005ac0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005ac4:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005ac6:	4b50      	ldr	r3, [pc, #320]	; (8005c08 <HAL_UART_MspInit+0x29c>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005acc:	484e      	ldr	r0, [pc, #312]	; (8005c08 <HAL_UART_MspInit+0x29c>)
 8005ace:	f000 fc75 	bl	80063bc <HAL_DMA_Init>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d001      	beq.n	8005adc <HAL_UART_MspInit+0x170>
    {
      Error_Handler();
 8005ad8:	f7fc fa02 	bl	8001ee0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a4a      	ldr	r2, [pc, #296]	; (8005c08 <HAL_UART_MspInit+0x29c>)
 8005ae0:	67da      	str	r2, [r3, #124]	; 0x7c
 8005ae2:	4a49      	ldr	r2, [pc, #292]	; (8005c08 <HAL_UART_MspInit+0x29c>)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005ae8:	2200      	movs	r2, #0
 8005aea:	2100      	movs	r1, #0
 8005aec:	2025      	movs	r0, #37	; 0x25
 8005aee:	f000 fc22 	bl	8006336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005af2:	2025      	movs	r0, #37	; 0x25
 8005af4:	f000 fc39 	bl	800636a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005af8:	e078      	b.n	8005bec <HAL_UART_MspInit+0x280>
  else if(huart->Instance==USART3)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a44      	ldr	r2, [pc, #272]	; (8005c10 <HAL_UART_MspInit+0x2a4>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d173      	bne.n	8005bec <HAL_UART_MspInit+0x280>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005b04:	f04f 0202 	mov.w	r2, #2
 8005b08:	f04f 0300 	mov.w	r3, #0
 8005b0c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005b10:	2300      	movs	r3, #0
 8005b12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005b16:	f107 0320 	add.w	r3, r7, #32
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f004 fea0 	bl	800a860 <HAL_RCCEx_PeriphCLKConfig>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <HAL_UART_MspInit+0x1be>
      Error_Handler();
 8005b26:	f7fc f9db 	bl	8001ee0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005b2a:	4b33      	ldr	r3, [pc, #204]	; (8005bf8 <HAL_UART_MspInit+0x28c>)
 8005b2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005b30:	4a31      	ldr	r2, [pc, #196]	; (8005bf8 <HAL_UART_MspInit+0x28c>)
 8005b32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b36:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005b3a:	4b2f      	ldr	r3, [pc, #188]	; (8005bf8 <HAL_UART_MspInit+0x28c>)
 8005b3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005b40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b44:	617b      	str	r3, [r7, #20]
 8005b46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b48:	4b2b      	ldr	r3, [pc, #172]	; (8005bf8 <HAL_UART_MspInit+0x28c>)
 8005b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b4e:	4a2a      	ldr	r2, [pc, #168]	; (8005bf8 <HAL_UART_MspInit+0x28c>)
 8005b50:	f043 0302 	orr.w	r3, r3, #2
 8005b54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005b58:	4b27      	ldr	r3, [pc, #156]	; (8005bf8 <HAL_UART_MspInit+0x28c>)
 8005b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b5e:	f003 0302 	and.w	r3, r3, #2
 8005b62:	613b      	str	r3, [r7, #16]
 8005b64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005b66:	4b24      	ldr	r3, [pc, #144]	; (8005bf8 <HAL_UART_MspInit+0x28c>)
 8005b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b6c:	4a22      	ldr	r2, [pc, #136]	; (8005bf8 <HAL_UART_MspInit+0x28c>)
 8005b6e:	f043 0308 	orr.w	r3, r3, #8
 8005b72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005b76:	4b20      	ldr	r3, [pc, #128]	; (8005bf8 <HAL_UART_MspInit+0x28c>)
 8005b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b7c:	f003 0308 	and.w	r3, r3, #8
 8005b80:	60fb      	str	r3, [r7, #12]
 8005b82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005b84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b88:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b92:	2300      	movs	r3, #0
 8005b94:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005b9e:	2307      	movs	r3, #7
 8005ba0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ba4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005ba8:	4619      	mov	r1, r3
 8005baa:	481a      	ldr	r0, [pc, #104]	; (8005c14 <HAL_UART_MspInit+0x2a8>)
 8005bac:	f003 fbf4 	bl	8009398 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005bb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bb4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bb8:	2302      	movs	r3, #2
 8005bba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005bca:	2307      	movs	r3, #7
 8005bcc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005bd0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	4810      	ldr	r0, [pc, #64]	; (8005c18 <HAL_UART_MspInit+0x2ac>)
 8005bd8:	f003 fbde 	bl	8009398 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005bdc:	2200      	movs	r2, #0
 8005bde:	2100      	movs	r1, #0
 8005be0:	2027      	movs	r0, #39	; 0x27
 8005be2:	f000 fba8 	bl	8006336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005be6:	2027      	movs	r0, #39	; 0x27
 8005be8:	f000 fbbf 	bl	800636a <HAL_NVIC_EnableIRQ>
}
 8005bec:	bf00      	nop
 8005bee:	37f0      	adds	r7, #240	; 0xf0
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	40011000 	.word	0x40011000
 8005bf8:	58024400 	.word	0x58024400
 8005bfc:	58020000 	.word	0x58020000
 8005c00:	2400087c 	.word	0x2400087c
 8005c04:	40020010 	.word	0x40020010
 8005c08:	240008f4 	.word	0x240008f4
 8005c0c:	40020028 	.word	0x40020028
 8005c10:	40004800 	.word	0x40004800
 8005c14:	58020400 	.word	0x58020400
 8005c18:	58020c00 	.word	0x58020c00

08005c1c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a1e      	ldr	r2, [pc, #120]	; (8005ca4 <HAL_UART_MspDeInit+0x88>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d11b      	bne.n	8005c66 <HAL_UART_MspDeInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8005c2e:	4b1e      	ldr	r3, [pc, #120]	; (8005ca8 <HAL_UART_MspDeInit+0x8c>)
 8005c30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c34:	4a1c      	ldr	r2, [pc, #112]	; (8005ca8 <HAL_UART_MspDeInit+0x8c>)
 8005c36:	f023 0310 	bic.w	r3, r3, #16
 8005c3a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8005c3e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005c42:	481a      	ldr	r0, [pc, #104]	; (8005cac <HAL_UART_MspDeInit+0x90>)
 8005c44:	f003 fd50 	bl	80096e8 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 ff0c 	bl	8006a6c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f000 ff07 	bl	8006a6c <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8005c5e:	2025      	movs	r0, #37	; 0x25
 8005c60:	f000 fb91 	bl	8006386 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8005c64:	e019      	b.n	8005c9a <HAL_UART_MspDeInit+0x7e>
  else if(huart->Instance==USART3)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a11      	ldr	r2, [pc, #68]	; (8005cb0 <HAL_UART_MspDeInit+0x94>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d114      	bne.n	8005c9a <HAL_UART_MspDeInit+0x7e>
    __HAL_RCC_USART3_CLK_DISABLE();
 8005c70:	4b0d      	ldr	r3, [pc, #52]	; (8005ca8 <HAL_UART_MspDeInit+0x8c>)
 8005c72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c76:	4a0c      	ldr	r2, [pc, #48]	; (8005ca8 <HAL_UART_MspDeInit+0x8c>)
 8005c78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c7c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8005c80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005c84:	480b      	ldr	r0, [pc, #44]	; (8005cb4 <HAL_UART_MspDeInit+0x98>)
 8005c86:	f003 fd2f 	bl	80096e8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_9);
 8005c8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c8e:	480a      	ldr	r0, [pc, #40]	; (8005cb8 <HAL_UART_MspDeInit+0x9c>)
 8005c90:	f003 fd2a 	bl	80096e8 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 8005c94:	2027      	movs	r0, #39	; 0x27
 8005c96:	f000 fb76 	bl	8006386 <HAL_NVIC_DisableIRQ>
}
 8005c9a:	bf00      	nop
 8005c9c:	3708      	adds	r7, #8
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	40011000 	.word	0x40011000
 8005ca8:	58024400 	.word	0x58024400
 8005cac:	58020000 	.word	0x58020000
 8005cb0:	40004800 	.word	0x40004800
 8005cb4:	58020400 	.word	0x58020400
 8005cb8:	58020c00 	.word	0x58020c00

08005cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005cc0:	e7fe      	b.n	8005cc0 <NMI_Handler+0x4>

08005cc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005cc2:	b480      	push	{r7}
 8005cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005cc6:	e7fe      	b.n	8005cc6 <HardFault_Handler+0x4>

08005cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005ccc:	e7fe      	b.n	8005ccc <MemManage_Handler+0x4>

08005cce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005cd2:	e7fe      	b.n	8005cd2 <BusFault_Handler+0x4>

08005cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005cd8:	e7fe      	b.n	8005cd8 <UsageFault_Handler+0x4>

08005cda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005cde:	bf00      	nop
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005cec:	bf00      	nop
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr

08005cf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005cfa:	bf00      	nop
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005d08:	f000 f9d2 	bl	80060b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005d0c:	bf00      	nop
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005d14:	4802      	ldr	r0, [pc, #8]	; (8005d20 <DMA1_Stream0_IRQHandler+0x10>)
 8005d16:	f002 f82d 	bl	8007d74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8005d1a:	bf00      	nop
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	2400087c 	.word	0x2400087c

08005d24 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005d28:	4802      	ldr	r0, [pc, #8]	; (8005d34 <DMA1_Stream1_IRQHandler+0x10>)
 8005d2a:	f002 f823 	bl	8007d74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8005d2e:	bf00      	nop
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	240008f4 	.word	0x240008f4

08005d38 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005d3c:	4802      	ldr	r0, [pc, #8]	; (8005d48 <TIM1_BRK_IRQHandler+0x10>)
 8005d3e:	f006 fef7 	bl	800cb30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8005d42:	bf00      	nop
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	240004a8 	.word	0x240004a8

08005d4c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005d50:	4802      	ldr	r0, [pc, #8]	; (8005d5c <TIM1_UP_IRQHandler+0x10>)
 8005d52:	f006 feed 	bl	800cb30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8005d56:	bf00      	nop
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	240004a8 	.word	0x240004a8

08005d60 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005d64:	4802      	ldr	r0, [pc, #8]	; (8005d70 <TIM1_TRG_COM_IRQHandler+0x10>)
 8005d66:	f006 fee3 	bl	800cb30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8005d6a:	bf00      	nop
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	240004a8 	.word	0x240004a8

08005d74 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005d78:	4802      	ldr	r0, [pc, #8]	; (8005d84 <TIM1_CC_IRQHandler+0x10>)
 8005d7a:	f006 fed9 	bl	800cb30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8005d7e:	bf00      	nop
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	240004a8 	.word	0x240004a8

08005d88 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005d8c:	4802      	ldr	r0, [pc, #8]	; (8005d98 <USART1_IRQHandler+0x10>)
 8005d8e:	f008 f9a7 	bl	800e0e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005d92:	bf00      	nop
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	24000754 	.word	0x24000754

08005d9c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005da0:	4802      	ldr	r0, [pc, #8]	; (8005dac <USART3_IRQHandler+0x10>)
 8005da2:	f008 f99d 	bl	800e0e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005da6:	bf00      	nop
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	240007e8 	.word	0x240007e8

08005db0 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005db4:	4803      	ldr	r0, [pc, #12]	; (8005dc4 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8005db6:	f006 febb 	bl	800cb30 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8005dba:	4803      	ldr	r0, [pc, #12]	; (8005dc8 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8005dbc:	f006 feb8 	bl	800cb30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8005dc0:	bf00      	nop
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	24000624 	.word	0x24000624
 8005dc8:	24000670 	.word	0x24000670

08005dcc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005dd0:	4802      	ldr	r0, [pc, #8]	; (8005ddc <TIM8_UP_TIM13_IRQHandler+0x10>)
 8005dd2:	f006 fead 	bl	800cb30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8005dd6:	bf00      	nop
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	24000624 	.word	0x24000624

08005de0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005de4:	4802      	ldr	r0, [pc, #8]	; (8005df0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8005de6:	f006 fea3 	bl	800cb30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8005dea:	bf00      	nop
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	24000624 	.word	0x24000624

08005df4 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005df8:	4802      	ldr	r0, [pc, #8]	; (8005e04 <TIM8_CC_IRQHandler+0x10>)
 8005dfa:	f006 fe99 	bl	800cb30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8005dfe:	bf00      	nop
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	24000624 	.word	0x24000624

08005e08 <TIM23_IRQHandler>:

/**
  * @brief This function handles TIM23 global interrupt.
  */
void TIM23_IRQHandler(void)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM23_IRQn 0 */

  /* USER CODE END TIM23_IRQn 0 */
  HAL_TIM_IRQHandler(&htim23);
 8005e0c:	4802      	ldr	r0, [pc, #8]	; (8005e18 <TIM23_IRQHandler+0x10>)
 8005e0e:	f006 fe8f 	bl	800cb30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM23_IRQn 1 */

  /* USER CODE END TIM23_IRQn 1 */
}
 8005e12:	bf00      	nop
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	24000708 	.word	0x24000708

08005e1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b086      	sub	sp, #24
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005e24:	4a14      	ldr	r2, [pc, #80]	; (8005e78 <_sbrk+0x5c>)
 8005e26:	4b15      	ldr	r3, [pc, #84]	; (8005e7c <_sbrk+0x60>)
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005e30:	4b13      	ldr	r3, [pc, #76]	; (8005e80 <_sbrk+0x64>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d102      	bne.n	8005e3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005e38:	4b11      	ldr	r3, [pc, #68]	; (8005e80 <_sbrk+0x64>)
 8005e3a:	4a12      	ldr	r2, [pc, #72]	; (8005e84 <_sbrk+0x68>)
 8005e3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005e3e:	4b10      	ldr	r3, [pc, #64]	; (8005e80 <_sbrk+0x64>)
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4413      	add	r3, r2
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d207      	bcs.n	8005e5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005e4c:	f00a f988 	bl	8010160 <__errno>
 8005e50:	4603      	mov	r3, r0
 8005e52:	220c      	movs	r2, #12
 8005e54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005e56:	f04f 33ff 	mov.w	r3, #4294967295
 8005e5a:	e009      	b.n	8005e70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005e5c:	4b08      	ldr	r3, [pc, #32]	; (8005e80 <_sbrk+0x64>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005e62:	4b07      	ldr	r3, [pc, #28]	; (8005e80 <_sbrk+0x64>)
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4413      	add	r3, r2
 8005e6a:	4a05      	ldr	r2, [pc, #20]	; (8005e80 <_sbrk+0x64>)
 8005e6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3718      	adds	r7, #24
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	24050000 	.word	0x24050000
 8005e7c:	00000400 	.word	0x00000400
 8005e80:	2400201c 	.word	0x2400201c
 8005e84:	24002170 	.word	0x24002170

08005e88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005e8c:	4b32      	ldr	r3, [pc, #200]	; (8005f58 <SystemInit+0xd0>)
 8005e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e92:	4a31      	ldr	r2, [pc, #196]	; (8005f58 <SystemInit+0xd0>)
 8005e94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005e9c:	4b2f      	ldr	r3, [pc, #188]	; (8005f5c <SystemInit+0xd4>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 030f 	and.w	r3, r3, #15
 8005ea4:	2b06      	cmp	r3, #6
 8005ea6:	d807      	bhi.n	8005eb8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005ea8:	4b2c      	ldr	r3, [pc, #176]	; (8005f5c <SystemInit+0xd4>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f023 030f 	bic.w	r3, r3, #15
 8005eb0:	4a2a      	ldr	r2, [pc, #168]	; (8005f5c <SystemInit+0xd4>)
 8005eb2:	f043 0307 	orr.w	r3, r3, #7
 8005eb6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005eb8:	4b29      	ldr	r3, [pc, #164]	; (8005f60 <SystemInit+0xd8>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a28      	ldr	r2, [pc, #160]	; (8005f60 <SystemInit+0xd8>)
 8005ebe:	f043 0301 	orr.w	r3, r3, #1
 8005ec2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005ec4:	4b26      	ldr	r3, [pc, #152]	; (8005f60 <SystemInit+0xd8>)
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005eca:	4b25      	ldr	r3, [pc, #148]	; (8005f60 <SystemInit+0xd8>)
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	4924      	ldr	r1, [pc, #144]	; (8005f60 <SystemInit+0xd8>)
 8005ed0:	4b24      	ldr	r3, [pc, #144]	; (8005f64 <SystemInit+0xdc>)
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005ed6:	4b21      	ldr	r3, [pc, #132]	; (8005f5c <SystemInit+0xd4>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0308 	and.w	r3, r3, #8
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d007      	beq.n	8005ef2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005ee2:	4b1e      	ldr	r3, [pc, #120]	; (8005f5c <SystemInit+0xd4>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f023 030f 	bic.w	r3, r3, #15
 8005eea:	4a1c      	ldr	r2, [pc, #112]	; (8005f5c <SystemInit+0xd4>)
 8005eec:	f043 0307 	orr.w	r3, r3, #7
 8005ef0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005ef2:	4b1b      	ldr	r3, [pc, #108]	; (8005f60 <SystemInit+0xd8>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005ef8:	4b19      	ldr	r3, [pc, #100]	; (8005f60 <SystemInit+0xd8>)
 8005efa:	2200      	movs	r2, #0
 8005efc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8005efe:	4b18      	ldr	r3, [pc, #96]	; (8005f60 <SystemInit+0xd8>)
 8005f00:	2200      	movs	r2, #0
 8005f02:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005f04:	4b16      	ldr	r3, [pc, #88]	; (8005f60 <SystemInit+0xd8>)
 8005f06:	4a18      	ldr	r2, [pc, #96]	; (8005f68 <SystemInit+0xe0>)
 8005f08:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005f0a:	4b15      	ldr	r3, [pc, #84]	; (8005f60 <SystemInit+0xd8>)
 8005f0c:	4a17      	ldr	r2, [pc, #92]	; (8005f6c <SystemInit+0xe4>)
 8005f0e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005f10:	4b13      	ldr	r3, [pc, #76]	; (8005f60 <SystemInit+0xd8>)
 8005f12:	4a17      	ldr	r2, [pc, #92]	; (8005f70 <SystemInit+0xe8>)
 8005f14:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005f16:	4b12      	ldr	r3, [pc, #72]	; (8005f60 <SystemInit+0xd8>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005f1c:	4b10      	ldr	r3, [pc, #64]	; (8005f60 <SystemInit+0xd8>)
 8005f1e:	4a14      	ldr	r2, [pc, #80]	; (8005f70 <SystemInit+0xe8>)
 8005f20:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005f22:	4b0f      	ldr	r3, [pc, #60]	; (8005f60 <SystemInit+0xd8>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005f28:	4b0d      	ldr	r3, [pc, #52]	; (8005f60 <SystemInit+0xd8>)
 8005f2a:	4a11      	ldr	r2, [pc, #68]	; (8005f70 <SystemInit+0xe8>)
 8005f2c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005f2e:	4b0c      	ldr	r3, [pc, #48]	; (8005f60 <SystemInit+0xd8>)
 8005f30:	2200      	movs	r2, #0
 8005f32:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005f34:	4b0a      	ldr	r3, [pc, #40]	; (8005f60 <SystemInit+0xd8>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a09      	ldr	r2, [pc, #36]	; (8005f60 <SystemInit+0xd8>)
 8005f3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f3e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005f40:	4b07      	ldr	r3, [pc, #28]	; (8005f60 <SystemInit+0xd8>)
 8005f42:	2200      	movs	r2, #0
 8005f44:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005f46:	4b0b      	ldr	r3, [pc, #44]	; (8005f74 <SystemInit+0xec>)
 8005f48:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005f4c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8005f4e:	bf00      	nop
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr
 8005f58:	e000ed00 	.word	0xe000ed00
 8005f5c:	52002000 	.word	0x52002000
 8005f60:	58024400 	.word	0x58024400
 8005f64:	eaf6ed7f 	.word	0xeaf6ed7f
 8005f68:	02020200 	.word	0x02020200
 8005f6c:	01ff0000 	.word	0x01ff0000
 8005f70:	01010280 	.word	0x01010280
 8005f74:	52004000 	.word	0x52004000

08005f78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005f78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005fb0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005f7c:	f7ff ff84 	bl	8005e88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005f80:	480c      	ldr	r0, [pc, #48]	; (8005fb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005f82:	490d      	ldr	r1, [pc, #52]	; (8005fb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005f84:	4a0d      	ldr	r2, [pc, #52]	; (8005fbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005f88:	e002      	b.n	8005f90 <LoopCopyDataInit>

08005f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005f8e:	3304      	adds	r3, #4

08005f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005f94:	d3f9      	bcc.n	8005f8a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005f96:	4a0a      	ldr	r2, [pc, #40]	; (8005fc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005f98:	4c0a      	ldr	r4, [pc, #40]	; (8005fc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005f9c:	e001      	b.n	8005fa2 <LoopFillZerobss>

08005f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005fa0:	3204      	adds	r2, #4

08005fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005fa4:	d3fb      	bcc.n	8005f9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005fa6:	f00a f8e1 	bl	801016c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005faa:	f7fb f9ed 	bl	8001388 <main>
  bx  lr
 8005fae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005fb0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8005fb4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005fb8:	240000b0 	.word	0x240000b0
  ldr r2, =_sidata
 8005fbc:	08010794 	.word	0x08010794
  ldr r2, =_sbss
 8005fc0:	240000b0 	.word	0x240000b0
  ldr r4, =_ebss
 8005fc4:	2400216c 	.word	0x2400216c

08005fc8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005fc8:	e7fe      	b.n	8005fc8 <ADC3_IRQHandler>
	...

08005fcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005fd2:	2003      	movs	r0, #3
 8005fd4:	f000 f9a4 	bl	8006320 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005fd8:	f004 fa6c 	bl	800a4b4 <HAL_RCC_GetSysClockFreq>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	4b15      	ldr	r3, [pc, #84]	; (8006034 <HAL_Init+0x68>)
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	0a1b      	lsrs	r3, r3, #8
 8005fe4:	f003 030f 	and.w	r3, r3, #15
 8005fe8:	4913      	ldr	r1, [pc, #76]	; (8006038 <HAL_Init+0x6c>)
 8005fea:	5ccb      	ldrb	r3, [r1, r3]
 8005fec:	f003 031f 	and.w	r3, r3, #31
 8005ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ff4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ff6:	4b0f      	ldr	r3, [pc, #60]	; (8006034 <HAL_Init+0x68>)
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	f003 030f 	and.w	r3, r3, #15
 8005ffe:	4a0e      	ldr	r2, [pc, #56]	; (8006038 <HAL_Init+0x6c>)
 8006000:	5cd3      	ldrb	r3, [r2, r3]
 8006002:	f003 031f 	and.w	r3, r3, #31
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	fa22 f303 	lsr.w	r3, r2, r3
 800600c:	4a0b      	ldr	r2, [pc, #44]	; (800603c <HAL_Init+0x70>)
 800600e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006010:	4a0b      	ldr	r2, [pc, #44]	; (8006040 <HAL_Init+0x74>)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006016:	200f      	movs	r0, #15
 8006018:	f000 f814 	bl	8006044 <HAL_InitTick>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d001      	beq.n	8006026 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e002      	b.n	800602c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006026:	f7ff fa3f 	bl	80054a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3708      	adds	r7, #8
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	58024400 	.word	0x58024400
 8006038:	08010734 	.word	0x08010734
 800603c:	24000054 	.word	0x24000054
 8006040:	24000050 	.word	0x24000050

08006044 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800604c:	4b15      	ldr	r3, [pc, #84]	; (80060a4 <HAL_InitTick+0x60>)
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d101      	bne.n	8006058 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e021      	b.n	800609c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006058:	4b13      	ldr	r3, [pc, #76]	; (80060a8 <HAL_InitTick+0x64>)
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	4b11      	ldr	r3, [pc, #68]	; (80060a4 <HAL_InitTick+0x60>)
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	4619      	mov	r1, r3
 8006062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006066:	fbb3 f3f1 	udiv	r3, r3, r1
 800606a:	fbb2 f3f3 	udiv	r3, r2, r3
 800606e:	4618      	mov	r0, r3
 8006070:	f000 f997 	bl	80063a2 <HAL_SYSTICK_Config>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d001      	beq.n	800607e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e00e      	b.n	800609c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b0f      	cmp	r3, #15
 8006082:	d80a      	bhi.n	800609a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006084:	2200      	movs	r2, #0
 8006086:	6879      	ldr	r1, [r7, #4]
 8006088:	f04f 30ff 	mov.w	r0, #4294967295
 800608c:	f000 f953 	bl	8006336 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006090:	4a06      	ldr	r2, [pc, #24]	; (80060ac <HAL_InitTick+0x68>)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006096:	2300      	movs	r3, #0
 8006098:	e000      	b.n	800609c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
}
 800609c:	4618      	mov	r0, r3
 800609e:	3708      	adds	r7, #8
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	2400005c 	.word	0x2400005c
 80060a8:	24000050 	.word	0x24000050
 80060ac:	24000058 	.word	0x24000058

080060b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80060b0:	b480      	push	{r7}
 80060b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80060b4:	4b06      	ldr	r3, [pc, #24]	; (80060d0 <HAL_IncTick+0x20>)
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	461a      	mov	r2, r3
 80060ba:	4b06      	ldr	r3, [pc, #24]	; (80060d4 <HAL_IncTick+0x24>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4413      	add	r3, r2
 80060c0:	4a04      	ldr	r2, [pc, #16]	; (80060d4 <HAL_IncTick+0x24>)
 80060c2:	6013      	str	r3, [r2, #0]
}
 80060c4:	bf00      	nop
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	2400005c 	.word	0x2400005c
 80060d4:	24002020 	.word	0x24002020

080060d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80060d8:	b480      	push	{r7}
 80060da:	af00      	add	r7, sp, #0
  return uwTick;
 80060dc:	4b03      	ldr	r3, [pc, #12]	; (80060ec <HAL_GetTick+0x14>)
 80060de:	681b      	ldr	r3, [r3, #0]
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	24002020 	.word	0x24002020

080060f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80060f8:	f7ff ffee 	bl	80060d8 <HAL_GetTick>
 80060fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006108:	d005      	beq.n	8006116 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800610a:	4b0a      	ldr	r3, [pc, #40]	; (8006134 <HAL_Delay+0x44>)
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	461a      	mov	r2, r3
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	4413      	add	r3, r2
 8006114:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006116:	bf00      	nop
 8006118:	f7ff ffde 	bl	80060d8 <HAL_GetTick>
 800611c:	4602      	mov	r2, r0
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	429a      	cmp	r2, r3
 8006126:	d8f7      	bhi.n	8006118 <HAL_Delay+0x28>
  {
  }
}
 8006128:	bf00      	nop
 800612a:	bf00      	nop
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	2400005c 	.word	0x2400005c

08006138 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f003 0307 	and.w	r3, r3, #7
 8006146:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006148:	4b0b      	ldr	r3, [pc, #44]	; (8006178 <__NVIC_SetPriorityGrouping+0x40>)
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006154:	4013      	ands	r3, r2
 8006156:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006160:	4b06      	ldr	r3, [pc, #24]	; (800617c <__NVIC_SetPriorityGrouping+0x44>)
 8006162:	4313      	orrs	r3, r2
 8006164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006166:	4a04      	ldr	r2, [pc, #16]	; (8006178 <__NVIC_SetPriorityGrouping+0x40>)
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	60d3      	str	r3, [r2, #12]
}
 800616c:	bf00      	nop
 800616e:	3714      	adds	r7, #20
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr
 8006178:	e000ed00 	.word	0xe000ed00
 800617c:	05fa0000 	.word	0x05fa0000

08006180 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006180:	b480      	push	{r7}
 8006182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006184:	4b04      	ldr	r3, [pc, #16]	; (8006198 <__NVIC_GetPriorityGrouping+0x18>)
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	0a1b      	lsrs	r3, r3, #8
 800618a:	f003 0307 	and.w	r3, r3, #7
}
 800618e:	4618      	mov	r0, r3
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr
 8006198:	e000ed00 	.word	0xe000ed00

0800619c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	4603      	mov	r3, r0
 80061a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80061a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	db0b      	blt.n	80061c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80061ae:	88fb      	ldrh	r3, [r7, #6]
 80061b0:	f003 021f 	and.w	r2, r3, #31
 80061b4:	4907      	ldr	r1, [pc, #28]	; (80061d4 <__NVIC_EnableIRQ+0x38>)
 80061b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80061ba:	095b      	lsrs	r3, r3, #5
 80061bc:	2001      	movs	r0, #1
 80061be:	fa00 f202 	lsl.w	r2, r0, r2
 80061c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80061c6:	bf00      	nop
 80061c8:	370c      	adds	r7, #12
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	e000e100 	.word	0xe000e100

080061d8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	4603      	mov	r3, r0
 80061e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80061e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	db12      	blt.n	8006210 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80061ea:	88fb      	ldrh	r3, [r7, #6]
 80061ec:	f003 021f 	and.w	r2, r3, #31
 80061f0:	490a      	ldr	r1, [pc, #40]	; (800621c <__NVIC_DisableIRQ+0x44>)
 80061f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80061f6:	095b      	lsrs	r3, r3, #5
 80061f8:	2001      	movs	r0, #1
 80061fa:	fa00 f202 	lsl.w	r2, r0, r2
 80061fe:	3320      	adds	r3, #32
 8006200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006204:	f3bf 8f4f 	dsb	sy
}
 8006208:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800620a:	f3bf 8f6f 	isb	sy
}
 800620e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr
 800621c:	e000e100 	.word	0xe000e100

08006220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	4603      	mov	r3, r0
 8006228:	6039      	str	r1, [r7, #0]
 800622a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800622c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006230:	2b00      	cmp	r3, #0
 8006232:	db0a      	blt.n	800624a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	b2da      	uxtb	r2, r3
 8006238:	490c      	ldr	r1, [pc, #48]	; (800626c <__NVIC_SetPriority+0x4c>)
 800623a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800623e:	0112      	lsls	r2, r2, #4
 8006240:	b2d2      	uxtb	r2, r2
 8006242:	440b      	add	r3, r1
 8006244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006248:	e00a      	b.n	8006260 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	b2da      	uxtb	r2, r3
 800624e:	4908      	ldr	r1, [pc, #32]	; (8006270 <__NVIC_SetPriority+0x50>)
 8006250:	88fb      	ldrh	r3, [r7, #6]
 8006252:	f003 030f 	and.w	r3, r3, #15
 8006256:	3b04      	subs	r3, #4
 8006258:	0112      	lsls	r2, r2, #4
 800625a:	b2d2      	uxtb	r2, r2
 800625c:	440b      	add	r3, r1
 800625e:	761a      	strb	r2, [r3, #24]
}
 8006260:	bf00      	nop
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr
 800626c:	e000e100 	.word	0xe000e100
 8006270:	e000ed00 	.word	0xe000ed00

08006274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006274:	b480      	push	{r7}
 8006276:	b089      	sub	sp, #36	; 0x24
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f003 0307 	and.w	r3, r3, #7
 8006286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	f1c3 0307 	rsb	r3, r3, #7
 800628e:	2b04      	cmp	r3, #4
 8006290:	bf28      	it	cs
 8006292:	2304      	movcs	r3, #4
 8006294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	3304      	adds	r3, #4
 800629a:	2b06      	cmp	r3, #6
 800629c:	d902      	bls.n	80062a4 <NVIC_EncodePriority+0x30>
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	3b03      	subs	r3, #3
 80062a2:	e000      	b.n	80062a6 <NVIC_EncodePriority+0x32>
 80062a4:	2300      	movs	r3, #0
 80062a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062a8:	f04f 32ff 	mov.w	r2, #4294967295
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	fa02 f303 	lsl.w	r3, r2, r3
 80062b2:	43da      	mvns	r2, r3
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	401a      	ands	r2, r3
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80062bc:	f04f 31ff 	mov.w	r1, #4294967295
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	fa01 f303 	lsl.w	r3, r1, r3
 80062c6:	43d9      	mvns	r1, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062cc:	4313      	orrs	r3, r2
         );
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3724      	adds	r7, #36	; 0x24
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
	...

080062dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	3b01      	subs	r3, #1
 80062e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80062ec:	d301      	bcc.n	80062f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80062ee:	2301      	movs	r3, #1
 80062f0:	e00f      	b.n	8006312 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80062f2:	4a0a      	ldr	r2, [pc, #40]	; (800631c <SysTick_Config+0x40>)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	3b01      	subs	r3, #1
 80062f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80062fa:	210f      	movs	r1, #15
 80062fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006300:	f7ff ff8e 	bl	8006220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006304:	4b05      	ldr	r3, [pc, #20]	; (800631c <SysTick_Config+0x40>)
 8006306:	2200      	movs	r2, #0
 8006308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800630a:	4b04      	ldr	r3, [pc, #16]	; (800631c <SysTick_Config+0x40>)
 800630c:	2207      	movs	r2, #7
 800630e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3708      	adds	r7, #8
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	e000e010 	.word	0xe000e010

08006320 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f7ff ff05 	bl	8006138 <__NVIC_SetPriorityGrouping>
}
 800632e:	bf00      	nop
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b086      	sub	sp, #24
 800633a:	af00      	add	r7, sp, #0
 800633c:	4603      	mov	r3, r0
 800633e:	60b9      	str	r1, [r7, #8]
 8006340:	607a      	str	r2, [r7, #4]
 8006342:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006344:	f7ff ff1c 	bl	8006180 <__NVIC_GetPriorityGrouping>
 8006348:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	68b9      	ldr	r1, [r7, #8]
 800634e:	6978      	ldr	r0, [r7, #20]
 8006350:	f7ff ff90 	bl	8006274 <NVIC_EncodePriority>
 8006354:	4602      	mov	r2, r0
 8006356:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800635a:	4611      	mov	r1, r2
 800635c:	4618      	mov	r0, r3
 800635e:	f7ff ff5f 	bl	8006220 <__NVIC_SetPriority>
}
 8006362:	bf00      	nop
 8006364:	3718      	adds	r7, #24
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b082      	sub	sp, #8
 800636e:	af00      	add	r7, sp, #0
 8006370:	4603      	mov	r3, r0
 8006372:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006374:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006378:	4618      	mov	r0, r3
 800637a:	f7ff ff0f 	bl	800619c <__NVIC_EnableIRQ>
}
 800637e:	bf00      	nop
 8006380:	3708      	adds	r7, #8
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b082      	sub	sp, #8
 800638a:	af00      	add	r7, sp, #0
 800638c:	4603      	mov	r3, r0
 800638e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006390:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006394:	4618      	mov	r0, r3
 8006396:	f7ff ff1f 	bl	80061d8 <__NVIC_DisableIRQ>
}
 800639a:	bf00      	nop
 800639c:	3708      	adds	r7, #8
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}

080063a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80063a2:	b580      	push	{r7, lr}
 80063a4:	b082      	sub	sp, #8
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f7ff ff96 	bl	80062dc <SysTick_Config>
 80063b0:	4603      	mov	r3, r0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3708      	adds	r7, #8
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
	...

080063bc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b086      	sub	sp, #24
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80063c4:	f7ff fe88 	bl	80060d8 <HAL_GetTick>
 80063c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d101      	bne.n	80063d4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e312      	b.n	80069fa <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a66      	ldr	r2, [pc, #408]	; (8006574 <HAL_DMA_Init+0x1b8>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d04a      	beq.n	8006474 <HAL_DMA_Init+0xb8>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a65      	ldr	r2, [pc, #404]	; (8006578 <HAL_DMA_Init+0x1bc>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d045      	beq.n	8006474 <HAL_DMA_Init+0xb8>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a63      	ldr	r2, [pc, #396]	; (800657c <HAL_DMA_Init+0x1c0>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d040      	beq.n	8006474 <HAL_DMA_Init+0xb8>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a62      	ldr	r2, [pc, #392]	; (8006580 <HAL_DMA_Init+0x1c4>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d03b      	beq.n	8006474 <HAL_DMA_Init+0xb8>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a60      	ldr	r2, [pc, #384]	; (8006584 <HAL_DMA_Init+0x1c8>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d036      	beq.n	8006474 <HAL_DMA_Init+0xb8>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a5f      	ldr	r2, [pc, #380]	; (8006588 <HAL_DMA_Init+0x1cc>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d031      	beq.n	8006474 <HAL_DMA_Init+0xb8>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a5d      	ldr	r2, [pc, #372]	; (800658c <HAL_DMA_Init+0x1d0>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d02c      	beq.n	8006474 <HAL_DMA_Init+0xb8>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a5c      	ldr	r2, [pc, #368]	; (8006590 <HAL_DMA_Init+0x1d4>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d027      	beq.n	8006474 <HAL_DMA_Init+0xb8>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a5a      	ldr	r2, [pc, #360]	; (8006594 <HAL_DMA_Init+0x1d8>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d022      	beq.n	8006474 <HAL_DMA_Init+0xb8>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a59      	ldr	r2, [pc, #356]	; (8006598 <HAL_DMA_Init+0x1dc>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d01d      	beq.n	8006474 <HAL_DMA_Init+0xb8>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a57      	ldr	r2, [pc, #348]	; (800659c <HAL_DMA_Init+0x1e0>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d018      	beq.n	8006474 <HAL_DMA_Init+0xb8>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a56      	ldr	r2, [pc, #344]	; (80065a0 <HAL_DMA_Init+0x1e4>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d013      	beq.n	8006474 <HAL_DMA_Init+0xb8>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a54      	ldr	r2, [pc, #336]	; (80065a4 <HAL_DMA_Init+0x1e8>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d00e      	beq.n	8006474 <HAL_DMA_Init+0xb8>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a53      	ldr	r2, [pc, #332]	; (80065a8 <HAL_DMA_Init+0x1ec>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d009      	beq.n	8006474 <HAL_DMA_Init+0xb8>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a51      	ldr	r2, [pc, #324]	; (80065ac <HAL_DMA_Init+0x1f0>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d004      	beq.n	8006474 <HAL_DMA_Init+0xb8>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a50      	ldr	r2, [pc, #320]	; (80065b0 <HAL_DMA_Init+0x1f4>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d101      	bne.n	8006478 <HAL_DMA_Init+0xbc>
 8006474:	2301      	movs	r3, #1
 8006476:	e000      	b.n	800647a <HAL_DMA_Init+0xbe>
 8006478:	2300      	movs	r3, #0
 800647a:	2b00      	cmp	r3, #0
 800647c:	f000 813c 	beq.w	80066f8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2202      	movs	r2, #2
 8006484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a37      	ldr	r2, [pc, #220]	; (8006574 <HAL_DMA_Init+0x1b8>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d04a      	beq.n	8006530 <HAL_DMA_Init+0x174>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a36      	ldr	r2, [pc, #216]	; (8006578 <HAL_DMA_Init+0x1bc>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d045      	beq.n	8006530 <HAL_DMA_Init+0x174>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a34      	ldr	r2, [pc, #208]	; (800657c <HAL_DMA_Init+0x1c0>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d040      	beq.n	8006530 <HAL_DMA_Init+0x174>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a33      	ldr	r2, [pc, #204]	; (8006580 <HAL_DMA_Init+0x1c4>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d03b      	beq.n	8006530 <HAL_DMA_Init+0x174>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a31      	ldr	r2, [pc, #196]	; (8006584 <HAL_DMA_Init+0x1c8>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d036      	beq.n	8006530 <HAL_DMA_Init+0x174>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a30      	ldr	r2, [pc, #192]	; (8006588 <HAL_DMA_Init+0x1cc>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d031      	beq.n	8006530 <HAL_DMA_Init+0x174>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a2e      	ldr	r2, [pc, #184]	; (800658c <HAL_DMA_Init+0x1d0>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d02c      	beq.n	8006530 <HAL_DMA_Init+0x174>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a2d      	ldr	r2, [pc, #180]	; (8006590 <HAL_DMA_Init+0x1d4>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d027      	beq.n	8006530 <HAL_DMA_Init+0x174>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a2b      	ldr	r2, [pc, #172]	; (8006594 <HAL_DMA_Init+0x1d8>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d022      	beq.n	8006530 <HAL_DMA_Init+0x174>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a2a      	ldr	r2, [pc, #168]	; (8006598 <HAL_DMA_Init+0x1dc>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d01d      	beq.n	8006530 <HAL_DMA_Init+0x174>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a28      	ldr	r2, [pc, #160]	; (800659c <HAL_DMA_Init+0x1e0>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d018      	beq.n	8006530 <HAL_DMA_Init+0x174>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a27      	ldr	r2, [pc, #156]	; (80065a0 <HAL_DMA_Init+0x1e4>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d013      	beq.n	8006530 <HAL_DMA_Init+0x174>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a25      	ldr	r2, [pc, #148]	; (80065a4 <HAL_DMA_Init+0x1e8>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d00e      	beq.n	8006530 <HAL_DMA_Init+0x174>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a24      	ldr	r2, [pc, #144]	; (80065a8 <HAL_DMA_Init+0x1ec>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d009      	beq.n	8006530 <HAL_DMA_Init+0x174>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a22      	ldr	r2, [pc, #136]	; (80065ac <HAL_DMA_Init+0x1f0>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d004      	beq.n	8006530 <HAL_DMA_Init+0x174>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a21      	ldr	r2, [pc, #132]	; (80065b0 <HAL_DMA_Init+0x1f4>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d108      	bne.n	8006542 <HAL_DMA_Init+0x186>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f022 0201 	bic.w	r2, r2, #1
 800653e:	601a      	str	r2, [r3, #0]
 8006540:	e007      	b.n	8006552 <HAL_DMA_Init+0x196>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f022 0201 	bic.w	r2, r2, #1
 8006550:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006552:	e02f      	b.n	80065b4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006554:	f7ff fdc0 	bl	80060d8 <HAL_GetTick>
 8006558:	4602      	mov	r2, r0
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	2b05      	cmp	r3, #5
 8006560:	d928      	bls.n	80065b4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2220      	movs	r2, #32
 8006566:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2203      	movs	r2, #3
 800656c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e242      	b.n	80069fa <HAL_DMA_Init+0x63e>
 8006574:	40020010 	.word	0x40020010
 8006578:	40020028 	.word	0x40020028
 800657c:	40020040 	.word	0x40020040
 8006580:	40020058 	.word	0x40020058
 8006584:	40020070 	.word	0x40020070
 8006588:	40020088 	.word	0x40020088
 800658c:	400200a0 	.word	0x400200a0
 8006590:	400200b8 	.word	0x400200b8
 8006594:	40020410 	.word	0x40020410
 8006598:	40020428 	.word	0x40020428
 800659c:	40020440 	.word	0x40020440
 80065a0:	40020458 	.word	0x40020458
 80065a4:	40020470 	.word	0x40020470
 80065a8:	40020488 	.word	0x40020488
 80065ac:	400204a0 	.word	0x400204a0
 80065b0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0301 	and.w	r3, r3, #1
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1c8      	bne.n	8006554 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	4b83      	ldr	r3, [pc, #524]	; (80067dc <HAL_DMA_Init+0x420>)
 80065ce:	4013      	ands	r3, r2
 80065d0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80065da:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065e6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065f2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a1b      	ldr	r3, [r3, #32]
 80065f8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006604:	2b04      	cmp	r3, #4
 8006606:	d107      	bne.n	8006618 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006610:	4313      	orrs	r3, r2
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	4313      	orrs	r3, r2
 8006616:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	2b28      	cmp	r3, #40	; 0x28
 800661e:	d903      	bls.n	8006628 <HAL_DMA_Init+0x26c>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	2b2e      	cmp	r3, #46	; 0x2e
 8006626:	d91f      	bls.n	8006668 <HAL_DMA_Init+0x2ac>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	2b3e      	cmp	r3, #62	; 0x3e
 800662e:	d903      	bls.n	8006638 <HAL_DMA_Init+0x27c>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	2b42      	cmp	r3, #66	; 0x42
 8006636:	d917      	bls.n	8006668 <HAL_DMA_Init+0x2ac>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	2b46      	cmp	r3, #70	; 0x46
 800663e:	d903      	bls.n	8006648 <HAL_DMA_Init+0x28c>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	2b48      	cmp	r3, #72	; 0x48
 8006646:	d90f      	bls.n	8006668 <HAL_DMA_Init+0x2ac>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	2b4e      	cmp	r3, #78	; 0x4e
 800664e:	d903      	bls.n	8006658 <HAL_DMA_Init+0x29c>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	2b52      	cmp	r3, #82	; 0x52
 8006656:	d907      	bls.n	8006668 <HAL_DMA_Init+0x2ac>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	2b73      	cmp	r3, #115	; 0x73
 800665e:	d905      	bls.n	800666c <HAL_DMA_Init+0x2b0>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	2b77      	cmp	r3, #119	; 0x77
 8006666:	d801      	bhi.n	800666c <HAL_DMA_Init+0x2b0>
 8006668:	2301      	movs	r3, #1
 800666a:	e000      	b.n	800666e <HAL_DMA_Init+0x2b2>
 800666c:	2300      	movs	r3, #0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d003      	beq.n	800667a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006678:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	695b      	ldr	r3, [r3, #20]
 8006688:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	f023 0307 	bic.w	r3, r3, #7
 8006690:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006696:	697a      	ldr	r2, [r7, #20]
 8006698:	4313      	orrs	r3, r2
 800669a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a0:	2b04      	cmp	r3, #4
 80066a2:	d117      	bne.n	80066d4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a8:	697a      	ldr	r2, [r7, #20]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00e      	beq.n	80066d4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f002 fce4 	bl	8009084 <DMA_CheckFifoParam>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d008      	beq.n	80066d4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2240      	movs	r2, #64	; 0x40
 80066c6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e192      	b.n	80069fa <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	697a      	ldr	r2, [r7, #20]
 80066da:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f002 fc1f 	bl	8008f20 <DMA_CalcBaseAndBitshift>
 80066e2:	4603      	mov	r3, r0
 80066e4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ea:	f003 031f 	and.w	r3, r3, #31
 80066ee:	223f      	movs	r2, #63	; 0x3f
 80066f0:	409a      	lsls	r2, r3
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	609a      	str	r2, [r3, #8]
 80066f6:	e0c8      	b.n	800688a <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a38      	ldr	r2, [pc, #224]	; (80067e0 <HAL_DMA_Init+0x424>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d022      	beq.n	8006748 <HAL_DMA_Init+0x38c>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a37      	ldr	r2, [pc, #220]	; (80067e4 <HAL_DMA_Init+0x428>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d01d      	beq.n	8006748 <HAL_DMA_Init+0x38c>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a35      	ldr	r2, [pc, #212]	; (80067e8 <HAL_DMA_Init+0x42c>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d018      	beq.n	8006748 <HAL_DMA_Init+0x38c>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a34      	ldr	r2, [pc, #208]	; (80067ec <HAL_DMA_Init+0x430>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d013      	beq.n	8006748 <HAL_DMA_Init+0x38c>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a32      	ldr	r2, [pc, #200]	; (80067f0 <HAL_DMA_Init+0x434>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d00e      	beq.n	8006748 <HAL_DMA_Init+0x38c>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a31      	ldr	r2, [pc, #196]	; (80067f4 <HAL_DMA_Init+0x438>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d009      	beq.n	8006748 <HAL_DMA_Init+0x38c>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a2f      	ldr	r2, [pc, #188]	; (80067f8 <HAL_DMA_Init+0x43c>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d004      	beq.n	8006748 <HAL_DMA_Init+0x38c>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a2e      	ldr	r2, [pc, #184]	; (80067fc <HAL_DMA_Init+0x440>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d101      	bne.n	800674c <HAL_DMA_Init+0x390>
 8006748:	2301      	movs	r3, #1
 800674a:	e000      	b.n	800674e <HAL_DMA_Init+0x392>
 800674c:	2300      	movs	r3, #0
 800674e:	2b00      	cmp	r3, #0
 8006750:	f000 8092 	beq.w	8006878 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a21      	ldr	r2, [pc, #132]	; (80067e0 <HAL_DMA_Init+0x424>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d021      	beq.n	80067a2 <HAL_DMA_Init+0x3e6>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a20      	ldr	r2, [pc, #128]	; (80067e4 <HAL_DMA_Init+0x428>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d01c      	beq.n	80067a2 <HAL_DMA_Init+0x3e6>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a1e      	ldr	r2, [pc, #120]	; (80067e8 <HAL_DMA_Init+0x42c>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d017      	beq.n	80067a2 <HAL_DMA_Init+0x3e6>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a1d      	ldr	r2, [pc, #116]	; (80067ec <HAL_DMA_Init+0x430>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d012      	beq.n	80067a2 <HAL_DMA_Init+0x3e6>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a1b      	ldr	r2, [pc, #108]	; (80067f0 <HAL_DMA_Init+0x434>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d00d      	beq.n	80067a2 <HAL_DMA_Init+0x3e6>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a1a      	ldr	r2, [pc, #104]	; (80067f4 <HAL_DMA_Init+0x438>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d008      	beq.n	80067a2 <HAL_DMA_Init+0x3e6>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a18      	ldr	r2, [pc, #96]	; (80067f8 <HAL_DMA_Init+0x43c>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d003      	beq.n	80067a2 <HAL_DMA_Init+0x3e6>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a17      	ldr	r2, [pc, #92]	; (80067fc <HAL_DMA_Init+0x440>)
 80067a0:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2202      	movs	r2, #2
 80067a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80067ba:	697a      	ldr	r2, [r7, #20]
 80067bc:	4b10      	ldr	r3, [pc, #64]	; (8006800 <HAL_DMA_Init+0x444>)
 80067be:	4013      	ands	r3, r2
 80067c0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	2b40      	cmp	r3, #64	; 0x40
 80067c8:	d01c      	beq.n	8006804 <HAL_DMA_Init+0x448>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	2b80      	cmp	r3, #128	; 0x80
 80067d0:	d102      	bne.n	80067d8 <HAL_DMA_Init+0x41c>
 80067d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80067d6:	e016      	b.n	8006806 <HAL_DMA_Init+0x44a>
 80067d8:	2300      	movs	r3, #0
 80067da:	e014      	b.n	8006806 <HAL_DMA_Init+0x44a>
 80067dc:	fe10803f 	.word	0xfe10803f
 80067e0:	58025408 	.word	0x58025408
 80067e4:	5802541c 	.word	0x5802541c
 80067e8:	58025430 	.word	0x58025430
 80067ec:	58025444 	.word	0x58025444
 80067f0:	58025458 	.word	0x58025458
 80067f4:	5802546c 	.word	0x5802546c
 80067f8:	58025480 	.word	0x58025480
 80067fc:	58025494 	.word	0x58025494
 8006800:	fffe000f 	.word	0xfffe000f
 8006804:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	68d2      	ldr	r2, [r2, #12]
 800680a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800680c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006814:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800681c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006824:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	69db      	ldr	r3, [r3, #28]
 800682a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800682c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a1b      	ldr	r3, [r3, #32]
 8006832:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006834:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	4313      	orrs	r3, r2
 800683a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	697a      	ldr	r2, [r7, #20]
 8006842:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	461a      	mov	r2, r3
 800684a:	4b6e      	ldr	r3, [pc, #440]	; (8006a04 <HAL_DMA_Init+0x648>)
 800684c:	4413      	add	r3, r2
 800684e:	4a6e      	ldr	r2, [pc, #440]	; (8006a08 <HAL_DMA_Init+0x64c>)
 8006850:	fba2 2303 	umull	r2, r3, r2, r3
 8006854:	091b      	lsrs	r3, r3, #4
 8006856:	009a      	lsls	r2, r3, #2
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f002 fb5f 	bl	8008f20 <DMA_CalcBaseAndBitshift>
 8006862:	4603      	mov	r3, r0
 8006864:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800686a:	f003 031f 	and.w	r3, r3, #31
 800686e:	2201      	movs	r2, #1
 8006870:	409a      	lsls	r2, r3
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	605a      	str	r2, [r3, #4]
 8006876:	e008      	b.n	800688a <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2240      	movs	r2, #64	; 0x40
 800687c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2203      	movs	r2, #3
 8006882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e0b7      	b.n	80069fa <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a5f      	ldr	r2, [pc, #380]	; (8006a0c <HAL_DMA_Init+0x650>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d072      	beq.n	800697a <HAL_DMA_Init+0x5be>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a5d      	ldr	r2, [pc, #372]	; (8006a10 <HAL_DMA_Init+0x654>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d06d      	beq.n	800697a <HAL_DMA_Init+0x5be>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a5c      	ldr	r2, [pc, #368]	; (8006a14 <HAL_DMA_Init+0x658>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d068      	beq.n	800697a <HAL_DMA_Init+0x5be>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a5a      	ldr	r2, [pc, #360]	; (8006a18 <HAL_DMA_Init+0x65c>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d063      	beq.n	800697a <HAL_DMA_Init+0x5be>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a59      	ldr	r2, [pc, #356]	; (8006a1c <HAL_DMA_Init+0x660>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d05e      	beq.n	800697a <HAL_DMA_Init+0x5be>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a57      	ldr	r2, [pc, #348]	; (8006a20 <HAL_DMA_Init+0x664>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d059      	beq.n	800697a <HAL_DMA_Init+0x5be>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a56      	ldr	r2, [pc, #344]	; (8006a24 <HAL_DMA_Init+0x668>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d054      	beq.n	800697a <HAL_DMA_Init+0x5be>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a54      	ldr	r2, [pc, #336]	; (8006a28 <HAL_DMA_Init+0x66c>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d04f      	beq.n	800697a <HAL_DMA_Init+0x5be>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a53      	ldr	r2, [pc, #332]	; (8006a2c <HAL_DMA_Init+0x670>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d04a      	beq.n	800697a <HAL_DMA_Init+0x5be>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a51      	ldr	r2, [pc, #324]	; (8006a30 <HAL_DMA_Init+0x674>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d045      	beq.n	800697a <HAL_DMA_Init+0x5be>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a50      	ldr	r2, [pc, #320]	; (8006a34 <HAL_DMA_Init+0x678>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d040      	beq.n	800697a <HAL_DMA_Init+0x5be>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a4e      	ldr	r2, [pc, #312]	; (8006a38 <HAL_DMA_Init+0x67c>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d03b      	beq.n	800697a <HAL_DMA_Init+0x5be>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a4d      	ldr	r2, [pc, #308]	; (8006a3c <HAL_DMA_Init+0x680>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d036      	beq.n	800697a <HAL_DMA_Init+0x5be>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a4b      	ldr	r2, [pc, #300]	; (8006a40 <HAL_DMA_Init+0x684>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d031      	beq.n	800697a <HAL_DMA_Init+0x5be>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a4a      	ldr	r2, [pc, #296]	; (8006a44 <HAL_DMA_Init+0x688>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d02c      	beq.n	800697a <HAL_DMA_Init+0x5be>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a48      	ldr	r2, [pc, #288]	; (8006a48 <HAL_DMA_Init+0x68c>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d027      	beq.n	800697a <HAL_DMA_Init+0x5be>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a47      	ldr	r2, [pc, #284]	; (8006a4c <HAL_DMA_Init+0x690>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d022      	beq.n	800697a <HAL_DMA_Init+0x5be>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a45      	ldr	r2, [pc, #276]	; (8006a50 <HAL_DMA_Init+0x694>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d01d      	beq.n	800697a <HAL_DMA_Init+0x5be>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a44      	ldr	r2, [pc, #272]	; (8006a54 <HAL_DMA_Init+0x698>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d018      	beq.n	800697a <HAL_DMA_Init+0x5be>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a42      	ldr	r2, [pc, #264]	; (8006a58 <HAL_DMA_Init+0x69c>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d013      	beq.n	800697a <HAL_DMA_Init+0x5be>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a41      	ldr	r2, [pc, #260]	; (8006a5c <HAL_DMA_Init+0x6a0>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d00e      	beq.n	800697a <HAL_DMA_Init+0x5be>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a3f      	ldr	r2, [pc, #252]	; (8006a60 <HAL_DMA_Init+0x6a4>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d009      	beq.n	800697a <HAL_DMA_Init+0x5be>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a3e      	ldr	r2, [pc, #248]	; (8006a64 <HAL_DMA_Init+0x6a8>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d004      	beq.n	800697a <HAL_DMA_Init+0x5be>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a3c      	ldr	r2, [pc, #240]	; (8006a68 <HAL_DMA_Init+0x6ac>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d101      	bne.n	800697e <HAL_DMA_Init+0x5c2>
 800697a:	2301      	movs	r3, #1
 800697c:	e000      	b.n	8006980 <HAL_DMA_Init+0x5c4>
 800697e:	2300      	movs	r3, #0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d032      	beq.n	80069ea <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f002 fbf9 	bl	800917c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	2b80      	cmp	r3, #128	; 0x80
 8006990:	d102      	bne.n	8006998 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685a      	ldr	r2, [r3, #4]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069a0:	b2d2      	uxtb	r2, r2
 80069a2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80069ac:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d010      	beq.n	80069d8 <HAL_DMA_Init+0x61c>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	2b08      	cmp	r3, #8
 80069bc:	d80c      	bhi.n	80069d8 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f002 fc76 	bl	80092b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069c8:	2200      	movs	r2, #0
 80069ca:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80069d4:	605a      	str	r2, [r3, #4]
 80069d6:	e008      	b.n	80069ea <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3718      	adds	r7, #24
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	a7fdabf8 	.word	0xa7fdabf8
 8006a08:	cccccccd 	.word	0xcccccccd
 8006a0c:	40020010 	.word	0x40020010
 8006a10:	40020028 	.word	0x40020028
 8006a14:	40020040 	.word	0x40020040
 8006a18:	40020058 	.word	0x40020058
 8006a1c:	40020070 	.word	0x40020070
 8006a20:	40020088 	.word	0x40020088
 8006a24:	400200a0 	.word	0x400200a0
 8006a28:	400200b8 	.word	0x400200b8
 8006a2c:	40020410 	.word	0x40020410
 8006a30:	40020428 	.word	0x40020428
 8006a34:	40020440 	.word	0x40020440
 8006a38:	40020458 	.word	0x40020458
 8006a3c:	40020470 	.word	0x40020470
 8006a40:	40020488 	.word	0x40020488
 8006a44:	400204a0 	.word	0x400204a0
 8006a48:	400204b8 	.word	0x400204b8
 8006a4c:	58025408 	.word	0x58025408
 8006a50:	5802541c 	.word	0x5802541c
 8006a54:	58025430 	.word	0x58025430
 8006a58:	58025444 	.word	0x58025444
 8006a5c:	58025458 	.word	0x58025458
 8006a60:	5802546c 	.word	0x5802546c
 8006a64:	58025480 	.word	0x58025480
 8006a68:	58025494 	.word	0x58025494

08006a6c <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d101      	bne.n	8006a7e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e1a8      	b.n	8006dd0 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a82      	ldr	r2, [pc, #520]	; (8006c8c <HAL_DMA_DeInit+0x220>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d04a      	beq.n	8006b1e <HAL_DMA_DeInit+0xb2>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a80      	ldr	r2, [pc, #512]	; (8006c90 <HAL_DMA_DeInit+0x224>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d045      	beq.n	8006b1e <HAL_DMA_DeInit+0xb2>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a7f      	ldr	r2, [pc, #508]	; (8006c94 <HAL_DMA_DeInit+0x228>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d040      	beq.n	8006b1e <HAL_DMA_DeInit+0xb2>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a7d      	ldr	r2, [pc, #500]	; (8006c98 <HAL_DMA_DeInit+0x22c>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d03b      	beq.n	8006b1e <HAL_DMA_DeInit+0xb2>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a7c      	ldr	r2, [pc, #496]	; (8006c9c <HAL_DMA_DeInit+0x230>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d036      	beq.n	8006b1e <HAL_DMA_DeInit+0xb2>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a7a      	ldr	r2, [pc, #488]	; (8006ca0 <HAL_DMA_DeInit+0x234>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d031      	beq.n	8006b1e <HAL_DMA_DeInit+0xb2>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a79      	ldr	r2, [pc, #484]	; (8006ca4 <HAL_DMA_DeInit+0x238>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d02c      	beq.n	8006b1e <HAL_DMA_DeInit+0xb2>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a77      	ldr	r2, [pc, #476]	; (8006ca8 <HAL_DMA_DeInit+0x23c>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d027      	beq.n	8006b1e <HAL_DMA_DeInit+0xb2>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a76      	ldr	r2, [pc, #472]	; (8006cac <HAL_DMA_DeInit+0x240>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d022      	beq.n	8006b1e <HAL_DMA_DeInit+0xb2>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a74      	ldr	r2, [pc, #464]	; (8006cb0 <HAL_DMA_DeInit+0x244>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d01d      	beq.n	8006b1e <HAL_DMA_DeInit+0xb2>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a73      	ldr	r2, [pc, #460]	; (8006cb4 <HAL_DMA_DeInit+0x248>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d018      	beq.n	8006b1e <HAL_DMA_DeInit+0xb2>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a71      	ldr	r2, [pc, #452]	; (8006cb8 <HAL_DMA_DeInit+0x24c>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d013      	beq.n	8006b1e <HAL_DMA_DeInit+0xb2>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a70      	ldr	r2, [pc, #448]	; (8006cbc <HAL_DMA_DeInit+0x250>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d00e      	beq.n	8006b1e <HAL_DMA_DeInit+0xb2>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a6e      	ldr	r2, [pc, #440]	; (8006cc0 <HAL_DMA_DeInit+0x254>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d009      	beq.n	8006b1e <HAL_DMA_DeInit+0xb2>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a6d      	ldr	r2, [pc, #436]	; (8006cc4 <HAL_DMA_DeInit+0x258>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d004      	beq.n	8006b1e <HAL_DMA_DeInit+0xb2>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a6b      	ldr	r2, [pc, #428]	; (8006cc8 <HAL_DMA_DeInit+0x25c>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d108      	bne.n	8006b30 <HAL_DMA_DeInit+0xc4>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f022 0201 	bic.w	r2, r2, #1
 8006b2c:	601a      	str	r2, [r3, #0]
 8006b2e:	e007      	b.n	8006b40 <HAL_DMA_DeInit+0xd4>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f022 0201 	bic.w	r2, r2, #1
 8006b3e:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a51      	ldr	r2, [pc, #324]	; (8006c8c <HAL_DMA_DeInit+0x220>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d04a      	beq.n	8006be0 <HAL_DMA_DeInit+0x174>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a50      	ldr	r2, [pc, #320]	; (8006c90 <HAL_DMA_DeInit+0x224>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d045      	beq.n	8006be0 <HAL_DMA_DeInit+0x174>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a4e      	ldr	r2, [pc, #312]	; (8006c94 <HAL_DMA_DeInit+0x228>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d040      	beq.n	8006be0 <HAL_DMA_DeInit+0x174>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a4d      	ldr	r2, [pc, #308]	; (8006c98 <HAL_DMA_DeInit+0x22c>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d03b      	beq.n	8006be0 <HAL_DMA_DeInit+0x174>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a4b      	ldr	r2, [pc, #300]	; (8006c9c <HAL_DMA_DeInit+0x230>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d036      	beq.n	8006be0 <HAL_DMA_DeInit+0x174>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a4a      	ldr	r2, [pc, #296]	; (8006ca0 <HAL_DMA_DeInit+0x234>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d031      	beq.n	8006be0 <HAL_DMA_DeInit+0x174>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a48      	ldr	r2, [pc, #288]	; (8006ca4 <HAL_DMA_DeInit+0x238>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d02c      	beq.n	8006be0 <HAL_DMA_DeInit+0x174>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a47      	ldr	r2, [pc, #284]	; (8006ca8 <HAL_DMA_DeInit+0x23c>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d027      	beq.n	8006be0 <HAL_DMA_DeInit+0x174>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a45      	ldr	r2, [pc, #276]	; (8006cac <HAL_DMA_DeInit+0x240>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d022      	beq.n	8006be0 <HAL_DMA_DeInit+0x174>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a44      	ldr	r2, [pc, #272]	; (8006cb0 <HAL_DMA_DeInit+0x244>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d01d      	beq.n	8006be0 <HAL_DMA_DeInit+0x174>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a42      	ldr	r2, [pc, #264]	; (8006cb4 <HAL_DMA_DeInit+0x248>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d018      	beq.n	8006be0 <HAL_DMA_DeInit+0x174>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a41      	ldr	r2, [pc, #260]	; (8006cb8 <HAL_DMA_DeInit+0x24c>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d013      	beq.n	8006be0 <HAL_DMA_DeInit+0x174>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a3f      	ldr	r2, [pc, #252]	; (8006cbc <HAL_DMA_DeInit+0x250>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d00e      	beq.n	8006be0 <HAL_DMA_DeInit+0x174>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a3e      	ldr	r2, [pc, #248]	; (8006cc0 <HAL_DMA_DeInit+0x254>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d009      	beq.n	8006be0 <HAL_DMA_DeInit+0x174>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a3c      	ldr	r2, [pc, #240]	; (8006cc4 <HAL_DMA_DeInit+0x258>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d004      	beq.n	8006be0 <HAL_DMA_DeInit+0x174>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a3b      	ldr	r2, [pc, #236]	; (8006cc8 <HAL_DMA_DeInit+0x25c>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d101      	bne.n	8006be4 <HAL_DMA_DeInit+0x178>
 8006be0:	2301      	movs	r3, #1
 8006be2:	e000      	b.n	8006be6 <HAL_DMA_DeInit+0x17a>
 8006be4:	2300      	movs	r3, #0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d025      	beq.n	8006c36 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2200      	movs	r2, #0
 8006c08:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2221      	movs	r2, #33	; 0x21
 8006c18:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f002 f980 	bl	8008f20 <DMA_CalcBaseAndBitshift>
 8006c20:	4603      	mov	r3, r0
 8006c22:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c28:	f003 031f 	and.w	r3, r3, #31
 8006c2c:	223f      	movs	r2, #63	; 0x3f
 8006c2e:	409a      	lsls	r2, r3
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	609a      	str	r2, [r3, #8]
 8006c34:	e081      	b.n	8006d3a <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a24      	ldr	r2, [pc, #144]	; (8006ccc <HAL_DMA_DeInit+0x260>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d022      	beq.n	8006c86 <HAL_DMA_DeInit+0x21a>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a22      	ldr	r2, [pc, #136]	; (8006cd0 <HAL_DMA_DeInit+0x264>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d01d      	beq.n	8006c86 <HAL_DMA_DeInit+0x21a>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a21      	ldr	r2, [pc, #132]	; (8006cd4 <HAL_DMA_DeInit+0x268>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d018      	beq.n	8006c86 <HAL_DMA_DeInit+0x21a>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a1f      	ldr	r2, [pc, #124]	; (8006cd8 <HAL_DMA_DeInit+0x26c>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d013      	beq.n	8006c86 <HAL_DMA_DeInit+0x21a>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a1e      	ldr	r2, [pc, #120]	; (8006cdc <HAL_DMA_DeInit+0x270>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d00e      	beq.n	8006c86 <HAL_DMA_DeInit+0x21a>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a1c      	ldr	r2, [pc, #112]	; (8006ce0 <HAL_DMA_DeInit+0x274>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d009      	beq.n	8006c86 <HAL_DMA_DeInit+0x21a>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a1b      	ldr	r2, [pc, #108]	; (8006ce4 <HAL_DMA_DeInit+0x278>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d004      	beq.n	8006c86 <HAL_DMA_DeInit+0x21a>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a19      	ldr	r2, [pc, #100]	; (8006ce8 <HAL_DMA_DeInit+0x27c>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d132      	bne.n	8006cec <HAL_DMA_DeInit+0x280>
 8006c86:	2301      	movs	r3, #1
 8006c88:	e031      	b.n	8006cee <HAL_DMA_DeInit+0x282>
 8006c8a:	bf00      	nop
 8006c8c:	40020010 	.word	0x40020010
 8006c90:	40020028 	.word	0x40020028
 8006c94:	40020040 	.word	0x40020040
 8006c98:	40020058 	.word	0x40020058
 8006c9c:	40020070 	.word	0x40020070
 8006ca0:	40020088 	.word	0x40020088
 8006ca4:	400200a0 	.word	0x400200a0
 8006ca8:	400200b8 	.word	0x400200b8
 8006cac:	40020410 	.word	0x40020410
 8006cb0:	40020428 	.word	0x40020428
 8006cb4:	40020440 	.word	0x40020440
 8006cb8:	40020458 	.word	0x40020458
 8006cbc:	40020470 	.word	0x40020470
 8006cc0:	40020488 	.word	0x40020488
 8006cc4:	400204a0 	.word	0x400204a0
 8006cc8:	400204b8 	.word	0x400204b8
 8006ccc:	58025408 	.word	0x58025408
 8006cd0:	5802541c 	.word	0x5802541c
 8006cd4:	58025430 	.word	0x58025430
 8006cd8:	58025444 	.word	0x58025444
 8006cdc:	58025458 	.word	0x58025458
 8006ce0:	5802546c 	.word	0x5802546c
 8006ce4:	58025480 	.word	0x58025480
 8006ce8:	58025494 	.word	0x58025494
 8006cec:	2300      	movs	r3, #0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d021      	beq.n	8006d36 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2200      	movs	r2, #0
 8006d08:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2200      	movs	r2, #0
 8006d18:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f002 f900 	bl	8008f20 <DMA_CalcBaseAndBitshift>
 8006d20:	4603      	mov	r3, r0
 8006d22:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d28:	f003 031f 	and.w	r3, r3, #31
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	409a      	lsls	r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	605a      	str	r2, [r3, #4]
 8006d34:	e001      	b.n	8006d3a <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e04a      	b.n	8006dd0 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f002 fa1e 	bl	800917c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d008      	beq.n	8006d5a <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006d58:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00f      	beq.n	8006d82 <HAL_DMA_DeInit+0x316>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	2b08      	cmp	r3, #8
 8006d68:	d80b      	bhi.n	8006d82 <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f002 faa0 	bl	80092b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d74:	2200      	movs	r2, #0
 8006d76:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006d80:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3710      	adds	r7, #16
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b086      	sub	sp, #24
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
 8006de4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006de6:	2300      	movs	r3, #0
 8006de8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d101      	bne.n	8006df4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	e226      	b.n	8007242 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d101      	bne.n	8006e02 <HAL_DMA_Start_IT+0x2a>
 8006dfe:	2302      	movs	r3, #2
 8006e00:	e21f      	b.n	8007242 <HAL_DMA_Start_IT+0x46a>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	f040 820a 	bne.w	800722c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2202      	movs	r2, #2
 8006e1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a68      	ldr	r2, [pc, #416]	; (8006fcc <HAL_DMA_Start_IT+0x1f4>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d04a      	beq.n	8006ec6 <HAL_DMA_Start_IT+0xee>
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a66      	ldr	r2, [pc, #408]	; (8006fd0 <HAL_DMA_Start_IT+0x1f8>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d045      	beq.n	8006ec6 <HAL_DMA_Start_IT+0xee>
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a65      	ldr	r2, [pc, #404]	; (8006fd4 <HAL_DMA_Start_IT+0x1fc>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d040      	beq.n	8006ec6 <HAL_DMA_Start_IT+0xee>
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a63      	ldr	r2, [pc, #396]	; (8006fd8 <HAL_DMA_Start_IT+0x200>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d03b      	beq.n	8006ec6 <HAL_DMA_Start_IT+0xee>
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a62      	ldr	r2, [pc, #392]	; (8006fdc <HAL_DMA_Start_IT+0x204>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d036      	beq.n	8006ec6 <HAL_DMA_Start_IT+0xee>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a60      	ldr	r2, [pc, #384]	; (8006fe0 <HAL_DMA_Start_IT+0x208>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d031      	beq.n	8006ec6 <HAL_DMA_Start_IT+0xee>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a5f      	ldr	r2, [pc, #380]	; (8006fe4 <HAL_DMA_Start_IT+0x20c>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d02c      	beq.n	8006ec6 <HAL_DMA_Start_IT+0xee>
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a5d      	ldr	r2, [pc, #372]	; (8006fe8 <HAL_DMA_Start_IT+0x210>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d027      	beq.n	8006ec6 <HAL_DMA_Start_IT+0xee>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a5c      	ldr	r2, [pc, #368]	; (8006fec <HAL_DMA_Start_IT+0x214>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d022      	beq.n	8006ec6 <HAL_DMA_Start_IT+0xee>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a5a      	ldr	r2, [pc, #360]	; (8006ff0 <HAL_DMA_Start_IT+0x218>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d01d      	beq.n	8006ec6 <HAL_DMA_Start_IT+0xee>
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a59      	ldr	r2, [pc, #356]	; (8006ff4 <HAL_DMA_Start_IT+0x21c>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d018      	beq.n	8006ec6 <HAL_DMA_Start_IT+0xee>
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a57      	ldr	r2, [pc, #348]	; (8006ff8 <HAL_DMA_Start_IT+0x220>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d013      	beq.n	8006ec6 <HAL_DMA_Start_IT+0xee>
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a56      	ldr	r2, [pc, #344]	; (8006ffc <HAL_DMA_Start_IT+0x224>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d00e      	beq.n	8006ec6 <HAL_DMA_Start_IT+0xee>
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a54      	ldr	r2, [pc, #336]	; (8007000 <HAL_DMA_Start_IT+0x228>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d009      	beq.n	8006ec6 <HAL_DMA_Start_IT+0xee>
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a53      	ldr	r2, [pc, #332]	; (8007004 <HAL_DMA_Start_IT+0x22c>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d004      	beq.n	8006ec6 <HAL_DMA_Start_IT+0xee>
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a51      	ldr	r2, [pc, #324]	; (8007008 <HAL_DMA_Start_IT+0x230>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d108      	bne.n	8006ed8 <HAL_DMA_Start_IT+0x100>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f022 0201 	bic.w	r2, r2, #1
 8006ed4:	601a      	str	r2, [r3, #0]
 8006ed6:	e007      	b.n	8006ee8 <HAL_DMA_Start_IT+0x110>
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f022 0201 	bic.w	r2, r2, #1
 8006ee6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	68b9      	ldr	r1, [r7, #8]
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	f001 fe6a 	bl	8008bc8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a34      	ldr	r2, [pc, #208]	; (8006fcc <HAL_DMA_Start_IT+0x1f4>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d04a      	beq.n	8006f94 <HAL_DMA_Start_IT+0x1bc>
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a33      	ldr	r2, [pc, #204]	; (8006fd0 <HAL_DMA_Start_IT+0x1f8>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d045      	beq.n	8006f94 <HAL_DMA_Start_IT+0x1bc>
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a31      	ldr	r2, [pc, #196]	; (8006fd4 <HAL_DMA_Start_IT+0x1fc>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d040      	beq.n	8006f94 <HAL_DMA_Start_IT+0x1bc>
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a30      	ldr	r2, [pc, #192]	; (8006fd8 <HAL_DMA_Start_IT+0x200>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d03b      	beq.n	8006f94 <HAL_DMA_Start_IT+0x1bc>
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a2e      	ldr	r2, [pc, #184]	; (8006fdc <HAL_DMA_Start_IT+0x204>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d036      	beq.n	8006f94 <HAL_DMA_Start_IT+0x1bc>
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a2d      	ldr	r2, [pc, #180]	; (8006fe0 <HAL_DMA_Start_IT+0x208>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d031      	beq.n	8006f94 <HAL_DMA_Start_IT+0x1bc>
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a2b      	ldr	r2, [pc, #172]	; (8006fe4 <HAL_DMA_Start_IT+0x20c>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d02c      	beq.n	8006f94 <HAL_DMA_Start_IT+0x1bc>
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a2a      	ldr	r2, [pc, #168]	; (8006fe8 <HAL_DMA_Start_IT+0x210>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d027      	beq.n	8006f94 <HAL_DMA_Start_IT+0x1bc>
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a28      	ldr	r2, [pc, #160]	; (8006fec <HAL_DMA_Start_IT+0x214>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d022      	beq.n	8006f94 <HAL_DMA_Start_IT+0x1bc>
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a27      	ldr	r2, [pc, #156]	; (8006ff0 <HAL_DMA_Start_IT+0x218>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d01d      	beq.n	8006f94 <HAL_DMA_Start_IT+0x1bc>
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a25      	ldr	r2, [pc, #148]	; (8006ff4 <HAL_DMA_Start_IT+0x21c>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d018      	beq.n	8006f94 <HAL_DMA_Start_IT+0x1bc>
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a24      	ldr	r2, [pc, #144]	; (8006ff8 <HAL_DMA_Start_IT+0x220>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d013      	beq.n	8006f94 <HAL_DMA_Start_IT+0x1bc>
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a22      	ldr	r2, [pc, #136]	; (8006ffc <HAL_DMA_Start_IT+0x224>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d00e      	beq.n	8006f94 <HAL_DMA_Start_IT+0x1bc>
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a21      	ldr	r2, [pc, #132]	; (8007000 <HAL_DMA_Start_IT+0x228>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d009      	beq.n	8006f94 <HAL_DMA_Start_IT+0x1bc>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a1f      	ldr	r2, [pc, #124]	; (8007004 <HAL_DMA_Start_IT+0x22c>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d004      	beq.n	8006f94 <HAL_DMA_Start_IT+0x1bc>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a1e      	ldr	r2, [pc, #120]	; (8007008 <HAL_DMA_Start_IT+0x230>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d101      	bne.n	8006f98 <HAL_DMA_Start_IT+0x1c0>
 8006f94:	2301      	movs	r3, #1
 8006f96:	e000      	b.n	8006f9a <HAL_DMA_Start_IT+0x1c2>
 8006f98:	2300      	movs	r3, #0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d036      	beq.n	800700c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f023 021e 	bic.w	r2, r3, #30
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f042 0216 	orr.w	r2, r2, #22
 8006fb0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d03e      	beq.n	8007038 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f042 0208 	orr.w	r2, r2, #8
 8006fc8:	601a      	str	r2, [r3, #0]
 8006fca:	e035      	b.n	8007038 <HAL_DMA_Start_IT+0x260>
 8006fcc:	40020010 	.word	0x40020010
 8006fd0:	40020028 	.word	0x40020028
 8006fd4:	40020040 	.word	0x40020040
 8006fd8:	40020058 	.word	0x40020058
 8006fdc:	40020070 	.word	0x40020070
 8006fe0:	40020088 	.word	0x40020088
 8006fe4:	400200a0 	.word	0x400200a0
 8006fe8:	400200b8 	.word	0x400200b8
 8006fec:	40020410 	.word	0x40020410
 8006ff0:	40020428 	.word	0x40020428
 8006ff4:	40020440 	.word	0x40020440
 8006ff8:	40020458 	.word	0x40020458
 8006ffc:	40020470 	.word	0x40020470
 8007000:	40020488 	.word	0x40020488
 8007004:	400204a0 	.word	0x400204a0
 8007008:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f023 020e 	bic.w	r2, r3, #14
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f042 020a 	orr.w	r2, r2, #10
 800701e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007024:	2b00      	cmp	r3, #0
 8007026:	d007      	beq.n	8007038 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f042 0204 	orr.w	r2, r2, #4
 8007036:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a83      	ldr	r2, [pc, #524]	; (800724c <HAL_DMA_Start_IT+0x474>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d072      	beq.n	8007128 <HAL_DMA_Start_IT+0x350>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a82      	ldr	r2, [pc, #520]	; (8007250 <HAL_DMA_Start_IT+0x478>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d06d      	beq.n	8007128 <HAL_DMA_Start_IT+0x350>
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a80      	ldr	r2, [pc, #512]	; (8007254 <HAL_DMA_Start_IT+0x47c>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d068      	beq.n	8007128 <HAL_DMA_Start_IT+0x350>
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a7f      	ldr	r2, [pc, #508]	; (8007258 <HAL_DMA_Start_IT+0x480>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d063      	beq.n	8007128 <HAL_DMA_Start_IT+0x350>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a7d      	ldr	r2, [pc, #500]	; (800725c <HAL_DMA_Start_IT+0x484>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d05e      	beq.n	8007128 <HAL_DMA_Start_IT+0x350>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a7c      	ldr	r2, [pc, #496]	; (8007260 <HAL_DMA_Start_IT+0x488>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d059      	beq.n	8007128 <HAL_DMA_Start_IT+0x350>
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a7a      	ldr	r2, [pc, #488]	; (8007264 <HAL_DMA_Start_IT+0x48c>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d054      	beq.n	8007128 <HAL_DMA_Start_IT+0x350>
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a79      	ldr	r2, [pc, #484]	; (8007268 <HAL_DMA_Start_IT+0x490>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d04f      	beq.n	8007128 <HAL_DMA_Start_IT+0x350>
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a77      	ldr	r2, [pc, #476]	; (800726c <HAL_DMA_Start_IT+0x494>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d04a      	beq.n	8007128 <HAL_DMA_Start_IT+0x350>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a76      	ldr	r2, [pc, #472]	; (8007270 <HAL_DMA_Start_IT+0x498>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d045      	beq.n	8007128 <HAL_DMA_Start_IT+0x350>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a74      	ldr	r2, [pc, #464]	; (8007274 <HAL_DMA_Start_IT+0x49c>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d040      	beq.n	8007128 <HAL_DMA_Start_IT+0x350>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a73      	ldr	r2, [pc, #460]	; (8007278 <HAL_DMA_Start_IT+0x4a0>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d03b      	beq.n	8007128 <HAL_DMA_Start_IT+0x350>
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a71      	ldr	r2, [pc, #452]	; (800727c <HAL_DMA_Start_IT+0x4a4>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d036      	beq.n	8007128 <HAL_DMA_Start_IT+0x350>
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a70      	ldr	r2, [pc, #448]	; (8007280 <HAL_DMA_Start_IT+0x4a8>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d031      	beq.n	8007128 <HAL_DMA_Start_IT+0x350>
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a6e      	ldr	r2, [pc, #440]	; (8007284 <HAL_DMA_Start_IT+0x4ac>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d02c      	beq.n	8007128 <HAL_DMA_Start_IT+0x350>
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a6d      	ldr	r2, [pc, #436]	; (8007288 <HAL_DMA_Start_IT+0x4b0>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d027      	beq.n	8007128 <HAL_DMA_Start_IT+0x350>
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a6b      	ldr	r2, [pc, #428]	; (800728c <HAL_DMA_Start_IT+0x4b4>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d022      	beq.n	8007128 <HAL_DMA_Start_IT+0x350>
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a6a      	ldr	r2, [pc, #424]	; (8007290 <HAL_DMA_Start_IT+0x4b8>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d01d      	beq.n	8007128 <HAL_DMA_Start_IT+0x350>
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a68      	ldr	r2, [pc, #416]	; (8007294 <HAL_DMA_Start_IT+0x4bc>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d018      	beq.n	8007128 <HAL_DMA_Start_IT+0x350>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a67      	ldr	r2, [pc, #412]	; (8007298 <HAL_DMA_Start_IT+0x4c0>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d013      	beq.n	8007128 <HAL_DMA_Start_IT+0x350>
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a65      	ldr	r2, [pc, #404]	; (800729c <HAL_DMA_Start_IT+0x4c4>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d00e      	beq.n	8007128 <HAL_DMA_Start_IT+0x350>
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a64      	ldr	r2, [pc, #400]	; (80072a0 <HAL_DMA_Start_IT+0x4c8>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d009      	beq.n	8007128 <HAL_DMA_Start_IT+0x350>
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a62      	ldr	r2, [pc, #392]	; (80072a4 <HAL_DMA_Start_IT+0x4cc>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d004      	beq.n	8007128 <HAL_DMA_Start_IT+0x350>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a61      	ldr	r2, [pc, #388]	; (80072a8 <HAL_DMA_Start_IT+0x4d0>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d101      	bne.n	800712c <HAL_DMA_Start_IT+0x354>
 8007128:	2301      	movs	r3, #1
 800712a:	e000      	b.n	800712e <HAL_DMA_Start_IT+0x356>
 800712c:	2300      	movs	r3, #0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d01a      	beq.n	8007168 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d007      	beq.n	8007150 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800714a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800714e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007154:	2b00      	cmp	r3, #0
 8007156:	d007      	beq.n	8007168 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007162:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007166:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a37      	ldr	r2, [pc, #220]	; (800724c <HAL_DMA_Start_IT+0x474>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d04a      	beq.n	8007208 <HAL_DMA_Start_IT+0x430>
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a36      	ldr	r2, [pc, #216]	; (8007250 <HAL_DMA_Start_IT+0x478>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d045      	beq.n	8007208 <HAL_DMA_Start_IT+0x430>
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a34      	ldr	r2, [pc, #208]	; (8007254 <HAL_DMA_Start_IT+0x47c>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d040      	beq.n	8007208 <HAL_DMA_Start_IT+0x430>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a33      	ldr	r2, [pc, #204]	; (8007258 <HAL_DMA_Start_IT+0x480>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d03b      	beq.n	8007208 <HAL_DMA_Start_IT+0x430>
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a31      	ldr	r2, [pc, #196]	; (800725c <HAL_DMA_Start_IT+0x484>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d036      	beq.n	8007208 <HAL_DMA_Start_IT+0x430>
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a30      	ldr	r2, [pc, #192]	; (8007260 <HAL_DMA_Start_IT+0x488>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d031      	beq.n	8007208 <HAL_DMA_Start_IT+0x430>
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a2e      	ldr	r2, [pc, #184]	; (8007264 <HAL_DMA_Start_IT+0x48c>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d02c      	beq.n	8007208 <HAL_DMA_Start_IT+0x430>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a2d      	ldr	r2, [pc, #180]	; (8007268 <HAL_DMA_Start_IT+0x490>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d027      	beq.n	8007208 <HAL_DMA_Start_IT+0x430>
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a2b      	ldr	r2, [pc, #172]	; (800726c <HAL_DMA_Start_IT+0x494>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d022      	beq.n	8007208 <HAL_DMA_Start_IT+0x430>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a2a      	ldr	r2, [pc, #168]	; (8007270 <HAL_DMA_Start_IT+0x498>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d01d      	beq.n	8007208 <HAL_DMA_Start_IT+0x430>
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a28      	ldr	r2, [pc, #160]	; (8007274 <HAL_DMA_Start_IT+0x49c>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d018      	beq.n	8007208 <HAL_DMA_Start_IT+0x430>
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a27      	ldr	r2, [pc, #156]	; (8007278 <HAL_DMA_Start_IT+0x4a0>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d013      	beq.n	8007208 <HAL_DMA_Start_IT+0x430>
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a25      	ldr	r2, [pc, #148]	; (800727c <HAL_DMA_Start_IT+0x4a4>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d00e      	beq.n	8007208 <HAL_DMA_Start_IT+0x430>
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a24      	ldr	r2, [pc, #144]	; (8007280 <HAL_DMA_Start_IT+0x4a8>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d009      	beq.n	8007208 <HAL_DMA_Start_IT+0x430>
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a22      	ldr	r2, [pc, #136]	; (8007284 <HAL_DMA_Start_IT+0x4ac>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d004      	beq.n	8007208 <HAL_DMA_Start_IT+0x430>
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a21      	ldr	r2, [pc, #132]	; (8007288 <HAL_DMA_Start_IT+0x4b0>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d108      	bne.n	800721a <HAL_DMA_Start_IT+0x442>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f042 0201 	orr.w	r2, r2, #1
 8007216:	601a      	str	r2, [r3, #0]
 8007218:	e012      	b.n	8007240 <HAL_DMA_Start_IT+0x468>
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f042 0201 	orr.w	r2, r2, #1
 8007228:	601a      	str	r2, [r3, #0]
 800722a:	e009      	b.n	8007240 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007232:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007240:	7dfb      	ldrb	r3, [r7, #23]
}
 8007242:	4618      	mov	r0, r3
 8007244:	3718      	adds	r7, #24
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	40020010 	.word	0x40020010
 8007250:	40020028 	.word	0x40020028
 8007254:	40020040 	.word	0x40020040
 8007258:	40020058 	.word	0x40020058
 800725c:	40020070 	.word	0x40020070
 8007260:	40020088 	.word	0x40020088
 8007264:	400200a0 	.word	0x400200a0
 8007268:	400200b8 	.word	0x400200b8
 800726c:	40020410 	.word	0x40020410
 8007270:	40020428 	.word	0x40020428
 8007274:	40020440 	.word	0x40020440
 8007278:	40020458 	.word	0x40020458
 800727c:	40020470 	.word	0x40020470
 8007280:	40020488 	.word	0x40020488
 8007284:	400204a0 	.word	0x400204a0
 8007288:	400204b8 	.word	0x400204b8
 800728c:	58025408 	.word	0x58025408
 8007290:	5802541c 	.word	0x5802541c
 8007294:	58025430 	.word	0x58025430
 8007298:	58025444 	.word	0x58025444
 800729c:	58025458 	.word	0x58025458
 80072a0:	5802546c 	.word	0x5802546c
 80072a4:	58025480 	.word	0x58025480
 80072a8:	58025494 	.word	0x58025494

080072ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b086      	sub	sp, #24
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80072b4:	f7fe ff10 	bl	80060d8 <HAL_GetTick>
 80072b8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d101      	bne.n	80072c4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	e2dc      	b.n	800787e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	2b02      	cmp	r3, #2
 80072ce:	d008      	beq.n	80072e2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2280      	movs	r2, #128	; 0x80
 80072d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e2cd      	b.n	800787e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a76      	ldr	r2, [pc, #472]	; (80074c0 <HAL_DMA_Abort+0x214>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d04a      	beq.n	8007382 <HAL_DMA_Abort+0xd6>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a74      	ldr	r2, [pc, #464]	; (80074c4 <HAL_DMA_Abort+0x218>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d045      	beq.n	8007382 <HAL_DMA_Abort+0xd6>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a73      	ldr	r2, [pc, #460]	; (80074c8 <HAL_DMA_Abort+0x21c>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d040      	beq.n	8007382 <HAL_DMA_Abort+0xd6>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a71      	ldr	r2, [pc, #452]	; (80074cc <HAL_DMA_Abort+0x220>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d03b      	beq.n	8007382 <HAL_DMA_Abort+0xd6>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a70      	ldr	r2, [pc, #448]	; (80074d0 <HAL_DMA_Abort+0x224>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d036      	beq.n	8007382 <HAL_DMA_Abort+0xd6>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a6e      	ldr	r2, [pc, #440]	; (80074d4 <HAL_DMA_Abort+0x228>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d031      	beq.n	8007382 <HAL_DMA_Abort+0xd6>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a6d      	ldr	r2, [pc, #436]	; (80074d8 <HAL_DMA_Abort+0x22c>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d02c      	beq.n	8007382 <HAL_DMA_Abort+0xd6>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a6b      	ldr	r2, [pc, #428]	; (80074dc <HAL_DMA_Abort+0x230>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d027      	beq.n	8007382 <HAL_DMA_Abort+0xd6>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a6a      	ldr	r2, [pc, #424]	; (80074e0 <HAL_DMA_Abort+0x234>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d022      	beq.n	8007382 <HAL_DMA_Abort+0xd6>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a68      	ldr	r2, [pc, #416]	; (80074e4 <HAL_DMA_Abort+0x238>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d01d      	beq.n	8007382 <HAL_DMA_Abort+0xd6>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a67      	ldr	r2, [pc, #412]	; (80074e8 <HAL_DMA_Abort+0x23c>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d018      	beq.n	8007382 <HAL_DMA_Abort+0xd6>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a65      	ldr	r2, [pc, #404]	; (80074ec <HAL_DMA_Abort+0x240>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d013      	beq.n	8007382 <HAL_DMA_Abort+0xd6>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a64      	ldr	r2, [pc, #400]	; (80074f0 <HAL_DMA_Abort+0x244>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d00e      	beq.n	8007382 <HAL_DMA_Abort+0xd6>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a62      	ldr	r2, [pc, #392]	; (80074f4 <HAL_DMA_Abort+0x248>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d009      	beq.n	8007382 <HAL_DMA_Abort+0xd6>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a61      	ldr	r2, [pc, #388]	; (80074f8 <HAL_DMA_Abort+0x24c>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d004      	beq.n	8007382 <HAL_DMA_Abort+0xd6>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a5f      	ldr	r2, [pc, #380]	; (80074fc <HAL_DMA_Abort+0x250>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d101      	bne.n	8007386 <HAL_DMA_Abort+0xda>
 8007382:	2301      	movs	r3, #1
 8007384:	e000      	b.n	8007388 <HAL_DMA_Abort+0xdc>
 8007386:	2300      	movs	r3, #0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d013      	beq.n	80073b4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f022 021e 	bic.w	r2, r2, #30
 800739a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	695a      	ldr	r2, [r3, #20]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073aa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	617b      	str	r3, [r7, #20]
 80073b2:	e00a      	b.n	80073ca <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f022 020e 	bic.w	r2, r2, #14
 80073c2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a3c      	ldr	r2, [pc, #240]	; (80074c0 <HAL_DMA_Abort+0x214>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d072      	beq.n	80074ba <HAL_DMA_Abort+0x20e>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a3a      	ldr	r2, [pc, #232]	; (80074c4 <HAL_DMA_Abort+0x218>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d06d      	beq.n	80074ba <HAL_DMA_Abort+0x20e>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a39      	ldr	r2, [pc, #228]	; (80074c8 <HAL_DMA_Abort+0x21c>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d068      	beq.n	80074ba <HAL_DMA_Abort+0x20e>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a37      	ldr	r2, [pc, #220]	; (80074cc <HAL_DMA_Abort+0x220>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d063      	beq.n	80074ba <HAL_DMA_Abort+0x20e>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a36      	ldr	r2, [pc, #216]	; (80074d0 <HAL_DMA_Abort+0x224>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d05e      	beq.n	80074ba <HAL_DMA_Abort+0x20e>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a34      	ldr	r2, [pc, #208]	; (80074d4 <HAL_DMA_Abort+0x228>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d059      	beq.n	80074ba <HAL_DMA_Abort+0x20e>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a33      	ldr	r2, [pc, #204]	; (80074d8 <HAL_DMA_Abort+0x22c>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d054      	beq.n	80074ba <HAL_DMA_Abort+0x20e>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a31      	ldr	r2, [pc, #196]	; (80074dc <HAL_DMA_Abort+0x230>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d04f      	beq.n	80074ba <HAL_DMA_Abort+0x20e>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a30      	ldr	r2, [pc, #192]	; (80074e0 <HAL_DMA_Abort+0x234>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d04a      	beq.n	80074ba <HAL_DMA_Abort+0x20e>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a2e      	ldr	r2, [pc, #184]	; (80074e4 <HAL_DMA_Abort+0x238>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d045      	beq.n	80074ba <HAL_DMA_Abort+0x20e>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a2d      	ldr	r2, [pc, #180]	; (80074e8 <HAL_DMA_Abort+0x23c>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d040      	beq.n	80074ba <HAL_DMA_Abort+0x20e>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a2b      	ldr	r2, [pc, #172]	; (80074ec <HAL_DMA_Abort+0x240>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d03b      	beq.n	80074ba <HAL_DMA_Abort+0x20e>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a2a      	ldr	r2, [pc, #168]	; (80074f0 <HAL_DMA_Abort+0x244>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d036      	beq.n	80074ba <HAL_DMA_Abort+0x20e>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a28      	ldr	r2, [pc, #160]	; (80074f4 <HAL_DMA_Abort+0x248>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d031      	beq.n	80074ba <HAL_DMA_Abort+0x20e>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a27      	ldr	r2, [pc, #156]	; (80074f8 <HAL_DMA_Abort+0x24c>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d02c      	beq.n	80074ba <HAL_DMA_Abort+0x20e>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a25      	ldr	r2, [pc, #148]	; (80074fc <HAL_DMA_Abort+0x250>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d027      	beq.n	80074ba <HAL_DMA_Abort+0x20e>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a24      	ldr	r2, [pc, #144]	; (8007500 <HAL_DMA_Abort+0x254>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d022      	beq.n	80074ba <HAL_DMA_Abort+0x20e>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a22      	ldr	r2, [pc, #136]	; (8007504 <HAL_DMA_Abort+0x258>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d01d      	beq.n	80074ba <HAL_DMA_Abort+0x20e>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a21      	ldr	r2, [pc, #132]	; (8007508 <HAL_DMA_Abort+0x25c>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d018      	beq.n	80074ba <HAL_DMA_Abort+0x20e>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a1f      	ldr	r2, [pc, #124]	; (800750c <HAL_DMA_Abort+0x260>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d013      	beq.n	80074ba <HAL_DMA_Abort+0x20e>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a1e      	ldr	r2, [pc, #120]	; (8007510 <HAL_DMA_Abort+0x264>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d00e      	beq.n	80074ba <HAL_DMA_Abort+0x20e>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a1c      	ldr	r2, [pc, #112]	; (8007514 <HAL_DMA_Abort+0x268>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d009      	beq.n	80074ba <HAL_DMA_Abort+0x20e>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a1b      	ldr	r2, [pc, #108]	; (8007518 <HAL_DMA_Abort+0x26c>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d004      	beq.n	80074ba <HAL_DMA_Abort+0x20e>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a19      	ldr	r2, [pc, #100]	; (800751c <HAL_DMA_Abort+0x270>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d132      	bne.n	8007520 <HAL_DMA_Abort+0x274>
 80074ba:	2301      	movs	r3, #1
 80074bc:	e031      	b.n	8007522 <HAL_DMA_Abort+0x276>
 80074be:	bf00      	nop
 80074c0:	40020010 	.word	0x40020010
 80074c4:	40020028 	.word	0x40020028
 80074c8:	40020040 	.word	0x40020040
 80074cc:	40020058 	.word	0x40020058
 80074d0:	40020070 	.word	0x40020070
 80074d4:	40020088 	.word	0x40020088
 80074d8:	400200a0 	.word	0x400200a0
 80074dc:	400200b8 	.word	0x400200b8
 80074e0:	40020410 	.word	0x40020410
 80074e4:	40020428 	.word	0x40020428
 80074e8:	40020440 	.word	0x40020440
 80074ec:	40020458 	.word	0x40020458
 80074f0:	40020470 	.word	0x40020470
 80074f4:	40020488 	.word	0x40020488
 80074f8:	400204a0 	.word	0x400204a0
 80074fc:	400204b8 	.word	0x400204b8
 8007500:	58025408 	.word	0x58025408
 8007504:	5802541c 	.word	0x5802541c
 8007508:	58025430 	.word	0x58025430
 800750c:	58025444 	.word	0x58025444
 8007510:	58025458 	.word	0x58025458
 8007514:	5802546c 	.word	0x5802546c
 8007518:	58025480 	.word	0x58025480
 800751c:	58025494 	.word	0x58025494
 8007520:	2300      	movs	r3, #0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d007      	beq.n	8007536 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007530:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007534:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a6d      	ldr	r2, [pc, #436]	; (80076f0 <HAL_DMA_Abort+0x444>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d04a      	beq.n	80075d6 <HAL_DMA_Abort+0x32a>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a6b      	ldr	r2, [pc, #428]	; (80076f4 <HAL_DMA_Abort+0x448>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d045      	beq.n	80075d6 <HAL_DMA_Abort+0x32a>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a6a      	ldr	r2, [pc, #424]	; (80076f8 <HAL_DMA_Abort+0x44c>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d040      	beq.n	80075d6 <HAL_DMA_Abort+0x32a>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a68      	ldr	r2, [pc, #416]	; (80076fc <HAL_DMA_Abort+0x450>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d03b      	beq.n	80075d6 <HAL_DMA_Abort+0x32a>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a67      	ldr	r2, [pc, #412]	; (8007700 <HAL_DMA_Abort+0x454>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d036      	beq.n	80075d6 <HAL_DMA_Abort+0x32a>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a65      	ldr	r2, [pc, #404]	; (8007704 <HAL_DMA_Abort+0x458>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d031      	beq.n	80075d6 <HAL_DMA_Abort+0x32a>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a64      	ldr	r2, [pc, #400]	; (8007708 <HAL_DMA_Abort+0x45c>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d02c      	beq.n	80075d6 <HAL_DMA_Abort+0x32a>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a62      	ldr	r2, [pc, #392]	; (800770c <HAL_DMA_Abort+0x460>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d027      	beq.n	80075d6 <HAL_DMA_Abort+0x32a>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a61      	ldr	r2, [pc, #388]	; (8007710 <HAL_DMA_Abort+0x464>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d022      	beq.n	80075d6 <HAL_DMA_Abort+0x32a>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a5f      	ldr	r2, [pc, #380]	; (8007714 <HAL_DMA_Abort+0x468>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d01d      	beq.n	80075d6 <HAL_DMA_Abort+0x32a>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a5e      	ldr	r2, [pc, #376]	; (8007718 <HAL_DMA_Abort+0x46c>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d018      	beq.n	80075d6 <HAL_DMA_Abort+0x32a>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a5c      	ldr	r2, [pc, #368]	; (800771c <HAL_DMA_Abort+0x470>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d013      	beq.n	80075d6 <HAL_DMA_Abort+0x32a>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a5b      	ldr	r2, [pc, #364]	; (8007720 <HAL_DMA_Abort+0x474>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d00e      	beq.n	80075d6 <HAL_DMA_Abort+0x32a>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a59      	ldr	r2, [pc, #356]	; (8007724 <HAL_DMA_Abort+0x478>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d009      	beq.n	80075d6 <HAL_DMA_Abort+0x32a>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a58      	ldr	r2, [pc, #352]	; (8007728 <HAL_DMA_Abort+0x47c>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d004      	beq.n	80075d6 <HAL_DMA_Abort+0x32a>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a56      	ldr	r2, [pc, #344]	; (800772c <HAL_DMA_Abort+0x480>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d108      	bne.n	80075e8 <HAL_DMA_Abort+0x33c>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f022 0201 	bic.w	r2, r2, #1
 80075e4:	601a      	str	r2, [r3, #0]
 80075e6:	e007      	b.n	80075f8 <HAL_DMA_Abort+0x34c>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f022 0201 	bic.w	r2, r2, #1
 80075f6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80075f8:	e013      	b.n	8007622 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80075fa:	f7fe fd6d 	bl	80060d8 <HAL_GetTick>
 80075fe:	4602      	mov	r2, r0
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	1ad3      	subs	r3, r2, r3
 8007604:	2b05      	cmp	r3, #5
 8007606:	d90c      	bls.n	8007622 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2220      	movs	r2, #32
 800760c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2203      	movs	r2, #3
 8007612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e12d      	b.n	800787e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 0301 	and.w	r3, r3, #1
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1e5      	bne.n	80075fa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a2f      	ldr	r2, [pc, #188]	; (80076f0 <HAL_DMA_Abort+0x444>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d04a      	beq.n	80076ce <HAL_DMA_Abort+0x422>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a2d      	ldr	r2, [pc, #180]	; (80076f4 <HAL_DMA_Abort+0x448>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d045      	beq.n	80076ce <HAL_DMA_Abort+0x422>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a2c      	ldr	r2, [pc, #176]	; (80076f8 <HAL_DMA_Abort+0x44c>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d040      	beq.n	80076ce <HAL_DMA_Abort+0x422>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a2a      	ldr	r2, [pc, #168]	; (80076fc <HAL_DMA_Abort+0x450>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d03b      	beq.n	80076ce <HAL_DMA_Abort+0x422>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a29      	ldr	r2, [pc, #164]	; (8007700 <HAL_DMA_Abort+0x454>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d036      	beq.n	80076ce <HAL_DMA_Abort+0x422>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a27      	ldr	r2, [pc, #156]	; (8007704 <HAL_DMA_Abort+0x458>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d031      	beq.n	80076ce <HAL_DMA_Abort+0x422>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a26      	ldr	r2, [pc, #152]	; (8007708 <HAL_DMA_Abort+0x45c>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d02c      	beq.n	80076ce <HAL_DMA_Abort+0x422>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a24      	ldr	r2, [pc, #144]	; (800770c <HAL_DMA_Abort+0x460>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d027      	beq.n	80076ce <HAL_DMA_Abort+0x422>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a23      	ldr	r2, [pc, #140]	; (8007710 <HAL_DMA_Abort+0x464>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d022      	beq.n	80076ce <HAL_DMA_Abort+0x422>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a21      	ldr	r2, [pc, #132]	; (8007714 <HAL_DMA_Abort+0x468>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d01d      	beq.n	80076ce <HAL_DMA_Abort+0x422>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a20      	ldr	r2, [pc, #128]	; (8007718 <HAL_DMA_Abort+0x46c>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d018      	beq.n	80076ce <HAL_DMA_Abort+0x422>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a1e      	ldr	r2, [pc, #120]	; (800771c <HAL_DMA_Abort+0x470>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d013      	beq.n	80076ce <HAL_DMA_Abort+0x422>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a1d      	ldr	r2, [pc, #116]	; (8007720 <HAL_DMA_Abort+0x474>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d00e      	beq.n	80076ce <HAL_DMA_Abort+0x422>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a1b      	ldr	r2, [pc, #108]	; (8007724 <HAL_DMA_Abort+0x478>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d009      	beq.n	80076ce <HAL_DMA_Abort+0x422>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a1a      	ldr	r2, [pc, #104]	; (8007728 <HAL_DMA_Abort+0x47c>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d004      	beq.n	80076ce <HAL_DMA_Abort+0x422>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a18      	ldr	r2, [pc, #96]	; (800772c <HAL_DMA_Abort+0x480>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d101      	bne.n	80076d2 <HAL_DMA_Abort+0x426>
 80076ce:	2301      	movs	r3, #1
 80076d0:	e000      	b.n	80076d4 <HAL_DMA_Abort+0x428>
 80076d2:	2300      	movs	r3, #0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d02b      	beq.n	8007730 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076dc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076e2:	f003 031f 	and.w	r3, r3, #31
 80076e6:	223f      	movs	r2, #63	; 0x3f
 80076e8:	409a      	lsls	r2, r3
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	609a      	str	r2, [r3, #8]
 80076ee:	e02a      	b.n	8007746 <HAL_DMA_Abort+0x49a>
 80076f0:	40020010 	.word	0x40020010
 80076f4:	40020028 	.word	0x40020028
 80076f8:	40020040 	.word	0x40020040
 80076fc:	40020058 	.word	0x40020058
 8007700:	40020070 	.word	0x40020070
 8007704:	40020088 	.word	0x40020088
 8007708:	400200a0 	.word	0x400200a0
 800770c:	400200b8 	.word	0x400200b8
 8007710:	40020410 	.word	0x40020410
 8007714:	40020428 	.word	0x40020428
 8007718:	40020440 	.word	0x40020440
 800771c:	40020458 	.word	0x40020458
 8007720:	40020470 	.word	0x40020470
 8007724:	40020488 	.word	0x40020488
 8007728:	400204a0 	.word	0x400204a0
 800772c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007734:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800773a:	f003 031f 	and.w	r3, r3, #31
 800773e:	2201      	movs	r2, #1
 8007740:	409a      	lsls	r2, r3
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a4f      	ldr	r2, [pc, #316]	; (8007888 <HAL_DMA_Abort+0x5dc>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d072      	beq.n	8007836 <HAL_DMA_Abort+0x58a>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a4d      	ldr	r2, [pc, #308]	; (800788c <HAL_DMA_Abort+0x5e0>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d06d      	beq.n	8007836 <HAL_DMA_Abort+0x58a>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a4c      	ldr	r2, [pc, #304]	; (8007890 <HAL_DMA_Abort+0x5e4>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d068      	beq.n	8007836 <HAL_DMA_Abort+0x58a>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a4a      	ldr	r2, [pc, #296]	; (8007894 <HAL_DMA_Abort+0x5e8>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d063      	beq.n	8007836 <HAL_DMA_Abort+0x58a>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a49      	ldr	r2, [pc, #292]	; (8007898 <HAL_DMA_Abort+0x5ec>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d05e      	beq.n	8007836 <HAL_DMA_Abort+0x58a>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a47      	ldr	r2, [pc, #284]	; (800789c <HAL_DMA_Abort+0x5f0>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d059      	beq.n	8007836 <HAL_DMA_Abort+0x58a>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a46      	ldr	r2, [pc, #280]	; (80078a0 <HAL_DMA_Abort+0x5f4>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d054      	beq.n	8007836 <HAL_DMA_Abort+0x58a>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a44      	ldr	r2, [pc, #272]	; (80078a4 <HAL_DMA_Abort+0x5f8>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d04f      	beq.n	8007836 <HAL_DMA_Abort+0x58a>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a43      	ldr	r2, [pc, #268]	; (80078a8 <HAL_DMA_Abort+0x5fc>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d04a      	beq.n	8007836 <HAL_DMA_Abort+0x58a>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a41      	ldr	r2, [pc, #260]	; (80078ac <HAL_DMA_Abort+0x600>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d045      	beq.n	8007836 <HAL_DMA_Abort+0x58a>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a40      	ldr	r2, [pc, #256]	; (80078b0 <HAL_DMA_Abort+0x604>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d040      	beq.n	8007836 <HAL_DMA_Abort+0x58a>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a3e      	ldr	r2, [pc, #248]	; (80078b4 <HAL_DMA_Abort+0x608>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d03b      	beq.n	8007836 <HAL_DMA_Abort+0x58a>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a3d      	ldr	r2, [pc, #244]	; (80078b8 <HAL_DMA_Abort+0x60c>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d036      	beq.n	8007836 <HAL_DMA_Abort+0x58a>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a3b      	ldr	r2, [pc, #236]	; (80078bc <HAL_DMA_Abort+0x610>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d031      	beq.n	8007836 <HAL_DMA_Abort+0x58a>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a3a      	ldr	r2, [pc, #232]	; (80078c0 <HAL_DMA_Abort+0x614>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d02c      	beq.n	8007836 <HAL_DMA_Abort+0x58a>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a38      	ldr	r2, [pc, #224]	; (80078c4 <HAL_DMA_Abort+0x618>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d027      	beq.n	8007836 <HAL_DMA_Abort+0x58a>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a37      	ldr	r2, [pc, #220]	; (80078c8 <HAL_DMA_Abort+0x61c>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d022      	beq.n	8007836 <HAL_DMA_Abort+0x58a>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a35      	ldr	r2, [pc, #212]	; (80078cc <HAL_DMA_Abort+0x620>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d01d      	beq.n	8007836 <HAL_DMA_Abort+0x58a>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a34      	ldr	r2, [pc, #208]	; (80078d0 <HAL_DMA_Abort+0x624>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d018      	beq.n	8007836 <HAL_DMA_Abort+0x58a>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a32      	ldr	r2, [pc, #200]	; (80078d4 <HAL_DMA_Abort+0x628>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d013      	beq.n	8007836 <HAL_DMA_Abort+0x58a>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a31      	ldr	r2, [pc, #196]	; (80078d8 <HAL_DMA_Abort+0x62c>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d00e      	beq.n	8007836 <HAL_DMA_Abort+0x58a>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a2f      	ldr	r2, [pc, #188]	; (80078dc <HAL_DMA_Abort+0x630>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d009      	beq.n	8007836 <HAL_DMA_Abort+0x58a>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a2e      	ldr	r2, [pc, #184]	; (80078e0 <HAL_DMA_Abort+0x634>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d004      	beq.n	8007836 <HAL_DMA_Abort+0x58a>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a2c      	ldr	r2, [pc, #176]	; (80078e4 <HAL_DMA_Abort+0x638>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d101      	bne.n	800783a <HAL_DMA_Abort+0x58e>
 8007836:	2301      	movs	r3, #1
 8007838:	e000      	b.n	800783c <HAL_DMA_Abort+0x590>
 800783a:	2300      	movs	r3, #0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d015      	beq.n	800786c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007848:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00c      	beq.n	800786c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800785c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007860:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800786a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800787c:	2300      	movs	r3, #0
}
 800787e:	4618      	mov	r0, r3
 8007880:	3718      	adds	r7, #24
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	40020010 	.word	0x40020010
 800788c:	40020028 	.word	0x40020028
 8007890:	40020040 	.word	0x40020040
 8007894:	40020058 	.word	0x40020058
 8007898:	40020070 	.word	0x40020070
 800789c:	40020088 	.word	0x40020088
 80078a0:	400200a0 	.word	0x400200a0
 80078a4:	400200b8 	.word	0x400200b8
 80078a8:	40020410 	.word	0x40020410
 80078ac:	40020428 	.word	0x40020428
 80078b0:	40020440 	.word	0x40020440
 80078b4:	40020458 	.word	0x40020458
 80078b8:	40020470 	.word	0x40020470
 80078bc:	40020488 	.word	0x40020488
 80078c0:	400204a0 	.word	0x400204a0
 80078c4:	400204b8 	.word	0x400204b8
 80078c8:	58025408 	.word	0x58025408
 80078cc:	5802541c 	.word	0x5802541c
 80078d0:	58025430 	.word	0x58025430
 80078d4:	58025444 	.word	0x58025444
 80078d8:	58025458 	.word	0x58025458
 80078dc:	5802546c 	.word	0x5802546c
 80078e0:	58025480 	.word	0x58025480
 80078e4:	58025494 	.word	0x58025494

080078e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e237      	b.n	8007d6a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007900:	b2db      	uxtb	r3, r3
 8007902:	2b02      	cmp	r3, #2
 8007904:	d004      	beq.n	8007910 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2280      	movs	r2, #128	; 0x80
 800790a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e22c      	b.n	8007d6a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a5c      	ldr	r2, [pc, #368]	; (8007a88 <HAL_DMA_Abort_IT+0x1a0>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d04a      	beq.n	80079b0 <HAL_DMA_Abort_IT+0xc8>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a5b      	ldr	r2, [pc, #364]	; (8007a8c <HAL_DMA_Abort_IT+0x1a4>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d045      	beq.n	80079b0 <HAL_DMA_Abort_IT+0xc8>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a59      	ldr	r2, [pc, #356]	; (8007a90 <HAL_DMA_Abort_IT+0x1a8>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d040      	beq.n	80079b0 <HAL_DMA_Abort_IT+0xc8>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a58      	ldr	r2, [pc, #352]	; (8007a94 <HAL_DMA_Abort_IT+0x1ac>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d03b      	beq.n	80079b0 <HAL_DMA_Abort_IT+0xc8>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a56      	ldr	r2, [pc, #344]	; (8007a98 <HAL_DMA_Abort_IT+0x1b0>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d036      	beq.n	80079b0 <HAL_DMA_Abort_IT+0xc8>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a55      	ldr	r2, [pc, #340]	; (8007a9c <HAL_DMA_Abort_IT+0x1b4>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d031      	beq.n	80079b0 <HAL_DMA_Abort_IT+0xc8>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a53      	ldr	r2, [pc, #332]	; (8007aa0 <HAL_DMA_Abort_IT+0x1b8>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d02c      	beq.n	80079b0 <HAL_DMA_Abort_IT+0xc8>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a52      	ldr	r2, [pc, #328]	; (8007aa4 <HAL_DMA_Abort_IT+0x1bc>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d027      	beq.n	80079b0 <HAL_DMA_Abort_IT+0xc8>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a50      	ldr	r2, [pc, #320]	; (8007aa8 <HAL_DMA_Abort_IT+0x1c0>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d022      	beq.n	80079b0 <HAL_DMA_Abort_IT+0xc8>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a4f      	ldr	r2, [pc, #316]	; (8007aac <HAL_DMA_Abort_IT+0x1c4>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d01d      	beq.n	80079b0 <HAL_DMA_Abort_IT+0xc8>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a4d      	ldr	r2, [pc, #308]	; (8007ab0 <HAL_DMA_Abort_IT+0x1c8>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d018      	beq.n	80079b0 <HAL_DMA_Abort_IT+0xc8>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a4c      	ldr	r2, [pc, #304]	; (8007ab4 <HAL_DMA_Abort_IT+0x1cc>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d013      	beq.n	80079b0 <HAL_DMA_Abort_IT+0xc8>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a4a      	ldr	r2, [pc, #296]	; (8007ab8 <HAL_DMA_Abort_IT+0x1d0>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d00e      	beq.n	80079b0 <HAL_DMA_Abort_IT+0xc8>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a49      	ldr	r2, [pc, #292]	; (8007abc <HAL_DMA_Abort_IT+0x1d4>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d009      	beq.n	80079b0 <HAL_DMA_Abort_IT+0xc8>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a47      	ldr	r2, [pc, #284]	; (8007ac0 <HAL_DMA_Abort_IT+0x1d8>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d004      	beq.n	80079b0 <HAL_DMA_Abort_IT+0xc8>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a46      	ldr	r2, [pc, #280]	; (8007ac4 <HAL_DMA_Abort_IT+0x1dc>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d101      	bne.n	80079b4 <HAL_DMA_Abort_IT+0xcc>
 80079b0:	2301      	movs	r3, #1
 80079b2:	e000      	b.n	80079b6 <HAL_DMA_Abort_IT+0xce>
 80079b4:	2300      	movs	r3, #0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	f000 8086 	beq.w	8007ac8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2204      	movs	r2, #4
 80079c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a2f      	ldr	r2, [pc, #188]	; (8007a88 <HAL_DMA_Abort_IT+0x1a0>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d04a      	beq.n	8007a64 <HAL_DMA_Abort_IT+0x17c>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a2e      	ldr	r2, [pc, #184]	; (8007a8c <HAL_DMA_Abort_IT+0x1a4>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d045      	beq.n	8007a64 <HAL_DMA_Abort_IT+0x17c>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a2c      	ldr	r2, [pc, #176]	; (8007a90 <HAL_DMA_Abort_IT+0x1a8>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d040      	beq.n	8007a64 <HAL_DMA_Abort_IT+0x17c>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a2b      	ldr	r2, [pc, #172]	; (8007a94 <HAL_DMA_Abort_IT+0x1ac>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d03b      	beq.n	8007a64 <HAL_DMA_Abort_IT+0x17c>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a29      	ldr	r2, [pc, #164]	; (8007a98 <HAL_DMA_Abort_IT+0x1b0>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d036      	beq.n	8007a64 <HAL_DMA_Abort_IT+0x17c>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a28      	ldr	r2, [pc, #160]	; (8007a9c <HAL_DMA_Abort_IT+0x1b4>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d031      	beq.n	8007a64 <HAL_DMA_Abort_IT+0x17c>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a26      	ldr	r2, [pc, #152]	; (8007aa0 <HAL_DMA_Abort_IT+0x1b8>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d02c      	beq.n	8007a64 <HAL_DMA_Abort_IT+0x17c>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a25      	ldr	r2, [pc, #148]	; (8007aa4 <HAL_DMA_Abort_IT+0x1bc>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d027      	beq.n	8007a64 <HAL_DMA_Abort_IT+0x17c>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a23      	ldr	r2, [pc, #140]	; (8007aa8 <HAL_DMA_Abort_IT+0x1c0>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d022      	beq.n	8007a64 <HAL_DMA_Abort_IT+0x17c>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a22      	ldr	r2, [pc, #136]	; (8007aac <HAL_DMA_Abort_IT+0x1c4>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d01d      	beq.n	8007a64 <HAL_DMA_Abort_IT+0x17c>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a20      	ldr	r2, [pc, #128]	; (8007ab0 <HAL_DMA_Abort_IT+0x1c8>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d018      	beq.n	8007a64 <HAL_DMA_Abort_IT+0x17c>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a1f      	ldr	r2, [pc, #124]	; (8007ab4 <HAL_DMA_Abort_IT+0x1cc>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d013      	beq.n	8007a64 <HAL_DMA_Abort_IT+0x17c>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a1d      	ldr	r2, [pc, #116]	; (8007ab8 <HAL_DMA_Abort_IT+0x1d0>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d00e      	beq.n	8007a64 <HAL_DMA_Abort_IT+0x17c>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a1c      	ldr	r2, [pc, #112]	; (8007abc <HAL_DMA_Abort_IT+0x1d4>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d009      	beq.n	8007a64 <HAL_DMA_Abort_IT+0x17c>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a1a      	ldr	r2, [pc, #104]	; (8007ac0 <HAL_DMA_Abort_IT+0x1d8>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d004      	beq.n	8007a64 <HAL_DMA_Abort_IT+0x17c>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a19      	ldr	r2, [pc, #100]	; (8007ac4 <HAL_DMA_Abort_IT+0x1dc>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d108      	bne.n	8007a76 <HAL_DMA_Abort_IT+0x18e>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f022 0201 	bic.w	r2, r2, #1
 8007a72:	601a      	str	r2, [r3, #0]
 8007a74:	e178      	b.n	8007d68 <HAL_DMA_Abort_IT+0x480>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f022 0201 	bic.w	r2, r2, #1
 8007a84:	601a      	str	r2, [r3, #0]
 8007a86:	e16f      	b.n	8007d68 <HAL_DMA_Abort_IT+0x480>
 8007a88:	40020010 	.word	0x40020010
 8007a8c:	40020028 	.word	0x40020028
 8007a90:	40020040 	.word	0x40020040
 8007a94:	40020058 	.word	0x40020058
 8007a98:	40020070 	.word	0x40020070
 8007a9c:	40020088 	.word	0x40020088
 8007aa0:	400200a0 	.word	0x400200a0
 8007aa4:	400200b8 	.word	0x400200b8
 8007aa8:	40020410 	.word	0x40020410
 8007aac:	40020428 	.word	0x40020428
 8007ab0:	40020440 	.word	0x40020440
 8007ab4:	40020458 	.word	0x40020458
 8007ab8:	40020470 	.word	0x40020470
 8007abc:	40020488 	.word	0x40020488
 8007ac0:	400204a0 	.word	0x400204a0
 8007ac4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f022 020e 	bic.w	r2, r2, #14
 8007ad6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a6c      	ldr	r2, [pc, #432]	; (8007c90 <HAL_DMA_Abort_IT+0x3a8>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d04a      	beq.n	8007b78 <HAL_DMA_Abort_IT+0x290>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a6b      	ldr	r2, [pc, #428]	; (8007c94 <HAL_DMA_Abort_IT+0x3ac>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d045      	beq.n	8007b78 <HAL_DMA_Abort_IT+0x290>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a69      	ldr	r2, [pc, #420]	; (8007c98 <HAL_DMA_Abort_IT+0x3b0>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d040      	beq.n	8007b78 <HAL_DMA_Abort_IT+0x290>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a68      	ldr	r2, [pc, #416]	; (8007c9c <HAL_DMA_Abort_IT+0x3b4>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d03b      	beq.n	8007b78 <HAL_DMA_Abort_IT+0x290>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a66      	ldr	r2, [pc, #408]	; (8007ca0 <HAL_DMA_Abort_IT+0x3b8>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d036      	beq.n	8007b78 <HAL_DMA_Abort_IT+0x290>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a65      	ldr	r2, [pc, #404]	; (8007ca4 <HAL_DMA_Abort_IT+0x3bc>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d031      	beq.n	8007b78 <HAL_DMA_Abort_IT+0x290>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a63      	ldr	r2, [pc, #396]	; (8007ca8 <HAL_DMA_Abort_IT+0x3c0>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d02c      	beq.n	8007b78 <HAL_DMA_Abort_IT+0x290>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a62      	ldr	r2, [pc, #392]	; (8007cac <HAL_DMA_Abort_IT+0x3c4>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d027      	beq.n	8007b78 <HAL_DMA_Abort_IT+0x290>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a60      	ldr	r2, [pc, #384]	; (8007cb0 <HAL_DMA_Abort_IT+0x3c8>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d022      	beq.n	8007b78 <HAL_DMA_Abort_IT+0x290>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a5f      	ldr	r2, [pc, #380]	; (8007cb4 <HAL_DMA_Abort_IT+0x3cc>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d01d      	beq.n	8007b78 <HAL_DMA_Abort_IT+0x290>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a5d      	ldr	r2, [pc, #372]	; (8007cb8 <HAL_DMA_Abort_IT+0x3d0>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d018      	beq.n	8007b78 <HAL_DMA_Abort_IT+0x290>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a5c      	ldr	r2, [pc, #368]	; (8007cbc <HAL_DMA_Abort_IT+0x3d4>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d013      	beq.n	8007b78 <HAL_DMA_Abort_IT+0x290>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a5a      	ldr	r2, [pc, #360]	; (8007cc0 <HAL_DMA_Abort_IT+0x3d8>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d00e      	beq.n	8007b78 <HAL_DMA_Abort_IT+0x290>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a59      	ldr	r2, [pc, #356]	; (8007cc4 <HAL_DMA_Abort_IT+0x3dc>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d009      	beq.n	8007b78 <HAL_DMA_Abort_IT+0x290>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a57      	ldr	r2, [pc, #348]	; (8007cc8 <HAL_DMA_Abort_IT+0x3e0>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d004      	beq.n	8007b78 <HAL_DMA_Abort_IT+0x290>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a56      	ldr	r2, [pc, #344]	; (8007ccc <HAL_DMA_Abort_IT+0x3e4>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d108      	bne.n	8007b8a <HAL_DMA_Abort_IT+0x2a2>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f022 0201 	bic.w	r2, r2, #1
 8007b86:	601a      	str	r2, [r3, #0]
 8007b88:	e007      	b.n	8007b9a <HAL_DMA_Abort_IT+0x2b2>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f022 0201 	bic.w	r2, r2, #1
 8007b98:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a3c      	ldr	r2, [pc, #240]	; (8007c90 <HAL_DMA_Abort_IT+0x3a8>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d072      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a3a      	ldr	r2, [pc, #232]	; (8007c94 <HAL_DMA_Abort_IT+0x3ac>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d06d      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a39      	ldr	r2, [pc, #228]	; (8007c98 <HAL_DMA_Abort_IT+0x3b0>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d068      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a37      	ldr	r2, [pc, #220]	; (8007c9c <HAL_DMA_Abort_IT+0x3b4>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d063      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a36      	ldr	r2, [pc, #216]	; (8007ca0 <HAL_DMA_Abort_IT+0x3b8>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d05e      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a34      	ldr	r2, [pc, #208]	; (8007ca4 <HAL_DMA_Abort_IT+0x3bc>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d059      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a33      	ldr	r2, [pc, #204]	; (8007ca8 <HAL_DMA_Abort_IT+0x3c0>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d054      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a31      	ldr	r2, [pc, #196]	; (8007cac <HAL_DMA_Abort_IT+0x3c4>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d04f      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a30      	ldr	r2, [pc, #192]	; (8007cb0 <HAL_DMA_Abort_IT+0x3c8>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d04a      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a2e      	ldr	r2, [pc, #184]	; (8007cb4 <HAL_DMA_Abort_IT+0x3cc>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d045      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a2d      	ldr	r2, [pc, #180]	; (8007cb8 <HAL_DMA_Abort_IT+0x3d0>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d040      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a2b      	ldr	r2, [pc, #172]	; (8007cbc <HAL_DMA_Abort_IT+0x3d4>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d03b      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a2a      	ldr	r2, [pc, #168]	; (8007cc0 <HAL_DMA_Abort_IT+0x3d8>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d036      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a28      	ldr	r2, [pc, #160]	; (8007cc4 <HAL_DMA_Abort_IT+0x3dc>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d031      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a27      	ldr	r2, [pc, #156]	; (8007cc8 <HAL_DMA_Abort_IT+0x3e0>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d02c      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a25      	ldr	r2, [pc, #148]	; (8007ccc <HAL_DMA_Abort_IT+0x3e4>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d027      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a24      	ldr	r2, [pc, #144]	; (8007cd0 <HAL_DMA_Abort_IT+0x3e8>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d022      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a22      	ldr	r2, [pc, #136]	; (8007cd4 <HAL_DMA_Abort_IT+0x3ec>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d01d      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a21      	ldr	r2, [pc, #132]	; (8007cd8 <HAL_DMA_Abort_IT+0x3f0>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d018      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a1f      	ldr	r2, [pc, #124]	; (8007cdc <HAL_DMA_Abort_IT+0x3f4>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d013      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a1e      	ldr	r2, [pc, #120]	; (8007ce0 <HAL_DMA_Abort_IT+0x3f8>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d00e      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a1c      	ldr	r2, [pc, #112]	; (8007ce4 <HAL_DMA_Abort_IT+0x3fc>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d009      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a1b      	ldr	r2, [pc, #108]	; (8007ce8 <HAL_DMA_Abort_IT+0x400>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d004      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a19      	ldr	r2, [pc, #100]	; (8007cec <HAL_DMA_Abort_IT+0x404>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d132      	bne.n	8007cf0 <HAL_DMA_Abort_IT+0x408>
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e031      	b.n	8007cf2 <HAL_DMA_Abort_IT+0x40a>
 8007c8e:	bf00      	nop
 8007c90:	40020010 	.word	0x40020010
 8007c94:	40020028 	.word	0x40020028
 8007c98:	40020040 	.word	0x40020040
 8007c9c:	40020058 	.word	0x40020058
 8007ca0:	40020070 	.word	0x40020070
 8007ca4:	40020088 	.word	0x40020088
 8007ca8:	400200a0 	.word	0x400200a0
 8007cac:	400200b8 	.word	0x400200b8
 8007cb0:	40020410 	.word	0x40020410
 8007cb4:	40020428 	.word	0x40020428
 8007cb8:	40020440 	.word	0x40020440
 8007cbc:	40020458 	.word	0x40020458
 8007cc0:	40020470 	.word	0x40020470
 8007cc4:	40020488 	.word	0x40020488
 8007cc8:	400204a0 	.word	0x400204a0
 8007ccc:	400204b8 	.word	0x400204b8
 8007cd0:	58025408 	.word	0x58025408
 8007cd4:	5802541c 	.word	0x5802541c
 8007cd8:	58025430 	.word	0x58025430
 8007cdc:	58025444 	.word	0x58025444
 8007ce0:	58025458 	.word	0x58025458
 8007ce4:	5802546c 	.word	0x5802546c
 8007ce8:	58025480 	.word	0x58025480
 8007cec:	58025494 	.word	0x58025494
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d028      	beq.n	8007d48 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d04:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d0a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d10:	f003 031f 	and.w	r3, r3, #31
 8007d14:	2201      	movs	r2, #1
 8007d16:	409a      	lsls	r2, r3
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007d24:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00c      	beq.n	8007d48 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d3c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007d46:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d003      	beq.n	8007d68 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007d68:	2300      	movs	r3, #0
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop

08007d74 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b08a      	sub	sp, #40	; 0x28
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007d80:	4b67      	ldr	r3, [pc, #412]	; (8007f20 <HAL_DMA_IRQHandler+0x1ac>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a67      	ldr	r2, [pc, #412]	; (8007f24 <HAL_DMA_IRQHandler+0x1b0>)
 8007d86:	fba2 2303 	umull	r2, r3, r2, r3
 8007d8a:	0a9b      	lsrs	r3, r3, #10
 8007d8c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d92:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d98:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007d9a:	6a3b      	ldr	r3, [r7, #32]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a5f      	ldr	r2, [pc, #380]	; (8007f28 <HAL_DMA_IRQHandler+0x1b4>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d04a      	beq.n	8007e46 <HAL_DMA_IRQHandler+0xd2>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a5d      	ldr	r2, [pc, #372]	; (8007f2c <HAL_DMA_IRQHandler+0x1b8>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d045      	beq.n	8007e46 <HAL_DMA_IRQHandler+0xd2>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a5c      	ldr	r2, [pc, #368]	; (8007f30 <HAL_DMA_IRQHandler+0x1bc>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d040      	beq.n	8007e46 <HAL_DMA_IRQHandler+0xd2>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a5a      	ldr	r2, [pc, #360]	; (8007f34 <HAL_DMA_IRQHandler+0x1c0>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d03b      	beq.n	8007e46 <HAL_DMA_IRQHandler+0xd2>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a59      	ldr	r2, [pc, #356]	; (8007f38 <HAL_DMA_IRQHandler+0x1c4>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d036      	beq.n	8007e46 <HAL_DMA_IRQHandler+0xd2>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a57      	ldr	r2, [pc, #348]	; (8007f3c <HAL_DMA_IRQHandler+0x1c8>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d031      	beq.n	8007e46 <HAL_DMA_IRQHandler+0xd2>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a56      	ldr	r2, [pc, #344]	; (8007f40 <HAL_DMA_IRQHandler+0x1cc>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d02c      	beq.n	8007e46 <HAL_DMA_IRQHandler+0xd2>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a54      	ldr	r2, [pc, #336]	; (8007f44 <HAL_DMA_IRQHandler+0x1d0>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d027      	beq.n	8007e46 <HAL_DMA_IRQHandler+0xd2>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a53      	ldr	r2, [pc, #332]	; (8007f48 <HAL_DMA_IRQHandler+0x1d4>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d022      	beq.n	8007e46 <HAL_DMA_IRQHandler+0xd2>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a51      	ldr	r2, [pc, #324]	; (8007f4c <HAL_DMA_IRQHandler+0x1d8>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d01d      	beq.n	8007e46 <HAL_DMA_IRQHandler+0xd2>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a50      	ldr	r2, [pc, #320]	; (8007f50 <HAL_DMA_IRQHandler+0x1dc>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d018      	beq.n	8007e46 <HAL_DMA_IRQHandler+0xd2>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a4e      	ldr	r2, [pc, #312]	; (8007f54 <HAL_DMA_IRQHandler+0x1e0>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d013      	beq.n	8007e46 <HAL_DMA_IRQHandler+0xd2>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a4d      	ldr	r2, [pc, #308]	; (8007f58 <HAL_DMA_IRQHandler+0x1e4>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d00e      	beq.n	8007e46 <HAL_DMA_IRQHandler+0xd2>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a4b      	ldr	r2, [pc, #300]	; (8007f5c <HAL_DMA_IRQHandler+0x1e8>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d009      	beq.n	8007e46 <HAL_DMA_IRQHandler+0xd2>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a4a      	ldr	r2, [pc, #296]	; (8007f60 <HAL_DMA_IRQHandler+0x1ec>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d004      	beq.n	8007e46 <HAL_DMA_IRQHandler+0xd2>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a48      	ldr	r2, [pc, #288]	; (8007f64 <HAL_DMA_IRQHandler+0x1f0>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d101      	bne.n	8007e4a <HAL_DMA_IRQHandler+0xd6>
 8007e46:	2301      	movs	r3, #1
 8007e48:	e000      	b.n	8007e4c <HAL_DMA_IRQHandler+0xd8>
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	f000 842b 	beq.w	80086a8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e56:	f003 031f 	and.w	r3, r3, #31
 8007e5a:	2208      	movs	r2, #8
 8007e5c:	409a      	lsls	r2, r3
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	4013      	ands	r3, r2
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	f000 80a2 	beq.w	8007fac <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a2e      	ldr	r2, [pc, #184]	; (8007f28 <HAL_DMA_IRQHandler+0x1b4>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d04a      	beq.n	8007f08 <HAL_DMA_IRQHandler+0x194>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a2d      	ldr	r2, [pc, #180]	; (8007f2c <HAL_DMA_IRQHandler+0x1b8>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d045      	beq.n	8007f08 <HAL_DMA_IRQHandler+0x194>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a2b      	ldr	r2, [pc, #172]	; (8007f30 <HAL_DMA_IRQHandler+0x1bc>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d040      	beq.n	8007f08 <HAL_DMA_IRQHandler+0x194>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a2a      	ldr	r2, [pc, #168]	; (8007f34 <HAL_DMA_IRQHandler+0x1c0>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d03b      	beq.n	8007f08 <HAL_DMA_IRQHandler+0x194>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a28      	ldr	r2, [pc, #160]	; (8007f38 <HAL_DMA_IRQHandler+0x1c4>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d036      	beq.n	8007f08 <HAL_DMA_IRQHandler+0x194>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a27      	ldr	r2, [pc, #156]	; (8007f3c <HAL_DMA_IRQHandler+0x1c8>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d031      	beq.n	8007f08 <HAL_DMA_IRQHandler+0x194>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a25      	ldr	r2, [pc, #148]	; (8007f40 <HAL_DMA_IRQHandler+0x1cc>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d02c      	beq.n	8007f08 <HAL_DMA_IRQHandler+0x194>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a24      	ldr	r2, [pc, #144]	; (8007f44 <HAL_DMA_IRQHandler+0x1d0>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d027      	beq.n	8007f08 <HAL_DMA_IRQHandler+0x194>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a22      	ldr	r2, [pc, #136]	; (8007f48 <HAL_DMA_IRQHandler+0x1d4>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d022      	beq.n	8007f08 <HAL_DMA_IRQHandler+0x194>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a21      	ldr	r2, [pc, #132]	; (8007f4c <HAL_DMA_IRQHandler+0x1d8>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d01d      	beq.n	8007f08 <HAL_DMA_IRQHandler+0x194>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a1f      	ldr	r2, [pc, #124]	; (8007f50 <HAL_DMA_IRQHandler+0x1dc>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d018      	beq.n	8007f08 <HAL_DMA_IRQHandler+0x194>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a1e      	ldr	r2, [pc, #120]	; (8007f54 <HAL_DMA_IRQHandler+0x1e0>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d013      	beq.n	8007f08 <HAL_DMA_IRQHandler+0x194>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a1c      	ldr	r2, [pc, #112]	; (8007f58 <HAL_DMA_IRQHandler+0x1e4>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d00e      	beq.n	8007f08 <HAL_DMA_IRQHandler+0x194>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a1b      	ldr	r2, [pc, #108]	; (8007f5c <HAL_DMA_IRQHandler+0x1e8>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d009      	beq.n	8007f08 <HAL_DMA_IRQHandler+0x194>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a19      	ldr	r2, [pc, #100]	; (8007f60 <HAL_DMA_IRQHandler+0x1ec>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d004      	beq.n	8007f08 <HAL_DMA_IRQHandler+0x194>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a18      	ldr	r2, [pc, #96]	; (8007f64 <HAL_DMA_IRQHandler+0x1f0>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d12f      	bne.n	8007f68 <HAL_DMA_IRQHandler+0x1f4>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f003 0304 	and.w	r3, r3, #4
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	bf14      	ite	ne
 8007f16:	2301      	movne	r3, #1
 8007f18:	2300      	moveq	r3, #0
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	e02e      	b.n	8007f7c <HAL_DMA_IRQHandler+0x208>
 8007f1e:	bf00      	nop
 8007f20:	24000050 	.word	0x24000050
 8007f24:	1b4e81b5 	.word	0x1b4e81b5
 8007f28:	40020010 	.word	0x40020010
 8007f2c:	40020028 	.word	0x40020028
 8007f30:	40020040 	.word	0x40020040
 8007f34:	40020058 	.word	0x40020058
 8007f38:	40020070 	.word	0x40020070
 8007f3c:	40020088 	.word	0x40020088
 8007f40:	400200a0 	.word	0x400200a0
 8007f44:	400200b8 	.word	0x400200b8
 8007f48:	40020410 	.word	0x40020410
 8007f4c:	40020428 	.word	0x40020428
 8007f50:	40020440 	.word	0x40020440
 8007f54:	40020458 	.word	0x40020458
 8007f58:	40020470 	.word	0x40020470
 8007f5c:	40020488 	.word	0x40020488
 8007f60:	400204a0 	.word	0x400204a0
 8007f64:	400204b8 	.word	0x400204b8
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 0308 	and.w	r3, r3, #8
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	bf14      	ite	ne
 8007f76:	2301      	movne	r3, #1
 8007f78:	2300      	moveq	r3, #0
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d015      	beq.n	8007fac <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f022 0204 	bic.w	r2, r2, #4
 8007f8e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f94:	f003 031f 	and.w	r3, r3, #31
 8007f98:	2208      	movs	r2, #8
 8007f9a:	409a      	lsls	r2, r3
 8007f9c:	6a3b      	ldr	r3, [r7, #32]
 8007f9e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fa4:	f043 0201 	orr.w	r2, r3, #1
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fb0:	f003 031f 	and.w	r3, r3, #31
 8007fb4:	69ba      	ldr	r2, [r7, #24]
 8007fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8007fba:	f003 0301 	and.w	r3, r3, #1
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d06e      	beq.n	80080a0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a69      	ldr	r2, [pc, #420]	; (800816c <HAL_DMA_IRQHandler+0x3f8>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d04a      	beq.n	8008062 <HAL_DMA_IRQHandler+0x2ee>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a67      	ldr	r2, [pc, #412]	; (8008170 <HAL_DMA_IRQHandler+0x3fc>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d045      	beq.n	8008062 <HAL_DMA_IRQHandler+0x2ee>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a66      	ldr	r2, [pc, #408]	; (8008174 <HAL_DMA_IRQHandler+0x400>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d040      	beq.n	8008062 <HAL_DMA_IRQHandler+0x2ee>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a64      	ldr	r2, [pc, #400]	; (8008178 <HAL_DMA_IRQHandler+0x404>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d03b      	beq.n	8008062 <HAL_DMA_IRQHandler+0x2ee>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a63      	ldr	r2, [pc, #396]	; (800817c <HAL_DMA_IRQHandler+0x408>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d036      	beq.n	8008062 <HAL_DMA_IRQHandler+0x2ee>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a61      	ldr	r2, [pc, #388]	; (8008180 <HAL_DMA_IRQHandler+0x40c>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d031      	beq.n	8008062 <HAL_DMA_IRQHandler+0x2ee>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a60      	ldr	r2, [pc, #384]	; (8008184 <HAL_DMA_IRQHandler+0x410>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d02c      	beq.n	8008062 <HAL_DMA_IRQHandler+0x2ee>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a5e      	ldr	r2, [pc, #376]	; (8008188 <HAL_DMA_IRQHandler+0x414>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d027      	beq.n	8008062 <HAL_DMA_IRQHandler+0x2ee>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a5d      	ldr	r2, [pc, #372]	; (800818c <HAL_DMA_IRQHandler+0x418>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d022      	beq.n	8008062 <HAL_DMA_IRQHandler+0x2ee>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a5b      	ldr	r2, [pc, #364]	; (8008190 <HAL_DMA_IRQHandler+0x41c>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d01d      	beq.n	8008062 <HAL_DMA_IRQHandler+0x2ee>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a5a      	ldr	r2, [pc, #360]	; (8008194 <HAL_DMA_IRQHandler+0x420>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d018      	beq.n	8008062 <HAL_DMA_IRQHandler+0x2ee>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a58      	ldr	r2, [pc, #352]	; (8008198 <HAL_DMA_IRQHandler+0x424>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d013      	beq.n	8008062 <HAL_DMA_IRQHandler+0x2ee>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a57      	ldr	r2, [pc, #348]	; (800819c <HAL_DMA_IRQHandler+0x428>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d00e      	beq.n	8008062 <HAL_DMA_IRQHandler+0x2ee>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a55      	ldr	r2, [pc, #340]	; (80081a0 <HAL_DMA_IRQHandler+0x42c>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d009      	beq.n	8008062 <HAL_DMA_IRQHandler+0x2ee>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a54      	ldr	r2, [pc, #336]	; (80081a4 <HAL_DMA_IRQHandler+0x430>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d004      	beq.n	8008062 <HAL_DMA_IRQHandler+0x2ee>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a52      	ldr	r2, [pc, #328]	; (80081a8 <HAL_DMA_IRQHandler+0x434>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d10a      	bne.n	8008078 <HAL_DMA_IRQHandler+0x304>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	695b      	ldr	r3, [r3, #20]
 8008068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800806c:	2b00      	cmp	r3, #0
 800806e:	bf14      	ite	ne
 8008070:	2301      	movne	r3, #1
 8008072:	2300      	moveq	r3, #0
 8008074:	b2db      	uxtb	r3, r3
 8008076:	e003      	b.n	8008080 <HAL_DMA_IRQHandler+0x30c>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	2300      	movs	r3, #0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d00d      	beq.n	80080a0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008088:	f003 031f 	and.w	r3, r3, #31
 800808c:	2201      	movs	r2, #1
 800808e:	409a      	lsls	r2, r3
 8008090:	6a3b      	ldr	r3, [r7, #32]
 8008092:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008098:	f043 0202 	orr.w	r2, r3, #2
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080a4:	f003 031f 	and.w	r3, r3, #31
 80080a8:	2204      	movs	r2, #4
 80080aa:	409a      	lsls	r2, r3
 80080ac:	69bb      	ldr	r3, [r7, #24]
 80080ae:	4013      	ands	r3, r2
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	f000 808f 	beq.w	80081d4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a2c      	ldr	r2, [pc, #176]	; (800816c <HAL_DMA_IRQHandler+0x3f8>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d04a      	beq.n	8008156 <HAL_DMA_IRQHandler+0x3e2>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a2a      	ldr	r2, [pc, #168]	; (8008170 <HAL_DMA_IRQHandler+0x3fc>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d045      	beq.n	8008156 <HAL_DMA_IRQHandler+0x3e2>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a29      	ldr	r2, [pc, #164]	; (8008174 <HAL_DMA_IRQHandler+0x400>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d040      	beq.n	8008156 <HAL_DMA_IRQHandler+0x3e2>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a27      	ldr	r2, [pc, #156]	; (8008178 <HAL_DMA_IRQHandler+0x404>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d03b      	beq.n	8008156 <HAL_DMA_IRQHandler+0x3e2>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a26      	ldr	r2, [pc, #152]	; (800817c <HAL_DMA_IRQHandler+0x408>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d036      	beq.n	8008156 <HAL_DMA_IRQHandler+0x3e2>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a24      	ldr	r2, [pc, #144]	; (8008180 <HAL_DMA_IRQHandler+0x40c>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d031      	beq.n	8008156 <HAL_DMA_IRQHandler+0x3e2>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a23      	ldr	r2, [pc, #140]	; (8008184 <HAL_DMA_IRQHandler+0x410>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d02c      	beq.n	8008156 <HAL_DMA_IRQHandler+0x3e2>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a21      	ldr	r2, [pc, #132]	; (8008188 <HAL_DMA_IRQHandler+0x414>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d027      	beq.n	8008156 <HAL_DMA_IRQHandler+0x3e2>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a20      	ldr	r2, [pc, #128]	; (800818c <HAL_DMA_IRQHandler+0x418>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d022      	beq.n	8008156 <HAL_DMA_IRQHandler+0x3e2>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a1e      	ldr	r2, [pc, #120]	; (8008190 <HAL_DMA_IRQHandler+0x41c>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d01d      	beq.n	8008156 <HAL_DMA_IRQHandler+0x3e2>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a1d      	ldr	r2, [pc, #116]	; (8008194 <HAL_DMA_IRQHandler+0x420>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d018      	beq.n	8008156 <HAL_DMA_IRQHandler+0x3e2>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a1b      	ldr	r2, [pc, #108]	; (8008198 <HAL_DMA_IRQHandler+0x424>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d013      	beq.n	8008156 <HAL_DMA_IRQHandler+0x3e2>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a1a      	ldr	r2, [pc, #104]	; (800819c <HAL_DMA_IRQHandler+0x428>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d00e      	beq.n	8008156 <HAL_DMA_IRQHandler+0x3e2>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a18      	ldr	r2, [pc, #96]	; (80081a0 <HAL_DMA_IRQHandler+0x42c>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d009      	beq.n	8008156 <HAL_DMA_IRQHandler+0x3e2>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a17      	ldr	r2, [pc, #92]	; (80081a4 <HAL_DMA_IRQHandler+0x430>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d004      	beq.n	8008156 <HAL_DMA_IRQHandler+0x3e2>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a15      	ldr	r2, [pc, #84]	; (80081a8 <HAL_DMA_IRQHandler+0x434>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d12a      	bne.n	80081ac <HAL_DMA_IRQHandler+0x438>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 0302 	and.w	r3, r3, #2
 8008160:	2b00      	cmp	r3, #0
 8008162:	bf14      	ite	ne
 8008164:	2301      	movne	r3, #1
 8008166:	2300      	moveq	r3, #0
 8008168:	b2db      	uxtb	r3, r3
 800816a:	e023      	b.n	80081b4 <HAL_DMA_IRQHandler+0x440>
 800816c:	40020010 	.word	0x40020010
 8008170:	40020028 	.word	0x40020028
 8008174:	40020040 	.word	0x40020040
 8008178:	40020058 	.word	0x40020058
 800817c:	40020070 	.word	0x40020070
 8008180:	40020088 	.word	0x40020088
 8008184:	400200a0 	.word	0x400200a0
 8008188:	400200b8 	.word	0x400200b8
 800818c:	40020410 	.word	0x40020410
 8008190:	40020428 	.word	0x40020428
 8008194:	40020440 	.word	0x40020440
 8008198:	40020458 	.word	0x40020458
 800819c:	40020470 	.word	0x40020470
 80081a0:	40020488 	.word	0x40020488
 80081a4:	400204a0 	.word	0x400204a0
 80081a8:	400204b8 	.word	0x400204b8
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2300      	movs	r3, #0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d00d      	beq.n	80081d4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081bc:	f003 031f 	and.w	r3, r3, #31
 80081c0:	2204      	movs	r2, #4
 80081c2:	409a      	lsls	r2, r3
 80081c4:	6a3b      	ldr	r3, [r7, #32]
 80081c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081cc:	f043 0204 	orr.w	r2, r3, #4
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081d8:	f003 031f 	and.w	r3, r3, #31
 80081dc:	2210      	movs	r2, #16
 80081de:	409a      	lsls	r2, r3
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	4013      	ands	r3, r2
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f000 80a6 	beq.w	8008336 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a85      	ldr	r2, [pc, #532]	; (8008404 <HAL_DMA_IRQHandler+0x690>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d04a      	beq.n	800828a <HAL_DMA_IRQHandler+0x516>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a83      	ldr	r2, [pc, #524]	; (8008408 <HAL_DMA_IRQHandler+0x694>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d045      	beq.n	800828a <HAL_DMA_IRQHandler+0x516>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a82      	ldr	r2, [pc, #520]	; (800840c <HAL_DMA_IRQHandler+0x698>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d040      	beq.n	800828a <HAL_DMA_IRQHandler+0x516>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a80      	ldr	r2, [pc, #512]	; (8008410 <HAL_DMA_IRQHandler+0x69c>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d03b      	beq.n	800828a <HAL_DMA_IRQHandler+0x516>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a7f      	ldr	r2, [pc, #508]	; (8008414 <HAL_DMA_IRQHandler+0x6a0>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d036      	beq.n	800828a <HAL_DMA_IRQHandler+0x516>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a7d      	ldr	r2, [pc, #500]	; (8008418 <HAL_DMA_IRQHandler+0x6a4>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d031      	beq.n	800828a <HAL_DMA_IRQHandler+0x516>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a7c      	ldr	r2, [pc, #496]	; (800841c <HAL_DMA_IRQHandler+0x6a8>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d02c      	beq.n	800828a <HAL_DMA_IRQHandler+0x516>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a7a      	ldr	r2, [pc, #488]	; (8008420 <HAL_DMA_IRQHandler+0x6ac>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d027      	beq.n	800828a <HAL_DMA_IRQHandler+0x516>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a79      	ldr	r2, [pc, #484]	; (8008424 <HAL_DMA_IRQHandler+0x6b0>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d022      	beq.n	800828a <HAL_DMA_IRQHandler+0x516>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a77      	ldr	r2, [pc, #476]	; (8008428 <HAL_DMA_IRQHandler+0x6b4>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d01d      	beq.n	800828a <HAL_DMA_IRQHandler+0x516>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a76      	ldr	r2, [pc, #472]	; (800842c <HAL_DMA_IRQHandler+0x6b8>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d018      	beq.n	800828a <HAL_DMA_IRQHandler+0x516>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a74      	ldr	r2, [pc, #464]	; (8008430 <HAL_DMA_IRQHandler+0x6bc>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d013      	beq.n	800828a <HAL_DMA_IRQHandler+0x516>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a73      	ldr	r2, [pc, #460]	; (8008434 <HAL_DMA_IRQHandler+0x6c0>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d00e      	beq.n	800828a <HAL_DMA_IRQHandler+0x516>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a71      	ldr	r2, [pc, #452]	; (8008438 <HAL_DMA_IRQHandler+0x6c4>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d009      	beq.n	800828a <HAL_DMA_IRQHandler+0x516>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a70      	ldr	r2, [pc, #448]	; (800843c <HAL_DMA_IRQHandler+0x6c8>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d004      	beq.n	800828a <HAL_DMA_IRQHandler+0x516>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a6e      	ldr	r2, [pc, #440]	; (8008440 <HAL_DMA_IRQHandler+0x6cc>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d10a      	bne.n	80082a0 <HAL_DMA_IRQHandler+0x52c>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f003 0308 	and.w	r3, r3, #8
 8008294:	2b00      	cmp	r3, #0
 8008296:	bf14      	ite	ne
 8008298:	2301      	movne	r3, #1
 800829a:	2300      	moveq	r3, #0
 800829c:	b2db      	uxtb	r3, r3
 800829e:	e009      	b.n	80082b4 <HAL_DMA_IRQHandler+0x540>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f003 0304 	and.w	r3, r3, #4
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	bf14      	ite	ne
 80082ae:	2301      	movne	r3, #1
 80082b0:	2300      	moveq	r3, #0
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d03e      	beq.n	8008336 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082bc:	f003 031f 	and.w	r3, r3, #31
 80082c0:	2210      	movs	r2, #16
 80082c2:	409a      	lsls	r2, r3
 80082c4:	6a3b      	ldr	r3, [r7, #32]
 80082c6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d018      	beq.n	8008308 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d108      	bne.n	80082f6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d024      	beq.n	8008336 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	4798      	blx	r3
 80082f4:	e01f      	b.n	8008336 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d01b      	beq.n	8008336 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	4798      	blx	r3
 8008306:	e016      	b.n	8008336 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008312:	2b00      	cmp	r3, #0
 8008314:	d107      	bne.n	8008326 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f022 0208 	bic.w	r2, r2, #8
 8008324:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800832a:	2b00      	cmp	r3, #0
 800832c:	d003      	beq.n	8008336 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800833a:	f003 031f 	and.w	r3, r3, #31
 800833e:	2220      	movs	r2, #32
 8008340:	409a      	lsls	r2, r3
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	4013      	ands	r3, r2
 8008346:	2b00      	cmp	r3, #0
 8008348:	f000 8110 	beq.w	800856c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a2c      	ldr	r2, [pc, #176]	; (8008404 <HAL_DMA_IRQHandler+0x690>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d04a      	beq.n	80083ec <HAL_DMA_IRQHandler+0x678>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a2b      	ldr	r2, [pc, #172]	; (8008408 <HAL_DMA_IRQHandler+0x694>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d045      	beq.n	80083ec <HAL_DMA_IRQHandler+0x678>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a29      	ldr	r2, [pc, #164]	; (800840c <HAL_DMA_IRQHandler+0x698>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d040      	beq.n	80083ec <HAL_DMA_IRQHandler+0x678>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a28      	ldr	r2, [pc, #160]	; (8008410 <HAL_DMA_IRQHandler+0x69c>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d03b      	beq.n	80083ec <HAL_DMA_IRQHandler+0x678>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a26      	ldr	r2, [pc, #152]	; (8008414 <HAL_DMA_IRQHandler+0x6a0>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d036      	beq.n	80083ec <HAL_DMA_IRQHandler+0x678>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a25      	ldr	r2, [pc, #148]	; (8008418 <HAL_DMA_IRQHandler+0x6a4>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d031      	beq.n	80083ec <HAL_DMA_IRQHandler+0x678>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a23      	ldr	r2, [pc, #140]	; (800841c <HAL_DMA_IRQHandler+0x6a8>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d02c      	beq.n	80083ec <HAL_DMA_IRQHandler+0x678>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a22      	ldr	r2, [pc, #136]	; (8008420 <HAL_DMA_IRQHandler+0x6ac>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d027      	beq.n	80083ec <HAL_DMA_IRQHandler+0x678>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a20      	ldr	r2, [pc, #128]	; (8008424 <HAL_DMA_IRQHandler+0x6b0>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d022      	beq.n	80083ec <HAL_DMA_IRQHandler+0x678>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a1f      	ldr	r2, [pc, #124]	; (8008428 <HAL_DMA_IRQHandler+0x6b4>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d01d      	beq.n	80083ec <HAL_DMA_IRQHandler+0x678>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a1d      	ldr	r2, [pc, #116]	; (800842c <HAL_DMA_IRQHandler+0x6b8>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d018      	beq.n	80083ec <HAL_DMA_IRQHandler+0x678>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a1c      	ldr	r2, [pc, #112]	; (8008430 <HAL_DMA_IRQHandler+0x6bc>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d013      	beq.n	80083ec <HAL_DMA_IRQHandler+0x678>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a1a      	ldr	r2, [pc, #104]	; (8008434 <HAL_DMA_IRQHandler+0x6c0>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d00e      	beq.n	80083ec <HAL_DMA_IRQHandler+0x678>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a19      	ldr	r2, [pc, #100]	; (8008438 <HAL_DMA_IRQHandler+0x6c4>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d009      	beq.n	80083ec <HAL_DMA_IRQHandler+0x678>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a17      	ldr	r2, [pc, #92]	; (800843c <HAL_DMA_IRQHandler+0x6c8>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d004      	beq.n	80083ec <HAL_DMA_IRQHandler+0x678>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a16      	ldr	r2, [pc, #88]	; (8008440 <HAL_DMA_IRQHandler+0x6cc>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d12b      	bne.n	8008444 <HAL_DMA_IRQHandler+0x6d0>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f003 0310 	and.w	r3, r3, #16
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	bf14      	ite	ne
 80083fa:	2301      	movne	r3, #1
 80083fc:	2300      	moveq	r3, #0
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	e02a      	b.n	8008458 <HAL_DMA_IRQHandler+0x6e4>
 8008402:	bf00      	nop
 8008404:	40020010 	.word	0x40020010
 8008408:	40020028 	.word	0x40020028
 800840c:	40020040 	.word	0x40020040
 8008410:	40020058 	.word	0x40020058
 8008414:	40020070 	.word	0x40020070
 8008418:	40020088 	.word	0x40020088
 800841c:	400200a0 	.word	0x400200a0
 8008420:	400200b8 	.word	0x400200b8
 8008424:	40020410 	.word	0x40020410
 8008428:	40020428 	.word	0x40020428
 800842c:	40020440 	.word	0x40020440
 8008430:	40020458 	.word	0x40020458
 8008434:	40020470 	.word	0x40020470
 8008438:	40020488 	.word	0x40020488
 800843c:	400204a0 	.word	0x400204a0
 8008440:	400204b8 	.word	0x400204b8
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f003 0302 	and.w	r3, r3, #2
 800844e:	2b00      	cmp	r3, #0
 8008450:	bf14      	ite	ne
 8008452:	2301      	movne	r3, #1
 8008454:	2300      	moveq	r3, #0
 8008456:	b2db      	uxtb	r3, r3
 8008458:	2b00      	cmp	r3, #0
 800845a:	f000 8087 	beq.w	800856c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008462:	f003 031f 	and.w	r3, r3, #31
 8008466:	2220      	movs	r2, #32
 8008468:	409a      	lsls	r2, r3
 800846a:	6a3b      	ldr	r3, [r7, #32]
 800846c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008474:	b2db      	uxtb	r3, r3
 8008476:	2b04      	cmp	r3, #4
 8008478:	d139      	bne.n	80084ee <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f022 0216 	bic.w	r2, r2, #22
 8008488:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	695a      	ldr	r2, [r3, #20]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008498:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d103      	bne.n	80084aa <HAL_DMA_IRQHandler+0x736>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d007      	beq.n	80084ba <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f022 0208 	bic.w	r2, r2, #8
 80084b8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084be:	f003 031f 	and.w	r3, r3, #31
 80084c2:	223f      	movs	r2, #63	; 0x3f
 80084c4:	409a      	lsls	r2, r3
 80084c6:	6a3b      	ldr	r3, [r7, #32]
 80084c8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2201      	movs	r2, #1
 80084ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2200      	movs	r2, #0
 80084d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084de:	2b00      	cmp	r3, #0
 80084e0:	f000 834a 	beq.w	8008b78 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	4798      	blx	r3
          }
          return;
 80084ec:	e344      	b.n	8008b78 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d018      	beq.n	800852e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008506:	2b00      	cmp	r3, #0
 8008508:	d108      	bne.n	800851c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800850e:	2b00      	cmp	r3, #0
 8008510:	d02c      	beq.n	800856c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	4798      	blx	r3
 800851a:	e027      	b.n	800856c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008520:	2b00      	cmp	r3, #0
 8008522:	d023      	beq.n	800856c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	4798      	blx	r3
 800852c:	e01e      	b.n	800856c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008538:	2b00      	cmp	r3, #0
 800853a:	d10f      	bne.n	800855c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f022 0210 	bic.w	r2, r2, #16
 800854a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2201      	movs	r2, #1
 8008550:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008560:	2b00      	cmp	r3, #0
 8008562:	d003      	beq.n	800856c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008570:	2b00      	cmp	r3, #0
 8008572:	f000 8306 	beq.w	8008b82 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800857a:	f003 0301 	and.w	r3, r3, #1
 800857e:	2b00      	cmp	r3, #0
 8008580:	f000 8088 	beq.w	8008694 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2204      	movs	r2, #4
 8008588:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a7a      	ldr	r2, [pc, #488]	; (800877c <HAL_DMA_IRQHandler+0xa08>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d04a      	beq.n	800862c <HAL_DMA_IRQHandler+0x8b8>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a79      	ldr	r2, [pc, #484]	; (8008780 <HAL_DMA_IRQHandler+0xa0c>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d045      	beq.n	800862c <HAL_DMA_IRQHandler+0x8b8>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a77      	ldr	r2, [pc, #476]	; (8008784 <HAL_DMA_IRQHandler+0xa10>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d040      	beq.n	800862c <HAL_DMA_IRQHandler+0x8b8>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a76      	ldr	r2, [pc, #472]	; (8008788 <HAL_DMA_IRQHandler+0xa14>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d03b      	beq.n	800862c <HAL_DMA_IRQHandler+0x8b8>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a74      	ldr	r2, [pc, #464]	; (800878c <HAL_DMA_IRQHandler+0xa18>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d036      	beq.n	800862c <HAL_DMA_IRQHandler+0x8b8>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a73      	ldr	r2, [pc, #460]	; (8008790 <HAL_DMA_IRQHandler+0xa1c>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d031      	beq.n	800862c <HAL_DMA_IRQHandler+0x8b8>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a71      	ldr	r2, [pc, #452]	; (8008794 <HAL_DMA_IRQHandler+0xa20>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d02c      	beq.n	800862c <HAL_DMA_IRQHandler+0x8b8>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a70      	ldr	r2, [pc, #448]	; (8008798 <HAL_DMA_IRQHandler+0xa24>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d027      	beq.n	800862c <HAL_DMA_IRQHandler+0x8b8>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a6e      	ldr	r2, [pc, #440]	; (800879c <HAL_DMA_IRQHandler+0xa28>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d022      	beq.n	800862c <HAL_DMA_IRQHandler+0x8b8>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a6d      	ldr	r2, [pc, #436]	; (80087a0 <HAL_DMA_IRQHandler+0xa2c>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d01d      	beq.n	800862c <HAL_DMA_IRQHandler+0x8b8>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a6b      	ldr	r2, [pc, #428]	; (80087a4 <HAL_DMA_IRQHandler+0xa30>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d018      	beq.n	800862c <HAL_DMA_IRQHandler+0x8b8>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a6a      	ldr	r2, [pc, #424]	; (80087a8 <HAL_DMA_IRQHandler+0xa34>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d013      	beq.n	800862c <HAL_DMA_IRQHandler+0x8b8>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a68      	ldr	r2, [pc, #416]	; (80087ac <HAL_DMA_IRQHandler+0xa38>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d00e      	beq.n	800862c <HAL_DMA_IRQHandler+0x8b8>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a67      	ldr	r2, [pc, #412]	; (80087b0 <HAL_DMA_IRQHandler+0xa3c>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d009      	beq.n	800862c <HAL_DMA_IRQHandler+0x8b8>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a65      	ldr	r2, [pc, #404]	; (80087b4 <HAL_DMA_IRQHandler+0xa40>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d004      	beq.n	800862c <HAL_DMA_IRQHandler+0x8b8>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a64      	ldr	r2, [pc, #400]	; (80087b8 <HAL_DMA_IRQHandler+0xa44>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d108      	bne.n	800863e <HAL_DMA_IRQHandler+0x8ca>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f022 0201 	bic.w	r2, r2, #1
 800863a:	601a      	str	r2, [r3, #0]
 800863c:	e007      	b.n	800864e <HAL_DMA_IRQHandler+0x8da>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f022 0201 	bic.w	r2, r2, #1
 800864c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	3301      	adds	r3, #1
 8008652:	60fb      	str	r3, [r7, #12]
 8008654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008656:	429a      	cmp	r2, r3
 8008658:	d307      	bcc.n	800866a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f003 0301 	and.w	r3, r3, #1
 8008664:	2b00      	cmp	r3, #0
 8008666:	d1f2      	bne.n	800864e <HAL_DMA_IRQHandler+0x8da>
 8008668:	e000      	b.n	800866c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800866a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f003 0301 	and.w	r3, r3, #1
 8008676:	2b00      	cmp	r3, #0
 8008678:	d004      	beq.n	8008684 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2203      	movs	r2, #3
 800867e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8008682:	e003      	b.n	800868c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2200      	movs	r2, #0
 8008690:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008698:	2b00      	cmp	r3, #0
 800869a:	f000 8272 	beq.w	8008b82 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	4798      	blx	r3
 80086a6:	e26c      	b.n	8008b82 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a43      	ldr	r2, [pc, #268]	; (80087bc <HAL_DMA_IRQHandler+0xa48>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d022      	beq.n	80086f8 <HAL_DMA_IRQHandler+0x984>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a42      	ldr	r2, [pc, #264]	; (80087c0 <HAL_DMA_IRQHandler+0xa4c>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d01d      	beq.n	80086f8 <HAL_DMA_IRQHandler+0x984>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a40      	ldr	r2, [pc, #256]	; (80087c4 <HAL_DMA_IRQHandler+0xa50>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d018      	beq.n	80086f8 <HAL_DMA_IRQHandler+0x984>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a3f      	ldr	r2, [pc, #252]	; (80087c8 <HAL_DMA_IRQHandler+0xa54>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d013      	beq.n	80086f8 <HAL_DMA_IRQHandler+0x984>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a3d      	ldr	r2, [pc, #244]	; (80087cc <HAL_DMA_IRQHandler+0xa58>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d00e      	beq.n	80086f8 <HAL_DMA_IRQHandler+0x984>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a3c      	ldr	r2, [pc, #240]	; (80087d0 <HAL_DMA_IRQHandler+0xa5c>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d009      	beq.n	80086f8 <HAL_DMA_IRQHandler+0x984>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a3a      	ldr	r2, [pc, #232]	; (80087d4 <HAL_DMA_IRQHandler+0xa60>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d004      	beq.n	80086f8 <HAL_DMA_IRQHandler+0x984>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a39      	ldr	r2, [pc, #228]	; (80087d8 <HAL_DMA_IRQHandler+0xa64>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d101      	bne.n	80086fc <HAL_DMA_IRQHandler+0x988>
 80086f8:	2301      	movs	r3, #1
 80086fa:	e000      	b.n	80086fe <HAL_DMA_IRQHandler+0x98a>
 80086fc:	2300      	movs	r3, #0
 80086fe:	2b00      	cmp	r3, #0
 8008700:	f000 823f 	beq.w	8008b82 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008710:	f003 031f 	and.w	r3, r3, #31
 8008714:	2204      	movs	r2, #4
 8008716:	409a      	lsls	r2, r3
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	4013      	ands	r3, r2
 800871c:	2b00      	cmp	r3, #0
 800871e:	f000 80cd 	beq.w	80088bc <HAL_DMA_IRQHandler+0xb48>
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	f003 0304 	and.w	r3, r3, #4
 8008728:	2b00      	cmp	r3, #0
 800872a:	f000 80c7 	beq.w	80088bc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008732:	f003 031f 	and.w	r3, r3, #31
 8008736:	2204      	movs	r2, #4
 8008738:	409a      	lsls	r2, r3
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008744:	2b00      	cmp	r3, #0
 8008746:	d049      	beq.n	80087dc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800874e:	2b00      	cmp	r3, #0
 8008750:	d109      	bne.n	8008766 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008756:	2b00      	cmp	r3, #0
 8008758:	f000 8210 	beq.w	8008b7c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008764:	e20a      	b.n	8008b7c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876a:	2b00      	cmp	r3, #0
 800876c:	f000 8206 	beq.w	8008b7c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008778:	e200      	b.n	8008b7c <HAL_DMA_IRQHandler+0xe08>
 800877a:	bf00      	nop
 800877c:	40020010 	.word	0x40020010
 8008780:	40020028 	.word	0x40020028
 8008784:	40020040 	.word	0x40020040
 8008788:	40020058 	.word	0x40020058
 800878c:	40020070 	.word	0x40020070
 8008790:	40020088 	.word	0x40020088
 8008794:	400200a0 	.word	0x400200a0
 8008798:	400200b8 	.word	0x400200b8
 800879c:	40020410 	.word	0x40020410
 80087a0:	40020428 	.word	0x40020428
 80087a4:	40020440 	.word	0x40020440
 80087a8:	40020458 	.word	0x40020458
 80087ac:	40020470 	.word	0x40020470
 80087b0:	40020488 	.word	0x40020488
 80087b4:	400204a0 	.word	0x400204a0
 80087b8:	400204b8 	.word	0x400204b8
 80087bc:	58025408 	.word	0x58025408
 80087c0:	5802541c 	.word	0x5802541c
 80087c4:	58025430 	.word	0x58025430
 80087c8:	58025444 	.word	0x58025444
 80087cc:	58025458 	.word	0x58025458
 80087d0:	5802546c 	.word	0x5802546c
 80087d4:	58025480 	.word	0x58025480
 80087d8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	f003 0320 	and.w	r3, r3, #32
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d160      	bne.n	80088a8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a7f      	ldr	r2, [pc, #508]	; (80089e8 <HAL_DMA_IRQHandler+0xc74>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d04a      	beq.n	8008886 <HAL_DMA_IRQHandler+0xb12>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a7d      	ldr	r2, [pc, #500]	; (80089ec <HAL_DMA_IRQHandler+0xc78>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d045      	beq.n	8008886 <HAL_DMA_IRQHandler+0xb12>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a7c      	ldr	r2, [pc, #496]	; (80089f0 <HAL_DMA_IRQHandler+0xc7c>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d040      	beq.n	8008886 <HAL_DMA_IRQHandler+0xb12>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a7a      	ldr	r2, [pc, #488]	; (80089f4 <HAL_DMA_IRQHandler+0xc80>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d03b      	beq.n	8008886 <HAL_DMA_IRQHandler+0xb12>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a79      	ldr	r2, [pc, #484]	; (80089f8 <HAL_DMA_IRQHandler+0xc84>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d036      	beq.n	8008886 <HAL_DMA_IRQHandler+0xb12>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a77      	ldr	r2, [pc, #476]	; (80089fc <HAL_DMA_IRQHandler+0xc88>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d031      	beq.n	8008886 <HAL_DMA_IRQHandler+0xb12>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a76      	ldr	r2, [pc, #472]	; (8008a00 <HAL_DMA_IRQHandler+0xc8c>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d02c      	beq.n	8008886 <HAL_DMA_IRQHandler+0xb12>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a74      	ldr	r2, [pc, #464]	; (8008a04 <HAL_DMA_IRQHandler+0xc90>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d027      	beq.n	8008886 <HAL_DMA_IRQHandler+0xb12>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a73      	ldr	r2, [pc, #460]	; (8008a08 <HAL_DMA_IRQHandler+0xc94>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d022      	beq.n	8008886 <HAL_DMA_IRQHandler+0xb12>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a71      	ldr	r2, [pc, #452]	; (8008a0c <HAL_DMA_IRQHandler+0xc98>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d01d      	beq.n	8008886 <HAL_DMA_IRQHandler+0xb12>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a70      	ldr	r2, [pc, #448]	; (8008a10 <HAL_DMA_IRQHandler+0xc9c>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d018      	beq.n	8008886 <HAL_DMA_IRQHandler+0xb12>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a6e      	ldr	r2, [pc, #440]	; (8008a14 <HAL_DMA_IRQHandler+0xca0>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d013      	beq.n	8008886 <HAL_DMA_IRQHandler+0xb12>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a6d      	ldr	r2, [pc, #436]	; (8008a18 <HAL_DMA_IRQHandler+0xca4>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d00e      	beq.n	8008886 <HAL_DMA_IRQHandler+0xb12>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a6b      	ldr	r2, [pc, #428]	; (8008a1c <HAL_DMA_IRQHandler+0xca8>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d009      	beq.n	8008886 <HAL_DMA_IRQHandler+0xb12>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a6a      	ldr	r2, [pc, #424]	; (8008a20 <HAL_DMA_IRQHandler+0xcac>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d004      	beq.n	8008886 <HAL_DMA_IRQHandler+0xb12>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a68      	ldr	r2, [pc, #416]	; (8008a24 <HAL_DMA_IRQHandler+0xcb0>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d108      	bne.n	8008898 <HAL_DMA_IRQHandler+0xb24>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f022 0208 	bic.w	r2, r2, #8
 8008894:	601a      	str	r2, [r3, #0]
 8008896:	e007      	b.n	80088a8 <HAL_DMA_IRQHandler+0xb34>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f022 0204 	bic.w	r2, r2, #4
 80088a6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	f000 8165 	beq.w	8008b7c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80088ba:	e15f      	b.n	8008b7c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088c0:	f003 031f 	and.w	r3, r3, #31
 80088c4:	2202      	movs	r2, #2
 80088c6:	409a      	lsls	r2, r3
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	4013      	ands	r3, r2
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	f000 80c5 	beq.w	8008a5c <HAL_DMA_IRQHandler+0xce8>
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	f003 0302 	and.w	r3, r3, #2
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f000 80bf 	beq.w	8008a5c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088e2:	f003 031f 	and.w	r3, r3, #31
 80088e6:	2202      	movs	r2, #2
 80088e8:	409a      	lsls	r2, r3
 80088ea:	69fb      	ldr	r3, [r7, #28]
 80088ec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d018      	beq.n	800892a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d109      	bne.n	8008916 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008906:	2b00      	cmp	r3, #0
 8008908:	f000 813a 	beq.w	8008b80 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008914:	e134      	b.n	8008b80 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800891a:	2b00      	cmp	r3, #0
 800891c:	f000 8130 	beq.w	8008b80 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008928:	e12a      	b.n	8008b80 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	f003 0320 	and.w	r3, r3, #32
 8008930:	2b00      	cmp	r3, #0
 8008932:	f040 8089 	bne.w	8008a48 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a2b      	ldr	r2, [pc, #172]	; (80089e8 <HAL_DMA_IRQHandler+0xc74>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d04a      	beq.n	80089d6 <HAL_DMA_IRQHandler+0xc62>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a29      	ldr	r2, [pc, #164]	; (80089ec <HAL_DMA_IRQHandler+0xc78>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d045      	beq.n	80089d6 <HAL_DMA_IRQHandler+0xc62>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a28      	ldr	r2, [pc, #160]	; (80089f0 <HAL_DMA_IRQHandler+0xc7c>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d040      	beq.n	80089d6 <HAL_DMA_IRQHandler+0xc62>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a26      	ldr	r2, [pc, #152]	; (80089f4 <HAL_DMA_IRQHandler+0xc80>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d03b      	beq.n	80089d6 <HAL_DMA_IRQHandler+0xc62>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a25      	ldr	r2, [pc, #148]	; (80089f8 <HAL_DMA_IRQHandler+0xc84>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d036      	beq.n	80089d6 <HAL_DMA_IRQHandler+0xc62>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a23      	ldr	r2, [pc, #140]	; (80089fc <HAL_DMA_IRQHandler+0xc88>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d031      	beq.n	80089d6 <HAL_DMA_IRQHandler+0xc62>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a22      	ldr	r2, [pc, #136]	; (8008a00 <HAL_DMA_IRQHandler+0xc8c>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d02c      	beq.n	80089d6 <HAL_DMA_IRQHandler+0xc62>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a20      	ldr	r2, [pc, #128]	; (8008a04 <HAL_DMA_IRQHandler+0xc90>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d027      	beq.n	80089d6 <HAL_DMA_IRQHandler+0xc62>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a1f      	ldr	r2, [pc, #124]	; (8008a08 <HAL_DMA_IRQHandler+0xc94>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d022      	beq.n	80089d6 <HAL_DMA_IRQHandler+0xc62>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a1d      	ldr	r2, [pc, #116]	; (8008a0c <HAL_DMA_IRQHandler+0xc98>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d01d      	beq.n	80089d6 <HAL_DMA_IRQHandler+0xc62>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a1c      	ldr	r2, [pc, #112]	; (8008a10 <HAL_DMA_IRQHandler+0xc9c>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d018      	beq.n	80089d6 <HAL_DMA_IRQHandler+0xc62>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a1a      	ldr	r2, [pc, #104]	; (8008a14 <HAL_DMA_IRQHandler+0xca0>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d013      	beq.n	80089d6 <HAL_DMA_IRQHandler+0xc62>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a19      	ldr	r2, [pc, #100]	; (8008a18 <HAL_DMA_IRQHandler+0xca4>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d00e      	beq.n	80089d6 <HAL_DMA_IRQHandler+0xc62>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a17      	ldr	r2, [pc, #92]	; (8008a1c <HAL_DMA_IRQHandler+0xca8>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d009      	beq.n	80089d6 <HAL_DMA_IRQHandler+0xc62>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a16      	ldr	r2, [pc, #88]	; (8008a20 <HAL_DMA_IRQHandler+0xcac>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d004      	beq.n	80089d6 <HAL_DMA_IRQHandler+0xc62>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a14      	ldr	r2, [pc, #80]	; (8008a24 <HAL_DMA_IRQHandler+0xcb0>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d128      	bne.n	8008a28 <HAL_DMA_IRQHandler+0xcb4>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f022 0214 	bic.w	r2, r2, #20
 80089e4:	601a      	str	r2, [r3, #0]
 80089e6:	e027      	b.n	8008a38 <HAL_DMA_IRQHandler+0xcc4>
 80089e8:	40020010 	.word	0x40020010
 80089ec:	40020028 	.word	0x40020028
 80089f0:	40020040 	.word	0x40020040
 80089f4:	40020058 	.word	0x40020058
 80089f8:	40020070 	.word	0x40020070
 80089fc:	40020088 	.word	0x40020088
 8008a00:	400200a0 	.word	0x400200a0
 8008a04:	400200b8 	.word	0x400200b8
 8008a08:	40020410 	.word	0x40020410
 8008a0c:	40020428 	.word	0x40020428
 8008a10:	40020440 	.word	0x40020440
 8008a14:	40020458 	.word	0x40020458
 8008a18:	40020470 	.word	0x40020470
 8008a1c:	40020488 	.word	0x40020488
 8008a20:	400204a0 	.word	0x400204a0
 8008a24:	400204b8 	.word	0x400204b8
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f022 020a 	bic.w	r2, r2, #10
 8008a36:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2200      	movs	r2, #0
 8008a44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	f000 8097 	beq.w	8008b80 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008a5a:	e091      	b.n	8008b80 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a60:	f003 031f 	and.w	r3, r3, #31
 8008a64:	2208      	movs	r2, #8
 8008a66:	409a      	lsls	r2, r3
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	4013      	ands	r3, r2
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	f000 8088 	beq.w	8008b82 <HAL_DMA_IRQHandler+0xe0e>
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	f003 0308 	and.w	r3, r3, #8
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	f000 8082 	beq.w	8008b82 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a41      	ldr	r2, [pc, #260]	; (8008b88 <HAL_DMA_IRQHandler+0xe14>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d04a      	beq.n	8008b1e <HAL_DMA_IRQHandler+0xdaa>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a3f      	ldr	r2, [pc, #252]	; (8008b8c <HAL_DMA_IRQHandler+0xe18>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d045      	beq.n	8008b1e <HAL_DMA_IRQHandler+0xdaa>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a3e      	ldr	r2, [pc, #248]	; (8008b90 <HAL_DMA_IRQHandler+0xe1c>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d040      	beq.n	8008b1e <HAL_DMA_IRQHandler+0xdaa>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a3c      	ldr	r2, [pc, #240]	; (8008b94 <HAL_DMA_IRQHandler+0xe20>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d03b      	beq.n	8008b1e <HAL_DMA_IRQHandler+0xdaa>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a3b      	ldr	r2, [pc, #236]	; (8008b98 <HAL_DMA_IRQHandler+0xe24>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d036      	beq.n	8008b1e <HAL_DMA_IRQHandler+0xdaa>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a39      	ldr	r2, [pc, #228]	; (8008b9c <HAL_DMA_IRQHandler+0xe28>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d031      	beq.n	8008b1e <HAL_DMA_IRQHandler+0xdaa>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4a38      	ldr	r2, [pc, #224]	; (8008ba0 <HAL_DMA_IRQHandler+0xe2c>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d02c      	beq.n	8008b1e <HAL_DMA_IRQHandler+0xdaa>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a36      	ldr	r2, [pc, #216]	; (8008ba4 <HAL_DMA_IRQHandler+0xe30>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d027      	beq.n	8008b1e <HAL_DMA_IRQHandler+0xdaa>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a35      	ldr	r2, [pc, #212]	; (8008ba8 <HAL_DMA_IRQHandler+0xe34>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d022      	beq.n	8008b1e <HAL_DMA_IRQHandler+0xdaa>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a33      	ldr	r2, [pc, #204]	; (8008bac <HAL_DMA_IRQHandler+0xe38>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d01d      	beq.n	8008b1e <HAL_DMA_IRQHandler+0xdaa>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a32      	ldr	r2, [pc, #200]	; (8008bb0 <HAL_DMA_IRQHandler+0xe3c>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d018      	beq.n	8008b1e <HAL_DMA_IRQHandler+0xdaa>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a30      	ldr	r2, [pc, #192]	; (8008bb4 <HAL_DMA_IRQHandler+0xe40>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d013      	beq.n	8008b1e <HAL_DMA_IRQHandler+0xdaa>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a2f      	ldr	r2, [pc, #188]	; (8008bb8 <HAL_DMA_IRQHandler+0xe44>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d00e      	beq.n	8008b1e <HAL_DMA_IRQHandler+0xdaa>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a2d      	ldr	r2, [pc, #180]	; (8008bbc <HAL_DMA_IRQHandler+0xe48>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d009      	beq.n	8008b1e <HAL_DMA_IRQHandler+0xdaa>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a2c      	ldr	r2, [pc, #176]	; (8008bc0 <HAL_DMA_IRQHandler+0xe4c>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d004      	beq.n	8008b1e <HAL_DMA_IRQHandler+0xdaa>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a2a      	ldr	r2, [pc, #168]	; (8008bc4 <HAL_DMA_IRQHandler+0xe50>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d108      	bne.n	8008b30 <HAL_DMA_IRQHandler+0xdbc>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	681a      	ldr	r2, [r3, #0]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f022 021c 	bic.w	r2, r2, #28
 8008b2c:	601a      	str	r2, [r3, #0]
 8008b2e:	e007      	b.n	8008b40 <HAL_DMA_IRQHandler+0xdcc>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f022 020e 	bic.w	r2, r2, #14
 8008b3e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b44:	f003 031f 	and.w	r3, r3, #31
 8008b48:	2201      	movs	r2, #1
 8008b4a:	409a      	lsls	r2, r3
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2201      	movs	r2, #1
 8008b54:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2200      	movs	r2, #0
 8008b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d009      	beq.n	8008b82 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	4798      	blx	r3
 8008b76:	e004      	b.n	8008b82 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008b78:	bf00      	nop
 8008b7a:	e002      	b.n	8008b82 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008b7c:	bf00      	nop
 8008b7e:	e000      	b.n	8008b82 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008b80:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008b82:	3728      	adds	r7, #40	; 0x28
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	40020010 	.word	0x40020010
 8008b8c:	40020028 	.word	0x40020028
 8008b90:	40020040 	.word	0x40020040
 8008b94:	40020058 	.word	0x40020058
 8008b98:	40020070 	.word	0x40020070
 8008b9c:	40020088 	.word	0x40020088
 8008ba0:	400200a0 	.word	0x400200a0
 8008ba4:	400200b8 	.word	0x400200b8
 8008ba8:	40020410 	.word	0x40020410
 8008bac:	40020428 	.word	0x40020428
 8008bb0:	40020440 	.word	0x40020440
 8008bb4:	40020458 	.word	0x40020458
 8008bb8:	40020470 	.word	0x40020470
 8008bbc:	40020488 	.word	0x40020488
 8008bc0:	400204a0 	.word	0x400204a0
 8008bc4:	400204b8 	.word	0x400204b8

08008bc8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b087      	sub	sp, #28
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	60f8      	str	r0, [r7, #12]
 8008bd0:	60b9      	str	r1, [r7, #8]
 8008bd2:	607a      	str	r2, [r7, #4]
 8008bd4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bda:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008be0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a7f      	ldr	r2, [pc, #508]	; (8008de4 <DMA_SetConfig+0x21c>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d072      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a7d      	ldr	r2, [pc, #500]	; (8008de8 <DMA_SetConfig+0x220>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d06d      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a7c      	ldr	r2, [pc, #496]	; (8008dec <DMA_SetConfig+0x224>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d068      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a7a      	ldr	r2, [pc, #488]	; (8008df0 <DMA_SetConfig+0x228>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d063      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a79      	ldr	r2, [pc, #484]	; (8008df4 <DMA_SetConfig+0x22c>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d05e      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a77      	ldr	r2, [pc, #476]	; (8008df8 <DMA_SetConfig+0x230>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d059      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a76      	ldr	r2, [pc, #472]	; (8008dfc <DMA_SetConfig+0x234>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d054      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a74      	ldr	r2, [pc, #464]	; (8008e00 <DMA_SetConfig+0x238>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d04f      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a73      	ldr	r2, [pc, #460]	; (8008e04 <DMA_SetConfig+0x23c>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d04a      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a71      	ldr	r2, [pc, #452]	; (8008e08 <DMA_SetConfig+0x240>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d045      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a70      	ldr	r2, [pc, #448]	; (8008e0c <DMA_SetConfig+0x244>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d040      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a6e      	ldr	r2, [pc, #440]	; (8008e10 <DMA_SetConfig+0x248>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d03b      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a6d      	ldr	r2, [pc, #436]	; (8008e14 <DMA_SetConfig+0x24c>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d036      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a6b      	ldr	r2, [pc, #428]	; (8008e18 <DMA_SetConfig+0x250>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d031      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a6a      	ldr	r2, [pc, #424]	; (8008e1c <DMA_SetConfig+0x254>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d02c      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a68      	ldr	r2, [pc, #416]	; (8008e20 <DMA_SetConfig+0x258>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d027      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a67      	ldr	r2, [pc, #412]	; (8008e24 <DMA_SetConfig+0x25c>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d022      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a65      	ldr	r2, [pc, #404]	; (8008e28 <DMA_SetConfig+0x260>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d01d      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4a64      	ldr	r2, [pc, #400]	; (8008e2c <DMA_SetConfig+0x264>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d018      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a62      	ldr	r2, [pc, #392]	; (8008e30 <DMA_SetConfig+0x268>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d013      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a61      	ldr	r2, [pc, #388]	; (8008e34 <DMA_SetConfig+0x26c>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d00e      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a5f      	ldr	r2, [pc, #380]	; (8008e38 <DMA_SetConfig+0x270>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d009      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a5e      	ldr	r2, [pc, #376]	; (8008e3c <DMA_SetConfig+0x274>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d004      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a5c      	ldr	r2, [pc, #368]	; (8008e40 <DMA_SetConfig+0x278>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d101      	bne.n	8008cd6 <DMA_SetConfig+0x10e>
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e000      	b.n	8008cd8 <DMA_SetConfig+0x110>
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d00d      	beq.n	8008cf8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ce0:	68fa      	ldr	r2, [r7, #12]
 8008ce2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008ce4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d004      	beq.n	8008cf8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cf2:	68fa      	ldr	r2, [r7, #12]
 8008cf4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008cf6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a39      	ldr	r2, [pc, #228]	; (8008de4 <DMA_SetConfig+0x21c>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d04a      	beq.n	8008d98 <DMA_SetConfig+0x1d0>
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a38      	ldr	r2, [pc, #224]	; (8008de8 <DMA_SetConfig+0x220>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d045      	beq.n	8008d98 <DMA_SetConfig+0x1d0>
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a36      	ldr	r2, [pc, #216]	; (8008dec <DMA_SetConfig+0x224>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d040      	beq.n	8008d98 <DMA_SetConfig+0x1d0>
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a35      	ldr	r2, [pc, #212]	; (8008df0 <DMA_SetConfig+0x228>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d03b      	beq.n	8008d98 <DMA_SetConfig+0x1d0>
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a33      	ldr	r2, [pc, #204]	; (8008df4 <DMA_SetConfig+0x22c>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d036      	beq.n	8008d98 <DMA_SetConfig+0x1d0>
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a32      	ldr	r2, [pc, #200]	; (8008df8 <DMA_SetConfig+0x230>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d031      	beq.n	8008d98 <DMA_SetConfig+0x1d0>
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a30      	ldr	r2, [pc, #192]	; (8008dfc <DMA_SetConfig+0x234>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d02c      	beq.n	8008d98 <DMA_SetConfig+0x1d0>
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a2f      	ldr	r2, [pc, #188]	; (8008e00 <DMA_SetConfig+0x238>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d027      	beq.n	8008d98 <DMA_SetConfig+0x1d0>
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a2d      	ldr	r2, [pc, #180]	; (8008e04 <DMA_SetConfig+0x23c>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d022      	beq.n	8008d98 <DMA_SetConfig+0x1d0>
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a2c      	ldr	r2, [pc, #176]	; (8008e08 <DMA_SetConfig+0x240>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d01d      	beq.n	8008d98 <DMA_SetConfig+0x1d0>
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a2a      	ldr	r2, [pc, #168]	; (8008e0c <DMA_SetConfig+0x244>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d018      	beq.n	8008d98 <DMA_SetConfig+0x1d0>
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a29      	ldr	r2, [pc, #164]	; (8008e10 <DMA_SetConfig+0x248>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d013      	beq.n	8008d98 <DMA_SetConfig+0x1d0>
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a27      	ldr	r2, [pc, #156]	; (8008e14 <DMA_SetConfig+0x24c>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d00e      	beq.n	8008d98 <DMA_SetConfig+0x1d0>
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a26      	ldr	r2, [pc, #152]	; (8008e18 <DMA_SetConfig+0x250>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d009      	beq.n	8008d98 <DMA_SetConfig+0x1d0>
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a24      	ldr	r2, [pc, #144]	; (8008e1c <DMA_SetConfig+0x254>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d004      	beq.n	8008d98 <DMA_SetConfig+0x1d0>
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a23      	ldr	r2, [pc, #140]	; (8008e20 <DMA_SetConfig+0x258>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d101      	bne.n	8008d9c <DMA_SetConfig+0x1d4>
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e000      	b.n	8008d9e <DMA_SetConfig+0x1d6>
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d059      	beq.n	8008e56 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008da6:	f003 031f 	and.w	r3, r3, #31
 8008daa:	223f      	movs	r2, #63	; 0x3f
 8008dac:	409a      	lsls	r2, r3
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008dc0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	683a      	ldr	r2, [r7, #0]
 8008dc8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	2b40      	cmp	r3, #64	; 0x40
 8008dd0:	d138      	bne.n	8008e44 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	68ba      	ldr	r2, [r7, #8]
 8008de0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008de2:	e086      	b.n	8008ef2 <DMA_SetConfig+0x32a>
 8008de4:	40020010 	.word	0x40020010
 8008de8:	40020028 	.word	0x40020028
 8008dec:	40020040 	.word	0x40020040
 8008df0:	40020058 	.word	0x40020058
 8008df4:	40020070 	.word	0x40020070
 8008df8:	40020088 	.word	0x40020088
 8008dfc:	400200a0 	.word	0x400200a0
 8008e00:	400200b8 	.word	0x400200b8
 8008e04:	40020410 	.word	0x40020410
 8008e08:	40020428 	.word	0x40020428
 8008e0c:	40020440 	.word	0x40020440
 8008e10:	40020458 	.word	0x40020458
 8008e14:	40020470 	.word	0x40020470
 8008e18:	40020488 	.word	0x40020488
 8008e1c:	400204a0 	.word	0x400204a0
 8008e20:	400204b8 	.word	0x400204b8
 8008e24:	58025408 	.word	0x58025408
 8008e28:	5802541c 	.word	0x5802541c
 8008e2c:	58025430 	.word	0x58025430
 8008e30:	58025444 	.word	0x58025444
 8008e34:	58025458 	.word	0x58025458
 8008e38:	5802546c 	.word	0x5802546c
 8008e3c:	58025480 	.word	0x58025480
 8008e40:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	68ba      	ldr	r2, [r7, #8]
 8008e4a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	60da      	str	r2, [r3, #12]
}
 8008e54:	e04d      	b.n	8008ef2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a29      	ldr	r2, [pc, #164]	; (8008f00 <DMA_SetConfig+0x338>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d022      	beq.n	8008ea6 <DMA_SetConfig+0x2de>
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a27      	ldr	r2, [pc, #156]	; (8008f04 <DMA_SetConfig+0x33c>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d01d      	beq.n	8008ea6 <DMA_SetConfig+0x2de>
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a26      	ldr	r2, [pc, #152]	; (8008f08 <DMA_SetConfig+0x340>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d018      	beq.n	8008ea6 <DMA_SetConfig+0x2de>
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a24      	ldr	r2, [pc, #144]	; (8008f0c <DMA_SetConfig+0x344>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d013      	beq.n	8008ea6 <DMA_SetConfig+0x2de>
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a23      	ldr	r2, [pc, #140]	; (8008f10 <DMA_SetConfig+0x348>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d00e      	beq.n	8008ea6 <DMA_SetConfig+0x2de>
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a21      	ldr	r2, [pc, #132]	; (8008f14 <DMA_SetConfig+0x34c>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d009      	beq.n	8008ea6 <DMA_SetConfig+0x2de>
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a20      	ldr	r2, [pc, #128]	; (8008f18 <DMA_SetConfig+0x350>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d004      	beq.n	8008ea6 <DMA_SetConfig+0x2de>
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a1e      	ldr	r2, [pc, #120]	; (8008f1c <DMA_SetConfig+0x354>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d101      	bne.n	8008eaa <DMA_SetConfig+0x2e2>
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	e000      	b.n	8008eac <DMA_SetConfig+0x2e4>
 8008eaa:	2300      	movs	r3, #0
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d020      	beq.n	8008ef2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008eb4:	f003 031f 	and.w	r3, r3, #31
 8008eb8:	2201      	movs	r2, #1
 8008eba:	409a      	lsls	r2, r3
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	683a      	ldr	r2, [r7, #0]
 8008ec6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	2b40      	cmp	r3, #64	; 0x40
 8008ece:	d108      	bne.n	8008ee2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	68ba      	ldr	r2, [r7, #8]
 8008ede:	60da      	str	r2, [r3, #12]
}
 8008ee0:	e007      	b.n	8008ef2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	68ba      	ldr	r2, [r7, #8]
 8008ee8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	60da      	str	r2, [r3, #12]
}
 8008ef2:	bf00      	nop
 8008ef4:	371c      	adds	r7, #28
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr
 8008efe:	bf00      	nop
 8008f00:	58025408 	.word	0x58025408
 8008f04:	5802541c 	.word	0x5802541c
 8008f08:	58025430 	.word	0x58025430
 8008f0c:	58025444 	.word	0x58025444
 8008f10:	58025458 	.word	0x58025458
 8008f14:	5802546c 	.word	0x5802546c
 8008f18:	58025480 	.word	0x58025480
 8008f1c:	58025494 	.word	0x58025494

08008f20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b085      	sub	sp, #20
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a42      	ldr	r2, [pc, #264]	; (8009038 <DMA_CalcBaseAndBitshift+0x118>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d04a      	beq.n	8008fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4a41      	ldr	r2, [pc, #260]	; (800903c <DMA_CalcBaseAndBitshift+0x11c>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d045      	beq.n	8008fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a3f      	ldr	r2, [pc, #252]	; (8009040 <DMA_CalcBaseAndBitshift+0x120>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d040      	beq.n	8008fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a3e      	ldr	r2, [pc, #248]	; (8009044 <DMA_CalcBaseAndBitshift+0x124>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d03b      	beq.n	8008fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a3c      	ldr	r2, [pc, #240]	; (8009048 <DMA_CalcBaseAndBitshift+0x128>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d036      	beq.n	8008fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4a3b      	ldr	r2, [pc, #236]	; (800904c <DMA_CalcBaseAndBitshift+0x12c>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d031      	beq.n	8008fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4a39      	ldr	r2, [pc, #228]	; (8009050 <DMA_CalcBaseAndBitshift+0x130>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d02c      	beq.n	8008fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a38      	ldr	r2, [pc, #224]	; (8009054 <DMA_CalcBaseAndBitshift+0x134>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d027      	beq.n	8008fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a36      	ldr	r2, [pc, #216]	; (8009058 <DMA_CalcBaseAndBitshift+0x138>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d022      	beq.n	8008fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a35      	ldr	r2, [pc, #212]	; (800905c <DMA_CalcBaseAndBitshift+0x13c>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d01d      	beq.n	8008fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a33      	ldr	r2, [pc, #204]	; (8009060 <DMA_CalcBaseAndBitshift+0x140>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d018      	beq.n	8008fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a32      	ldr	r2, [pc, #200]	; (8009064 <DMA_CalcBaseAndBitshift+0x144>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d013      	beq.n	8008fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a30      	ldr	r2, [pc, #192]	; (8009068 <DMA_CalcBaseAndBitshift+0x148>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d00e      	beq.n	8008fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a2f      	ldr	r2, [pc, #188]	; (800906c <DMA_CalcBaseAndBitshift+0x14c>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d009      	beq.n	8008fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a2d      	ldr	r2, [pc, #180]	; (8009070 <DMA_CalcBaseAndBitshift+0x150>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d004      	beq.n	8008fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4a2c      	ldr	r2, [pc, #176]	; (8009074 <DMA_CalcBaseAndBitshift+0x154>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d101      	bne.n	8008fcc <DMA_CalcBaseAndBitshift+0xac>
 8008fc8:	2301      	movs	r3, #1
 8008fca:	e000      	b.n	8008fce <DMA_CalcBaseAndBitshift+0xae>
 8008fcc:	2300      	movs	r3, #0
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d024      	beq.n	800901c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	3b10      	subs	r3, #16
 8008fda:	4a27      	ldr	r2, [pc, #156]	; (8009078 <DMA_CalcBaseAndBitshift+0x158>)
 8008fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8008fe0:	091b      	lsrs	r3, r3, #4
 8008fe2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f003 0307 	and.w	r3, r3, #7
 8008fea:	4a24      	ldr	r2, [pc, #144]	; (800907c <DMA_CalcBaseAndBitshift+0x15c>)
 8008fec:	5cd3      	ldrb	r3, [r2, r3]
 8008fee:	461a      	mov	r2, r3
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2b03      	cmp	r3, #3
 8008ff8:	d908      	bls.n	800900c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	461a      	mov	r2, r3
 8009000:	4b1f      	ldr	r3, [pc, #124]	; (8009080 <DMA_CalcBaseAndBitshift+0x160>)
 8009002:	4013      	ands	r3, r2
 8009004:	1d1a      	adds	r2, r3, #4
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	659a      	str	r2, [r3, #88]	; 0x58
 800900a:	e00d      	b.n	8009028 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	461a      	mov	r2, r3
 8009012:	4b1b      	ldr	r3, [pc, #108]	; (8009080 <DMA_CalcBaseAndBitshift+0x160>)
 8009014:	4013      	ands	r3, r2
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	6593      	str	r3, [r2, #88]	; 0x58
 800901a:	e005      	b.n	8009028 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800902c:	4618      	mov	r0, r3
 800902e:	3714      	adds	r7, #20
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr
 8009038:	40020010 	.word	0x40020010
 800903c:	40020028 	.word	0x40020028
 8009040:	40020040 	.word	0x40020040
 8009044:	40020058 	.word	0x40020058
 8009048:	40020070 	.word	0x40020070
 800904c:	40020088 	.word	0x40020088
 8009050:	400200a0 	.word	0x400200a0
 8009054:	400200b8 	.word	0x400200b8
 8009058:	40020410 	.word	0x40020410
 800905c:	40020428 	.word	0x40020428
 8009060:	40020440 	.word	0x40020440
 8009064:	40020458 	.word	0x40020458
 8009068:	40020470 	.word	0x40020470
 800906c:	40020488 	.word	0x40020488
 8009070:	400204a0 	.word	0x400204a0
 8009074:	400204b8 	.word	0x400204b8
 8009078:	aaaaaaab 	.word	0xaaaaaaab
 800907c:	08010744 	.word	0x08010744
 8009080:	fffffc00 	.word	0xfffffc00

08009084 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009084:	b480      	push	{r7}
 8009086:	b085      	sub	sp, #20
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800908c:	2300      	movs	r3, #0
 800908e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	699b      	ldr	r3, [r3, #24]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d120      	bne.n	80090da <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800909c:	2b03      	cmp	r3, #3
 800909e:	d858      	bhi.n	8009152 <DMA_CheckFifoParam+0xce>
 80090a0:	a201      	add	r2, pc, #4	; (adr r2, 80090a8 <DMA_CheckFifoParam+0x24>)
 80090a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a6:	bf00      	nop
 80090a8:	080090b9 	.word	0x080090b9
 80090ac:	080090cb 	.word	0x080090cb
 80090b0:	080090b9 	.word	0x080090b9
 80090b4:	08009153 	.word	0x08009153
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d048      	beq.n	8009156 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80090c8:	e045      	b.n	8009156 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80090d2:	d142      	bne.n	800915a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80090d4:	2301      	movs	r3, #1
 80090d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80090d8:	e03f      	b.n	800915a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	699b      	ldr	r3, [r3, #24]
 80090de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090e2:	d123      	bne.n	800912c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090e8:	2b03      	cmp	r3, #3
 80090ea:	d838      	bhi.n	800915e <DMA_CheckFifoParam+0xda>
 80090ec:	a201      	add	r2, pc, #4	; (adr r2, 80090f4 <DMA_CheckFifoParam+0x70>)
 80090ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f2:	bf00      	nop
 80090f4:	08009105 	.word	0x08009105
 80090f8:	0800910b 	.word	0x0800910b
 80090fc:	08009105 	.word	0x08009105
 8009100:	0800911d 	.word	0x0800911d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009104:	2301      	movs	r3, #1
 8009106:	73fb      	strb	r3, [r7, #15]
        break;
 8009108:	e030      	b.n	800916c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800910e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009112:	2b00      	cmp	r3, #0
 8009114:	d025      	beq.n	8009162 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009116:	2301      	movs	r3, #1
 8009118:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800911a:	e022      	b.n	8009162 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009120:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009124:	d11f      	bne.n	8009166 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009126:	2301      	movs	r3, #1
 8009128:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800912a:	e01c      	b.n	8009166 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009130:	2b02      	cmp	r3, #2
 8009132:	d902      	bls.n	800913a <DMA_CheckFifoParam+0xb6>
 8009134:	2b03      	cmp	r3, #3
 8009136:	d003      	beq.n	8009140 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009138:	e018      	b.n	800916c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800913a:	2301      	movs	r3, #1
 800913c:	73fb      	strb	r3, [r7, #15]
        break;
 800913e:	e015      	b.n	800916c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009144:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009148:	2b00      	cmp	r3, #0
 800914a:	d00e      	beq.n	800916a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800914c:	2301      	movs	r3, #1
 800914e:	73fb      	strb	r3, [r7, #15]
    break;
 8009150:	e00b      	b.n	800916a <DMA_CheckFifoParam+0xe6>
        break;
 8009152:	bf00      	nop
 8009154:	e00a      	b.n	800916c <DMA_CheckFifoParam+0xe8>
        break;
 8009156:	bf00      	nop
 8009158:	e008      	b.n	800916c <DMA_CheckFifoParam+0xe8>
        break;
 800915a:	bf00      	nop
 800915c:	e006      	b.n	800916c <DMA_CheckFifoParam+0xe8>
        break;
 800915e:	bf00      	nop
 8009160:	e004      	b.n	800916c <DMA_CheckFifoParam+0xe8>
        break;
 8009162:	bf00      	nop
 8009164:	e002      	b.n	800916c <DMA_CheckFifoParam+0xe8>
        break;
 8009166:	bf00      	nop
 8009168:	e000      	b.n	800916c <DMA_CheckFifoParam+0xe8>
    break;
 800916a:	bf00      	nop
    }
  }

  return status;
 800916c:	7bfb      	ldrb	r3, [r7, #15]
}
 800916e:	4618      	mov	r0, r3
 8009170:	3714      	adds	r7, #20
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr
 800917a:	bf00      	nop

0800917c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800917c:	b480      	push	{r7}
 800917e:	b085      	sub	sp, #20
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a38      	ldr	r2, [pc, #224]	; (8009270 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d022      	beq.n	80091da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a36      	ldr	r2, [pc, #216]	; (8009274 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d01d      	beq.n	80091da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a35      	ldr	r2, [pc, #212]	; (8009278 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d018      	beq.n	80091da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a33      	ldr	r2, [pc, #204]	; (800927c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d013      	beq.n	80091da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a32      	ldr	r2, [pc, #200]	; (8009280 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d00e      	beq.n	80091da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a30      	ldr	r2, [pc, #192]	; (8009284 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d009      	beq.n	80091da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a2f      	ldr	r2, [pc, #188]	; (8009288 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d004      	beq.n	80091da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a2d      	ldr	r2, [pc, #180]	; (800928c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d101      	bne.n	80091de <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80091da:	2301      	movs	r3, #1
 80091dc:	e000      	b.n	80091e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80091de:	2300      	movs	r3, #0
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d01a      	beq.n	800921a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	b2db      	uxtb	r3, r3
 80091ea:	3b08      	subs	r3, #8
 80091ec:	4a28      	ldr	r2, [pc, #160]	; (8009290 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80091ee:	fba2 2303 	umull	r2, r3, r2, r3
 80091f2:	091b      	lsrs	r3, r3, #4
 80091f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80091f6:	68fa      	ldr	r2, [r7, #12]
 80091f8:	4b26      	ldr	r3, [pc, #152]	; (8009294 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80091fa:	4413      	add	r3, r2
 80091fc:	009b      	lsls	r3, r3, #2
 80091fe:	461a      	mov	r2, r3
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	4a24      	ldr	r2, [pc, #144]	; (8009298 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009208:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f003 031f 	and.w	r3, r3, #31
 8009210:	2201      	movs	r2, #1
 8009212:	409a      	lsls	r2, r3
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009218:	e024      	b.n	8009264 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	b2db      	uxtb	r3, r3
 8009220:	3b10      	subs	r3, #16
 8009222:	4a1e      	ldr	r2, [pc, #120]	; (800929c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009224:	fba2 2303 	umull	r2, r3, r2, r3
 8009228:	091b      	lsrs	r3, r3, #4
 800922a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	4a1c      	ldr	r2, [pc, #112]	; (80092a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d806      	bhi.n	8009242 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	4a1b      	ldr	r2, [pc, #108]	; (80092a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d902      	bls.n	8009242 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	3308      	adds	r3, #8
 8009240:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009242:	68fa      	ldr	r2, [r7, #12]
 8009244:	4b18      	ldr	r3, [pc, #96]	; (80092a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009246:	4413      	add	r3, r2
 8009248:	009b      	lsls	r3, r3, #2
 800924a:	461a      	mov	r2, r3
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	4a16      	ldr	r2, [pc, #88]	; (80092ac <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009254:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f003 031f 	and.w	r3, r3, #31
 800925c:	2201      	movs	r2, #1
 800925e:	409a      	lsls	r2, r3
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009264:	bf00      	nop
 8009266:	3714      	adds	r7, #20
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr
 8009270:	58025408 	.word	0x58025408
 8009274:	5802541c 	.word	0x5802541c
 8009278:	58025430 	.word	0x58025430
 800927c:	58025444 	.word	0x58025444
 8009280:	58025458 	.word	0x58025458
 8009284:	5802546c 	.word	0x5802546c
 8009288:	58025480 	.word	0x58025480
 800928c:	58025494 	.word	0x58025494
 8009290:	cccccccd 	.word	0xcccccccd
 8009294:	16009600 	.word	0x16009600
 8009298:	58025880 	.word	0x58025880
 800929c:	aaaaaaab 	.word	0xaaaaaaab
 80092a0:	400204b8 	.word	0x400204b8
 80092a4:	4002040f 	.word	0x4002040f
 80092a8:	10008200 	.word	0x10008200
 80092ac:	40020880 	.word	0x40020880

080092b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b085      	sub	sp, #20
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d04a      	beq.n	800935c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2b08      	cmp	r3, #8
 80092ca:	d847      	bhi.n	800935c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a25      	ldr	r2, [pc, #148]	; (8009368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d022      	beq.n	800931c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a24      	ldr	r2, [pc, #144]	; (800936c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d01d      	beq.n	800931c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4a22      	ldr	r2, [pc, #136]	; (8009370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d018      	beq.n	800931c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a21      	ldr	r2, [pc, #132]	; (8009374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d013      	beq.n	800931c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a1f      	ldr	r2, [pc, #124]	; (8009378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d00e      	beq.n	800931c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a1e      	ldr	r2, [pc, #120]	; (800937c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d009      	beq.n	800931c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a1c      	ldr	r2, [pc, #112]	; (8009380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d004      	beq.n	800931c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a1b      	ldr	r2, [pc, #108]	; (8009384 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d101      	bne.n	8009320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800931c:	2301      	movs	r3, #1
 800931e:	e000      	b.n	8009322 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009320:	2300      	movs	r3, #0
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00a      	beq.n	800933c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009326:	68fa      	ldr	r2, [r7, #12]
 8009328:	4b17      	ldr	r3, [pc, #92]	; (8009388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800932a:	4413      	add	r3, r2
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	461a      	mov	r2, r3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	4a15      	ldr	r2, [pc, #84]	; (800938c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009338:	671a      	str	r2, [r3, #112]	; 0x70
 800933a:	e009      	b.n	8009350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800933c:	68fa      	ldr	r2, [r7, #12]
 800933e:	4b14      	ldr	r3, [pc, #80]	; (8009390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009340:	4413      	add	r3, r2
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	461a      	mov	r2, r3
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	4a11      	ldr	r2, [pc, #68]	; (8009394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800934e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	3b01      	subs	r3, #1
 8009354:	2201      	movs	r2, #1
 8009356:	409a      	lsls	r2, r3
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800935c:	bf00      	nop
 800935e:	3714      	adds	r7, #20
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr
 8009368:	58025408 	.word	0x58025408
 800936c:	5802541c 	.word	0x5802541c
 8009370:	58025430 	.word	0x58025430
 8009374:	58025444 	.word	0x58025444
 8009378:	58025458 	.word	0x58025458
 800937c:	5802546c 	.word	0x5802546c
 8009380:	58025480 	.word	0x58025480
 8009384:	58025494 	.word	0x58025494
 8009388:	1600963f 	.word	0x1600963f
 800938c:	58025940 	.word	0x58025940
 8009390:	1000823f 	.word	0x1000823f
 8009394:	40020940 	.word	0x40020940

08009398 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009398:	b480      	push	{r7}
 800939a:	b089      	sub	sp, #36	; 0x24
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80093a2:	2300      	movs	r3, #0
 80093a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80093a6:	4b86      	ldr	r3, [pc, #536]	; (80095c0 <HAL_GPIO_Init+0x228>)
 80093a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80093aa:	e18c      	b.n	80096c6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	2101      	movs	r1, #1
 80093b2:	69fb      	ldr	r3, [r7, #28]
 80093b4:	fa01 f303 	lsl.w	r3, r1, r3
 80093b8:	4013      	ands	r3, r2
 80093ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	f000 817e 	beq.w	80096c0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	f003 0303 	and.w	r3, r3, #3
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d005      	beq.n	80093dc <HAL_GPIO_Init+0x44>
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	f003 0303 	and.w	r3, r3, #3
 80093d8:	2b02      	cmp	r3, #2
 80093da:	d130      	bne.n	800943e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	689b      	ldr	r3, [r3, #8]
 80093e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80093e2:	69fb      	ldr	r3, [r7, #28]
 80093e4:	005b      	lsls	r3, r3, #1
 80093e6:	2203      	movs	r2, #3
 80093e8:	fa02 f303 	lsl.w	r3, r2, r3
 80093ec:	43db      	mvns	r3, r3
 80093ee:	69ba      	ldr	r2, [r7, #24]
 80093f0:	4013      	ands	r3, r2
 80093f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	68da      	ldr	r2, [r3, #12]
 80093f8:	69fb      	ldr	r3, [r7, #28]
 80093fa:	005b      	lsls	r3, r3, #1
 80093fc:	fa02 f303 	lsl.w	r3, r2, r3
 8009400:	69ba      	ldr	r2, [r7, #24]
 8009402:	4313      	orrs	r3, r2
 8009404:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	69ba      	ldr	r2, [r7, #24]
 800940a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009412:	2201      	movs	r2, #1
 8009414:	69fb      	ldr	r3, [r7, #28]
 8009416:	fa02 f303 	lsl.w	r3, r2, r3
 800941a:	43db      	mvns	r3, r3
 800941c:	69ba      	ldr	r2, [r7, #24]
 800941e:	4013      	ands	r3, r2
 8009420:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	091b      	lsrs	r3, r3, #4
 8009428:	f003 0201 	and.w	r2, r3, #1
 800942c:	69fb      	ldr	r3, [r7, #28]
 800942e:	fa02 f303 	lsl.w	r3, r2, r3
 8009432:	69ba      	ldr	r2, [r7, #24]
 8009434:	4313      	orrs	r3, r2
 8009436:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	69ba      	ldr	r2, [r7, #24]
 800943c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	f003 0303 	and.w	r3, r3, #3
 8009446:	2b03      	cmp	r3, #3
 8009448:	d017      	beq.n	800947a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009450:	69fb      	ldr	r3, [r7, #28]
 8009452:	005b      	lsls	r3, r3, #1
 8009454:	2203      	movs	r2, #3
 8009456:	fa02 f303 	lsl.w	r3, r2, r3
 800945a:	43db      	mvns	r3, r3
 800945c:	69ba      	ldr	r2, [r7, #24]
 800945e:	4013      	ands	r3, r2
 8009460:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	689a      	ldr	r2, [r3, #8]
 8009466:	69fb      	ldr	r3, [r7, #28]
 8009468:	005b      	lsls	r3, r3, #1
 800946a:	fa02 f303 	lsl.w	r3, r2, r3
 800946e:	69ba      	ldr	r2, [r7, #24]
 8009470:	4313      	orrs	r3, r2
 8009472:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	69ba      	ldr	r2, [r7, #24]
 8009478:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	f003 0303 	and.w	r3, r3, #3
 8009482:	2b02      	cmp	r3, #2
 8009484:	d123      	bne.n	80094ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009486:	69fb      	ldr	r3, [r7, #28]
 8009488:	08da      	lsrs	r2, r3, #3
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	3208      	adds	r2, #8
 800948e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009492:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009494:	69fb      	ldr	r3, [r7, #28]
 8009496:	f003 0307 	and.w	r3, r3, #7
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	220f      	movs	r2, #15
 800949e:	fa02 f303 	lsl.w	r3, r2, r3
 80094a2:	43db      	mvns	r3, r3
 80094a4:	69ba      	ldr	r2, [r7, #24]
 80094a6:	4013      	ands	r3, r2
 80094a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	691a      	ldr	r2, [r3, #16]
 80094ae:	69fb      	ldr	r3, [r7, #28]
 80094b0:	f003 0307 	and.w	r3, r3, #7
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	fa02 f303 	lsl.w	r3, r2, r3
 80094ba:	69ba      	ldr	r2, [r7, #24]
 80094bc:	4313      	orrs	r3, r2
 80094be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80094c0:	69fb      	ldr	r3, [r7, #28]
 80094c2:	08da      	lsrs	r2, r3, #3
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	3208      	adds	r2, #8
 80094c8:	69b9      	ldr	r1, [r7, #24]
 80094ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	005b      	lsls	r3, r3, #1
 80094d8:	2203      	movs	r2, #3
 80094da:	fa02 f303 	lsl.w	r3, r2, r3
 80094de:	43db      	mvns	r3, r3
 80094e0:	69ba      	ldr	r2, [r7, #24]
 80094e2:	4013      	ands	r3, r2
 80094e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	f003 0203 	and.w	r2, r3, #3
 80094ee:	69fb      	ldr	r3, [r7, #28]
 80094f0:	005b      	lsls	r3, r3, #1
 80094f2:	fa02 f303 	lsl.w	r3, r2, r3
 80094f6:	69ba      	ldr	r2, [r7, #24]
 80094f8:	4313      	orrs	r3, r2
 80094fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	69ba      	ldr	r2, [r7, #24]
 8009500:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800950a:	2b00      	cmp	r3, #0
 800950c:	f000 80d8 	beq.w	80096c0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009510:	4b2c      	ldr	r3, [pc, #176]	; (80095c4 <HAL_GPIO_Init+0x22c>)
 8009512:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009516:	4a2b      	ldr	r2, [pc, #172]	; (80095c4 <HAL_GPIO_Init+0x22c>)
 8009518:	f043 0302 	orr.w	r3, r3, #2
 800951c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009520:	4b28      	ldr	r3, [pc, #160]	; (80095c4 <HAL_GPIO_Init+0x22c>)
 8009522:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009526:	f003 0302 	and.w	r3, r3, #2
 800952a:	60fb      	str	r3, [r7, #12]
 800952c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800952e:	4a26      	ldr	r2, [pc, #152]	; (80095c8 <HAL_GPIO_Init+0x230>)
 8009530:	69fb      	ldr	r3, [r7, #28]
 8009532:	089b      	lsrs	r3, r3, #2
 8009534:	3302      	adds	r3, #2
 8009536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800953a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800953c:	69fb      	ldr	r3, [r7, #28]
 800953e:	f003 0303 	and.w	r3, r3, #3
 8009542:	009b      	lsls	r3, r3, #2
 8009544:	220f      	movs	r2, #15
 8009546:	fa02 f303 	lsl.w	r3, r2, r3
 800954a:	43db      	mvns	r3, r3
 800954c:	69ba      	ldr	r2, [r7, #24]
 800954e:	4013      	ands	r3, r2
 8009550:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	4a1d      	ldr	r2, [pc, #116]	; (80095cc <HAL_GPIO_Init+0x234>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d04a      	beq.n	80095f0 <HAL_GPIO_Init+0x258>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	4a1c      	ldr	r2, [pc, #112]	; (80095d0 <HAL_GPIO_Init+0x238>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d02b      	beq.n	80095ba <HAL_GPIO_Init+0x222>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4a1b      	ldr	r2, [pc, #108]	; (80095d4 <HAL_GPIO_Init+0x23c>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d025      	beq.n	80095b6 <HAL_GPIO_Init+0x21e>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4a1a      	ldr	r2, [pc, #104]	; (80095d8 <HAL_GPIO_Init+0x240>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d01f      	beq.n	80095b2 <HAL_GPIO_Init+0x21a>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	4a19      	ldr	r2, [pc, #100]	; (80095dc <HAL_GPIO_Init+0x244>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d019      	beq.n	80095ae <HAL_GPIO_Init+0x216>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4a18      	ldr	r2, [pc, #96]	; (80095e0 <HAL_GPIO_Init+0x248>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d013      	beq.n	80095aa <HAL_GPIO_Init+0x212>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	4a17      	ldr	r2, [pc, #92]	; (80095e4 <HAL_GPIO_Init+0x24c>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d00d      	beq.n	80095a6 <HAL_GPIO_Init+0x20e>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4a16      	ldr	r2, [pc, #88]	; (80095e8 <HAL_GPIO_Init+0x250>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d007      	beq.n	80095a2 <HAL_GPIO_Init+0x20a>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	4a15      	ldr	r2, [pc, #84]	; (80095ec <HAL_GPIO_Init+0x254>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d101      	bne.n	800959e <HAL_GPIO_Init+0x206>
 800959a:	2309      	movs	r3, #9
 800959c:	e029      	b.n	80095f2 <HAL_GPIO_Init+0x25a>
 800959e:	230a      	movs	r3, #10
 80095a0:	e027      	b.n	80095f2 <HAL_GPIO_Init+0x25a>
 80095a2:	2307      	movs	r3, #7
 80095a4:	e025      	b.n	80095f2 <HAL_GPIO_Init+0x25a>
 80095a6:	2306      	movs	r3, #6
 80095a8:	e023      	b.n	80095f2 <HAL_GPIO_Init+0x25a>
 80095aa:	2305      	movs	r3, #5
 80095ac:	e021      	b.n	80095f2 <HAL_GPIO_Init+0x25a>
 80095ae:	2304      	movs	r3, #4
 80095b0:	e01f      	b.n	80095f2 <HAL_GPIO_Init+0x25a>
 80095b2:	2303      	movs	r3, #3
 80095b4:	e01d      	b.n	80095f2 <HAL_GPIO_Init+0x25a>
 80095b6:	2302      	movs	r3, #2
 80095b8:	e01b      	b.n	80095f2 <HAL_GPIO_Init+0x25a>
 80095ba:	2301      	movs	r3, #1
 80095bc:	e019      	b.n	80095f2 <HAL_GPIO_Init+0x25a>
 80095be:	bf00      	nop
 80095c0:	58000080 	.word	0x58000080
 80095c4:	58024400 	.word	0x58024400
 80095c8:	58000400 	.word	0x58000400
 80095cc:	58020000 	.word	0x58020000
 80095d0:	58020400 	.word	0x58020400
 80095d4:	58020800 	.word	0x58020800
 80095d8:	58020c00 	.word	0x58020c00
 80095dc:	58021000 	.word	0x58021000
 80095e0:	58021400 	.word	0x58021400
 80095e4:	58021800 	.word	0x58021800
 80095e8:	58021c00 	.word	0x58021c00
 80095ec:	58022400 	.word	0x58022400
 80095f0:	2300      	movs	r3, #0
 80095f2:	69fa      	ldr	r2, [r7, #28]
 80095f4:	f002 0203 	and.w	r2, r2, #3
 80095f8:	0092      	lsls	r2, r2, #2
 80095fa:	4093      	lsls	r3, r2
 80095fc:	69ba      	ldr	r2, [r7, #24]
 80095fe:	4313      	orrs	r3, r2
 8009600:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009602:	4938      	ldr	r1, [pc, #224]	; (80096e4 <HAL_GPIO_Init+0x34c>)
 8009604:	69fb      	ldr	r3, [r7, #28]
 8009606:	089b      	lsrs	r3, r3, #2
 8009608:	3302      	adds	r3, #2
 800960a:	69ba      	ldr	r2, [r7, #24]
 800960c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	43db      	mvns	r3, r3
 800961c:	69ba      	ldr	r2, [r7, #24]
 800961e:	4013      	ands	r3, r2
 8009620:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800962a:	2b00      	cmp	r3, #0
 800962c:	d003      	beq.n	8009636 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800962e:	69ba      	ldr	r2, [r7, #24]
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	4313      	orrs	r3, r2
 8009634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009636:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800963a:	69bb      	ldr	r3, [r7, #24]
 800963c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800963e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	43db      	mvns	r3, r3
 800964a:	69ba      	ldr	r2, [r7, #24]
 800964c:	4013      	ands	r3, r2
 800964e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009658:	2b00      	cmp	r3, #0
 800965a:	d003      	beq.n	8009664 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800965c:	69ba      	ldr	r2, [r7, #24]
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	4313      	orrs	r3, r2
 8009662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009664:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009668:	69bb      	ldr	r3, [r7, #24]
 800966a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	43db      	mvns	r3, r3
 8009676:	69ba      	ldr	r2, [r7, #24]
 8009678:	4013      	ands	r3, r2
 800967a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009684:	2b00      	cmp	r3, #0
 8009686:	d003      	beq.n	8009690 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8009688:	69ba      	ldr	r2, [r7, #24]
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	4313      	orrs	r3, r2
 800968e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	69ba      	ldr	r2, [r7, #24]
 8009694:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	43db      	mvns	r3, r3
 80096a0:	69ba      	ldr	r2, [r7, #24]
 80096a2:	4013      	ands	r3, r2
 80096a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d003      	beq.n	80096ba <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80096b2:	69ba      	ldr	r2, [r7, #24]
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	4313      	orrs	r3, r2
 80096b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	69ba      	ldr	r2, [r7, #24]
 80096be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80096c0:	69fb      	ldr	r3, [r7, #28]
 80096c2:	3301      	adds	r3, #1
 80096c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	681a      	ldr	r2, [r3, #0]
 80096ca:	69fb      	ldr	r3, [r7, #28]
 80096cc:	fa22 f303 	lsr.w	r3, r2, r3
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	f47f ae6b 	bne.w	80093ac <HAL_GPIO_Init+0x14>
  }
}
 80096d6:	bf00      	nop
 80096d8:	bf00      	nop
 80096da:	3724      	adds	r7, #36	; 0x24
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr
 80096e4:	58000400 	.word	0x58000400

080096e8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b087      	sub	sp, #28
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80096f2:	2300      	movs	r3, #0
 80096f4:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80096f6:	4b72      	ldr	r3, [pc, #456]	; (80098c0 <HAL_GPIO_DeInit+0x1d8>)
 80096f8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 80096fa:	e0d3      	b.n	80098a4 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 80096fc:	2201      	movs	r2, #1
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	fa02 f303 	lsl.w	r3, r2, r3
 8009704:	683a      	ldr	r2, [r7, #0]
 8009706:	4013      	ands	r3, r2
 8009708:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2b00      	cmp	r3, #0
 800970e:	f000 80c6 	beq.w	800989e <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8009712:	4a6c      	ldr	r2, [pc, #432]	; (80098c4 <HAL_GPIO_DeInit+0x1dc>)
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	089b      	lsrs	r3, r3, #2
 8009718:	3302      	adds	r3, #2
 800971a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800971e:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	f003 0303 	and.w	r3, r3, #3
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	220f      	movs	r2, #15
 800972a:	fa02 f303 	lsl.w	r3, r2, r3
 800972e:	68ba      	ldr	r2, [r7, #8]
 8009730:	4013      	ands	r3, r2
 8009732:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	4a64      	ldr	r2, [pc, #400]	; (80098c8 <HAL_GPIO_DeInit+0x1e0>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d031      	beq.n	80097a0 <HAL_GPIO_DeInit+0xb8>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	4a63      	ldr	r2, [pc, #396]	; (80098cc <HAL_GPIO_DeInit+0x1e4>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d02b      	beq.n	800979c <HAL_GPIO_DeInit+0xb4>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	4a62      	ldr	r2, [pc, #392]	; (80098d0 <HAL_GPIO_DeInit+0x1e8>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d025      	beq.n	8009798 <HAL_GPIO_DeInit+0xb0>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	4a61      	ldr	r2, [pc, #388]	; (80098d4 <HAL_GPIO_DeInit+0x1ec>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d01f      	beq.n	8009794 <HAL_GPIO_DeInit+0xac>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	4a60      	ldr	r2, [pc, #384]	; (80098d8 <HAL_GPIO_DeInit+0x1f0>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d019      	beq.n	8009790 <HAL_GPIO_DeInit+0xa8>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	4a5f      	ldr	r2, [pc, #380]	; (80098dc <HAL_GPIO_DeInit+0x1f4>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d013      	beq.n	800978c <HAL_GPIO_DeInit+0xa4>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	4a5e      	ldr	r2, [pc, #376]	; (80098e0 <HAL_GPIO_DeInit+0x1f8>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d00d      	beq.n	8009788 <HAL_GPIO_DeInit+0xa0>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	4a5d      	ldr	r2, [pc, #372]	; (80098e4 <HAL_GPIO_DeInit+0x1fc>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d007      	beq.n	8009784 <HAL_GPIO_DeInit+0x9c>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	4a5c      	ldr	r2, [pc, #368]	; (80098e8 <HAL_GPIO_DeInit+0x200>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d101      	bne.n	8009780 <HAL_GPIO_DeInit+0x98>
 800977c:	2309      	movs	r3, #9
 800977e:	e010      	b.n	80097a2 <HAL_GPIO_DeInit+0xba>
 8009780:	230a      	movs	r3, #10
 8009782:	e00e      	b.n	80097a2 <HAL_GPIO_DeInit+0xba>
 8009784:	2307      	movs	r3, #7
 8009786:	e00c      	b.n	80097a2 <HAL_GPIO_DeInit+0xba>
 8009788:	2306      	movs	r3, #6
 800978a:	e00a      	b.n	80097a2 <HAL_GPIO_DeInit+0xba>
 800978c:	2305      	movs	r3, #5
 800978e:	e008      	b.n	80097a2 <HAL_GPIO_DeInit+0xba>
 8009790:	2304      	movs	r3, #4
 8009792:	e006      	b.n	80097a2 <HAL_GPIO_DeInit+0xba>
 8009794:	2303      	movs	r3, #3
 8009796:	e004      	b.n	80097a2 <HAL_GPIO_DeInit+0xba>
 8009798:	2302      	movs	r3, #2
 800979a:	e002      	b.n	80097a2 <HAL_GPIO_DeInit+0xba>
 800979c:	2301      	movs	r3, #1
 800979e:	e000      	b.n	80097a2 <HAL_GPIO_DeInit+0xba>
 80097a0:	2300      	movs	r3, #0
 80097a2:	697a      	ldr	r2, [r7, #20]
 80097a4:	f002 0203 	and.w	r2, r2, #3
 80097a8:	0092      	lsls	r2, r2, #2
 80097aa:	4093      	lsls	r3, r2
 80097ac:	68ba      	ldr	r2, [r7, #8]
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d136      	bne.n	8009820 <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	43db      	mvns	r3, r3
 80097ba:	401a      	ands	r2, r3
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	685a      	ldr	r2, [r3, #4]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	43db      	mvns	r3, r3
 80097c8:	401a      	ands	r2, r3
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80097ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097d2:	685a      	ldr	r2, [r3, #4]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	43db      	mvns	r3, r3
 80097d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80097dc:	4013      	ands	r3, r2
 80097de:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80097e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097e4:	681a      	ldr	r2, [r3, #0]
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	43db      	mvns	r3, r3
 80097ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80097ee:	4013      	ands	r3, r2
 80097f0:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	f003 0303 	and.w	r3, r3, #3
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	220f      	movs	r2, #15
 80097fc:	fa02 f303 	lsl.w	r3, r2, r3
 8009800:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8009802:	4a30      	ldr	r2, [pc, #192]	; (80098c4 <HAL_GPIO_DeInit+0x1dc>)
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	089b      	lsrs	r3, r3, #2
 8009808:	3302      	adds	r3, #2
 800980a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	43da      	mvns	r2, r3
 8009812:	482c      	ldr	r0, [pc, #176]	; (80098c4 <HAL_GPIO_DeInit+0x1dc>)
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	089b      	lsrs	r3, r3, #2
 8009818:	400a      	ands	r2, r1
 800981a:	3302      	adds	r3, #2
 800981c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681a      	ldr	r2, [r3, #0]
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	005b      	lsls	r3, r3, #1
 8009828:	2103      	movs	r1, #3
 800982a:	fa01 f303 	lsl.w	r3, r1, r3
 800982e:	431a      	orrs	r2, r3
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	08da      	lsrs	r2, r3, #3
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	3208      	adds	r2, #8
 800983c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	f003 0307 	and.w	r3, r3, #7
 8009846:	009b      	lsls	r3, r3, #2
 8009848:	220f      	movs	r2, #15
 800984a:	fa02 f303 	lsl.w	r3, r2, r3
 800984e:	43db      	mvns	r3, r3
 8009850:	697a      	ldr	r2, [r7, #20]
 8009852:	08d2      	lsrs	r2, r2, #3
 8009854:	4019      	ands	r1, r3
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	3208      	adds	r2, #8
 800985a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	68da      	ldr	r2, [r3, #12]
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	005b      	lsls	r3, r3, #1
 8009866:	2103      	movs	r1, #3
 8009868:	fa01 f303 	lsl.w	r3, r1, r3
 800986c:	43db      	mvns	r3, r3
 800986e:	401a      	ands	r2, r3
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	685a      	ldr	r2, [r3, #4]
 8009878:	2101      	movs	r1, #1
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	fa01 f303 	lsl.w	r3, r1, r3
 8009880:	43db      	mvns	r3, r3
 8009882:	401a      	ands	r2, r3
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	689a      	ldr	r2, [r3, #8]
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	005b      	lsls	r3, r3, #1
 8009890:	2103      	movs	r1, #3
 8009892:	fa01 f303 	lsl.w	r3, r1, r3
 8009896:	43db      	mvns	r3, r3
 8009898:	401a      	ands	r2, r3
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	3301      	adds	r3, #1
 80098a2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80098a4:	683a      	ldr	r2, [r7, #0]
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	fa22 f303 	lsr.w	r3, r2, r3
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	f47f af25 	bne.w	80096fc <HAL_GPIO_DeInit+0x14>
  }
}
 80098b2:	bf00      	nop
 80098b4:	bf00      	nop
 80098b6:	371c      	adds	r7, #28
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr
 80098c0:	58000080 	.word	0x58000080
 80098c4:	58000400 	.word	0x58000400
 80098c8:	58020000 	.word	0x58020000
 80098cc:	58020400 	.word	0x58020400
 80098d0:	58020800 	.word	0x58020800
 80098d4:	58020c00 	.word	0x58020c00
 80098d8:	58021000 	.word	0x58021000
 80098dc:	58021400 	.word	0x58021400
 80098e0:	58021800 	.word	0x58021800
 80098e4:	58021c00 	.word	0x58021c00
 80098e8:	58022400 	.word	0x58022400

080098ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	460b      	mov	r3, r1
 80098f6:	807b      	strh	r3, [r7, #2]
 80098f8:	4613      	mov	r3, r2
 80098fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80098fc:	787b      	ldrb	r3, [r7, #1]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d003      	beq.n	800990a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009902:	887a      	ldrh	r2, [r7, #2]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009908:	e003      	b.n	8009912 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800990a:	887b      	ldrh	r3, [r7, #2]
 800990c:	041a      	lsls	r2, r3, #16
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	619a      	str	r2, [r3, #24]
}
 8009912:	bf00      	nop
 8009914:	370c      	adds	r7, #12
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr
	...

08009920 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009928:	4b19      	ldr	r3, [pc, #100]	; (8009990 <HAL_PWREx_ConfigSupply+0x70>)
 800992a:	68db      	ldr	r3, [r3, #12]
 800992c:	f003 0304 	and.w	r3, r3, #4
 8009930:	2b04      	cmp	r3, #4
 8009932:	d00a      	beq.n	800994a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009934:	4b16      	ldr	r3, [pc, #88]	; (8009990 <HAL_PWREx_ConfigSupply+0x70>)
 8009936:	68db      	ldr	r3, [r3, #12]
 8009938:	f003 0307 	and.w	r3, r3, #7
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	429a      	cmp	r2, r3
 8009940:	d001      	beq.n	8009946 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009942:	2301      	movs	r3, #1
 8009944:	e01f      	b.n	8009986 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009946:	2300      	movs	r3, #0
 8009948:	e01d      	b.n	8009986 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800994a:	4b11      	ldr	r3, [pc, #68]	; (8009990 <HAL_PWREx_ConfigSupply+0x70>)
 800994c:	68db      	ldr	r3, [r3, #12]
 800994e:	f023 0207 	bic.w	r2, r3, #7
 8009952:	490f      	ldr	r1, [pc, #60]	; (8009990 <HAL_PWREx_ConfigSupply+0x70>)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	4313      	orrs	r3, r2
 8009958:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800995a:	f7fc fbbd 	bl	80060d8 <HAL_GetTick>
 800995e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009960:	e009      	b.n	8009976 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009962:	f7fc fbb9 	bl	80060d8 <HAL_GetTick>
 8009966:	4602      	mov	r2, r0
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	1ad3      	subs	r3, r2, r3
 800996c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009970:	d901      	bls.n	8009976 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009972:	2301      	movs	r3, #1
 8009974:	e007      	b.n	8009986 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009976:	4b06      	ldr	r3, [pc, #24]	; (8009990 <HAL_PWREx_ConfigSupply+0x70>)
 8009978:	685b      	ldr	r3, [r3, #4]
 800997a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800997e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009982:	d1ee      	bne.n	8009962 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009984:	2300      	movs	r3, #0
}
 8009986:	4618      	mov	r0, r3
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
 800998e:	bf00      	nop
 8009990:	58024800 	.word	0x58024800

08009994 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b08c      	sub	sp, #48	; 0x30
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d101      	bne.n	80099a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80099a2:	2301      	movs	r3, #1
 80099a4:	e3c8      	b.n	800a138 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f003 0301 	and.w	r3, r3, #1
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	f000 8087 	beq.w	8009ac2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80099b4:	4b88      	ldr	r3, [pc, #544]	; (8009bd8 <HAL_RCC_OscConfig+0x244>)
 80099b6:	691b      	ldr	r3, [r3, #16]
 80099b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80099bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80099be:	4b86      	ldr	r3, [pc, #536]	; (8009bd8 <HAL_RCC_OscConfig+0x244>)
 80099c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099c2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80099c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c6:	2b10      	cmp	r3, #16
 80099c8:	d007      	beq.n	80099da <HAL_RCC_OscConfig+0x46>
 80099ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099cc:	2b18      	cmp	r3, #24
 80099ce:	d110      	bne.n	80099f2 <HAL_RCC_OscConfig+0x5e>
 80099d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d2:	f003 0303 	and.w	r3, r3, #3
 80099d6:	2b02      	cmp	r3, #2
 80099d8:	d10b      	bne.n	80099f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80099da:	4b7f      	ldr	r3, [pc, #508]	; (8009bd8 <HAL_RCC_OscConfig+0x244>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d06c      	beq.n	8009ac0 <HAL_RCC_OscConfig+0x12c>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d168      	bne.n	8009ac0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80099ee:	2301      	movs	r3, #1
 80099f0:	e3a2      	b.n	800a138 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099fa:	d106      	bne.n	8009a0a <HAL_RCC_OscConfig+0x76>
 80099fc:	4b76      	ldr	r3, [pc, #472]	; (8009bd8 <HAL_RCC_OscConfig+0x244>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a75      	ldr	r2, [pc, #468]	; (8009bd8 <HAL_RCC_OscConfig+0x244>)
 8009a02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a06:	6013      	str	r3, [r2, #0]
 8009a08:	e02e      	b.n	8009a68 <HAL_RCC_OscConfig+0xd4>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	685b      	ldr	r3, [r3, #4]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d10c      	bne.n	8009a2c <HAL_RCC_OscConfig+0x98>
 8009a12:	4b71      	ldr	r3, [pc, #452]	; (8009bd8 <HAL_RCC_OscConfig+0x244>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a70      	ldr	r2, [pc, #448]	; (8009bd8 <HAL_RCC_OscConfig+0x244>)
 8009a18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a1c:	6013      	str	r3, [r2, #0]
 8009a1e:	4b6e      	ldr	r3, [pc, #440]	; (8009bd8 <HAL_RCC_OscConfig+0x244>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4a6d      	ldr	r2, [pc, #436]	; (8009bd8 <HAL_RCC_OscConfig+0x244>)
 8009a24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009a28:	6013      	str	r3, [r2, #0]
 8009a2a:	e01d      	b.n	8009a68 <HAL_RCC_OscConfig+0xd4>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009a34:	d10c      	bne.n	8009a50 <HAL_RCC_OscConfig+0xbc>
 8009a36:	4b68      	ldr	r3, [pc, #416]	; (8009bd8 <HAL_RCC_OscConfig+0x244>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4a67      	ldr	r2, [pc, #412]	; (8009bd8 <HAL_RCC_OscConfig+0x244>)
 8009a3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009a40:	6013      	str	r3, [r2, #0]
 8009a42:	4b65      	ldr	r3, [pc, #404]	; (8009bd8 <HAL_RCC_OscConfig+0x244>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	4a64      	ldr	r2, [pc, #400]	; (8009bd8 <HAL_RCC_OscConfig+0x244>)
 8009a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a4c:	6013      	str	r3, [r2, #0]
 8009a4e:	e00b      	b.n	8009a68 <HAL_RCC_OscConfig+0xd4>
 8009a50:	4b61      	ldr	r3, [pc, #388]	; (8009bd8 <HAL_RCC_OscConfig+0x244>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a60      	ldr	r2, [pc, #384]	; (8009bd8 <HAL_RCC_OscConfig+0x244>)
 8009a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a5a:	6013      	str	r3, [r2, #0]
 8009a5c:	4b5e      	ldr	r3, [pc, #376]	; (8009bd8 <HAL_RCC_OscConfig+0x244>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a5d      	ldr	r2, [pc, #372]	; (8009bd8 <HAL_RCC_OscConfig+0x244>)
 8009a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009a66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d013      	beq.n	8009a98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a70:	f7fc fb32 	bl	80060d8 <HAL_GetTick>
 8009a74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009a76:	e008      	b.n	8009a8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009a78:	f7fc fb2e 	bl	80060d8 <HAL_GetTick>
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a80:	1ad3      	subs	r3, r2, r3
 8009a82:	2b64      	cmp	r3, #100	; 0x64
 8009a84:	d901      	bls.n	8009a8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009a86:	2303      	movs	r3, #3
 8009a88:	e356      	b.n	800a138 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009a8a:	4b53      	ldr	r3, [pc, #332]	; (8009bd8 <HAL_RCC_OscConfig+0x244>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d0f0      	beq.n	8009a78 <HAL_RCC_OscConfig+0xe4>
 8009a96:	e014      	b.n	8009ac2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a98:	f7fc fb1e 	bl	80060d8 <HAL_GetTick>
 8009a9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009a9e:	e008      	b.n	8009ab2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009aa0:	f7fc fb1a 	bl	80060d8 <HAL_GetTick>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa8:	1ad3      	subs	r3, r2, r3
 8009aaa:	2b64      	cmp	r3, #100	; 0x64
 8009aac:	d901      	bls.n	8009ab2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009aae:	2303      	movs	r3, #3
 8009ab0:	e342      	b.n	800a138 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009ab2:	4b49      	ldr	r3, [pc, #292]	; (8009bd8 <HAL_RCC_OscConfig+0x244>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d1f0      	bne.n	8009aa0 <HAL_RCC_OscConfig+0x10c>
 8009abe:	e000      	b.n	8009ac2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f003 0302 	and.w	r3, r3, #2
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	f000 808c 	beq.w	8009be8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009ad0:	4b41      	ldr	r3, [pc, #260]	; (8009bd8 <HAL_RCC_OscConfig+0x244>)
 8009ad2:	691b      	ldr	r3, [r3, #16]
 8009ad4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ad8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009ada:	4b3f      	ldr	r3, [pc, #252]	; (8009bd8 <HAL_RCC_OscConfig+0x244>)
 8009adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ade:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009ae0:	6a3b      	ldr	r3, [r7, #32]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d007      	beq.n	8009af6 <HAL_RCC_OscConfig+0x162>
 8009ae6:	6a3b      	ldr	r3, [r7, #32]
 8009ae8:	2b18      	cmp	r3, #24
 8009aea:	d137      	bne.n	8009b5c <HAL_RCC_OscConfig+0x1c8>
 8009aec:	69fb      	ldr	r3, [r7, #28]
 8009aee:	f003 0303 	and.w	r3, r3, #3
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d132      	bne.n	8009b5c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009af6:	4b38      	ldr	r3, [pc, #224]	; (8009bd8 <HAL_RCC_OscConfig+0x244>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f003 0304 	and.w	r3, r3, #4
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d005      	beq.n	8009b0e <HAL_RCC_OscConfig+0x17a>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	68db      	ldr	r3, [r3, #12]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d101      	bne.n	8009b0e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	e314      	b.n	800a138 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009b0e:	4b32      	ldr	r3, [pc, #200]	; (8009bd8 <HAL_RCC_OscConfig+0x244>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f023 0219 	bic.w	r2, r3, #25
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	68db      	ldr	r3, [r3, #12]
 8009b1a:	492f      	ldr	r1, [pc, #188]	; (8009bd8 <HAL_RCC_OscConfig+0x244>)
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b20:	f7fc fada 	bl	80060d8 <HAL_GetTick>
 8009b24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b26:	e008      	b.n	8009b3a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b28:	f7fc fad6 	bl	80060d8 <HAL_GetTick>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b30:	1ad3      	subs	r3, r2, r3
 8009b32:	2b02      	cmp	r3, #2
 8009b34:	d901      	bls.n	8009b3a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8009b36:	2303      	movs	r3, #3
 8009b38:	e2fe      	b.n	800a138 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b3a:	4b27      	ldr	r3, [pc, #156]	; (8009bd8 <HAL_RCC_OscConfig+0x244>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f003 0304 	and.w	r3, r3, #4
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d0f0      	beq.n	8009b28 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b46:	4b24      	ldr	r3, [pc, #144]	; (8009bd8 <HAL_RCC_OscConfig+0x244>)
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	691b      	ldr	r3, [r3, #16]
 8009b52:	061b      	lsls	r3, r3, #24
 8009b54:	4920      	ldr	r1, [pc, #128]	; (8009bd8 <HAL_RCC_OscConfig+0x244>)
 8009b56:	4313      	orrs	r3, r2
 8009b58:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009b5a:	e045      	b.n	8009be8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	68db      	ldr	r3, [r3, #12]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d026      	beq.n	8009bb2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009b64:	4b1c      	ldr	r3, [pc, #112]	; (8009bd8 <HAL_RCC_OscConfig+0x244>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f023 0219 	bic.w	r2, r3, #25
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	68db      	ldr	r3, [r3, #12]
 8009b70:	4919      	ldr	r1, [pc, #100]	; (8009bd8 <HAL_RCC_OscConfig+0x244>)
 8009b72:	4313      	orrs	r3, r2
 8009b74:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b76:	f7fc faaf 	bl	80060d8 <HAL_GetTick>
 8009b7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b7c:	e008      	b.n	8009b90 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b7e:	f7fc faab 	bl	80060d8 <HAL_GetTick>
 8009b82:	4602      	mov	r2, r0
 8009b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b86:	1ad3      	subs	r3, r2, r3
 8009b88:	2b02      	cmp	r3, #2
 8009b8a:	d901      	bls.n	8009b90 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009b8c:	2303      	movs	r3, #3
 8009b8e:	e2d3      	b.n	800a138 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b90:	4b11      	ldr	r3, [pc, #68]	; (8009bd8 <HAL_RCC_OscConfig+0x244>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f003 0304 	and.w	r3, r3, #4
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d0f0      	beq.n	8009b7e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b9c:	4b0e      	ldr	r3, [pc, #56]	; (8009bd8 <HAL_RCC_OscConfig+0x244>)
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	691b      	ldr	r3, [r3, #16]
 8009ba8:	061b      	lsls	r3, r3, #24
 8009baa:	490b      	ldr	r1, [pc, #44]	; (8009bd8 <HAL_RCC_OscConfig+0x244>)
 8009bac:	4313      	orrs	r3, r2
 8009bae:	604b      	str	r3, [r1, #4]
 8009bb0:	e01a      	b.n	8009be8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009bb2:	4b09      	ldr	r3, [pc, #36]	; (8009bd8 <HAL_RCC_OscConfig+0x244>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a08      	ldr	r2, [pc, #32]	; (8009bd8 <HAL_RCC_OscConfig+0x244>)
 8009bb8:	f023 0301 	bic.w	r3, r3, #1
 8009bbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bbe:	f7fc fa8b 	bl	80060d8 <HAL_GetTick>
 8009bc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009bc4:	e00a      	b.n	8009bdc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009bc6:	f7fc fa87 	bl	80060d8 <HAL_GetTick>
 8009bca:	4602      	mov	r2, r0
 8009bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bce:	1ad3      	subs	r3, r2, r3
 8009bd0:	2b02      	cmp	r3, #2
 8009bd2:	d903      	bls.n	8009bdc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009bd4:	2303      	movs	r3, #3
 8009bd6:	e2af      	b.n	800a138 <HAL_RCC_OscConfig+0x7a4>
 8009bd8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009bdc:	4b96      	ldr	r3, [pc, #600]	; (8009e38 <HAL_RCC_OscConfig+0x4a4>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f003 0304 	and.w	r3, r3, #4
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d1ee      	bne.n	8009bc6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f003 0310 	and.w	r3, r3, #16
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d06a      	beq.n	8009cca <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009bf4:	4b90      	ldr	r3, [pc, #576]	; (8009e38 <HAL_RCC_OscConfig+0x4a4>)
 8009bf6:	691b      	ldr	r3, [r3, #16]
 8009bf8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009bfc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009bfe:	4b8e      	ldr	r3, [pc, #568]	; (8009e38 <HAL_RCC_OscConfig+0x4a4>)
 8009c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c02:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009c04:	69bb      	ldr	r3, [r7, #24]
 8009c06:	2b08      	cmp	r3, #8
 8009c08:	d007      	beq.n	8009c1a <HAL_RCC_OscConfig+0x286>
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	2b18      	cmp	r3, #24
 8009c0e:	d11b      	bne.n	8009c48 <HAL_RCC_OscConfig+0x2b4>
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	f003 0303 	and.w	r3, r3, #3
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d116      	bne.n	8009c48 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009c1a:	4b87      	ldr	r3, [pc, #540]	; (8009e38 <HAL_RCC_OscConfig+0x4a4>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d005      	beq.n	8009c32 <HAL_RCC_OscConfig+0x29e>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	69db      	ldr	r3, [r3, #28]
 8009c2a:	2b80      	cmp	r3, #128	; 0x80
 8009c2c:	d001      	beq.n	8009c32 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e282      	b.n	800a138 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009c32:	4b81      	ldr	r3, [pc, #516]	; (8009e38 <HAL_RCC_OscConfig+0x4a4>)
 8009c34:	68db      	ldr	r3, [r3, #12]
 8009c36:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6a1b      	ldr	r3, [r3, #32]
 8009c3e:	061b      	lsls	r3, r3, #24
 8009c40:	497d      	ldr	r1, [pc, #500]	; (8009e38 <HAL_RCC_OscConfig+0x4a4>)
 8009c42:	4313      	orrs	r3, r2
 8009c44:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009c46:	e040      	b.n	8009cca <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	69db      	ldr	r3, [r3, #28]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d023      	beq.n	8009c98 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009c50:	4b79      	ldr	r3, [pc, #484]	; (8009e38 <HAL_RCC_OscConfig+0x4a4>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4a78      	ldr	r2, [pc, #480]	; (8009e38 <HAL_RCC_OscConfig+0x4a4>)
 8009c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c5c:	f7fc fa3c 	bl	80060d8 <HAL_GetTick>
 8009c60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009c62:	e008      	b.n	8009c76 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009c64:	f7fc fa38 	bl	80060d8 <HAL_GetTick>
 8009c68:	4602      	mov	r2, r0
 8009c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c6c:	1ad3      	subs	r3, r2, r3
 8009c6e:	2b02      	cmp	r3, #2
 8009c70:	d901      	bls.n	8009c76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009c72:	2303      	movs	r3, #3
 8009c74:	e260      	b.n	800a138 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009c76:	4b70      	ldr	r3, [pc, #448]	; (8009e38 <HAL_RCC_OscConfig+0x4a4>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d0f0      	beq.n	8009c64 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009c82:	4b6d      	ldr	r3, [pc, #436]	; (8009e38 <HAL_RCC_OscConfig+0x4a4>)
 8009c84:	68db      	ldr	r3, [r3, #12]
 8009c86:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6a1b      	ldr	r3, [r3, #32]
 8009c8e:	061b      	lsls	r3, r3, #24
 8009c90:	4969      	ldr	r1, [pc, #420]	; (8009e38 <HAL_RCC_OscConfig+0x4a4>)
 8009c92:	4313      	orrs	r3, r2
 8009c94:	60cb      	str	r3, [r1, #12]
 8009c96:	e018      	b.n	8009cca <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009c98:	4b67      	ldr	r3, [pc, #412]	; (8009e38 <HAL_RCC_OscConfig+0x4a4>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a66      	ldr	r2, [pc, #408]	; (8009e38 <HAL_RCC_OscConfig+0x4a4>)
 8009c9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ca4:	f7fc fa18 	bl	80060d8 <HAL_GetTick>
 8009ca8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009caa:	e008      	b.n	8009cbe <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009cac:	f7fc fa14 	bl	80060d8 <HAL_GetTick>
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb4:	1ad3      	subs	r3, r2, r3
 8009cb6:	2b02      	cmp	r3, #2
 8009cb8:	d901      	bls.n	8009cbe <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009cba:	2303      	movs	r3, #3
 8009cbc:	e23c      	b.n	800a138 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009cbe:	4b5e      	ldr	r3, [pc, #376]	; (8009e38 <HAL_RCC_OscConfig+0x4a4>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d1f0      	bne.n	8009cac <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f003 0308 	and.w	r3, r3, #8
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d036      	beq.n	8009d44 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	695b      	ldr	r3, [r3, #20]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d019      	beq.n	8009d12 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009cde:	4b56      	ldr	r3, [pc, #344]	; (8009e38 <HAL_RCC_OscConfig+0x4a4>)
 8009ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ce2:	4a55      	ldr	r2, [pc, #340]	; (8009e38 <HAL_RCC_OscConfig+0x4a4>)
 8009ce4:	f043 0301 	orr.w	r3, r3, #1
 8009ce8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cea:	f7fc f9f5 	bl	80060d8 <HAL_GetTick>
 8009cee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009cf0:	e008      	b.n	8009d04 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009cf2:	f7fc f9f1 	bl	80060d8 <HAL_GetTick>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfa:	1ad3      	subs	r3, r2, r3
 8009cfc:	2b02      	cmp	r3, #2
 8009cfe:	d901      	bls.n	8009d04 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009d00:	2303      	movs	r3, #3
 8009d02:	e219      	b.n	800a138 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009d04:	4b4c      	ldr	r3, [pc, #304]	; (8009e38 <HAL_RCC_OscConfig+0x4a4>)
 8009d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d08:	f003 0302 	and.w	r3, r3, #2
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d0f0      	beq.n	8009cf2 <HAL_RCC_OscConfig+0x35e>
 8009d10:	e018      	b.n	8009d44 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009d12:	4b49      	ldr	r3, [pc, #292]	; (8009e38 <HAL_RCC_OscConfig+0x4a4>)
 8009d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d16:	4a48      	ldr	r2, [pc, #288]	; (8009e38 <HAL_RCC_OscConfig+0x4a4>)
 8009d18:	f023 0301 	bic.w	r3, r3, #1
 8009d1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d1e:	f7fc f9db 	bl	80060d8 <HAL_GetTick>
 8009d22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009d24:	e008      	b.n	8009d38 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009d26:	f7fc f9d7 	bl	80060d8 <HAL_GetTick>
 8009d2a:	4602      	mov	r2, r0
 8009d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2e:	1ad3      	subs	r3, r2, r3
 8009d30:	2b02      	cmp	r3, #2
 8009d32:	d901      	bls.n	8009d38 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009d34:	2303      	movs	r3, #3
 8009d36:	e1ff      	b.n	800a138 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009d38:	4b3f      	ldr	r3, [pc, #252]	; (8009e38 <HAL_RCC_OscConfig+0x4a4>)
 8009d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d3c:	f003 0302 	and.w	r3, r3, #2
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d1f0      	bne.n	8009d26 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f003 0320 	and.w	r3, r3, #32
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d036      	beq.n	8009dbe <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	699b      	ldr	r3, [r3, #24]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d019      	beq.n	8009d8c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009d58:	4b37      	ldr	r3, [pc, #220]	; (8009e38 <HAL_RCC_OscConfig+0x4a4>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4a36      	ldr	r2, [pc, #216]	; (8009e38 <HAL_RCC_OscConfig+0x4a4>)
 8009d5e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009d62:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009d64:	f7fc f9b8 	bl	80060d8 <HAL_GetTick>
 8009d68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009d6a:	e008      	b.n	8009d7e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009d6c:	f7fc f9b4 	bl	80060d8 <HAL_GetTick>
 8009d70:	4602      	mov	r2, r0
 8009d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d74:	1ad3      	subs	r3, r2, r3
 8009d76:	2b02      	cmp	r3, #2
 8009d78:	d901      	bls.n	8009d7e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009d7a:	2303      	movs	r3, #3
 8009d7c:	e1dc      	b.n	800a138 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009d7e:	4b2e      	ldr	r3, [pc, #184]	; (8009e38 <HAL_RCC_OscConfig+0x4a4>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d0f0      	beq.n	8009d6c <HAL_RCC_OscConfig+0x3d8>
 8009d8a:	e018      	b.n	8009dbe <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009d8c:	4b2a      	ldr	r3, [pc, #168]	; (8009e38 <HAL_RCC_OscConfig+0x4a4>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a29      	ldr	r2, [pc, #164]	; (8009e38 <HAL_RCC_OscConfig+0x4a4>)
 8009d92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d96:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009d98:	f7fc f99e 	bl	80060d8 <HAL_GetTick>
 8009d9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009d9e:	e008      	b.n	8009db2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009da0:	f7fc f99a 	bl	80060d8 <HAL_GetTick>
 8009da4:	4602      	mov	r2, r0
 8009da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da8:	1ad3      	subs	r3, r2, r3
 8009daa:	2b02      	cmp	r3, #2
 8009dac:	d901      	bls.n	8009db2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009dae:	2303      	movs	r3, #3
 8009db0:	e1c2      	b.n	800a138 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009db2:	4b21      	ldr	r3, [pc, #132]	; (8009e38 <HAL_RCC_OscConfig+0x4a4>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d1f0      	bne.n	8009da0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f003 0304 	and.w	r3, r3, #4
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	f000 8086 	beq.w	8009ed8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009dcc:	4b1b      	ldr	r3, [pc, #108]	; (8009e3c <HAL_RCC_OscConfig+0x4a8>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a1a      	ldr	r2, [pc, #104]	; (8009e3c <HAL_RCC_OscConfig+0x4a8>)
 8009dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009dd6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009dd8:	f7fc f97e 	bl	80060d8 <HAL_GetTick>
 8009ddc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009dde:	e008      	b.n	8009df2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009de0:	f7fc f97a 	bl	80060d8 <HAL_GetTick>
 8009de4:	4602      	mov	r2, r0
 8009de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de8:	1ad3      	subs	r3, r2, r3
 8009dea:	2b64      	cmp	r3, #100	; 0x64
 8009dec:	d901      	bls.n	8009df2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8009dee:	2303      	movs	r3, #3
 8009df0:	e1a2      	b.n	800a138 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009df2:	4b12      	ldr	r3, [pc, #72]	; (8009e3c <HAL_RCC_OscConfig+0x4a8>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d0f0      	beq.n	8009de0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	689b      	ldr	r3, [r3, #8]
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d106      	bne.n	8009e14 <HAL_RCC_OscConfig+0x480>
 8009e06:	4b0c      	ldr	r3, [pc, #48]	; (8009e38 <HAL_RCC_OscConfig+0x4a4>)
 8009e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e0a:	4a0b      	ldr	r2, [pc, #44]	; (8009e38 <HAL_RCC_OscConfig+0x4a4>)
 8009e0c:	f043 0301 	orr.w	r3, r3, #1
 8009e10:	6713      	str	r3, [r2, #112]	; 0x70
 8009e12:	e032      	b.n	8009e7a <HAL_RCC_OscConfig+0x4e6>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	689b      	ldr	r3, [r3, #8]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d111      	bne.n	8009e40 <HAL_RCC_OscConfig+0x4ac>
 8009e1c:	4b06      	ldr	r3, [pc, #24]	; (8009e38 <HAL_RCC_OscConfig+0x4a4>)
 8009e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e20:	4a05      	ldr	r2, [pc, #20]	; (8009e38 <HAL_RCC_OscConfig+0x4a4>)
 8009e22:	f023 0301 	bic.w	r3, r3, #1
 8009e26:	6713      	str	r3, [r2, #112]	; 0x70
 8009e28:	4b03      	ldr	r3, [pc, #12]	; (8009e38 <HAL_RCC_OscConfig+0x4a4>)
 8009e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e2c:	4a02      	ldr	r2, [pc, #8]	; (8009e38 <HAL_RCC_OscConfig+0x4a4>)
 8009e2e:	f023 0304 	bic.w	r3, r3, #4
 8009e32:	6713      	str	r3, [r2, #112]	; 0x70
 8009e34:	e021      	b.n	8009e7a <HAL_RCC_OscConfig+0x4e6>
 8009e36:	bf00      	nop
 8009e38:	58024400 	.word	0x58024400
 8009e3c:	58024800 	.word	0x58024800
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	689b      	ldr	r3, [r3, #8]
 8009e44:	2b05      	cmp	r3, #5
 8009e46:	d10c      	bne.n	8009e62 <HAL_RCC_OscConfig+0x4ce>
 8009e48:	4b83      	ldr	r3, [pc, #524]	; (800a058 <HAL_RCC_OscConfig+0x6c4>)
 8009e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e4c:	4a82      	ldr	r2, [pc, #520]	; (800a058 <HAL_RCC_OscConfig+0x6c4>)
 8009e4e:	f043 0304 	orr.w	r3, r3, #4
 8009e52:	6713      	str	r3, [r2, #112]	; 0x70
 8009e54:	4b80      	ldr	r3, [pc, #512]	; (800a058 <HAL_RCC_OscConfig+0x6c4>)
 8009e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e58:	4a7f      	ldr	r2, [pc, #508]	; (800a058 <HAL_RCC_OscConfig+0x6c4>)
 8009e5a:	f043 0301 	orr.w	r3, r3, #1
 8009e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8009e60:	e00b      	b.n	8009e7a <HAL_RCC_OscConfig+0x4e6>
 8009e62:	4b7d      	ldr	r3, [pc, #500]	; (800a058 <HAL_RCC_OscConfig+0x6c4>)
 8009e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e66:	4a7c      	ldr	r2, [pc, #496]	; (800a058 <HAL_RCC_OscConfig+0x6c4>)
 8009e68:	f023 0301 	bic.w	r3, r3, #1
 8009e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8009e6e:	4b7a      	ldr	r3, [pc, #488]	; (800a058 <HAL_RCC_OscConfig+0x6c4>)
 8009e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e72:	4a79      	ldr	r2, [pc, #484]	; (800a058 <HAL_RCC_OscConfig+0x6c4>)
 8009e74:	f023 0304 	bic.w	r3, r3, #4
 8009e78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	689b      	ldr	r3, [r3, #8]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d015      	beq.n	8009eae <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e82:	f7fc f929 	bl	80060d8 <HAL_GetTick>
 8009e86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009e88:	e00a      	b.n	8009ea0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e8a:	f7fc f925 	bl	80060d8 <HAL_GetTick>
 8009e8e:	4602      	mov	r2, r0
 8009e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e92:	1ad3      	subs	r3, r2, r3
 8009e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d901      	bls.n	8009ea0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009e9c:	2303      	movs	r3, #3
 8009e9e:	e14b      	b.n	800a138 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009ea0:	4b6d      	ldr	r3, [pc, #436]	; (800a058 <HAL_RCC_OscConfig+0x6c4>)
 8009ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ea4:	f003 0302 	and.w	r3, r3, #2
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d0ee      	beq.n	8009e8a <HAL_RCC_OscConfig+0x4f6>
 8009eac:	e014      	b.n	8009ed8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009eae:	f7fc f913 	bl	80060d8 <HAL_GetTick>
 8009eb2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009eb4:	e00a      	b.n	8009ecc <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009eb6:	f7fc f90f 	bl	80060d8 <HAL_GetTick>
 8009eba:	4602      	mov	r2, r0
 8009ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ebe:	1ad3      	subs	r3, r2, r3
 8009ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d901      	bls.n	8009ecc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009ec8:	2303      	movs	r3, #3
 8009eca:	e135      	b.n	800a138 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009ecc:	4b62      	ldr	r3, [pc, #392]	; (800a058 <HAL_RCC_OscConfig+0x6c4>)
 8009ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ed0:	f003 0302 	and.w	r3, r3, #2
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d1ee      	bne.n	8009eb6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	f000 812a 	beq.w	800a136 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009ee2:	4b5d      	ldr	r3, [pc, #372]	; (800a058 <HAL_RCC_OscConfig+0x6c4>)
 8009ee4:	691b      	ldr	r3, [r3, #16]
 8009ee6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009eea:	2b18      	cmp	r3, #24
 8009eec:	f000 80ba 	beq.w	800a064 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef4:	2b02      	cmp	r3, #2
 8009ef6:	f040 8095 	bne.w	800a024 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009efa:	4b57      	ldr	r3, [pc, #348]	; (800a058 <HAL_RCC_OscConfig+0x6c4>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4a56      	ldr	r2, [pc, #344]	; (800a058 <HAL_RCC_OscConfig+0x6c4>)
 8009f00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f06:	f7fc f8e7 	bl	80060d8 <HAL_GetTick>
 8009f0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f0c:	e008      	b.n	8009f20 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f0e:	f7fc f8e3 	bl	80060d8 <HAL_GetTick>
 8009f12:	4602      	mov	r2, r0
 8009f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f16:	1ad3      	subs	r3, r2, r3
 8009f18:	2b02      	cmp	r3, #2
 8009f1a:	d901      	bls.n	8009f20 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009f1c:	2303      	movs	r3, #3
 8009f1e:	e10b      	b.n	800a138 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f20:	4b4d      	ldr	r3, [pc, #308]	; (800a058 <HAL_RCC_OscConfig+0x6c4>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d1f0      	bne.n	8009f0e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009f2c:	4b4a      	ldr	r3, [pc, #296]	; (800a058 <HAL_RCC_OscConfig+0x6c4>)
 8009f2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f30:	4b4a      	ldr	r3, [pc, #296]	; (800a05c <HAL_RCC_OscConfig+0x6c8>)
 8009f32:	4013      	ands	r3, r2
 8009f34:	687a      	ldr	r2, [r7, #4]
 8009f36:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009f38:	687a      	ldr	r2, [r7, #4]
 8009f3a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009f3c:	0112      	lsls	r2, r2, #4
 8009f3e:	430a      	orrs	r2, r1
 8009f40:	4945      	ldr	r1, [pc, #276]	; (800a058 <HAL_RCC_OscConfig+0x6c4>)
 8009f42:	4313      	orrs	r3, r2
 8009f44:	628b      	str	r3, [r1, #40]	; 0x28
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f4a:	3b01      	subs	r3, #1
 8009f4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f54:	3b01      	subs	r3, #1
 8009f56:	025b      	lsls	r3, r3, #9
 8009f58:	b29b      	uxth	r3, r3
 8009f5a:	431a      	orrs	r2, r3
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f60:	3b01      	subs	r3, #1
 8009f62:	041b      	lsls	r3, r3, #16
 8009f64:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009f68:	431a      	orrs	r2, r3
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f6e:	3b01      	subs	r3, #1
 8009f70:	061b      	lsls	r3, r3, #24
 8009f72:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009f76:	4938      	ldr	r1, [pc, #224]	; (800a058 <HAL_RCC_OscConfig+0x6c4>)
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009f7c:	4b36      	ldr	r3, [pc, #216]	; (800a058 <HAL_RCC_OscConfig+0x6c4>)
 8009f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f80:	4a35      	ldr	r2, [pc, #212]	; (800a058 <HAL_RCC_OscConfig+0x6c4>)
 8009f82:	f023 0301 	bic.w	r3, r3, #1
 8009f86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009f88:	4b33      	ldr	r3, [pc, #204]	; (800a058 <HAL_RCC_OscConfig+0x6c4>)
 8009f8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f8c:	4b34      	ldr	r3, [pc, #208]	; (800a060 <HAL_RCC_OscConfig+0x6cc>)
 8009f8e:	4013      	ands	r3, r2
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009f94:	00d2      	lsls	r2, r2, #3
 8009f96:	4930      	ldr	r1, [pc, #192]	; (800a058 <HAL_RCC_OscConfig+0x6c4>)
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009f9c:	4b2e      	ldr	r3, [pc, #184]	; (800a058 <HAL_RCC_OscConfig+0x6c4>)
 8009f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa0:	f023 020c 	bic.w	r2, r3, #12
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fa8:	492b      	ldr	r1, [pc, #172]	; (800a058 <HAL_RCC_OscConfig+0x6c4>)
 8009faa:	4313      	orrs	r3, r2
 8009fac:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009fae:	4b2a      	ldr	r3, [pc, #168]	; (800a058 <HAL_RCC_OscConfig+0x6c4>)
 8009fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb2:	f023 0202 	bic.w	r2, r3, #2
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fba:	4927      	ldr	r1, [pc, #156]	; (800a058 <HAL_RCC_OscConfig+0x6c4>)
 8009fbc:	4313      	orrs	r3, r2
 8009fbe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009fc0:	4b25      	ldr	r3, [pc, #148]	; (800a058 <HAL_RCC_OscConfig+0x6c4>)
 8009fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc4:	4a24      	ldr	r2, [pc, #144]	; (800a058 <HAL_RCC_OscConfig+0x6c4>)
 8009fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009fca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fcc:	4b22      	ldr	r3, [pc, #136]	; (800a058 <HAL_RCC_OscConfig+0x6c4>)
 8009fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd0:	4a21      	ldr	r2, [pc, #132]	; (800a058 <HAL_RCC_OscConfig+0x6c4>)
 8009fd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009fd8:	4b1f      	ldr	r3, [pc, #124]	; (800a058 <HAL_RCC_OscConfig+0x6c4>)
 8009fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fdc:	4a1e      	ldr	r2, [pc, #120]	; (800a058 <HAL_RCC_OscConfig+0x6c4>)
 8009fde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009fe2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009fe4:	4b1c      	ldr	r3, [pc, #112]	; (800a058 <HAL_RCC_OscConfig+0x6c4>)
 8009fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe8:	4a1b      	ldr	r2, [pc, #108]	; (800a058 <HAL_RCC_OscConfig+0x6c4>)
 8009fea:	f043 0301 	orr.w	r3, r3, #1
 8009fee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009ff0:	4b19      	ldr	r3, [pc, #100]	; (800a058 <HAL_RCC_OscConfig+0x6c4>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a18      	ldr	r2, [pc, #96]	; (800a058 <HAL_RCC_OscConfig+0x6c4>)
 8009ff6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009ffa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ffc:	f7fc f86c 	bl	80060d8 <HAL_GetTick>
 800a000:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a002:	e008      	b.n	800a016 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a004:	f7fc f868 	bl	80060d8 <HAL_GetTick>
 800a008:	4602      	mov	r2, r0
 800a00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00c:	1ad3      	subs	r3, r2, r3
 800a00e:	2b02      	cmp	r3, #2
 800a010:	d901      	bls.n	800a016 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800a012:	2303      	movs	r3, #3
 800a014:	e090      	b.n	800a138 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a016:	4b10      	ldr	r3, [pc, #64]	; (800a058 <HAL_RCC_OscConfig+0x6c4>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d0f0      	beq.n	800a004 <HAL_RCC_OscConfig+0x670>
 800a022:	e088      	b.n	800a136 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a024:	4b0c      	ldr	r3, [pc, #48]	; (800a058 <HAL_RCC_OscConfig+0x6c4>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4a0b      	ldr	r2, [pc, #44]	; (800a058 <HAL_RCC_OscConfig+0x6c4>)
 800a02a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a02e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a030:	f7fc f852 	bl	80060d8 <HAL_GetTick>
 800a034:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a036:	e008      	b.n	800a04a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a038:	f7fc f84e 	bl	80060d8 <HAL_GetTick>
 800a03c:	4602      	mov	r2, r0
 800a03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a040:	1ad3      	subs	r3, r2, r3
 800a042:	2b02      	cmp	r3, #2
 800a044:	d901      	bls.n	800a04a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800a046:	2303      	movs	r3, #3
 800a048:	e076      	b.n	800a138 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a04a:	4b03      	ldr	r3, [pc, #12]	; (800a058 <HAL_RCC_OscConfig+0x6c4>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a052:	2b00      	cmp	r3, #0
 800a054:	d1f0      	bne.n	800a038 <HAL_RCC_OscConfig+0x6a4>
 800a056:	e06e      	b.n	800a136 <HAL_RCC_OscConfig+0x7a2>
 800a058:	58024400 	.word	0x58024400
 800a05c:	fffffc0c 	.word	0xfffffc0c
 800a060:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a064:	4b36      	ldr	r3, [pc, #216]	; (800a140 <HAL_RCC_OscConfig+0x7ac>)
 800a066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a068:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a06a:	4b35      	ldr	r3, [pc, #212]	; (800a140 <HAL_RCC_OscConfig+0x7ac>)
 800a06c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a06e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a074:	2b01      	cmp	r3, #1
 800a076:	d031      	beq.n	800a0dc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	f003 0203 	and.w	r2, r3, #3
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a082:	429a      	cmp	r2, r3
 800a084:	d12a      	bne.n	800a0dc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	091b      	lsrs	r3, r3, #4
 800a08a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a092:	429a      	cmp	r2, r3
 800a094:	d122      	bne.n	800a0dc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	d11a      	bne.n	800a0dc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	0a5b      	lsrs	r3, r3, #9
 800a0aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0b2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	d111      	bne.n	800a0dc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	0c1b      	lsrs	r3, r3, #16
 800a0bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d108      	bne.n	800a0dc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	0e1b      	lsrs	r3, r3, #24
 800a0ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0d6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	d001      	beq.n	800a0e0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	e02b      	b.n	800a138 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a0e0:	4b17      	ldr	r3, [pc, #92]	; (800a140 <HAL_RCC_OscConfig+0x7ac>)
 800a0e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0e4:	08db      	lsrs	r3, r3, #3
 800a0e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a0ea:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0f0:	693a      	ldr	r2, [r7, #16]
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d01f      	beq.n	800a136 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a0f6:	4b12      	ldr	r3, [pc, #72]	; (800a140 <HAL_RCC_OscConfig+0x7ac>)
 800a0f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0fa:	4a11      	ldr	r2, [pc, #68]	; (800a140 <HAL_RCC_OscConfig+0x7ac>)
 800a0fc:	f023 0301 	bic.w	r3, r3, #1
 800a100:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a102:	f7fb ffe9 	bl	80060d8 <HAL_GetTick>
 800a106:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a108:	bf00      	nop
 800a10a:	f7fb ffe5 	bl	80060d8 <HAL_GetTick>
 800a10e:	4602      	mov	r2, r0
 800a110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a112:	4293      	cmp	r3, r2
 800a114:	d0f9      	beq.n	800a10a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a116:	4b0a      	ldr	r3, [pc, #40]	; (800a140 <HAL_RCC_OscConfig+0x7ac>)
 800a118:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a11a:	4b0a      	ldr	r3, [pc, #40]	; (800a144 <HAL_RCC_OscConfig+0x7b0>)
 800a11c:	4013      	ands	r3, r2
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a122:	00d2      	lsls	r2, r2, #3
 800a124:	4906      	ldr	r1, [pc, #24]	; (800a140 <HAL_RCC_OscConfig+0x7ac>)
 800a126:	4313      	orrs	r3, r2
 800a128:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a12a:	4b05      	ldr	r3, [pc, #20]	; (800a140 <HAL_RCC_OscConfig+0x7ac>)
 800a12c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a12e:	4a04      	ldr	r2, [pc, #16]	; (800a140 <HAL_RCC_OscConfig+0x7ac>)
 800a130:	f043 0301 	orr.w	r3, r3, #1
 800a134:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a136:	2300      	movs	r3, #0
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3730      	adds	r7, #48	; 0x30
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}
 800a140:	58024400 	.word	0x58024400
 800a144:	ffff0007 	.word	0xffff0007

0800a148 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b086      	sub	sp, #24
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d101      	bne.n	800a15c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a158:	2301      	movs	r3, #1
 800a15a:	e19c      	b.n	800a496 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a15c:	4b8a      	ldr	r3, [pc, #552]	; (800a388 <HAL_RCC_ClockConfig+0x240>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f003 030f 	and.w	r3, r3, #15
 800a164:	683a      	ldr	r2, [r7, #0]
 800a166:	429a      	cmp	r2, r3
 800a168:	d910      	bls.n	800a18c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a16a:	4b87      	ldr	r3, [pc, #540]	; (800a388 <HAL_RCC_ClockConfig+0x240>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f023 020f 	bic.w	r2, r3, #15
 800a172:	4985      	ldr	r1, [pc, #532]	; (800a388 <HAL_RCC_ClockConfig+0x240>)
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	4313      	orrs	r3, r2
 800a178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a17a:	4b83      	ldr	r3, [pc, #524]	; (800a388 <HAL_RCC_ClockConfig+0x240>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f003 030f 	and.w	r3, r3, #15
 800a182:	683a      	ldr	r2, [r7, #0]
 800a184:	429a      	cmp	r2, r3
 800a186:	d001      	beq.n	800a18c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a188:	2301      	movs	r3, #1
 800a18a:	e184      	b.n	800a496 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f003 0304 	and.w	r3, r3, #4
 800a194:	2b00      	cmp	r3, #0
 800a196:	d010      	beq.n	800a1ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	691a      	ldr	r2, [r3, #16]
 800a19c:	4b7b      	ldr	r3, [pc, #492]	; (800a38c <HAL_RCC_ClockConfig+0x244>)
 800a19e:	699b      	ldr	r3, [r3, #24]
 800a1a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d908      	bls.n	800a1ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a1a8:	4b78      	ldr	r3, [pc, #480]	; (800a38c <HAL_RCC_ClockConfig+0x244>)
 800a1aa:	699b      	ldr	r3, [r3, #24]
 800a1ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	691b      	ldr	r3, [r3, #16]
 800a1b4:	4975      	ldr	r1, [pc, #468]	; (800a38c <HAL_RCC_ClockConfig+0x244>)
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f003 0308 	and.w	r3, r3, #8
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d010      	beq.n	800a1e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	695a      	ldr	r2, [r3, #20]
 800a1ca:	4b70      	ldr	r3, [pc, #448]	; (800a38c <HAL_RCC_ClockConfig+0x244>)
 800a1cc:	69db      	ldr	r3, [r3, #28]
 800a1ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d908      	bls.n	800a1e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a1d6:	4b6d      	ldr	r3, [pc, #436]	; (800a38c <HAL_RCC_ClockConfig+0x244>)
 800a1d8:	69db      	ldr	r3, [r3, #28]
 800a1da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	695b      	ldr	r3, [r3, #20]
 800a1e2:	496a      	ldr	r1, [pc, #424]	; (800a38c <HAL_RCC_ClockConfig+0x244>)
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f003 0310 	and.w	r3, r3, #16
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d010      	beq.n	800a216 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	699a      	ldr	r2, [r3, #24]
 800a1f8:	4b64      	ldr	r3, [pc, #400]	; (800a38c <HAL_RCC_ClockConfig+0x244>)
 800a1fa:	69db      	ldr	r3, [r3, #28]
 800a1fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a200:	429a      	cmp	r2, r3
 800a202:	d908      	bls.n	800a216 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a204:	4b61      	ldr	r3, [pc, #388]	; (800a38c <HAL_RCC_ClockConfig+0x244>)
 800a206:	69db      	ldr	r3, [r3, #28]
 800a208:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	699b      	ldr	r3, [r3, #24]
 800a210:	495e      	ldr	r1, [pc, #376]	; (800a38c <HAL_RCC_ClockConfig+0x244>)
 800a212:	4313      	orrs	r3, r2
 800a214:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f003 0320 	and.w	r3, r3, #32
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d010      	beq.n	800a244 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	69da      	ldr	r2, [r3, #28]
 800a226:	4b59      	ldr	r3, [pc, #356]	; (800a38c <HAL_RCC_ClockConfig+0x244>)
 800a228:	6a1b      	ldr	r3, [r3, #32]
 800a22a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a22e:	429a      	cmp	r2, r3
 800a230:	d908      	bls.n	800a244 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a232:	4b56      	ldr	r3, [pc, #344]	; (800a38c <HAL_RCC_ClockConfig+0x244>)
 800a234:	6a1b      	ldr	r3, [r3, #32]
 800a236:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	69db      	ldr	r3, [r3, #28]
 800a23e:	4953      	ldr	r1, [pc, #332]	; (800a38c <HAL_RCC_ClockConfig+0x244>)
 800a240:	4313      	orrs	r3, r2
 800a242:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f003 0302 	and.w	r3, r3, #2
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d010      	beq.n	800a272 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	68da      	ldr	r2, [r3, #12]
 800a254:	4b4d      	ldr	r3, [pc, #308]	; (800a38c <HAL_RCC_ClockConfig+0x244>)
 800a256:	699b      	ldr	r3, [r3, #24]
 800a258:	f003 030f 	and.w	r3, r3, #15
 800a25c:	429a      	cmp	r2, r3
 800a25e:	d908      	bls.n	800a272 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a260:	4b4a      	ldr	r3, [pc, #296]	; (800a38c <HAL_RCC_ClockConfig+0x244>)
 800a262:	699b      	ldr	r3, [r3, #24]
 800a264:	f023 020f 	bic.w	r2, r3, #15
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	68db      	ldr	r3, [r3, #12]
 800a26c:	4947      	ldr	r1, [pc, #284]	; (800a38c <HAL_RCC_ClockConfig+0x244>)
 800a26e:	4313      	orrs	r3, r2
 800a270:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f003 0301 	and.w	r3, r3, #1
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d055      	beq.n	800a32a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a27e:	4b43      	ldr	r3, [pc, #268]	; (800a38c <HAL_RCC_ClockConfig+0x244>)
 800a280:	699b      	ldr	r3, [r3, #24]
 800a282:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	689b      	ldr	r3, [r3, #8]
 800a28a:	4940      	ldr	r1, [pc, #256]	; (800a38c <HAL_RCC_ClockConfig+0x244>)
 800a28c:	4313      	orrs	r3, r2
 800a28e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	685b      	ldr	r3, [r3, #4]
 800a294:	2b02      	cmp	r3, #2
 800a296:	d107      	bne.n	800a2a8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a298:	4b3c      	ldr	r3, [pc, #240]	; (800a38c <HAL_RCC_ClockConfig+0x244>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d121      	bne.n	800a2e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	e0f6      	b.n	800a496 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	685b      	ldr	r3, [r3, #4]
 800a2ac:	2b03      	cmp	r3, #3
 800a2ae:	d107      	bne.n	800a2c0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a2b0:	4b36      	ldr	r3, [pc, #216]	; (800a38c <HAL_RCC_ClockConfig+0x244>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d115      	bne.n	800a2e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a2bc:	2301      	movs	r3, #1
 800a2be:	e0ea      	b.n	800a496 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d107      	bne.n	800a2d8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a2c8:	4b30      	ldr	r3, [pc, #192]	; (800a38c <HAL_RCC_ClockConfig+0x244>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d109      	bne.n	800a2e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	e0de      	b.n	800a496 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a2d8:	4b2c      	ldr	r3, [pc, #176]	; (800a38c <HAL_RCC_ClockConfig+0x244>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f003 0304 	and.w	r3, r3, #4
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d101      	bne.n	800a2e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	e0d6      	b.n	800a496 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a2e8:	4b28      	ldr	r3, [pc, #160]	; (800a38c <HAL_RCC_ClockConfig+0x244>)
 800a2ea:	691b      	ldr	r3, [r3, #16]
 800a2ec:	f023 0207 	bic.w	r2, r3, #7
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	4925      	ldr	r1, [pc, #148]	; (800a38c <HAL_RCC_ClockConfig+0x244>)
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2fa:	f7fb feed 	bl	80060d8 <HAL_GetTick>
 800a2fe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a300:	e00a      	b.n	800a318 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a302:	f7fb fee9 	bl	80060d8 <HAL_GetTick>
 800a306:	4602      	mov	r2, r0
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	1ad3      	subs	r3, r2, r3
 800a30c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a310:	4293      	cmp	r3, r2
 800a312:	d901      	bls.n	800a318 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a314:	2303      	movs	r3, #3
 800a316:	e0be      	b.n	800a496 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a318:	4b1c      	ldr	r3, [pc, #112]	; (800a38c <HAL_RCC_ClockConfig+0x244>)
 800a31a:	691b      	ldr	r3, [r3, #16]
 800a31c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	00db      	lsls	r3, r3, #3
 800a326:	429a      	cmp	r2, r3
 800a328:	d1eb      	bne.n	800a302 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f003 0302 	and.w	r3, r3, #2
 800a332:	2b00      	cmp	r3, #0
 800a334:	d010      	beq.n	800a358 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	68da      	ldr	r2, [r3, #12]
 800a33a:	4b14      	ldr	r3, [pc, #80]	; (800a38c <HAL_RCC_ClockConfig+0x244>)
 800a33c:	699b      	ldr	r3, [r3, #24]
 800a33e:	f003 030f 	and.w	r3, r3, #15
 800a342:	429a      	cmp	r2, r3
 800a344:	d208      	bcs.n	800a358 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a346:	4b11      	ldr	r3, [pc, #68]	; (800a38c <HAL_RCC_ClockConfig+0x244>)
 800a348:	699b      	ldr	r3, [r3, #24]
 800a34a:	f023 020f 	bic.w	r2, r3, #15
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	68db      	ldr	r3, [r3, #12]
 800a352:	490e      	ldr	r1, [pc, #56]	; (800a38c <HAL_RCC_ClockConfig+0x244>)
 800a354:	4313      	orrs	r3, r2
 800a356:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a358:	4b0b      	ldr	r3, [pc, #44]	; (800a388 <HAL_RCC_ClockConfig+0x240>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f003 030f 	and.w	r3, r3, #15
 800a360:	683a      	ldr	r2, [r7, #0]
 800a362:	429a      	cmp	r2, r3
 800a364:	d214      	bcs.n	800a390 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a366:	4b08      	ldr	r3, [pc, #32]	; (800a388 <HAL_RCC_ClockConfig+0x240>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f023 020f 	bic.w	r2, r3, #15
 800a36e:	4906      	ldr	r1, [pc, #24]	; (800a388 <HAL_RCC_ClockConfig+0x240>)
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	4313      	orrs	r3, r2
 800a374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a376:	4b04      	ldr	r3, [pc, #16]	; (800a388 <HAL_RCC_ClockConfig+0x240>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f003 030f 	and.w	r3, r3, #15
 800a37e:	683a      	ldr	r2, [r7, #0]
 800a380:	429a      	cmp	r2, r3
 800a382:	d005      	beq.n	800a390 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a384:	2301      	movs	r3, #1
 800a386:	e086      	b.n	800a496 <HAL_RCC_ClockConfig+0x34e>
 800a388:	52002000 	.word	0x52002000
 800a38c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f003 0304 	and.w	r3, r3, #4
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d010      	beq.n	800a3be <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	691a      	ldr	r2, [r3, #16]
 800a3a0:	4b3f      	ldr	r3, [pc, #252]	; (800a4a0 <HAL_RCC_ClockConfig+0x358>)
 800a3a2:	699b      	ldr	r3, [r3, #24]
 800a3a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d208      	bcs.n	800a3be <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a3ac:	4b3c      	ldr	r3, [pc, #240]	; (800a4a0 <HAL_RCC_ClockConfig+0x358>)
 800a3ae:	699b      	ldr	r3, [r3, #24]
 800a3b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	691b      	ldr	r3, [r3, #16]
 800a3b8:	4939      	ldr	r1, [pc, #228]	; (800a4a0 <HAL_RCC_ClockConfig+0x358>)
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f003 0308 	and.w	r3, r3, #8
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d010      	beq.n	800a3ec <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	695a      	ldr	r2, [r3, #20]
 800a3ce:	4b34      	ldr	r3, [pc, #208]	; (800a4a0 <HAL_RCC_ClockConfig+0x358>)
 800a3d0:	69db      	ldr	r3, [r3, #28]
 800a3d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d208      	bcs.n	800a3ec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a3da:	4b31      	ldr	r3, [pc, #196]	; (800a4a0 <HAL_RCC_ClockConfig+0x358>)
 800a3dc:	69db      	ldr	r3, [r3, #28]
 800a3de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	695b      	ldr	r3, [r3, #20]
 800a3e6:	492e      	ldr	r1, [pc, #184]	; (800a4a0 <HAL_RCC_ClockConfig+0x358>)
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f003 0310 	and.w	r3, r3, #16
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d010      	beq.n	800a41a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	699a      	ldr	r2, [r3, #24]
 800a3fc:	4b28      	ldr	r3, [pc, #160]	; (800a4a0 <HAL_RCC_ClockConfig+0x358>)
 800a3fe:	69db      	ldr	r3, [r3, #28]
 800a400:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a404:	429a      	cmp	r2, r3
 800a406:	d208      	bcs.n	800a41a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a408:	4b25      	ldr	r3, [pc, #148]	; (800a4a0 <HAL_RCC_ClockConfig+0x358>)
 800a40a:	69db      	ldr	r3, [r3, #28]
 800a40c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	699b      	ldr	r3, [r3, #24]
 800a414:	4922      	ldr	r1, [pc, #136]	; (800a4a0 <HAL_RCC_ClockConfig+0x358>)
 800a416:	4313      	orrs	r3, r2
 800a418:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f003 0320 	and.w	r3, r3, #32
 800a422:	2b00      	cmp	r3, #0
 800a424:	d010      	beq.n	800a448 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	69da      	ldr	r2, [r3, #28]
 800a42a:	4b1d      	ldr	r3, [pc, #116]	; (800a4a0 <HAL_RCC_ClockConfig+0x358>)
 800a42c:	6a1b      	ldr	r3, [r3, #32]
 800a42e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a432:	429a      	cmp	r2, r3
 800a434:	d208      	bcs.n	800a448 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a436:	4b1a      	ldr	r3, [pc, #104]	; (800a4a0 <HAL_RCC_ClockConfig+0x358>)
 800a438:	6a1b      	ldr	r3, [r3, #32]
 800a43a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	69db      	ldr	r3, [r3, #28]
 800a442:	4917      	ldr	r1, [pc, #92]	; (800a4a0 <HAL_RCC_ClockConfig+0x358>)
 800a444:	4313      	orrs	r3, r2
 800a446:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a448:	f000 f834 	bl	800a4b4 <HAL_RCC_GetSysClockFreq>
 800a44c:	4602      	mov	r2, r0
 800a44e:	4b14      	ldr	r3, [pc, #80]	; (800a4a0 <HAL_RCC_ClockConfig+0x358>)
 800a450:	699b      	ldr	r3, [r3, #24]
 800a452:	0a1b      	lsrs	r3, r3, #8
 800a454:	f003 030f 	and.w	r3, r3, #15
 800a458:	4912      	ldr	r1, [pc, #72]	; (800a4a4 <HAL_RCC_ClockConfig+0x35c>)
 800a45a:	5ccb      	ldrb	r3, [r1, r3]
 800a45c:	f003 031f 	and.w	r3, r3, #31
 800a460:	fa22 f303 	lsr.w	r3, r2, r3
 800a464:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a466:	4b0e      	ldr	r3, [pc, #56]	; (800a4a0 <HAL_RCC_ClockConfig+0x358>)
 800a468:	699b      	ldr	r3, [r3, #24]
 800a46a:	f003 030f 	and.w	r3, r3, #15
 800a46e:	4a0d      	ldr	r2, [pc, #52]	; (800a4a4 <HAL_RCC_ClockConfig+0x35c>)
 800a470:	5cd3      	ldrb	r3, [r2, r3]
 800a472:	f003 031f 	and.w	r3, r3, #31
 800a476:	693a      	ldr	r2, [r7, #16]
 800a478:	fa22 f303 	lsr.w	r3, r2, r3
 800a47c:	4a0a      	ldr	r2, [pc, #40]	; (800a4a8 <HAL_RCC_ClockConfig+0x360>)
 800a47e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a480:	4a0a      	ldr	r2, [pc, #40]	; (800a4ac <HAL_RCC_ClockConfig+0x364>)
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a486:	4b0a      	ldr	r3, [pc, #40]	; (800a4b0 <HAL_RCC_ClockConfig+0x368>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	4618      	mov	r0, r3
 800a48c:	f7fb fdda 	bl	8006044 <HAL_InitTick>
 800a490:	4603      	mov	r3, r0
 800a492:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a494:	7bfb      	ldrb	r3, [r7, #15]
}
 800a496:	4618      	mov	r0, r3
 800a498:	3718      	adds	r7, #24
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}
 800a49e:	bf00      	nop
 800a4a0:	58024400 	.word	0x58024400
 800a4a4:	08010734 	.word	0x08010734
 800a4a8:	24000054 	.word	0x24000054
 800a4ac:	24000050 	.word	0x24000050
 800a4b0:	24000058 	.word	0x24000058

0800a4b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b089      	sub	sp, #36	; 0x24
 800a4b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a4ba:	4bb3      	ldr	r3, [pc, #716]	; (800a788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4bc:	691b      	ldr	r3, [r3, #16]
 800a4be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a4c2:	2b18      	cmp	r3, #24
 800a4c4:	f200 8155 	bhi.w	800a772 <HAL_RCC_GetSysClockFreq+0x2be>
 800a4c8:	a201      	add	r2, pc, #4	; (adr r2, 800a4d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a4ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ce:	bf00      	nop
 800a4d0:	0800a535 	.word	0x0800a535
 800a4d4:	0800a773 	.word	0x0800a773
 800a4d8:	0800a773 	.word	0x0800a773
 800a4dc:	0800a773 	.word	0x0800a773
 800a4e0:	0800a773 	.word	0x0800a773
 800a4e4:	0800a773 	.word	0x0800a773
 800a4e8:	0800a773 	.word	0x0800a773
 800a4ec:	0800a773 	.word	0x0800a773
 800a4f0:	0800a55b 	.word	0x0800a55b
 800a4f4:	0800a773 	.word	0x0800a773
 800a4f8:	0800a773 	.word	0x0800a773
 800a4fc:	0800a773 	.word	0x0800a773
 800a500:	0800a773 	.word	0x0800a773
 800a504:	0800a773 	.word	0x0800a773
 800a508:	0800a773 	.word	0x0800a773
 800a50c:	0800a773 	.word	0x0800a773
 800a510:	0800a561 	.word	0x0800a561
 800a514:	0800a773 	.word	0x0800a773
 800a518:	0800a773 	.word	0x0800a773
 800a51c:	0800a773 	.word	0x0800a773
 800a520:	0800a773 	.word	0x0800a773
 800a524:	0800a773 	.word	0x0800a773
 800a528:	0800a773 	.word	0x0800a773
 800a52c:	0800a773 	.word	0x0800a773
 800a530:	0800a567 	.word	0x0800a567
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a534:	4b94      	ldr	r3, [pc, #592]	; (800a788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f003 0320 	and.w	r3, r3, #32
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d009      	beq.n	800a554 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a540:	4b91      	ldr	r3, [pc, #580]	; (800a788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	08db      	lsrs	r3, r3, #3
 800a546:	f003 0303 	and.w	r3, r3, #3
 800a54a:	4a90      	ldr	r2, [pc, #576]	; (800a78c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a54c:	fa22 f303 	lsr.w	r3, r2, r3
 800a550:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a552:	e111      	b.n	800a778 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a554:	4b8d      	ldr	r3, [pc, #564]	; (800a78c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a556:	61bb      	str	r3, [r7, #24]
      break;
 800a558:	e10e      	b.n	800a778 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a55a:	4b8d      	ldr	r3, [pc, #564]	; (800a790 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a55c:	61bb      	str	r3, [r7, #24]
      break;
 800a55e:	e10b      	b.n	800a778 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a560:	4b8c      	ldr	r3, [pc, #560]	; (800a794 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a562:	61bb      	str	r3, [r7, #24]
      break;
 800a564:	e108      	b.n	800a778 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a566:	4b88      	ldr	r3, [pc, #544]	; (800a788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a56a:	f003 0303 	and.w	r3, r3, #3
 800a56e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a570:	4b85      	ldr	r3, [pc, #532]	; (800a788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a574:	091b      	lsrs	r3, r3, #4
 800a576:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a57a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a57c:	4b82      	ldr	r3, [pc, #520]	; (800a788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a57e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a580:	f003 0301 	and.w	r3, r3, #1
 800a584:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a586:	4b80      	ldr	r3, [pc, #512]	; (800a788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a58a:	08db      	lsrs	r3, r3, #3
 800a58c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a590:	68fa      	ldr	r2, [r7, #12]
 800a592:	fb02 f303 	mul.w	r3, r2, r3
 800a596:	ee07 3a90 	vmov	s15, r3
 800a59a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a59e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	f000 80e1 	beq.w	800a76c <HAL_RCC_GetSysClockFreq+0x2b8>
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	2b02      	cmp	r3, #2
 800a5ae:	f000 8083 	beq.w	800a6b8 <HAL_RCC_GetSysClockFreq+0x204>
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	2b02      	cmp	r3, #2
 800a5b6:	f200 80a1 	bhi.w	800a6fc <HAL_RCC_GetSysClockFreq+0x248>
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d003      	beq.n	800a5c8 <HAL_RCC_GetSysClockFreq+0x114>
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	d056      	beq.n	800a674 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a5c6:	e099      	b.n	800a6fc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a5c8:	4b6f      	ldr	r3, [pc, #444]	; (800a788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f003 0320 	and.w	r3, r3, #32
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d02d      	beq.n	800a630 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5d4:	4b6c      	ldr	r3, [pc, #432]	; (800a788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	08db      	lsrs	r3, r3, #3
 800a5da:	f003 0303 	and.w	r3, r3, #3
 800a5de:	4a6b      	ldr	r2, [pc, #428]	; (800a78c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a5e0:	fa22 f303 	lsr.w	r3, r2, r3
 800a5e4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	ee07 3a90 	vmov	s15, r3
 800a5ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	ee07 3a90 	vmov	s15, r3
 800a5f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5fe:	4b62      	ldr	r3, [pc, #392]	; (800a788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a606:	ee07 3a90 	vmov	s15, r3
 800a60a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a60e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a612:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a798 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a616:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a61a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a61e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a622:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a62a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a62e:	e087      	b.n	800a740 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	ee07 3a90 	vmov	s15, r3
 800a636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a63a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a79c <HAL_RCC_GetSysClockFreq+0x2e8>
 800a63e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a642:	4b51      	ldr	r3, [pc, #324]	; (800a788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a64a:	ee07 3a90 	vmov	s15, r3
 800a64e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a652:	ed97 6a02 	vldr	s12, [r7, #8]
 800a656:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a798 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a65a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a65e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a662:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a66a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a66e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a672:	e065      	b.n	800a740 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	ee07 3a90 	vmov	s15, r3
 800a67a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a67e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a7a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a686:	4b40      	ldr	r3, [pc, #256]	; (800a788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a68a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a68e:	ee07 3a90 	vmov	s15, r3
 800a692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a696:	ed97 6a02 	vldr	s12, [r7, #8]
 800a69a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a798 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a69e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a6b6:	e043      	b.n	800a740 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	ee07 3a90 	vmov	s15, r3
 800a6be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6c2:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a7a4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a6c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6ca:	4b2f      	ldr	r3, [pc, #188]	; (800a788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6d2:	ee07 3a90 	vmov	s15, r3
 800a6d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6da:	ed97 6a02 	vldr	s12, [r7, #8]
 800a6de:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a798 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a6e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a6fa:	e021      	b.n	800a740 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	ee07 3a90 	vmov	s15, r3
 800a702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a706:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a7a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a70a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a70e:	4b1e      	ldr	r3, [pc, #120]	; (800a788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a716:	ee07 3a90 	vmov	s15, r3
 800a71a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a71e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a722:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a798 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a72a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a72e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a73a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a73e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a740:	4b11      	ldr	r3, [pc, #68]	; (800a788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a744:	0a5b      	lsrs	r3, r3, #9
 800a746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a74a:	3301      	adds	r3, #1
 800a74c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	ee07 3a90 	vmov	s15, r3
 800a754:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a758:	edd7 6a07 	vldr	s13, [r7, #28]
 800a75c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a760:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a764:	ee17 3a90 	vmov	r3, s15
 800a768:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a76a:	e005      	b.n	800a778 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a76c:	2300      	movs	r3, #0
 800a76e:	61bb      	str	r3, [r7, #24]
      break;
 800a770:	e002      	b.n	800a778 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a772:	4b07      	ldr	r3, [pc, #28]	; (800a790 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a774:	61bb      	str	r3, [r7, #24]
      break;
 800a776:	bf00      	nop
  }

  return sysclockfreq;
 800a778:	69bb      	ldr	r3, [r7, #24]
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3724      	adds	r7, #36	; 0x24
 800a77e:	46bd      	mov	sp, r7
 800a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a784:	4770      	bx	lr
 800a786:	bf00      	nop
 800a788:	58024400 	.word	0x58024400
 800a78c:	03d09000 	.word	0x03d09000
 800a790:	003d0900 	.word	0x003d0900
 800a794:	007a1200 	.word	0x007a1200
 800a798:	46000000 	.word	0x46000000
 800a79c:	4c742400 	.word	0x4c742400
 800a7a0:	4a742400 	.word	0x4a742400
 800a7a4:	4af42400 	.word	0x4af42400

0800a7a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b082      	sub	sp, #8
 800a7ac:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a7ae:	f7ff fe81 	bl	800a4b4 <HAL_RCC_GetSysClockFreq>
 800a7b2:	4602      	mov	r2, r0
 800a7b4:	4b10      	ldr	r3, [pc, #64]	; (800a7f8 <HAL_RCC_GetHCLKFreq+0x50>)
 800a7b6:	699b      	ldr	r3, [r3, #24]
 800a7b8:	0a1b      	lsrs	r3, r3, #8
 800a7ba:	f003 030f 	and.w	r3, r3, #15
 800a7be:	490f      	ldr	r1, [pc, #60]	; (800a7fc <HAL_RCC_GetHCLKFreq+0x54>)
 800a7c0:	5ccb      	ldrb	r3, [r1, r3]
 800a7c2:	f003 031f 	and.w	r3, r3, #31
 800a7c6:	fa22 f303 	lsr.w	r3, r2, r3
 800a7ca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a7cc:	4b0a      	ldr	r3, [pc, #40]	; (800a7f8 <HAL_RCC_GetHCLKFreq+0x50>)
 800a7ce:	699b      	ldr	r3, [r3, #24]
 800a7d0:	f003 030f 	and.w	r3, r3, #15
 800a7d4:	4a09      	ldr	r2, [pc, #36]	; (800a7fc <HAL_RCC_GetHCLKFreq+0x54>)
 800a7d6:	5cd3      	ldrb	r3, [r2, r3]
 800a7d8:	f003 031f 	and.w	r3, r3, #31
 800a7dc:	687a      	ldr	r2, [r7, #4]
 800a7de:	fa22 f303 	lsr.w	r3, r2, r3
 800a7e2:	4a07      	ldr	r2, [pc, #28]	; (800a800 <HAL_RCC_GetHCLKFreq+0x58>)
 800a7e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a7e6:	4a07      	ldr	r2, [pc, #28]	; (800a804 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a7ec:	4b04      	ldr	r3, [pc, #16]	; (800a800 <HAL_RCC_GetHCLKFreq+0x58>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3708      	adds	r7, #8
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}
 800a7f8:	58024400 	.word	0x58024400
 800a7fc:	08010734 	.word	0x08010734
 800a800:	24000054 	.word	0x24000054
 800a804:	24000050 	.word	0x24000050

0800a808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a80c:	f7ff ffcc 	bl	800a7a8 <HAL_RCC_GetHCLKFreq>
 800a810:	4602      	mov	r2, r0
 800a812:	4b06      	ldr	r3, [pc, #24]	; (800a82c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a814:	69db      	ldr	r3, [r3, #28]
 800a816:	091b      	lsrs	r3, r3, #4
 800a818:	f003 0307 	and.w	r3, r3, #7
 800a81c:	4904      	ldr	r1, [pc, #16]	; (800a830 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a81e:	5ccb      	ldrb	r3, [r1, r3]
 800a820:	f003 031f 	and.w	r3, r3, #31
 800a824:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a828:	4618      	mov	r0, r3
 800a82a:	bd80      	pop	{r7, pc}
 800a82c:	58024400 	.word	0x58024400
 800a830:	08010734 	.word	0x08010734

0800a834 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a838:	f7ff ffb6 	bl	800a7a8 <HAL_RCC_GetHCLKFreq>
 800a83c:	4602      	mov	r2, r0
 800a83e:	4b06      	ldr	r3, [pc, #24]	; (800a858 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a840:	69db      	ldr	r3, [r3, #28]
 800a842:	0a1b      	lsrs	r3, r3, #8
 800a844:	f003 0307 	and.w	r3, r3, #7
 800a848:	4904      	ldr	r1, [pc, #16]	; (800a85c <HAL_RCC_GetPCLK2Freq+0x28>)
 800a84a:	5ccb      	ldrb	r3, [r1, r3]
 800a84c:	f003 031f 	and.w	r3, r3, #31
 800a850:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a854:	4618      	mov	r0, r3
 800a856:	bd80      	pop	{r7, pc}
 800a858:	58024400 	.word	0x58024400
 800a85c:	08010734 	.word	0x08010734

0800a860 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a860:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a864:	b0c6      	sub	sp, #280	; 0x118
 800a866:	af00      	add	r7, sp, #0
 800a868:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a86c:	2300      	movs	r3, #0
 800a86e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a872:	2300      	movs	r3, #0
 800a874:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a878:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a880:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a884:	2500      	movs	r5, #0
 800a886:	ea54 0305 	orrs.w	r3, r4, r5
 800a88a:	d049      	beq.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a88c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a890:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a892:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a896:	d02f      	beq.n	800a8f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a898:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a89c:	d828      	bhi.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a89e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a8a2:	d01a      	beq.n	800a8da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a8a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a8a8:	d822      	bhi.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d003      	beq.n	800a8b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a8ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a8b2:	d007      	beq.n	800a8c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a8b4:	e01c      	b.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8b6:	4bab      	ldr	r3, [pc, #684]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a8b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ba:	4aaa      	ldr	r2, [pc, #680]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a8bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a8c2:	e01a      	b.n	800a8fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a8c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8c8:	3308      	adds	r3, #8
 800a8ca:	2102      	movs	r1, #2
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f001 fc25 	bl	800c11c <RCCEx_PLL2_Config>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a8d8:	e00f      	b.n	800a8fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a8da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8de:	3328      	adds	r3, #40	; 0x28
 800a8e0:	2102      	movs	r1, #2
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f001 fccc 	bl	800c280 <RCCEx_PLL3_Config>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a8ee:	e004      	b.n	800a8fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a8f6:	e000      	b.n	800a8fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a8f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8fa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d10a      	bne.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a902:	4b98      	ldr	r3, [pc, #608]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a906:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a90a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a90e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a910:	4a94      	ldr	r2, [pc, #592]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a912:	430b      	orrs	r3, r1
 800a914:	6513      	str	r3, [r2, #80]	; 0x50
 800a916:	e003      	b.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a918:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a91c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a920:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a928:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800a92c:	f04f 0900 	mov.w	r9, #0
 800a930:	ea58 0309 	orrs.w	r3, r8, r9
 800a934:	d047      	beq.n	800a9c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a936:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a93a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a93c:	2b04      	cmp	r3, #4
 800a93e:	d82a      	bhi.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a940:	a201      	add	r2, pc, #4	; (adr r2, 800a948 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a946:	bf00      	nop
 800a948:	0800a95d 	.word	0x0800a95d
 800a94c:	0800a96b 	.word	0x0800a96b
 800a950:	0800a981 	.word	0x0800a981
 800a954:	0800a99f 	.word	0x0800a99f
 800a958:	0800a99f 	.word	0x0800a99f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a95c:	4b81      	ldr	r3, [pc, #516]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a95e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a960:	4a80      	ldr	r2, [pc, #512]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a962:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a966:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a968:	e01a      	b.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a96a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a96e:	3308      	adds	r3, #8
 800a970:	2100      	movs	r1, #0
 800a972:	4618      	mov	r0, r3
 800a974:	f001 fbd2 	bl	800c11c <RCCEx_PLL2_Config>
 800a978:	4603      	mov	r3, r0
 800a97a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a97e:	e00f      	b.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a980:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a984:	3328      	adds	r3, #40	; 0x28
 800a986:	2100      	movs	r1, #0
 800a988:	4618      	mov	r0, r3
 800a98a:	f001 fc79 	bl	800c280 <RCCEx_PLL3_Config>
 800a98e:	4603      	mov	r3, r0
 800a990:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a994:	e004      	b.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a996:	2301      	movs	r3, #1
 800a998:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a99c:	e000      	b.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a99e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d10a      	bne.n	800a9be <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a9a8:	4b6e      	ldr	r3, [pc, #440]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a9aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9ac:	f023 0107 	bic.w	r1, r3, #7
 800a9b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9b6:	4a6b      	ldr	r2, [pc, #428]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a9b8:	430b      	orrs	r3, r1
 800a9ba:	6513      	str	r3, [r2, #80]	; 0x50
 800a9bc:	e003      	b.n	800a9c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a9c2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a9c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ce:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800a9d2:	f04f 0b00 	mov.w	fp, #0
 800a9d6:	ea5a 030b 	orrs.w	r3, sl, fp
 800a9da:	d05b      	beq.n	800aa94 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a9dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a9e4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a9e8:	d03b      	beq.n	800aa62 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a9ea:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a9ee:	d834      	bhi.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a9f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a9f4:	d037      	beq.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a9f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a9fa:	d82e      	bhi.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a9fc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aa00:	d033      	beq.n	800aa6a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800aa02:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aa06:	d828      	bhi.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800aa08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa0c:	d01a      	beq.n	800aa44 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800aa0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa12:	d822      	bhi.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d003      	beq.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800aa18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa1c:	d007      	beq.n	800aa2e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800aa1e:	e01c      	b.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa20:	4b50      	ldr	r3, [pc, #320]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa24:	4a4f      	ldr	r2, [pc, #316]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa2c:	e01e      	b.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa32:	3308      	adds	r3, #8
 800aa34:	2100      	movs	r1, #0
 800aa36:	4618      	mov	r0, r3
 800aa38:	f001 fb70 	bl	800c11c <RCCEx_PLL2_Config>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800aa42:	e013      	b.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa48:	3328      	adds	r3, #40	; 0x28
 800aa4a:	2100      	movs	r1, #0
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f001 fc17 	bl	800c280 <RCCEx_PLL3_Config>
 800aa52:	4603      	mov	r3, r0
 800aa54:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa58:	e008      	b.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aa60:	e004      	b.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800aa62:	bf00      	nop
 800aa64:	e002      	b.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800aa66:	bf00      	nop
 800aa68:	e000      	b.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800aa6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa6c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d10b      	bne.n	800aa8c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800aa74:	4b3b      	ldr	r3, [pc, #236]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa78:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800aa7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aa84:	4a37      	ldr	r2, [pc, #220]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa86:	430b      	orrs	r3, r1
 800aa88:	6593      	str	r3, [r2, #88]	; 0x58
 800aa8a:	e003      	b.n	800aa94 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa8c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa90:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800aa94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa9c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800aaa0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800aaaa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800aaae:	460b      	mov	r3, r1
 800aab0:	4313      	orrs	r3, r2
 800aab2:	d05d      	beq.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800aab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aab8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aabc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800aac0:	d03b      	beq.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800aac2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800aac6:	d834      	bhi.n	800ab32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aac8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aacc:	d037      	beq.n	800ab3e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800aace:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aad2:	d82e      	bhi.n	800ab32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aad4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aad8:	d033      	beq.n	800ab42 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800aada:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aade:	d828      	bhi.n	800ab32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aae0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aae4:	d01a      	beq.n	800ab1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800aae6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aaea:	d822      	bhi.n	800ab32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d003      	beq.n	800aaf8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800aaf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aaf4:	d007      	beq.n	800ab06 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800aaf6:	e01c      	b.n	800ab32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aaf8:	4b1a      	ldr	r3, [pc, #104]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aafa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aafc:	4a19      	ldr	r2, [pc, #100]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aafe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ab04:	e01e      	b.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab0a:	3308      	adds	r3, #8
 800ab0c:	2100      	movs	r1, #0
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f001 fb04 	bl	800c11c <RCCEx_PLL2_Config>
 800ab14:	4603      	mov	r3, r0
 800ab16:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ab1a:	e013      	b.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab20:	3328      	adds	r3, #40	; 0x28
 800ab22:	2100      	movs	r1, #0
 800ab24:	4618      	mov	r0, r3
 800ab26:	f001 fbab 	bl	800c280 <RCCEx_PLL3_Config>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ab30:	e008      	b.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ab32:	2301      	movs	r3, #1
 800ab34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ab38:	e004      	b.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ab3a:	bf00      	nop
 800ab3c:	e002      	b.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ab3e:	bf00      	nop
 800ab40:	e000      	b.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ab42:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab44:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d10d      	bne.n	800ab68 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ab4c:	4b05      	ldr	r3, [pc, #20]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ab4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab50:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800ab54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab58:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ab5c:	4a01      	ldr	r2, [pc, #4]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ab5e:	430b      	orrs	r3, r1
 800ab60:	6593      	str	r3, [r2, #88]	; 0x58
 800ab62:	e005      	b.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800ab64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab6c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800ab70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab78:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800ab7c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ab80:	2300      	movs	r3, #0
 800ab82:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ab86:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800ab8a:	460b      	mov	r3, r1
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	d03a      	beq.n	800ac06 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800ab90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab96:	2b30      	cmp	r3, #48	; 0x30
 800ab98:	d01f      	beq.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800ab9a:	2b30      	cmp	r3, #48	; 0x30
 800ab9c:	d819      	bhi.n	800abd2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800ab9e:	2b20      	cmp	r3, #32
 800aba0:	d00c      	beq.n	800abbc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800aba2:	2b20      	cmp	r3, #32
 800aba4:	d815      	bhi.n	800abd2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d019      	beq.n	800abde <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800abaa:	2b10      	cmp	r3, #16
 800abac:	d111      	bne.n	800abd2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abae:	4baa      	ldr	r3, [pc, #680]	; (800ae58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800abb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abb2:	4aa9      	ldr	r2, [pc, #676]	; (800ae58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800abb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abb8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800abba:	e011      	b.n	800abe0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800abbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abc0:	3308      	adds	r3, #8
 800abc2:	2102      	movs	r1, #2
 800abc4:	4618      	mov	r0, r3
 800abc6:	f001 faa9 	bl	800c11c <RCCEx_PLL2_Config>
 800abca:	4603      	mov	r3, r0
 800abcc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800abd0:	e006      	b.n	800abe0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800abd2:	2301      	movs	r3, #1
 800abd4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800abd8:	e002      	b.n	800abe0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800abda:	bf00      	nop
 800abdc:	e000      	b.n	800abe0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800abde:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abe0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d10a      	bne.n	800abfe <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800abe8:	4b9b      	ldr	r3, [pc, #620]	; (800ae58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800abea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abec:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800abf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abf6:	4a98      	ldr	r2, [pc, #608]	; (800ae58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800abf8:	430b      	orrs	r3, r1
 800abfa:	64d3      	str	r3, [r2, #76]	; 0x4c
 800abfc:	e003      	b.n	800ac06 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abfe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac02:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ac06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac0e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800ac12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ac16:	2300      	movs	r3, #0
 800ac18:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ac1c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800ac20:	460b      	mov	r3, r1
 800ac22:	4313      	orrs	r3, r2
 800ac24:	d051      	beq.n	800acca <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ac26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac30:	d035      	beq.n	800ac9e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800ac32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac36:	d82e      	bhi.n	800ac96 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ac38:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ac3c:	d031      	beq.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800ac3e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ac42:	d828      	bhi.n	800ac96 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ac44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac48:	d01a      	beq.n	800ac80 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800ac4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac4e:	d822      	bhi.n	800ac96 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d003      	beq.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800ac54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac58:	d007      	beq.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800ac5a:	e01c      	b.n	800ac96 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac5c:	4b7e      	ldr	r3, [pc, #504]	; (800ae58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac60:	4a7d      	ldr	r2, [pc, #500]	; (800ae58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ac68:	e01c      	b.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac6e:	3308      	adds	r3, #8
 800ac70:	2100      	movs	r1, #0
 800ac72:	4618      	mov	r0, r3
 800ac74:	f001 fa52 	bl	800c11c <RCCEx_PLL2_Config>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ac7e:	e011      	b.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ac80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac84:	3328      	adds	r3, #40	; 0x28
 800ac86:	2100      	movs	r1, #0
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f001 faf9 	bl	800c280 <RCCEx_PLL3_Config>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ac94:	e006      	b.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac96:	2301      	movs	r3, #1
 800ac98:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ac9c:	e002      	b.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800ac9e:	bf00      	nop
 800aca0:	e000      	b.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800aca2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aca4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d10a      	bne.n	800acc2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800acac:	4b6a      	ldr	r3, [pc, #424]	; (800ae58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800acae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acb0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800acb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acba:	4a67      	ldr	r2, [pc, #412]	; (800ae58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800acbc:	430b      	orrs	r3, r1
 800acbe:	6513      	str	r3, [r2, #80]	; 0x50
 800acc0:	e003      	b.n	800acca <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acc2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800acc6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800acca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800acd6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800acda:	2300      	movs	r3, #0
 800acdc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ace0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800ace4:	460b      	mov	r3, r1
 800ace6:	4313      	orrs	r3, r2
 800ace8:	d053      	beq.n	800ad92 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800acea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800acf4:	d033      	beq.n	800ad5e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800acf6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800acfa:	d82c      	bhi.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800acfc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ad00:	d02f      	beq.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800ad02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ad06:	d826      	bhi.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ad08:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ad0c:	d02b      	beq.n	800ad66 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800ad0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ad12:	d820      	bhi.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ad14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad18:	d012      	beq.n	800ad40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800ad1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad1e:	d81a      	bhi.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d022      	beq.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800ad24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad28:	d115      	bne.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ad2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad2e:	3308      	adds	r3, #8
 800ad30:	2101      	movs	r1, #1
 800ad32:	4618      	mov	r0, r3
 800ad34:	f001 f9f2 	bl	800c11c <RCCEx_PLL2_Config>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ad3e:	e015      	b.n	800ad6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad44:	3328      	adds	r3, #40	; 0x28
 800ad46:	2101      	movs	r1, #1
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f001 fa99 	bl	800c280 <RCCEx_PLL3_Config>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ad54:	e00a      	b.n	800ad6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad56:	2301      	movs	r3, #1
 800ad58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ad5c:	e006      	b.n	800ad6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ad5e:	bf00      	nop
 800ad60:	e004      	b.n	800ad6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ad62:	bf00      	nop
 800ad64:	e002      	b.n	800ad6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ad66:	bf00      	nop
 800ad68:	e000      	b.n	800ad6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ad6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad6c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d10a      	bne.n	800ad8a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ad74:	4b38      	ldr	r3, [pc, #224]	; (800ae58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ad76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad78:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800ad7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad82:	4a35      	ldr	r2, [pc, #212]	; (800ae58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ad84:	430b      	orrs	r3, r1
 800ad86:	6513      	str	r3, [r2, #80]	; 0x50
 800ad88:	e003      	b.n	800ad92 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad8a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad8e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ad92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800ad9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ada2:	2300      	movs	r3, #0
 800ada4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ada8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800adac:	460b      	mov	r3, r1
 800adae:	4313      	orrs	r3, r2
 800adb0:	d058      	beq.n	800ae64 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800adb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adb6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800adba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800adbe:	d033      	beq.n	800ae28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800adc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800adc4:	d82c      	bhi.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800adc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adca:	d02f      	beq.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800adcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800add0:	d826      	bhi.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800add2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800add6:	d02b      	beq.n	800ae30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800add8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800addc:	d820      	bhi.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800adde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ade2:	d012      	beq.n	800ae0a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800ade4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ade8:	d81a      	bhi.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800adea:	2b00      	cmp	r3, #0
 800adec:	d022      	beq.n	800ae34 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800adee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800adf2:	d115      	bne.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800adf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adf8:	3308      	adds	r3, #8
 800adfa:	2101      	movs	r1, #1
 800adfc:	4618      	mov	r0, r3
 800adfe:	f001 f98d 	bl	800c11c <RCCEx_PLL2_Config>
 800ae02:	4603      	mov	r3, r0
 800ae04:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ae08:	e015      	b.n	800ae36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ae0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae0e:	3328      	adds	r3, #40	; 0x28
 800ae10:	2101      	movs	r1, #1
 800ae12:	4618      	mov	r0, r3
 800ae14:	f001 fa34 	bl	800c280 <RCCEx_PLL3_Config>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ae1e:	e00a      	b.n	800ae36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ae20:	2301      	movs	r3, #1
 800ae22:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ae26:	e006      	b.n	800ae36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ae28:	bf00      	nop
 800ae2a:	e004      	b.n	800ae36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ae2c:	bf00      	nop
 800ae2e:	e002      	b.n	800ae36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ae30:	bf00      	nop
 800ae32:	e000      	b.n	800ae36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ae34:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae36:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d10e      	bne.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ae3e:	4b06      	ldr	r3, [pc, #24]	; (800ae58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ae40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae42:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800ae46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae4a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ae4e:	4a02      	ldr	r2, [pc, #8]	; (800ae58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ae50:	430b      	orrs	r3, r1
 800ae52:	6593      	str	r3, [r2, #88]	; 0x58
 800ae54:	e006      	b.n	800ae64 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800ae56:	bf00      	nop
 800ae58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae60:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ae64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae6c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800ae70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ae74:	2300      	movs	r3, #0
 800ae76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ae7a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800ae7e:	460b      	mov	r3, r1
 800ae80:	4313      	orrs	r3, r2
 800ae82:	d037      	beq.n	800aef4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800ae84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae8e:	d00e      	beq.n	800aeae <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800ae90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae94:	d816      	bhi.n	800aec4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d018      	beq.n	800aecc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800ae9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae9e:	d111      	bne.n	800aec4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aea0:	4bc4      	ldr	r3, [pc, #784]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aea4:	4ac3      	ldr	r2, [pc, #780]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aea6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aeaa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800aeac:	e00f      	b.n	800aece <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aeae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeb2:	3308      	adds	r3, #8
 800aeb4:	2101      	movs	r1, #1
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f001 f930 	bl	800c11c <RCCEx_PLL2_Config>
 800aebc:	4603      	mov	r3, r0
 800aebe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800aec2:	e004      	b.n	800aece <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aec4:	2301      	movs	r3, #1
 800aec6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aeca:	e000      	b.n	800aece <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800aecc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aece:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d10a      	bne.n	800aeec <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800aed6:	4bb7      	ldr	r3, [pc, #732]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aeda:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800aede:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aee4:	4ab3      	ldr	r2, [pc, #716]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aee6:	430b      	orrs	r3, r1
 800aee8:	6513      	str	r3, [r2, #80]	; 0x50
 800aeea:	e003      	b.n	800aef4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aef0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800aef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800af00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800af04:	2300      	movs	r3, #0
 800af06:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800af0a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800af0e:	460b      	mov	r3, r1
 800af10:	4313      	orrs	r3, r2
 800af12:	d039      	beq.n	800af88 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800af14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af1a:	2b03      	cmp	r3, #3
 800af1c:	d81c      	bhi.n	800af58 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800af1e:	a201      	add	r2, pc, #4	; (adr r2, 800af24 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800af20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af24:	0800af61 	.word	0x0800af61
 800af28:	0800af35 	.word	0x0800af35
 800af2c:	0800af43 	.word	0x0800af43
 800af30:	0800af61 	.word	0x0800af61
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af34:	4b9f      	ldr	r3, [pc, #636]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af38:	4a9e      	ldr	r2, [pc, #632]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800af40:	e00f      	b.n	800af62 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800af42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af46:	3308      	adds	r3, #8
 800af48:	2102      	movs	r1, #2
 800af4a:	4618      	mov	r0, r3
 800af4c:	f001 f8e6 	bl	800c11c <RCCEx_PLL2_Config>
 800af50:	4603      	mov	r3, r0
 800af52:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800af56:	e004      	b.n	800af62 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800af58:	2301      	movs	r3, #1
 800af5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800af5e:	e000      	b.n	800af62 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800af60:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af62:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af66:	2b00      	cmp	r3, #0
 800af68:	d10a      	bne.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800af6a:	4b92      	ldr	r3, [pc, #584]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af6e:	f023 0103 	bic.w	r1, r3, #3
 800af72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af78:	4a8e      	ldr	r2, [pc, #568]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af7a:	430b      	orrs	r3, r1
 800af7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800af7e:	e003      	b.n	800af88 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af80:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af84:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800af88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af90:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800af94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800af98:	2300      	movs	r3, #0
 800af9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800af9e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800afa2:	460b      	mov	r3, r1
 800afa4:	4313      	orrs	r3, r2
 800afa6:	f000 8099 	beq.w	800b0dc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800afaa:	4b83      	ldr	r3, [pc, #524]	; (800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	4a82      	ldr	r2, [pc, #520]	; (800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800afb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800afb4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800afb6:	f7fb f88f 	bl	80060d8 <HAL_GetTick>
 800afba:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800afbe:	e00b      	b.n	800afd8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800afc0:	f7fb f88a 	bl	80060d8 <HAL_GetTick>
 800afc4:	4602      	mov	r2, r0
 800afc6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800afca:	1ad3      	subs	r3, r2, r3
 800afcc:	2b64      	cmp	r3, #100	; 0x64
 800afce:	d903      	bls.n	800afd8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800afd0:	2303      	movs	r3, #3
 800afd2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800afd6:	e005      	b.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800afd8:	4b77      	ldr	r3, [pc, #476]	; (800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d0ed      	beq.n	800afc0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800afe4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d173      	bne.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800afec:	4b71      	ldr	r3, [pc, #452]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800aff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aff4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aff8:	4053      	eors	r3, r2
 800affa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800affe:	2b00      	cmp	r3, #0
 800b000:	d015      	beq.n	800b02e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b002:	4b6c      	ldr	r3, [pc, #432]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b00a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b00e:	4b69      	ldr	r3, [pc, #420]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b012:	4a68      	ldr	r2, [pc, #416]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b018:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b01a:	4b66      	ldr	r3, [pc, #408]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b01c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b01e:	4a65      	ldr	r2, [pc, #404]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b020:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b024:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b026:	4a63      	ldr	r2, [pc, #396]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b028:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b02c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b02e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b032:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b03a:	d118      	bne.n	800b06e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b03c:	f7fb f84c 	bl	80060d8 <HAL_GetTick>
 800b040:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b044:	e00d      	b.n	800b062 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b046:	f7fb f847 	bl	80060d8 <HAL_GetTick>
 800b04a:	4602      	mov	r2, r0
 800b04c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b050:	1ad2      	subs	r2, r2, r3
 800b052:	f241 3388 	movw	r3, #5000	; 0x1388
 800b056:	429a      	cmp	r2, r3
 800b058:	d903      	bls.n	800b062 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800b05a:	2303      	movs	r3, #3
 800b05c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800b060:	e005      	b.n	800b06e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b062:	4b54      	ldr	r3, [pc, #336]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b066:	f003 0302 	and.w	r3, r3, #2
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d0eb      	beq.n	800b046 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800b06e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b072:	2b00      	cmp	r3, #0
 800b074:	d129      	bne.n	800b0ca <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b076:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b07a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b07e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b082:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b086:	d10e      	bne.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800b088:	4b4a      	ldr	r3, [pc, #296]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b08a:	691b      	ldr	r3, [r3, #16]
 800b08c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b090:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b094:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b098:	091a      	lsrs	r2, r3, #4
 800b09a:	4b48      	ldr	r3, [pc, #288]	; (800b1bc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800b09c:	4013      	ands	r3, r2
 800b09e:	4a45      	ldr	r2, [pc, #276]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0a0:	430b      	orrs	r3, r1
 800b0a2:	6113      	str	r3, [r2, #16]
 800b0a4:	e005      	b.n	800b0b2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800b0a6:	4b43      	ldr	r3, [pc, #268]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0a8:	691b      	ldr	r3, [r3, #16]
 800b0aa:	4a42      	ldr	r2, [pc, #264]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0ac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b0b0:	6113      	str	r3, [r2, #16]
 800b0b2:	4b40      	ldr	r3, [pc, #256]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0b4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b0b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b0be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b0c2:	4a3c      	ldr	r2, [pc, #240]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0c4:	430b      	orrs	r3, r1
 800b0c6:	6713      	str	r3, [r2, #112]	; 0x70
 800b0c8:	e008      	b.n	800b0dc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b0ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0ce:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800b0d2:	e003      	b.n	800b0dc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0d8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b0dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e4:	f002 0301 	and.w	r3, r2, #1
 800b0e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b0f2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b0f6:	460b      	mov	r3, r1
 800b0f8:	4313      	orrs	r3, r2
 800b0fa:	f000 808f 	beq.w	800b21c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b0fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b102:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b104:	2b28      	cmp	r3, #40	; 0x28
 800b106:	d871      	bhi.n	800b1ec <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800b108:	a201      	add	r2, pc, #4	; (adr r2, 800b110 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800b10a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b10e:	bf00      	nop
 800b110:	0800b1f5 	.word	0x0800b1f5
 800b114:	0800b1ed 	.word	0x0800b1ed
 800b118:	0800b1ed 	.word	0x0800b1ed
 800b11c:	0800b1ed 	.word	0x0800b1ed
 800b120:	0800b1ed 	.word	0x0800b1ed
 800b124:	0800b1ed 	.word	0x0800b1ed
 800b128:	0800b1ed 	.word	0x0800b1ed
 800b12c:	0800b1ed 	.word	0x0800b1ed
 800b130:	0800b1c1 	.word	0x0800b1c1
 800b134:	0800b1ed 	.word	0x0800b1ed
 800b138:	0800b1ed 	.word	0x0800b1ed
 800b13c:	0800b1ed 	.word	0x0800b1ed
 800b140:	0800b1ed 	.word	0x0800b1ed
 800b144:	0800b1ed 	.word	0x0800b1ed
 800b148:	0800b1ed 	.word	0x0800b1ed
 800b14c:	0800b1ed 	.word	0x0800b1ed
 800b150:	0800b1d7 	.word	0x0800b1d7
 800b154:	0800b1ed 	.word	0x0800b1ed
 800b158:	0800b1ed 	.word	0x0800b1ed
 800b15c:	0800b1ed 	.word	0x0800b1ed
 800b160:	0800b1ed 	.word	0x0800b1ed
 800b164:	0800b1ed 	.word	0x0800b1ed
 800b168:	0800b1ed 	.word	0x0800b1ed
 800b16c:	0800b1ed 	.word	0x0800b1ed
 800b170:	0800b1f5 	.word	0x0800b1f5
 800b174:	0800b1ed 	.word	0x0800b1ed
 800b178:	0800b1ed 	.word	0x0800b1ed
 800b17c:	0800b1ed 	.word	0x0800b1ed
 800b180:	0800b1ed 	.word	0x0800b1ed
 800b184:	0800b1ed 	.word	0x0800b1ed
 800b188:	0800b1ed 	.word	0x0800b1ed
 800b18c:	0800b1ed 	.word	0x0800b1ed
 800b190:	0800b1f5 	.word	0x0800b1f5
 800b194:	0800b1ed 	.word	0x0800b1ed
 800b198:	0800b1ed 	.word	0x0800b1ed
 800b19c:	0800b1ed 	.word	0x0800b1ed
 800b1a0:	0800b1ed 	.word	0x0800b1ed
 800b1a4:	0800b1ed 	.word	0x0800b1ed
 800b1a8:	0800b1ed 	.word	0x0800b1ed
 800b1ac:	0800b1ed 	.word	0x0800b1ed
 800b1b0:	0800b1f5 	.word	0x0800b1f5
 800b1b4:	58024400 	.word	0x58024400
 800b1b8:	58024800 	.word	0x58024800
 800b1bc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b1c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1c4:	3308      	adds	r3, #8
 800b1c6:	2101      	movs	r1, #1
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f000 ffa7 	bl	800c11c <RCCEx_PLL2_Config>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b1d4:	e00f      	b.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b1d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1da:	3328      	adds	r3, #40	; 0x28
 800b1dc:	2101      	movs	r1, #1
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f001 f84e 	bl	800c280 <RCCEx_PLL3_Config>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b1ea:	e004      	b.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b1f2:	e000      	b.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800b1f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d10a      	bne.n	800b214 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b1fe:	4bbf      	ldr	r3, [pc, #764]	; (800b4fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b202:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b206:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b20a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b20c:	4abb      	ldr	r2, [pc, #748]	; (800b4fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b20e:	430b      	orrs	r3, r1
 800b210:	6553      	str	r3, [r2, #84]	; 0x54
 800b212:	e003      	b.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b214:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b218:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b21c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b224:	f002 0302 	and.w	r3, r2, #2
 800b228:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b22c:	2300      	movs	r3, #0
 800b22e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b232:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b236:	460b      	mov	r3, r1
 800b238:	4313      	orrs	r3, r2
 800b23a:	d041      	beq.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b23c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b242:	2b05      	cmp	r3, #5
 800b244:	d824      	bhi.n	800b290 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800b246:	a201      	add	r2, pc, #4	; (adr r2, 800b24c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800b248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b24c:	0800b299 	.word	0x0800b299
 800b250:	0800b265 	.word	0x0800b265
 800b254:	0800b27b 	.word	0x0800b27b
 800b258:	0800b299 	.word	0x0800b299
 800b25c:	0800b299 	.word	0x0800b299
 800b260:	0800b299 	.word	0x0800b299
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b264:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b268:	3308      	adds	r3, #8
 800b26a:	2101      	movs	r1, #1
 800b26c:	4618      	mov	r0, r3
 800b26e:	f000 ff55 	bl	800c11c <RCCEx_PLL2_Config>
 800b272:	4603      	mov	r3, r0
 800b274:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b278:	e00f      	b.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b27a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b27e:	3328      	adds	r3, #40	; 0x28
 800b280:	2101      	movs	r1, #1
 800b282:	4618      	mov	r0, r3
 800b284:	f000 fffc 	bl	800c280 <RCCEx_PLL3_Config>
 800b288:	4603      	mov	r3, r0
 800b28a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b28e:	e004      	b.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b290:	2301      	movs	r3, #1
 800b292:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b296:	e000      	b.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800b298:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b29a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d10a      	bne.n	800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b2a2:	4b96      	ldr	r3, [pc, #600]	; (800b4fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b2a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2a6:	f023 0107 	bic.w	r1, r3, #7
 800b2aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2b0:	4a92      	ldr	r2, [pc, #584]	; (800b4fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b2b2:	430b      	orrs	r3, r1
 800b2b4:	6553      	str	r3, [r2, #84]	; 0x54
 800b2b6:	e003      	b.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2bc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b2c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c8:	f002 0304 	and.w	r3, r2, #4
 800b2cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b2d6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b2da:	460b      	mov	r3, r1
 800b2dc:	4313      	orrs	r3, r2
 800b2de:	d044      	beq.n	800b36a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b2e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2e8:	2b05      	cmp	r3, #5
 800b2ea:	d825      	bhi.n	800b338 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800b2ec:	a201      	add	r2, pc, #4	; (adr r2, 800b2f4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800b2ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2f2:	bf00      	nop
 800b2f4:	0800b341 	.word	0x0800b341
 800b2f8:	0800b30d 	.word	0x0800b30d
 800b2fc:	0800b323 	.word	0x0800b323
 800b300:	0800b341 	.word	0x0800b341
 800b304:	0800b341 	.word	0x0800b341
 800b308:	0800b341 	.word	0x0800b341
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b30c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b310:	3308      	adds	r3, #8
 800b312:	2101      	movs	r1, #1
 800b314:	4618      	mov	r0, r3
 800b316:	f000 ff01 	bl	800c11c <RCCEx_PLL2_Config>
 800b31a:	4603      	mov	r3, r0
 800b31c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b320:	e00f      	b.n	800b342 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b322:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b326:	3328      	adds	r3, #40	; 0x28
 800b328:	2101      	movs	r1, #1
 800b32a:	4618      	mov	r0, r3
 800b32c:	f000 ffa8 	bl	800c280 <RCCEx_PLL3_Config>
 800b330:	4603      	mov	r3, r0
 800b332:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b336:	e004      	b.n	800b342 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b338:	2301      	movs	r3, #1
 800b33a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b33e:	e000      	b.n	800b342 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800b340:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b342:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b346:	2b00      	cmp	r3, #0
 800b348:	d10b      	bne.n	800b362 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b34a:	4b6c      	ldr	r3, [pc, #432]	; (800b4fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b34c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b34e:	f023 0107 	bic.w	r1, r3, #7
 800b352:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b35a:	4a68      	ldr	r2, [pc, #416]	; (800b4fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b35c:	430b      	orrs	r3, r1
 800b35e:	6593      	str	r3, [r2, #88]	; 0x58
 800b360:	e003      	b.n	800b36a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b362:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b366:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b36a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b372:	f002 0320 	and.w	r3, r2, #32
 800b376:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b37a:	2300      	movs	r3, #0
 800b37c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b380:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b384:	460b      	mov	r3, r1
 800b386:	4313      	orrs	r3, r2
 800b388:	d055      	beq.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b38a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b38e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b392:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b396:	d033      	beq.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800b398:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b39c:	d82c      	bhi.n	800b3f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b39e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3a2:	d02f      	beq.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b3a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3a8:	d826      	bhi.n	800b3f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b3aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b3ae:	d02b      	beq.n	800b408 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b3b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b3b4:	d820      	bhi.n	800b3f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b3b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3ba:	d012      	beq.n	800b3e2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800b3bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3c0:	d81a      	bhi.n	800b3f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d022      	beq.n	800b40c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b3c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b3ca:	d115      	bne.n	800b3f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b3cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3d0:	3308      	adds	r3, #8
 800b3d2:	2100      	movs	r1, #0
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f000 fea1 	bl	800c11c <RCCEx_PLL2_Config>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b3e0:	e015      	b.n	800b40e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b3e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3e6:	3328      	adds	r3, #40	; 0x28
 800b3e8:	2102      	movs	r1, #2
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f000 ff48 	bl	800c280 <RCCEx_PLL3_Config>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b3f6:	e00a      	b.n	800b40e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b3fe:	e006      	b.n	800b40e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b400:	bf00      	nop
 800b402:	e004      	b.n	800b40e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b404:	bf00      	nop
 800b406:	e002      	b.n	800b40e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b408:	bf00      	nop
 800b40a:	e000      	b.n	800b40e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b40c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b40e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b412:	2b00      	cmp	r3, #0
 800b414:	d10b      	bne.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b416:	4b39      	ldr	r3, [pc, #228]	; (800b4fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b41a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b41e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b422:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b426:	4a35      	ldr	r2, [pc, #212]	; (800b4fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b428:	430b      	orrs	r3, r1
 800b42a:	6553      	str	r3, [r2, #84]	; 0x54
 800b42c:	e003      	b.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b42e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b432:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b436:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b43e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b442:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b446:	2300      	movs	r3, #0
 800b448:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b44c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b450:	460b      	mov	r3, r1
 800b452:	4313      	orrs	r3, r2
 800b454:	d058      	beq.n	800b508 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b456:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b45a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b45e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b462:	d033      	beq.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800b464:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b468:	d82c      	bhi.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b46a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b46e:	d02f      	beq.n	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b474:	d826      	bhi.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b476:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b47a:	d02b      	beq.n	800b4d4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b47c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b480:	d820      	bhi.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b482:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b486:	d012      	beq.n	800b4ae <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800b488:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b48c:	d81a      	bhi.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d022      	beq.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b496:	d115      	bne.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b498:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b49c:	3308      	adds	r3, #8
 800b49e:	2100      	movs	r1, #0
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f000 fe3b 	bl	800c11c <RCCEx_PLL2_Config>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b4ac:	e015      	b.n	800b4da <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b4ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4b2:	3328      	adds	r3, #40	; 0x28
 800b4b4:	2102      	movs	r1, #2
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f000 fee2 	bl	800c280 <RCCEx_PLL3_Config>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b4c2:	e00a      	b.n	800b4da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b4ca:	e006      	b.n	800b4da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b4cc:	bf00      	nop
 800b4ce:	e004      	b.n	800b4da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b4d0:	bf00      	nop
 800b4d2:	e002      	b.n	800b4da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b4d4:	bf00      	nop
 800b4d6:	e000      	b.n	800b4da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b4d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4da:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d10e      	bne.n	800b500 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b4e2:	4b06      	ldr	r3, [pc, #24]	; (800b4fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b4e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4e6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b4ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b4f2:	4a02      	ldr	r2, [pc, #8]	; (800b4fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b4f4:	430b      	orrs	r3, r1
 800b4f6:	6593      	str	r3, [r2, #88]	; 0x58
 800b4f8:	e006      	b.n	800b508 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800b4fa:	bf00      	nop
 800b4fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b500:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b504:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b508:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b510:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b514:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b518:	2300      	movs	r3, #0
 800b51a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b51e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b522:	460b      	mov	r3, r1
 800b524:	4313      	orrs	r3, r2
 800b526:	d055      	beq.n	800b5d4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b528:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b52c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b530:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b534:	d033      	beq.n	800b59e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800b536:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b53a:	d82c      	bhi.n	800b596 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b53c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b540:	d02f      	beq.n	800b5a2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b542:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b546:	d826      	bhi.n	800b596 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b548:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b54c:	d02b      	beq.n	800b5a6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b54e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b552:	d820      	bhi.n	800b596 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b554:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b558:	d012      	beq.n	800b580 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800b55a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b55e:	d81a      	bhi.n	800b596 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b560:	2b00      	cmp	r3, #0
 800b562:	d022      	beq.n	800b5aa <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b564:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b568:	d115      	bne.n	800b596 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b56a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b56e:	3308      	adds	r3, #8
 800b570:	2100      	movs	r1, #0
 800b572:	4618      	mov	r0, r3
 800b574:	f000 fdd2 	bl	800c11c <RCCEx_PLL2_Config>
 800b578:	4603      	mov	r3, r0
 800b57a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b57e:	e015      	b.n	800b5ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b580:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b584:	3328      	adds	r3, #40	; 0x28
 800b586:	2102      	movs	r1, #2
 800b588:	4618      	mov	r0, r3
 800b58a:	f000 fe79 	bl	800c280 <RCCEx_PLL3_Config>
 800b58e:	4603      	mov	r3, r0
 800b590:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b594:	e00a      	b.n	800b5ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b596:	2301      	movs	r3, #1
 800b598:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b59c:	e006      	b.n	800b5ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b59e:	bf00      	nop
 800b5a0:	e004      	b.n	800b5ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b5a2:	bf00      	nop
 800b5a4:	e002      	b.n	800b5ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b5a6:	bf00      	nop
 800b5a8:	e000      	b.n	800b5ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b5aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d10b      	bne.n	800b5cc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b5b4:	4ba0      	ldr	r3, [pc, #640]	; (800b838 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b5b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5b8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b5bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b5c4:	4a9c      	ldr	r2, [pc, #624]	; (800b838 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b5c6:	430b      	orrs	r3, r1
 800b5c8:	6593      	str	r3, [r2, #88]	; 0x58
 800b5ca:	e003      	b.n	800b5d4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5d0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b5d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5dc:	f002 0308 	and.w	r3, r2, #8
 800b5e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b5ea:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b5ee:	460b      	mov	r3, r1
 800b5f0:	4313      	orrs	r3, r2
 800b5f2:	d01e      	beq.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800b5f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b600:	d10c      	bne.n	800b61c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b602:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b606:	3328      	adds	r3, #40	; 0x28
 800b608:	2102      	movs	r1, #2
 800b60a:	4618      	mov	r0, r3
 800b60c:	f000 fe38 	bl	800c280 <RCCEx_PLL3_Config>
 800b610:	4603      	mov	r3, r0
 800b612:	2b00      	cmp	r3, #0
 800b614:	d002      	beq.n	800b61c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800b616:	2301      	movs	r3, #1
 800b618:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b61c:	4b86      	ldr	r3, [pc, #536]	; (800b838 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b61e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b620:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b628:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b62c:	4a82      	ldr	r2, [pc, #520]	; (800b838 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b62e:	430b      	orrs	r3, r1
 800b630:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b632:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63a:	f002 0310 	and.w	r3, r2, #16
 800b63e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b642:	2300      	movs	r3, #0
 800b644:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b648:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b64c:	460b      	mov	r3, r1
 800b64e:	4313      	orrs	r3, r2
 800b650:	d01e      	beq.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b652:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b656:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b65a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b65e:	d10c      	bne.n	800b67a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b660:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b664:	3328      	adds	r3, #40	; 0x28
 800b666:	2102      	movs	r1, #2
 800b668:	4618      	mov	r0, r3
 800b66a:	f000 fe09 	bl	800c280 <RCCEx_PLL3_Config>
 800b66e:	4603      	mov	r3, r0
 800b670:	2b00      	cmp	r3, #0
 800b672:	d002      	beq.n	800b67a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800b674:	2301      	movs	r3, #1
 800b676:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b67a:	4b6f      	ldr	r3, [pc, #444]	; (800b838 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b67c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b67e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b682:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b686:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b68a:	4a6b      	ldr	r2, [pc, #428]	; (800b838 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b68c:	430b      	orrs	r3, r1
 800b68e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b698:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b69c:	67bb      	str	r3, [r7, #120]	; 0x78
 800b69e:	2300      	movs	r3, #0
 800b6a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b6a2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b6a6:	460b      	mov	r3, r1
 800b6a8:	4313      	orrs	r3, r2
 800b6aa:	d03e      	beq.n	800b72a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b6ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b6b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b6b8:	d022      	beq.n	800b700 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b6ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b6be:	d81b      	bhi.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d003      	beq.n	800b6cc <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800b6c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6c8:	d00b      	beq.n	800b6e2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800b6ca:	e015      	b.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b6cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6d0:	3308      	adds	r3, #8
 800b6d2:	2100      	movs	r1, #0
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f000 fd21 	bl	800c11c <RCCEx_PLL2_Config>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b6e0:	e00f      	b.n	800b702 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b6e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6e6:	3328      	adds	r3, #40	; 0x28
 800b6e8:	2102      	movs	r1, #2
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f000 fdc8 	bl	800c280 <RCCEx_PLL3_Config>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b6f6:	e004      	b.n	800b702 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b6fe:	e000      	b.n	800b702 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800b700:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b702:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b706:	2b00      	cmp	r3, #0
 800b708:	d10b      	bne.n	800b722 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b70a:	4b4b      	ldr	r3, [pc, #300]	; (800b838 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b70c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b70e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b712:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b716:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b71a:	4a47      	ldr	r2, [pc, #284]	; (800b838 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b71c:	430b      	orrs	r3, r1
 800b71e:	6593      	str	r3, [r2, #88]	; 0x58
 800b720:	e003      	b.n	800b72a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b722:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b726:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b72a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b732:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b736:	673b      	str	r3, [r7, #112]	; 0x70
 800b738:	2300      	movs	r3, #0
 800b73a:	677b      	str	r3, [r7, #116]	; 0x74
 800b73c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b740:	460b      	mov	r3, r1
 800b742:	4313      	orrs	r3, r2
 800b744:	d03b      	beq.n	800b7be <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b746:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b74a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b74e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b752:	d01f      	beq.n	800b794 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b754:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b758:	d818      	bhi.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800b75a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b75e:	d003      	beq.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800b760:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b764:	d007      	beq.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800b766:	e011      	b.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b768:	4b33      	ldr	r3, [pc, #204]	; (800b838 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b76a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b76c:	4a32      	ldr	r2, [pc, #200]	; (800b838 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b76e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b772:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b774:	e00f      	b.n	800b796 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b776:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b77a:	3328      	adds	r3, #40	; 0x28
 800b77c:	2101      	movs	r1, #1
 800b77e:	4618      	mov	r0, r3
 800b780:	f000 fd7e 	bl	800c280 <RCCEx_PLL3_Config>
 800b784:	4603      	mov	r3, r0
 800b786:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800b78a:	e004      	b.n	800b796 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b78c:	2301      	movs	r3, #1
 800b78e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b792:	e000      	b.n	800b796 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800b794:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b796:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d10b      	bne.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b79e:	4b26      	ldr	r3, [pc, #152]	; (800b838 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b7a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7a2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b7a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7ae:	4a22      	ldr	r2, [pc, #136]	; (800b838 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b7b0:	430b      	orrs	r3, r1
 800b7b2:	6553      	str	r3, [r2, #84]	; 0x54
 800b7b4:	e003      	b.n	800b7be <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7b6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7ba:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b7be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b7ca:	66bb      	str	r3, [r7, #104]	; 0x68
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b7d0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	4313      	orrs	r3, r2
 800b7d8:	d034      	beq.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b7da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d003      	beq.n	800b7ec <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800b7e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7e8:	d007      	beq.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800b7ea:	e011      	b.n	800b810 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7ec:	4b12      	ldr	r3, [pc, #72]	; (800b838 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f0:	4a11      	ldr	r2, [pc, #68]	; (800b838 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b7f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b7f8:	e00e      	b.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b7fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7fe:	3308      	adds	r3, #8
 800b800:	2102      	movs	r1, #2
 800b802:	4618      	mov	r0, r3
 800b804:	f000 fc8a 	bl	800c11c <RCCEx_PLL2_Config>
 800b808:	4603      	mov	r3, r0
 800b80a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b80e:	e003      	b.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800b810:	2301      	movs	r3, #1
 800b812:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b816:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b818:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d10d      	bne.n	800b83c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b820:	4b05      	ldr	r3, [pc, #20]	; (800b838 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b824:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b82c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b82e:	4a02      	ldr	r2, [pc, #8]	; (800b838 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b830:	430b      	orrs	r3, r1
 800b832:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b834:	e006      	b.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800b836:	bf00      	nop
 800b838:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b83c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b840:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b844:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800b850:	663b      	str	r3, [r7, #96]	; 0x60
 800b852:	2300      	movs	r3, #0
 800b854:	667b      	str	r3, [r7, #100]	; 0x64
 800b856:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b85a:	460b      	mov	r3, r1
 800b85c:	4313      	orrs	r3, r2
 800b85e:	d00c      	beq.n	800b87a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b860:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b864:	3328      	adds	r3, #40	; 0x28
 800b866:	2102      	movs	r1, #2
 800b868:	4618      	mov	r0, r3
 800b86a:	f000 fd09 	bl	800c280 <RCCEx_PLL3_Config>
 800b86e:	4603      	mov	r3, r0
 800b870:	2b00      	cmp	r3, #0
 800b872:	d002      	beq.n	800b87a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800b874:	2301      	movs	r3, #1
 800b876:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b87a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b882:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b886:	65bb      	str	r3, [r7, #88]	; 0x58
 800b888:	2300      	movs	r3, #0
 800b88a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b88c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800b890:	460b      	mov	r3, r1
 800b892:	4313      	orrs	r3, r2
 800b894:	d036      	beq.n	800b904 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b896:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b89a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b89c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b8a0:	d018      	beq.n	800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800b8a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b8a6:	d811      	bhi.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b8a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8ac:	d014      	beq.n	800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800b8ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8b2:	d80b      	bhi.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d011      	beq.n	800b8dc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800b8b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8bc:	d106      	bne.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8be:	4bb7      	ldr	r3, [pc, #732]	; (800bb9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8c2:	4ab6      	ldr	r2, [pc, #728]	; (800bb9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b8c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b8ca:	e008      	b.n	800b8de <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b8d2:	e004      	b.n	800b8de <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b8d4:	bf00      	nop
 800b8d6:	e002      	b.n	800b8de <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b8d8:	bf00      	nop
 800b8da:	e000      	b.n	800b8de <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b8dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d10a      	bne.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b8e6:	4bad      	ldr	r3, [pc, #692]	; (800bb9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b8ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8f4:	4aa9      	ldr	r2, [pc, #676]	; (800bb9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8f6:	430b      	orrs	r3, r1
 800b8f8:	6553      	str	r3, [r2, #84]	; 0x54
 800b8fa:	e003      	b.n	800b904 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b900:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b904:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b90c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800b910:	653b      	str	r3, [r7, #80]	; 0x50
 800b912:	2300      	movs	r3, #0
 800b914:	657b      	str	r3, [r7, #84]	; 0x54
 800b916:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800b91a:	460b      	mov	r3, r1
 800b91c:	4313      	orrs	r3, r2
 800b91e:	d009      	beq.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b920:	4b9e      	ldr	r3, [pc, #632]	; (800bb9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b924:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b928:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b92c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b92e:	4a9b      	ldr	r2, [pc, #620]	; (800bb9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b930:	430b      	orrs	r3, r1
 800b932:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b93c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800b940:	64bb      	str	r3, [r7, #72]	; 0x48
 800b942:	2300      	movs	r3, #0
 800b944:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b946:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800b94a:	460b      	mov	r3, r1
 800b94c:	4313      	orrs	r3, r2
 800b94e:	d009      	beq.n	800b964 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b950:	4b92      	ldr	r3, [pc, #584]	; (800bb9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b954:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800b958:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b95c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b95e:	4a8f      	ldr	r2, [pc, #572]	; (800bb9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b960:	430b      	orrs	r3, r1
 800b962:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b964:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b96c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800b970:	643b      	str	r3, [r7, #64]	; 0x40
 800b972:	2300      	movs	r3, #0
 800b974:	647b      	str	r3, [r7, #68]	; 0x44
 800b976:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b97a:	460b      	mov	r3, r1
 800b97c:	4313      	orrs	r3, r2
 800b97e:	d00e      	beq.n	800b99e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b980:	4b86      	ldr	r3, [pc, #536]	; (800bb9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b982:	691b      	ldr	r3, [r3, #16]
 800b984:	4a85      	ldr	r2, [pc, #532]	; (800bb9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b986:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b98a:	6113      	str	r3, [r2, #16]
 800b98c:	4b83      	ldr	r3, [pc, #524]	; (800bb9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b98e:	6919      	ldr	r1, [r3, #16]
 800b990:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b994:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b998:	4a80      	ldr	r2, [pc, #512]	; (800bb9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b99a:	430b      	orrs	r3, r1
 800b99c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b99e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a6:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800b9aa:	63bb      	str	r3, [r7, #56]	; 0x38
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9b0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b9b4:	460b      	mov	r3, r1
 800b9b6:	4313      	orrs	r3, r2
 800b9b8:	d009      	beq.n	800b9ce <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b9ba:	4b78      	ldr	r3, [pc, #480]	; (800bb9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9be:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b9c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9c8:	4a74      	ldr	r2, [pc, #464]	; (800bb9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9ca:	430b      	orrs	r3, r1
 800b9cc:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b9ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800b9da:	633b      	str	r3, [r7, #48]	; 0x30
 800b9dc:	2300      	movs	r3, #0
 800b9de:	637b      	str	r3, [r7, #52]	; 0x34
 800b9e0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800b9e4:	460b      	mov	r3, r1
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	d00a      	beq.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b9ea:	4b6c      	ldr	r3, [pc, #432]	; (800bb9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9ee:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800b9f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9fa:	4a68      	ldr	r2, [pc, #416]	; (800bb9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9fc:	430b      	orrs	r3, r1
 800b9fe:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ba00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba08:	2100      	movs	r1, #0
 800ba0a:	62b9      	str	r1, [r7, #40]	; 0x28
 800ba0c:	f003 0301 	and.w	r3, r3, #1
 800ba10:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba12:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800ba16:	460b      	mov	r3, r1
 800ba18:	4313      	orrs	r3, r2
 800ba1a:	d011      	beq.n	800ba40 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba20:	3308      	adds	r3, #8
 800ba22:	2100      	movs	r1, #0
 800ba24:	4618      	mov	r0, r3
 800ba26:	f000 fb79 	bl	800c11c <RCCEx_PLL2_Config>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ba30:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d003      	beq.n	800ba40 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba38:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba3c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ba40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba48:	2100      	movs	r1, #0
 800ba4a:	6239      	str	r1, [r7, #32]
 800ba4c:	f003 0302 	and.w	r3, r3, #2
 800ba50:	627b      	str	r3, [r7, #36]	; 0x24
 800ba52:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ba56:	460b      	mov	r3, r1
 800ba58:	4313      	orrs	r3, r2
 800ba5a:	d011      	beq.n	800ba80 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba60:	3308      	adds	r3, #8
 800ba62:	2101      	movs	r1, #1
 800ba64:	4618      	mov	r0, r3
 800ba66:	f000 fb59 	bl	800c11c <RCCEx_PLL2_Config>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ba70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d003      	beq.n	800ba80 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba78:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba7c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ba80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba88:	2100      	movs	r1, #0
 800ba8a:	61b9      	str	r1, [r7, #24]
 800ba8c:	f003 0304 	and.w	r3, r3, #4
 800ba90:	61fb      	str	r3, [r7, #28]
 800ba92:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ba96:	460b      	mov	r3, r1
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	d011      	beq.n	800bac0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ba9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baa0:	3308      	adds	r3, #8
 800baa2:	2102      	movs	r1, #2
 800baa4:	4618      	mov	r0, r3
 800baa6:	f000 fb39 	bl	800c11c <RCCEx_PLL2_Config>
 800baaa:	4603      	mov	r3, r0
 800baac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bab0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d003      	beq.n	800bac0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bab8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800babc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac8:	2100      	movs	r1, #0
 800baca:	6139      	str	r1, [r7, #16]
 800bacc:	f003 0308 	and.w	r3, r3, #8
 800bad0:	617b      	str	r3, [r7, #20]
 800bad2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bad6:	460b      	mov	r3, r1
 800bad8:	4313      	orrs	r3, r2
 800bada:	d011      	beq.n	800bb00 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800badc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bae0:	3328      	adds	r3, #40	; 0x28
 800bae2:	2100      	movs	r1, #0
 800bae4:	4618      	mov	r0, r3
 800bae6:	f000 fbcb 	bl	800c280 <RCCEx_PLL3_Config>
 800baea:	4603      	mov	r3, r0
 800baec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800baf0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d003      	beq.n	800bb00 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baf8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bafc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bb00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb08:	2100      	movs	r1, #0
 800bb0a:	60b9      	str	r1, [r7, #8]
 800bb0c:	f003 0310 	and.w	r3, r3, #16
 800bb10:	60fb      	str	r3, [r7, #12]
 800bb12:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bb16:	460b      	mov	r3, r1
 800bb18:	4313      	orrs	r3, r2
 800bb1a:	d011      	beq.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb20:	3328      	adds	r3, #40	; 0x28
 800bb22:	2101      	movs	r1, #1
 800bb24:	4618      	mov	r0, r3
 800bb26:	f000 fbab 	bl	800c280 <RCCEx_PLL3_Config>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bb30:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d003      	beq.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb38:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb3c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bb40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb48:	2100      	movs	r1, #0
 800bb4a:	6039      	str	r1, [r7, #0]
 800bb4c:	f003 0320 	and.w	r3, r3, #32
 800bb50:	607b      	str	r3, [r7, #4]
 800bb52:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bb56:	460b      	mov	r3, r1
 800bb58:	4313      	orrs	r3, r2
 800bb5a:	d011      	beq.n	800bb80 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bb5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb60:	3328      	adds	r3, #40	; 0x28
 800bb62:	2102      	movs	r1, #2
 800bb64:	4618      	mov	r0, r3
 800bb66:	f000 fb8b 	bl	800c280 <RCCEx_PLL3_Config>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bb70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d003      	beq.n	800bb80 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb78:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb7c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800bb80:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d101      	bne.n	800bb8c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	e000      	b.n	800bb8e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800bb8c:	2301      	movs	r3, #1
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800bb94:	46bd      	mov	sp, r7
 800bb96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bb9a:	bf00      	nop
 800bb9c:	58024400 	.word	0x58024400

0800bba0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bba4:	f7fe fe00 	bl	800a7a8 <HAL_RCC_GetHCLKFreq>
 800bba8:	4602      	mov	r2, r0
 800bbaa:	4b06      	ldr	r3, [pc, #24]	; (800bbc4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bbac:	6a1b      	ldr	r3, [r3, #32]
 800bbae:	091b      	lsrs	r3, r3, #4
 800bbb0:	f003 0307 	and.w	r3, r3, #7
 800bbb4:	4904      	ldr	r1, [pc, #16]	; (800bbc8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bbb6:	5ccb      	ldrb	r3, [r1, r3]
 800bbb8:	f003 031f 	and.w	r3, r3, #31
 800bbbc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	bd80      	pop	{r7, pc}
 800bbc4:	58024400 	.word	0x58024400
 800bbc8:	08010734 	.word	0x08010734

0800bbcc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b089      	sub	sp, #36	; 0x24
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bbd4:	4ba1      	ldr	r3, [pc, #644]	; (800be5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbd8:	f003 0303 	and.w	r3, r3, #3
 800bbdc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800bbde:	4b9f      	ldr	r3, [pc, #636]	; (800be5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbe2:	0b1b      	lsrs	r3, r3, #12
 800bbe4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bbe8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bbea:	4b9c      	ldr	r3, [pc, #624]	; (800be5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbee:	091b      	lsrs	r3, r3, #4
 800bbf0:	f003 0301 	and.w	r3, r3, #1
 800bbf4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800bbf6:	4b99      	ldr	r3, [pc, #612]	; (800be5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbfa:	08db      	lsrs	r3, r3, #3
 800bbfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bc00:	693a      	ldr	r2, [r7, #16]
 800bc02:	fb02 f303 	mul.w	r3, r2, r3
 800bc06:	ee07 3a90 	vmov	s15, r3
 800bc0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc0e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	f000 8111 	beq.w	800be3c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bc1a:	69bb      	ldr	r3, [r7, #24]
 800bc1c:	2b02      	cmp	r3, #2
 800bc1e:	f000 8083 	beq.w	800bd28 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bc22:	69bb      	ldr	r3, [r7, #24]
 800bc24:	2b02      	cmp	r3, #2
 800bc26:	f200 80a1 	bhi.w	800bd6c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bc2a:	69bb      	ldr	r3, [r7, #24]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d003      	beq.n	800bc38 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bc30:	69bb      	ldr	r3, [r7, #24]
 800bc32:	2b01      	cmp	r3, #1
 800bc34:	d056      	beq.n	800bce4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bc36:	e099      	b.n	800bd6c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc38:	4b88      	ldr	r3, [pc, #544]	; (800be5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	f003 0320 	and.w	r3, r3, #32
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d02d      	beq.n	800bca0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc44:	4b85      	ldr	r3, [pc, #532]	; (800be5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	08db      	lsrs	r3, r3, #3
 800bc4a:	f003 0303 	and.w	r3, r3, #3
 800bc4e:	4a84      	ldr	r2, [pc, #528]	; (800be60 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bc50:	fa22 f303 	lsr.w	r3, r2, r3
 800bc54:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	ee07 3a90 	vmov	s15, r3
 800bc5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	ee07 3a90 	vmov	s15, r3
 800bc66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc6e:	4b7b      	ldr	r3, [pc, #492]	; (800be5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc76:	ee07 3a90 	vmov	s15, r3
 800bc7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc82:	eddf 5a78 	vldr	s11, [pc, #480]	; 800be64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc9a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bc9e:	e087      	b.n	800bdb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bca0:	697b      	ldr	r3, [r7, #20]
 800bca2:	ee07 3a90 	vmov	s15, r3
 800bca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcaa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800be68 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bcae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcb2:	4b6a      	ldr	r3, [pc, #424]	; (800be5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcba:	ee07 3a90 	vmov	s15, r3
 800bcbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcc2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcc6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800be64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bcca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bce2:	e065      	b.n	800bdb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	ee07 3a90 	vmov	s15, r3
 800bcea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800be6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bcf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcf6:	4b59      	ldr	r3, [pc, #356]	; (800be5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcfe:	ee07 3a90 	vmov	s15, r3
 800bd02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd06:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd0a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800be64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd26:	e043      	b.n	800bdb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	ee07 3a90 	vmov	s15, r3
 800bd2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd32:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800be70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bd36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd3a:	4b48      	ldr	r3, [pc, #288]	; (800be5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd42:	ee07 3a90 	vmov	s15, r3
 800bd46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd4a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd4e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800be64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd6a:	e021      	b.n	800bdb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bd6c:	697b      	ldr	r3, [r7, #20]
 800bd6e:	ee07 3a90 	vmov	s15, r3
 800bd72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd76:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800be6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bd7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd7e:	4b37      	ldr	r3, [pc, #220]	; (800be5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd86:	ee07 3a90 	vmov	s15, r3
 800bd8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd92:	eddf 5a34 	vldr	s11, [pc, #208]	; 800be64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bda2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bda6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bdae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bdb0:	4b2a      	ldr	r3, [pc, #168]	; (800be5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdb4:	0a5b      	lsrs	r3, r3, #9
 800bdb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdba:	ee07 3a90 	vmov	s15, r3
 800bdbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bdc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bdca:	edd7 6a07 	vldr	s13, [r7, #28]
 800bdce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdd6:	ee17 2a90 	vmov	r2, s15
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bdde:	4b1f      	ldr	r3, [pc, #124]	; (800be5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bde0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bde2:	0c1b      	lsrs	r3, r3, #16
 800bde4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bde8:	ee07 3a90 	vmov	s15, r3
 800bdec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdf0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bdf4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bdf8:	edd7 6a07 	vldr	s13, [r7, #28]
 800bdfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be04:	ee17 2a90 	vmov	r2, s15
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800be0c:	4b13      	ldr	r3, [pc, #76]	; (800be5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be10:	0e1b      	lsrs	r3, r3, #24
 800be12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be16:	ee07 3a90 	vmov	s15, r3
 800be1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be22:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be26:	edd7 6a07 	vldr	s13, [r7, #28]
 800be2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be32:	ee17 2a90 	vmov	r2, s15
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800be3a:	e008      	b.n	800be4e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2200      	movs	r2, #0
 800be40:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2200      	movs	r2, #0
 800be46:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2200      	movs	r2, #0
 800be4c:	609a      	str	r2, [r3, #8]
}
 800be4e:	bf00      	nop
 800be50:	3724      	adds	r7, #36	; 0x24
 800be52:	46bd      	mov	sp, r7
 800be54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be58:	4770      	bx	lr
 800be5a:	bf00      	nop
 800be5c:	58024400 	.word	0x58024400
 800be60:	03d09000 	.word	0x03d09000
 800be64:	46000000 	.word	0x46000000
 800be68:	4c742400 	.word	0x4c742400
 800be6c:	4a742400 	.word	0x4a742400
 800be70:	4af42400 	.word	0x4af42400

0800be74 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800be74:	b480      	push	{r7}
 800be76:	b089      	sub	sp, #36	; 0x24
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800be7c:	4ba1      	ldr	r3, [pc, #644]	; (800c104 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be80:	f003 0303 	and.w	r3, r3, #3
 800be84:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800be86:	4b9f      	ldr	r3, [pc, #636]	; (800c104 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be8a:	0d1b      	lsrs	r3, r3, #20
 800be8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800be90:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800be92:	4b9c      	ldr	r3, [pc, #624]	; (800c104 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be96:	0a1b      	lsrs	r3, r3, #8
 800be98:	f003 0301 	and.w	r3, r3, #1
 800be9c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800be9e:	4b99      	ldr	r3, [pc, #612]	; (800c104 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bea2:	08db      	lsrs	r3, r3, #3
 800bea4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bea8:	693a      	ldr	r2, [r7, #16]
 800beaa:	fb02 f303 	mul.w	r3, r2, r3
 800beae:	ee07 3a90 	vmov	s15, r3
 800beb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beb6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	f000 8111 	beq.w	800c0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bec2:	69bb      	ldr	r3, [r7, #24]
 800bec4:	2b02      	cmp	r3, #2
 800bec6:	f000 8083 	beq.w	800bfd0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800beca:	69bb      	ldr	r3, [r7, #24]
 800becc:	2b02      	cmp	r3, #2
 800bece:	f200 80a1 	bhi.w	800c014 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bed2:	69bb      	ldr	r3, [r7, #24]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d003      	beq.n	800bee0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bed8:	69bb      	ldr	r3, [r7, #24]
 800beda:	2b01      	cmp	r3, #1
 800bedc:	d056      	beq.n	800bf8c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bede:	e099      	b.n	800c014 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bee0:	4b88      	ldr	r3, [pc, #544]	; (800c104 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	f003 0320 	and.w	r3, r3, #32
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d02d      	beq.n	800bf48 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800beec:	4b85      	ldr	r3, [pc, #532]	; (800c104 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	08db      	lsrs	r3, r3, #3
 800bef2:	f003 0303 	and.w	r3, r3, #3
 800bef6:	4a84      	ldr	r2, [pc, #528]	; (800c108 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bef8:	fa22 f303 	lsr.w	r3, r2, r3
 800befc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	ee07 3a90 	vmov	s15, r3
 800bf04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	ee07 3a90 	vmov	s15, r3
 800bf0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf16:	4b7b      	ldr	r3, [pc, #492]	; (800c104 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf1e:	ee07 3a90 	vmov	s15, r3
 800bf22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf26:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf2a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c10c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf42:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bf46:	e087      	b.n	800c058 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	ee07 3a90 	vmov	s15, r3
 800bf4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf52:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c110 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bf56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf5a:	4b6a      	ldr	r3, [pc, #424]	; (800c104 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf62:	ee07 3a90 	vmov	s15, r3
 800bf66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf6e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c10c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf8a:	e065      	b.n	800c058 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bf8c:	697b      	ldr	r3, [r7, #20]
 800bf8e:	ee07 3a90 	vmov	s15, r3
 800bf92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf96:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c114 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bf9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf9e:	4b59      	ldr	r3, [pc, #356]	; (800c104 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfa6:	ee07 3a90 	vmov	s15, r3
 800bfaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfae:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfb2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c10c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bfb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bfce:	e043      	b.n	800c058 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	ee07 3a90 	vmov	s15, r3
 800bfd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfda:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c118 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bfde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfe2:	4b48      	ldr	r3, [pc, #288]	; (800c104 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfea:	ee07 3a90 	vmov	s15, r3
 800bfee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bff2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bff6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c10c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c002:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c00a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c00e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c012:	e021      	b.n	800c058 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c014:	697b      	ldr	r3, [r7, #20]
 800c016:	ee07 3a90 	vmov	s15, r3
 800c01a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c01e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c114 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c026:	4b37      	ldr	r3, [pc, #220]	; (800c104 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c02a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c02e:	ee07 3a90 	vmov	s15, r3
 800c032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c036:	ed97 6a03 	vldr	s12, [r7, #12]
 800c03a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c10c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c03e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c046:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c04a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c04e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c052:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c056:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c058:	4b2a      	ldr	r3, [pc, #168]	; (800c104 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c05a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c05c:	0a5b      	lsrs	r3, r3, #9
 800c05e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c062:	ee07 3a90 	vmov	s15, r3
 800c066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c06a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c06e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c072:	edd7 6a07 	vldr	s13, [r7, #28]
 800c076:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c07a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c07e:	ee17 2a90 	vmov	r2, s15
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c086:	4b1f      	ldr	r3, [pc, #124]	; (800c104 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c08a:	0c1b      	lsrs	r3, r3, #16
 800c08c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c090:	ee07 3a90 	vmov	s15, r3
 800c094:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c098:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c09c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c0a0:	edd7 6a07 	vldr	s13, [r7, #28]
 800c0a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0ac:	ee17 2a90 	vmov	r2, s15
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c0b4:	4b13      	ldr	r3, [pc, #76]	; (800c104 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0b8:	0e1b      	lsrs	r3, r3, #24
 800c0ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0be:	ee07 3a90 	vmov	s15, r3
 800c0c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c0ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c0ce:	edd7 6a07 	vldr	s13, [r7, #28]
 800c0d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0da:	ee17 2a90 	vmov	r2, s15
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c0e2:	e008      	b.n	800c0f6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	609a      	str	r2, [r3, #8]
}
 800c0f6:	bf00      	nop
 800c0f8:	3724      	adds	r7, #36	; 0x24
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c100:	4770      	bx	lr
 800c102:	bf00      	nop
 800c104:	58024400 	.word	0x58024400
 800c108:	03d09000 	.word	0x03d09000
 800c10c:	46000000 	.word	0x46000000
 800c110:	4c742400 	.word	0x4c742400
 800c114:	4a742400 	.word	0x4a742400
 800c118:	4af42400 	.word	0x4af42400

0800c11c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b084      	sub	sp, #16
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c126:	2300      	movs	r3, #0
 800c128:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c12a:	4b53      	ldr	r3, [pc, #332]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c12c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c12e:	f003 0303 	and.w	r3, r3, #3
 800c132:	2b03      	cmp	r3, #3
 800c134:	d101      	bne.n	800c13a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c136:	2301      	movs	r3, #1
 800c138:	e099      	b.n	800c26e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c13a:	4b4f      	ldr	r3, [pc, #316]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	4a4e      	ldr	r2, [pc, #312]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c140:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c144:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c146:	f7f9 ffc7 	bl	80060d8 <HAL_GetTick>
 800c14a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c14c:	e008      	b.n	800c160 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c14e:	f7f9 ffc3 	bl	80060d8 <HAL_GetTick>
 800c152:	4602      	mov	r2, r0
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	1ad3      	subs	r3, r2, r3
 800c158:	2b02      	cmp	r3, #2
 800c15a:	d901      	bls.n	800c160 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c15c:	2303      	movs	r3, #3
 800c15e:	e086      	b.n	800c26e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c160:	4b45      	ldr	r3, [pc, #276]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d1f0      	bne.n	800c14e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c16c:	4b42      	ldr	r3, [pc, #264]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c16e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c170:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	031b      	lsls	r3, r3, #12
 800c17a:	493f      	ldr	r1, [pc, #252]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c17c:	4313      	orrs	r3, r2
 800c17e:	628b      	str	r3, [r1, #40]	; 0x28
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	685b      	ldr	r3, [r3, #4]
 800c184:	3b01      	subs	r3, #1
 800c186:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	689b      	ldr	r3, [r3, #8]
 800c18e:	3b01      	subs	r3, #1
 800c190:	025b      	lsls	r3, r3, #9
 800c192:	b29b      	uxth	r3, r3
 800c194:	431a      	orrs	r2, r3
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	68db      	ldr	r3, [r3, #12]
 800c19a:	3b01      	subs	r3, #1
 800c19c:	041b      	lsls	r3, r3, #16
 800c19e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c1a2:	431a      	orrs	r2, r3
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	691b      	ldr	r3, [r3, #16]
 800c1a8:	3b01      	subs	r3, #1
 800c1aa:	061b      	lsls	r3, r3, #24
 800c1ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c1b0:	4931      	ldr	r1, [pc, #196]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c1b2:	4313      	orrs	r3, r2
 800c1b4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c1b6:	4b30      	ldr	r3, [pc, #192]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	695b      	ldr	r3, [r3, #20]
 800c1c2:	492d      	ldr	r1, [pc, #180]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c1c4:	4313      	orrs	r3, r2
 800c1c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c1c8:	4b2b      	ldr	r3, [pc, #172]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c1ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1cc:	f023 0220 	bic.w	r2, r3, #32
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	699b      	ldr	r3, [r3, #24]
 800c1d4:	4928      	ldr	r1, [pc, #160]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c1d6:	4313      	orrs	r3, r2
 800c1d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c1da:	4b27      	ldr	r3, [pc, #156]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c1dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1de:	4a26      	ldr	r2, [pc, #152]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c1e0:	f023 0310 	bic.w	r3, r3, #16
 800c1e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c1e6:	4b24      	ldr	r3, [pc, #144]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c1e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c1ea:	4b24      	ldr	r3, [pc, #144]	; (800c27c <RCCEx_PLL2_Config+0x160>)
 800c1ec:	4013      	ands	r3, r2
 800c1ee:	687a      	ldr	r2, [r7, #4]
 800c1f0:	69d2      	ldr	r2, [r2, #28]
 800c1f2:	00d2      	lsls	r2, r2, #3
 800c1f4:	4920      	ldr	r1, [pc, #128]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c1f6:	4313      	orrs	r3, r2
 800c1f8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c1fa:	4b1f      	ldr	r3, [pc, #124]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c1fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1fe:	4a1e      	ldr	r2, [pc, #120]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c200:	f043 0310 	orr.w	r3, r3, #16
 800c204:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d106      	bne.n	800c21a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c20c:	4b1a      	ldr	r3, [pc, #104]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c20e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c210:	4a19      	ldr	r2, [pc, #100]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c212:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c216:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c218:	e00f      	b.n	800c23a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	2b01      	cmp	r3, #1
 800c21e:	d106      	bne.n	800c22e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c220:	4b15      	ldr	r3, [pc, #84]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c224:	4a14      	ldr	r2, [pc, #80]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c226:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c22a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c22c:	e005      	b.n	800c23a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c22e:	4b12      	ldr	r3, [pc, #72]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c232:	4a11      	ldr	r2, [pc, #68]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c234:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c238:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c23a:	4b0f      	ldr	r3, [pc, #60]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	4a0e      	ldr	r2, [pc, #56]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c240:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c244:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c246:	f7f9 ff47 	bl	80060d8 <HAL_GetTick>
 800c24a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c24c:	e008      	b.n	800c260 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c24e:	f7f9 ff43 	bl	80060d8 <HAL_GetTick>
 800c252:	4602      	mov	r2, r0
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	1ad3      	subs	r3, r2, r3
 800c258:	2b02      	cmp	r3, #2
 800c25a:	d901      	bls.n	800c260 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c25c:	2303      	movs	r3, #3
 800c25e:	e006      	b.n	800c26e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c260:	4b05      	ldr	r3, [pc, #20]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d0f0      	beq.n	800c24e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c26c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3710      	adds	r7, #16
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}
 800c276:	bf00      	nop
 800c278:	58024400 	.word	0x58024400
 800c27c:	ffff0007 	.word	0xffff0007

0800c280 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b084      	sub	sp, #16
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
 800c288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c28a:	2300      	movs	r3, #0
 800c28c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c28e:	4b53      	ldr	r3, [pc, #332]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c292:	f003 0303 	and.w	r3, r3, #3
 800c296:	2b03      	cmp	r3, #3
 800c298:	d101      	bne.n	800c29e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c29a:	2301      	movs	r3, #1
 800c29c:	e099      	b.n	800c3d2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c29e:	4b4f      	ldr	r3, [pc, #316]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	4a4e      	ldr	r2, [pc, #312]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c2a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c2a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c2aa:	f7f9 ff15 	bl	80060d8 <HAL_GetTick>
 800c2ae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c2b0:	e008      	b.n	800c2c4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c2b2:	f7f9 ff11 	bl	80060d8 <HAL_GetTick>
 800c2b6:	4602      	mov	r2, r0
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	1ad3      	subs	r3, r2, r3
 800c2bc:	2b02      	cmp	r3, #2
 800c2be:	d901      	bls.n	800c2c4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c2c0:	2303      	movs	r3, #3
 800c2c2:	e086      	b.n	800c3d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c2c4:	4b45      	ldr	r3, [pc, #276]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d1f0      	bne.n	800c2b2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c2d0:	4b42      	ldr	r3, [pc, #264]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c2d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2d4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	051b      	lsls	r3, r3, #20
 800c2de:	493f      	ldr	r1, [pc, #252]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c2e0:	4313      	orrs	r3, r2
 800c2e2:	628b      	str	r3, [r1, #40]	; 0x28
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	685b      	ldr	r3, [r3, #4]
 800c2e8:	3b01      	subs	r3, #1
 800c2ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	689b      	ldr	r3, [r3, #8]
 800c2f2:	3b01      	subs	r3, #1
 800c2f4:	025b      	lsls	r3, r3, #9
 800c2f6:	b29b      	uxth	r3, r3
 800c2f8:	431a      	orrs	r2, r3
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	68db      	ldr	r3, [r3, #12]
 800c2fe:	3b01      	subs	r3, #1
 800c300:	041b      	lsls	r3, r3, #16
 800c302:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c306:	431a      	orrs	r2, r3
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	691b      	ldr	r3, [r3, #16]
 800c30c:	3b01      	subs	r3, #1
 800c30e:	061b      	lsls	r3, r3, #24
 800c310:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c314:	4931      	ldr	r1, [pc, #196]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c316:	4313      	orrs	r3, r2
 800c318:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c31a:	4b30      	ldr	r3, [pc, #192]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c31c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c31e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	695b      	ldr	r3, [r3, #20]
 800c326:	492d      	ldr	r1, [pc, #180]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c328:	4313      	orrs	r3, r2
 800c32a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c32c:	4b2b      	ldr	r3, [pc, #172]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c330:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	699b      	ldr	r3, [r3, #24]
 800c338:	4928      	ldr	r1, [pc, #160]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c33a:	4313      	orrs	r3, r2
 800c33c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c33e:	4b27      	ldr	r3, [pc, #156]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c342:	4a26      	ldr	r2, [pc, #152]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c344:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c348:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c34a:	4b24      	ldr	r3, [pc, #144]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c34c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c34e:	4b24      	ldr	r3, [pc, #144]	; (800c3e0 <RCCEx_PLL3_Config+0x160>)
 800c350:	4013      	ands	r3, r2
 800c352:	687a      	ldr	r2, [r7, #4]
 800c354:	69d2      	ldr	r2, [r2, #28]
 800c356:	00d2      	lsls	r2, r2, #3
 800c358:	4920      	ldr	r1, [pc, #128]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c35a:	4313      	orrs	r3, r2
 800c35c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c35e:	4b1f      	ldr	r3, [pc, #124]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c362:	4a1e      	ldr	r2, [pc, #120]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c368:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d106      	bne.n	800c37e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c370:	4b1a      	ldr	r3, [pc, #104]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c374:	4a19      	ldr	r2, [pc, #100]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c376:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c37a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c37c:	e00f      	b.n	800c39e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	2b01      	cmp	r3, #1
 800c382:	d106      	bne.n	800c392 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c384:	4b15      	ldr	r3, [pc, #84]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c388:	4a14      	ldr	r2, [pc, #80]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c38a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c38e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c390:	e005      	b.n	800c39e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c392:	4b12      	ldr	r3, [pc, #72]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c396:	4a11      	ldr	r2, [pc, #68]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c398:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c39c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c39e:	4b0f      	ldr	r3, [pc, #60]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	4a0e      	ldr	r2, [pc, #56]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c3a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c3a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c3aa:	f7f9 fe95 	bl	80060d8 <HAL_GetTick>
 800c3ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c3b0:	e008      	b.n	800c3c4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c3b2:	f7f9 fe91 	bl	80060d8 <HAL_GetTick>
 800c3b6:	4602      	mov	r2, r0
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	1ad3      	subs	r3, r2, r3
 800c3bc:	2b02      	cmp	r3, #2
 800c3be:	d901      	bls.n	800c3c4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c3c0:	2303      	movs	r3, #3
 800c3c2:	e006      	b.n	800c3d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c3c4:	4b05      	ldr	r3, [pc, #20]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d0f0      	beq.n	800c3b2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c3d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	3710      	adds	r7, #16
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}
 800c3da:	bf00      	nop
 800c3dc:	58024400 	.word	0x58024400
 800c3e0:	ffff0007 	.word	0xffff0007

0800c3e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b082      	sub	sp, #8
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d101      	bne.n	800c3f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	e049      	b.n	800c48a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c3fc:	b2db      	uxtb	r3, r3
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d106      	bne.n	800c410 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2200      	movs	r2, #0
 800c406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f7f9 f866 	bl	80054dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2202      	movs	r2, #2
 800c414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681a      	ldr	r2, [r3, #0]
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	3304      	adds	r3, #4
 800c420:	4619      	mov	r1, r3
 800c422:	4610      	mov	r0, r2
 800c424:	f000 fed8 	bl	800d1d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2201      	movs	r2, #1
 800c42c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2201      	movs	r2, #1
 800c434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2201      	movs	r2, #1
 800c43c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2201      	movs	r2, #1
 800c444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2201      	movs	r2, #1
 800c44c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2201      	movs	r2, #1
 800c454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2201      	movs	r2, #1
 800c45c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2201      	movs	r2, #1
 800c464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2201      	movs	r2, #1
 800c46c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2201      	movs	r2, #1
 800c474:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2201      	movs	r2, #1
 800c47c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2201      	movs	r2, #1
 800c484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c488:	2300      	movs	r3, #0
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3708      	adds	r7, #8
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}
	...

0800c494 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c494:	b480      	push	{r7}
 800c496:	b085      	sub	sp, #20
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c4a2:	b2db      	uxtb	r3, r3
 800c4a4:	2b01      	cmp	r3, #1
 800c4a6:	d001      	beq.n	800c4ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	e05e      	b.n	800c56a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2202      	movs	r2, #2
 800c4b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	68da      	ldr	r2, [r3, #12]
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f042 0201 	orr.w	r2, r2, #1
 800c4c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	4a2b      	ldr	r2, [pc, #172]	; (800c578 <HAL_TIM_Base_Start_IT+0xe4>)
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d02c      	beq.n	800c528 <HAL_TIM_Base_Start_IT+0x94>
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4d6:	d027      	beq.n	800c528 <HAL_TIM_Base_Start_IT+0x94>
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	4a27      	ldr	r2, [pc, #156]	; (800c57c <HAL_TIM_Base_Start_IT+0xe8>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d022      	beq.n	800c528 <HAL_TIM_Base_Start_IT+0x94>
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	4a26      	ldr	r2, [pc, #152]	; (800c580 <HAL_TIM_Base_Start_IT+0xec>)
 800c4e8:	4293      	cmp	r3, r2
 800c4ea:	d01d      	beq.n	800c528 <HAL_TIM_Base_Start_IT+0x94>
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	4a24      	ldr	r2, [pc, #144]	; (800c584 <HAL_TIM_Base_Start_IT+0xf0>)
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	d018      	beq.n	800c528 <HAL_TIM_Base_Start_IT+0x94>
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	4a23      	ldr	r2, [pc, #140]	; (800c588 <HAL_TIM_Base_Start_IT+0xf4>)
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	d013      	beq.n	800c528 <HAL_TIM_Base_Start_IT+0x94>
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	4a21      	ldr	r2, [pc, #132]	; (800c58c <HAL_TIM_Base_Start_IT+0xf8>)
 800c506:	4293      	cmp	r3, r2
 800c508:	d00e      	beq.n	800c528 <HAL_TIM_Base_Start_IT+0x94>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	4a20      	ldr	r2, [pc, #128]	; (800c590 <HAL_TIM_Base_Start_IT+0xfc>)
 800c510:	4293      	cmp	r3, r2
 800c512:	d009      	beq.n	800c528 <HAL_TIM_Base_Start_IT+0x94>
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	4a1e      	ldr	r2, [pc, #120]	; (800c594 <HAL_TIM_Base_Start_IT+0x100>)
 800c51a:	4293      	cmp	r3, r2
 800c51c:	d004      	beq.n	800c528 <HAL_TIM_Base_Start_IT+0x94>
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	4a1d      	ldr	r2, [pc, #116]	; (800c598 <HAL_TIM_Base_Start_IT+0x104>)
 800c524:	4293      	cmp	r3, r2
 800c526:	d115      	bne.n	800c554 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	689a      	ldr	r2, [r3, #8]
 800c52e:	4b1b      	ldr	r3, [pc, #108]	; (800c59c <HAL_TIM_Base_Start_IT+0x108>)
 800c530:	4013      	ands	r3, r2
 800c532:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	2b06      	cmp	r3, #6
 800c538:	d015      	beq.n	800c566 <HAL_TIM_Base_Start_IT+0xd2>
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c540:	d011      	beq.n	800c566 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	681a      	ldr	r2, [r3, #0]
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	f042 0201 	orr.w	r2, r2, #1
 800c550:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c552:	e008      	b.n	800c566 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	681a      	ldr	r2, [r3, #0]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f042 0201 	orr.w	r2, r2, #1
 800c562:	601a      	str	r2, [r3, #0]
 800c564:	e000      	b.n	800c568 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c566:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c568:	2300      	movs	r3, #0
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	3714      	adds	r7, #20
 800c56e:	46bd      	mov	sp, r7
 800c570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c574:	4770      	bx	lr
 800c576:	bf00      	nop
 800c578:	40010000 	.word	0x40010000
 800c57c:	40000400 	.word	0x40000400
 800c580:	40000800 	.word	0x40000800
 800c584:	40000c00 	.word	0x40000c00
 800c588:	40010400 	.word	0x40010400
 800c58c:	40001800 	.word	0x40001800
 800c590:	40014000 	.word	0x40014000
 800c594:	4000e000 	.word	0x4000e000
 800c598:	4000e400 	.word	0x4000e400
 800c59c:	00010007 	.word	0x00010007

0800c5a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b082      	sub	sp, #8
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d101      	bne.n	800c5b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	e049      	b.n	800c646 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c5b8:	b2db      	uxtb	r3, r3
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d106      	bne.n	800c5cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f7f9 f92c 	bl	8005824 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2202      	movs	r2, #2
 800c5d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681a      	ldr	r2, [r3, #0]
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	3304      	adds	r3, #4
 800c5dc:	4619      	mov	r1, r3
 800c5de:	4610      	mov	r0, r2
 800c5e0:	f000 fdfa 	bl	800d1d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2201      	movs	r2, #1
 800c5e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2201      	movs	r2, #1
 800c5f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2201      	movs	r2, #1
 800c5f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2201      	movs	r2, #1
 800c600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2201      	movs	r2, #1
 800c608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2201      	movs	r2, #1
 800c610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2201      	movs	r2, #1
 800c618:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2201      	movs	r2, #1
 800c620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2201      	movs	r2, #1
 800c628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2201      	movs	r2, #1
 800c630:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2201      	movs	r2, #1
 800c638:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2201      	movs	r2, #1
 800c640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c644:	2300      	movs	r3, #0
}
 800c646:	4618      	mov	r0, r3
 800c648:	3708      	adds	r7, #8
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}
	...

0800c650 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b084      	sub	sp, #16
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
 800c658:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d109      	bne.n	800c674 <HAL_TIM_PWM_Start+0x24>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c666:	b2db      	uxtb	r3, r3
 800c668:	2b01      	cmp	r3, #1
 800c66a:	bf14      	ite	ne
 800c66c:	2301      	movne	r3, #1
 800c66e:	2300      	moveq	r3, #0
 800c670:	b2db      	uxtb	r3, r3
 800c672:	e03c      	b.n	800c6ee <HAL_TIM_PWM_Start+0x9e>
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	2b04      	cmp	r3, #4
 800c678:	d109      	bne.n	800c68e <HAL_TIM_PWM_Start+0x3e>
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c680:	b2db      	uxtb	r3, r3
 800c682:	2b01      	cmp	r3, #1
 800c684:	bf14      	ite	ne
 800c686:	2301      	movne	r3, #1
 800c688:	2300      	moveq	r3, #0
 800c68a:	b2db      	uxtb	r3, r3
 800c68c:	e02f      	b.n	800c6ee <HAL_TIM_PWM_Start+0x9e>
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	2b08      	cmp	r3, #8
 800c692:	d109      	bne.n	800c6a8 <HAL_TIM_PWM_Start+0x58>
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c69a:	b2db      	uxtb	r3, r3
 800c69c:	2b01      	cmp	r3, #1
 800c69e:	bf14      	ite	ne
 800c6a0:	2301      	movne	r3, #1
 800c6a2:	2300      	moveq	r3, #0
 800c6a4:	b2db      	uxtb	r3, r3
 800c6a6:	e022      	b.n	800c6ee <HAL_TIM_PWM_Start+0x9e>
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	2b0c      	cmp	r3, #12
 800c6ac:	d109      	bne.n	800c6c2 <HAL_TIM_PWM_Start+0x72>
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c6b4:	b2db      	uxtb	r3, r3
 800c6b6:	2b01      	cmp	r3, #1
 800c6b8:	bf14      	ite	ne
 800c6ba:	2301      	movne	r3, #1
 800c6bc:	2300      	moveq	r3, #0
 800c6be:	b2db      	uxtb	r3, r3
 800c6c0:	e015      	b.n	800c6ee <HAL_TIM_PWM_Start+0x9e>
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	2b10      	cmp	r3, #16
 800c6c6:	d109      	bne.n	800c6dc <HAL_TIM_PWM_Start+0x8c>
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c6ce:	b2db      	uxtb	r3, r3
 800c6d0:	2b01      	cmp	r3, #1
 800c6d2:	bf14      	ite	ne
 800c6d4:	2301      	movne	r3, #1
 800c6d6:	2300      	moveq	r3, #0
 800c6d8:	b2db      	uxtb	r3, r3
 800c6da:	e008      	b.n	800c6ee <HAL_TIM_PWM_Start+0x9e>
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c6e2:	b2db      	uxtb	r3, r3
 800c6e4:	2b01      	cmp	r3, #1
 800c6e6:	bf14      	ite	ne
 800c6e8:	2301      	movne	r3, #1
 800c6ea:	2300      	moveq	r3, #0
 800c6ec:	b2db      	uxtb	r3, r3
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d001      	beq.n	800c6f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c6f2:	2301      	movs	r3, #1
 800c6f4:	e0ab      	b.n	800c84e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d104      	bne.n	800c706 <HAL_TIM_PWM_Start+0xb6>
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2202      	movs	r2, #2
 800c700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c704:	e023      	b.n	800c74e <HAL_TIM_PWM_Start+0xfe>
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	2b04      	cmp	r3, #4
 800c70a:	d104      	bne.n	800c716 <HAL_TIM_PWM_Start+0xc6>
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2202      	movs	r2, #2
 800c710:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c714:	e01b      	b.n	800c74e <HAL_TIM_PWM_Start+0xfe>
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	2b08      	cmp	r3, #8
 800c71a:	d104      	bne.n	800c726 <HAL_TIM_PWM_Start+0xd6>
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2202      	movs	r2, #2
 800c720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c724:	e013      	b.n	800c74e <HAL_TIM_PWM_Start+0xfe>
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	2b0c      	cmp	r3, #12
 800c72a:	d104      	bne.n	800c736 <HAL_TIM_PWM_Start+0xe6>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2202      	movs	r2, #2
 800c730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c734:	e00b      	b.n	800c74e <HAL_TIM_PWM_Start+0xfe>
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	2b10      	cmp	r3, #16
 800c73a:	d104      	bne.n	800c746 <HAL_TIM_PWM_Start+0xf6>
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2202      	movs	r2, #2
 800c740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c744:	e003      	b.n	800c74e <HAL_TIM_PWM_Start+0xfe>
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2202      	movs	r2, #2
 800c74a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	2201      	movs	r2, #1
 800c754:	6839      	ldr	r1, [r7, #0]
 800c756:	4618      	mov	r0, r3
 800c758:	f001 f958 	bl	800da0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	4a3d      	ldr	r2, [pc, #244]	; (800c858 <HAL_TIM_PWM_Start+0x208>)
 800c762:	4293      	cmp	r3, r2
 800c764:	d013      	beq.n	800c78e <HAL_TIM_PWM_Start+0x13e>
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	4a3c      	ldr	r2, [pc, #240]	; (800c85c <HAL_TIM_PWM_Start+0x20c>)
 800c76c:	4293      	cmp	r3, r2
 800c76e:	d00e      	beq.n	800c78e <HAL_TIM_PWM_Start+0x13e>
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	4a3a      	ldr	r2, [pc, #232]	; (800c860 <HAL_TIM_PWM_Start+0x210>)
 800c776:	4293      	cmp	r3, r2
 800c778:	d009      	beq.n	800c78e <HAL_TIM_PWM_Start+0x13e>
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	4a39      	ldr	r2, [pc, #228]	; (800c864 <HAL_TIM_PWM_Start+0x214>)
 800c780:	4293      	cmp	r3, r2
 800c782:	d004      	beq.n	800c78e <HAL_TIM_PWM_Start+0x13e>
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	4a37      	ldr	r2, [pc, #220]	; (800c868 <HAL_TIM_PWM_Start+0x218>)
 800c78a:	4293      	cmp	r3, r2
 800c78c:	d101      	bne.n	800c792 <HAL_TIM_PWM_Start+0x142>
 800c78e:	2301      	movs	r3, #1
 800c790:	e000      	b.n	800c794 <HAL_TIM_PWM_Start+0x144>
 800c792:	2300      	movs	r3, #0
 800c794:	2b00      	cmp	r3, #0
 800c796:	d007      	beq.n	800c7a8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c7a6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	4a2a      	ldr	r2, [pc, #168]	; (800c858 <HAL_TIM_PWM_Start+0x208>)
 800c7ae:	4293      	cmp	r3, r2
 800c7b0:	d02c      	beq.n	800c80c <HAL_TIM_PWM_Start+0x1bc>
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7ba:	d027      	beq.n	800c80c <HAL_TIM_PWM_Start+0x1bc>
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	4a2a      	ldr	r2, [pc, #168]	; (800c86c <HAL_TIM_PWM_Start+0x21c>)
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	d022      	beq.n	800c80c <HAL_TIM_PWM_Start+0x1bc>
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	4a29      	ldr	r2, [pc, #164]	; (800c870 <HAL_TIM_PWM_Start+0x220>)
 800c7cc:	4293      	cmp	r3, r2
 800c7ce:	d01d      	beq.n	800c80c <HAL_TIM_PWM_Start+0x1bc>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	4a27      	ldr	r2, [pc, #156]	; (800c874 <HAL_TIM_PWM_Start+0x224>)
 800c7d6:	4293      	cmp	r3, r2
 800c7d8:	d018      	beq.n	800c80c <HAL_TIM_PWM_Start+0x1bc>
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	4a1f      	ldr	r2, [pc, #124]	; (800c85c <HAL_TIM_PWM_Start+0x20c>)
 800c7e0:	4293      	cmp	r3, r2
 800c7e2:	d013      	beq.n	800c80c <HAL_TIM_PWM_Start+0x1bc>
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	4a23      	ldr	r2, [pc, #140]	; (800c878 <HAL_TIM_PWM_Start+0x228>)
 800c7ea:	4293      	cmp	r3, r2
 800c7ec:	d00e      	beq.n	800c80c <HAL_TIM_PWM_Start+0x1bc>
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	4a1b      	ldr	r2, [pc, #108]	; (800c860 <HAL_TIM_PWM_Start+0x210>)
 800c7f4:	4293      	cmp	r3, r2
 800c7f6:	d009      	beq.n	800c80c <HAL_TIM_PWM_Start+0x1bc>
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	4a1f      	ldr	r2, [pc, #124]	; (800c87c <HAL_TIM_PWM_Start+0x22c>)
 800c7fe:	4293      	cmp	r3, r2
 800c800:	d004      	beq.n	800c80c <HAL_TIM_PWM_Start+0x1bc>
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	4a1e      	ldr	r2, [pc, #120]	; (800c880 <HAL_TIM_PWM_Start+0x230>)
 800c808:	4293      	cmp	r3, r2
 800c80a:	d115      	bne.n	800c838 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	689a      	ldr	r2, [r3, #8]
 800c812:	4b1c      	ldr	r3, [pc, #112]	; (800c884 <HAL_TIM_PWM_Start+0x234>)
 800c814:	4013      	ands	r3, r2
 800c816:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	2b06      	cmp	r3, #6
 800c81c:	d015      	beq.n	800c84a <HAL_TIM_PWM_Start+0x1fa>
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c824:	d011      	beq.n	800c84a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	681a      	ldr	r2, [r3, #0]
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	f042 0201 	orr.w	r2, r2, #1
 800c834:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c836:	e008      	b.n	800c84a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	681a      	ldr	r2, [r3, #0]
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	f042 0201 	orr.w	r2, r2, #1
 800c846:	601a      	str	r2, [r3, #0]
 800c848:	e000      	b.n	800c84c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c84a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c84c:	2300      	movs	r3, #0
}
 800c84e:	4618      	mov	r0, r3
 800c850:	3710      	adds	r7, #16
 800c852:	46bd      	mov	sp, r7
 800c854:	bd80      	pop	{r7, pc}
 800c856:	bf00      	nop
 800c858:	40010000 	.word	0x40010000
 800c85c:	40010400 	.word	0x40010400
 800c860:	40014000 	.word	0x40014000
 800c864:	40014400 	.word	0x40014400
 800c868:	40014800 	.word	0x40014800
 800c86c:	40000400 	.word	0x40000400
 800c870:	40000800 	.word	0x40000800
 800c874:	40000c00 	.word	0x40000c00
 800c878:	40001800 	.word	0x40001800
 800c87c:	4000e000 	.word	0x4000e000
 800c880:	4000e400 	.word	0x4000e400
 800c884:	00010007 	.word	0x00010007

0800c888 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b086      	sub	sp, #24
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
 800c890:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d101      	bne.n	800c89c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c898:	2301      	movs	r3, #1
 800c89a:	e08f      	b.n	800c9bc <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c8a2:	b2db      	uxtb	r3, r3
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d106      	bne.n	800c8b6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f7f8 fea9 	bl	8005608 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2202      	movs	r2, #2
 800c8ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	6899      	ldr	r1, [r3, #8]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681a      	ldr	r2, [r3, #0]
 800c8c8:	4b3e      	ldr	r3, [pc, #248]	; (800c9c4 <HAL_TIM_Encoder_Init+0x13c>)
 800c8ca:	400b      	ands	r3, r1
 800c8cc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681a      	ldr	r2, [r3, #0]
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	3304      	adds	r3, #4
 800c8d6:	4619      	mov	r1, r3
 800c8d8:	4610      	mov	r0, r2
 800c8da:	f000 fc7d 	bl	800d1d8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	689b      	ldr	r3, [r3, #8]
 800c8e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	699b      	ldr	r3, [r3, #24]
 800c8ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	6a1b      	ldr	r3, [r3, #32]
 800c8f4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	697a      	ldr	r2, [r7, #20]
 800c8fc:	4313      	orrs	r3, r2
 800c8fe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c900:	693a      	ldr	r2, [r7, #16]
 800c902:	4b31      	ldr	r3, [pc, #196]	; (800c9c8 <HAL_TIM_Encoder_Init+0x140>)
 800c904:	4013      	ands	r3, r2
 800c906:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	689a      	ldr	r2, [r3, #8]
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	699b      	ldr	r3, [r3, #24]
 800c910:	021b      	lsls	r3, r3, #8
 800c912:	4313      	orrs	r3, r2
 800c914:	693a      	ldr	r2, [r7, #16]
 800c916:	4313      	orrs	r3, r2
 800c918:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c91a:	693a      	ldr	r2, [r7, #16]
 800c91c:	4b2b      	ldr	r3, [pc, #172]	; (800c9cc <HAL_TIM_Encoder_Init+0x144>)
 800c91e:	4013      	ands	r3, r2
 800c920:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c922:	693a      	ldr	r2, [r7, #16]
 800c924:	4b2a      	ldr	r3, [pc, #168]	; (800c9d0 <HAL_TIM_Encoder_Init+0x148>)
 800c926:	4013      	ands	r3, r2
 800c928:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	68da      	ldr	r2, [r3, #12]
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	69db      	ldr	r3, [r3, #28]
 800c932:	021b      	lsls	r3, r3, #8
 800c934:	4313      	orrs	r3, r2
 800c936:	693a      	ldr	r2, [r7, #16]
 800c938:	4313      	orrs	r3, r2
 800c93a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	691b      	ldr	r3, [r3, #16]
 800c940:	011a      	lsls	r2, r3, #4
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	6a1b      	ldr	r3, [r3, #32]
 800c946:	031b      	lsls	r3, r3, #12
 800c948:	4313      	orrs	r3, r2
 800c94a:	693a      	ldr	r2, [r7, #16]
 800c94c:	4313      	orrs	r3, r2
 800c94e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c956:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c95e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	685a      	ldr	r2, [r3, #4]
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	695b      	ldr	r3, [r3, #20]
 800c968:	011b      	lsls	r3, r3, #4
 800c96a:	4313      	orrs	r3, r2
 800c96c:	68fa      	ldr	r2, [r7, #12]
 800c96e:	4313      	orrs	r3, r2
 800c970:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	697a      	ldr	r2, [r7, #20]
 800c978:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	693a      	ldr	r2, [r7, #16]
 800c980:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	68fa      	ldr	r2, [r7, #12]
 800c988:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2201      	movs	r2, #1
 800c98e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2201      	movs	r2, #1
 800c996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2201      	movs	r2, #1
 800c99e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2201      	movs	r2, #1
 800c9a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2201      	movs	r2, #1
 800c9ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2201      	movs	r2, #1
 800c9b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c9ba:	2300      	movs	r3, #0
}
 800c9bc:	4618      	mov	r0, r3
 800c9be:	3718      	adds	r7, #24
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}
 800c9c4:	fffebff8 	.word	0xfffebff8
 800c9c8:	fffffcfc 	.word	0xfffffcfc
 800c9cc:	fffff3f3 	.word	0xfffff3f3
 800c9d0:	ffff0f0f 	.word	0xffff0f0f

0800c9d4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b084      	sub	sp, #16
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
 800c9dc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c9e4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c9ec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c9f4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c9fc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d110      	bne.n	800ca26 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ca04:	7bfb      	ldrb	r3, [r7, #15]
 800ca06:	2b01      	cmp	r3, #1
 800ca08:	d102      	bne.n	800ca10 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800ca0a:	7b7b      	ldrb	r3, [r7, #13]
 800ca0c:	2b01      	cmp	r3, #1
 800ca0e:	d001      	beq.n	800ca14 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800ca10:	2301      	movs	r3, #1
 800ca12:	e089      	b.n	800cb28 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2202      	movs	r2, #2
 800ca18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2202      	movs	r2, #2
 800ca20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ca24:	e031      	b.n	800ca8a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	2b04      	cmp	r3, #4
 800ca2a:	d110      	bne.n	800ca4e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ca2c:	7bbb      	ldrb	r3, [r7, #14]
 800ca2e:	2b01      	cmp	r3, #1
 800ca30:	d102      	bne.n	800ca38 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ca32:	7b3b      	ldrb	r3, [r7, #12]
 800ca34:	2b01      	cmp	r3, #1
 800ca36:	d001      	beq.n	800ca3c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800ca38:	2301      	movs	r3, #1
 800ca3a:	e075      	b.n	800cb28 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2202      	movs	r2, #2
 800ca40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2202      	movs	r2, #2
 800ca48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ca4c:	e01d      	b.n	800ca8a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ca4e:	7bfb      	ldrb	r3, [r7, #15]
 800ca50:	2b01      	cmp	r3, #1
 800ca52:	d108      	bne.n	800ca66 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ca54:	7bbb      	ldrb	r3, [r7, #14]
 800ca56:	2b01      	cmp	r3, #1
 800ca58:	d105      	bne.n	800ca66 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ca5a:	7b7b      	ldrb	r3, [r7, #13]
 800ca5c:	2b01      	cmp	r3, #1
 800ca5e:	d102      	bne.n	800ca66 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ca60:	7b3b      	ldrb	r3, [r7, #12]
 800ca62:	2b01      	cmp	r3, #1
 800ca64:	d001      	beq.n	800ca6a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800ca66:	2301      	movs	r3, #1
 800ca68:	e05e      	b.n	800cb28 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2202      	movs	r2, #2
 800ca6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2202      	movs	r2, #2
 800ca76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2202      	movs	r2, #2
 800ca7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2202      	movs	r2, #2
 800ca86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d003      	beq.n	800ca98 <HAL_TIM_Encoder_Start_IT+0xc4>
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	2b04      	cmp	r3, #4
 800ca94:	d010      	beq.n	800cab8 <HAL_TIM_Encoder_Start_IT+0xe4>
 800ca96:	e01f      	b.n	800cad8 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	2201      	movs	r2, #1
 800ca9e:	2100      	movs	r1, #0
 800caa0:	4618      	mov	r0, r3
 800caa2:	f000 ffb3 	bl	800da0c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	68da      	ldr	r2, [r3, #12]
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	f042 0202 	orr.w	r2, r2, #2
 800cab4:	60da      	str	r2, [r3, #12]
      break;
 800cab6:	e02e      	b.n	800cb16 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	2201      	movs	r2, #1
 800cabe:	2104      	movs	r1, #4
 800cac0:	4618      	mov	r0, r3
 800cac2:	f000 ffa3 	bl	800da0c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	68da      	ldr	r2, [r3, #12]
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	f042 0204 	orr.w	r2, r2, #4
 800cad4:	60da      	str	r2, [r3, #12]
      break;
 800cad6:	e01e      	b.n	800cb16 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	2201      	movs	r2, #1
 800cade:	2100      	movs	r1, #0
 800cae0:	4618      	mov	r0, r3
 800cae2:	f000 ff93 	bl	800da0c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	2201      	movs	r2, #1
 800caec:	2104      	movs	r1, #4
 800caee:	4618      	mov	r0, r3
 800caf0:	f000 ff8c 	bl	800da0c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	68da      	ldr	r2, [r3, #12]
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	f042 0202 	orr.w	r2, r2, #2
 800cb02:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	68da      	ldr	r2, [r3, #12]
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f042 0204 	orr.w	r2, r2, #4
 800cb12:	60da      	str	r2, [r3, #12]
      break;
 800cb14:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	681a      	ldr	r2, [r3, #0]
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	f042 0201 	orr.w	r2, r2, #1
 800cb24:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800cb26:	2300      	movs	r3, #0
}
 800cb28:	4618      	mov	r0, r3
 800cb2a:	3710      	adds	r7, #16
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd80      	pop	{r7, pc}

0800cb30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b082      	sub	sp, #8
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	691b      	ldr	r3, [r3, #16]
 800cb3e:	f003 0302 	and.w	r3, r3, #2
 800cb42:	2b02      	cmp	r3, #2
 800cb44:	d122      	bne.n	800cb8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	68db      	ldr	r3, [r3, #12]
 800cb4c:	f003 0302 	and.w	r3, r3, #2
 800cb50:	2b02      	cmp	r3, #2
 800cb52:	d11b      	bne.n	800cb8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	f06f 0202 	mvn.w	r2, #2
 800cb5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2201      	movs	r2, #1
 800cb62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	699b      	ldr	r3, [r3, #24]
 800cb6a:	f003 0303 	and.w	r3, r3, #3
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d003      	beq.n	800cb7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cb72:	6878      	ldr	r0, [r7, #4]
 800cb74:	f000 fb12 	bl	800d19c <HAL_TIM_IC_CaptureCallback>
 800cb78:	e005      	b.n	800cb86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f000 fb04 	bl	800d188 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	f000 fb15 	bl	800d1b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2200      	movs	r2, #0
 800cb8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	691b      	ldr	r3, [r3, #16]
 800cb92:	f003 0304 	and.w	r3, r3, #4
 800cb96:	2b04      	cmp	r3, #4
 800cb98:	d122      	bne.n	800cbe0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	68db      	ldr	r3, [r3, #12]
 800cba0:	f003 0304 	and.w	r3, r3, #4
 800cba4:	2b04      	cmp	r3, #4
 800cba6:	d11b      	bne.n	800cbe0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	f06f 0204 	mvn.w	r2, #4
 800cbb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	2202      	movs	r2, #2
 800cbb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	699b      	ldr	r3, [r3, #24]
 800cbbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d003      	beq.n	800cbce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f000 fae8 	bl	800d19c <HAL_TIM_IC_CaptureCallback>
 800cbcc:	e005      	b.n	800cbda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f000 fada 	bl	800d188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f000 faeb 	bl	800d1b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2200      	movs	r2, #0
 800cbde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	691b      	ldr	r3, [r3, #16]
 800cbe6:	f003 0308 	and.w	r3, r3, #8
 800cbea:	2b08      	cmp	r3, #8
 800cbec:	d122      	bne.n	800cc34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	68db      	ldr	r3, [r3, #12]
 800cbf4:	f003 0308 	and.w	r3, r3, #8
 800cbf8:	2b08      	cmp	r3, #8
 800cbfa:	d11b      	bne.n	800cc34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	f06f 0208 	mvn.w	r2, #8
 800cc04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	2204      	movs	r2, #4
 800cc0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	69db      	ldr	r3, [r3, #28]
 800cc12:	f003 0303 	and.w	r3, r3, #3
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d003      	beq.n	800cc22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f000 fabe 	bl	800d19c <HAL_TIM_IC_CaptureCallback>
 800cc20:	e005      	b.n	800cc2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	f000 fab0 	bl	800d188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	f000 fac1 	bl	800d1b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	2200      	movs	r2, #0
 800cc32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	691b      	ldr	r3, [r3, #16]
 800cc3a:	f003 0310 	and.w	r3, r3, #16
 800cc3e:	2b10      	cmp	r3, #16
 800cc40:	d122      	bne.n	800cc88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	68db      	ldr	r3, [r3, #12]
 800cc48:	f003 0310 	and.w	r3, r3, #16
 800cc4c:	2b10      	cmp	r3, #16
 800cc4e:	d11b      	bne.n	800cc88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	f06f 0210 	mvn.w	r2, #16
 800cc58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2208      	movs	r2, #8
 800cc5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	69db      	ldr	r3, [r3, #28]
 800cc66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d003      	beq.n	800cc76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	f000 fa94 	bl	800d19c <HAL_TIM_IC_CaptureCallback>
 800cc74:	e005      	b.n	800cc82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc76:	6878      	ldr	r0, [r7, #4]
 800cc78:	f000 fa86 	bl	800d188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f000 fa97 	bl	800d1b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	2200      	movs	r2, #0
 800cc86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	691b      	ldr	r3, [r3, #16]
 800cc8e:	f003 0301 	and.w	r3, r3, #1
 800cc92:	2b01      	cmp	r3, #1
 800cc94:	d10e      	bne.n	800ccb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	68db      	ldr	r3, [r3, #12]
 800cc9c:	f003 0301 	and.w	r3, r3, #1
 800cca0:	2b01      	cmp	r3, #1
 800cca2:	d107      	bne.n	800ccb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	f06f 0201 	mvn.w	r2, #1
 800ccac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	f7f3 feea 	bl	8000a88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	691b      	ldr	r3, [r3, #16]
 800ccba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccbe:	2b80      	cmp	r3, #128	; 0x80
 800ccc0:	d10e      	bne.n	800cce0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	68db      	ldr	r3, [r3, #12]
 800ccc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cccc:	2b80      	cmp	r3, #128	; 0x80
 800ccce:	d107      	bne.n	800cce0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ccd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	f001 f802 	bl	800dce4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	691b      	ldr	r3, [r3, #16]
 800cce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ccea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ccee:	d10e      	bne.n	800cd0e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	68db      	ldr	r3, [r3, #12]
 800ccf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccfa:	2b80      	cmp	r3, #128	; 0x80
 800ccfc:	d107      	bne.n	800cd0e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cd06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f000 fff5 	bl	800dcf8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	691b      	ldr	r3, [r3, #16]
 800cd14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd18:	2b40      	cmp	r3, #64	; 0x40
 800cd1a:	d10e      	bne.n	800cd3a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	68db      	ldr	r3, [r3, #12]
 800cd22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd26:	2b40      	cmp	r3, #64	; 0x40
 800cd28:	d107      	bne.n	800cd3a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cd32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f000 fa45 	bl	800d1c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	691b      	ldr	r3, [r3, #16]
 800cd40:	f003 0320 	and.w	r3, r3, #32
 800cd44:	2b20      	cmp	r3, #32
 800cd46:	d10e      	bne.n	800cd66 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	68db      	ldr	r3, [r3, #12]
 800cd4e:	f003 0320 	and.w	r3, r3, #32
 800cd52:	2b20      	cmp	r3, #32
 800cd54:	d107      	bne.n	800cd66 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f06f 0220 	mvn.w	r2, #32
 800cd5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f000 ffb5 	bl	800dcd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cd66:	bf00      	nop
 800cd68:	3708      	adds	r7, #8
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}
	...

0800cd70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b086      	sub	sp, #24
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	60f8      	str	r0, [r7, #12]
 800cd78:	60b9      	str	r1, [r7, #8]
 800cd7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd86:	2b01      	cmp	r3, #1
 800cd88:	d101      	bne.n	800cd8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800cd8a:	2302      	movs	r3, #2
 800cd8c:	e0ff      	b.n	800cf8e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	2201      	movs	r2, #1
 800cd92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2b14      	cmp	r3, #20
 800cd9a:	f200 80f0 	bhi.w	800cf7e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800cd9e:	a201      	add	r2, pc, #4	; (adr r2, 800cda4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800cda0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cda4:	0800cdf9 	.word	0x0800cdf9
 800cda8:	0800cf7f 	.word	0x0800cf7f
 800cdac:	0800cf7f 	.word	0x0800cf7f
 800cdb0:	0800cf7f 	.word	0x0800cf7f
 800cdb4:	0800ce39 	.word	0x0800ce39
 800cdb8:	0800cf7f 	.word	0x0800cf7f
 800cdbc:	0800cf7f 	.word	0x0800cf7f
 800cdc0:	0800cf7f 	.word	0x0800cf7f
 800cdc4:	0800ce7b 	.word	0x0800ce7b
 800cdc8:	0800cf7f 	.word	0x0800cf7f
 800cdcc:	0800cf7f 	.word	0x0800cf7f
 800cdd0:	0800cf7f 	.word	0x0800cf7f
 800cdd4:	0800cebb 	.word	0x0800cebb
 800cdd8:	0800cf7f 	.word	0x0800cf7f
 800cddc:	0800cf7f 	.word	0x0800cf7f
 800cde0:	0800cf7f 	.word	0x0800cf7f
 800cde4:	0800cefd 	.word	0x0800cefd
 800cde8:	0800cf7f 	.word	0x0800cf7f
 800cdec:	0800cf7f 	.word	0x0800cf7f
 800cdf0:	0800cf7f 	.word	0x0800cf7f
 800cdf4:	0800cf3d 	.word	0x0800cf3d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	68b9      	ldr	r1, [r7, #8]
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f000 fa90 	bl	800d324 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	699a      	ldr	r2, [r3, #24]
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f042 0208 	orr.w	r2, r2, #8
 800ce12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	699a      	ldr	r2, [r3, #24]
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	f022 0204 	bic.w	r2, r2, #4
 800ce22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	6999      	ldr	r1, [r3, #24]
 800ce2a:	68bb      	ldr	r3, [r7, #8]
 800ce2c:	691a      	ldr	r2, [r3, #16]
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	430a      	orrs	r2, r1
 800ce34:	619a      	str	r2, [r3, #24]
      break;
 800ce36:	e0a5      	b.n	800cf84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	68b9      	ldr	r1, [r7, #8]
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f000 fb00 	bl	800d444 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	699a      	ldr	r2, [r3, #24]
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ce52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	699a      	ldr	r2, [r3, #24]
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ce62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	6999      	ldr	r1, [r3, #24]
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	691b      	ldr	r3, [r3, #16]
 800ce6e:	021a      	lsls	r2, r3, #8
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	430a      	orrs	r2, r1
 800ce76:	619a      	str	r2, [r3, #24]
      break;
 800ce78:	e084      	b.n	800cf84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	68b9      	ldr	r1, [r7, #8]
 800ce80:	4618      	mov	r0, r3
 800ce82:	f000 fb69 	bl	800d558 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	69da      	ldr	r2, [r3, #28]
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	f042 0208 	orr.w	r2, r2, #8
 800ce94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	69da      	ldr	r2, [r3, #28]
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	f022 0204 	bic.w	r2, r2, #4
 800cea4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	69d9      	ldr	r1, [r3, #28]
 800ceac:	68bb      	ldr	r3, [r7, #8]
 800ceae:	691a      	ldr	r2, [r3, #16]
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	430a      	orrs	r2, r1
 800ceb6:	61da      	str	r2, [r3, #28]
      break;
 800ceb8:	e064      	b.n	800cf84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	68b9      	ldr	r1, [r7, #8]
 800cec0:	4618      	mov	r0, r3
 800cec2:	f000 fbd1 	bl	800d668 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	69da      	ldr	r2, [r3, #28]
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ced4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	69da      	ldr	r2, [r3, #28]
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cee4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	69d9      	ldr	r1, [r3, #28]
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	691b      	ldr	r3, [r3, #16]
 800cef0:	021a      	lsls	r2, r3, #8
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	430a      	orrs	r2, r1
 800cef8:	61da      	str	r2, [r3, #28]
      break;
 800cefa:	e043      	b.n	800cf84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	68b9      	ldr	r1, [r7, #8]
 800cf02:	4618      	mov	r0, r3
 800cf04:	f000 fc1a 	bl	800d73c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	f042 0208 	orr.w	r2, r2, #8
 800cf16:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	f022 0204 	bic.w	r2, r2, #4
 800cf26:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	691a      	ldr	r2, [r3, #16]
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	430a      	orrs	r2, r1
 800cf38:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cf3a:	e023      	b.n	800cf84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	68b9      	ldr	r1, [r7, #8]
 800cf42:	4618      	mov	r0, r3
 800cf44:	f000 fc5e 	bl	800d804 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cf56:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cf66:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	691b      	ldr	r3, [r3, #16]
 800cf72:	021a      	lsls	r2, r3, #8
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	430a      	orrs	r2, r1
 800cf7a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cf7c:	e002      	b.n	800cf84 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cf7e:	2301      	movs	r3, #1
 800cf80:	75fb      	strb	r3, [r7, #23]
      break;
 800cf82:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	2200      	movs	r2, #0
 800cf88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cf8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf8e:	4618      	mov	r0, r3
 800cf90:	3718      	adds	r7, #24
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}
 800cf96:	bf00      	nop

0800cf98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b084      	sub	sp, #16
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
 800cfa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cfac:	2b01      	cmp	r3, #1
 800cfae:	d101      	bne.n	800cfb4 <HAL_TIM_ConfigClockSource+0x1c>
 800cfb0:	2302      	movs	r3, #2
 800cfb2:	e0dc      	b.n	800d16e <HAL_TIM_ConfigClockSource+0x1d6>
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2201      	movs	r2, #1
 800cfb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2202      	movs	r2, #2
 800cfc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	689b      	ldr	r3, [r3, #8]
 800cfca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cfcc:	68ba      	ldr	r2, [r7, #8]
 800cfce:	4b6a      	ldr	r3, [pc, #424]	; (800d178 <HAL_TIM_ConfigClockSource+0x1e0>)
 800cfd0:	4013      	ands	r3, r2
 800cfd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cfda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	68ba      	ldr	r2, [r7, #8]
 800cfe2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	4a64      	ldr	r2, [pc, #400]	; (800d17c <HAL_TIM_ConfigClockSource+0x1e4>)
 800cfea:	4293      	cmp	r3, r2
 800cfec:	f000 80a9 	beq.w	800d142 <HAL_TIM_ConfigClockSource+0x1aa>
 800cff0:	4a62      	ldr	r2, [pc, #392]	; (800d17c <HAL_TIM_ConfigClockSource+0x1e4>)
 800cff2:	4293      	cmp	r3, r2
 800cff4:	f200 80ae 	bhi.w	800d154 <HAL_TIM_ConfigClockSource+0x1bc>
 800cff8:	4a61      	ldr	r2, [pc, #388]	; (800d180 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cffa:	4293      	cmp	r3, r2
 800cffc:	f000 80a1 	beq.w	800d142 <HAL_TIM_ConfigClockSource+0x1aa>
 800d000:	4a5f      	ldr	r2, [pc, #380]	; (800d180 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d002:	4293      	cmp	r3, r2
 800d004:	f200 80a6 	bhi.w	800d154 <HAL_TIM_ConfigClockSource+0x1bc>
 800d008:	4a5e      	ldr	r2, [pc, #376]	; (800d184 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d00a:	4293      	cmp	r3, r2
 800d00c:	f000 8099 	beq.w	800d142 <HAL_TIM_ConfigClockSource+0x1aa>
 800d010:	4a5c      	ldr	r2, [pc, #368]	; (800d184 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d012:	4293      	cmp	r3, r2
 800d014:	f200 809e 	bhi.w	800d154 <HAL_TIM_ConfigClockSource+0x1bc>
 800d018:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d01c:	f000 8091 	beq.w	800d142 <HAL_TIM_ConfigClockSource+0x1aa>
 800d020:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d024:	f200 8096 	bhi.w	800d154 <HAL_TIM_ConfigClockSource+0x1bc>
 800d028:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d02c:	f000 8089 	beq.w	800d142 <HAL_TIM_ConfigClockSource+0x1aa>
 800d030:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d034:	f200 808e 	bhi.w	800d154 <HAL_TIM_ConfigClockSource+0x1bc>
 800d038:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d03c:	d03e      	beq.n	800d0bc <HAL_TIM_ConfigClockSource+0x124>
 800d03e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d042:	f200 8087 	bhi.w	800d154 <HAL_TIM_ConfigClockSource+0x1bc>
 800d046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d04a:	f000 8086 	beq.w	800d15a <HAL_TIM_ConfigClockSource+0x1c2>
 800d04e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d052:	d87f      	bhi.n	800d154 <HAL_TIM_ConfigClockSource+0x1bc>
 800d054:	2b70      	cmp	r3, #112	; 0x70
 800d056:	d01a      	beq.n	800d08e <HAL_TIM_ConfigClockSource+0xf6>
 800d058:	2b70      	cmp	r3, #112	; 0x70
 800d05a:	d87b      	bhi.n	800d154 <HAL_TIM_ConfigClockSource+0x1bc>
 800d05c:	2b60      	cmp	r3, #96	; 0x60
 800d05e:	d050      	beq.n	800d102 <HAL_TIM_ConfigClockSource+0x16a>
 800d060:	2b60      	cmp	r3, #96	; 0x60
 800d062:	d877      	bhi.n	800d154 <HAL_TIM_ConfigClockSource+0x1bc>
 800d064:	2b50      	cmp	r3, #80	; 0x50
 800d066:	d03c      	beq.n	800d0e2 <HAL_TIM_ConfigClockSource+0x14a>
 800d068:	2b50      	cmp	r3, #80	; 0x50
 800d06a:	d873      	bhi.n	800d154 <HAL_TIM_ConfigClockSource+0x1bc>
 800d06c:	2b40      	cmp	r3, #64	; 0x40
 800d06e:	d058      	beq.n	800d122 <HAL_TIM_ConfigClockSource+0x18a>
 800d070:	2b40      	cmp	r3, #64	; 0x40
 800d072:	d86f      	bhi.n	800d154 <HAL_TIM_ConfigClockSource+0x1bc>
 800d074:	2b30      	cmp	r3, #48	; 0x30
 800d076:	d064      	beq.n	800d142 <HAL_TIM_ConfigClockSource+0x1aa>
 800d078:	2b30      	cmp	r3, #48	; 0x30
 800d07a:	d86b      	bhi.n	800d154 <HAL_TIM_ConfigClockSource+0x1bc>
 800d07c:	2b20      	cmp	r3, #32
 800d07e:	d060      	beq.n	800d142 <HAL_TIM_ConfigClockSource+0x1aa>
 800d080:	2b20      	cmp	r3, #32
 800d082:	d867      	bhi.n	800d154 <HAL_TIM_ConfigClockSource+0x1bc>
 800d084:	2b00      	cmp	r3, #0
 800d086:	d05c      	beq.n	800d142 <HAL_TIM_ConfigClockSource+0x1aa>
 800d088:	2b10      	cmp	r3, #16
 800d08a:	d05a      	beq.n	800d142 <HAL_TIM_ConfigClockSource+0x1aa>
 800d08c:	e062      	b.n	800d154 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d09e:	f000 fc95 	bl	800d9cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	689b      	ldr	r3, [r3, #8]
 800d0a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d0b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	68ba      	ldr	r2, [r7, #8]
 800d0b8:	609a      	str	r2, [r3, #8]
      break;
 800d0ba:	e04f      	b.n	800d15c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d0cc:	f000 fc7e 	bl	800d9cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	689a      	ldr	r2, [r3, #8]
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d0de:	609a      	str	r2, [r3, #8]
      break;
 800d0e0:	e03c      	b.n	800d15c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d0ee:	461a      	mov	r2, r3
 800d0f0:	f000 fbee 	bl	800d8d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	2150      	movs	r1, #80	; 0x50
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f000 fc48 	bl	800d990 <TIM_ITRx_SetConfig>
      break;
 800d100:	e02c      	b.n	800d15c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d10e:	461a      	mov	r2, r3
 800d110:	f000 fc0d 	bl	800d92e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	2160      	movs	r1, #96	; 0x60
 800d11a:	4618      	mov	r0, r3
 800d11c:	f000 fc38 	bl	800d990 <TIM_ITRx_SetConfig>
      break;
 800d120:	e01c      	b.n	800d15c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d12e:	461a      	mov	r2, r3
 800d130:	f000 fbce 	bl	800d8d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	2140      	movs	r1, #64	; 0x40
 800d13a:	4618      	mov	r0, r3
 800d13c:	f000 fc28 	bl	800d990 <TIM_ITRx_SetConfig>
      break;
 800d140:	e00c      	b.n	800d15c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681a      	ldr	r2, [r3, #0]
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	4619      	mov	r1, r3
 800d14c:	4610      	mov	r0, r2
 800d14e:	f000 fc1f 	bl	800d990 <TIM_ITRx_SetConfig>
      break;
 800d152:	e003      	b.n	800d15c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d154:	2301      	movs	r3, #1
 800d156:	73fb      	strb	r3, [r7, #15]
      break;
 800d158:	e000      	b.n	800d15c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d15a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2201      	movs	r2, #1
 800d160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2200      	movs	r2, #0
 800d168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d16c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d16e:	4618      	mov	r0, r3
 800d170:	3710      	adds	r7, #16
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}
 800d176:	bf00      	nop
 800d178:	ffceff88 	.word	0xffceff88
 800d17c:	00100040 	.word	0x00100040
 800d180:	00100030 	.word	0x00100030
 800d184:	00100020 	.word	0x00100020

0800d188 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d188:	b480      	push	{r7}
 800d18a:	b083      	sub	sp, #12
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d190:	bf00      	nop
 800d192:	370c      	adds	r7, #12
 800d194:	46bd      	mov	sp, r7
 800d196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19a:	4770      	bx	lr

0800d19c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d19c:	b480      	push	{r7}
 800d19e:	b083      	sub	sp, #12
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d1a4:	bf00      	nop
 800d1a6:	370c      	adds	r7, #12
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ae:	4770      	bx	lr

0800d1b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d1b0:	b480      	push	{r7}
 800d1b2:	b083      	sub	sp, #12
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d1b8:	bf00      	nop
 800d1ba:	370c      	adds	r7, #12
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c2:	4770      	bx	lr

0800d1c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d1c4:	b480      	push	{r7}
 800d1c6:	b083      	sub	sp, #12
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d1cc:	bf00      	nop
 800d1ce:	370c      	adds	r7, #12
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d6:	4770      	bx	lr

0800d1d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d1d8:	b480      	push	{r7}
 800d1da:	b085      	sub	sp, #20
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
 800d1e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	4a44      	ldr	r2, [pc, #272]	; (800d2fc <TIM_Base_SetConfig+0x124>)
 800d1ec:	4293      	cmp	r3, r2
 800d1ee:	d013      	beq.n	800d218 <TIM_Base_SetConfig+0x40>
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d1f6:	d00f      	beq.n	800d218 <TIM_Base_SetConfig+0x40>
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	4a41      	ldr	r2, [pc, #260]	; (800d300 <TIM_Base_SetConfig+0x128>)
 800d1fc:	4293      	cmp	r3, r2
 800d1fe:	d00b      	beq.n	800d218 <TIM_Base_SetConfig+0x40>
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	4a40      	ldr	r2, [pc, #256]	; (800d304 <TIM_Base_SetConfig+0x12c>)
 800d204:	4293      	cmp	r3, r2
 800d206:	d007      	beq.n	800d218 <TIM_Base_SetConfig+0x40>
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	4a3f      	ldr	r2, [pc, #252]	; (800d308 <TIM_Base_SetConfig+0x130>)
 800d20c:	4293      	cmp	r3, r2
 800d20e:	d003      	beq.n	800d218 <TIM_Base_SetConfig+0x40>
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	4a3e      	ldr	r2, [pc, #248]	; (800d30c <TIM_Base_SetConfig+0x134>)
 800d214:	4293      	cmp	r3, r2
 800d216:	d108      	bne.n	800d22a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d21e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	685b      	ldr	r3, [r3, #4]
 800d224:	68fa      	ldr	r2, [r7, #12]
 800d226:	4313      	orrs	r3, r2
 800d228:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	4a33      	ldr	r2, [pc, #204]	; (800d2fc <TIM_Base_SetConfig+0x124>)
 800d22e:	4293      	cmp	r3, r2
 800d230:	d027      	beq.n	800d282 <TIM_Base_SetConfig+0xaa>
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d238:	d023      	beq.n	800d282 <TIM_Base_SetConfig+0xaa>
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	4a30      	ldr	r2, [pc, #192]	; (800d300 <TIM_Base_SetConfig+0x128>)
 800d23e:	4293      	cmp	r3, r2
 800d240:	d01f      	beq.n	800d282 <TIM_Base_SetConfig+0xaa>
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	4a2f      	ldr	r2, [pc, #188]	; (800d304 <TIM_Base_SetConfig+0x12c>)
 800d246:	4293      	cmp	r3, r2
 800d248:	d01b      	beq.n	800d282 <TIM_Base_SetConfig+0xaa>
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	4a2e      	ldr	r2, [pc, #184]	; (800d308 <TIM_Base_SetConfig+0x130>)
 800d24e:	4293      	cmp	r3, r2
 800d250:	d017      	beq.n	800d282 <TIM_Base_SetConfig+0xaa>
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	4a2d      	ldr	r2, [pc, #180]	; (800d30c <TIM_Base_SetConfig+0x134>)
 800d256:	4293      	cmp	r3, r2
 800d258:	d013      	beq.n	800d282 <TIM_Base_SetConfig+0xaa>
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	4a2c      	ldr	r2, [pc, #176]	; (800d310 <TIM_Base_SetConfig+0x138>)
 800d25e:	4293      	cmp	r3, r2
 800d260:	d00f      	beq.n	800d282 <TIM_Base_SetConfig+0xaa>
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	4a2b      	ldr	r2, [pc, #172]	; (800d314 <TIM_Base_SetConfig+0x13c>)
 800d266:	4293      	cmp	r3, r2
 800d268:	d00b      	beq.n	800d282 <TIM_Base_SetConfig+0xaa>
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	4a2a      	ldr	r2, [pc, #168]	; (800d318 <TIM_Base_SetConfig+0x140>)
 800d26e:	4293      	cmp	r3, r2
 800d270:	d007      	beq.n	800d282 <TIM_Base_SetConfig+0xaa>
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	4a29      	ldr	r2, [pc, #164]	; (800d31c <TIM_Base_SetConfig+0x144>)
 800d276:	4293      	cmp	r3, r2
 800d278:	d003      	beq.n	800d282 <TIM_Base_SetConfig+0xaa>
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	4a28      	ldr	r2, [pc, #160]	; (800d320 <TIM_Base_SetConfig+0x148>)
 800d27e:	4293      	cmp	r3, r2
 800d280:	d108      	bne.n	800d294 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d288:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	68db      	ldr	r3, [r3, #12]
 800d28e:	68fa      	ldr	r2, [r7, #12]
 800d290:	4313      	orrs	r3, r2
 800d292:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	695b      	ldr	r3, [r3, #20]
 800d29e:	4313      	orrs	r3, r2
 800d2a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	68fa      	ldr	r2, [r7, #12]
 800d2a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	689a      	ldr	r2, [r3, #8]
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	681a      	ldr	r2, [r3, #0]
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	4a10      	ldr	r2, [pc, #64]	; (800d2fc <TIM_Base_SetConfig+0x124>)
 800d2bc:	4293      	cmp	r3, r2
 800d2be:	d00f      	beq.n	800d2e0 <TIM_Base_SetConfig+0x108>
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	4a12      	ldr	r2, [pc, #72]	; (800d30c <TIM_Base_SetConfig+0x134>)
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	d00b      	beq.n	800d2e0 <TIM_Base_SetConfig+0x108>
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	4a11      	ldr	r2, [pc, #68]	; (800d310 <TIM_Base_SetConfig+0x138>)
 800d2cc:	4293      	cmp	r3, r2
 800d2ce:	d007      	beq.n	800d2e0 <TIM_Base_SetConfig+0x108>
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	4a10      	ldr	r2, [pc, #64]	; (800d314 <TIM_Base_SetConfig+0x13c>)
 800d2d4:	4293      	cmp	r3, r2
 800d2d6:	d003      	beq.n	800d2e0 <TIM_Base_SetConfig+0x108>
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	4a0f      	ldr	r2, [pc, #60]	; (800d318 <TIM_Base_SetConfig+0x140>)
 800d2dc:	4293      	cmp	r3, r2
 800d2de:	d103      	bne.n	800d2e8 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	691a      	ldr	r2, [r3, #16]
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2201      	movs	r2, #1
 800d2ec:	615a      	str	r2, [r3, #20]
}
 800d2ee:	bf00      	nop
 800d2f0:	3714      	adds	r7, #20
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f8:	4770      	bx	lr
 800d2fa:	bf00      	nop
 800d2fc:	40010000 	.word	0x40010000
 800d300:	40000400 	.word	0x40000400
 800d304:	40000800 	.word	0x40000800
 800d308:	40000c00 	.word	0x40000c00
 800d30c:	40010400 	.word	0x40010400
 800d310:	40014000 	.word	0x40014000
 800d314:	40014400 	.word	0x40014400
 800d318:	40014800 	.word	0x40014800
 800d31c:	4000e000 	.word	0x4000e000
 800d320:	4000e400 	.word	0x4000e400

0800d324 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d324:	b480      	push	{r7}
 800d326:	b087      	sub	sp, #28
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
 800d32c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6a1b      	ldr	r3, [r3, #32]
 800d332:	f023 0201 	bic.w	r2, r3, #1
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6a1b      	ldr	r3, [r3, #32]
 800d33e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	685b      	ldr	r3, [r3, #4]
 800d344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	699b      	ldr	r3, [r3, #24]
 800d34a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d34c:	68fa      	ldr	r2, [r7, #12]
 800d34e:	4b37      	ldr	r3, [pc, #220]	; (800d42c <TIM_OC1_SetConfig+0x108>)
 800d350:	4013      	ands	r3, r2
 800d352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	f023 0303 	bic.w	r3, r3, #3
 800d35a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d35c:	683b      	ldr	r3, [r7, #0]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	68fa      	ldr	r2, [r7, #12]
 800d362:	4313      	orrs	r3, r2
 800d364:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	f023 0302 	bic.w	r3, r3, #2
 800d36c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	689b      	ldr	r3, [r3, #8]
 800d372:	697a      	ldr	r2, [r7, #20]
 800d374:	4313      	orrs	r3, r2
 800d376:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	4a2d      	ldr	r2, [pc, #180]	; (800d430 <TIM_OC1_SetConfig+0x10c>)
 800d37c:	4293      	cmp	r3, r2
 800d37e:	d00f      	beq.n	800d3a0 <TIM_OC1_SetConfig+0x7c>
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	4a2c      	ldr	r2, [pc, #176]	; (800d434 <TIM_OC1_SetConfig+0x110>)
 800d384:	4293      	cmp	r3, r2
 800d386:	d00b      	beq.n	800d3a0 <TIM_OC1_SetConfig+0x7c>
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	4a2b      	ldr	r2, [pc, #172]	; (800d438 <TIM_OC1_SetConfig+0x114>)
 800d38c:	4293      	cmp	r3, r2
 800d38e:	d007      	beq.n	800d3a0 <TIM_OC1_SetConfig+0x7c>
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	4a2a      	ldr	r2, [pc, #168]	; (800d43c <TIM_OC1_SetConfig+0x118>)
 800d394:	4293      	cmp	r3, r2
 800d396:	d003      	beq.n	800d3a0 <TIM_OC1_SetConfig+0x7c>
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	4a29      	ldr	r2, [pc, #164]	; (800d440 <TIM_OC1_SetConfig+0x11c>)
 800d39c:	4293      	cmp	r3, r2
 800d39e:	d10c      	bne.n	800d3ba <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	f023 0308 	bic.w	r3, r3, #8
 800d3a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	68db      	ldr	r3, [r3, #12]
 800d3ac:	697a      	ldr	r2, [r7, #20]
 800d3ae:	4313      	orrs	r3, r2
 800d3b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d3b2:	697b      	ldr	r3, [r7, #20]
 800d3b4:	f023 0304 	bic.w	r3, r3, #4
 800d3b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	4a1c      	ldr	r2, [pc, #112]	; (800d430 <TIM_OC1_SetConfig+0x10c>)
 800d3be:	4293      	cmp	r3, r2
 800d3c0:	d00f      	beq.n	800d3e2 <TIM_OC1_SetConfig+0xbe>
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	4a1b      	ldr	r2, [pc, #108]	; (800d434 <TIM_OC1_SetConfig+0x110>)
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	d00b      	beq.n	800d3e2 <TIM_OC1_SetConfig+0xbe>
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	4a1a      	ldr	r2, [pc, #104]	; (800d438 <TIM_OC1_SetConfig+0x114>)
 800d3ce:	4293      	cmp	r3, r2
 800d3d0:	d007      	beq.n	800d3e2 <TIM_OC1_SetConfig+0xbe>
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	4a19      	ldr	r2, [pc, #100]	; (800d43c <TIM_OC1_SetConfig+0x118>)
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	d003      	beq.n	800d3e2 <TIM_OC1_SetConfig+0xbe>
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	4a18      	ldr	r2, [pc, #96]	; (800d440 <TIM_OC1_SetConfig+0x11c>)
 800d3de:	4293      	cmp	r3, r2
 800d3e0:	d111      	bne.n	800d406 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d3e2:	693b      	ldr	r3, [r7, #16]
 800d3e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d3e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d3ea:	693b      	ldr	r3, [r7, #16]
 800d3ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d3f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	695b      	ldr	r3, [r3, #20]
 800d3f6:	693a      	ldr	r2, [r7, #16]
 800d3f8:	4313      	orrs	r3, r2
 800d3fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	699b      	ldr	r3, [r3, #24]
 800d400:	693a      	ldr	r2, [r7, #16]
 800d402:	4313      	orrs	r3, r2
 800d404:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	693a      	ldr	r2, [r7, #16]
 800d40a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	68fa      	ldr	r2, [r7, #12]
 800d410:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	685a      	ldr	r2, [r3, #4]
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	697a      	ldr	r2, [r7, #20]
 800d41e:	621a      	str	r2, [r3, #32]
}
 800d420:	bf00      	nop
 800d422:	371c      	adds	r7, #28
 800d424:	46bd      	mov	sp, r7
 800d426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42a:	4770      	bx	lr
 800d42c:	fffeff8f 	.word	0xfffeff8f
 800d430:	40010000 	.word	0x40010000
 800d434:	40010400 	.word	0x40010400
 800d438:	40014000 	.word	0x40014000
 800d43c:	40014400 	.word	0x40014400
 800d440:	40014800 	.word	0x40014800

0800d444 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d444:	b480      	push	{r7}
 800d446:	b087      	sub	sp, #28
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
 800d44c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	6a1b      	ldr	r3, [r3, #32]
 800d452:	f023 0210 	bic.w	r2, r3, #16
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	6a1b      	ldr	r3, [r3, #32]
 800d45e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	685b      	ldr	r3, [r3, #4]
 800d464:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	699b      	ldr	r3, [r3, #24]
 800d46a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d46c:	68fa      	ldr	r2, [r7, #12]
 800d46e:	4b34      	ldr	r3, [pc, #208]	; (800d540 <TIM_OC2_SetConfig+0xfc>)
 800d470:	4013      	ands	r3, r2
 800d472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d47a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	021b      	lsls	r3, r3, #8
 800d482:	68fa      	ldr	r2, [r7, #12]
 800d484:	4313      	orrs	r3, r2
 800d486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d488:	697b      	ldr	r3, [r7, #20]
 800d48a:	f023 0320 	bic.w	r3, r3, #32
 800d48e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	689b      	ldr	r3, [r3, #8]
 800d494:	011b      	lsls	r3, r3, #4
 800d496:	697a      	ldr	r2, [r7, #20]
 800d498:	4313      	orrs	r3, r2
 800d49a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	4a29      	ldr	r2, [pc, #164]	; (800d544 <TIM_OC2_SetConfig+0x100>)
 800d4a0:	4293      	cmp	r3, r2
 800d4a2:	d003      	beq.n	800d4ac <TIM_OC2_SetConfig+0x68>
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	4a28      	ldr	r2, [pc, #160]	; (800d548 <TIM_OC2_SetConfig+0x104>)
 800d4a8:	4293      	cmp	r3, r2
 800d4aa:	d10d      	bne.n	800d4c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d4ac:	697b      	ldr	r3, [r7, #20]
 800d4ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d4b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	68db      	ldr	r3, [r3, #12]
 800d4b8:	011b      	lsls	r3, r3, #4
 800d4ba:	697a      	ldr	r2, [r7, #20]
 800d4bc:	4313      	orrs	r3, r2
 800d4be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d4c0:	697b      	ldr	r3, [r7, #20]
 800d4c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d4c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	4a1e      	ldr	r2, [pc, #120]	; (800d544 <TIM_OC2_SetConfig+0x100>)
 800d4cc:	4293      	cmp	r3, r2
 800d4ce:	d00f      	beq.n	800d4f0 <TIM_OC2_SetConfig+0xac>
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	4a1d      	ldr	r2, [pc, #116]	; (800d548 <TIM_OC2_SetConfig+0x104>)
 800d4d4:	4293      	cmp	r3, r2
 800d4d6:	d00b      	beq.n	800d4f0 <TIM_OC2_SetConfig+0xac>
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	4a1c      	ldr	r2, [pc, #112]	; (800d54c <TIM_OC2_SetConfig+0x108>)
 800d4dc:	4293      	cmp	r3, r2
 800d4de:	d007      	beq.n	800d4f0 <TIM_OC2_SetConfig+0xac>
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	4a1b      	ldr	r2, [pc, #108]	; (800d550 <TIM_OC2_SetConfig+0x10c>)
 800d4e4:	4293      	cmp	r3, r2
 800d4e6:	d003      	beq.n	800d4f0 <TIM_OC2_SetConfig+0xac>
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	4a1a      	ldr	r2, [pc, #104]	; (800d554 <TIM_OC2_SetConfig+0x110>)
 800d4ec:	4293      	cmp	r3, r2
 800d4ee:	d113      	bne.n	800d518 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d4f0:	693b      	ldr	r3, [r7, #16]
 800d4f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d4f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d4f8:	693b      	ldr	r3, [r7, #16]
 800d4fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d4fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	695b      	ldr	r3, [r3, #20]
 800d504:	009b      	lsls	r3, r3, #2
 800d506:	693a      	ldr	r2, [r7, #16]
 800d508:	4313      	orrs	r3, r2
 800d50a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	699b      	ldr	r3, [r3, #24]
 800d510:	009b      	lsls	r3, r3, #2
 800d512:	693a      	ldr	r2, [r7, #16]
 800d514:	4313      	orrs	r3, r2
 800d516:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	693a      	ldr	r2, [r7, #16]
 800d51c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	68fa      	ldr	r2, [r7, #12]
 800d522:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	685a      	ldr	r2, [r3, #4]
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	697a      	ldr	r2, [r7, #20]
 800d530:	621a      	str	r2, [r3, #32]
}
 800d532:	bf00      	nop
 800d534:	371c      	adds	r7, #28
 800d536:	46bd      	mov	sp, r7
 800d538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53c:	4770      	bx	lr
 800d53e:	bf00      	nop
 800d540:	feff8fff 	.word	0xfeff8fff
 800d544:	40010000 	.word	0x40010000
 800d548:	40010400 	.word	0x40010400
 800d54c:	40014000 	.word	0x40014000
 800d550:	40014400 	.word	0x40014400
 800d554:	40014800 	.word	0x40014800

0800d558 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d558:	b480      	push	{r7}
 800d55a:	b087      	sub	sp, #28
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
 800d560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6a1b      	ldr	r3, [r3, #32]
 800d566:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6a1b      	ldr	r3, [r3, #32]
 800d572:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	685b      	ldr	r3, [r3, #4]
 800d578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	69db      	ldr	r3, [r3, #28]
 800d57e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d580:	68fa      	ldr	r2, [r7, #12]
 800d582:	4b33      	ldr	r3, [pc, #204]	; (800d650 <TIM_OC3_SetConfig+0xf8>)
 800d584:	4013      	ands	r3, r2
 800d586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	f023 0303 	bic.w	r3, r3, #3
 800d58e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	68fa      	ldr	r2, [r7, #12]
 800d596:	4313      	orrs	r3, r2
 800d598:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d59a:	697b      	ldr	r3, [r7, #20]
 800d59c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d5a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	689b      	ldr	r3, [r3, #8]
 800d5a6:	021b      	lsls	r3, r3, #8
 800d5a8:	697a      	ldr	r2, [r7, #20]
 800d5aa:	4313      	orrs	r3, r2
 800d5ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	4a28      	ldr	r2, [pc, #160]	; (800d654 <TIM_OC3_SetConfig+0xfc>)
 800d5b2:	4293      	cmp	r3, r2
 800d5b4:	d003      	beq.n	800d5be <TIM_OC3_SetConfig+0x66>
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	4a27      	ldr	r2, [pc, #156]	; (800d658 <TIM_OC3_SetConfig+0x100>)
 800d5ba:	4293      	cmp	r3, r2
 800d5bc:	d10d      	bne.n	800d5da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d5c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	68db      	ldr	r3, [r3, #12]
 800d5ca:	021b      	lsls	r3, r3, #8
 800d5cc:	697a      	ldr	r2, [r7, #20]
 800d5ce:	4313      	orrs	r3, r2
 800d5d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d5d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	4a1d      	ldr	r2, [pc, #116]	; (800d654 <TIM_OC3_SetConfig+0xfc>)
 800d5de:	4293      	cmp	r3, r2
 800d5e0:	d00f      	beq.n	800d602 <TIM_OC3_SetConfig+0xaa>
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	4a1c      	ldr	r2, [pc, #112]	; (800d658 <TIM_OC3_SetConfig+0x100>)
 800d5e6:	4293      	cmp	r3, r2
 800d5e8:	d00b      	beq.n	800d602 <TIM_OC3_SetConfig+0xaa>
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	4a1b      	ldr	r2, [pc, #108]	; (800d65c <TIM_OC3_SetConfig+0x104>)
 800d5ee:	4293      	cmp	r3, r2
 800d5f0:	d007      	beq.n	800d602 <TIM_OC3_SetConfig+0xaa>
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	4a1a      	ldr	r2, [pc, #104]	; (800d660 <TIM_OC3_SetConfig+0x108>)
 800d5f6:	4293      	cmp	r3, r2
 800d5f8:	d003      	beq.n	800d602 <TIM_OC3_SetConfig+0xaa>
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	4a19      	ldr	r2, [pc, #100]	; (800d664 <TIM_OC3_SetConfig+0x10c>)
 800d5fe:	4293      	cmp	r3, r2
 800d600:	d113      	bne.n	800d62a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d602:	693b      	ldr	r3, [r7, #16]
 800d604:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d608:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d60a:	693b      	ldr	r3, [r7, #16]
 800d60c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d610:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d612:	683b      	ldr	r3, [r7, #0]
 800d614:	695b      	ldr	r3, [r3, #20]
 800d616:	011b      	lsls	r3, r3, #4
 800d618:	693a      	ldr	r2, [r7, #16]
 800d61a:	4313      	orrs	r3, r2
 800d61c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	699b      	ldr	r3, [r3, #24]
 800d622:	011b      	lsls	r3, r3, #4
 800d624:	693a      	ldr	r2, [r7, #16]
 800d626:	4313      	orrs	r3, r2
 800d628:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	693a      	ldr	r2, [r7, #16]
 800d62e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	68fa      	ldr	r2, [r7, #12]
 800d634:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	685a      	ldr	r2, [r3, #4]
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	697a      	ldr	r2, [r7, #20]
 800d642:	621a      	str	r2, [r3, #32]
}
 800d644:	bf00      	nop
 800d646:	371c      	adds	r7, #28
 800d648:	46bd      	mov	sp, r7
 800d64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64e:	4770      	bx	lr
 800d650:	fffeff8f 	.word	0xfffeff8f
 800d654:	40010000 	.word	0x40010000
 800d658:	40010400 	.word	0x40010400
 800d65c:	40014000 	.word	0x40014000
 800d660:	40014400 	.word	0x40014400
 800d664:	40014800 	.word	0x40014800

0800d668 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d668:	b480      	push	{r7}
 800d66a:	b087      	sub	sp, #28
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
 800d670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6a1b      	ldr	r3, [r3, #32]
 800d676:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6a1b      	ldr	r3, [r3, #32]
 800d682:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	685b      	ldr	r3, [r3, #4]
 800d688:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	69db      	ldr	r3, [r3, #28]
 800d68e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d690:	68fa      	ldr	r2, [r7, #12]
 800d692:	4b24      	ldr	r3, [pc, #144]	; (800d724 <TIM_OC4_SetConfig+0xbc>)
 800d694:	4013      	ands	r3, r2
 800d696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d69e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	021b      	lsls	r3, r3, #8
 800d6a6:	68fa      	ldr	r2, [r7, #12]
 800d6a8:	4313      	orrs	r3, r2
 800d6aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d6ac:	693b      	ldr	r3, [r7, #16]
 800d6ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d6b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	689b      	ldr	r3, [r3, #8]
 800d6b8:	031b      	lsls	r3, r3, #12
 800d6ba:	693a      	ldr	r2, [r7, #16]
 800d6bc:	4313      	orrs	r3, r2
 800d6be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	4a19      	ldr	r2, [pc, #100]	; (800d728 <TIM_OC4_SetConfig+0xc0>)
 800d6c4:	4293      	cmp	r3, r2
 800d6c6:	d00f      	beq.n	800d6e8 <TIM_OC4_SetConfig+0x80>
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	4a18      	ldr	r2, [pc, #96]	; (800d72c <TIM_OC4_SetConfig+0xc4>)
 800d6cc:	4293      	cmp	r3, r2
 800d6ce:	d00b      	beq.n	800d6e8 <TIM_OC4_SetConfig+0x80>
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	4a17      	ldr	r2, [pc, #92]	; (800d730 <TIM_OC4_SetConfig+0xc8>)
 800d6d4:	4293      	cmp	r3, r2
 800d6d6:	d007      	beq.n	800d6e8 <TIM_OC4_SetConfig+0x80>
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	4a16      	ldr	r2, [pc, #88]	; (800d734 <TIM_OC4_SetConfig+0xcc>)
 800d6dc:	4293      	cmp	r3, r2
 800d6de:	d003      	beq.n	800d6e8 <TIM_OC4_SetConfig+0x80>
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	4a15      	ldr	r2, [pc, #84]	; (800d738 <TIM_OC4_SetConfig+0xd0>)
 800d6e4:	4293      	cmp	r3, r2
 800d6e6:	d109      	bne.n	800d6fc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d6e8:	697b      	ldr	r3, [r7, #20]
 800d6ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d6ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d6f0:	683b      	ldr	r3, [r7, #0]
 800d6f2:	695b      	ldr	r3, [r3, #20]
 800d6f4:	019b      	lsls	r3, r3, #6
 800d6f6:	697a      	ldr	r2, [r7, #20]
 800d6f8:	4313      	orrs	r3, r2
 800d6fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	697a      	ldr	r2, [r7, #20]
 800d700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	68fa      	ldr	r2, [r7, #12]
 800d706:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	685a      	ldr	r2, [r3, #4]
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	693a      	ldr	r2, [r7, #16]
 800d714:	621a      	str	r2, [r3, #32]
}
 800d716:	bf00      	nop
 800d718:	371c      	adds	r7, #28
 800d71a:	46bd      	mov	sp, r7
 800d71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d720:	4770      	bx	lr
 800d722:	bf00      	nop
 800d724:	feff8fff 	.word	0xfeff8fff
 800d728:	40010000 	.word	0x40010000
 800d72c:	40010400 	.word	0x40010400
 800d730:	40014000 	.word	0x40014000
 800d734:	40014400 	.word	0x40014400
 800d738:	40014800 	.word	0x40014800

0800d73c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d73c:	b480      	push	{r7}
 800d73e:	b087      	sub	sp, #28
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
 800d744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6a1b      	ldr	r3, [r3, #32]
 800d74a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6a1b      	ldr	r3, [r3, #32]
 800d756:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	685b      	ldr	r3, [r3, #4]
 800d75c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d764:	68fa      	ldr	r2, [r7, #12]
 800d766:	4b21      	ldr	r3, [pc, #132]	; (800d7ec <TIM_OC5_SetConfig+0xb0>)
 800d768:	4013      	ands	r3, r2
 800d76a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	68fa      	ldr	r2, [r7, #12]
 800d772:	4313      	orrs	r3, r2
 800d774:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d776:	693b      	ldr	r3, [r7, #16]
 800d778:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d77c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	689b      	ldr	r3, [r3, #8]
 800d782:	041b      	lsls	r3, r3, #16
 800d784:	693a      	ldr	r2, [r7, #16]
 800d786:	4313      	orrs	r3, r2
 800d788:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	4a18      	ldr	r2, [pc, #96]	; (800d7f0 <TIM_OC5_SetConfig+0xb4>)
 800d78e:	4293      	cmp	r3, r2
 800d790:	d00f      	beq.n	800d7b2 <TIM_OC5_SetConfig+0x76>
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	4a17      	ldr	r2, [pc, #92]	; (800d7f4 <TIM_OC5_SetConfig+0xb8>)
 800d796:	4293      	cmp	r3, r2
 800d798:	d00b      	beq.n	800d7b2 <TIM_OC5_SetConfig+0x76>
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	4a16      	ldr	r2, [pc, #88]	; (800d7f8 <TIM_OC5_SetConfig+0xbc>)
 800d79e:	4293      	cmp	r3, r2
 800d7a0:	d007      	beq.n	800d7b2 <TIM_OC5_SetConfig+0x76>
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	4a15      	ldr	r2, [pc, #84]	; (800d7fc <TIM_OC5_SetConfig+0xc0>)
 800d7a6:	4293      	cmp	r3, r2
 800d7a8:	d003      	beq.n	800d7b2 <TIM_OC5_SetConfig+0x76>
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	4a14      	ldr	r2, [pc, #80]	; (800d800 <TIM_OC5_SetConfig+0xc4>)
 800d7ae:	4293      	cmp	r3, r2
 800d7b0:	d109      	bne.n	800d7c6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d7b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	695b      	ldr	r3, [r3, #20]
 800d7be:	021b      	lsls	r3, r3, #8
 800d7c0:	697a      	ldr	r2, [r7, #20]
 800d7c2:	4313      	orrs	r3, r2
 800d7c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	697a      	ldr	r2, [r7, #20]
 800d7ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	68fa      	ldr	r2, [r7, #12]
 800d7d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	685a      	ldr	r2, [r3, #4]
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	693a      	ldr	r2, [r7, #16]
 800d7de:	621a      	str	r2, [r3, #32]
}
 800d7e0:	bf00      	nop
 800d7e2:	371c      	adds	r7, #28
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ea:	4770      	bx	lr
 800d7ec:	fffeff8f 	.word	0xfffeff8f
 800d7f0:	40010000 	.word	0x40010000
 800d7f4:	40010400 	.word	0x40010400
 800d7f8:	40014000 	.word	0x40014000
 800d7fc:	40014400 	.word	0x40014400
 800d800:	40014800 	.word	0x40014800

0800d804 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d804:	b480      	push	{r7}
 800d806:	b087      	sub	sp, #28
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
 800d80c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6a1b      	ldr	r3, [r3, #32]
 800d812:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	6a1b      	ldr	r3, [r3, #32]
 800d81e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	685b      	ldr	r3, [r3, #4]
 800d824:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d82a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d82c:	68fa      	ldr	r2, [r7, #12]
 800d82e:	4b22      	ldr	r3, [pc, #136]	; (800d8b8 <TIM_OC6_SetConfig+0xb4>)
 800d830:	4013      	ands	r3, r2
 800d832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	021b      	lsls	r3, r3, #8
 800d83a:	68fa      	ldr	r2, [r7, #12]
 800d83c:	4313      	orrs	r3, r2
 800d83e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d840:	693b      	ldr	r3, [r7, #16]
 800d842:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d846:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	689b      	ldr	r3, [r3, #8]
 800d84c:	051b      	lsls	r3, r3, #20
 800d84e:	693a      	ldr	r2, [r7, #16]
 800d850:	4313      	orrs	r3, r2
 800d852:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	4a19      	ldr	r2, [pc, #100]	; (800d8bc <TIM_OC6_SetConfig+0xb8>)
 800d858:	4293      	cmp	r3, r2
 800d85a:	d00f      	beq.n	800d87c <TIM_OC6_SetConfig+0x78>
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	4a18      	ldr	r2, [pc, #96]	; (800d8c0 <TIM_OC6_SetConfig+0xbc>)
 800d860:	4293      	cmp	r3, r2
 800d862:	d00b      	beq.n	800d87c <TIM_OC6_SetConfig+0x78>
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	4a17      	ldr	r2, [pc, #92]	; (800d8c4 <TIM_OC6_SetConfig+0xc0>)
 800d868:	4293      	cmp	r3, r2
 800d86a:	d007      	beq.n	800d87c <TIM_OC6_SetConfig+0x78>
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	4a16      	ldr	r2, [pc, #88]	; (800d8c8 <TIM_OC6_SetConfig+0xc4>)
 800d870:	4293      	cmp	r3, r2
 800d872:	d003      	beq.n	800d87c <TIM_OC6_SetConfig+0x78>
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	4a15      	ldr	r2, [pc, #84]	; (800d8cc <TIM_OC6_SetConfig+0xc8>)
 800d878:	4293      	cmp	r3, r2
 800d87a:	d109      	bne.n	800d890 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d882:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	695b      	ldr	r3, [r3, #20]
 800d888:	029b      	lsls	r3, r3, #10
 800d88a:	697a      	ldr	r2, [r7, #20]
 800d88c:	4313      	orrs	r3, r2
 800d88e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	697a      	ldr	r2, [r7, #20]
 800d894:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	68fa      	ldr	r2, [r7, #12]
 800d89a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	685a      	ldr	r2, [r3, #4]
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	693a      	ldr	r2, [r7, #16]
 800d8a8:	621a      	str	r2, [r3, #32]
}
 800d8aa:	bf00      	nop
 800d8ac:	371c      	adds	r7, #28
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b4:	4770      	bx	lr
 800d8b6:	bf00      	nop
 800d8b8:	feff8fff 	.word	0xfeff8fff
 800d8bc:	40010000 	.word	0x40010000
 800d8c0:	40010400 	.word	0x40010400
 800d8c4:	40014000 	.word	0x40014000
 800d8c8:	40014400 	.word	0x40014400
 800d8cc:	40014800 	.word	0x40014800

0800d8d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b087      	sub	sp, #28
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	60f8      	str	r0, [r7, #12]
 800d8d8:	60b9      	str	r1, [r7, #8]
 800d8da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	6a1b      	ldr	r3, [r3, #32]
 800d8e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	6a1b      	ldr	r3, [r3, #32]
 800d8e6:	f023 0201 	bic.w	r2, r3, #1
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	699b      	ldr	r3, [r3, #24]
 800d8f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d8f4:	693b      	ldr	r3, [r7, #16]
 800d8f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d8fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	011b      	lsls	r3, r3, #4
 800d900:	693a      	ldr	r2, [r7, #16]
 800d902:	4313      	orrs	r3, r2
 800d904:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	f023 030a 	bic.w	r3, r3, #10
 800d90c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d90e:	697a      	ldr	r2, [r7, #20]
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	4313      	orrs	r3, r2
 800d914:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	693a      	ldr	r2, [r7, #16]
 800d91a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	697a      	ldr	r2, [r7, #20]
 800d920:	621a      	str	r2, [r3, #32]
}
 800d922:	bf00      	nop
 800d924:	371c      	adds	r7, #28
 800d926:	46bd      	mov	sp, r7
 800d928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92c:	4770      	bx	lr

0800d92e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d92e:	b480      	push	{r7}
 800d930:	b087      	sub	sp, #28
 800d932:	af00      	add	r7, sp, #0
 800d934:	60f8      	str	r0, [r7, #12]
 800d936:	60b9      	str	r1, [r7, #8]
 800d938:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	6a1b      	ldr	r3, [r3, #32]
 800d93e:	f023 0210 	bic.w	r2, r3, #16
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	699b      	ldr	r3, [r3, #24]
 800d94a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	6a1b      	ldr	r3, [r3, #32]
 800d950:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d952:	697b      	ldr	r3, [r7, #20]
 800d954:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d958:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	031b      	lsls	r3, r3, #12
 800d95e:	697a      	ldr	r2, [r7, #20]
 800d960:	4313      	orrs	r3, r2
 800d962:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d964:	693b      	ldr	r3, [r7, #16]
 800d966:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d96a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	011b      	lsls	r3, r3, #4
 800d970:	693a      	ldr	r2, [r7, #16]
 800d972:	4313      	orrs	r3, r2
 800d974:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	697a      	ldr	r2, [r7, #20]
 800d97a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	693a      	ldr	r2, [r7, #16]
 800d980:	621a      	str	r2, [r3, #32]
}
 800d982:	bf00      	nop
 800d984:	371c      	adds	r7, #28
 800d986:	46bd      	mov	sp, r7
 800d988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98c:	4770      	bx	lr
	...

0800d990 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d990:	b480      	push	{r7}
 800d992:	b085      	sub	sp, #20
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
 800d998:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	689b      	ldr	r3, [r3, #8]
 800d99e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d9a0:	68fa      	ldr	r2, [r7, #12]
 800d9a2:	4b09      	ldr	r3, [pc, #36]	; (800d9c8 <TIM_ITRx_SetConfig+0x38>)
 800d9a4:	4013      	ands	r3, r2
 800d9a6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d9a8:	683a      	ldr	r2, [r7, #0]
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	4313      	orrs	r3, r2
 800d9ae:	f043 0307 	orr.w	r3, r3, #7
 800d9b2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	68fa      	ldr	r2, [r7, #12]
 800d9b8:	609a      	str	r2, [r3, #8]
}
 800d9ba:	bf00      	nop
 800d9bc:	3714      	adds	r7, #20
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c4:	4770      	bx	lr
 800d9c6:	bf00      	nop
 800d9c8:	ffcfff8f 	.word	0xffcfff8f

0800d9cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d9cc:	b480      	push	{r7}
 800d9ce:	b087      	sub	sp, #28
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	60f8      	str	r0, [r7, #12]
 800d9d4:	60b9      	str	r1, [r7, #8]
 800d9d6:	607a      	str	r2, [r7, #4]
 800d9d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	689b      	ldr	r3, [r3, #8]
 800d9de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d9e0:	697b      	ldr	r3, [r7, #20]
 800d9e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d9e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	021a      	lsls	r2, r3, #8
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	431a      	orrs	r2, r3
 800d9f0:	68bb      	ldr	r3, [r7, #8]
 800d9f2:	4313      	orrs	r3, r2
 800d9f4:	697a      	ldr	r2, [r7, #20]
 800d9f6:	4313      	orrs	r3, r2
 800d9f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	697a      	ldr	r2, [r7, #20]
 800d9fe:	609a      	str	r2, [r3, #8]
}
 800da00:	bf00      	nop
 800da02:	371c      	adds	r7, #28
 800da04:	46bd      	mov	sp, r7
 800da06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0a:	4770      	bx	lr

0800da0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800da0c:	b480      	push	{r7}
 800da0e:	b087      	sub	sp, #28
 800da10:	af00      	add	r7, sp, #0
 800da12:	60f8      	str	r0, [r7, #12]
 800da14:	60b9      	str	r1, [r7, #8]
 800da16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	f003 031f 	and.w	r3, r3, #31
 800da1e:	2201      	movs	r2, #1
 800da20:	fa02 f303 	lsl.w	r3, r2, r3
 800da24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	6a1a      	ldr	r2, [r3, #32]
 800da2a:	697b      	ldr	r3, [r7, #20]
 800da2c:	43db      	mvns	r3, r3
 800da2e:	401a      	ands	r2, r3
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	6a1a      	ldr	r2, [r3, #32]
 800da38:	68bb      	ldr	r3, [r7, #8]
 800da3a:	f003 031f 	and.w	r3, r3, #31
 800da3e:	6879      	ldr	r1, [r7, #4]
 800da40:	fa01 f303 	lsl.w	r3, r1, r3
 800da44:	431a      	orrs	r2, r3
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	621a      	str	r2, [r3, #32]
}
 800da4a:	bf00      	nop
 800da4c:	371c      	adds	r7, #28
 800da4e:	46bd      	mov	sp, r7
 800da50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da54:	4770      	bx	lr
	...

0800da58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800da58:	b480      	push	{r7}
 800da5a:	b085      	sub	sp, #20
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
 800da60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da68:	2b01      	cmp	r3, #1
 800da6a:	d101      	bne.n	800da70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800da6c:	2302      	movs	r3, #2
 800da6e:	e077      	b.n	800db60 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	2201      	movs	r2, #1
 800da74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2202      	movs	r2, #2
 800da7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	685b      	ldr	r3, [r3, #4]
 800da86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	689b      	ldr	r3, [r3, #8]
 800da8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	4a35      	ldr	r2, [pc, #212]	; (800db6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800da96:	4293      	cmp	r3, r2
 800da98:	d004      	beq.n	800daa4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	4a34      	ldr	r2, [pc, #208]	; (800db70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800daa0:	4293      	cmp	r3, r2
 800daa2:	d108      	bne.n	800dab6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800daaa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	685b      	ldr	r3, [r3, #4]
 800dab0:	68fa      	ldr	r2, [r7, #12]
 800dab2:	4313      	orrs	r3, r2
 800dab4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dabc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	68fa      	ldr	r2, [r7, #12]
 800dac4:	4313      	orrs	r3, r2
 800dac6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	68fa      	ldr	r2, [r7, #12]
 800dace:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	4a25      	ldr	r2, [pc, #148]	; (800db6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800dad6:	4293      	cmp	r3, r2
 800dad8:	d02c      	beq.n	800db34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dae2:	d027      	beq.n	800db34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	4a22      	ldr	r2, [pc, #136]	; (800db74 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800daea:	4293      	cmp	r3, r2
 800daec:	d022      	beq.n	800db34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	4a21      	ldr	r2, [pc, #132]	; (800db78 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800daf4:	4293      	cmp	r3, r2
 800daf6:	d01d      	beq.n	800db34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	4a1f      	ldr	r2, [pc, #124]	; (800db7c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800dafe:	4293      	cmp	r3, r2
 800db00:	d018      	beq.n	800db34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	4a1a      	ldr	r2, [pc, #104]	; (800db70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800db08:	4293      	cmp	r3, r2
 800db0a:	d013      	beq.n	800db34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	4a1b      	ldr	r2, [pc, #108]	; (800db80 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800db12:	4293      	cmp	r3, r2
 800db14:	d00e      	beq.n	800db34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	4a1a      	ldr	r2, [pc, #104]	; (800db84 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800db1c:	4293      	cmp	r3, r2
 800db1e:	d009      	beq.n	800db34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	4a18      	ldr	r2, [pc, #96]	; (800db88 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800db26:	4293      	cmp	r3, r2
 800db28:	d004      	beq.n	800db34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	4a17      	ldr	r2, [pc, #92]	; (800db8c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800db30:	4293      	cmp	r3, r2
 800db32:	d10c      	bne.n	800db4e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800db34:	68bb      	ldr	r3, [r7, #8]
 800db36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800db3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	689b      	ldr	r3, [r3, #8]
 800db40:	68ba      	ldr	r2, [r7, #8]
 800db42:	4313      	orrs	r3, r2
 800db44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	68ba      	ldr	r2, [r7, #8]
 800db4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	2201      	movs	r2, #1
 800db52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	2200      	movs	r2, #0
 800db5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800db5e:	2300      	movs	r3, #0
}
 800db60:	4618      	mov	r0, r3
 800db62:	3714      	adds	r7, #20
 800db64:	46bd      	mov	sp, r7
 800db66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6a:	4770      	bx	lr
 800db6c:	40010000 	.word	0x40010000
 800db70:	40010400 	.word	0x40010400
 800db74:	40000400 	.word	0x40000400
 800db78:	40000800 	.word	0x40000800
 800db7c:	40000c00 	.word	0x40000c00
 800db80:	40001800 	.word	0x40001800
 800db84:	40014000 	.word	0x40014000
 800db88:	4000e000 	.word	0x4000e000
 800db8c:	4000e400 	.word	0x4000e400

0800db90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800db90:	b480      	push	{r7}
 800db92:	b085      	sub	sp, #20
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
 800db98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800db9a:	2300      	movs	r3, #0
 800db9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dba4:	2b01      	cmp	r3, #1
 800dba6:	d101      	bne.n	800dbac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800dba8:	2302      	movs	r3, #2
 800dbaa:	e087      	b.n	800dcbc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2201      	movs	r2, #1
 800dbb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	68db      	ldr	r3, [r3, #12]
 800dbbe:	4313      	orrs	r3, r2
 800dbc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dbc8:	683b      	ldr	r3, [r7, #0]
 800dbca:	689b      	ldr	r3, [r3, #8]
 800dbcc:	4313      	orrs	r3, r2
 800dbce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	685b      	ldr	r3, [r3, #4]
 800dbda:	4313      	orrs	r3, r2
 800dbdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	4313      	orrs	r3, r2
 800dbea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	691b      	ldr	r3, [r3, #16]
 800dbf6:	4313      	orrs	r3, r2
 800dbf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	695b      	ldr	r3, [r3, #20]
 800dc04:	4313      	orrs	r3, r2
 800dc06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800dc0e:	683b      	ldr	r3, [r7, #0]
 800dc10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc12:	4313      	orrs	r3, r2
 800dc14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	699b      	ldr	r3, [r3, #24]
 800dc20:	041b      	lsls	r3, r3, #16
 800dc22:	4313      	orrs	r3, r2
 800dc24:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	4a27      	ldr	r2, [pc, #156]	; (800dcc8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800dc2c:	4293      	cmp	r3, r2
 800dc2e:	d004      	beq.n	800dc3a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	4a25      	ldr	r2, [pc, #148]	; (800dccc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800dc36:	4293      	cmp	r3, r2
 800dc38:	d106      	bne.n	800dc48 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800dc40:	683b      	ldr	r3, [r7, #0]
 800dc42:	69db      	ldr	r3, [r3, #28]
 800dc44:	4313      	orrs	r3, r2
 800dc46:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	4a1e      	ldr	r2, [pc, #120]	; (800dcc8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800dc4e:	4293      	cmp	r3, r2
 800dc50:	d004      	beq.n	800dc5c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	4a1d      	ldr	r2, [pc, #116]	; (800dccc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800dc58:	4293      	cmp	r3, r2
 800dc5a:	d126      	bne.n	800dcaa <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc66:	051b      	lsls	r3, r3, #20
 800dc68:	4313      	orrs	r3, r2
 800dc6a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	6a1b      	ldr	r3, [r3, #32]
 800dc76:	4313      	orrs	r3, r2
 800dc78:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc84:	4313      	orrs	r3, r2
 800dc86:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	4a0e      	ldr	r2, [pc, #56]	; (800dcc8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800dc8e:	4293      	cmp	r3, r2
 800dc90:	d004      	beq.n	800dc9c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	4a0d      	ldr	r2, [pc, #52]	; (800dccc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800dc98:	4293      	cmp	r3, r2
 800dc9a:	d106      	bne.n	800dcaa <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dca6:	4313      	orrs	r3, r2
 800dca8:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	68fa      	ldr	r2, [r7, #12]
 800dcb0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dcba:	2300      	movs	r3, #0
}
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	3714      	adds	r7, #20
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc6:	4770      	bx	lr
 800dcc8:	40010000 	.word	0x40010000
 800dccc:	40010400 	.word	0x40010400

0800dcd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dcd0:	b480      	push	{r7}
 800dcd2:	b083      	sub	sp, #12
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dcd8:	bf00      	nop
 800dcda:	370c      	adds	r7, #12
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce2:	4770      	bx	lr

0800dce4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dce4:	b480      	push	{r7}
 800dce6:	b083      	sub	sp, #12
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dcec:	bf00      	nop
 800dcee:	370c      	adds	r7, #12
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf6:	4770      	bx	lr

0800dcf8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dcf8:	b480      	push	{r7}
 800dcfa:	b083      	sub	sp, #12
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dd00:	bf00      	nop
 800dd02:	370c      	adds	r7, #12
 800dd04:	46bd      	mov	sp, r7
 800dd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0a:	4770      	bx	lr

0800dd0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b082      	sub	sp, #8
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d101      	bne.n	800dd1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dd1a:	2301      	movs	r3, #1
 800dd1c:	e042      	b.n	800dda4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d106      	bne.n	800dd36 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dd30:	6878      	ldr	r0, [r7, #4]
 800dd32:	f7f7 fe1b 	bl	800596c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	2224      	movs	r2, #36	; 0x24
 800dd3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	681a      	ldr	r2, [r3, #0]
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	f022 0201 	bic.w	r2, r2, #1
 800dd4c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dd4e:	6878      	ldr	r0, [r7, #4]
 800dd50:	f000 fdaa 	bl	800e8a8 <UART_SetConfig>
 800dd54:	4603      	mov	r3, r0
 800dd56:	2b01      	cmp	r3, #1
 800dd58:	d101      	bne.n	800dd5e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800dd5a:	2301      	movs	r3, #1
 800dd5c:	e022      	b.n	800dda4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d002      	beq.n	800dd6c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f001 fc0a 	bl	800f580 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	685a      	ldr	r2, [r3, #4]
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dd7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	689a      	ldr	r2, [r3, #8]
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dd8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	681a      	ldr	r2, [r3, #0]
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	f042 0201 	orr.w	r2, r2, #1
 800dd9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dd9c:	6878      	ldr	r0, [r7, #4]
 800dd9e:	f001 fc91 	bl	800f6c4 <UART_CheckIdleState>
 800dda2:	4603      	mov	r3, r0
}
 800dda4:	4618      	mov	r0, r3
 800dda6:	3708      	adds	r7, #8
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	bd80      	pop	{r7, pc}

0800ddac <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b082      	sub	sp, #8
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d101      	bne.n	800ddbe <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800ddba:	2301      	movs	r3, #1
 800ddbc:	e031      	b.n	800de22 <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2224      	movs	r2, #36	; 0x24
 800ddc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	681a      	ldr	r2, [r3, #0]
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	f022 0201 	bic.w	r2, r2, #1
 800ddd4:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	2200      	movs	r2, #0
 800dddc:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	2200      	movs	r2, #0
 800dde4:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	2200      	movs	r2, #0
 800ddec:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f7f7 ff14 	bl	8005c1c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->gState = HAL_UART_STATE_RESET;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2200      	movs	r2, #0
 800de00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	2200      	movs	r2, #0
 800de08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2200      	movs	r2, #0
 800de10:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	2200      	movs	r2, #0
 800de16:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2200      	movs	r2, #0
 800de1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800de20:	2300      	movs	r3, #0
}
 800de22:	4618      	mov	r0, r3
 800de24:	3708      	adds	r7, #8
 800de26:	46bd      	mov	sp, r7
 800de28:	bd80      	pop	{r7, pc}

0800de2a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800de2a:	b580      	push	{r7, lr}
 800de2c:	b08a      	sub	sp, #40	; 0x28
 800de2e:	af02      	add	r7, sp, #8
 800de30:	60f8      	str	r0, [r7, #12]
 800de32:	60b9      	str	r1, [r7, #8]
 800de34:	603b      	str	r3, [r7, #0]
 800de36:	4613      	mov	r3, r2
 800de38:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de40:	2b20      	cmp	r3, #32
 800de42:	d17b      	bne.n	800df3c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800de44:	68bb      	ldr	r3, [r7, #8]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d002      	beq.n	800de50 <HAL_UART_Transmit+0x26>
 800de4a:	88fb      	ldrh	r3, [r7, #6]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d101      	bne.n	800de54 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800de50:	2301      	movs	r3, #1
 800de52:	e074      	b.n	800df3e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	2200      	movs	r2, #0
 800de58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	2221      	movs	r2, #33	; 0x21
 800de60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800de64:	f7f8 f938 	bl	80060d8 <HAL_GetTick>
 800de68:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	88fa      	ldrh	r2, [r7, #6]
 800de6e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	88fa      	ldrh	r2, [r7, #6]
 800de76:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	689b      	ldr	r3, [r3, #8]
 800de7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de82:	d108      	bne.n	800de96 <HAL_UART_Transmit+0x6c>
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	691b      	ldr	r3, [r3, #16]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d104      	bne.n	800de96 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800de8c:	2300      	movs	r3, #0
 800de8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	61bb      	str	r3, [r7, #24]
 800de94:	e003      	b.n	800de9e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800de9a:	2300      	movs	r3, #0
 800de9c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800de9e:	e030      	b.n	800df02 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	9300      	str	r3, [sp, #0]
 800dea4:	697b      	ldr	r3, [r7, #20]
 800dea6:	2200      	movs	r2, #0
 800dea8:	2180      	movs	r1, #128	; 0x80
 800deaa:	68f8      	ldr	r0, [r7, #12]
 800deac:	f001 fcb4 	bl	800f818 <UART_WaitOnFlagUntilTimeout>
 800deb0:	4603      	mov	r3, r0
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d005      	beq.n	800dec2 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	2220      	movs	r2, #32
 800deba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800debe:	2303      	movs	r3, #3
 800dec0:	e03d      	b.n	800df3e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800dec2:	69fb      	ldr	r3, [r7, #28]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d10b      	bne.n	800dee0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800dec8:	69bb      	ldr	r3, [r7, #24]
 800deca:	881b      	ldrh	r3, [r3, #0]
 800decc:	461a      	mov	r2, r3
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ded6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ded8:	69bb      	ldr	r3, [r7, #24]
 800deda:	3302      	adds	r3, #2
 800dedc:	61bb      	str	r3, [r7, #24]
 800dede:	e007      	b.n	800def0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800dee0:	69fb      	ldr	r3, [r7, #28]
 800dee2:	781a      	ldrb	r2, [r3, #0]
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800deea:	69fb      	ldr	r3, [r7, #28]
 800deec:	3301      	adds	r3, #1
 800deee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800def6:	b29b      	uxth	r3, r3
 800def8:	3b01      	subs	r3, #1
 800defa:	b29a      	uxth	r2, r3
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800df08:	b29b      	uxth	r3, r3
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d1c8      	bne.n	800dea0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800df0e:	683b      	ldr	r3, [r7, #0]
 800df10:	9300      	str	r3, [sp, #0]
 800df12:	697b      	ldr	r3, [r7, #20]
 800df14:	2200      	movs	r2, #0
 800df16:	2140      	movs	r1, #64	; 0x40
 800df18:	68f8      	ldr	r0, [r7, #12]
 800df1a:	f001 fc7d 	bl	800f818 <UART_WaitOnFlagUntilTimeout>
 800df1e:	4603      	mov	r3, r0
 800df20:	2b00      	cmp	r3, #0
 800df22:	d005      	beq.n	800df30 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	2220      	movs	r2, #32
 800df28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800df2c:	2303      	movs	r3, #3
 800df2e:	e006      	b.n	800df3e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	2220      	movs	r2, #32
 800df34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800df38:	2300      	movs	r3, #0
 800df3a:	e000      	b.n	800df3e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800df3c:	2302      	movs	r3, #2
  }
}
 800df3e:	4618      	mov	r0, r3
 800df40:	3720      	adds	r7, #32
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}
	...

0800df48 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b08a      	sub	sp, #40	; 0x28
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	60f8      	str	r0, [r7, #12]
 800df50:	60b9      	str	r1, [r7, #8]
 800df52:	4613      	mov	r3, r2
 800df54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df5c:	2b20      	cmp	r3, #32
 800df5e:	d167      	bne.n	800e030 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d002      	beq.n	800df6c <HAL_UART_Transmit_DMA+0x24>
 800df66:	88fb      	ldrh	r3, [r7, #6]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d101      	bne.n	800df70 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800df6c:	2301      	movs	r3, #1
 800df6e:	e060      	b.n	800e032 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	68ba      	ldr	r2, [r7, #8]
 800df74:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	88fa      	ldrh	r2, [r7, #6]
 800df7a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	88fa      	ldrh	r2, [r7, #6]
 800df82:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	2200      	movs	r2, #0
 800df8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	2221      	movs	r2, #33	; 0x21
 800df92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d028      	beq.n	800dff0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dfa2:	4a26      	ldr	r2, [pc, #152]	; (800e03c <HAL_UART_Transmit_DMA+0xf4>)
 800dfa4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dfaa:	4a25      	ldr	r2, [pc, #148]	; (800e040 <HAL_UART_Transmit_DMA+0xf8>)
 800dfac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dfb2:	4a24      	ldr	r2, [pc, #144]	; (800e044 <HAL_UART_Transmit_DMA+0xfc>)
 800dfb4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dfba:	2200      	movs	r2, #0
 800dfbc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dfc6:	4619      	mov	r1, r3
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	3328      	adds	r3, #40	; 0x28
 800dfce:	461a      	mov	r2, r3
 800dfd0:	88fb      	ldrh	r3, [r7, #6]
 800dfd2:	f7f8 ff01 	bl	8006dd8 <HAL_DMA_Start_IT>
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d009      	beq.n	800dff0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	2210      	movs	r2, #16
 800dfe0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	2220      	movs	r2, #32
 800dfe8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800dfec:	2301      	movs	r3, #1
 800dfee:	e020      	b.n	800e032 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	2240      	movs	r2, #64	; 0x40
 800dff6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	3308      	adds	r3, #8
 800dffe:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e000:	697b      	ldr	r3, [r7, #20]
 800e002:	e853 3f00 	ldrex	r3, [r3]
 800e006:	613b      	str	r3, [r7, #16]
   return(result);
 800e008:	693b      	ldr	r3, [r7, #16]
 800e00a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e00e:	627b      	str	r3, [r7, #36]	; 0x24
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	3308      	adds	r3, #8
 800e016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e018:	623a      	str	r2, [r7, #32]
 800e01a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e01c:	69f9      	ldr	r1, [r7, #28]
 800e01e:	6a3a      	ldr	r2, [r7, #32]
 800e020:	e841 2300 	strex	r3, r2, [r1]
 800e024:	61bb      	str	r3, [r7, #24]
   return(result);
 800e026:	69bb      	ldr	r3, [r7, #24]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d1e5      	bne.n	800dff8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800e02c:	2300      	movs	r3, #0
 800e02e:	e000      	b.n	800e032 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800e030:	2302      	movs	r3, #2
  }
}
 800e032:	4618      	mov	r0, r3
 800e034:	3728      	adds	r7, #40	; 0x28
 800e036:	46bd      	mov	sp, r7
 800e038:	bd80      	pop	{r7, pc}
 800e03a:	bf00      	nop
 800e03c:	0800fb85 	.word	0x0800fb85
 800e040:	0800fc1b 	.word	0x0800fc1b
 800e044:	0800fd9d 	.word	0x0800fd9d

0800e048 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b08a      	sub	sp, #40	; 0x28
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	60f8      	str	r0, [r7, #12]
 800e050:	60b9      	str	r1, [r7, #8]
 800e052:	4613      	mov	r3, r2
 800e054:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e05c:	2b20      	cmp	r3, #32
 800e05e:	d137      	bne.n	800e0d0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800e060:	68bb      	ldr	r3, [r7, #8]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d002      	beq.n	800e06c <HAL_UART_Receive_DMA+0x24>
 800e066:	88fb      	ldrh	r3, [r7, #6]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d101      	bne.n	800e070 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800e06c:	2301      	movs	r3, #1
 800e06e:	e030      	b.n	800e0d2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	2200      	movs	r2, #0
 800e074:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	4a18      	ldr	r2, [pc, #96]	; (800e0dc <HAL_UART_Receive_DMA+0x94>)
 800e07c:	4293      	cmp	r3, r2
 800e07e:	d01f      	beq.n	800e0c0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	685b      	ldr	r3, [r3, #4]
 800e086:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d018      	beq.n	800e0c0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e094:	697b      	ldr	r3, [r7, #20]
 800e096:	e853 3f00 	ldrex	r3, [r3]
 800e09a:	613b      	str	r3, [r7, #16]
   return(result);
 800e09c:	693b      	ldr	r3, [r7, #16]
 800e09e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e0a2:	627b      	str	r3, [r7, #36]	; 0x24
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	461a      	mov	r2, r3
 800e0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ac:	623b      	str	r3, [r7, #32]
 800e0ae:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0b0:	69f9      	ldr	r1, [r7, #28]
 800e0b2:	6a3a      	ldr	r2, [r7, #32]
 800e0b4:	e841 2300 	strex	r3, r2, [r1]
 800e0b8:	61bb      	str	r3, [r7, #24]
   return(result);
 800e0ba:	69bb      	ldr	r3, [r7, #24]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d1e6      	bne.n	800e08e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e0c0:	88fb      	ldrh	r3, [r7, #6]
 800e0c2:	461a      	mov	r2, r3
 800e0c4:	68b9      	ldr	r1, [r7, #8]
 800e0c6:	68f8      	ldr	r0, [r7, #12]
 800e0c8:	f001 fc0e 	bl	800f8e8 <UART_Start_Receive_DMA>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	e000      	b.n	800e0d2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e0d0:	2302      	movs	r3, #2
  }
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	3728      	adds	r7, #40	; 0x28
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}
 800e0da:	bf00      	nop
 800e0dc:	58000c00 	.word	0x58000c00

0800e0e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b0ba      	sub	sp, #232	; 0xe8
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	69db      	ldr	r3, [r3, #28]
 800e0ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	689b      	ldr	r3, [r3, #8]
 800e102:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e106:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e10a:	f640 030f 	movw	r3, #2063	; 0x80f
 800e10e:	4013      	ands	r3, r2
 800e110:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e114:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d11b      	bne.n	800e154 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e11c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e120:	f003 0320 	and.w	r3, r3, #32
 800e124:	2b00      	cmp	r3, #0
 800e126:	d015      	beq.n	800e154 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e12c:	f003 0320 	and.w	r3, r3, #32
 800e130:	2b00      	cmp	r3, #0
 800e132:	d105      	bne.n	800e140 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e134:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d009      	beq.n	800e154 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e144:	2b00      	cmp	r3, #0
 800e146:	f000 8377 	beq.w	800e838 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e14e:	6878      	ldr	r0, [r7, #4]
 800e150:	4798      	blx	r3
      }
      return;
 800e152:	e371      	b.n	800e838 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e154:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e158:	2b00      	cmp	r3, #0
 800e15a:	f000 8123 	beq.w	800e3a4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e15e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e162:	4b8d      	ldr	r3, [pc, #564]	; (800e398 <HAL_UART_IRQHandler+0x2b8>)
 800e164:	4013      	ands	r3, r2
 800e166:	2b00      	cmp	r3, #0
 800e168:	d106      	bne.n	800e178 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e16a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e16e:	4b8b      	ldr	r3, [pc, #556]	; (800e39c <HAL_UART_IRQHandler+0x2bc>)
 800e170:	4013      	ands	r3, r2
 800e172:	2b00      	cmp	r3, #0
 800e174:	f000 8116 	beq.w	800e3a4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e17c:	f003 0301 	and.w	r3, r3, #1
 800e180:	2b00      	cmp	r3, #0
 800e182:	d011      	beq.n	800e1a8 <HAL_UART_IRQHandler+0xc8>
 800e184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d00b      	beq.n	800e1a8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	2201      	movs	r2, #1
 800e196:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e19e:	f043 0201 	orr.w	r2, r3, #1
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e1a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e1ac:	f003 0302 	and.w	r3, r3, #2
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d011      	beq.n	800e1d8 <HAL_UART_IRQHandler+0xf8>
 800e1b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e1b8:	f003 0301 	and.w	r3, r3, #1
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d00b      	beq.n	800e1d8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	2202      	movs	r2, #2
 800e1c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e1ce:	f043 0204 	orr.w	r2, r3, #4
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e1d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e1dc:	f003 0304 	and.w	r3, r3, #4
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d011      	beq.n	800e208 <HAL_UART_IRQHandler+0x128>
 800e1e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e1e8:	f003 0301 	and.w	r3, r3, #1
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d00b      	beq.n	800e208 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	2204      	movs	r2, #4
 800e1f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e1fe:	f043 0202 	orr.w	r2, r3, #2
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e20c:	f003 0308 	and.w	r3, r3, #8
 800e210:	2b00      	cmp	r3, #0
 800e212:	d017      	beq.n	800e244 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e218:	f003 0320 	and.w	r3, r3, #32
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d105      	bne.n	800e22c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e220:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e224:	4b5c      	ldr	r3, [pc, #368]	; (800e398 <HAL_UART_IRQHandler+0x2b8>)
 800e226:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d00b      	beq.n	800e244 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	2208      	movs	r2, #8
 800e232:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e23a:	f043 0208 	orr.w	r2, r3, #8
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e248:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d012      	beq.n	800e276 <HAL_UART_IRQHandler+0x196>
 800e250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e254:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d00c      	beq.n	800e276 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e264:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e26c:	f043 0220 	orr.w	r2, r3, #32
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	f000 82dd 	beq.w	800e83c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e286:	f003 0320 	and.w	r3, r3, #32
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d013      	beq.n	800e2b6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e28e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e292:	f003 0320 	and.w	r3, r3, #32
 800e296:	2b00      	cmp	r3, #0
 800e298:	d105      	bne.n	800e2a6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e29a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e29e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d007      	beq.n	800e2b6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d003      	beq.n	800e2b6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2b2:	6878      	ldr	r0, [r7, #4]
 800e2b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	689b      	ldr	r3, [r3, #8]
 800e2c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2ca:	2b40      	cmp	r3, #64	; 0x40
 800e2cc:	d005      	beq.n	800e2da <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e2ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e2d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d054      	beq.n	800e384 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e2da:	6878      	ldr	r0, [r7, #4]
 800e2dc:	f001 fbec 	bl	800fab8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	689b      	ldr	r3, [r3, #8]
 800e2e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2ea:	2b40      	cmp	r3, #64	; 0x40
 800e2ec:	d146      	bne.n	800e37c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	3308      	adds	r3, #8
 800e2f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e2fc:	e853 3f00 	ldrex	r3, [r3]
 800e300:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e304:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e308:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e30c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	3308      	adds	r3, #8
 800e316:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e31a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e31e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e322:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e326:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e32a:	e841 2300 	strex	r3, r2, [r1]
 800e32e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e332:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e336:	2b00      	cmp	r3, #0
 800e338:	d1d9      	bne.n	800e2ee <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e340:	2b00      	cmp	r3, #0
 800e342:	d017      	beq.n	800e374 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e34a:	4a15      	ldr	r2, [pc, #84]	; (800e3a0 <HAL_UART_IRQHandler+0x2c0>)
 800e34c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e354:	4618      	mov	r0, r3
 800e356:	f7f9 fac7 	bl	80078e8 <HAL_DMA_Abort_IT>
 800e35a:	4603      	mov	r3, r0
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d019      	beq.n	800e394 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e368:	687a      	ldr	r2, [r7, #4]
 800e36a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800e36e:	4610      	mov	r0, r2
 800e370:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e372:	e00f      	b.n	800e394 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e374:	6878      	ldr	r0, [r7, #4]
 800e376:	f7f5 fe3b 	bl	8003ff0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e37a:	e00b      	b.n	800e394 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e37c:	6878      	ldr	r0, [r7, #4]
 800e37e:	f7f5 fe37 	bl	8003ff0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e382:	e007      	b.n	800e394 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e384:	6878      	ldr	r0, [r7, #4]
 800e386:	f7f5 fe33 	bl	8003ff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	2200      	movs	r2, #0
 800e38e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800e392:	e253      	b.n	800e83c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e394:	bf00      	nop
    return;
 800e396:	e251      	b.n	800e83c <HAL_UART_IRQHandler+0x75c>
 800e398:	10000001 	.word	0x10000001
 800e39c:	04000120 	.word	0x04000120
 800e3a0:	0800fe1d 	.word	0x0800fe1d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3a8:	2b01      	cmp	r3, #1
 800e3aa:	f040 81e7 	bne.w	800e77c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e3ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e3b2:	f003 0310 	and.w	r3, r3, #16
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	f000 81e0 	beq.w	800e77c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e3bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e3c0:	f003 0310 	and.w	r3, r3, #16
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	f000 81d9 	beq.w	800e77c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	2210      	movs	r2, #16
 800e3d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	689b      	ldr	r3, [r3, #8]
 800e3d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3dc:	2b40      	cmp	r3, #64	; 0x40
 800e3de:	f040 8151 	bne.w	800e684 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	4a96      	ldr	r2, [pc, #600]	; (800e644 <HAL_UART_IRQHandler+0x564>)
 800e3ec:	4293      	cmp	r3, r2
 800e3ee:	d068      	beq.n	800e4c2 <HAL_UART_IRQHandler+0x3e2>
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	4a93      	ldr	r2, [pc, #588]	; (800e648 <HAL_UART_IRQHandler+0x568>)
 800e3fa:	4293      	cmp	r3, r2
 800e3fc:	d061      	beq.n	800e4c2 <HAL_UART_IRQHandler+0x3e2>
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	4a91      	ldr	r2, [pc, #580]	; (800e64c <HAL_UART_IRQHandler+0x56c>)
 800e408:	4293      	cmp	r3, r2
 800e40a:	d05a      	beq.n	800e4c2 <HAL_UART_IRQHandler+0x3e2>
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	4a8e      	ldr	r2, [pc, #568]	; (800e650 <HAL_UART_IRQHandler+0x570>)
 800e416:	4293      	cmp	r3, r2
 800e418:	d053      	beq.n	800e4c2 <HAL_UART_IRQHandler+0x3e2>
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	4a8c      	ldr	r2, [pc, #560]	; (800e654 <HAL_UART_IRQHandler+0x574>)
 800e424:	4293      	cmp	r3, r2
 800e426:	d04c      	beq.n	800e4c2 <HAL_UART_IRQHandler+0x3e2>
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	4a89      	ldr	r2, [pc, #548]	; (800e658 <HAL_UART_IRQHandler+0x578>)
 800e432:	4293      	cmp	r3, r2
 800e434:	d045      	beq.n	800e4c2 <HAL_UART_IRQHandler+0x3e2>
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	4a87      	ldr	r2, [pc, #540]	; (800e65c <HAL_UART_IRQHandler+0x57c>)
 800e440:	4293      	cmp	r3, r2
 800e442:	d03e      	beq.n	800e4c2 <HAL_UART_IRQHandler+0x3e2>
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	4a84      	ldr	r2, [pc, #528]	; (800e660 <HAL_UART_IRQHandler+0x580>)
 800e44e:	4293      	cmp	r3, r2
 800e450:	d037      	beq.n	800e4c2 <HAL_UART_IRQHandler+0x3e2>
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	4a82      	ldr	r2, [pc, #520]	; (800e664 <HAL_UART_IRQHandler+0x584>)
 800e45c:	4293      	cmp	r3, r2
 800e45e:	d030      	beq.n	800e4c2 <HAL_UART_IRQHandler+0x3e2>
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	4a7f      	ldr	r2, [pc, #508]	; (800e668 <HAL_UART_IRQHandler+0x588>)
 800e46a:	4293      	cmp	r3, r2
 800e46c:	d029      	beq.n	800e4c2 <HAL_UART_IRQHandler+0x3e2>
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	4a7d      	ldr	r2, [pc, #500]	; (800e66c <HAL_UART_IRQHandler+0x58c>)
 800e478:	4293      	cmp	r3, r2
 800e47a:	d022      	beq.n	800e4c2 <HAL_UART_IRQHandler+0x3e2>
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	4a7a      	ldr	r2, [pc, #488]	; (800e670 <HAL_UART_IRQHandler+0x590>)
 800e486:	4293      	cmp	r3, r2
 800e488:	d01b      	beq.n	800e4c2 <HAL_UART_IRQHandler+0x3e2>
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	4a78      	ldr	r2, [pc, #480]	; (800e674 <HAL_UART_IRQHandler+0x594>)
 800e494:	4293      	cmp	r3, r2
 800e496:	d014      	beq.n	800e4c2 <HAL_UART_IRQHandler+0x3e2>
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	4a75      	ldr	r2, [pc, #468]	; (800e678 <HAL_UART_IRQHandler+0x598>)
 800e4a2:	4293      	cmp	r3, r2
 800e4a4:	d00d      	beq.n	800e4c2 <HAL_UART_IRQHandler+0x3e2>
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	4a73      	ldr	r2, [pc, #460]	; (800e67c <HAL_UART_IRQHandler+0x59c>)
 800e4b0:	4293      	cmp	r3, r2
 800e4b2:	d006      	beq.n	800e4c2 <HAL_UART_IRQHandler+0x3e2>
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	4a70      	ldr	r2, [pc, #448]	; (800e680 <HAL_UART_IRQHandler+0x5a0>)
 800e4be:	4293      	cmp	r3, r2
 800e4c0:	d106      	bne.n	800e4d0 <HAL_UART_IRQHandler+0x3f0>
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	685b      	ldr	r3, [r3, #4]
 800e4cc:	b29b      	uxth	r3, r3
 800e4ce:	e005      	b.n	800e4dc <HAL_UART_IRQHandler+0x3fc>
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	685b      	ldr	r3, [r3, #4]
 800e4da:	b29b      	uxth	r3, r3
 800e4dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e4e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	f000 81ab 	beq.w	800e840 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e4f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e4f4:	429a      	cmp	r2, r3
 800e4f6:	f080 81a3 	bcs.w	800e840 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e500:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e50a:	69db      	ldr	r3, [r3, #28]
 800e50c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e510:	f000 8087 	beq.w	800e622 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e51c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e520:	e853 3f00 	ldrex	r3, [r3]
 800e524:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e528:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e52c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e530:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	461a      	mov	r2, r3
 800e53a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e53e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e542:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e546:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e54a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e54e:	e841 2300 	strex	r3, r2, [r1]
 800e552:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e556:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d1da      	bne.n	800e514 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	3308      	adds	r3, #8
 800e564:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e566:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e568:	e853 3f00 	ldrex	r3, [r3]
 800e56c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e56e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e570:	f023 0301 	bic.w	r3, r3, #1
 800e574:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	3308      	adds	r3, #8
 800e57e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e582:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e586:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e588:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e58a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e58e:	e841 2300 	strex	r3, r2, [r1]
 800e592:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e594:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e596:	2b00      	cmp	r3, #0
 800e598:	d1e1      	bne.n	800e55e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	3308      	adds	r3, #8
 800e5a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e5a4:	e853 3f00 	ldrex	r3, [r3]
 800e5a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e5aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e5ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e5b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	3308      	adds	r3, #8
 800e5ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e5be:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e5c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e5c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e5c6:	e841 2300 	strex	r3, r2, [r1]
 800e5ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e5cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d1e3      	bne.n	800e59a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	2220      	movs	r2, #32
 800e5d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2200      	movs	r2, #0
 800e5de:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5e8:	e853 3f00 	ldrex	r3, [r3]
 800e5ec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e5ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e5f0:	f023 0310 	bic.w	r3, r3, #16
 800e5f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	461a      	mov	r2, r3
 800e5fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e602:	65bb      	str	r3, [r7, #88]	; 0x58
 800e604:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e606:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e608:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e60a:	e841 2300 	strex	r3, r2, [r1]
 800e60e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e610:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e612:	2b00      	cmp	r3, #0
 800e614:	d1e4      	bne.n	800e5e0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e61c:	4618      	mov	r0, r3
 800e61e:	f7f8 fe45 	bl	80072ac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	2202      	movs	r2, #2
 800e626:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e634:	b29b      	uxth	r3, r3
 800e636:	1ad3      	subs	r3, r2, r3
 800e638:	b29b      	uxth	r3, r3
 800e63a:	4619      	mov	r1, r3
 800e63c:	6878      	ldr	r0, [r7, #4]
 800e63e:	f000 f927 	bl	800e890 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e642:	e0fd      	b.n	800e840 <HAL_UART_IRQHandler+0x760>
 800e644:	40020010 	.word	0x40020010
 800e648:	40020028 	.word	0x40020028
 800e64c:	40020040 	.word	0x40020040
 800e650:	40020058 	.word	0x40020058
 800e654:	40020070 	.word	0x40020070
 800e658:	40020088 	.word	0x40020088
 800e65c:	400200a0 	.word	0x400200a0
 800e660:	400200b8 	.word	0x400200b8
 800e664:	40020410 	.word	0x40020410
 800e668:	40020428 	.word	0x40020428
 800e66c:	40020440 	.word	0x40020440
 800e670:	40020458 	.word	0x40020458
 800e674:	40020470 	.word	0x40020470
 800e678:	40020488 	.word	0x40020488
 800e67c:	400204a0 	.word	0x400204a0
 800e680:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e690:	b29b      	uxth	r3, r3
 800e692:	1ad3      	subs	r3, r2, r3
 800e694:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e69e:	b29b      	uxth	r3, r3
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	f000 80cf 	beq.w	800e844 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800e6a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	f000 80ca 	beq.w	800e844 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6b8:	e853 3f00 	ldrex	r3, [r3]
 800e6bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e6be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e6c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	461a      	mov	r2, r3
 800e6ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e6d2:	647b      	str	r3, [r7, #68]	; 0x44
 800e6d4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e6d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e6da:	e841 2300 	strex	r3, r2, [r1]
 800e6de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e6e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d1e4      	bne.n	800e6b0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	3308      	adds	r3, #8
 800e6ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6f0:	e853 3f00 	ldrex	r3, [r3]
 800e6f4:	623b      	str	r3, [r7, #32]
   return(result);
 800e6f6:	6a3a      	ldr	r2, [r7, #32]
 800e6f8:	4b55      	ldr	r3, [pc, #340]	; (800e850 <HAL_UART_IRQHandler+0x770>)
 800e6fa:	4013      	ands	r3, r2
 800e6fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	3308      	adds	r3, #8
 800e706:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e70a:	633a      	str	r2, [r7, #48]	; 0x30
 800e70c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e70e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e712:	e841 2300 	strex	r3, r2, [r1]
 800e716:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d1e3      	bne.n	800e6e6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	2220      	movs	r2, #32
 800e722:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	2200      	movs	r2, #0
 800e72a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	2200      	movs	r2, #0
 800e730:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e738:	693b      	ldr	r3, [r7, #16]
 800e73a:	e853 3f00 	ldrex	r3, [r3]
 800e73e:	60fb      	str	r3, [r7, #12]
   return(result);
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	f023 0310 	bic.w	r3, r3, #16
 800e746:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	461a      	mov	r2, r3
 800e750:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e754:	61fb      	str	r3, [r7, #28]
 800e756:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e758:	69b9      	ldr	r1, [r7, #24]
 800e75a:	69fa      	ldr	r2, [r7, #28]
 800e75c:	e841 2300 	strex	r3, r2, [r1]
 800e760:	617b      	str	r3, [r7, #20]
   return(result);
 800e762:	697b      	ldr	r3, [r7, #20]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d1e4      	bne.n	800e732 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	2202      	movs	r2, #2
 800e76c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e76e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e772:	4619      	mov	r1, r3
 800e774:	6878      	ldr	r0, [r7, #4]
 800e776:	f000 f88b 	bl	800e890 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e77a:	e063      	b.n	800e844 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e77c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e780:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e784:	2b00      	cmp	r3, #0
 800e786:	d00e      	beq.n	800e7a6 <HAL_UART_IRQHandler+0x6c6>
 800e788:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e78c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e790:	2b00      	cmp	r3, #0
 800e792:	d008      	beq.n	800e7a6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e79c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e79e:	6878      	ldr	r0, [r7, #4]
 800e7a0:	f001 fb7d 	bl	800fe9e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e7a4:	e051      	b.n	800e84a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e7a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e7aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d014      	beq.n	800e7dc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e7b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e7b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d105      	bne.n	800e7ca <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e7be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e7c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d008      	beq.n	800e7dc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d03a      	beq.n	800e848 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	4798      	blx	r3
    }
    return;
 800e7da:	e035      	b.n	800e848 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e7dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e7e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d009      	beq.n	800e7fc <HAL_UART_IRQHandler+0x71c>
 800e7e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e7ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d003      	beq.n	800e7fc <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800e7f4:	6878      	ldr	r0, [r7, #4]
 800e7f6:	f001 fb27 	bl	800fe48 <UART_EndTransmit_IT>
    return;
 800e7fa:	e026      	b.n	800e84a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e7fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e800:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e804:	2b00      	cmp	r3, #0
 800e806:	d009      	beq.n	800e81c <HAL_UART_IRQHandler+0x73c>
 800e808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e80c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e810:	2b00      	cmp	r3, #0
 800e812:	d003      	beq.n	800e81c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e814:	6878      	ldr	r0, [r7, #4]
 800e816:	f001 fb56 	bl	800fec6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e81a:	e016      	b.n	800e84a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e81c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e820:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e824:	2b00      	cmp	r3, #0
 800e826:	d010      	beq.n	800e84a <HAL_UART_IRQHandler+0x76a>
 800e828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	da0c      	bge.n	800e84a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e830:	6878      	ldr	r0, [r7, #4]
 800e832:	f001 fb3e 	bl	800feb2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e836:	e008      	b.n	800e84a <HAL_UART_IRQHandler+0x76a>
      return;
 800e838:	bf00      	nop
 800e83a:	e006      	b.n	800e84a <HAL_UART_IRQHandler+0x76a>
    return;
 800e83c:	bf00      	nop
 800e83e:	e004      	b.n	800e84a <HAL_UART_IRQHandler+0x76a>
      return;
 800e840:	bf00      	nop
 800e842:	e002      	b.n	800e84a <HAL_UART_IRQHandler+0x76a>
      return;
 800e844:	bf00      	nop
 800e846:	e000      	b.n	800e84a <HAL_UART_IRQHandler+0x76a>
    return;
 800e848:	bf00      	nop
  }
}
 800e84a:	37e8      	adds	r7, #232	; 0xe8
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}
 800e850:	effffffe 	.word	0xeffffffe

0800e854 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e854:	b480      	push	{r7}
 800e856:	b083      	sub	sp, #12
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800e85c:	bf00      	nop
 800e85e:	370c      	adds	r7, #12
 800e860:	46bd      	mov	sp, r7
 800e862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e866:	4770      	bx	lr

0800e868 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e868:	b480      	push	{r7}
 800e86a:	b083      	sub	sp, #12
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800e870:	bf00      	nop
 800e872:	370c      	adds	r7, #12
 800e874:	46bd      	mov	sp, r7
 800e876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87a:	4770      	bx	lr

0800e87c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e87c:	b480      	push	{r7}
 800e87e:	b083      	sub	sp, #12
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e884:	bf00      	nop
 800e886:	370c      	adds	r7, #12
 800e888:	46bd      	mov	sp, r7
 800e88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88e:	4770      	bx	lr

0800e890 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e890:	b480      	push	{r7}
 800e892:	b083      	sub	sp, #12
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
 800e898:	460b      	mov	r3, r1
 800e89a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e89c:	bf00      	nop
 800e89e:	370c      	adds	r7, #12
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a6:	4770      	bx	lr

0800e8a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e8a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e8ac:	b092      	sub	sp, #72	; 0x48
 800e8ae:	af00      	add	r7, sp, #0
 800e8b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e8b8:	697b      	ldr	r3, [r7, #20]
 800e8ba:	689a      	ldr	r2, [r3, #8]
 800e8bc:	697b      	ldr	r3, [r7, #20]
 800e8be:	691b      	ldr	r3, [r3, #16]
 800e8c0:	431a      	orrs	r2, r3
 800e8c2:	697b      	ldr	r3, [r7, #20]
 800e8c4:	695b      	ldr	r3, [r3, #20]
 800e8c6:	431a      	orrs	r2, r3
 800e8c8:	697b      	ldr	r3, [r7, #20]
 800e8ca:	69db      	ldr	r3, [r3, #28]
 800e8cc:	4313      	orrs	r3, r2
 800e8ce:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e8d0:	697b      	ldr	r3, [r7, #20]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	681a      	ldr	r2, [r3, #0]
 800e8d6:	4bbe      	ldr	r3, [pc, #760]	; (800ebd0 <UART_SetConfig+0x328>)
 800e8d8:	4013      	ands	r3, r2
 800e8da:	697a      	ldr	r2, [r7, #20]
 800e8dc:	6812      	ldr	r2, [r2, #0]
 800e8de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e8e0:	430b      	orrs	r3, r1
 800e8e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e8e4:	697b      	ldr	r3, [r7, #20]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	685b      	ldr	r3, [r3, #4]
 800e8ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e8ee:	697b      	ldr	r3, [r7, #20]
 800e8f0:	68da      	ldr	r2, [r3, #12]
 800e8f2:	697b      	ldr	r3, [r7, #20]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	430a      	orrs	r2, r1
 800e8f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e8fa:	697b      	ldr	r3, [r7, #20]
 800e8fc:	699b      	ldr	r3, [r3, #24]
 800e8fe:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e900:	697b      	ldr	r3, [r7, #20]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	4ab3      	ldr	r2, [pc, #716]	; (800ebd4 <UART_SetConfig+0x32c>)
 800e906:	4293      	cmp	r3, r2
 800e908:	d004      	beq.n	800e914 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e90a:	697b      	ldr	r3, [r7, #20]
 800e90c:	6a1b      	ldr	r3, [r3, #32]
 800e90e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e910:	4313      	orrs	r3, r2
 800e912:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e914:	697b      	ldr	r3, [r7, #20]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	689a      	ldr	r2, [r3, #8]
 800e91a:	4baf      	ldr	r3, [pc, #700]	; (800ebd8 <UART_SetConfig+0x330>)
 800e91c:	4013      	ands	r3, r2
 800e91e:	697a      	ldr	r2, [r7, #20]
 800e920:	6812      	ldr	r2, [r2, #0]
 800e922:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e924:	430b      	orrs	r3, r1
 800e926:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e928:	697b      	ldr	r3, [r7, #20]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e92e:	f023 010f 	bic.w	r1, r3, #15
 800e932:	697b      	ldr	r3, [r7, #20]
 800e934:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e936:	697b      	ldr	r3, [r7, #20]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	430a      	orrs	r2, r1
 800e93c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e93e:	697b      	ldr	r3, [r7, #20]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	4aa6      	ldr	r2, [pc, #664]	; (800ebdc <UART_SetConfig+0x334>)
 800e944:	4293      	cmp	r3, r2
 800e946:	d177      	bne.n	800ea38 <UART_SetConfig+0x190>
 800e948:	4ba5      	ldr	r3, [pc, #660]	; (800ebe0 <UART_SetConfig+0x338>)
 800e94a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e94c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e950:	2b28      	cmp	r3, #40	; 0x28
 800e952:	d86d      	bhi.n	800ea30 <UART_SetConfig+0x188>
 800e954:	a201      	add	r2, pc, #4	; (adr r2, 800e95c <UART_SetConfig+0xb4>)
 800e956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e95a:	bf00      	nop
 800e95c:	0800ea01 	.word	0x0800ea01
 800e960:	0800ea31 	.word	0x0800ea31
 800e964:	0800ea31 	.word	0x0800ea31
 800e968:	0800ea31 	.word	0x0800ea31
 800e96c:	0800ea31 	.word	0x0800ea31
 800e970:	0800ea31 	.word	0x0800ea31
 800e974:	0800ea31 	.word	0x0800ea31
 800e978:	0800ea31 	.word	0x0800ea31
 800e97c:	0800ea09 	.word	0x0800ea09
 800e980:	0800ea31 	.word	0x0800ea31
 800e984:	0800ea31 	.word	0x0800ea31
 800e988:	0800ea31 	.word	0x0800ea31
 800e98c:	0800ea31 	.word	0x0800ea31
 800e990:	0800ea31 	.word	0x0800ea31
 800e994:	0800ea31 	.word	0x0800ea31
 800e998:	0800ea31 	.word	0x0800ea31
 800e99c:	0800ea11 	.word	0x0800ea11
 800e9a0:	0800ea31 	.word	0x0800ea31
 800e9a4:	0800ea31 	.word	0x0800ea31
 800e9a8:	0800ea31 	.word	0x0800ea31
 800e9ac:	0800ea31 	.word	0x0800ea31
 800e9b0:	0800ea31 	.word	0x0800ea31
 800e9b4:	0800ea31 	.word	0x0800ea31
 800e9b8:	0800ea31 	.word	0x0800ea31
 800e9bc:	0800ea19 	.word	0x0800ea19
 800e9c0:	0800ea31 	.word	0x0800ea31
 800e9c4:	0800ea31 	.word	0x0800ea31
 800e9c8:	0800ea31 	.word	0x0800ea31
 800e9cc:	0800ea31 	.word	0x0800ea31
 800e9d0:	0800ea31 	.word	0x0800ea31
 800e9d4:	0800ea31 	.word	0x0800ea31
 800e9d8:	0800ea31 	.word	0x0800ea31
 800e9dc:	0800ea21 	.word	0x0800ea21
 800e9e0:	0800ea31 	.word	0x0800ea31
 800e9e4:	0800ea31 	.word	0x0800ea31
 800e9e8:	0800ea31 	.word	0x0800ea31
 800e9ec:	0800ea31 	.word	0x0800ea31
 800e9f0:	0800ea31 	.word	0x0800ea31
 800e9f4:	0800ea31 	.word	0x0800ea31
 800e9f8:	0800ea31 	.word	0x0800ea31
 800e9fc:	0800ea29 	.word	0x0800ea29
 800ea00:	2301      	movs	r3, #1
 800ea02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea06:	e326      	b.n	800f056 <UART_SetConfig+0x7ae>
 800ea08:	2304      	movs	r3, #4
 800ea0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea0e:	e322      	b.n	800f056 <UART_SetConfig+0x7ae>
 800ea10:	2308      	movs	r3, #8
 800ea12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea16:	e31e      	b.n	800f056 <UART_SetConfig+0x7ae>
 800ea18:	2310      	movs	r3, #16
 800ea1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea1e:	e31a      	b.n	800f056 <UART_SetConfig+0x7ae>
 800ea20:	2320      	movs	r3, #32
 800ea22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea26:	e316      	b.n	800f056 <UART_SetConfig+0x7ae>
 800ea28:	2340      	movs	r3, #64	; 0x40
 800ea2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea2e:	e312      	b.n	800f056 <UART_SetConfig+0x7ae>
 800ea30:	2380      	movs	r3, #128	; 0x80
 800ea32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea36:	e30e      	b.n	800f056 <UART_SetConfig+0x7ae>
 800ea38:	697b      	ldr	r3, [r7, #20]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	4a69      	ldr	r2, [pc, #420]	; (800ebe4 <UART_SetConfig+0x33c>)
 800ea3e:	4293      	cmp	r3, r2
 800ea40:	d130      	bne.n	800eaa4 <UART_SetConfig+0x1fc>
 800ea42:	4b67      	ldr	r3, [pc, #412]	; (800ebe0 <UART_SetConfig+0x338>)
 800ea44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea46:	f003 0307 	and.w	r3, r3, #7
 800ea4a:	2b05      	cmp	r3, #5
 800ea4c:	d826      	bhi.n	800ea9c <UART_SetConfig+0x1f4>
 800ea4e:	a201      	add	r2, pc, #4	; (adr r2, 800ea54 <UART_SetConfig+0x1ac>)
 800ea50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea54:	0800ea6d 	.word	0x0800ea6d
 800ea58:	0800ea75 	.word	0x0800ea75
 800ea5c:	0800ea7d 	.word	0x0800ea7d
 800ea60:	0800ea85 	.word	0x0800ea85
 800ea64:	0800ea8d 	.word	0x0800ea8d
 800ea68:	0800ea95 	.word	0x0800ea95
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea72:	e2f0      	b.n	800f056 <UART_SetConfig+0x7ae>
 800ea74:	2304      	movs	r3, #4
 800ea76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea7a:	e2ec      	b.n	800f056 <UART_SetConfig+0x7ae>
 800ea7c:	2308      	movs	r3, #8
 800ea7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea82:	e2e8      	b.n	800f056 <UART_SetConfig+0x7ae>
 800ea84:	2310      	movs	r3, #16
 800ea86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea8a:	e2e4      	b.n	800f056 <UART_SetConfig+0x7ae>
 800ea8c:	2320      	movs	r3, #32
 800ea8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea92:	e2e0      	b.n	800f056 <UART_SetConfig+0x7ae>
 800ea94:	2340      	movs	r3, #64	; 0x40
 800ea96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea9a:	e2dc      	b.n	800f056 <UART_SetConfig+0x7ae>
 800ea9c:	2380      	movs	r3, #128	; 0x80
 800ea9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaa2:	e2d8      	b.n	800f056 <UART_SetConfig+0x7ae>
 800eaa4:	697b      	ldr	r3, [r7, #20]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	4a4f      	ldr	r2, [pc, #316]	; (800ebe8 <UART_SetConfig+0x340>)
 800eaaa:	4293      	cmp	r3, r2
 800eaac:	d130      	bne.n	800eb10 <UART_SetConfig+0x268>
 800eaae:	4b4c      	ldr	r3, [pc, #304]	; (800ebe0 <UART_SetConfig+0x338>)
 800eab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eab2:	f003 0307 	and.w	r3, r3, #7
 800eab6:	2b05      	cmp	r3, #5
 800eab8:	d826      	bhi.n	800eb08 <UART_SetConfig+0x260>
 800eaba:	a201      	add	r2, pc, #4	; (adr r2, 800eac0 <UART_SetConfig+0x218>)
 800eabc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eac0:	0800ead9 	.word	0x0800ead9
 800eac4:	0800eae1 	.word	0x0800eae1
 800eac8:	0800eae9 	.word	0x0800eae9
 800eacc:	0800eaf1 	.word	0x0800eaf1
 800ead0:	0800eaf9 	.word	0x0800eaf9
 800ead4:	0800eb01 	.word	0x0800eb01
 800ead8:	2300      	movs	r3, #0
 800eada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eade:	e2ba      	b.n	800f056 <UART_SetConfig+0x7ae>
 800eae0:	2304      	movs	r3, #4
 800eae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eae6:	e2b6      	b.n	800f056 <UART_SetConfig+0x7ae>
 800eae8:	2308      	movs	r3, #8
 800eaea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaee:	e2b2      	b.n	800f056 <UART_SetConfig+0x7ae>
 800eaf0:	2310      	movs	r3, #16
 800eaf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaf6:	e2ae      	b.n	800f056 <UART_SetConfig+0x7ae>
 800eaf8:	2320      	movs	r3, #32
 800eafa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eafe:	e2aa      	b.n	800f056 <UART_SetConfig+0x7ae>
 800eb00:	2340      	movs	r3, #64	; 0x40
 800eb02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb06:	e2a6      	b.n	800f056 <UART_SetConfig+0x7ae>
 800eb08:	2380      	movs	r3, #128	; 0x80
 800eb0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb0e:	e2a2      	b.n	800f056 <UART_SetConfig+0x7ae>
 800eb10:	697b      	ldr	r3, [r7, #20]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	4a35      	ldr	r2, [pc, #212]	; (800ebec <UART_SetConfig+0x344>)
 800eb16:	4293      	cmp	r3, r2
 800eb18:	d130      	bne.n	800eb7c <UART_SetConfig+0x2d4>
 800eb1a:	4b31      	ldr	r3, [pc, #196]	; (800ebe0 <UART_SetConfig+0x338>)
 800eb1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb1e:	f003 0307 	and.w	r3, r3, #7
 800eb22:	2b05      	cmp	r3, #5
 800eb24:	d826      	bhi.n	800eb74 <UART_SetConfig+0x2cc>
 800eb26:	a201      	add	r2, pc, #4	; (adr r2, 800eb2c <UART_SetConfig+0x284>)
 800eb28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb2c:	0800eb45 	.word	0x0800eb45
 800eb30:	0800eb4d 	.word	0x0800eb4d
 800eb34:	0800eb55 	.word	0x0800eb55
 800eb38:	0800eb5d 	.word	0x0800eb5d
 800eb3c:	0800eb65 	.word	0x0800eb65
 800eb40:	0800eb6d 	.word	0x0800eb6d
 800eb44:	2300      	movs	r3, #0
 800eb46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb4a:	e284      	b.n	800f056 <UART_SetConfig+0x7ae>
 800eb4c:	2304      	movs	r3, #4
 800eb4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb52:	e280      	b.n	800f056 <UART_SetConfig+0x7ae>
 800eb54:	2308      	movs	r3, #8
 800eb56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb5a:	e27c      	b.n	800f056 <UART_SetConfig+0x7ae>
 800eb5c:	2310      	movs	r3, #16
 800eb5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb62:	e278      	b.n	800f056 <UART_SetConfig+0x7ae>
 800eb64:	2320      	movs	r3, #32
 800eb66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb6a:	e274      	b.n	800f056 <UART_SetConfig+0x7ae>
 800eb6c:	2340      	movs	r3, #64	; 0x40
 800eb6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb72:	e270      	b.n	800f056 <UART_SetConfig+0x7ae>
 800eb74:	2380      	movs	r3, #128	; 0x80
 800eb76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb7a:	e26c      	b.n	800f056 <UART_SetConfig+0x7ae>
 800eb7c:	697b      	ldr	r3, [r7, #20]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	4a1b      	ldr	r2, [pc, #108]	; (800ebf0 <UART_SetConfig+0x348>)
 800eb82:	4293      	cmp	r3, r2
 800eb84:	d142      	bne.n	800ec0c <UART_SetConfig+0x364>
 800eb86:	4b16      	ldr	r3, [pc, #88]	; (800ebe0 <UART_SetConfig+0x338>)
 800eb88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb8a:	f003 0307 	and.w	r3, r3, #7
 800eb8e:	2b05      	cmp	r3, #5
 800eb90:	d838      	bhi.n	800ec04 <UART_SetConfig+0x35c>
 800eb92:	a201      	add	r2, pc, #4	; (adr r2, 800eb98 <UART_SetConfig+0x2f0>)
 800eb94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb98:	0800ebb1 	.word	0x0800ebb1
 800eb9c:	0800ebb9 	.word	0x0800ebb9
 800eba0:	0800ebc1 	.word	0x0800ebc1
 800eba4:	0800ebc9 	.word	0x0800ebc9
 800eba8:	0800ebf5 	.word	0x0800ebf5
 800ebac:	0800ebfd 	.word	0x0800ebfd
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebb6:	e24e      	b.n	800f056 <UART_SetConfig+0x7ae>
 800ebb8:	2304      	movs	r3, #4
 800ebba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebbe:	e24a      	b.n	800f056 <UART_SetConfig+0x7ae>
 800ebc0:	2308      	movs	r3, #8
 800ebc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebc6:	e246      	b.n	800f056 <UART_SetConfig+0x7ae>
 800ebc8:	2310      	movs	r3, #16
 800ebca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebce:	e242      	b.n	800f056 <UART_SetConfig+0x7ae>
 800ebd0:	cfff69f3 	.word	0xcfff69f3
 800ebd4:	58000c00 	.word	0x58000c00
 800ebd8:	11fff4ff 	.word	0x11fff4ff
 800ebdc:	40011000 	.word	0x40011000
 800ebe0:	58024400 	.word	0x58024400
 800ebe4:	40004400 	.word	0x40004400
 800ebe8:	40004800 	.word	0x40004800
 800ebec:	40004c00 	.word	0x40004c00
 800ebf0:	40005000 	.word	0x40005000
 800ebf4:	2320      	movs	r3, #32
 800ebf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebfa:	e22c      	b.n	800f056 <UART_SetConfig+0x7ae>
 800ebfc:	2340      	movs	r3, #64	; 0x40
 800ebfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec02:	e228      	b.n	800f056 <UART_SetConfig+0x7ae>
 800ec04:	2380      	movs	r3, #128	; 0x80
 800ec06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec0a:	e224      	b.n	800f056 <UART_SetConfig+0x7ae>
 800ec0c:	697b      	ldr	r3, [r7, #20]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	4ab1      	ldr	r2, [pc, #708]	; (800eed8 <UART_SetConfig+0x630>)
 800ec12:	4293      	cmp	r3, r2
 800ec14:	d176      	bne.n	800ed04 <UART_SetConfig+0x45c>
 800ec16:	4bb1      	ldr	r3, [pc, #708]	; (800eedc <UART_SetConfig+0x634>)
 800ec18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ec1e:	2b28      	cmp	r3, #40	; 0x28
 800ec20:	d86c      	bhi.n	800ecfc <UART_SetConfig+0x454>
 800ec22:	a201      	add	r2, pc, #4	; (adr r2, 800ec28 <UART_SetConfig+0x380>)
 800ec24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec28:	0800eccd 	.word	0x0800eccd
 800ec2c:	0800ecfd 	.word	0x0800ecfd
 800ec30:	0800ecfd 	.word	0x0800ecfd
 800ec34:	0800ecfd 	.word	0x0800ecfd
 800ec38:	0800ecfd 	.word	0x0800ecfd
 800ec3c:	0800ecfd 	.word	0x0800ecfd
 800ec40:	0800ecfd 	.word	0x0800ecfd
 800ec44:	0800ecfd 	.word	0x0800ecfd
 800ec48:	0800ecd5 	.word	0x0800ecd5
 800ec4c:	0800ecfd 	.word	0x0800ecfd
 800ec50:	0800ecfd 	.word	0x0800ecfd
 800ec54:	0800ecfd 	.word	0x0800ecfd
 800ec58:	0800ecfd 	.word	0x0800ecfd
 800ec5c:	0800ecfd 	.word	0x0800ecfd
 800ec60:	0800ecfd 	.word	0x0800ecfd
 800ec64:	0800ecfd 	.word	0x0800ecfd
 800ec68:	0800ecdd 	.word	0x0800ecdd
 800ec6c:	0800ecfd 	.word	0x0800ecfd
 800ec70:	0800ecfd 	.word	0x0800ecfd
 800ec74:	0800ecfd 	.word	0x0800ecfd
 800ec78:	0800ecfd 	.word	0x0800ecfd
 800ec7c:	0800ecfd 	.word	0x0800ecfd
 800ec80:	0800ecfd 	.word	0x0800ecfd
 800ec84:	0800ecfd 	.word	0x0800ecfd
 800ec88:	0800ece5 	.word	0x0800ece5
 800ec8c:	0800ecfd 	.word	0x0800ecfd
 800ec90:	0800ecfd 	.word	0x0800ecfd
 800ec94:	0800ecfd 	.word	0x0800ecfd
 800ec98:	0800ecfd 	.word	0x0800ecfd
 800ec9c:	0800ecfd 	.word	0x0800ecfd
 800eca0:	0800ecfd 	.word	0x0800ecfd
 800eca4:	0800ecfd 	.word	0x0800ecfd
 800eca8:	0800eced 	.word	0x0800eced
 800ecac:	0800ecfd 	.word	0x0800ecfd
 800ecb0:	0800ecfd 	.word	0x0800ecfd
 800ecb4:	0800ecfd 	.word	0x0800ecfd
 800ecb8:	0800ecfd 	.word	0x0800ecfd
 800ecbc:	0800ecfd 	.word	0x0800ecfd
 800ecc0:	0800ecfd 	.word	0x0800ecfd
 800ecc4:	0800ecfd 	.word	0x0800ecfd
 800ecc8:	0800ecf5 	.word	0x0800ecf5
 800eccc:	2301      	movs	r3, #1
 800ecce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecd2:	e1c0      	b.n	800f056 <UART_SetConfig+0x7ae>
 800ecd4:	2304      	movs	r3, #4
 800ecd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecda:	e1bc      	b.n	800f056 <UART_SetConfig+0x7ae>
 800ecdc:	2308      	movs	r3, #8
 800ecde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ece2:	e1b8      	b.n	800f056 <UART_SetConfig+0x7ae>
 800ece4:	2310      	movs	r3, #16
 800ece6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecea:	e1b4      	b.n	800f056 <UART_SetConfig+0x7ae>
 800ecec:	2320      	movs	r3, #32
 800ecee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecf2:	e1b0      	b.n	800f056 <UART_SetConfig+0x7ae>
 800ecf4:	2340      	movs	r3, #64	; 0x40
 800ecf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecfa:	e1ac      	b.n	800f056 <UART_SetConfig+0x7ae>
 800ecfc:	2380      	movs	r3, #128	; 0x80
 800ecfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed02:	e1a8      	b.n	800f056 <UART_SetConfig+0x7ae>
 800ed04:	697b      	ldr	r3, [r7, #20]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	4a75      	ldr	r2, [pc, #468]	; (800eee0 <UART_SetConfig+0x638>)
 800ed0a:	4293      	cmp	r3, r2
 800ed0c:	d130      	bne.n	800ed70 <UART_SetConfig+0x4c8>
 800ed0e:	4b73      	ldr	r3, [pc, #460]	; (800eedc <UART_SetConfig+0x634>)
 800ed10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed12:	f003 0307 	and.w	r3, r3, #7
 800ed16:	2b05      	cmp	r3, #5
 800ed18:	d826      	bhi.n	800ed68 <UART_SetConfig+0x4c0>
 800ed1a:	a201      	add	r2, pc, #4	; (adr r2, 800ed20 <UART_SetConfig+0x478>)
 800ed1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed20:	0800ed39 	.word	0x0800ed39
 800ed24:	0800ed41 	.word	0x0800ed41
 800ed28:	0800ed49 	.word	0x0800ed49
 800ed2c:	0800ed51 	.word	0x0800ed51
 800ed30:	0800ed59 	.word	0x0800ed59
 800ed34:	0800ed61 	.word	0x0800ed61
 800ed38:	2300      	movs	r3, #0
 800ed3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed3e:	e18a      	b.n	800f056 <UART_SetConfig+0x7ae>
 800ed40:	2304      	movs	r3, #4
 800ed42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed46:	e186      	b.n	800f056 <UART_SetConfig+0x7ae>
 800ed48:	2308      	movs	r3, #8
 800ed4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed4e:	e182      	b.n	800f056 <UART_SetConfig+0x7ae>
 800ed50:	2310      	movs	r3, #16
 800ed52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed56:	e17e      	b.n	800f056 <UART_SetConfig+0x7ae>
 800ed58:	2320      	movs	r3, #32
 800ed5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed5e:	e17a      	b.n	800f056 <UART_SetConfig+0x7ae>
 800ed60:	2340      	movs	r3, #64	; 0x40
 800ed62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed66:	e176      	b.n	800f056 <UART_SetConfig+0x7ae>
 800ed68:	2380      	movs	r3, #128	; 0x80
 800ed6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed6e:	e172      	b.n	800f056 <UART_SetConfig+0x7ae>
 800ed70:	697b      	ldr	r3, [r7, #20]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	4a5b      	ldr	r2, [pc, #364]	; (800eee4 <UART_SetConfig+0x63c>)
 800ed76:	4293      	cmp	r3, r2
 800ed78:	d130      	bne.n	800eddc <UART_SetConfig+0x534>
 800ed7a:	4b58      	ldr	r3, [pc, #352]	; (800eedc <UART_SetConfig+0x634>)
 800ed7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed7e:	f003 0307 	and.w	r3, r3, #7
 800ed82:	2b05      	cmp	r3, #5
 800ed84:	d826      	bhi.n	800edd4 <UART_SetConfig+0x52c>
 800ed86:	a201      	add	r2, pc, #4	; (adr r2, 800ed8c <UART_SetConfig+0x4e4>)
 800ed88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed8c:	0800eda5 	.word	0x0800eda5
 800ed90:	0800edad 	.word	0x0800edad
 800ed94:	0800edb5 	.word	0x0800edb5
 800ed98:	0800edbd 	.word	0x0800edbd
 800ed9c:	0800edc5 	.word	0x0800edc5
 800eda0:	0800edcd 	.word	0x0800edcd
 800eda4:	2300      	movs	r3, #0
 800eda6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edaa:	e154      	b.n	800f056 <UART_SetConfig+0x7ae>
 800edac:	2304      	movs	r3, #4
 800edae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edb2:	e150      	b.n	800f056 <UART_SetConfig+0x7ae>
 800edb4:	2308      	movs	r3, #8
 800edb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edba:	e14c      	b.n	800f056 <UART_SetConfig+0x7ae>
 800edbc:	2310      	movs	r3, #16
 800edbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edc2:	e148      	b.n	800f056 <UART_SetConfig+0x7ae>
 800edc4:	2320      	movs	r3, #32
 800edc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edca:	e144      	b.n	800f056 <UART_SetConfig+0x7ae>
 800edcc:	2340      	movs	r3, #64	; 0x40
 800edce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edd2:	e140      	b.n	800f056 <UART_SetConfig+0x7ae>
 800edd4:	2380      	movs	r3, #128	; 0x80
 800edd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edda:	e13c      	b.n	800f056 <UART_SetConfig+0x7ae>
 800eddc:	697b      	ldr	r3, [r7, #20]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	4a41      	ldr	r2, [pc, #260]	; (800eee8 <UART_SetConfig+0x640>)
 800ede2:	4293      	cmp	r3, r2
 800ede4:	f040 8082 	bne.w	800eeec <UART_SetConfig+0x644>
 800ede8:	4b3c      	ldr	r3, [pc, #240]	; (800eedc <UART_SetConfig+0x634>)
 800edea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800edf0:	2b28      	cmp	r3, #40	; 0x28
 800edf2:	d86d      	bhi.n	800eed0 <UART_SetConfig+0x628>
 800edf4:	a201      	add	r2, pc, #4	; (adr r2, 800edfc <UART_SetConfig+0x554>)
 800edf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edfa:	bf00      	nop
 800edfc:	0800eea1 	.word	0x0800eea1
 800ee00:	0800eed1 	.word	0x0800eed1
 800ee04:	0800eed1 	.word	0x0800eed1
 800ee08:	0800eed1 	.word	0x0800eed1
 800ee0c:	0800eed1 	.word	0x0800eed1
 800ee10:	0800eed1 	.word	0x0800eed1
 800ee14:	0800eed1 	.word	0x0800eed1
 800ee18:	0800eed1 	.word	0x0800eed1
 800ee1c:	0800eea9 	.word	0x0800eea9
 800ee20:	0800eed1 	.word	0x0800eed1
 800ee24:	0800eed1 	.word	0x0800eed1
 800ee28:	0800eed1 	.word	0x0800eed1
 800ee2c:	0800eed1 	.word	0x0800eed1
 800ee30:	0800eed1 	.word	0x0800eed1
 800ee34:	0800eed1 	.word	0x0800eed1
 800ee38:	0800eed1 	.word	0x0800eed1
 800ee3c:	0800eeb1 	.word	0x0800eeb1
 800ee40:	0800eed1 	.word	0x0800eed1
 800ee44:	0800eed1 	.word	0x0800eed1
 800ee48:	0800eed1 	.word	0x0800eed1
 800ee4c:	0800eed1 	.word	0x0800eed1
 800ee50:	0800eed1 	.word	0x0800eed1
 800ee54:	0800eed1 	.word	0x0800eed1
 800ee58:	0800eed1 	.word	0x0800eed1
 800ee5c:	0800eeb9 	.word	0x0800eeb9
 800ee60:	0800eed1 	.word	0x0800eed1
 800ee64:	0800eed1 	.word	0x0800eed1
 800ee68:	0800eed1 	.word	0x0800eed1
 800ee6c:	0800eed1 	.word	0x0800eed1
 800ee70:	0800eed1 	.word	0x0800eed1
 800ee74:	0800eed1 	.word	0x0800eed1
 800ee78:	0800eed1 	.word	0x0800eed1
 800ee7c:	0800eec1 	.word	0x0800eec1
 800ee80:	0800eed1 	.word	0x0800eed1
 800ee84:	0800eed1 	.word	0x0800eed1
 800ee88:	0800eed1 	.word	0x0800eed1
 800ee8c:	0800eed1 	.word	0x0800eed1
 800ee90:	0800eed1 	.word	0x0800eed1
 800ee94:	0800eed1 	.word	0x0800eed1
 800ee98:	0800eed1 	.word	0x0800eed1
 800ee9c:	0800eec9 	.word	0x0800eec9
 800eea0:	2301      	movs	r3, #1
 800eea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eea6:	e0d6      	b.n	800f056 <UART_SetConfig+0x7ae>
 800eea8:	2304      	movs	r3, #4
 800eeaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeae:	e0d2      	b.n	800f056 <UART_SetConfig+0x7ae>
 800eeb0:	2308      	movs	r3, #8
 800eeb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeb6:	e0ce      	b.n	800f056 <UART_SetConfig+0x7ae>
 800eeb8:	2310      	movs	r3, #16
 800eeba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eebe:	e0ca      	b.n	800f056 <UART_SetConfig+0x7ae>
 800eec0:	2320      	movs	r3, #32
 800eec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eec6:	e0c6      	b.n	800f056 <UART_SetConfig+0x7ae>
 800eec8:	2340      	movs	r3, #64	; 0x40
 800eeca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eece:	e0c2      	b.n	800f056 <UART_SetConfig+0x7ae>
 800eed0:	2380      	movs	r3, #128	; 0x80
 800eed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eed6:	e0be      	b.n	800f056 <UART_SetConfig+0x7ae>
 800eed8:	40011400 	.word	0x40011400
 800eedc:	58024400 	.word	0x58024400
 800eee0:	40007800 	.word	0x40007800
 800eee4:	40007c00 	.word	0x40007c00
 800eee8:	40011800 	.word	0x40011800
 800eeec:	697b      	ldr	r3, [r7, #20]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	4aad      	ldr	r2, [pc, #692]	; (800f1a8 <UART_SetConfig+0x900>)
 800eef2:	4293      	cmp	r3, r2
 800eef4:	d176      	bne.n	800efe4 <UART_SetConfig+0x73c>
 800eef6:	4bad      	ldr	r3, [pc, #692]	; (800f1ac <UART_SetConfig+0x904>)
 800eef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eefa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800eefe:	2b28      	cmp	r3, #40	; 0x28
 800ef00:	d86c      	bhi.n	800efdc <UART_SetConfig+0x734>
 800ef02:	a201      	add	r2, pc, #4	; (adr r2, 800ef08 <UART_SetConfig+0x660>)
 800ef04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef08:	0800efad 	.word	0x0800efad
 800ef0c:	0800efdd 	.word	0x0800efdd
 800ef10:	0800efdd 	.word	0x0800efdd
 800ef14:	0800efdd 	.word	0x0800efdd
 800ef18:	0800efdd 	.word	0x0800efdd
 800ef1c:	0800efdd 	.word	0x0800efdd
 800ef20:	0800efdd 	.word	0x0800efdd
 800ef24:	0800efdd 	.word	0x0800efdd
 800ef28:	0800efb5 	.word	0x0800efb5
 800ef2c:	0800efdd 	.word	0x0800efdd
 800ef30:	0800efdd 	.word	0x0800efdd
 800ef34:	0800efdd 	.word	0x0800efdd
 800ef38:	0800efdd 	.word	0x0800efdd
 800ef3c:	0800efdd 	.word	0x0800efdd
 800ef40:	0800efdd 	.word	0x0800efdd
 800ef44:	0800efdd 	.word	0x0800efdd
 800ef48:	0800efbd 	.word	0x0800efbd
 800ef4c:	0800efdd 	.word	0x0800efdd
 800ef50:	0800efdd 	.word	0x0800efdd
 800ef54:	0800efdd 	.word	0x0800efdd
 800ef58:	0800efdd 	.word	0x0800efdd
 800ef5c:	0800efdd 	.word	0x0800efdd
 800ef60:	0800efdd 	.word	0x0800efdd
 800ef64:	0800efdd 	.word	0x0800efdd
 800ef68:	0800efc5 	.word	0x0800efc5
 800ef6c:	0800efdd 	.word	0x0800efdd
 800ef70:	0800efdd 	.word	0x0800efdd
 800ef74:	0800efdd 	.word	0x0800efdd
 800ef78:	0800efdd 	.word	0x0800efdd
 800ef7c:	0800efdd 	.word	0x0800efdd
 800ef80:	0800efdd 	.word	0x0800efdd
 800ef84:	0800efdd 	.word	0x0800efdd
 800ef88:	0800efcd 	.word	0x0800efcd
 800ef8c:	0800efdd 	.word	0x0800efdd
 800ef90:	0800efdd 	.word	0x0800efdd
 800ef94:	0800efdd 	.word	0x0800efdd
 800ef98:	0800efdd 	.word	0x0800efdd
 800ef9c:	0800efdd 	.word	0x0800efdd
 800efa0:	0800efdd 	.word	0x0800efdd
 800efa4:	0800efdd 	.word	0x0800efdd
 800efa8:	0800efd5 	.word	0x0800efd5
 800efac:	2301      	movs	r3, #1
 800efae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efb2:	e050      	b.n	800f056 <UART_SetConfig+0x7ae>
 800efb4:	2304      	movs	r3, #4
 800efb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efba:	e04c      	b.n	800f056 <UART_SetConfig+0x7ae>
 800efbc:	2308      	movs	r3, #8
 800efbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efc2:	e048      	b.n	800f056 <UART_SetConfig+0x7ae>
 800efc4:	2310      	movs	r3, #16
 800efc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efca:	e044      	b.n	800f056 <UART_SetConfig+0x7ae>
 800efcc:	2320      	movs	r3, #32
 800efce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efd2:	e040      	b.n	800f056 <UART_SetConfig+0x7ae>
 800efd4:	2340      	movs	r3, #64	; 0x40
 800efd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efda:	e03c      	b.n	800f056 <UART_SetConfig+0x7ae>
 800efdc:	2380      	movs	r3, #128	; 0x80
 800efde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efe2:	e038      	b.n	800f056 <UART_SetConfig+0x7ae>
 800efe4:	697b      	ldr	r3, [r7, #20]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	4a71      	ldr	r2, [pc, #452]	; (800f1b0 <UART_SetConfig+0x908>)
 800efea:	4293      	cmp	r3, r2
 800efec:	d130      	bne.n	800f050 <UART_SetConfig+0x7a8>
 800efee:	4b6f      	ldr	r3, [pc, #444]	; (800f1ac <UART_SetConfig+0x904>)
 800eff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eff2:	f003 0307 	and.w	r3, r3, #7
 800eff6:	2b05      	cmp	r3, #5
 800eff8:	d826      	bhi.n	800f048 <UART_SetConfig+0x7a0>
 800effa:	a201      	add	r2, pc, #4	; (adr r2, 800f000 <UART_SetConfig+0x758>)
 800effc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f000:	0800f019 	.word	0x0800f019
 800f004:	0800f021 	.word	0x0800f021
 800f008:	0800f029 	.word	0x0800f029
 800f00c:	0800f031 	.word	0x0800f031
 800f010:	0800f039 	.word	0x0800f039
 800f014:	0800f041 	.word	0x0800f041
 800f018:	2302      	movs	r3, #2
 800f01a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f01e:	e01a      	b.n	800f056 <UART_SetConfig+0x7ae>
 800f020:	2304      	movs	r3, #4
 800f022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f026:	e016      	b.n	800f056 <UART_SetConfig+0x7ae>
 800f028:	2308      	movs	r3, #8
 800f02a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f02e:	e012      	b.n	800f056 <UART_SetConfig+0x7ae>
 800f030:	2310      	movs	r3, #16
 800f032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f036:	e00e      	b.n	800f056 <UART_SetConfig+0x7ae>
 800f038:	2320      	movs	r3, #32
 800f03a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f03e:	e00a      	b.n	800f056 <UART_SetConfig+0x7ae>
 800f040:	2340      	movs	r3, #64	; 0x40
 800f042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f046:	e006      	b.n	800f056 <UART_SetConfig+0x7ae>
 800f048:	2380      	movs	r3, #128	; 0x80
 800f04a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f04e:	e002      	b.n	800f056 <UART_SetConfig+0x7ae>
 800f050:	2380      	movs	r3, #128	; 0x80
 800f052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f056:	697b      	ldr	r3, [r7, #20]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	4a55      	ldr	r2, [pc, #340]	; (800f1b0 <UART_SetConfig+0x908>)
 800f05c:	4293      	cmp	r3, r2
 800f05e:	f040 80f8 	bne.w	800f252 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f062:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f066:	2b20      	cmp	r3, #32
 800f068:	dc46      	bgt.n	800f0f8 <UART_SetConfig+0x850>
 800f06a:	2b02      	cmp	r3, #2
 800f06c:	db75      	blt.n	800f15a <UART_SetConfig+0x8b2>
 800f06e:	3b02      	subs	r3, #2
 800f070:	2b1e      	cmp	r3, #30
 800f072:	d872      	bhi.n	800f15a <UART_SetConfig+0x8b2>
 800f074:	a201      	add	r2, pc, #4	; (adr r2, 800f07c <UART_SetConfig+0x7d4>)
 800f076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f07a:	bf00      	nop
 800f07c:	0800f0ff 	.word	0x0800f0ff
 800f080:	0800f15b 	.word	0x0800f15b
 800f084:	0800f107 	.word	0x0800f107
 800f088:	0800f15b 	.word	0x0800f15b
 800f08c:	0800f15b 	.word	0x0800f15b
 800f090:	0800f15b 	.word	0x0800f15b
 800f094:	0800f117 	.word	0x0800f117
 800f098:	0800f15b 	.word	0x0800f15b
 800f09c:	0800f15b 	.word	0x0800f15b
 800f0a0:	0800f15b 	.word	0x0800f15b
 800f0a4:	0800f15b 	.word	0x0800f15b
 800f0a8:	0800f15b 	.word	0x0800f15b
 800f0ac:	0800f15b 	.word	0x0800f15b
 800f0b0:	0800f15b 	.word	0x0800f15b
 800f0b4:	0800f127 	.word	0x0800f127
 800f0b8:	0800f15b 	.word	0x0800f15b
 800f0bc:	0800f15b 	.word	0x0800f15b
 800f0c0:	0800f15b 	.word	0x0800f15b
 800f0c4:	0800f15b 	.word	0x0800f15b
 800f0c8:	0800f15b 	.word	0x0800f15b
 800f0cc:	0800f15b 	.word	0x0800f15b
 800f0d0:	0800f15b 	.word	0x0800f15b
 800f0d4:	0800f15b 	.word	0x0800f15b
 800f0d8:	0800f15b 	.word	0x0800f15b
 800f0dc:	0800f15b 	.word	0x0800f15b
 800f0e0:	0800f15b 	.word	0x0800f15b
 800f0e4:	0800f15b 	.word	0x0800f15b
 800f0e8:	0800f15b 	.word	0x0800f15b
 800f0ec:	0800f15b 	.word	0x0800f15b
 800f0f0:	0800f15b 	.word	0x0800f15b
 800f0f4:	0800f14d 	.word	0x0800f14d
 800f0f8:	2b40      	cmp	r3, #64	; 0x40
 800f0fa:	d02a      	beq.n	800f152 <UART_SetConfig+0x8aa>
 800f0fc:	e02d      	b.n	800f15a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f0fe:	f7fc fd4f 	bl	800bba0 <HAL_RCCEx_GetD3PCLK1Freq>
 800f102:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f104:	e02f      	b.n	800f166 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f106:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f10a:	4618      	mov	r0, r3
 800f10c:	f7fc fd5e 	bl	800bbcc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f112:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f114:	e027      	b.n	800f166 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f116:	f107 0318 	add.w	r3, r7, #24
 800f11a:	4618      	mov	r0, r3
 800f11c:	f7fc feaa 	bl	800be74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f120:	69fb      	ldr	r3, [r7, #28]
 800f122:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f124:	e01f      	b.n	800f166 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f126:	4b21      	ldr	r3, [pc, #132]	; (800f1ac <UART_SetConfig+0x904>)
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	f003 0320 	and.w	r3, r3, #32
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d009      	beq.n	800f146 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f132:	4b1e      	ldr	r3, [pc, #120]	; (800f1ac <UART_SetConfig+0x904>)
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	08db      	lsrs	r3, r3, #3
 800f138:	f003 0303 	and.w	r3, r3, #3
 800f13c:	4a1d      	ldr	r2, [pc, #116]	; (800f1b4 <UART_SetConfig+0x90c>)
 800f13e:	fa22 f303 	lsr.w	r3, r2, r3
 800f142:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f144:	e00f      	b.n	800f166 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f146:	4b1b      	ldr	r3, [pc, #108]	; (800f1b4 <UART_SetConfig+0x90c>)
 800f148:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f14a:	e00c      	b.n	800f166 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f14c:	4b1a      	ldr	r3, [pc, #104]	; (800f1b8 <UART_SetConfig+0x910>)
 800f14e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f150:	e009      	b.n	800f166 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f152:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f156:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f158:	e005      	b.n	800f166 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f15a:	2300      	movs	r3, #0
 800f15c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f15e:	2301      	movs	r3, #1
 800f160:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f164:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f168:	2b00      	cmp	r3, #0
 800f16a:	f000 81ee 	beq.w	800f54a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f16e:	697b      	ldr	r3, [r7, #20]
 800f170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f172:	4a12      	ldr	r2, [pc, #72]	; (800f1bc <UART_SetConfig+0x914>)
 800f174:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f178:	461a      	mov	r2, r3
 800f17a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f17c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f180:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f182:	697b      	ldr	r3, [r7, #20]
 800f184:	685a      	ldr	r2, [r3, #4]
 800f186:	4613      	mov	r3, r2
 800f188:	005b      	lsls	r3, r3, #1
 800f18a:	4413      	add	r3, r2
 800f18c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f18e:	429a      	cmp	r2, r3
 800f190:	d305      	bcc.n	800f19e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f192:	697b      	ldr	r3, [r7, #20]
 800f194:	685b      	ldr	r3, [r3, #4]
 800f196:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f19a:	429a      	cmp	r2, r3
 800f19c:	d910      	bls.n	800f1c0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800f19e:	2301      	movs	r3, #1
 800f1a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f1a4:	e1d1      	b.n	800f54a <UART_SetConfig+0xca2>
 800f1a6:	bf00      	nop
 800f1a8:	40011c00 	.word	0x40011c00
 800f1ac:	58024400 	.word	0x58024400
 800f1b0:	58000c00 	.word	0x58000c00
 800f1b4:	03d09000 	.word	0x03d09000
 800f1b8:	003d0900 	.word	0x003d0900
 800f1bc:	0801074c 	.word	0x0801074c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f1c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	60bb      	str	r3, [r7, #8]
 800f1c6:	60fa      	str	r2, [r7, #12]
 800f1c8:	697b      	ldr	r3, [r7, #20]
 800f1ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1cc:	4ac0      	ldr	r2, [pc, #768]	; (800f4d0 <UART_SetConfig+0xc28>)
 800f1ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f1d2:	b29b      	uxth	r3, r3
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	603b      	str	r3, [r7, #0]
 800f1d8:	607a      	str	r2, [r7, #4]
 800f1da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f1de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f1e2:	f7f1 f89d 	bl	8000320 <__aeabi_uldivmod>
 800f1e6:	4602      	mov	r2, r0
 800f1e8:	460b      	mov	r3, r1
 800f1ea:	4610      	mov	r0, r2
 800f1ec:	4619      	mov	r1, r3
 800f1ee:	f04f 0200 	mov.w	r2, #0
 800f1f2:	f04f 0300 	mov.w	r3, #0
 800f1f6:	020b      	lsls	r3, r1, #8
 800f1f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f1fc:	0202      	lsls	r2, r0, #8
 800f1fe:	6979      	ldr	r1, [r7, #20]
 800f200:	6849      	ldr	r1, [r1, #4]
 800f202:	0849      	lsrs	r1, r1, #1
 800f204:	2000      	movs	r0, #0
 800f206:	460c      	mov	r4, r1
 800f208:	4605      	mov	r5, r0
 800f20a:	eb12 0804 	adds.w	r8, r2, r4
 800f20e:	eb43 0905 	adc.w	r9, r3, r5
 800f212:	697b      	ldr	r3, [r7, #20]
 800f214:	685b      	ldr	r3, [r3, #4]
 800f216:	2200      	movs	r2, #0
 800f218:	469a      	mov	sl, r3
 800f21a:	4693      	mov	fp, r2
 800f21c:	4652      	mov	r2, sl
 800f21e:	465b      	mov	r3, fp
 800f220:	4640      	mov	r0, r8
 800f222:	4649      	mov	r1, r9
 800f224:	f7f1 f87c 	bl	8000320 <__aeabi_uldivmod>
 800f228:	4602      	mov	r2, r0
 800f22a:	460b      	mov	r3, r1
 800f22c:	4613      	mov	r3, r2
 800f22e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f232:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f236:	d308      	bcc.n	800f24a <UART_SetConfig+0x9a2>
 800f238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f23a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f23e:	d204      	bcs.n	800f24a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800f240:	697b      	ldr	r3, [r7, #20]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f246:	60da      	str	r2, [r3, #12]
 800f248:	e17f      	b.n	800f54a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800f24a:	2301      	movs	r3, #1
 800f24c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f250:	e17b      	b.n	800f54a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f252:	697b      	ldr	r3, [r7, #20]
 800f254:	69db      	ldr	r3, [r3, #28]
 800f256:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f25a:	f040 80bd 	bne.w	800f3d8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800f25e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f262:	2b20      	cmp	r3, #32
 800f264:	dc48      	bgt.n	800f2f8 <UART_SetConfig+0xa50>
 800f266:	2b00      	cmp	r3, #0
 800f268:	db7b      	blt.n	800f362 <UART_SetConfig+0xaba>
 800f26a:	2b20      	cmp	r3, #32
 800f26c:	d879      	bhi.n	800f362 <UART_SetConfig+0xaba>
 800f26e:	a201      	add	r2, pc, #4	; (adr r2, 800f274 <UART_SetConfig+0x9cc>)
 800f270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f274:	0800f2ff 	.word	0x0800f2ff
 800f278:	0800f307 	.word	0x0800f307
 800f27c:	0800f363 	.word	0x0800f363
 800f280:	0800f363 	.word	0x0800f363
 800f284:	0800f30f 	.word	0x0800f30f
 800f288:	0800f363 	.word	0x0800f363
 800f28c:	0800f363 	.word	0x0800f363
 800f290:	0800f363 	.word	0x0800f363
 800f294:	0800f31f 	.word	0x0800f31f
 800f298:	0800f363 	.word	0x0800f363
 800f29c:	0800f363 	.word	0x0800f363
 800f2a0:	0800f363 	.word	0x0800f363
 800f2a4:	0800f363 	.word	0x0800f363
 800f2a8:	0800f363 	.word	0x0800f363
 800f2ac:	0800f363 	.word	0x0800f363
 800f2b0:	0800f363 	.word	0x0800f363
 800f2b4:	0800f32f 	.word	0x0800f32f
 800f2b8:	0800f363 	.word	0x0800f363
 800f2bc:	0800f363 	.word	0x0800f363
 800f2c0:	0800f363 	.word	0x0800f363
 800f2c4:	0800f363 	.word	0x0800f363
 800f2c8:	0800f363 	.word	0x0800f363
 800f2cc:	0800f363 	.word	0x0800f363
 800f2d0:	0800f363 	.word	0x0800f363
 800f2d4:	0800f363 	.word	0x0800f363
 800f2d8:	0800f363 	.word	0x0800f363
 800f2dc:	0800f363 	.word	0x0800f363
 800f2e0:	0800f363 	.word	0x0800f363
 800f2e4:	0800f363 	.word	0x0800f363
 800f2e8:	0800f363 	.word	0x0800f363
 800f2ec:	0800f363 	.word	0x0800f363
 800f2f0:	0800f363 	.word	0x0800f363
 800f2f4:	0800f355 	.word	0x0800f355
 800f2f8:	2b40      	cmp	r3, #64	; 0x40
 800f2fa:	d02e      	beq.n	800f35a <UART_SetConfig+0xab2>
 800f2fc:	e031      	b.n	800f362 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f2fe:	f7fb fa83 	bl	800a808 <HAL_RCC_GetPCLK1Freq>
 800f302:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f304:	e033      	b.n	800f36e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f306:	f7fb fa95 	bl	800a834 <HAL_RCC_GetPCLK2Freq>
 800f30a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f30c:	e02f      	b.n	800f36e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f30e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f312:	4618      	mov	r0, r3
 800f314:	f7fc fc5a 	bl	800bbcc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f31a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f31c:	e027      	b.n	800f36e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f31e:	f107 0318 	add.w	r3, r7, #24
 800f322:	4618      	mov	r0, r3
 800f324:	f7fc fda6 	bl	800be74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f328:	69fb      	ldr	r3, [r7, #28]
 800f32a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f32c:	e01f      	b.n	800f36e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f32e:	4b69      	ldr	r3, [pc, #420]	; (800f4d4 <UART_SetConfig+0xc2c>)
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	f003 0320 	and.w	r3, r3, #32
 800f336:	2b00      	cmp	r3, #0
 800f338:	d009      	beq.n	800f34e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f33a:	4b66      	ldr	r3, [pc, #408]	; (800f4d4 <UART_SetConfig+0xc2c>)
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	08db      	lsrs	r3, r3, #3
 800f340:	f003 0303 	and.w	r3, r3, #3
 800f344:	4a64      	ldr	r2, [pc, #400]	; (800f4d8 <UART_SetConfig+0xc30>)
 800f346:	fa22 f303 	lsr.w	r3, r2, r3
 800f34a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f34c:	e00f      	b.n	800f36e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800f34e:	4b62      	ldr	r3, [pc, #392]	; (800f4d8 <UART_SetConfig+0xc30>)
 800f350:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f352:	e00c      	b.n	800f36e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f354:	4b61      	ldr	r3, [pc, #388]	; (800f4dc <UART_SetConfig+0xc34>)
 800f356:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f358:	e009      	b.n	800f36e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f35a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f35e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f360:	e005      	b.n	800f36e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800f362:	2300      	movs	r3, #0
 800f364:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f366:	2301      	movs	r3, #1
 800f368:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f36c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f36e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f370:	2b00      	cmp	r3, #0
 800f372:	f000 80ea 	beq.w	800f54a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f376:	697b      	ldr	r3, [r7, #20]
 800f378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f37a:	4a55      	ldr	r2, [pc, #340]	; (800f4d0 <UART_SetConfig+0xc28>)
 800f37c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f380:	461a      	mov	r2, r3
 800f382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f384:	fbb3 f3f2 	udiv	r3, r3, r2
 800f388:	005a      	lsls	r2, r3, #1
 800f38a:	697b      	ldr	r3, [r7, #20]
 800f38c:	685b      	ldr	r3, [r3, #4]
 800f38e:	085b      	lsrs	r3, r3, #1
 800f390:	441a      	add	r2, r3
 800f392:	697b      	ldr	r3, [r7, #20]
 800f394:	685b      	ldr	r3, [r3, #4]
 800f396:	fbb2 f3f3 	udiv	r3, r2, r3
 800f39a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f39e:	2b0f      	cmp	r3, #15
 800f3a0:	d916      	bls.n	800f3d0 <UART_SetConfig+0xb28>
 800f3a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f3a8:	d212      	bcs.n	800f3d0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f3aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3ac:	b29b      	uxth	r3, r3
 800f3ae:	f023 030f 	bic.w	r3, r3, #15
 800f3b2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3b6:	085b      	lsrs	r3, r3, #1
 800f3b8:	b29b      	uxth	r3, r3
 800f3ba:	f003 0307 	and.w	r3, r3, #7
 800f3be:	b29a      	uxth	r2, r3
 800f3c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f3c2:	4313      	orrs	r3, r2
 800f3c4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f3c6:	697b      	ldr	r3, [r7, #20]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f3cc:	60da      	str	r2, [r3, #12]
 800f3ce:	e0bc      	b.n	800f54a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f3d0:	2301      	movs	r3, #1
 800f3d2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f3d6:	e0b8      	b.n	800f54a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f3d8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f3dc:	2b20      	cmp	r3, #32
 800f3de:	dc4b      	bgt.n	800f478 <UART_SetConfig+0xbd0>
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	f2c0 8087 	blt.w	800f4f4 <UART_SetConfig+0xc4c>
 800f3e6:	2b20      	cmp	r3, #32
 800f3e8:	f200 8084 	bhi.w	800f4f4 <UART_SetConfig+0xc4c>
 800f3ec:	a201      	add	r2, pc, #4	; (adr r2, 800f3f4 <UART_SetConfig+0xb4c>)
 800f3ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3f2:	bf00      	nop
 800f3f4:	0800f47f 	.word	0x0800f47f
 800f3f8:	0800f487 	.word	0x0800f487
 800f3fc:	0800f4f5 	.word	0x0800f4f5
 800f400:	0800f4f5 	.word	0x0800f4f5
 800f404:	0800f48f 	.word	0x0800f48f
 800f408:	0800f4f5 	.word	0x0800f4f5
 800f40c:	0800f4f5 	.word	0x0800f4f5
 800f410:	0800f4f5 	.word	0x0800f4f5
 800f414:	0800f49f 	.word	0x0800f49f
 800f418:	0800f4f5 	.word	0x0800f4f5
 800f41c:	0800f4f5 	.word	0x0800f4f5
 800f420:	0800f4f5 	.word	0x0800f4f5
 800f424:	0800f4f5 	.word	0x0800f4f5
 800f428:	0800f4f5 	.word	0x0800f4f5
 800f42c:	0800f4f5 	.word	0x0800f4f5
 800f430:	0800f4f5 	.word	0x0800f4f5
 800f434:	0800f4af 	.word	0x0800f4af
 800f438:	0800f4f5 	.word	0x0800f4f5
 800f43c:	0800f4f5 	.word	0x0800f4f5
 800f440:	0800f4f5 	.word	0x0800f4f5
 800f444:	0800f4f5 	.word	0x0800f4f5
 800f448:	0800f4f5 	.word	0x0800f4f5
 800f44c:	0800f4f5 	.word	0x0800f4f5
 800f450:	0800f4f5 	.word	0x0800f4f5
 800f454:	0800f4f5 	.word	0x0800f4f5
 800f458:	0800f4f5 	.word	0x0800f4f5
 800f45c:	0800f4f5 	.word	0x0800f4f5
 800f460:	0800f4f5 	.word	0x0800f4f5
 800f464:	0800f4f5 	.word	0x0800f4f5
 800f468:	0800f4f5 	.word	0x0800f4f5
 800f46c:	0800f4f5 	.word	0x0800f4f5
 800f470:	0800f4f5 	.word	0x0800f4f5
 800f474:	0800f4e7 	.word	0x0800f4e7
 800f478:	2b40      	cmp	r3, #64	; 0x40
 800f47a:	d037      	beq.n	800f4ec <UART_SetConfig+0xc44>
 800f47c:	e03a      	b.n	800f4f4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f47e:	f7fb f9c3 	bl	800a808 <HAL_RCC_GetPCLK1Freq>
 800f482:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f484:	e03c      	b.n	800f500 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f486:	f7fb f9d5 	bl	800a834 <HAL_RCC_GetPCLK2Freq>
 800f48a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f48c:	e038      	b.n	800f500 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f48e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f492:	4618      	mov	r0, r3
 800f494:	f7fc fb9a 	bl	800bbcc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f49a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f49c:	e030      	b.n	800f500 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f49e:	f107 0318 	add.w	r3, r7, #24
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f7fc fce6 	bl	800be74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f4a8:	69fb      	ldr	r3, [r7, #28]
 800f4aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f4ac:	e028      	b.n	800f500 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f4ae:	4b09      	ldr	r3, [pc, #36]	; (800f4d4 <UART_SetConfig+0xc2c>)
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	f003 0320 	and.w	r3, r3, #32
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d012      	beq.n	800f4e0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f4ba:	4b06      	ldr	r3, [pc, #24]	; (800f4d4 <UART_SetConfig+0xc2c>)
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	08db      	lsrs	r3, r3, #3
 800f4c0:	f003 0303 	and.w	r3, r3, #3
 800f4c4:	4a04      	ldr	r2, [pc, #16]	; (800f4d8 <UART_SetConfig+0xc30>)
 800f4c6:	fa22 f303 	lsr.w	r3, r2, r3
 800f4ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f4cc:	e018      	b.n	800f500 <UART_SetConfig+0xc58>
 800f4ce:	bf00      	nop
 800f4d0:	0801074c 	.word	0x0801074c
 800f4d4:	58024400 	.word	0x58024400
 800f4d8:	03d09000 	.word	0x03d09000
 800f4dc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800f4e0:	4b24      	ldr	r3, [pc, #144]	; (800f574 <UART_SetConfig+0xccc>)
 800f4e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f4e4:	e00c      	b.n	800f500 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f4e6:	4b24      	ldr	r3, [pc, #144]	; (800f578 <UART_SetConfig+0xcd0>)
 800f4e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f4ea:	e009      	b.n	800f500 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f4ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f4f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f4f2:	e005      	b.n	800f500 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f4f8:	2301      	movs	r3, #1
 800f4fa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f4fe:	bf00      	nop
    }

    if (pclk != 0U)
 800f500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f502:	2b00      	cmp	r3, #0
 800f504:	d021      	beq.n	800f54a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f506:	697b      	ldr	r3, [r7, #20]
 800f508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f50a:	4a1c      	ldr	r2, [pc, #112]	; (800f57c <UART_SetConfig+0xcd4>)
 800f50c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f510:	461a      	mov	r2, r3
 800f512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f514:	fbb3 f2f2 	udiv	r2, r3, r2
 800f518:	697b      	ldr	r3, [r7, #20]
 800f51a:	685b      	ldr	r3, [r3, #4]
 800f51c:	085b      	lsrs	r3, r3, #1
 800f51e:	441a      	add	r2, r3
 800f520:	697b      	ldr	r3, [r7, #20]
 800f522:	685b      	ldr	r3, [r3, #4]
 800f524:	fbb2 f3f3 	udiv	r3, r2, r3
 800f528:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f52a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f52c:	2b0f      	cmp	r3, #15
 800f52e:	d909      	bls.n	800f544 <UART_SetConfig+0xc9c>
 800f530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f536:	d205      	bcs.n	800f544 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f53a:	b29a      	uxth	r2, r3
 800f53c:	697b      	ldr	r3, [r7, #20]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	60da      	str	r2, [r3, #12]
 800f542:	e002      	b.n	800f54a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f544:	2301      	movs	r3, #1
 800f546:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f54a:	697b      	ldr	r3, [r7, #20]
 800f54c:	2201      	movs	r2, #1
 800f54e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f552:	697b      	ldr	r3, [r7, #20]
 800f554:	2201      	movs	r2, #1
 800f556:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f55a:	697b      	ldr	r3, [r7, #20]
 800f55c:	2200      	movs	r2, #0
 800f55e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800f560:	697b      	ldr	r3, [r7, #20]
 800f562:	2200      	movs	r2, #0
 800f564:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800f566:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f56a:	4618      	mov	r0, r3
 800f56c:	3748      	adds	r7, #72	; 0x48
 800f56e:	46bd      	mov	sp, r7
 800f570:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f574:	03d09000 	.word	0x03d09000
 800f578:	003d0900 	.word	0x003d0900
 800f57c:	0801074c 	.word	0x0801074c

0800f580 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f580:	b480      	push	{r7}
 800f582:	b083      	sub	sp, #12
 800f584:	af00      	add	r7, sp, #0
 800f586:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f58c:	f003 0301 	and.w	r3, r3, #1
 800f590:	2b00      	cmp	r3, #0
 800f592:	d00a      	beq.n	800f5aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	685b      	ldr	r3, [r3, #4]
 800f59a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	430a      	orrs	r2, r1
 800f5a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5ae:	f003 0302 	and.w	r3, r3, #2
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d00a      	beq.n	800f5cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	685b      	ldr	r3, [r3, #4]
 800f5bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	430a      	orrs	r2, r1
 800f5ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5d0:	f003 0304 	and.w	r3, r3, #4
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d00a      	beq.n	800f5ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	685b      	ldr	r3, [r3, #4]
 800f5de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	430a      	orrs	r2, r1
 800f5ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5f2:	f003 0308 	and.w	r3, r3, #8
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d00a      	beq.n	800f610 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	685b      	ldr	r3, [r3, #4]
 800f600:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	430a      	orrs	r2, r1
 800f60e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f614:	f003 0310 	and.w	r3, r3, #16
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d00a      	beq.n	800f632 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	689b      	ldr	r3, [r3, #8]
 800f622:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	430a      	orrs	r2, r1
 800f630:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f636:	f003 0320 	and.w	r3, r3, #32
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d00a      	beq.n	800f654 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	689b      	ldr	r3, [r3, #8]
 800f644:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	430a      	orrs	r2, r1
 800f652:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d01a      	beq.n	800f696 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	685b      	ldr	r3, [r3, #4]
 800f666:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	430a      	orrs	r2, r1
 800f674:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f67a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f67e:	d10a      	bne.n	800f696 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	685b      	ldr	r3, [r3, #4]
 800f686:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	430a      	orrs	r2, r1
 800f694:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f69a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d00a      	beq.n	800f6b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	685b      	ldr	r3, [r3, #4]
 800f6a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	430a      	orrs	r2, r1
 800f6b6:	605a      	str	r2, [r3, #4]
  }
}
 800f6b8:	bf00      	nop
 800f6ba:	370c      	adds	r7, #12
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c2:	4770      	bx	lr

0800f6c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b098      	sub	sp, #96	; 0x60
 800f6c8:	af02      	add	r7, sp, #8
 800f6ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	2200      	movs	r2, #0
 800f6d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f6d4:	f7f6 fd00 	bl	80060d8 <HAL_GetTick>
 800f6d8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	f003 0308 	and.w	r3, r3, #8
 800f6e4:	2b08      	cmp	r3, #8
 800f6e6:	d12f      	bne.n	800f748 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f6e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f6ec:	9300      	str	r3, [sp, #0]
 800f6ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f6f6:	6878      	ldr	r0, [r7, #4]
 800f6f8:	f000 f88e 	bl	800f818 <UART_WaitOnFlagUntilTimeout>
 800f6fc:	4603      	mov	r3, r0
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d022      	beq.n	800f748 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f70a:	e853 3f00 	ldrex	r3, [r3]
 800f70e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f712:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f716:	653b      	str	r3, [r7, #80]	; 0x50
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	461a      	mov	r2, r3
 800f71e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f720:	647b      	str	r3, [r7, #68]	; 0x44
 800f722:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f724:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f726:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f728:	e841 2300 	strex	r3, r2, [r1]
 800f72c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f72e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f730:	2b00      	cmp	r3, #0
 800f732:	d1e6      	bne.n	800f702 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	2220      	movs	r2, #32
 800f738:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	2200      	movs	r2, #0
 800f740:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f744:	2303      	movs	r3, #3
 800f746:	e063      	b.n	800f810 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	f003 0304 	and.w	r3, r3, #4
 800f752:	2b04      	cmp	r3, #4
 800f754:	d149      	bne.n	800f7ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f756:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f75a:	9300      	str	r3, [sp, #0]
 800f75c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f75e:	2200      	movs	r2, #0
 800f760:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f764:	6878      	ldr	r0, [r7, #4]
 800f766:	f000 f857 	bl	800f818 <UART_WaitOnFlagUntilTimeout>
 800f76a:	4603      	mov	r3, r0
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d03c      	beq.n	800f7ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f778:	e853 3f00 	ldrex	r3, [r3]
 800f77c:	623b      	str	r3, [r7, #32]
   return(result);
 800f77e:	6a3b      	ldr	r3, [r7, #32]
 800f780:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f784:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	461a      	mov	r2, r3
 800f78c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f78e:	633b      	str	r3, [r7, #48]	; 0x30
 800f790:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f792:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f796:	e841 2300 	strex	r3, r2, [r1]
 800f79a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d1e6      	bne.n	800f770 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	3308      	adds	r3, #8
 800f7a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7aa:	693b      	ldr	r3, [r7, #16]
 800f7ac:	e853 3f00 	ldrex	r3, [r3]
 800f7b0:	60fb      	str	r3, [r7, #12]
   return(result);
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	f023 0301 	bic.w	r3, r3, #1
 800f7b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	3308      	adds	r3, #8
 800f7c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f7c2:	61fa      	str	r2, [r7, #28]
 800f7c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7c6:	69b9      	ldr	r1, [r7, #24]
 800f7c8:	69fa      	ldr	r2, [r7, #28]
 800f7ca:	e841 2300 	strex	r3, r2, [r1]
 800f7ce:	617b      	str	r3, [r7, #20]
   return(result);
 800f7d0:	697b      	ldr	r3, [r7, #20]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d1e5      	bne.n	800f7a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	2220      	movs	r2, #32
 800f7da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f7e6:	2303      	movs	r3, #3
 800f7e8:	e012      	b.n	800f810 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	2220      	movs	r2, #32
 800f7ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	2220      	movs	r2, #32
 800f7f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	2200      	movs	r2, #0
 800f804:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	2200      	movs	r2, #0
 800f80a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f80e:	2300      	movs	r3, #0
}
 800f810:	4618      	mov	r0, r3
 800f812:	3758      	adds	r7, #88	; 0x58
 800f814:	46bd      	mov	sp, r7
 800f816:	bd80      	pop	{r7, pc}

0800f818 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b084      	sub	sp, #16
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	60f8      	str	r0, [r7, #12]
 800f820:	60b9      	str	r1, [r7, #8]
 800f822:	603b      	str	r3, [r7, #0]
 800f824:	4613      	mov	r3, r2
 800f826:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f828:	e049      	b.n	800f8be <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f82a:	69bb      	ldr	r3, [r7, #24]
 800f82c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f830:	d045      	beq.n	800f8be <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f832:	f7f6 fc51 	bl	80060d8 <HAL_GetTick>
 800f836:	4602      	mov	r2, r0
 800f838:	683b      	ldr	r3, [r7, #0]
 800f83a:	1ad3      	subs	r3, r2, r3
 800f83c:	69ba      	ldr	r2, [r7, #24]
 800f83e:	429a      	cmp	r2, r3
 800f840:	d302      	bcc.n	800f848 <UART_WaitOnFlagUntilTimeout+0x30>
 800f842:	69bb      	ldr	r3, [r7, #24]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d101      	bne.n	800f84c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f848:	2303      	movs	r3, #3
 800f84a:	e048      	b.n	800f8de <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	f003 0304 	and.w	r3, r3, #4
 800f856:	2b00      	cmp	r3, #0
 800f858:	d031      	beq.n	800f8be <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	69db      	ldr	r3, [r3, #28]
 800f860:	f003 0308 	and.w	r3, r3, #8
 800f864:	2b08      	cmp	r3, #8
 800f866:	d110      	bne.n	800f88a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	2208      	movs	r2, #8
 800f86e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800f870:	68f8      	ldr	r0, [r7, #12]
 800f872:	f000 f921 	bl	800fab8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	2208      	movs	r2, #8
 800f87a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	2200      	movs	r2, #0
 800f882:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800f886:	2301      	movs	r3, #1
 800f888:	e029      	b.n	800f8de <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	69db      	ldr	r3, [r3, #28]
 800f890:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f894:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f898:	d111      	bne.n	800f8be <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f8a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f8a4:	68f8      	ldr	r0, [r7, #12]
 800f8a6:	f000 f907 	bl	800fab8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	2220      	movs	r2, #32
 800f8ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f8ba:	2303      	movs	r3, #3
 800f8bc:	e00f      	b.n	800f8de <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	69da      	ldr	r2, [r3, #28]
 800f8c4:	68bb      	ldr	r3, [r7, #8]
 800f8c6:	4013      	ands	r3, r2
 800f8c8:	68ba      	ldr	r2, [r7, #8]
 800f8ca:	429a      	cmp	r2, r3
 800f8cc:	bf0c      	ite	eq
 800f8ce:	2301      	moveq	r3, #1
 800f8d0:	2300      	movne	r3, #0
 800f8d2:	b2db      	uxtb	r3, r3
 800f8d4:	461a      	mov	r2, r3
 800f8d6:	79fb      	ldrb	r3, [r7, #7]
 800f8d8:	429a      	cmp	r2, r3
 800f8da:	d0a6      	beq.n	800f82a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f8dc:	2300      	movs	r3, #0
}
 800f8de:	4618      	mov	r0, r3
 800f8e0:	3710      	adds	r7, #16
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	bd80      	pop	{r7, pc}
	...

0800f8e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b096      	sub	sp, #88	; 0x58
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	60f8      	str	r0, [r7, #12]
 800f8f0:	60b9      	str	r1, [r7, #8]
 800f8f2:	4613      	mov	r3, r2
 800f8f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	68ba      	ldr	r2, [r7, #8]
 800f8fa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	88fa      	ldrh	r2, [r7, #6]
 800f900:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	2200      	movs	r2, #0
 800f908:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	2222      	movs	r2, #34	; 0x22
 800f910:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d02d      	beq.n	800f97a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f924:	4a40      	ldr	r2, [pc, #256]	; (800fa28 <UART_Start_Receive_DMA+0x140>)
 800f926:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f92e:	4a3f      	ldr	r2, [pc, #252]	; (800fa2c <UART_Start_Receive_DMA+0x144>)
 800f930:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f938:	4a3d      	ldr	r2, [pc, #244]	; (800fa30 <UART_Start_Receive_DMA+0x148>)
 800f93a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f942:	2200      	movs	r2, #0
 800f944:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	3324      	adds	r3, #36	; 0x24
 800f952:	4619      	mov	r1, r3
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f958:	461a      	mov	r2, r3
 800f95a:	88fb      	ldrh	r3, [r7, #6]
 800f95c:	f7f7 fa3c 	bl	8006dd8 <HAL_DMA_Start_IT>
 800f960:	4603      	mov	r3, r0
 800f962:	2b00      	cmp	r3, #0
 800f964:	d009      	beq.n	800f97a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	2210      	movs	r2, #16
 800f96a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	2220      	movs	r2, #32
 800f972:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800f976:	2301      	movs	r3, #1
 800f978:	e051      	b.n	800fa1e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	691b      	ldr	r3, [r3, #16]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d018      	beq.n	800f9b4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f98a:	e853 3f00 	ldrex	r3, [r3]
 800f98e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f996:	657b      	str	r3, [r7, #84]	; 0x54
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	461a      	mov	r2, r3
 800f99e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f9a0:	64bb      	str	r3, [r7, #72]	; 0x48
 800f9a2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9a4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f9a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f9a8:	e841 2300 	strex	r3, r2, [r1]
 800f9ac:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f9ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d1e6      	bne.n	800f982 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	3308      	adds	r3, #8
 800f9ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9be:	e853 3f00 	ldrex	r3, [r3]
 800f9c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9c6:	f043 0301 	orr.w	r3, r3, #1
 800f9ca:	653b      	str	r3, [r7, #80]	; 0x50
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	3308      	adds	r3, #8
 800f9d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f9d4:	637a      	str	r2, [r7, #52]	; 0x34
 800f9d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f9da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f9dc:	e841 2300 	strex	r3, r2, [r1]
 800f9e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d1e5      	bne.n	800f9b4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	3308      	adds	r3, #8
 800f9ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9f0:	697b      	ldr	r3, [r7, #20]
 800f9f2:	e853 3f00 	ldrex	r3, [r3]
 800f9f6:	613b      	str	r3, [r7, #16]
   return(result);
 800f9f8:	693b      	ldr	r3, [r7, #16]
 800f9fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f9fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	3308      	adds	r3, #8
 800fa06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fa08:	623a      	str	r2, [r7, #32]
 800fa0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa0c:	69f9      	ldr	r1, [r7, #28]
 800fa0e:	6a3a      	ldr	r2, [r7, #32]
 800fa10:	e841 2300 	strex	r3, r2, [r1]
 800fa14:	61bb      	str	r3, [r7, #24]
   return(result);
 800fa16:	69bb      	ldr	r3, [r7, #24]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d1e5      	bne.n	800f9e8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800fa1c:	2300      	movs	r3, #0
}
 800fa1e:	4618      	mov	r0, r3
 800fa20:	3758      	adds	r7, #88	; 0x58
 800fa22:	46bd      	mov	sp, r7
 800fa24:	bd80      	pop	{r7, pc}
 800fa26:	bf00      	nop
 800fa28:	0800fc37 	.word	0x0800fc37
 800fa2c:	0800fd5f 	.word	0x0800fd5f
 800fa30:	0800fd9d 	.word	0x0800fd9d

0800fa34 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800fa34:	b480      	push	{r7}
 800fa36:	b08f      	sub	sp, #60	; 0x3c
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa42:	6a3b      	ldr	r3, [r7, #32]
 800fa44:	e853 3f00 	ldrex	r3, [r3]
 800fa48:	61fb      	str	r3, [r7, #28]
   return(result);
 800fa4a:	69fb      	ldr	r3, [r7, #28]
 800fa4c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800fa50:	637b      	str	r3, [r7, #52]	; 0x34
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	461a      	mov	r2, r3
 800fa58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fa5c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fa60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fa62:	e841 2300 	strex	r3, r2, [r1]
 800fa66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fa68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d1e6      	bne.n	800fa3c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	3308      	adds	r3, #8
 800fa74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	e853 3f00 	ldrex	r3, [r3]
 800fa7c:	60bb      	str	r3, [r7, #8]
   return(result);
 800fa7e:	68bb      	ldr	r3, [r7, #8]
 800fa80:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800fa84:	633b      	str	r3, [r7, #48]	; 0x30
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	3308      	adds	r3, #8
 800fa8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa8e:	61ba      	str	r2, [r7, #24]
 800fa90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa92:	6979      	ldr	r1, [r7, #20]
 800fa94:	69ba      	ldr	r2, [r7, #24]
 800fa96:	e841 2300 	strex	r3, r2, [r1]
 800fa9a:	613b      	str	r3, [r7, #16]
   return(result);
 800fa9c:	693b      	ldr	r3, [r7, #16]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d1e5      	bne.n	800fa6e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	2220      	movs	r2, #32
 800faa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800faaa:	bf00      	nop
 800faac:	373c      	adds	r7, #60	; 0x3c
 800faae:	46bd      	mov	sp, r7
 800fab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab4:	4770      	bx	lr
	...

0800fab8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fab8:	b480      	push	{r7}
 800faba:	b095      	sub	sp, #84	; 0x54
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fac8:	e853 3f00 	ldrex	r3, [r3]
 800facc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800face:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fad0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fad4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	461a      	mov	r2, r3
 800fadc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fade:	643b      	str	r3, [r7, #64]	; 0x40
 800fae0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fae2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fae4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fae6:	e841 2300 	strex	r3, r2, [r1]
 800faea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800faec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d1e6      	bne.n	800fac0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	3308      	adds	r3, #8
 800faf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fafa:	6a3b      	ldr	r3, [r7, #32]
 800fafc:	e853 3f00 	ldrex	r3, [r3]
 800fb00:	61fb      	str	r3, [r7, #28]
   return(result);
 800fb02:	69fa      	ldr	r2, [r7, #28]
 800fb04:	4b1e      	ldr	r3, [pc, #120]	; (800fb80 <UART_EndRxTransfer+0xc8>)
 800fb06:	4013      	ands	r3, r2
 800fb08:	64bb      	str	r3, [r7, #72]	; 0x48
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	3308      	adds	r3, #8
 800fb10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fb12:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fb14:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fb18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb1a:	e841 2300 	strex	r3, r2, [r1]
 800fb1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d1e5      	bne.n	800faf2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb2a:	2b01      	cmp	r3, #1
 800fb2c:	d118      	bne.n	800fb60 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	e853 3f00 	ldrex	r3, [r3]
 800fb3a:	60bb      	str	r3, [r7, #8]
   return(result);
 800fb3c:	68bb      	ldr	r3, [r7, #8]
 800fb3e:	f023 0310 	bic.w	r3, r3, #16
 800fb42:	647b      	str	r3, [r7, #68]	; 0x44
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	461a      	mov	r2, r3
 800fb4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb4c:	61bb      	str	r3, [r7, #24]
 800fb4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb50:	6979      	ldr	r1, [r7, #20]
 800fb52:	69ba      	ldr	r2, [r7, #24]
 800fb54:	e841 2300 	strex	r3, r2, [r1]
 800fb58:	613b      	str	r3, [r7, #16]
   return(result);
 800fb5a:	693b      	ldr	r3, [r7, #16]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d1e6      	bne.n	800fb2e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	2220      	movs	r2, #32
 800fb64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2200      	movs	r2, #0
 800fb6c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	2200      	movs	r2, #0
 800fb72:	675a      	str	r2, [r3, #116]	; 0x74
}
 800fb74:	bf00      	nop
 800fb76:	3754      	adds	r7, #84	; 0x54
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7e:	4770      	bx	lr
 800fb80:	effffffe 	.word	0xeffffffe

0800fb84 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b090      	sub	sp, #64	; 0x40
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb90:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	69db      	ldr	r3, [r3, #28]
 800fb96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fb9a:	d037      	beq.n	800fc0c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800fb9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb9e:	2200      	movs	r2, #0
 800fba0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	3308      	adds	r3, #8
 800fbaa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbae:	e853 3f00 	ldrex	r3, [r3]
 800fbb2:	623b      	str	r3, [r7, #32]
   return(result);
 800fbb4:	6a3b      	ldr	r3, [r7, #32]
 800fbb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fbba:	63bb      	str	r3, [r7, #56]	; 0x38
 800fbbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	3308      	adds	r3, #8
 800fbc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fbc4:	633a      	str	r2, [r7, #48]	; 0x30
 800fbc6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fbca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbcc:	e841 2300 	strex	r3, r2, [r1]
 800fbd0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fbd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d1e5      	bne.n	800fba4 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fbd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbde:	693b      	ldr	r3, [r7, #16]
 800fbe0:	e853 3f00 	ldrex	r3, [r3]
 800fbe4:	60fb      	str	r3, [r7, #12]
   return(result);
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fbec:	637b      	str	r3, [r7, #52]	; 0x34
 800fbee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	461a      	mov	r2, r3
 800fbf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbf6:	61fb      	str	r3, [r7, #28]
 800fbf8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbfa:	69b9      	ldr	r1, [r7, #24]
 800fbfc:	69fa      	ldr	r2, [r7, #28]
 800fbfe:	e841 2300 	strex	r3, r2, [r1]
 800fc02:	617b      	str	r3, [r7, #20]
   return(result);
 800fc04:	697b      	ldr	r3, [r7, #20]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d1e6      	bne.n	800fbd8 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fc0a:	e002      	b.n	800fc12 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800fc0c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fc0e:	f7f4 fa0b 	bl	8004028 <HAL_UART_TxCpltCallback>
}
 800fc12:	bf00      	nop
 800fc14:	3740      	adds	r7, #64	; 0x40
 800fc16:	46bd      	mov	sp, r7
 800fc18:	bd80      	pop	{r7, pc}

0800fc1a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fc1a:	b580      	push	{r7, lr}
 800fc1c:	b084      	sub	sp, #16
 800fc1e:	af00      	add	r7, sp, #0
 800fc20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc26:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800fc28:	68f8      	ldr	r0, [r7, #12]
 800fc2a:	f7fe fe13 	bl	800e854 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fc2e:	bf00      	nop
 800fc30:	3710      	adds	r7, #16
 800fc32:	46bd      	mov	sp, r7
 800fc34:	bd80      	pop	{r7, pc}

0800fc36 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fc36:	b580      	push	{r7, lr}
 800fc38:	b09c      	sub	sp, #112	; 0x70
 800fc3a:	af00      	add	r7, sp, #0
 800fc3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc42:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	69db      	ldr	r3, [r3, #28]
 800fc48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fc4c:	d071      	beq.n	800fd32 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800fc4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc50:	2200      	movs	r2, #0
 800fc52:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fc56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc5e:	e853 3f00 	ldrex	r3, [r3]
 800fc62:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fc64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fc6a:	66bb      	str	r3, [r7, #104]	; 0x68
 800fc6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	461a      	mov	r2, r3
 800fc72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fc74:	65bb      	str	r3, [r7, #88]	; 0x58
 800fc76:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fc7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fc7c:	e841 2300 	strex	r3, r2, [r1]
 800fc80:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fc82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d1e6      	bne.n	800fc56 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	3308      	adds	r3, #8
 800fc8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc92:	e853 3f00 	ldrex	r3, [r3]
 800fc96:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fc98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc9a:	f023 0301 	bic.w	r3, r3, #1
 800fc9e:	667b      	str	r3, [r7, #100]	; 0x64
 800fca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	3308      	adds	r3, #8
 800fca6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fca8:	647a      	str	r2, [r7, #68]	; 0x44
 800fcaa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fcae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fcb0:	e841 2300 	strex	r3, r2, [r1]
 800fcb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fcb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d1e5      	bne.n	800fc88 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fcbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	3308      	adds	r3, #8
 800fcc2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcc6:	e853 3f00 	ldrex	r3, [r3]
 800fcca:	623b      	str	r3, [r7, #32]
   return(result);
 800fccc:	6a3b      	ldr	r3, [r7, #32]
 800fcce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fcd2:	663b      	str	r3, [r7, #96]	; 0x60
 800fcd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	3308      	adds	r3, #8
 800fcda:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fcdc:	633a      	str	r2, [r7, #48]	; 0x30
 800fcde:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fce0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fce2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fce4:	e841 2300 	strex	r3, r2, [r1]
 800fce8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fcea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d1e5      	bne.n	800fcbc <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fcf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fcf2:	2220      	movs	r2, #32
 800fcf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fcf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fcfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcfc:	2b01      	cmp	r3, #1
 800fcfe:	d118      	bne.n	800fd32 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fd00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd06:	693b      	ldr	r3, [r7, #16]
 800fd08:	e853 3f00 	ldrex	r3, [r3]
 800fd0c:	60fb      	str	r3, [r7, #12]
   return(result);
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	f023 0310 	bic.w	r3, r3, #16
 800fd14:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fd16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	461a      	mov	r2, r3
 800fd1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fd1e:	61fb      	str	r3, [r7, #28]
 800fd20:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd22:	69b9      	ldr	r1, [r7, #24]
 800fd24:	69fa      	ldr	r2, [r7, #28]
 800fd26:	e841 2300 	strex	r3, r2, [r1]
 800fd2a:	617b      	str	r3, [r7, #20]
   return(result);
 800fd2c:	697b      	ldr	r3, [r7, #20]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d1e6      	bne.n	800fd00 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fd32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd34:	2200      	movs	r2, #0
 800fd36:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fd38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd3c:	2b01      	cmp	r3, #1
 800fd3e:	d107      	bne.n	800fd50 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fd40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fd46:	4619      	mov	r1, r3
 800fd48:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fd4a:	f7fe fda1 	bl	800e890 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fd4e:	e002      	b.n	800fd56 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800fd50:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fd52:	f7fe fd89 	bl	800e868 <HAL_UART_RxCpltCallback>
}
 800fd56:	bf00      	nop
 800fd58:	3770      	adds	r7, #112	; 0x70
 800fd5a:	46bd      	mov	sp, r7
 800fd5c:	bd80      	pop	{r7, pc}

0800fd5e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fd5e:	b580      	push	{r7, lr}
 800fd60:	b084      	sub	sp, #16
 800fd62:	af00      	add	r7, sp, #0
 800fd64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd6a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	2201      	movs	r2, #1
 800fd70:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd76:	2b01      	cmp	r3, #1
 800fd78:	d109      	bne.n	800fd8e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fd80:	085b      	lsrs	r3, r3, #1
 800fd82:	b29b      	uxth	r3, r3
 800fd84:	4619      	mov	r1, r3
 800fd86:	68f8      	ldr	r0, [r7, #12]
 800fd88:	f7fe fd82 	bl	800e890 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fd8c:	e002      	b.n	800fd94 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800fd8e:	68f8      	ldr	r0, [r7, #12]
 800fd90:	f7fe fd74 	bl	800e87c <HAL_UART_RxHalfCpltCallback>
}
 800fd94:	bf00      	nop
 800fd96:	3710      	adds	r7, #16
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	bd80      	pop	{r7, pc}

0800fd9c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b086      	sub	sp, #24
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fda8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800fdaa:	697b      	ldr	r3, [r7, #20]
 800fdac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fdb0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800fdb2:	697b      	ldr	r3, [r7, #20]
 800fdb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fdb8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800fdba:	697b      	ldr	r3, [r7, #20]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	689b      	ldr	r3, [r3, #8]
 800fdc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fdc4:	2b80      	cmp	r3, #128	; 0x80
 800fdc6:	d109      	bne.n	800fddc <UART_DMAError+0x40>
 800fdc8:	693b      	ldr	r3, [r7, #16]
 800fdca:	2b21      	cmp	r3, #33	; 0x21
 800fdcc:	d106      	bne.n	800fddc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800fdce:	697b      	ldr	r3, [r7, #20]
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800fdd6:	6978      	ldr	r0, [r7, #20]
 800fdd8:	f7ff fe2c 	bl	800fa34 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800fddc:	697b      	ldr	r3, [r7, #20]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	689b      	ldr	r3, [r3, #8]
 800fde2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fde6:	2b40      	cmp	r3, #64	; 0x40
 800fde8:	d109      	bne.n	800fdfe <UART_DMAError+0x62>
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	2b22      	cmp	r3, #34	; 0x22
 800fdee:	d106      	bne.n	800fdfe <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800fdf0:	697b      	ldr	r3, [r7, #20]
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800fdf8:	6978      	ldr	r0, [r7, #20]
 800fdfa:	f7ff fe5d 	bl	800fab8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fdfe:	697b      	ldr	r3, [r7, #20]
 800fe00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fe04:	f043 0210 	orr.w	r2, r3, #16
 800fe08:	697b      	ldr	r3, [r7, #20]
 800fe0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fe0e:	6978      	ldr	r0, [r7, #20]
 800fe10:	f7f4 f8ee 	bl	8003ff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fe14:	bf00      	nop
 800fe16:	3718      	adds	r7, #24
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	bd80      	pop	{r7, pc}

0800fe1c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b084      	sub	sp, #16
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	2200      	movs	r2, #0
 800fe2e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	2200      	movs	r2, #0
 800fe36:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fe3a:	68f8      	ldr	r0, [r7, #12]
 800fe3c:	f7f4 f8d8 	bl	8003ff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fe40:	bf00      	nop
 800fe42:	3710      	adds	r7, #16
 800fe44:	46bd      	mov	sp, r7
 800fe46:	bd80      	pop	{r7, pc}

0800fe48 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b088      	sub	sp, #32
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	e853 3f00 	ldrex	r3, [r3]
 800fe5c:	60bb      	str	r3, [r7, #8]
   return(result);
 800fe5e:	68bb      	ldr	r3, [r7, #8]
 800fe60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fe64:	61fb      	str	r3, [r7, #28]
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	461a      	mov	r2, r3
 800fe6c:	69fb      	ldr	r3, [r7, #28]
 800fe6e:	61bb      	str	r3, [r7, #24]
 800fe70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe72:	6979      	ldr	r1, [r7, #20]
 800fe74:	69ba      	ldr	r2, [r7, #24]
 800fe76:	e841 2300 	strex	r3, r2, [r1]
 800fe7a:	613b      	str	r3, [r7, #16]
   return(result);
 800fe7c:	693b      	ldr	r3, [r7, #16]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d1e6      	bne.n	800fe50 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	2220      	movs	r2, #32
 800fe86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	2200      	movs	r2, #0
 800fe8e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fe90:	6878      	ldr	r0, [r7, #4]
 800fe92:	f7f4 f8c9 	bl	8004028 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fe96:	bf00      	nop
 800fe98:	3720      	adds	r7, #32
 800fe9a:	46bd      	mov	sp, r7
 800fe9c:	bd80      	pop	{r7, pc}

0800fe9e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fe9e:	b480      	push	{r7}
 800fea0:	b083      	sub	sp, #12
 800fea2:	af00      	add	r7, sp, #0
 800fea4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fea6:	bf00      	nop
 800fea8:	370c      	adds	r7, #12
 800feaa:	46bd      	mov	sp, r7
 800feac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb0:	4770      	bx	lr

0800feb2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800feb2:	b480      	push	{r7}
 800feb4:	b083      	sub	sp, #12
 800feb6:	af00      	add	r7, sp, #0
 800feb8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800feba:	bf00      	nop
 800febc:	370c      	adds	r7, #12
 800febe:	46bd      	mov	sp, r7
 800fec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec4:	4770      	bx	lr

0800fec6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fec6:	b480      	push	{r7}
 800fec8:	b083      	sub	sp, #12
 800feca:	af00      	add	r7, sp, #0
 800fecc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fece:	bf00      	nop
 800fed0:	370c      	adds	r7, #12
 800fed2:	46bd      	mov	sp, r7
 800fed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed8:	4770      	bx	lr

0800feda <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800feda:	b480      	push	{r7}
 800fedc:	b085      	sub	sp, #20
 800fede:	af00      	add	r7, sp, #0
 800fee0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fee8:	2b01      	cmp	r3, #1
 800feea:	d101      	bne.n	800fef0 <HAL_UARTEx_DisableFifoMode+0x16>
 800feec:	2302      	movs	r3, #2
 800feee:	e027      	b.n	800ff40 <HAL_UARTEx_DisableFifoMode+0x66>
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	2201      	movs	r2, #1
 800fef4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	2224      	movs	r2, #36	; 0x24
 800fefc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	681a      	ldr	r2, [r3, #0]
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	f022 0201 	bic.w	r2, r2, #1
 800ff16:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ff1e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	2200      	movs	r2, #0
 800ff24:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	68fa      	ldr	r2, [r7, #12]
 800ff2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	2220      	movs	r2, #32
 800ff32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	2200      	movs	r2, #0
 800ff3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ff3e:	2300      	movs	r3, #0
}
 800ff40:	4618      	mov	r0, r3
 800ff42:	3714      	adds	r7, #20
 800ff44:	46bd      	mov	sp, r7
 800ff46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4a:	4770      	bx	lr

0800ff4c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b084      	sub	sp, #16
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
 800ff54:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ff5c:	2b01      	cmp	r3, #1
 800ff5e:	d101      	bne.n	800ff64 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ff60:	2302      	movs	r3, #2
 800ff62:	e02d      	b.n	800ffc0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	2201      	movs	r2, #1
 800ff68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2224      	movs	r2, #36	; 0x24
 800ff70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	681a      	ldr	r2, [r3, #0]
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	f022 0201 	bic.w	r2, r2, #1
 800ff8a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	689b      	ldr	r3, [r3, #8]
 800ff92:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	683a      	ldr	r2, [r7, #0]
 800ff9c:	430a      	orrs	r2, r1
 800ff9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ffa0:	6878      	ldr	r0, [r7, #4]
 800ffa2:	f000 f84f 	bl	8010044 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	68fa      	ldr	r2, [r7, #12]
 800ffac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	2220      	movs	r2, #32
 800ffb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	2200      	movs	r2, #0
 800ffba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ffbe:	2300      	movs	r3, #0
}
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	3710      	adds	r7, #16
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	bd80      	pop	{r7, pc}

0800ffc8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b084      	sub	sp, #16
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
 800ffd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ffd8:	2b01      	cmp	r3, #1
 800ffda:	d101      	bne.n	800ffe0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ffdc:	2302      	movs	r3, #2
 800ffde:	e02d      	b.n	801003c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	2201      	movs	r2, #1
 800ffe4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	2224      	movs	r2, #36	; 0x24
 800ffec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	681a      	ldr	r2, [r3, #0]
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	f022 0201 	bic.w	r2, r2, #1
 8010006:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	689b      	ldr	r3, [r3, #8]
 801000e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	683a      	ldr	r2, [r7, #0]
 8010018:	430a      	orrs	r2, r1
 801001a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801001c:	6878      	ldr	r0, [r7, #4]
 801001e:	f000 f811 	bl	8010044 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	68fa      	ldr	r2, [r7, #12]
 8010028:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	2220      	movs	r2, #32
 801002e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	2200      	movs	r2, #0
 8010036:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801003a:	2300      	movs	r3, #0
}
 801003c:	4618      	mov	r0, r3
 801003e:	3710      	adds	r7, #16
 8010040:	46bd      	mov	sp, r7
 8010042:	bd80      	pop	{r7, pc}

08010044 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010044:	b480      	push	{r7}
 8010046:	b085      	sub	sp, #20
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010050:	2b00      	cmp	r3, #0
 8010052:	d108      	bne.n	8010066 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	2201      	movs	r2, #1
 8010058:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	2201      	movs	r2, #1
 8010060:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010064:	e031      	b.n	80100ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010066:	2310      	movs	r3, #16
 8010068:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801006a:	2310      	movs	r3, #16
 801006c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	689b      	ldr	r3, [r3, #8]
 8010074:	0e5b      	lsrs	r3, r3, #25
 8010076:	b2db      	uxtb	r3, r3
 8010078:	f003 0307 	and.w	r3, r3, #7
 801007c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	689b      	ldr	r3, [r3, #8]
 8010084:	0f5b      	lsrs	r3, r3, #29
 8010086:	b2db      	uxtb	r3, r3
 8010088:	f003 0307 	and.w	r3, r3, #7
 801008c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801008e:	7bbb      	ldrb	r3, [r7, #14]
 8010090:	7b3a      	ldrb	r2, [r7, #12]
 8010092:	4911      	ldr	r1, [pc, #68]	; (80100d8 <UARTEx_SetNbDataToProcess+0x94>)
 8010094:	5c8a      	ldrb	r2, [r1, r2]
 8010096:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801009a:	7b3a      	ldrb	r2, [r7, #12]
 801009c:	490f      	ldr	r1, [pc, #60]	; (80100dc <UARTEx_SetNbDataToProcess+0x98>)
 801009e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80100a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80100a4:	b29a      	uxth	r2, r3
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80100ac:	7bfb      	ldrb	r3, [r7, #15]
 80100ae:	7b7a      	ldrb	r2, [r7, #13]
 80100b0:	4909      	ldr	r1, [pc, #36]	; (80100d8 <UARTEx_SetNbDataToProcess+0x94>)
 80100b2:	5c8a      	ldrb	r2, [r1, r2]
 80100b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80100b8:	7b7a      	ldrb	r2, [r7, #13]
 80100ba:	4908      	ldr	r1, [pc, #32]	; (80100dc <UARTEx_SetNbDataToProcess+0x98>)
 80100bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80100be:	fb93 f3f2 	sdiv	r3, r3, r2
 80100c2:	b29a      	uxth	r2, r3
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80100ca:	bf00      	nop
 80100cc:	3714      	adds	r7, #20
 80100ce:	46bd      	mov	sp, r7
 80100d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d4:	4770      	bx	lr
 80100d6:	bf00      	nop
 80100d8:	08010764 	.word	0x08010764
 80100dc:	0801076c 	.word	0x0801076c

080100e0 <realloc>:
 80100e0:	4b02      	ldr	r3, [pc, #8]	; (80100ec <realloc+0xc>)
 80100e2:	460a      	mov	r2, r1
 80100e4:	4601      	mov	r1, r0
 80100e6:	6818      	ldr	r0, [r3, #0]
 80100e8:	f000 b802 	b.w	80100f0 <_realloc_r>
 80100ec:	240000ac 	.word	0x240000ac

080100f0 <_realloc_r>:
 80100f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100f4:	4680      	mov	r8, r0
 80100f6:	4614      	mov	r4, r2
 80100f8:	460e      	mov	r6, r1
 80100fa:	b921      	cbnz	r1, 8010106 <_realloc_r+0x16>
 80100fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010100:	4611      	mov	r1, r2
 8010102:	f000 b8d3 	b.w	80102ac <_malloc_r>
 8010106:	b92a      	cbnz	r2, 8010114 <_realloc_r+0x24>
 8010108:	f000 f864 	bl	80101d4 <_free_r>
 801010c:	4625      	mov	r5, r4
 801010e:	4628      	mov	r0, r5
 8010110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010114:	f000 f956 	bl	80103c4 <_malloc_usable_size_r>
 8010118:	4284      	cmp	r4, r0
 801011a:	4607      	mov	r7, r0
 801011c:	d802      	bhi.n	8010124 <_realloc_r+0x34>
 801011e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010122:	d812      	bhi.n	801014a <_realloc_r+0x5a>
 8010124:	4621      	mov	r1, r4
 8010126:	4640      	mov	r0, r8
 8010128:	f000 f8c0 	bl	80102ac <_malloc_r>
 801012c:	4605      	mov	r5, r0
 801012e:	2800      	cmp	r0, #0
 8010130:	d0ed      	beq.n	801010e <_realloc_r+0x1e>
 8010132:	42bc      	cmp	r4, r7
 8010134:	4622      	mov	r2, r4
 8010136:	4631      	mov	r1, r6
 8010138:	bf28      	it	cs
 801013a:	463a      	movcs	r2, r7
 801013c:	f000 f83c 	bl	80101b8 <memcpy>
 8010140:	4631      	mov	r1, r6
 8010142:	4640      	mov	r0, r8
 8010144:	f000 f846 	bl	80101d4 <_free_r>
 8010148:	e7e1      	b.n	801010e <_realloc_r+0x1e>
 801014a:	4635      	mov	r5, r6
 801014c:	e7df      	b.n	801010e <_realloc_r+0x1e>

0801014e <memset>:
 801014e:	4402      	add	r2, r0
 8010150:	4603      	mov	r3, r0
 8010152:	4293      	cmp	r3, r2
 8010154:	d100      	bne.n	8010158 <memset+0xa>
 8010156:	4770      	bx	lr
 8010158:	f803 1b01 	strb.w	r1, [r3], #1
 801015c:	e7f9      	b.n	8010152 <memset+0x4>
	...

08010160 <__errno>:
 8010160:	4b01      	ldr	r3, [pc, #4]	; (8010168 <__errno+0x8>)
 8010162:	6818      	ldr	r0, [r3, #0]
 8010164:	4770      	bx	lr
 8010166:	bf00      	nop
 8010168:	240000ac 	.word	0x240000ac

0801016c <__libc_init_array>:
 801016c:	b570      	push	{r4, r5, r6, lr}
 801016e:	4d0d      	ldr	r5, [pc, #52]	; (80101a4 <__libc_init_array+0x38>)
 8010170:	4c0d      	ldr	r4, [pc, #52]	; (80101a8 <__libc_init_array+0x3c>)
 8010172:	1b64      	subs	r4, r4, r5
 8010174:	10a4      	asrs	r4, r4, #2
 8010176:	2600      	movs	r6, #0
 8010178:	42a6      	cmp	r6, r4
 801017a:	d109      	bne.n	8010190 <__libc_init_array+0x24>
 801017c:	4d0b      	ldr	r5, [pc, #44]	; (80101ac <__libc_init_array+0x40>)
 801017e:	4c0c      	ldr	r4, [pc, #48]	; (80101b0 <__libc_init_array+0x44>)
 8010180:	f000 f938 	bl	80103f4 <_init>
 8010184:	1b64      	subs	r4, r4, r5
 8010186:	10a4      	asrs	r4, r4, #2
 8010188:	2600      	movs	r6, #0
 801018a:	42a6      	cmp	r6, r4
 801018c:	d105      	bne.n	801019a <__libc_init_array+0x2e>
 801018e:	bd70      	pop	{r4, r5, r6, pc}
 8010190:	f855 3b04 	ldr.w	r3, [r5], #4
 8010194:	4798      	blx	r3
 8010196:	3601      	adds	r6, #1
 8010198:	e7ee      	b.n	8010178 <__libc_init_array+0xc>
 801019a:	f855 3b04 	ldr.w	r3, [r5], #4
 801019e:	4798      	blx	r3
 80101a0:	3601      	adds	r6, #1
 80101a2:	e7f2      	b.n	801018a <__libc_init_array+0x1e>
 80101a4:	0801077c 	.word	0x0801077c
 80101a8:	0801077c 	.word	0x0801077c
 80101ac:	0801077c 	.word	0x0801077c
 80101b0:	08010790 	.word	0x08010790

080101b4 <__retarget_lock_acquire_recursive>:
 80101b4:	4770      	bx	lr

080101b6 <__retarget_lock_release_recursive>:
 80101b6:	4770      	bx	lr

080101b8 <memcpy>:
 80101b8:	440a      	add	r2, r1
 80101ba:	4291      	cmp	r1, r2
 80101bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80101c0:	d100      	bne.n	80101c4 <memcpy+0xc>
 80101c2:	4770      	bx	lr
 80101c4:	b510      	push	{r4, lr}
 80101c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80101ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80101ce:	4291      	cmp	r1, r2
 80101d0:	d1f9      	bne.n	80101c6 <memcpy+0xe>
 80101d2:	bd10      	pop	{r4, pc}

080101d4 <_free_r>:
 80101d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80101d6:	2900      	cmp	r1, #0
 80101d8:	d044      	beq.n	8010264 <_free_r+0x90>
 80101da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80101de:	9001      	str	r0, [sp, #4]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	f1a1 0404 	sub.w	r4, r1, #4
 80101e6:	bfb8      	it	lt
 80101e8:	18e4      	addlt	r4, r4, r3
 80101ea:	f000 f8df 	bl	80103ac <__malloc_lock>
 80101ee:	4a1e      	ldr	r2, [pc, #120]	; (8010268 <_free_r+0x94>)
 80101f0:	9801      	ldr	r0, [sp, #4]
 80101f2:	6813      	ldr	r3, [r2, #0]
 80101f4:	b933      	cbnz	r3, 8010204 <_free_r+0x30>
 80101f6:	6063      	str	r3, [r4, #4]
 80101f8:	6014      	str	r4, [r2, #0]
 80101fa:	b003      	add	sp, #12
 80101fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010200:	f000 b8da 	b.w	80103b8 <__malloc_unlock>
 8010204:	42a3      	cmp	r3, r4
 8010206:	d908      	bls.n	801021a <_free_r+0x46>
 8010208:	6825      	ldr	r5, [r4, #0]
 801020a:	1961      	adds	r1, r4, r5
 801020c:	428b      	cmp	r3, r1
 801020e:	bf01      	itttt	eq
 8010210:	6819      	ldreq	r1, [r3, #0]
 8010212:	685b      	ldreq	r3, [r3, #4]
 8010214:	1949      	addeq	r1, r1, r5
 8010216:	6021      	streq	r1, [r4, #0]
 8010218:	e7ed      	b.n	80101f6 <_free_r+0x22>
 801021a:	461a      	mov	r2, r3
 801021c:	685b      	ldr	r3, [r3, #4]
 801021e:	b10b      	cbz	r3, 8010224 <_free_r+0x50>
 8010220:	42a3      	cmp	r3, r4
 8010222:	d9fa      	bls.n	801021a <_free_r+0x46>
 8010224:	6811      	ldr	r1, [r2, #0]
 8010226:	1855      	adds	r5, r2, r1
 8010228:	42a5      	cmp	r5, r4
 801022a:	d10b      	bne.n	8010244 <_free_r+0x70>
 801022c:	6824      	ldr	r4, [r4, #0]
 801022e:	4421      	add	r1, r4
 8010230:	1854      	adds	r4, r2, r1
 8010232:	42a3      	cmp	r3, r4
 8010234:	6011      	str	r1, [r2, #0]
 8010236:	d1e0      	bne.n	80101fa <_free_r+0x26>
 8010238:	681c      	ldr	r4, [r3, #0]
 801023a:	685b      	ldr	r3, [r3, #4]
 801023c:	6053      	str	r3, [r2, #4]
 801023e:	440c      	add	r4, r1
 8010240:	6014      	str	r4, [r2, #0]
 8010242:	e7da      	b.n	80101fa <_free_r+0x26>
 8010244:	d902      	bls.n	801024c <_free_r+0x78>
 8010246:	230c      	movs	r3, #12
 8010248:	6003      	str	r3, [r0, #0]
 801024a:	e7d6      	b.n	80101fa <_free_r+0x26>
 801024c:	6825      	ldr	r5, [r4, #0]
 801024e:	1961      	adds	r1, r4, r5
 8010250:	428b      	cmp	r3, r1
 8010252:	bf04      	itt	eq
 8010254:	6819      	ldreq	r1, [r3, #0]
 8010256:	685b      	ldreq	r3, [r3, #4]
 8010258:	6063      	str	r3, [r4, #4]
 801025a:	bf04      	itt	eq
 801025c:	1949      	addeq	r1, r1, r5
 801025e:	6021      	streq	r1, [r4, #0]
 8010260:	6054      	str	r4, [r2, #4]
 8010262:	e7ca      	b.n	80101fa <_free_r+0x26>
 8010264:	b003      	add	sp, #12
 8010266:	bd30      	pop	{r4, r5, pc}
 8010268:	24002164 	.word	0x24002164

0801026c <sbrk_aligned>:
 801026c:	b570      	push	{r4, r5, r6, lr}
 801026e:	4e0e      	ldr	r6, [pc, #56]	; (80102a8 <sbrk_aligned+0x3c>)
 8010270:	460c      	mov	r4, r1
 8010272:	6831      	ldr	r1, [r6, #0]
 8010274:	4605      	mov	r5, r0
 8010276:	b911      	cbnz	r1, 801027e <sbrk_aligned+0x12>
 8010278:	f000 f8ac 	bl	80103d4 <_sbrk_r>
 801027c:	6030      	str	r0, [r6, #0]
 801027e:	4621      	mov	r1, r4
 8010280:	4628      	mov	r0, r5
 8010282:	f000 f8a7 	bl	80103d4 <_sbrk_r>
 8010286:	1c43      	adds	r3, r0, #1
 8010288:	d00a      	beq.n	80102a0 <sbrk_aligned+0x34>
 801028a:	1cc4      	adds	r4, r0, #3
 801028c:	f024 0403 	bic.w	r4, r4, #3
 8010290:	42a0      	cmp	r0, r4
 8010292:	d007      	beq.n	80102a4 <sbrk_aligned+0x38>
 8010294:	1a21      	subs	r1, r4, r0
 8010296:	4628      	mov	r0, r5
 8010298:	f000 f89c 	bl	80103d4 <_sbrk_r>
 801029c:	3001      	adds	r0, #1
 801029e:	d101      	bne.n	80102a4 <sbrk_aligned+0x38>
 80102a0:	f04f 34ff 	mov.w	r4, #4294967295
 80102a4:	4620      	mov	r0, r4
 80102a6:	bd70      	pop	{r4, r5, r6, pc}
 80102a8:	24002168 	.word	0x24002168

080102ac <_malloc_r>:
 80102ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80102b0:	1ccd      	adds	r5, r1, #3
 80102b2:	f025 0503 	bic.w	r5, r5, #3
 80102b6:	3508      	adds	r5, #8
 80102b8:	2d0c      	cmp	r5, #12
 80102ba:	bf38      	it	cc
 80102bc:	250c      	movcc	r5, #12
 80102be:	2d00      	cmp	r5, #0
 80102c0:	4607      	mov	r7, r0
 80102c2:	db01      	blt.n	80102c8 <_malloc_r+0x1c>
 80102c4:	42a9      	cmp	r1, r5
 80102c6:	d905      	bls.n	80102d4 <_malloc_r+0x28>
 80102c8:	230c      	movs	r3, #12
 80102ca:	603b      	str	r3, [r7, #0]
 80102cc:	2600      	movs	r6, #0
 80102ce:	4630      	mov	r0, r6
 80102d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80103a8 <_malloc_r+0xfc>
 80102d8:	f000 f868 	bl	80103ac <__malloc_lock>
 80102dc:	f8d8 3000 	ldr.w	r3, [r8]
 80102e0:	461c      	mov	r4, r3
 80102e2:	bb5c      	cbnz	r4, 801033c <_malloc_r+0x90>
 80102e4:	4629      	mov	r1, r5
 80102e6:	4638      	mov	r0, r7
 80102e8:	f7ff ffc0 	bl	801026c <sbrk_aligned>
 80102ec:	1c43      	adds	r3, r0, #1
 80102ee:	4604      	mov	r4, r0
 80102f0:	d155      	bne.n	801039e <_malloc_r+0xf2>
 80102f2:	f8d8 4000 	ldr.w	r4, [r8]
 80102f6:	4626      	mov	r6, r4
 80102f8:	2e00      	cmp	r6, #0
 80102fa:	d145      	bne.n	8010388 <_malloc_r+0xdc>
 80102fc:	2c00      	cmp	r4, #0
 80102fe:	d048      	beq.n	8010392 <_malloc_r+0xe6>
 8010300:	6823      	ldr	r3, [r4, #0]
 8010302:	4631      	mov	r1, r6
 8010304:	4638      	mov	r0, r7
 8010306:	eb04 0903 	add.w	r9, r4, r3
 801030a:	f000 f863 	bl	80103d4 <_sbrk_r>
 801030e:	4581      	cmp	r9, r0
 8010310:	d13f      	bne.n	8010392 <_malloc_r+0xe6>
 8010312:	6821      	ldr	r1, [r4, #0]
 8010314:	1a6d      	subs	r5, r5, r1
 8010316:	4629      	mov	r1, r5
 8010318:	4638      	mov	r0, r7
 801031a:	f7ff ffa7 	bl	801026c <sbrk_aligned>
 801031e:	3001      	adds	r0, #1
 8010320:	d037      	beq.n	8010392 <_malloc_r+0xe6>
 8010322:	6823      	ldr	r3, [r4, #0]
 8010324:	442b      	add	r3, r5
 8010326:	6023      	str	r3, [r4, #0]
 8010328:	f8d8 3000 	ldr.w	r3, [r8]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d038      	beq.n	80103a2 <_malloc_r+0xf6>
 8010330:	685a      	ldr	r2, [r3, #4]
 8010332:	42a2      	cmp	r2, r4
 8010334:	d12b      	bne.n	801038e <_malloc_r+0xe2>
 8010336:	2200      	movs	r2, #0
 8010338:	605a      	str	r2, [r3, #4]
 801033a:	e00f      	b.n	801035c <_malloc_r+0xb0>
 801033c:	6822      	ldr	r2, [r4, #0]
 801033e:	1b52      	subs	r2, r2, r5
 8010340:	d41f      	bmi.n	8010382 <_malloc_r+0xd6>
 8010342:	2a0b      	cmp	r2, #11
 8010344:	d917      	bls.n	8010376 <_malloc_r+0xca>
 8010346:	1961      	adds	r1, r4, r5
 8010348:	42a3      	cmp	r3, r4
 801034a:	6025      	str	r5, [r4, #0]
 801034c:	bf18      	it	ne
 801034e:	6059      	strne	r1, [r3, #4]
 8010350:	6863      	ldr	r3, [r4, #4]
 8010352:	bf08      	it	eq
 8010354:	f8c8 1000 	streq.w	r1, [r8]
 8010358:	5162      	str	r2, [r4, r5]
 801035a:	604b      	str	r3, [r1, #4]
 801035c:	4638      	mov	r0, r7
 801035e:	f104 060b 	add.w	r6, r4, #11
 8010362:	f000 f829 	bl	80103b8 <__malloc_unlock>
 8010366:	f026 0607 	bic.w	r6, r6, #7
 801036a:	1d23      	adds	r3, r4, #4
 801036c:	1af2      	subs	r2, r6, r3
 801036e:	d0ae      	beq.n	80102ce <_malloc_r+0x22>
 8010370:	1b9b      	subs	r3, r3, r6
 8010372:	50a3      	str	r3, [r4, r2]
 8010374:	e7ab      	b.n	80102ce <_malloc_r+0x22>
 8010376:	42a3      	cmp	r3, r4
 8010378:	6862      	ldr	r2, [r4, #4]
 801037a:	d1dd      	bne.n	8010338 <_malloc_r+0x8c>
 801037c:	f8c8 2000 	str.w	r2, [r8]
 8010380:	e7ec      	b.n	801035c <_malloc_r+0xb0>
 8010382:	4623      	mov	r3, r4
 8010384:	6864      	ldr	r4, [r4, #4]
 8010386:	e7ac      	b.n	80102e2 <_malloc_r+0x36>
 8010388:	4634      	mov	r4, r6
 801038a:	6876      	ldr	r6, [r6, #4]
 801038c:	e7b4      	b.n	80102f8 <_malloc_r+0x4c>
 801038e:	4613      	mov	r3, r2
 8010390:	e7cc      	b.n	801032c <_malloc_r+0x80>
 8010392:	230c      	movs	r3, #12
 8010394:	603b      	str	r3, [r7, #0]
 8010396:	4638      	mov	r0, r7
 8010398:	f000 f80e 	bl	80103b8 <__malloc_unlock>
 801039c:	e797      	b.n	80102ce <_malloc_r+0x22>
 801039e:	6025      	str	r5, [r4, #0]
 80103a0:	e7dc      	b.n	801035c <_malloc_r+0xb0>
 80103a2:	605b      	str	r3, [r3, #4]
 80103a4:	deff      	udf	#255	; 0xff
 80103a6:	bf00      	nop
 80103a8:	24002164 	.word	0x24002164

080103ac <__malloc_lock>:
 80103ac:	4801      	ldr	r0, [pc, #4]	; (80103b4 <__malloc_lock+0x8>)
 80103ae:	f7ff bf01 	b.w	80101b4 <__retarget_lock_acquire_recursive>
 80103b2:	bf00      	nop
 80103b4:	24002160 	.word	0x24002160

080103b8 <__malloc_unlock>:
 80103b8:	4801      	ldr	r0, [pc, #4]	; (80103c0 <__malloc_unlock+0x8>)
 80103ba:	f7ff befc 	b.w	80101b6 <__retarget_lock_release_recursive>
 80103be:	bf00      	nop
 80103c0:	24002160 	.word	0x24002160

080103c4 <_malloc_usable_size_r>:
 80103c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80103c8:	1f18      	subs	r0, r3, #4
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	bfbc      	itt	lt
 80103ce:	580b      	ldrlt	r3, [r1, r0]
 80103d0:	18c0      	addlt	r0, r0, r3
 80103d2:	4770      	bx	lr

080103d4 <_sbrk_r>:
 80103d4:	b538      	push	{r3, r4, r5, lr}
 80103d6:	4d06      	ldr	r5, [pc, #24]	; (80103f0 <_sbrk_r+0x1c>)
 80103d8:	2300      	movs	r3, #0
 80103da:	4604      	mov	r4, r0
 80103dc:	4608      	mov	r0, r1
 80103de:	602b      	str	r3, [r5, #0]
 80103e0:	f7f5 fd1c 	bl	8005e1c <_sbrk>
 80103e4:	1c43      	adds	r3, r0, #1
 80103e6:	d102      	bne.n	80103ee <_sbrk_r+0x1a>
 80103e8:	682b      	ldr	r3, [r5, #0]
 80103ea:	b103      	cbz	r3, 80103ee <_sbrk_r+0x1a>
 80103ec:	6023      	str	r3, [r4, #0]
 80103ee:	bd38      	pop	{r3, r4, r5, pc}
 80103f0:	2400215c 	.word	0x2400215c

080103f4 <_init>:
 80103f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103f6:	bf00      	nop
 80103f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103fa:	bc08      	pop	{r3}
 80103fc:	469e      	mov	lr, r3
 80103fe:	4770      	bx	lr

08010400 <_fini>:
 8010400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010402:	bf00      	nop
 8010404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010406:	bc08      	pop	{r3}
 8010408:	469e      	mov	lr, r3
 801040a:	4770      	bx	lr
