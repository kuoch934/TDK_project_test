
TDK_project_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000101d4  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  080104a4  080104a4  000204a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801080c  0801080c  0002080c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000014  08010814  08010814  00020814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010828  08010828  00020828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000b4  24000000  0801082c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000020cc  240000b8  080108e0  000300b8  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24002184  080108e0  00032184  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000300e2  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002bbcc  00000000  00000000  00030125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004b58  00000000  00000000  0005bcf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000015c8  00000000  00000000  00060850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000010f8  00000000  00000000  00061e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00035cac  00000000  00000000  00062f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002176d  00000000  00000000  00098bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001525f4  00000000  00000000  000ba329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00005eb4  00000000  00000000  0020c920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006c  00000000  00000000  002127d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240000b8 	.word	0x240000b8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801048c 	.word	0x0801048c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240000bc 	.word	0x240000bc
 800030c:	0801048c 	.word	0x0801048c

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b970 	b.w	8000618 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9e08      	ldr	r6, [sp, #32]
 8000356:	460d      	mov	r5, r1
 8000358:	4604      	mov	r4, r0
 800035a:	460f      	mov	r7, r1
 800035c:	2b00      	cmp	r3, #0
 800035e:	d14a      	bne.n	80003f6 <__udivmoddi4+0xa6>
 8000360:	428a      	cmp	r2, r1
 8000362:	4694      	mov	ip, r2
 8000364:	d965      	bls.n	8000432 <__udivmoddi4+0xe2>
 8000366:	fab2 f382 	clz	r3, r2
 800036a:	b143      	cbz	r3, 800037e <__udivmoddi4+0x2e>
 800036c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000370:	f1c3 0220 	rsb	r2, r3, #32
 8000374:	409f      	lsls	r7, r3
 8000376:	fa20 f202 	lsr.w	r2, r0, r2
 800037a:	4317      	orrs	r7, r2
 800037c:	409c      	lsls	r4, r3
 800037e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000382:	fa1f f58c 	uxth.w	r5, ip
 8000386:	fbb7 f1fe 	udiv	r1, r7, lr
 800038a:	0c22      	lsrs	r2, r4, #16
 800038c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000390:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000394:	fb01 f005 	mul.w	r0, r1, r5
 8000398:	4290      	cmp	r0, r2
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x62>
 800039c:	eb1c 0202 	adds.w	r2, ip, r2
 80003a0:	f101 37ff 	add.w	r7, r1, #4294967295
 80003a4:	f080 811c 	bcs.w	80005e0 <__udivmoddi4+0x290>
 80003a8:	4290      	cmp	r0, r2
 80003aa:	f240 8119 	bls.w	80005e0 <__udivmoddi4+0x290>
 80003ae:	3902      	subs	r1, #2
 80003b0:	4462      	add	r2, ip
 80003b2:	1a12      	subs	r2, r2, r0
 80003b4:	b2a4      	uxth	r4, r4
 80003b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80003be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003c2:	fb00 f505 	mul.w	r5, r0, r5
 80003c6:	42a5      	cmp	r5, r4
 80003c8:	d90a      	bls.n	80003e0 <__udivmoddi4+0x90>
 80003ca:	eb1c 0404 	adds.w	r4, ip, r4
 80003ce:	f100 32ff 	add.w	r2, r0, #4294967295
 80003d2:	f080 8107 	bcs.w	80005e4 <__udivmoddi4+0x294>
 80003d6:	42a5      	cmp	r5, r4
 80003d8:	f240 8104 	bls.w	80005e4 <__udivmoddi4+0x294>
 80003dc:	4464      	add	r4, ip
 80003de:	3802      	subs	r0, #2
 80003e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	2100      	movs	r1, #0
 80003e8:	b11e      	cbz	r6, 80003f2 <__udivmoddi4+0xa2>
 80003ea:	40dc      	lsrs	r4, r3
 80003ec:	2300      	movs	r3, #0
 80003ee:	e9c6 4300 	strd	r4, r3, [r6]
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0xbc>
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	f000 80ed 	beq.w	80005da <__udivmoddi4+0x28a>
 8000400:	2100      	movs	r1, #0
 8000402:	e9c6 0500 	strd	r0, r5, [r6]
 8000406:	4608      	mov	r0, r1
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	fab3 f183 	clz	r1, r3
 8000410:	2900      	cmp	r1, #0
 8000412:	d149      	bne.n	80004a8 <__udivmoddi4+0x158>
 8000414:	42ab      	cmp	r3, r5
 8000416:	d302      	bcc.n	800041e <__udivmoddi4+0xce>
 8000418:	4282      	cmp	r2, r0
 800041a:	f200 80f8 	bhi.w	800060e <__udivmoddi4+0x2be>
 800041e:	1a84      	subs	r4, r0, r2
 8000420:	eb65 0203 	sbc.w	r2, r5, r3
 8000424:	2001      	movs	r0, #1
 8000426:	4617      	mov	r7, r2
 8000428:	2e00      	cmp	r6, #0
 800042a:	d0e2      	beq.n	80003f2 <__udivmoddi4+0xa2>
 800042c:	e9c6 4700 	strd	r4, r7, [r6]
 8000430:	e7df      	b.n	80003f2 <__udivmoddi4+0xa2>
 8000432:	b902      	cbnz	r2, 8000436 <__udivmoddi4+0xe6>
 8000434:	deff      	udf	#255	; 0xff
 8000436:	fab2 f382 	clz	r3, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	f040 8090 	bne.w	8000560 <__udivmoddi4+0x210>
 8000440:	1a8a      	subs	r2, r1, r2
 8000442:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000446:	fa1f fe8c 	uxth.w	lr, ip
 800044a:	2101      	movs	r1, #1
 800044c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000450:	fb07 2015 	mls	r0, r7, r5, r2
 8000454:	0c22      	lsrs	r2, r4, #16
 8000456:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800045a:	fb0e f005 	mul.w	r0, lr, r5
 800045e:	4290      	cmp	r0, r2
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x124>
 8000462:	eb1c 0202 	adds.w	r2, ip, r2
 8000466:	f105 38ff 	add.w	r8, r5, #4294967295
 800046a:	d202      	bcs.n	8000472 <__udivmoddi4+0x122>
 800046c:	4290      	cmp	r0, r2
 800046e:	f200 80cb 	bhi.w	8000608 <__udivmoddi4+0x2b8>
 8000472:	4645      	mov	r5, r8
 8000474:	1a12      	subs	r2, r2, r0
 8000476:	b2a4      	uxth	r4, r4
 8000478:	fbb2 f0f7 	udiv	r0, r2, r7
 800047c:	fb07 2210 	mls	r2, r7, r0, r2
 8000480:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000484:	fb0e fe00 	mul.w	lr, lr, r0
 8000488:	45a6      	cmp	lr, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x14e>
 800048c:	eb1c 0404 	adds.w	r4, ip, r4
 8000490:	f100 32ff 	add.w	r2, r0, #4294967295
 8000494:	d202      	bcs.n	800049c <__udivmoddi4+0x14c>
 8000496:	45a6      	cmp	lr, r4
 8000498:	f200 80bb 	bhi.w	8000612 <__udivmoddi4+0x2c2>
 800049c:	4610      	mov	r0, r2
 800049e:	eba4 040e 	sub.w	r4, r4, lr
 80004a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004a6:	e79f      	b.n	80003e8 <__udivmoddi4+0x98>
 80004a8:	f1c1 0720 	rsb	r7, r1, #32
 80004ac:	408b      	lsls	r3, r1
 80004ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80004b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004b6:	fa05 f401 	lsl.w	r4, r5, r1
 80004ba:	fa20 f307 	lsr.w	r3, r0, r7
 80004be:	40fd      	lsrs	r5, r7
 80004c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004c4:	4323      	orrs	r3, r4
 80004c6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004ca:	fa1f fe8c 	uxth.w	lr, ip
 80004ce:	fb09 5518 	mls	r5, r9, r8, r5
 80004d2:	0c1c      	lsrs	r4, r3, #16
 80004d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004d8:	fb08 f50e 	mul.w	r5, r8, lr
 80004dc:	42a5      	cmp	r5, r4
 80004de:	fa02 f201 	lsl.w	r2, r2, r1
 80004e2:	fa00 f001 	lsl.w	r0, r0, r1
 80004e6:	d90b      	bls.n	8000500 <__udivmoddi4+0x1b0>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f0:	f080 8088 	bcs.w	8000604 <__udivmoddi4+0x2b4>
 80004f4:	42a5      	cmp	r5, r4
 80004f6:	f240 8085 	bls.w	8000604 <__udivmoddi4+0x2b4>
 80004fa:	f1a8 0802 	sub.w	r8, r8, #2
 80004fe:	4464      	add	r4, ip
 8000500:	1b64      	subs	r4, r4, r5
 8000502:	b29d      	uxth	r5, r3
 8000504:	fbb4 f3f9 	udiv	r3, r4, r9
 8000508:	fb09 4413 	mls	r4, r9, r3, r4
 800050c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000510:	fb03 fe0e 	mul.w	lr, r3, lr
 8000514:	45a6      	cmp	lr, r4
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x1da>
 8000518:	eb1c 0404 	adds.w	r4, ip, r4
 800051c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000520:	d26c      	bcs.n	80005fc <__udivmoddi4+0x2ac>
 8000522:	45a6      	cmp	lr, r4
 8000524:	d96a      	bls.n	80005fc <__udivmoddi4+0x2ac>
 8000526:	3b02      	subs	r3, #2
 8000528:	4464      	add	r4, ip
 800052a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800052e:	fba3 9502 	umull	r9, r5, r3, r2
 8000532:	eba4 040e 	sub.w	r4, r4, lr
 8000536:	42ac      	cmp	r4, r5
 8000538:	46c8      	mov	r8, r9
 800053a:	46ae      	mov	lr, r5
 800053c:	d356      	bcc.n	80005ec <__udivmoddi4+0x29c>
 800053e:	d053      	beq.n	80005e8 <__udivmoddi4+0x298>
 8000540:	b156      	cbz	r6, 8000558 <__udivmoddi4+0x208>
 8000542:	ebb0 0208 	subs.w	r2, r0, r8
 8000546:	eb64 040e 	sbc.w	r4, r4, lr
 800054a:	fa04 f707 	lsl.w	r7, r4, r7
 800054e:	40ca      	lsrs	r2, r1
 8000550:	40cc      	lsrs	r4, r1
 8000552:	4317      	orrs	r7, r2
 8000554:	e9c6 7400 	strd	r7, r4, [r6]
 8000558:	4618      	mov	r0, r3
 800055a:	2100      	movs	r1, #0
 800055c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000560:	f1c3 0120 	rsb	r1, r3, #32
 8000564:	fa02 fc03 	lsl.w	ip, r2, r3
 8000568:	fa20 f201 	lsr.w	r2, r0, r1
 800056c:	fa25 f101 	lsr.w	r1, r5, r1
 8000570:	409d      	lsls	r5, r3
 8000572:	432a      	orrs	r2, r5
 8000574:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000578:	fa1f fe8c 	uxth.w	lr, ip
 800057c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000580:	fb07 1510 	mls	r5, r7, r0, r1
 8000584:	0c11      	lsrs	r1, r2, #16
 8000586:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800058a:	fb00 f50e 	mul.w	r5, r0, lr
 800058e:	428d      	cmp	r5, r1
 8000590:	fa04 f403 	lsl.w	r4, r4, r3
 8000594:	d908      	bls.n	80005a8 <__udivmoddi4+0x258>
 8000596:	eb1c 0101 	adds.w	r1, ip, r1
 800059a:	f100 38ff 	add.w	r8, r0, #4294967295
 800059e:	d22f      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005a0:	428d      	cmp	r5, r1
 80005a2:	d92d      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005a4:	3802      	subs	r0, #2
 80005a6:	4461      	add	r1, ip
 80005a8:	1b49      	subs	r1, r1, r5
 80005aa:	b292      	uxth	r2, r2
 80005ac:	fbb1 f5f7 	udiv	r5, r1, r7
 80005b0:	fb07 1115 	mls	r1, r7, r5, r1
 80005b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005b8:	fb05 f10e 	mul.w	r1, r5, lr
 80005bc:	4291      	cmp	r1, r2
 80005be:	d908      	bls.n	80005d2 <__udivmoddi4+0x282>
 80005c0:	eb1c 0202 	adds.w	r2, ip, r2
 80005c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005c8:	d216      	bcs.n	80005f8 <__udivmoddi4+0x2a8>
 80005ca:	4291      	cmp	r1, r2
 80005cc:	d914      	bls.n	80005f8 <__udivmoddi4+0x2a8>
 80005ce:	3d02      	subs	r5, #2
 80005d0:	4462      	add	r2, ip
 80005d2:	1a52      	subs	r2, r2, r1
 80005d4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005d8:	e738      	b.n	800044c <__udivmoddi4+0xfc>
 80005da:	4631      	mov	r1, r6
 80005dc:	4630      	mov	r0, r6
 80005de:	e708      	b.n	80003f2 <__udivmoddi4+0xa2>
 80005e0:	4639      	mov	r1, r7
 80005e2:	e6e6      	b.n	80003b2 <__udivmoddi4+0x62>
 80005e4:	4610      	mov	r0, r2
 80005e6:	e6fb      	b.n	80003e0 <__udivmoddi4+0x90>
 80005e8:	4548      	cmp	r0, r9
 80005ea:	d2a9      	bcs.n	8000540 <__udivmoddi4+0x1f0>
 80005ec:	ebb9 0802 	subs.w	r8, r9, r2
 80005f0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005f4:	3b01      	subs	r3, #1
 80005f6:	e7a3      	b.n	8000540 <__udivmoddi4+0x1f0>
 80005f8:	4645      	mov	r5, r8
 80005fa:	e7ea      	b.n	80005d2 <__udivmoddi4+0x282>
 80005fc:	462b      	mov	r3, r5
 80005fe:	e794      	b.n	800052a <__udivmoddi4+0x1da>
 8000600:	4640      	mov	r0, r8
 8000602:	e7d1      	b.n	80005a8 <__udivmoddi4+0x258>
 8000604:	46d0      	mov	r8, sl
 8000606:	e77b      	b.n	8000500 <__udivmoddi4+0x1b0>
 8000608:	3d02      	subs	r5, #2
 800060a:	4462      	add	r2, ip
 800060c:	e732      	b.n	8000474 <__udivmoddi4+0x124>
 800060e:	4608      	mov	r0, r1
 8000610:	e70a      	b.n	8000428 <__udivmoddi4+0xd8>
 8000612:	4464      	add	r4, ip
 8000614:	3802      	subs	r0, #2
 8000616:	e742      	b.n	800049e <__udivmoddi4+0x14e>

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	0a5a      	lsrs	r2, r3, #9
 800062c:	490f      	ldr	r1, [pc, #60]	; (800066c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800062e:	fba1 1202 	umull	r1, r2, r1, r2
 8000632:	09d2      	lsrs	r2, r2, #7
 8000634:	490e      	ldr	r1, [pc, #56]	; (8000670 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000636:	fb01 f202 	mul.w	r2, r1, r2
 800063a:	1a9b      	subs	r3, r3, r2
 800063c:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	0a5b      	lsrs	r3, r3, #9
 8000644:	4a09      	ldr	r2, [pc, #36]	; (800066c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000646:	fba2 2303 	umull	r2, r3, r2, r3
 800064a:	09db      	lsrs	r3, r3, #7
 800064c:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	441a      	add	r2, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	68fa      	ldr	r2, [r7, #12]
 800065e:	601a      	str	r2, [r3, #0]
}
 8000660:	bf00      	nop
 8000662:	3714      	adds	r7, #20
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	00044b83 	.word	0x00044b83
 8000670:	3b9aca00 	.word	0x3b9aca00
 8000674:	00000000 	.word	0x00000000

08000678 <pidCtrl>:
    {Kp[1], Ki[1], Kd[1], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
    {Kp[2], Ki[2], Kd[2], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
    {Kp[3], Ki[3], Kd[3], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0}
};

void pidCtrl(int i){
 8000678:	b490      	push	{r4, r7}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	Kpid[i].insVel = (double) Kpid[i].enc * PI * Dwheel
 8000680:	49c7      	ldr	r1, [pc, #796]	; (80009a0 <pidCtrl+0x328>)
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	4613      	mov	r3, r2
 8000686:	00db      	lsls	r3, r3, #3
 8000688:	1a9b      	subs	r3, r3, r2
 800068a:	011b      	lsls	r3, r3, #4
 800068c:	440b      	add	r3, r1
 800068e:	3318      	adds	r3, #24
 8000690:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000694:	ee07 3a90 	vmov	s15, r3
 8000698:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800069c:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8000978 <pidCtrl+0x300>
 80006a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006a4:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8000980 <pidCtrl+0x308>
 80006a8:	ee27 6b06 	vmul.f64	d6, d7, d6
			/ (4 * resolution * reduction_ratio * belt_ratio) * frequency;
 80006ac:	ed9f 5bb6 	vldr	d5, [pc, #728]	; 8000988 <pidCtrl+0x310>
 80006b0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80006b4:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8000990 <pidCtrl+0x318>
 80006b8:	ee27 7b06 	vmul.f64	d7, d7, d6
	Kpid[i].insVel = (double) Kpid[i].enc * PI * Dwheel
 80006bc:	49b8      	ldr	r1, [pc, #736]	; (80009a0 <pidCtrl+0x328>)
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	4613      	mov	r3, r2
 80006c2:	00db      	lsls	r3, r3, #3
 80006c4:	1a9b      	subs	r3, r3, r2
 80006c6:	011b      	lsls	r3, r3, #4
 80006c8:	440b      	add	r3, r1
 80006ca:	3328      	adds	r3, #40	; 0x28
 80006cc:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].error = Kpid[i].goalVel - Kpid[i].insVel;
 80006d0:	49b3      	ldr	r1, [pc, #716]	; (80009a0 <pidCtrl+0x328>)
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	4613      	mov	r3, r2
 80006d6:	00db      	lsls	r3, r3, #3
 80006d8:	1a9b      	subs	r3, r3, r2
 80006da:	011b      	lsls	r3, r3, #4
 80006dc:	440b      	add	r3, r1
 80006de:	3320      	adds	r3, #32
 80006e0:	ed93 6b00 	vldr	d6, [r3]
 80006e4:	49ae      	ldr	r1, [pc, #696]	; (80009a0 <pidCtrl+0x328>)
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	4613      	mov	r3, r2
 80006ea:	00db      	lsls	r3, r3, #3
 80006ec:	1a9b      	subs	r3, r3, r2
 80006ee:	011b      	lsls	r3, r3, #4
 80006f0:	440b      	add	r3, r1
 80006f2:	3328      	adds	r3, #40	; 0x28
 80006f4:	ed93 7b00 	vldr	d7, [r3]
 80006f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80006fc:	49a8      	ldr	r1, [pc, #672]	; (80009a0 <pidCtrl+0x328>)
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	4613      	mov	r3, r2
 8000702:	00db      	lsls	r3, r3, #3
 8000704:	1a9b      	subs	r3, r3, r2
 8000706:	011b      	lsls	r3, r3, #4
 8000708:	440b      	add	r3, r1
 800070a:	3330      	adds	r3, #48	; 0x30
 800070c:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].up = Kpid[i].Kp * Kpid[i].error;
 8000710:	49a3      	ldr	r1, [pc, #652]	; (80009a0 <pidCtrl+0x328>)
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	4613      	mov	r3, r2
 8000716:	00db      	lsls	r3, r3, #3
 8000718:	1a9b      	subs	r3, r3, r2
 800071a:	011b      	lsls	r3, r3, #4
 800071c:	440b      	add	r3, r1
 800071e:	ed93 6b00 	vldr	d6, [r3]
 8000722:	499f      	ldr	r1, [pc, #636]	; (80009a0 <pidCtrl+0x328>)
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	4613      	mov	r3, r2
 8000728:	00db      	lsls	r3, r3, #3
 800072a:	1a9b      	subs	r3, r3, r2
 800072c:	011b      	lsls	r3, r3, #4
 800072e:	440b      	add	r3, r1
 8000730:	3330      	adds	r3, #48	; 0x30
 8000732:	ed93 7b00 	vldr	d7, [r3]
 8000736:	ee26 7b07 	vmul.f64	d7, d6, d7
 800073a:	4999      	ldr	r1, [pc, #612]	; (80009a0 <pidCtrl+0x328>)
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	4613      	mov	r3, r2
 8000740:	00db      	lsls	r3, r3, #3
 8000742:	1a9b      	subs	r3, r3, r2
 8000744:	011b      	lsls	r3, r3, #4
 8000746:	440b      	add	r3, r1
 8000748:	3348      	adds	r3, #72	; 0x48
 800074a:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].ui += Kpid[i].Ki * Kpid[i].last_error / frequency;
 800074e:	4994      	ldr	r1, [pc, #592]	; (80009a0 <pidCtrl+0x328>)
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	4613      	mov	r3, r2
 8000754:	00db      	lsls	r3, r3, #3
 8000756:	1a9b      	subs	r3, r3, r2
 8000758:	011b      	lsls	r3, r3, #4
 800075a:	440b      	add	r3, r1
 800075c:	3350      	adds	r3, #80	; 0x50
 800075e:	ed93 6b00 	vldr	d6, [r3]
 8000762:	498f      	ldr	r1, [pc, #572]	; (80009a0 <pidCtrl+0x328>)
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	4613      	mov	r3, r2
 8000768:	00db      	lsls	r3, r3, #3
 800076a:	1a9b      	subs	r3, r3, r2
 800076c:	011b      	lsls	r3, r3, #4
 800076e:	440b      	add	r3, r1
 8000770:	3308      	adds	r3, #8
 8000772:	ed93 5b00 	vldr	d5, [r3]
 8000776:	498a      	ldr	r1, [pc, #552]	; (80009a0 <pidCtrl+0x328>)
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	4613      	mov	r3, r2
 800077c:	00db      	lsls	r3, r3, #3
 800077e:	1a9b      	subs	r3, r3, r2
 8000780:	011b      	lsls	r3, r3, #4
 8000782:	440b      	add	r3, r1
 8000784:	3338      	adds	r3, #56	; 0x38
 8000786:	ed93 7b00 	vldr	d7, [r3]
 800078a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800078e:	ed9f 4b80 	vldr	d4, [pc, #512]	; 8000990 <pidCtrl+0x318>
 8000792:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000796:	ee36 7b07 	vadd.f64	d7, d6, d7
 800079a:	4981      	ldr	r1, [pc, #516]	; (80009a0 <pidCtrl+0x328>)
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	4613      	mov	r3, r2
 80007a0:	00db      	lsls	r3, r3, #3
 80007a2:	1a9b      	subs	r3, r3, r2
 80007a4:	011b      	lsls	r3, r3, #4
 80007a6:	440b      	add	r3, r1
 80007a8:	3350      	adds	r3, #80	; 0x50
 80007aa:	ed83 7b00 	vstr	d7, [r3]
//	Kpid[i].ui = 0;
	Kpid[i].ud = Kpid[i].Kd * (Kpid[i].error - Kpid[i].last_error) * frequency;
 80007ae:	497c      	ldr	r1, [pc, #496]	; (80009a0 <pidCtrl+0x328>)
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	4613      	mov	r3, r2
 80007b4:	00db      	lsls	r3, r3, #3
 80007b6:	1a9b      	subs	r3, r3, r2
 80007b8:	011b      	lsls	r3, r3, #4
 80007ba:	440b      	add	r3, r1
 80007bc:	3310      	adds	r3, #16
 80007be:	ed93 6b00 	vldr	d6, [r3]
 80007c2:	4977      	ldr	r1, [pc, #476]	; (80009a0 <pidCtrl+0x328>)
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	4613      	mov	r3, r2
 80007c8:	00db      	lsls	r3, r3, #3
 80007ca:	1a9b      	subs	r3, r3, r2
 80007cc:	011b      	lsls	r3, r3, #4
 80007ce:	440b      	add	r3, r1
 80007d0:	3330      	adds	r3, #48	; 0x30
 80007d2:	ed93 5b00 	vldr	d5, [r3]
 80007d6:	4972      	ldr	r1, [pc, #456]	; (80009a0 <pidCtrl+0x328>)
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	4613      	mov	r3, r2
 80007dc:	00db      	lsls	r3, r3, #3
 80007de:	1a9b      	subs	r3, r3, r2
 80007e0:	011b      	lsls	r3, r3, #4
 80007e2:	440b      	add	r3, r1
 80007e4:	3338      	adds	r3, #56	; 0x38
 80007e6:	ed93 7b00 	vldr	d7, [r3]
 80007ea:	ee35 7b47 	vsub.f64	d7, d5, d7
 80007ee:	ee26 7b07 	vmul.f64	d7, d6, d7
 80007f2:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8000990 <pidCtrl+0x318>
 80007f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80007fa:	4969      	ldr	r1, [pc, #420]	; (80009a0 <pidCtrl+0x328>)
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	4613      	mov	r3, r2
 8000800:	00db      	lsls	r3, r3, #3
 8000802:	1a9b      	subs	r3, r3, r2
 8000804:	011b      	lsls	r3, r3, #4
 8000806:	440b      	add	r3, r1
 8000808:	3358      	adds	r3, #88	; 0x58
 800080a:	ed83 7b00 	vstr	d7, [r3]
	if( fabs(Kpid[i].ui) >= max_ui )
 800080e:	4964      	ldr	r1, [pc, #400]	; (80009a0 <pidCtrl+0x328>)
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	4613      	mov	r3, r2
 8000814:	00db      	lsls	r3, r3, #3
 8000816:	1a9b      	subs	r3, r3, r2
 8000818:	011b      	lsls	r3, r3, #4
 800081a:	440b      	add	r3, r1
 800081c:	3350      	adds	r3, #80	; 0x50
 800081e:	ed93 7b00 	vldr	d7, [r3]
 8000822:	eeb0 7bc7 	vabs.f64	d7, d7
 8000826:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800082a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800082e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000832:	db1f      	blt.n	8000874 <pidCtrl+0x1fc>
		Kpid[i].ui = (Kpid[i].ui >= 0)? max_ui: -1*max_ui;
 8000834:	495a      	ldr	r1, [pc, #360]	; (80009a0 <pidCtrl+0x328>)
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	4613      	mov	r3, r2
 800083a:	00db      	lsls	r3, r3, #3
 800083c:	1a9b      	subs	r3, r3, r2
 800083e:	011b      	lsls	r3, r3, #4
 8000840:	440b      	add	r3, r1
 8000842:	3350      	adds	r3, #80	; 0x50
 8000844:	ed93 7b00 	vldr	d7, [r3]
 8000848:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800084c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000850:	db03      	blt.n	800085a <pidCtrl+0x1e2>
 8000852:	f04f 0000 	mov.w	r0, #0
 8000856:	4953      	ldr	r1, [pc, #332]	; (80009a4 <pidCtrl+0x32c>)
 8000858:	e002      	b.n	8000860 <pidCtrl+0x1e8>
 800085a:	f04f 0000 	mov.w	r0, #0
 800085e:	4952      	ldr	r1, [pc, #328]	; (80009a8 <pidCtrl+0x330>)
 8000860:	4c4f      	ldr	r4, [pc, #316]	; (80009a0 <pidCtrl+0x328>)
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	4613      	mov	r3, r2
 8000866:	00db      	lsls	r3, r3, #3
 8000868:	1a9b      	subs	r3, r3, r2
 800086a:	011b      	lsls	r3, r3, #4
 800086c:	4423      	add	r3, r4
 800086e:	3350      	adds	r3, #80	; 0x50
 8000870:	e9c3 0100 	strd	r0, r1, [r3]
	Kpid[i].u = Kpid[i].up + Kpid[i].ui + Kpid[i].ud;
 8000874:	494a      	ldr	r1, [pc, #296]	; (80009a0 <pidCtrl+0x328>)
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	4613      	mov	r3, r2
 800087a:	00db      	lsls	r3, r3, #3
 800087c:	1a9b      	subs	r3, r3, r2
 800087e:	011b      	lsls	r3, r3, #4
 8000880:	440b      	add	r3, r1
 8000882:	3348      	adds	r3, #72	; 0x48
 8000884:	ed93 6b00 	vldr	d6, [r3]
 8000888:	4945      	ldr	r1, [pc, #276]	; (80009a0 <pidCtrl+0x328>)
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	4613      	mov	r3, r2
 800088e:	00db      	lsls	r3, r3, #3
 8000890:	1a9b      	subs	r3, r3, r2
 8000892:	011b      	lsls	r3, r3, #4
 8000894:	440b      	add	r3, r1
 8000896:	3350      	adds	r3, #80	; 0x50
 8000898:	ed93 7b00 	vldr	d7, [r3]
 800089c:	ee36 6b07 	vadd.f64	d6, d6, d7
 80008a0:	493f      	ldr	r1, [pc, #252]	; (80009a0 <pidCtrl+0x328>)
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	4613      	mov	r3, r2
 80008a6:	00db      	lsls	r3, r3, #3
 80008a8:	1a9b      	subs	r3, r3, r2
 80008aa:	011b      	lsls	r3, r3, #4
 80008ac:	440b      	add	r3, r1
 80008ae:	3358      	adds	r3, #88	; 0x58
 80008b0:	ed93 7b00 	vldr	d7, [r3]
 80008b4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80008b8:	4939      	ldr	r1, [pc, #228]	; (80009a0 <pidCtrl+0x328>)
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	4613      	mov	r3, r2
 80008be:	00db      	lsls	r3, r3, #3
 80008c0:	1a9b      	subs	r3, r3, r2
 80008c2:	011b      	lsls	r3, r3, #4
 80008c4:	440b      	add	r3, r1
 80008c6:	3340      	adds	r3, #64	; 0x40
 80008c8:	ed83 7b00 	vstr	d7, [r3]

	Kpid[i].last_error = Kpid[i].error;
 80008cc:	4934      	ldr	r1, [pc, #208]	; (80009a0 <pidCtrl+0x328>)
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	4613      	mov	r3, r2
 80008d2:	00db      	lsls	r3, r3, #3
 80008d4:	1a9b      	subs	r3, r3, r2
 80008d6:	011b      	lsls	r3, r3, #4
 80008d8:	440b      	add	r3, r1
 80008da:	3330      	adds	r3, #48	; 0x30
 80008dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80008e0:	4c2f      	ldr	r4, [pc, #188]	; (80009a0 <pidCtrl+0x328>)
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	4613      	mov	r3, r2
 80008e6:	00db      	lsls	r3, r3, #3
 80008e8:	1a9b      	subs	r3, r3, r2
 80008ea:	011b      	lsls	r3, r3, #4
 80008ec:	4423      	add	r3, r4
 80008ee:	3338      	adds	r3, #56	; 0x38
 80008f0:	e9c3 0100 	strd	r0, r1, [r3]

	Kpid[i].pulse = fabs(Kpid[i].u) * PWM_ARR;
 80008f4:	492a      	ldr	r1, [pc, #168]	; (80009a0 <pidCtrl+0x328>)
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	4613      	mov	r3, r2
 80008fa:	00db      	lsls	r3, r3, #3
 80008fc:	1a9b      	subs	r3, r3, r2
 80008fe:	011b      	lsls	r3, r3, #4
 8000900:	440b      	add	r3, r1
 8000902:	3340      	adds	r3, #64	; 0x40
 8000904:	ed93 7b00 	vldr	d7, [r3]
 8000908:	eeb0 7bc7 	vabs.f64	d7, d7
 800090c:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8000998 <pidCtrl+0x320>
 8000910:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000914:	4922      	ldr	r1, [pc, #136]	; (80009a0 <pidCtrl+0x328>)
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	4613      	mov	r3, r2
 800091a:	00db      	lsls	r3, r3, #3
 800091c:	1a9b      	subs	r3, r3, r2
 800091e:	011b      	lsls	r3, r3, #4
 8000920:	440b      	add	r3, r1
 8000922:	3360      	adds	r3, #96	; 0x60
 8000924:	ed83 7b00 	vstr	d7, [r3]
	if(Kpid[i].pulse >= PWM_ARR)	Kpid[i].pulse = PWM_ARR;
 8000928:	491d      	ldr	r1, [pc, #116]	; (80009a0 <pidCtrl+0x328>)
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	4613      	mov	r3, r2
 800092e:	00db      	lsls	r3, r3, #3
 8000930:	1a9b      	subs	r3, r3, r2
 8000932:	011b      	lsls	r3, r3, #4
 8000934:	440b      	add	r3, r1
 8000936:	3360      	adds	r3, #96	; 0x60
 8000938:	ed93 7b00 	vldr	d7, [r3]
 800093c:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8000998 <pidCtrl+0x320>
 8000940:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000948:	da00      	bge.n	800094c <pidCtrl+0x2d4>
}
 800094a:	e00d      	b.n	8000968 <pidCtrl+0x2f0>
	if(Kpid[i].pulse >= PWM_ARR)	Kpid[i].pulse = PWM_ARR;
 800094c:	4914      	ldr	r1, [pc, #80]	; (80009a0 <pidCtrl+0x328>)
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	4613      	mov	r3, r2
 8000952:	00db      	lsls	r3, r3, #3
 8000954:	1a9b      	subs	r3, r3, r2
 8000956:	011b      	lsls	r3, r3, #4
 8000958:	440b      	add	r3, r1
 800095a:	f103 0160 	add.w	r1, r3, #96	; 0x60
 800095e:	a30e      	add	r3, pc, #56	; (adr r3, 8000998 <pidCtrl+0x320>)
 8000960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000964:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bc90      	pop	{r4, r7}
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	f3af 8000 	nop.w
 8000978:	54cadf99 	.word	0x54cadf99
 800097c:	400921fb 	.word	0x400921fb
 8000980:	cccccccd 	.word	0xcccccccd
 8000984:	4029cccc 	.word	0x4029cccc
 8000988:	00000000 	.word	0x00000000
 800098c:	410b0000 	.word	0x410b0000
 8000990:	00000000 	.word	0x00000000
 8000994:	406f4000 	.word	0x406f4000
 8000998:	00000000 	.word	0x00000000
 800099c:	408f3800 	.word	0x408f3800
 80009a0:	240000f8 	.word	0x240000f8
 80009a4:	3ff00000 	.word	0x3ff00000
 80009a8:	bff00000 	.word	0xbff00000

080009ac <_Z41__static_initialization_and_destruction_0ii>:
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	6039      	str	r1, [r7, #0]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d14c      	bne.n	8000a56 <_Z41__static_initialization_and_destruction_0ii+0xaa>
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d147      	bne.n	8000a56 <_Z41__static_initialization_and_destruction_0ii+0xaa>
    {Kp[0], Ki[0], Kd[0], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 80009c6:	4b27      	ldr	r3, [pc, #156]	; (8000a64 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80009c8:	e9d3 2300 	ldrd	r2, r3, [r3]
};
 80009cc:	4926      	ldr	r1, [pc, #152]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80009ce:	e9c1 2300 	strd	r2, r3, [r1]
    {Kp[0], Ki[0], Kd[0], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 80009d2:	4b26      	ldr	r3, [pc, #152]	; (8000a6c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80009d4:	e9d3 2300 	ldrd	r2, r3, [r3]
};
 80009d8:	4923      	ldr	r1, [pc, #140]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80009da:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {Kp[0], Ki[0], Kd[0], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 80009de:	4b24      	ldr	r3, [pc, #144]	; (8000a70 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80009e0:	e9d3 2300 	ldrd	r2, r3, [r3]
};
 80009e4:	4920      	ldr	r1, [pc, #128]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80009e6:	e9c1 2304 	strd	r2, r3, [r1, #16]
    {Kp[1], Ki[1], Kd[1], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 80009ea:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80009ec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
};
 80009f0:	491d      	ldr	r1, [pc, #116]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80009f2:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
    {Kp[1], Ki[1], Kd[1], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 80009f6:	4b1d      	ldr	r3, [pc, #116]	; (8000a6c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80009f8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
};
 80009fc:	491a      	ldr	r1, [pc, #104]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80009fe:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
    {Kp[1], Ki[1], Kd[1], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 8000a02:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8000a04:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
};
 8000a08:	4917      	ldr	r1, [pc, #92]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000a0a:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
    {Kp[2], Ki[2], Kd[2], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 8000a0e:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8000a10:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
};
 8000a14:	4914      	ldr	r1, [pc, #80]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000a16:	e9c1 2338 	strd	r2, r3, [r1, #224]	; 0xe0
    {Kp[2], Ki[2], Kd[2], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 8000a1a:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8000a1c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
};
 8000a20:	4911      	ldr	r1, [pc, #68]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000a22:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
    {Kp[2], Ki[2], Kd[2], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 8000a26:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8000a28:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
};
 8000a2c:	490e      	ldr	r1, [pc, #56]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000a2e:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
    {Kp[3], Ki[3], Kd[3], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0}
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8000a34:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8000a38:	490b      	ldr	r1, [pc, #44]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000a3a:	e9c1 2354 	strd	r2, r3, [r1, #336]	; 0x150
    {Kp[3], Ki[3], Kd[3], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0}
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8000a40:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8000a44:	4908      	ldr	r1, [pc, #32]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000a46:	e9c1 2356 	strd	r2, r3, [r1, #344]	; 0x158
    {Kp[3], Ki[3], Kd[3], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0}
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8000a4c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8000a50:	4905      	ldr	r1, [pc, #20]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000a52:	e9c1 2358 	strd	r2, r3, [r1, #352]	; 0x160
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	24000000 	.word	0x24000000
 8000a68:	240000f8 	.word	0x240000f8
 8000a6c:	24000020 	.word	0x24000020
 8000a70:	240000d8 	.word	0x240000d8

08000a74 <_GLOBAL__sub_I_Kp>:
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	f7ff ff95 	bl	80009ac <_Z41__static_initialization_and_destruction_0ii>
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	0000      	movs	r0, r0
	...

08000a88 <HAL_TIM_PeriodElapsedCallback>:
extern PUSHER pusher_D;
double corr_vy = (double)100/94;
int t = 0;
int delay_start_resetFIRST = 1;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4abe      	ldr	r2, [pc, #760]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	f040 81ef 	bne.w	8000e7a <HAL_TIM_PeriodElapsedCallback+0x3f2>

		Kpid[0].goalVel = Vx + Vy * corr_vy + (W * coeffab);
 8000a9c:	4bbd      	ldr	r3, [pc, #756]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000a9e:	ed93 6b00 	vldr	d6, [r3]
 8000aa2:	4bbd      	ldr	r3, [pc, #756]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000aa4:	ed93 7b00 	vldr	d7, [r3]
 8000aa8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000aac:	4bbb      	ldr	r3, [pc, #748]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8000aae:	ed93 7b00 	vldr	d7, [r3]
 8000ab2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000ab6:	4bba      	ldr	r3, [pc, #744]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8000ab8:	ed93 5b00 	vldr	d5, [r3]
 8000abc:	4bb9      	ldr	r3, [pc, #740]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8000abe:	ed93 7b00 	vldr	d7, [r3]
 8000ac2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000ac6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000aca:	4bb7      	ldr	r3, [pc, #732]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000acc:	ed83 7b08 	vstr	d7, [r3, #32]
		Kpid[1].goalVel = Vx - Vy * corr_vy - (W * coeffab);
 8000ad0:	4bb2      	ldr	r3, [pc, #712]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8000ad2:	ed93 6b00 	vldr	d6, [r3]
 8000ad6:	4baf      	ldr	r3, [pc, #700]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000ad8:	ed93 5b00 	vldr	d5, [r3]
 8000adc:	4bae      	ldr	r3, [pc, #696]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000ade:	ed93 7b00 	vldr	d7, [r3]
 8000ae2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000ae6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000aea:	4bad      	ldr	r3, [pc, #692]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8000aec:	ed93 5b00 	vldr	d5, [r3]
 8000af0:	4bac      	ldr	r3, [pc, #688]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8000af2:	ed93 7b00 	vldr	d7, [r3]
 8000af6:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000afa:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000afe:	4baa      	ldr	r3, [pc, #680]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000b00:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
		Kpid[2].goalVel = Vx + Vy * corr_vy - (W * coeffab);
 8000b04:	4ba3      	ldr	r3, [pc, #652]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000b06:	ed93 6b00 	vldr	d6, [r3]
 8000b0a:	4ba3      	ldr	r3, [pc, #652]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000b0c:	ed93 7b00 	vldr	d7, [r3]
 8000b10:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000b14:	4ba1      	ldr	r3, [pc, #644]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8000b16:	ed93 7b00 	vldr	d7, [r3]
 8000b1a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000b1e:	4ba0      	ldr	r3, [pc, #640]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8000b20:	ed93 5b00 	vldr	d5, [r3]
 8000b24:	4b9f      	ldr	r3, [pc, #636]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8000b26:	ed93 7b00 	vldr	d7, [r3]
 8000b2a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000b2e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000b32:	4b9d      	ldr	r3, [pc, #628]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000b34:	ed83 7b40 	vstr	d7, [r3, #256]	; 0x100
		Kpid[3].goalVel = Vx - Vy * corr_vy + (W * coeffab);
 8000b38:	4b98      	ldr	r3, [pc, #608]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8000b3a:	ed93 6b00 	vldr	d6, [r3]
 8000b3e:	4b95      	ldr	r3, [pc, #596]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000b40:	ed93 5b00 	vldr	d5, [r3]
 8000b44:	4b94      	ldr	r3, [pc, #592]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000b46:	ed93 7b00 	vldr	d7, [r3]
 8000b4a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000b4e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000b52:	4b93      	ldr	r3, [pc, #588]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8000b54:	ed93 5b00 	vldr	d5, [r3]
 8000b58:	4b92      	ldr	r3, [pc, #584]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8000b5a:	ed93 7b00 	vldr	d7, [r3]
 8000b5e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000b62:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b66:	4b90      	ldr	r3, [pc, #576]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000b68:	ed83 7b5c 	vstr	d7, [r3, #368]	; 0x170

		Kpid[0].enc = __HAL_TIM_GetCounter(FR_ENC);
 8000b6c:	4b8f      	ldr	r3, [pc, #572]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b72:	b21a      	sxth	r2, r3
 8000b74:	4b8c      	ldr	r3, [pc, #560]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000b76:	831a      	strh	r2, [r3, #24]
		Kpid[1].enc = __HAL_TIM_GetCounter(FL_ENC);
 8000b78:	4b8d      	ldr	r3, [pc, #564]	; (8000db0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b7e:	b21a      	sxth	r2, r3
 8000b80:	4b89      	ldr	r3, [pc, #548]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000b82:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
		Kpid[2].enc = __HAL_TIM_GetCounter(BL_ENC) * -1;
 8000b86:	4b8b      	ldr	r3, [pc, #556]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	425b      	negs	r3, r3
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	b21a      	sxth	r2, r3
 8000b94:	4b84      	ldr	r3, [pc, #528]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000b96:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
		Kpid[3].enc = __HAL_TIM_GetCounter(BR_ENC) * -1;
 8000b9a:	4b87      	ldr	r3, [pc, #540]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	425b      	negs	r3, r3
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	b21a      	sxth	r2, r3
 8000ba8:	4b7f      	ldr	r3, [pc, #508]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000baa:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
		__HAL_TIM_SetCounter(FR_ENC, 0);
 8000bae:	4b7f      	ldr	r3, [pc, #508]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(FL_ENC, 0);
 8000bb6:	4b7e      	ldr	r3, [pc, #504]	; (8000db0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(BL_ENC, 0);
 8000bbe:	4b7d      	ldr	r3, [pc, #500]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(BR_ENC, 0);
 8000bc6:	4b7c      	ldr	r3, [pc, #496]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	625a      	str	r2, [r3, #36]	; 0x24





		for( int i = 0; i < 4; i ++){
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	e005      	b.n	8000be0 <HAL_TIM_PeriodElapsedCallback+0x158>
			pidCtrl(i);
 8000bd4:	68f8      	ldr	r0, [r7, #12]
 8000bd6:	f7ff fd4f 	bl	8000678 <pidCtrl>
		for( int i = 0; i < 4; i ++){
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	2b03      	cmp	r3, #3
 8000be4:	ddf6      	ble.n	8000bd4 <HAL_TIM_PeriodElapsedCallback+0x14c>
		}

		rVx= (Kpid[0].insVel+Kpid[1].insVel+Kpid[2].insVel+Kpid[3].insVel)/4;
 8000be6:	4b70      	ldr	r3, [pc, #448]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000be8:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8000bec:	4b6e      	ldr	r3, [pc, #440]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000bee:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 8000bf2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000bf6:	4b6c      	ldr	r3, [pc, #432]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000bf8:	ed93 7b42 	vldr	d7, [r3, #264]	; 0x108
 8000bfc:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000c00:	4b69      	ldr	r3, [pc, #420]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000c02:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 8000c06:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000c0a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000c0e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c12:	4b6a      	ldr	r3, [pc, #424]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000c14:	ed83 7b00 	vstr	d7, [r3]
		rVy= (Kpid[0].insVel-Kpid[1].insVel+Kpid[2].insVel-Kpid[3].insVel)/4;
 8000c18:	4b63      	ldr	r3, [pc, #396]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000c1a:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8000c1e:	4b62      	ldr	r3, [pc, #392]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000c20:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 8000c24:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000c28:	4b5f      	ldr	r3, [pc, #380]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000c2a:	ed93 7b42 	vldr	d7, [r3, #264]	; 0x108
 8000c2e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000c32:	4b5d      	ldr	r3, [pc, #372]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000c34:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 8000c38:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000c3c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000c40:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c44:	4b5e      	ldr	r3, [pc, #376]	; (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000c46:	ed83 7b00 	vstr	d7, [r3]
		rW= (-Kpid[0].insVel+Kpid[1].insVel+Kpid[2].insVel-Kpid[3].insVel)/(4*(car_len-width))/(2*PI);
 8000c4a:	4b57      	ldr	r3, [pc, #348]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000c4c:	ed93 6b26 	vldr	d6, [r3, #152]	; 0x98
 8000c50:	4b55      	ldr	r3, [pc, #340]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000c52:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8000c56:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000c5a:	4b53      	ldr	r3, [pc, #332]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000c5c:	ed93 7b42 	vldr	d7, [r3, #264]	; 0x108
 8000c60:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000c64:	4b50      	ldr	r3, [pc, #320]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000c66:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 8000c6a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000c6e:	eebb 5b0a 	vmov.f64	d5, #186	; 0xc1d00000 -26.0
 8000c72:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000c76:	ed9f 5b44 	vldr	d5, [pc, #272]	; 8000d88 <HAL_TIM_PeriodElapsedCallback+0x300>
 8000c7a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c7e:	4b51      	ldr	r3, [pc, #324]	; (8000dc4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8000c80:	ed83 7b00 	vstr	d7, [r3]

		__HAL_TIM_SET_COMPARE(FR_PWM_TIMMER, FR_PWM_CHANNEL, Kpid[0].pulse);
 8000c84:	4b48      	ldr	r3, [pc, #288]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000c86:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8000c8a:	4b4f      	ldr	r3, [pc, #316]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c92:	ee17 2a90 	vmov	r2, s15
 8000c96:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(FL_PWM_TIMMER, FL_PWM_CHANNEL, Kpid[1].pulse);
 8000c98:	4b43      	ldr	r3, [pc, #268]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000c9a:	ed93 7b34 	vldr	d7, [r3, #208]	; 0xd0
 8000c9e:	4b4a      	ldr	r3, [pc, #296]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ca6:	ee17 2a90 	vmov	r2, s15
 8000caa:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(BL_PWM_TIMMER, BL_PWM_CHANNEL, Kpid[2].pulse);
 8000cac:	4b3e      	ldr	r3, [pc, #248]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000cae:	ed93 7b50 	vldr	d7, [r3, #320]	; 0x140
 8000cb2:	4b46      	ldr	r3, [pc, #280]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x344>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000cba:	ee17 2a90 	vmov	r2, s15
 8000cbe:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(BR_PWM_TIMMER, BR_PWM_CHANNEL, Kpid[3].pulse);
 8000cc0:	4b39      	ldr	r3, [pc, #228]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000cc2:	ed93 7b6c 	vldr	d7, [r3, #432]	; 0x1b0
 8000cc6:	4b41      	ldr	r3, [pc, #260]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x344>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000cce:	ee17 2a90 	vmov	r2, s15
 8000cd2:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(FR_INA_PORT, FR_INA_PIN, GPIO_PIN_RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cda:	483d      	ldr	r0, [pc, #244]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000cdc:	f008 fe52 	bl	8009984 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FR_INB_PORT, FR_INB_PIN, GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ce6:	483a      	ldr	r0, [pc, #232]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000ce8:	f008 fe4c 	bl	8009984 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FL_INA_PORT, FL_INA_PIN, GPIO_PIN_RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cf2:	4838      	ldr	r0, [pc, #224]	; (8000dd4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8000cf4:	f008 fe46 	bl	8009984 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FL_INB_PORT, FL_INB_PIN, GPIO_PIN_RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cfe:	4835      	ldr	r0, [pc, #212]	; (8000dd4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8000d00:	f008 fe40 	bl	8009984 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BL_INA_PORT, BL_INA_PIN, GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2104      	movs	r1, #4
 8000d08:	4833      	ldr	r0, [pc, #204]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8000d0a:	f008 fe3b 	bl	8009984 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BL_INB_PORT, BL_INB_PIN, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2108      	movs	r1, #8
 8000d12:	4831      	ldr	r0, [pc, #196]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8000d14:	f008 fe36 	bl	8009984 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BR_INA_PORT, BR_INA_PIN, GPIO_PIN_RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d1e:	482f      	ldr	r0, [pc, #188]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x354>)
 8000d20:	f008 fe30 	bl	8009984 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BR_INB_PORT, BR_INB_PIN, GPIO_PIN_RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2110      	movs	r1, #16
 8000d28:	482b      	ldr	r0, [pc, #172]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8000d2a:	f008 fe2b 	bl	8009984 <HAL_GPIO_WritePin>
		if (Kpid[0].u >= 0)HAL_GPIO_WritePin(FR_INA_PORT, FR_INA_PIN, GPIO_PIN_SET);
 8000d2e:	4b1e      	ldr	r3, [pc, #120]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000d30:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8000d34:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d3c:	db06      	blt.n	8000d4c <HAL_TIM_PeriodElapsedCallback+0x2c4>
 8000d3e:	2201      	movs	r2, #1
 8000d40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d44:	4822      	ldr	r0, [pc, #136]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000d46:	f008 fe1d 	bl	8009984 <HAL_GPIO_WritePin>
 8000d4a:	e00d      	b.n	8000d68 <HAL_TIM_PeriodElapsedCallback+0x2e0>
		else if (Kpid[0].u < 0)HAL_GPIO_WritePin(FR_INB_PORT, FR_INB_PIN, GPIO_PIN_SET);
 8000d4c:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000d4e:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8000d52:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d5a:	d505      	bpl.n	8000d68 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d62:	481b      	ldr	r0, [pc, #108]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000d64:	f008 fe0e 	bl	8009984 <HAL_GPIO_WritePin>
		if (Kpid[1].u >= 0)HAL_GPIO_WritePin(FL_INA_PORT, FL_INA_PIN, GPIO_PIN_SET);
 8000d68:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000d6a:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8000d6e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d76:	db33      	blt.n	8000de0 <HAL_TIM_PeriodElapsedCallback+0x358>
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d7e:	4815      	ldr	r0, [pc, #84]	; (8000dd4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8000d80:	f008 fe00 	bl	8009984 <HAL_GPIO_WritePin>
 8000d84:	e03a      	b.n	8000dfc <HAL_TIM_PeriodElapsedCallback+0x374>
 8000d86:	bf00      	nop
 8000d88:	54cadf99 	.word	0x54cadf99
 8000d8c:	401921fb 	.word	0x401921fb
 8000d90:	40010000 	.word	0x40010000
 8000d94:	24000990 	.word	0x24000990
 8000d98:	24000048 	.word	0x24000048
 8000d9c:	24000988 	.word	0x24000988
 8000da0:	24000998 	.word	0x24000998
 8000da4:	24000040 	.word	0x24000040
 8000da8:	240000f8 	.word	0x240000f8
 8000dac:	24000504 	.word	0x24000504
 8000db0:	240005e8 	.word	0x240005e8
 8000db4:	24000550 	.word	0x24000550
 8000db8:	2400059c 	.word	0x2400059c
 8000dbc:	240009a0 	.word	0x240009a0
 8000dc0:	240009a8 	.word	0x240009a8
 8000dc4:	240009b0 	.word	0x240009b0
 8000dc8:	24000680 	.word	0x24000680
 8000dcc:	240006cc 	.word	0x240006cc
 8000dd0:	58020c00 	.word	0x58020c00
 8000dd4:	58020400 	.word	0x58020400
 8000dd8:	58021000 	.word	0x58021000
 8000ddc:	58020800 	.word	0x58020800
		else if (Kpid[1].u < 0)HAL_GPIO_WritePin(FL_INB_PORT, FL_INB_PIN, GPIO_PIN_SET);
 8000de0:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8000de2:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8000de6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dee:	d505      	bpl.n	8000dfc <HAL_TIM_PeriodElapsedCallback+0x374>
 8000df0:	2201      	movs	r2, #1
 8000df2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000df6:	4817      	ldr	r0, [pc, #92]	; (8000e54 <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8000df8:	f008 fdc4 	bl	8009984 <HAL_GPIO_WritePin>
		if (Kpid[2].u >= 0)HAL_GPIO_WritePin(BL_INA_PORT, BL_INA_PIN, GPIO_PIN_SET);
 8000dfc:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8000dfe:	ed93 7b48 	vldr	d7, [r3, #288]	; 0x120
 8000e02:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e0a:	db05      	blt.n	8000e18 <HAL_TIM_PeriodElapsedCallback+0x390>
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	2104      	movs	r1, #4
 8000e10:	4811      	ldr	r0, [pc, #68]	; (8000e58 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 8000e12:	f008 fdb7 	bl	8009984 <HAL_GPIO_WritePin>
 8000e16:	e00c      	b.n	8000e32 <HAL_TIM_PeriodElapsedCallback+0x3aa>
		else if (Kpid[2].u < 0)HAL_GPIO_WritePin(BL_INB_PORT, BL_INB_PIN, GPIO_PIN_SET);
 8000e18:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8000e1a:	ed93 7b48 	vldr	d7, [r3, #288]	; 0x120
 8000e1e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e26:	d504      	bpl.n	8000e32 <HAL_TIM_PeriodElapsedCallback+0x3aa>
 8000e28:	2201      	movs	r2, #1
 8000e2a:	2108      	movs	r1, #8
 8000e2c:	480a      	ldr	r0, [pc, #40]	; (8000e58 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 8000e2e:	f008 fda9 	bl	8009984 <HAL_GPIO_WritePin>
		if (Kpid[3].u >= 0)HAL_GPIO_WritePin(BR_INA_PORT, BR_INA_PIN, GPIO_PIN_SET);
 8000e32:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8000e34:	ed93 7b64 	vldr	d7, [r3, #400]	; 0x190
 8000e38:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e40:	db0e      	blt.n	8000e60 <HAL_TIM_PeriodElapsedCallback+0x3d8>
 8000e42:	2201      	movs	r2, #1
 8000e44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e48:	4804      	ldr	r0, [pc, #16]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 8000e4a:	f008 fd9b 	bl	8009984 <HAL_GPIO_WritePin>
 8000e4e:	e014      	b.n	8000e7a <HAL_TIM_PeriodElapsedCallback+0x3f2>
 8000e50:	240000f8 	.word	0x240000f8
 8000e54:	58020400 	.word	0x58020400
 8000e58:	58021000 	.word	0x58021000
 8000e5c:	58020800 	.word	0x58020800
		else if (Kpid[3].u < 0)HAL_GPIO_WritePin(BR_INB_PORT, BR_INB_PIN, GPIO_PIN_SET);
 8000e60:	4bb3      	ldr	r3, [pc, #716]	; (8001130 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8000e62:	ed93 7b64 	vldr	d7, [r3, #400]	; 0x190
 8000e66:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e6e:	d504      	bpl.n	8000e7a <HAL_TIM_PeriodElapsedCallback+0x3f2>
 8000e70:	2201      	movs	r2, #1
 8000e72:	2110      	movs	r1, #16
 8000e74:	48af      	ldr	r0, [pc, #700]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8000e76:	f008 fd85 	bl	8009984 <HAL_GPIO_WritePin>
	}

	if(htim->Instance == TIM8){
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4aae      	ldr	r2, [pc, #696]	; (8001138 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	f040 8137 	bne.w	80010f4 <HAL_TIM_PeriodElapsedCallback+0x66c>
		t++;
 8000e86:	4bad      	ldr	r3, [pc, #692]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	4aab      	ldr	r2, [pc, #684]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8000e8e:	6013      	str	r3, [r2, #0]
		if(t%100 == 19){
 8000e90:	4baa      	ldr	r3, [pc, #680]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4baa      	ldr	r3, [pc, #680]	; (8001140 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8000e96:	fb83 1302 	smull	r1, r3, r3, r2
 8000e9a:	1159      	asrs	r1, r3, #5
 8000e9c:	17d3      	asrs	r3, r2, #31
 8000e9e:	1acb      	subs	r3, r1, r3
 8000ea0:	2164      	movs	r1, #100	; 0x64
 8000ea2:	fb01 f303 	mul.w	r3, r1, r3
 8000ea6:	1ad3      	subs	r3, r2, r3
 8000ea8:	2b13      	cmp	r3, #19
 8000eaa:	d101      	bne.n	8000eb0 <HAL_TIM_PeriodElapsedCallback+0x428>
			pub();
 8000eac:	f003 f83c 	bl	8003f28 <_Z3pubv>
		}
		/*pusher down*/
		pusher_A.distence();
 8000eb0:	48a4      	ldr	r0, [pc, #656]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8000eb2:	f001 f935 	bl	8002120 <_ZN6PUSHER8distenceEv>
		pusher_B.distence();
 8000eb6:	48a4      	ldr	r0, [pc, #656]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8000eb8:	f001 f932 	bl	8002120 <_ZN6PUSHER8distenceEv>
		if(pusher_A.d > 0){
 8000ebc:	4ba1      	ldr	r3, [pc, #644]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8000ebe:	ed93 7b04 	vldr	d7, [r3, #16]
 8000ec2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eca:	dd2f      	ble.n	8000f2c <HAL_TIM_PeriodElapsedCallback+0x4a4>
			pusher_A.count++;
 8000ecc:	4b9d      	ldr	r3, [pc, #628]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	4a9c      	ldr	r2, [pc, #624]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8000ed4:	6193      	str	r3, [r2, #24]
			HAL_GPIO_WritePin(PUSHER_A_IN1_PORT, PUSHER_A_IN1_PIN, GPIO_PIN_SET);
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000edc:	4895      	ldr	r0, [pc, #596]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8000ede:	f008 fd51 	bl	8009984 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUSHER_A_IN2_PORT, PUSHER_A_IN2_PIN, GPIO_PIN_RESET);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ee8:	4892      	ldr	r0, [pc, #584]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8000eea:	f008 fd4b 	bl	8009984 <HAL_GPIO_WritePin>
			if(pusher_A.count > pusher_A.d*1000/PUSHER_SPEED){
 8000eee:	4b95      	ldr	r3, [pc, #596]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8000ef0:	699b      	ldr	r3, [r3, #24]
 8000ef2:	ee07 3a90 	vmov	s15, r3
 8000ef6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000efa:	4b92      	ldr	r3, [pc, #584]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8000efc:	ed93 7b04 	vldr	d7, [r3, #16]
 8000f00:	ed9f 5b87 	vldr	d5, [pc, #540]	; 8001120 <HAL_TIM_PeriodElapsedCallback+0x698>
 8000f04:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000f08:	ed9f 4b87 	vldr	d4, [pc, #540]	; 8001128 <HAL_TIM_PeriodElapsedCallback+0x6a0>
 8000f0c:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000f10:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f18:	dd08      	ble.n	8000f2c <HAL_TIM_PeriodElapsedCallback+0x4a4>
				pusher_A.p_state = pusher_A.state;
 8000f1a:	4b8a      	ldr	r3, [pc, #552]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8000f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f20:	4988      	ldr	r1, [pc, #544]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8000f22:	e9c1 2302 	strd	r2, r3, [r1, #8]
				pusher_A.count = 0;
 8000f26:	4b87      	ldr	r3, [pc, #540]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
			}
		}
		if(pusher_B.d > 0){
 8000f2c:	4b86      	ldr	r3, [pc, #536]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8000f2e:	ed93 7b04 	vldr	d7, [r3, #16]
 8000f32:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f3a:	dd3f      	ble.n	8000fbc <HAL_TIM_PeriodElapsedCallback+0x534>
			pusher_B.count++;
 8000f3c:	4b82      	ldr	r3, [pc, #520]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	3301      	adds	r3, #1
 8000f42:	4a81      	ldr	r2, [pc, #516]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8000f44:	6193      	str	r3, [r2, #24]
			HAL_GPIO_WritePin(PUSHER_B_IN1_PORT, PUSHER_B_IN1_PIN, GPIO_PIN_SET);
 8000f46:	2201      	movs	r2, #1
 8000f48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f4c:	4879      	ldr	r0, [pc, #484]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8000f4e:	f008 fd19 	bl	8009984 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUSHER_B_IN2_PORT, PUSHER_B_IN2_PIN, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f58:	4876      	ldr	r0, [pc, #472]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8000f5a:	f008 fd13 	bl	8009984 <HAL_GPIO_WritePin>
			if(pusher_B.count > pusher_B.d*1000/PUSHER_SPEED){
 8000f5e:	4b7a      	ldr	r3, [pc, #488]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	ee07 3a90 	vmov	s15, r3
 8000f66:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000f6a:	4b77      	ldr	r3, [pc, #476]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8000f6c:	ed93 7b04 	vldr	d7, [r3, #16]
 8000f70:	ed9f 5b6b 	vldr	d5, [pc, #428]	; 8001120 <HAL_TIM_PeriodElapsedCallback+0x698>
 8000f74:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000f78:	ed9f 4b6b 	vldr	d4, [pc, #428]	; 8001128 <HAL_TIM_PeriodElapsedCallback+0x6a0>
 8000f7c:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000f80:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f88:	dd18      	ble.n	8000fbc <HAL_TIM_PeriodElapsedCallback+0x534>
				pusher_B.p_state = pusher_B.state;
 8000f8a:	4b6f      	ldr	r3, [pc, #444]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8000f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f90:	496d      	ldr	r1, [pc, #436]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8000f92:	e9c1 2302 	strd	r2, r3, [r1, #8]
				pusher_B.count = 0;
 8000f96:	4b6c      	ldr	r3, [pc, #432]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
				if(delay_start_resetFIRST == 1){
 8000f9c:	4b6b      	ldr	r3, [pc, #428]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d10b      	bne.n	8000fbc <HAL_TIM_PeriodElapsedCallback+0x534>
					delay_start_reset = 1;
 8000fa4:	4b6a      	ldr	r3, [pc, #424]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	601a      	str	r2, [r3, #0]
					delay_start_resetFIRST = 0;
 8000faa:	4b68      	ldr	r3, [pc, #416]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
					pusher_B.state = 15;
 8000fb0:	4965      	ldr	r1, [pc, #404]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	4b67      	ldr	r3, [pc, #412]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8000fb8:	e9c1 2300 	strd	r2, r3, [r1]
//				pusher_D.p_state = pusher_D.state;
//				pusher_D.count = 0;
//			}
//		}
		/*pusher up*/
		if(pusher_A.d < 0){
 8000fbc:	4b61      	ldr	r3, [pc, #388]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8000fbe:	ed93 7b04 	vldr	d7, [r3, #16]
 8000fc2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fca:	d531      	bpl.n	8001030 <HAL_TIM_PeriodElapsedCallback+0x5a8>
			pusher_A.count++;
 8000fcc:	4b5d      	ldr	r3, [pc, #372]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	4a5c      	ldr	r2, [pc, #368]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8000fd4:	6193      	str	r3, [r2, #24]
			HAL_GPIO_WritePin(PUSHER_A_IN1_PORT, PUSHER_A_IN1_PIN, GPIO_PIN_RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fdc:	4855      	ldr	r0, [pc, #340]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8000fde:	f008 fcd1 	bl	8009984 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUSHER_A_IN2_PORT, PUSHER_A_IN2_PIN, GPIO_PIN_SET);
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fe8:	4852      	ldr	r0, [pc, #328]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8000fea:	f008 fccb 	bl	8009984 <HAL_GPIO_WritePin>
			if(pusher_A.count > -pusher_A.d*1000/PUSHER_SPEED){
 8000fee:	4b55      	ldr	r3, [pc, #340]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	ee07 3a90 	vmov	s15, r3
 8000ff6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000ffa:	4b52      	ldr	r3, [pc, #328]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8000ffc:	ed93 7b04 	vldr	d7, [r3, #16]
 8001000:	eeb1 7b47 	vneg.f64	d7, d7
 8001004:	ed9f 5b46 	vldr	d5, [pc, #280]	; 8001120 <HAL_TIM_PeriodElapsedCallback+0x698>
 8001008:	ee27 5b05 	vmul.f64	d5, d7, d5
 800100c:	ed9f 4b46 	vldr	d4, [pc, #280]	; 8001128 <HAL_TIM_PeriodElapsedCallback+0x6a0>
 8001010:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8001014:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800101c:	dd08      	ble.n	8001030 <HAL_TIM_PeriodElapsedCallback+0x5a8>
				pusher_A.p_state = pusher_A.state;
 800101e:	4b49      	ldr	r3, [pc, #292]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8001020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001024:	4947      	ldr	r1, [pc, #284]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8001026:	e9c1 2302 	strd	r2, r3, [r1, #8]
				pusher_A.count = 0;
 800102a:	4b46      	ldr	r3, [pc, #280]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]
			}
		}
		if(pusher_B.d < 0){
 8001030:	4b45      	ldr	r3, [pc, #276]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8001032:	ed93 7b04 	vldr	d7, [r3, #16]
 8001036:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800103a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800103e:	d531      	bpl.n	80010a4 <HAL_TIM_PeriodElapsedCallback+0x61c>
			pusher_B.count++;
 8001040:	4b41      	ldr	r3, [pc, #260]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	3301      	adds	r3, #1
 8001046:	4a40      	ldr	r2, [pc, #256]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8001048:	6193      	str	r3, [r2, #24]
			HAL_GPIO_WritePin(PUSHER_B_IN1_PORT, PUSHER_B_IN1_PIN, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001050:	4838      	ldr	r0, [pc, #224]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8001052:	f008 fc97 	bl	8009984 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUSHER_B_IN2_PORT, PUSHER_B_IN2_PIN, GPIO_PIN_SET);
 8001056:	2201      	movs	r2, #1
 8001058:	f44f 7180 	mov.w	r1, #256	; 0x100
 800105c:	4835      	ldr	r0, [pc, #212]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 800105e:	f008 fc91 	bl	8009984 <HAL_GPIO_WritePin>
			if(pusher_B.count > -pusher_B.d*1000/PUSHER_SPEED){
 8001062:	4b39      	ldr	r3, [pc, #228]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	ee07 3a90 	vmov	s15, r3
 800106a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800106e:	4b36      	ldr	r3, [pc, #216]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8001070:	ed93 7b04 	vldr	d7, [r3, #16]
 8001074:	eeb1 7b47 	vneg.f64	d7, d7
 8001078:	ed9f 5b29 	vldr	d5, [pc, #164]	; 8001120 <HAL_TIM_PeriodElapsedCallback+0x698>
 800107c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001080:	ed9f 4b29 	vldr	d4, [pc, #164]	; 8001128 <HAL_TIM_PeriodElapsedCallback+0x6a0>
 8001084:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8001088:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800108c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001090:	dd08      	ble.n	80010a4 <HAL_TIM_PeriodElapsedCallback+0x61c>
				pusher_B.p_state = pusher_B.state;
 8001092:	4b2d      	ldr	r3, [pc, #180]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8001094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001098:	492b      	ldr	r1, [pc, #172]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 800109a:	e9c1 2302 	strd	r2, r3, [r1, #8]
				pusher_B.count = 0;
 800109e:	4b2a      	ldr	r3, [pc, #168]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
//				pusher_D.p_state = pusher_D.state;
//				pusher_D.count = 0;
//			}
//		}
		/*pusher stop*/
		if(pusher_A.d == 0){
 80010a4:	4b27      	ldr	r3, [pc, #156]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 80010a6:	ed93 7b04 	vldr	d7, [r3, #16]
 80010aa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80010ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b2:	d10b      	bne.n	80010cc <HAL_TIM_PeriodElapsedCallback+0x644>
			HAL_GPIO_WritePin(PUSHER_A_IN1_PORT, PUSHER_A_IN1_PIN, GPIO_PIN_RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ba:	481e      	ldr	r0, [pc, #120]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 80010bc:	f008 fc62 	bl	8009984 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUSHER_A_IN2_PORT, PUSHER_A_IN2_PIN, GPIO_PIN_RESET);
 80010c0:	2200      	movs	r2, #0
 80010c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010c6:	481b      	ldr	r0, [pc, #108]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 80010c8:	f008 fc5c 	bl	8009984 <HAL_GPIO_WritePin>
		}
		if(pusher_B.d == 0){
 80010cc:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 80010ce:	ed93 7b04 	vldr	d7, [r3, #16]
 80010d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80010d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010da:	d10b      	bne.n	80010f4 <HAL_TIM_PeriodElapsedCallback+0x66c>
			HAL_GPIO_WritePin(PUSHER_B_IN1_PORT, PUSHER_B_IN1_PIN, GPIO_PIN_RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010e2:	4814      	ldr	r0, [pc, #80]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 80010e4:	f008 fc4e 	bl	8009984 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUSHER_B_IN2_PORT, PUSHER_B_IN2_PIN, GPIO_PIN_RESET);
 80010e8:	2200      	movs	r2, #0
 80010ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ee:	4811      	ldr	r0, [pc, #68]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 80010f0:	f008 fc48 	bl	8009984 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(PUSHER_D_IN1_PORT, PUSHER_D_IN1_PIN, GPIO_PIN_RESET);
//			HAL_GPIO_WritePin(PUSHER_D_IN2_PORT, PUSHER_D_IN2_PIN, GPIO_PIN_RESET);
//		}
//
	}
	if(htim->Instance == TIM23){/*for script*/
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a17      	ldr	r2, [pc, #92]	; (8001158 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d17b      	bne.n	80011f6 <HAL_TIM_PeriodElapsedCallback+0x76e>
		if(delay_start!=0){
 80010fe:	4b17      	ldr	r3, [pc, #92]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d004      	beq.n	8001110 <HAL_TIM_PeriodElapsedCallback+0x688>
			delay++;
 8001106:	4b16      	ldr	r3, [pc, #88]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	3301      	adds	r3, #1
 800110c:	4a14      	ldr	r2, [pc, #80]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 800110e:	6013      	str	r3, [r2, #0]
		}
		if(delay_start_2!=0){
 8001110:	4b14      	ldr	r3, [pc, #80]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d02c      	beq.n	8001172 <HAL_TIM_PeriodElapsedCallback+0x6ea>
			delay_2++;
 8001118:	4b13      	ldr	r3, [pc, #76]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	e026      	b.n	800116c <HAL_TIM_PeriodElapsedCallback+0x6e4>
 800111e:	bf00      	nop
 8001120:	00000000 	.word	0x00000000
 8001124:	408f4000 	.word	0x408f4000
 8001128:	cccccccd 	.word	0xcccccccd
 800112c:	4040cccc 	.word	0x4040cccc
 8001130:	240000f8 	.word	0x240000f8
 8001134:	58021000 	.word	0x58021000
 8001138:	40010400 	.word	0x40010400
 800113c:	240002d0 	.word	0x240002d0
 8001140:	51eb851f 	.word	0x51eb851f
 8001144:	240009c0 	.word	0x240009c0
 8001148:	240009e0 	.word	0x240009e0
 800114c:	24000050 	.word	0x24000050
 8001150:	240002c8 	.word	0x240002c8
 8001154:	402e0000 	.word	0x402e0000
 8001158:	4000e000 	.word	0x4000e000
 800115c:	240002b8 	.word	0x240002b8
 8001160:	240002bc 	.word	0x240002bc
 8001164:	240002c0 	.word	0x240002c0
 8001168:	240002c4 	.word	0x240002c4
 800116c:	3301      	adds	r3, #1
 800116e:	4a24      	ldr	r2, [pc, #144]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x778>)
 8001170:	6013      	str	r3, [r2, #0]
		}
		if(delay_start_reset!=0){
 8001172:	4b24      	ldr	r3, [pc, #144]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x77c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d004      	beq.n	8001184 <HAL_TIM_PeriodElapsedCallback+0x6fc>
			delay_reset++;
 800117a:	4b23      	ldr	r3, [pc, #140]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x780>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	3301      	adds	r3, #1
 8001180:	4a21      	ldr	r2, [pc, #132]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x780>)
 8001182:	6013      	str	r3, [r2, #0]
		}


		if(delay_start_reset ==1 && delay_reset > 0){
 8001184:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x77c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d10c      	bne.n	80011a6 <HAL_TIM_PeriodElapsedCallback+0x71e>
 800118c:	4b1e      	ldr	r3, [pc, #120]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x780>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	dd08      	ble.n	80011a6 <HAL_TIM_PeriodElapsedCallback+0x71e>
			script_pusher(-14,15);
 8001194:	eeb2 1b0e 	vmov.f64	d1, #46	; 0x41700000  15.0
 8001198:	eeba 0b0c 	vmov.f64	d0, #172	; 0xc1600000 -14.0
 800119c:	f000 ffa4 	bl	80020e8 <_Z13script_pusherdd>
			delay_start_reset =2;
 80011a0:	4b18      	ldr	r3, [pc, #96]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x77c>)
 80011a2:	2202      	movs	r2, #2
 80011a4:	601a      	str	r2, [r3, #0]
		}
		if(delay_start_reset == 2 && delay_reset == 200){
 80011a6:	4b17      	ldr	r3, [pc, #92]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x77c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d123      	bne.n	80011f6 <HAL_TIM_PeriodElapsedCallback+0x76e>
 80011ae:	4b16      	ldr	r3, [pc, #88]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x780>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2bc8      	cmp	r3, #200	; 0xc8
 80011b4:	d11f      	bne.n	80011f6 <HAL_TIM_PeriodElapsedCallback+0x76e>
			pusher_A.state = 0;
 80011b6:	4915      	ldr	r1, [pc, #84]	; (800120c <HAL_TIM_PeriodElapsedCallback+0x784>)
 80011b8:	f04f 0200 	mov.w	r2, #0
 80011bc:	f04f 0300 	mov.w	r3, #0
 80011c0:	e9c1 2300 	strd	r2, r3, [r1]
			pusher_A.p_state = 0;
 80011c4:	4911      	ldr	r1, [pc, #68]	; (800120c <HAL_TIM_PeriodElapsedCallback+0x784>)
 80011c6:	f04f 0200 	mov.w	r2, #0
 80011ca:	f04f 0300 	mov.w	r3, #0
 80011ce:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pusher_B.state = 12 ;
 80011d2:	490f      	ldr	r1, [pc, #60]	; (8001210 <HAL_TIM_PeriodElapsedCallback+0x788>)
 80011d4:	f04f 0200 	mov.w	r2, #0
 80011d8:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <HAL_TIM_PeriodElapsedCallback+0x78c>)
 80011da:	e9c1 2300 	strd	r2, r3, [r1]
			pusher_B.p_state = 12;
 80011de:	490c      	ldr	r1, [pc, #48]	; (8001210 <HAL_TIM_PeriodElapsedCallback+0x788>)
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <HAL_TIM_PeriodElapsedCallback+0x78c>)
 80011e6:	e9c1 2302 	strd	r2, r3, [r1, #8]
			delay_start_reset = 0;
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x77c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
			delay_reset = 0;
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x780>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
//			script_wheel(0,0,0);
//			script_pusher(0,10,0,0);
//		}

	}
}
 80011f6:	bf00      	nop
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	240002c4 	.word	0x240002c4
 8001204:	240002c8 	.word	0x240002c8
 8001208:	240002cc 	.word	0x240002cc
 800120c:	240009c0 	.word	0x240009c0
 8001210:	240009e0 	.word	0x240009e0
 8001214:	40280000 	.word	0x40280000

08001218 <_Z13DC_motor_initv>:
DC_motor FL(15.96559764,31.71747647,0,216,512,1000);//motor_1
DC_motor BL(24.18280423,91.68881006,0,216,512,1000);//motor_2
DC_motor BR(21.19552541,50.08697147,0,216,512,1000);//motor_3
DC_motor FR(32.6189283,77.45068509,0,216,512,1000);//motor_4

void DC_motor_init(){
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
	//enc_1
	HAL_TIM_Encoder_Start_IT(&htim2,TIM_CHANNEL_1);
 800121c:	2100      	movs	r1, #0
 800121e:	4818      	ldr	r0, [pc, #96]	; (8001280 <_Z13DC_motor_initv+0x68>)
 8001220:	f00b fc24 	bl	800ca6c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim2,TIM_CHANNEL_2);
 8001224:	2104      	movs	r1, #4
 8001226:	4816      	ldr	r0, [pc, #88]	; (8001280 <_Z13DC_motor_initv+0x68>)
 8001228:	f00b fc20 	bl	800ca6c <HAL_TIM_Encoder_Start_IT>
 	HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_2);//VNH5019_1_PWM
 800122c:	2104      	movs	r1, #4
 800122e:	4815      	ldr	r0, [pc, #84]	; (8001284 <_Z13DC_motor_initv+0x6c>)
 8001230:	f00b fa5a 	bl	800c6e8 <HAL_TIM_PWM_Start>
 	//enc_2
 	HAL_TIM_Encoder_Start_IT(&htim5,TIM_CHANNEL_1);
 8001234:	2100      	movs	r1, #0
 8001236:	4814      	ldr	r0, [pc, #80]	; (8001288 <_Z13DC_motor_initv+0x70>)
 8001238:	f00b fc18 	bl	800ca6c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim5,TIM_CHANNEL_2);
 800123c:	2104      	movs	r1, #4
 800123e:	4812      	ldr	r0, [pc, #72]	; (8001288 <_Z13DC_motor_initv+0x70>)
 8001240:	f00b fc14 	bl	800ca6c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_1);//VNH5019_2_PWM
 8001244:	2100      	movs	r1, #0
 8001246:	480f      	ldr	r0, [pc, #60]	; (8001284 <_Z13DC_motor_initv+0x6c>)
 8001248:	f00b fa4e 	bl	800c6e8 <HAL_TIM_PWM_Start>
	//enc_3
	HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_1);
 800124c:	2100      	movs	r1, #0
 800124e:	480f      	ldr	r0, [pc, #60]	; (800128c <_Z13DC_motor_initv+0x74>)
 8001250:	f00b fc0c 	bl	800ca6c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_2);
 8001254:	2104      	movs	r1, #4
 8001256:	480d      	ldr	r0, [pc, #52]	; (800128c <_Z13DC_motor_initv+0x74>)
 8001258:	f00b fc08 	bl	800ca6c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(&htim15,TIM_CHANNEL_1);//VNH5019_3_PWM
 800125c:	2100      	movs	r1, #0
 800125e:	480c      	ldr	r0, [pc, #48]	; (8001290 <_Z13DC_motor_initv+0x78>)
 8001260:	f00b fa42 	bl	800c6e8 <HAL_TIM_PWM_Start>
	//enc_4
	HAL_TIM_Encoder_Start_IT(&htim4,TIM_CHANNEL_1);
 8001264:	2100      	movs	r1, #0
 8001266:	480b      	ldr	r0, [pc, #44]	; (8001294 <_Z13DC_motor_initv+0x7c>)
 8001268:	f00b fc00 	bl	800ca6c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim4,TIM_CHANNEL_2);
 800126c:	2104      	movs	r1, #4
 800126e:	4809      	ldr	r0, [pc, #36]	; (8001294 <_Z13DC_motor_initv+0x7c>)
 8001270:	f00b fbfc 	bl	800ca6c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(&htim15,TIM_CHANNEL_2);//VNH5019_4_PWM
 8001274:	2104      	movs	r1, #4
 8001276:	4806      	ldr	r0, [pc, #24]	; (8001290 <_Z13DC_motor_initv+0x78>)
 8001278:	f00b fa36 	bl	800c6e8 <HAL_TIM_PWM_Start>
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	24000504 	.word	0x24000504
 8001284:	24000680 	.word	0x24000680
 8001288:	240005e8 	.word	0x240005e8
 800128c:	24000550 	.word	0x24000550
 8001290:	240006cc 	.word	0x240006cc
 8001294:	2400059c 	.word	0x2400059c

08001298 <_ZN8DC_motorC1Edddddd>:

//motor Instance
DC_motor::DC_motor(double p, double i, double d, double ratio, double res, double PWM_span){
 8001298:	b480      	push	{r7}
 800129a:	b08f      	sub	sp, #60	; 0x3c
 800129c:	af00      	add	r7, sp, #0
 800129e:	6378      	str	r0, [r7, #52]	; 0x34
 80012a0:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 80012a4:	ed87 1b08 	vstr	d1, [r7, #32]
 80012a8:	ed87 2b06 	vstr	d2, [r7, #24]
 80012ac:	ed87 3b04 	vstr	d3, [r7, #16]
 80012b0:	ed87 4b02 	vstr	d4, [r7, #8]
 80012b4:	ed87 5b00 	vstr	d5, [r7]
 80012b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80012ba:	f04f 0200 	mov.w	r2, #0
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80012c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	f04f 0300 	mov.w	r3, #0
 80012d0:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80012d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80012d6:	f04f 0200 	mov.w	r2, #0
 80012da:	f04f 0300 	mov.w	r3, #0
 80012de:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 80012e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80012e4:	f04f 0200 	mov.w	r2, #0
 80012e8:	f04f 0300 	mov.w	r3, #0
 80012ec:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	this->kp = p;
 80012f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80012f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80012f6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	this->ki = i;
 80012fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80012fc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001300:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	this->kd = d;
 8001304:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001306:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800130a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	this->reduction_ratio = ratio;
 800130e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001310:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001314:	e9c1 2302 	strd	r2, r3, [r1, #8]
	this->resolution = res;
 8001318:	ed97 7b02 	vldr	d7, [r7, #8]
 800131c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001320:	ee17 2a90 	vmov	r2, s15
 8001324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001326:	601a      	str	r2, [r3, #0]
	this->ARR = PWM_span;
 8001328:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800132a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800132e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8001332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001334:	4618      	mov	r0, r3
 8001336:	373c      	adds	r7, #60	; 0x3c
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <_Z41__static_initialization_and_destruction_0ii>:
	u = kp * error + ki * integral + kd * differential;
	if (u > 1) u = 1;
	else if (u < -1) u = -1;

	return (int) u*ARR;
}
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d140      	bne.n	80013d2 <_Z41__static_initialization_and_destruction_0ii+0x92>
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001356:	4293      	cmp	r3, r2
 8001358:	d13b      	bne.n	80013d2 <_Z41__static_initialization_and_destruction_0ii+0x92>
DC_motor FL(15.96559764,31.71747647,0,216,512,1000);//motor_1
 800135a:	ed9f 5b21 	vldr	d5, [pc, #132]	; 80013e0 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 800135e:	ed9f 4b22 	vldr	d4, [pc, #136]	; 80013e8 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 8001362:	ed9f 3b23 	vldr	d3, [pc, #140]	; 80013f0 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 8001366:	ed9f 2b24 	vldr	d2, [pc, #144]	; 80013f8 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 800136a:	ed9f 1b25 	vldr	d1, [pc, #148]	; 8001400 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 800136e:	ed9f 0b26 	vldr	d0, [pc, #152]	; 8001408 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 8001372:	4833      	ldr	r0, [pc, #204]	; (8001440 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8001374:	f7ff ff90 	bl	8001298 <_ZN8DC_motorC1Edddddd>
DC_motor BL(24.18280423,91.68881006,0,216,512,1000);//motor_2
 8001378:	ed9f 5b19 	vldr	d5, [pc, #100]	; 80013e0 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 800137c:	ed9f 4b1a 	vldr	d4, [pc, #104]	; 80013e8 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 8001380:	ed9f 3b1b 	vldr	d3, [pc, #108]	; 80013f0 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 8001384:	ed9f 2b1c 	vldr	d2, [pc, #112]	; 80013f8 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 8001388:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8001410 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 800138c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8001418 <_Z41__static_initialization_and_destruction_0ii+0xd8>
 8001390:	482c      	ldr	r0, [pc, #176]	; (8001444 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8001392:	f7ff ff81 	bl	8001298 <_ZN8DC_motorC1Edddddd>
DC_motor BR(21.19552541,50.08697147,0,216,512,1000);//motor_3
 8001396:	ed9f 5b12 	vldr	d5, [pc, #72]	; 80013e0 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 800139a:	ed9f 4b13 	vldr	d4, [pc, #76]	; 80013e8 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 800139e:	ed9f 3b14 	vldr	d3, [pc, #80]	; 80013f0 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 80013a2:	ed9f 2b15 	vldr	d2, [pc, #84]	; 80013f8 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 80013a6:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 8001420 <_Z41__static_initialization_and_destruction_0ii+0xe0>
 80013aa:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8001428 <_Z41__static_initialization_and_destruction_0ii+0xe8>
 80013ae:	4826      	ldr	r0, [pc, #152]	; (8001448 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 80013b0:	f7ff ff72 	bl	8001298 <_ZN8DC_motorC1Edddddd>
DC_motor FR(32.6189283,77.45068509,0,216,512,1000);//motor_4
 80013b4:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 80013e0 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 80013b8:	ed9f 4b0b 	vldr	d4, [pc, #44]	; 80013e8 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 80013bc:	ed9f 3b0c 	vldr	d3, [pc, #48]	; 80013f0 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 80013c0:	ed9f 2b0d 	vldr	d2, [pc, #52]	; 80013f8 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 80013c4:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8001430 <_Z41__static_initialization_and_destruction_0ii+0xf0>
 80013c8:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8001438 <_Z41__static_initialization_and_destruction_0ii+0xf8>
 80013cc:	481f      	ldr	r0, [pc, #124]	; (800144c <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 80013ce:	f7ff ff63 	bl	8001298 <_ZN8DC_motorC1Edddddd>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	f3af 8000 	nop.w
 80013e0:	00000000 	.word	0x00000000
 80013e4:	408f4000 	.word	0x408f4000
 80013e8:	00000000 	.word	0x00000000
 80013ec:	40800000 	.word	0x40800000
 80013f0:	00000000 	.word	0x00000000
 80013f4:	406b0000 	.word	0x406b0000
	...
 8001400:	89b64cae 	.word	0x89b64cae
 8001404:	403fb7ac 	.word	0x403fb7ac
 8001408:	d059ca21 	.word	0xd059ca21
 800140c:	402fee62 	.word	0x402fee62
 8001410:	76ca36c5 	.word	0x76ca36c5
 8001414:	4056ec15 	.word	0x4056ec15
 8001418:	420d6ba3 	.word	0x420d6ba3
 800141c:	40382ecc 	.word	0x40382ecc
 8001420:	e191aae3 	.word	0xe191aae3
 8001424:	40490b21 	.word	0x40490b21
 8001428:	f4097cab 	.word	0xf4097cab
 800142c:	4035320d 	.word	0x4035320d
 8001430:	06469611 	.word	0x06469611
 8001434:	40535cd8 	.word	0x40535cd8
 8001438:	0ae388d1 	.word	0x0ae388d1
 800143c:	40404f39 	.word	0x40404f39
 8001440:	240002d8 	.word	0x240002d8
 8001444:	24000350 	.word	0x24000350
 8001448:	240003c8 	.word	0x240003c8
 800144c:	24000440 	.word	0x24000440

08001450 <_GLOBAL__sub_I_FL>:
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
 8001454:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001458:	2001      	movs	r0, #1
 800145a:	f7ff ff71 	bl	8001340 <_Z41__static_initialization_and_destruction_0ii>
 800145e:	bd80      	pop	{r7, pc}

08001460 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001464:	f004 fe22 	bl	80060ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001468:	f000 f81e 	bl	80014a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800146c:	f000 fc92 	bl	8001d94 <MX_GPIO_Init>
  MX_DMA_Init();
 8001470:	f000 fc68 	bl	8001d44 <MX_DMA_Init>
  MX_TIM3_Init();
 8001474:	f000 f930 	bl	80016d8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001478:	f000 f984 	bl	8001784 <MX_TIM4_Init>
  MX_TIM5_Init();
 800147c:	f000 f9d8 	bl	8001830 <MX_TIM5_Init>
  MX_TIM12_Init();
 8001480:	f000 fa80 	bl	8001984 <MX_TIM12_Init>
  MX_TIM15_Init();
 8001484:	f000 fae4 	bl	8001a50 <MX_TIM15_Init>
  MX_TIM1_Init();
 8001488:	f000 f87e 	bl	8001588 <MX_TIM1_Init>
  MX_TIM8_Init();
 800148c:	f000 fa26 	bl	80018dc <MX_TIM8_Init>
  MX_TIM23_Init();
 8001490:	f000 fb70 	bl	8001b74 <MX_TIM23_Init>
  MX_USART1_UART_Init();
 8001494:	f000 fbbc 	bl	8001c10 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001498:	f000 f8ca 	bl	8001630 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 800149c:	f000 fc04 	bl	8001ca8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 80014a0:	f000 fdb2 	bl	8002008 <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014a4:	e7fe      	b.n	80014a4 <main+0x44>
	...

080014a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b09c      	sub	sp, #112	; 0x70
 80014ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b2:	224c      	movs	r2, #76	; 0x4c
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f00e fe95 	bl	80101e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	2220      	movs	r2, #32
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f00e fe8f 	bl	80101e6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80014c8:	2002      	movs	r0, #2
 80014ca:	f008 fa75 	bl	80099b8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80014ce:	2300      	movs	r3, #0
 80014d0:	603b      	str	r3, [r7, #0]
 80014d2:	4b2c      	ldr	r3, [pc, #176]	; (8001584 <SystemClock_Config+0xdc>)
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014da:	4a2a      	ldr	r2, [pc, #168]	; (8001584 <SystemClock_Config+0xdc>)
 80014dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e0:	6193      	str	r3, [r2, #24]
 80014e2:	4b28      	ldr	r3, [pc, #160]	; (8001584 <SystemClock_Config+0xdc>)
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80014ee:	bf00      	nop
 80014f0:	4b24      	ldr	r3, [pc, #144]	; (8001584 <SystemClock_Config+0xdc>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014fc:	d1f8      	bne.n	80014f0 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014fe:	2301      	movs	r3, #1
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001502:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001506:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001508:	2302      	movs	r3, #2
 800150a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800150c:	2302      	movs	r3, #2
 800150e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001510:	2301      	movs	r3, #1
 8001512:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 42;
 8001514:	232a      	movs	r3, #42	; 0x2a
 8001516:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001518:	2302      	movs	r3, #2
 800151a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800151c:	2302      	movs	r3, #2
 800151e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001520:	2302      	movs	r3, #2
 8001522:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001524:	230c      	movs	r3, #12
 8001526:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001528:	2300      	movs	r3, #0
 800152a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001534:	4618      	mov	r0, r3
 8001536:	f008 fa79 	bl	8009a2c <HAL_RCC_OscConfig>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001540:	f000 fd3a 	bl	8001fb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001544:	233f      	movs	r3, #63	; 0x3f
 8001546:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001548:	2303      	movs	r3, #3
 800154a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001550:	2308      	movs	r3, #8
 8001552:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001554:	2340      	movs	r3, #64	; 0x40
 8001556:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001558:	2340      	movs	r3, #64	; 0x40
 800155a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800155c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001560:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001562:	2340      	movs	r3, #64	; 0x40
 8001564:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001566:	1d3b      	adds	r3, r7, #4
 8001568:	2102      	movs	r1, #2
 800156a:	4618      	mov	r0, r3
 800156c:	f008 fe38 	bl	800a1e0 <HAL_RCC_ClockConfig>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001576:	f000 fd1f 	bl	8001fb8 <Error_Handler>
  }
}
 800157a:	bf00      	nop
 800157c:	3770      	adds	r7, #112	; 0x70
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	58024800 	.word	0x58024800

08001588 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b088      	sub	sp, #32
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800158e:	f107 0310 	add.w	r3, r7, #16
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015a6:	4b20      	ldr	r3, [pc, #128]	; (8001628 <MX_TIM1_Init+0xa0>)
 80015a8:	4a20      	ldr	r2, [pc, #128]	; (800162c <MX_TIM1_Init+0xa4>)
 80015aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 80015ac:	4b1e      	ldr	r3, [pc, #120]	; (8001628 <MX_TIM1_Init+0xa0>)
 80015ae:	2253      	movs	r2, #83	; 0x53
 80015b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b2:	4b1d      	ldr	r3, [pc, #116]	; (8001628 <MX_TIM1_Init+0xa0>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3999;
 80015b8:	4b1b      	ldr	r3, [pc, #108]	; (8001628 <MX_TIM1_Init+0xa0>)
 80015ba:	f640 729f 	movw	r2, #3999	; 0xf9f
 80015be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c0:	4b19      	ldr	r3, [pc, #100]	; (8001628 <MX_TIM1_Init+0xa0>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015c6:	4b18      	ldr	r3, [pc, #96]	; (8001628 <MX_TIM1_Init+0xa0>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015cc:	4b16      	ldr	r3, [pc, #88]	; (8001628 <MX_TIM1_Init+0xa0>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015d2:	4815      	ldr	r0, [pc, #84]	; (8001628 <MX_TIM1_Init+0xa0>)
 80015d4:	f00a ff52 	bl	800c47c <HAL_TIM_Base_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80015de:	f000 fceb 	bl	8001fb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015e8:	f107 0310 	add.w	r3, r7, #16
 80015ec:	4619      	mov	r1, r3
 80015ee:	480e      	ldr	r0, [pc, #56]	; (8001628 <MX_TIM1_Init+0xa0>)
 80015f0:	f00b fd1e 	bl	800d030 <HAL_TIM_ConfigClockSource>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80015fa:	f000 fcdd 	bl	8001fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015fe:	2300      	movs	r3, #0
 8001600:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	4619      	mov	r1, r3
 800160e:	4806      	ldr	r0, [pc, #24]	; (8001628 <MX_TIM1_Init+0xa0>)
 8001610:	f00c fa6e 	bl	800daf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800161a:	f000 fccd 	bl	8001fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800161e:	bf00      	nop
 8001620:	3720      	adds	r7, #32
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	240004b8 	.word	0x240004b8
 800162c:	40010000 	.word	0x40010000

08001630 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08c      	sub	sp, #48	; 0x30
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001636:	f107 030c 	add.w	r3, r7, #12
 800163a:	2224      	movs	r2, #36	; 0x24
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f00e fdd1 	bl	80101e6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001644:	463b      	mov	r3, r7
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800164e:	4b21      	ldr	r3, [pc, #132]	; (80016d4 <MX_TIM2_Init+0xa4>)
 8001650:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001654:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001656:	4b1f      	ldr	r3, [pc, #124]	; (80016d4 <MX_TIM2_Init+0xa4>)
 8001658:	2200      	movs	r2, #0
 800165a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800165c:	4b1d      	ldr	r3, [pc, #116]	; (80016d4 <MX_TIM2_Init+0xa4>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001662:	4b1c      	ldr	r3, [pc, #112]	; (80016d4 <MX_TIM2_Init+0xa4>)
 8001664:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001668:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800166a:	4b1a      	ldr	r3, [pc, #104]	; (80016d4 <MX_TIM2_Init+0xa4>)
 800166c:	2200      	movs	r2, #0
 800166e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001670:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <MX_TIM2_Init+0xa4>)
 8001672:	2200      	movs	r2, #0
 8001674:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001676:	2303      	movs	r3, #3
 8001678:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800167e:	2301      	movs	r3, #1
 8001680:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001682:	2300      	movs	r3, #0
 8001684:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800168a:	2300      	movs	r3, #0
 800168c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800168e:	2301      	movs	r3, #1
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001692:	2300      	movs	r3, #0
 8001694:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800169a:	f107 030c 	add.w	r3, r7, #12
 800169e:	4619      	mov	r1, r3
 80016a0:	480c      	ldr	r0, [pc, #48]	; (80016d4 <MX_TIM2_Init+0xa4>)
 80016a2:	f00b f93d 	bl	800c920 <HAL_TIM_Encoder_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80016ac:	f000 fc84 	bl	8001fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b0:	2300      	movs	r3, #0
 80016b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016b8:	463b      	mov	r3, r7
 80016ba:	4619      	mov	r1, r3
 80016bc:	4805      	ldr	r0, [pc, #20]	; (80016d4 <MX_TIM2_Init+0xa4>)
 80016be:	f00c fa17 	bl	800daf0 <HAL_TIMEx_MasterConfigSynchronization>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80016c8:	f000 fc76 	bl	8001fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016cc:	bf00      	nop
 80016ce:	3730      	adds	r7, #48	; 0x30
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	24000504 	.word	0x24000504

080016d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08c      	sub	sp, #48	; 0x30
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016de:	f107 030c 	add.w	r3, r7, #12
 80016e2:	2224      	movs	r2, #36	; 0x24
 80016e4:	2100      	movs	r1, #0
 80016e6:	4618      	mov	r0, r3
 80016e8:	f00e fd7d 	bl	80101e6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ec:	463b      	mov	r3, r7
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016f6:	4b21      	ldr	r3, [pc, #132]	; (800177c <MX_TIM3_Init+0xa4>)
 80016f8:	4a21      	ldr	r2, [pc, #132]	; (8001780 <MX_TIM3_Init+0xa8>)
 80016fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016fc:	4b1f      	ldr	r3, [pc, #124]	; (800177c <MX_TIM3_Init+0xa4>)
 80016fe:	2200      	movs	r2, #0
 8001700:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001702:	4b1e      	ldr	r3, [pc, #120]	; (800177c <MX_TIM3_Init+0xa4>)
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001708:	4b1c      	ldr	r3, [pc, #112]	; (800177c <MX_TIM3_Init+0xa4>)
 800170a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800170e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001710:	4b1a      	ldr	r3, [pc, #104]	; (800177c <MX_TIM3_Init+0xa4>)
 8001712:	2200      	movs	r2, #0
 8001714:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001716:	4b19      	ldr	r3, [pc, #100]	; (800177c <MX_TIM3_Init+0xa4>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800171c:	2303      	movs	r3, #3
 800171e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001720:	2300      	movs	r3, #0
 8001722:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001724:	2301      	movs	r3, #1
 8001726:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001728:	2300      	movs	r3, #0
 800172a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001730:	2300      	movs	r3, #0
 8001732:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001734:	2301      	movs	r3, #1
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001738:	2300      	movs	r3, #0
 800173a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001740:	f107 030c 	add.w	r3, r7, #12
 8001744:	4619      	mov	r1, r3
 8001746:	480d      	ldr	r0, [pc, #52]	; (800177c <MX_TIM3_Init+0xa4>)
 8001748:	f00b f8ea 	bl	800c920 <HAL_TIM_Encoder_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001752:	f000 fc31 	bl	8001fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001756:	2300      	movs	r3, #0
 8001758:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800175a:	2300      	movs	r3, #0
 800175c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800175e:	463b      	mov	r3, r7
 8001760:	4619      	mov	r1, r3
 8001762:	4806      	ldr	r0, [pc, #24]	; (800177c <MX_TIM3_Init+0xa4>)
 8001764:	f00c f9c4 	bl	800daf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800176e:	f000 fc23 	bl	8001fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001772:	bf00      	nop
 8001774:	3730      	adds	r7, #48	; 0x30
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	24000550 	.word	0x24000550
 8001780:	40000400 	.word	0x40000400

08001784 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08c      	sub	sp, #48	; 0x30
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800178a:	f107 030c 	add.w	r3, r7, #12
 800178e:	2224      	movs	r2, #36	; 0x24
 8001790:	2100      	movs	r1, #0
 8001792:	4618      	mov	r0, r3
 8001794:	f00e fd27 	bl	80101e6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001798:	463b      	mov	r3, r7
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017a2:	4b21      	ldr	r3, [pc, #132]	; (8001828 <MX_TIM4_Init+0xa4>)
 80017a4:	4a21      	ldr	r2, [pc, #132]	; (800182c <MX_TIM4_Init+0xa8>)
 80017a6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80017a8:	4b1f      	ldr	r3, [pc, #124]	; (8001828 <MX_TIM4_Init+0xa4>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ae:	4b1e      	ldr	r3, [pc, #120]	; (8001828 <MX_TIM4_Init+0xa4>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80017b4:	4b1c      	ldr	r3, [pc, #112]	; (8001828 <MX_TIM4_Init+0xa4>)
 80017b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017ba:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017bc:	4b1a      	ldr	r3, [pc, #104]	; (8001828 <MX_TIM4_Init+0xa4>)
 80017be:	2200      	movs	r2, #0
 80017c0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c2:	4b19      	ldr	r3, [pc, #100]	; (8001828 <MX_TIM4_Init+0xa4>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80017c8:	2303      	movs	r3, #3
 80017ca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017cc:	2300      	movs	r3, #0
 80017ce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017d0:	2301      	movs	r3, #1
 80017d2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017dc:	2300      	movs	r3, #0
 80017de:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017e0:	2301      	movs	r3, #1
 80017e2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017e4:	2300      	movs	r3, #0
 80017e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80017ec:	f107 030c 	add.w	r3, r7, #12
 80017f0:	4619      	mov	r1, r3
 80017f2:	480d      	ldr	r0, [pc, #52]	; (8001828 <MX_TIM4_Init+0xa4>)
 80017f4:	f00b f894 	bl	800c920 <HAL_TIM_Encoder_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80017fe:	f000 fbdb 	bl	8001fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001802:	2300      	movs	r3, #0
 8001804:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800180a:	463b      	mov	r3, r7
 800180c:	4619      	mov	r1, r3
 800180e:	4806      	ldr	r0, [pc, #24]	; (8001828 <MX_TIM4_Init+0xa4>)
 8001810:	f00c f96e 	bl	800daf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800181a:	f000 fbcd 	bl	8001fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800181e:	bf00      	nop
 8001820:	3730      	adds	r7, #48	; 0x30
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	2400059c 	.word	0x2400059c
 800182c:	40000800 	.word	0x40000800

08001830 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08c      	sub	sp, #48	; 0x30
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001836:	f107 030c 	add.w	r3, r7, #12
 800183a:	2224      	movs	r2, #36	; 0x24
 800183c:	2100      	movs	r1, #0
 800183e:	4618      	mov	r0, r3
 8001840:	f00e fcd1 	bl	80101e6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001844:	463b      	mov	r3, r7
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800184e:	4b21      	ldr	r3, [pc, #132]	; (80018d4 <MX_TIM5_Init+0xa4>)
 8001850:	4a21      	ldr	r2, [pc, #132]	; (80018d8 <MX_TIM5_Init+0xa8>)
 8001852:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001854:	4b1f      	ldr	r3, [pc, #124]	; (80018d4 <MX_TIM5_Init+0xa4>)
 8001856:	2200      	movs	r2, #0
 8001858:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185a:	4b1e      	ldr	r3, [pc, #120]	; (80018d4 <MX_TIM5_Init+0xa4>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001860:	4b1c      	ldr	r3, [pc, #112]	; (80018d4 <MX_TIM5_Init+0xa4>)
 8001862:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001866:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001868:	4b1a      	ldr	r3, [pc, #104]	; (80018d4 <MX_TIM5_Init+0xa4>)
 800186a:	2200      	movs	r2, #0
 800186c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186e:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <MX_TIM5_Init+0xa4>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001874:	2303      	movs	r3, #3
 8001876:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001878:	2300      	movs	r3, #0
 800187a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800187c:	2301      	movs	r3, #1
 800187e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001880:	2300      	movs	r3, #0
 8001882:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001888:	2300      	movs	r3, #0
 800188a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800188c:	2301      	movs	r3, #1
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001890:	2300      	movs	r3, #0
 8001892:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001898:	f107 030c 	add.w	r3, r7, #12
 800189c:	4619      	mov	r1, r3
 800189e:	480d      	ldr	r0, [pc, #52]	; (80018d4 <MX_TIM5_Init+0xa4>)
 80018a0:	f00b f83e 	bl	800c920 <HAL_TIM_Encoder_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 80018aa:	f000 fb85 	bl	8001fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ae:	2300      	movs	r3, #0
 80018b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80018b6:	463b      	mov	r3, r7
 80018b8:	4619      	mov	r1, r3
 80018ba:	4806      	ldr	r0, [pc, #24]	; (80018d4 <MX_TIM5_Init+0xa4>)
 80018bc:	f00c f918 	bl	800daf0 <HAL_TIMEx_MasterConfigSynchronization>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80018c6:	f000 fb77 	bl	8001fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80018ca:	bf00      	nop
 80018cc:	3730      	adds	r7, #48	; 0x30
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	240005e8 	.word	0x240005e8
 80018d8:	40000c00 	.word	0x40000c00

080018dc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b088      	sub	sp, #32
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018e2:	f107 0310 	add.w	r3, r7, #16
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80018fa:	4b20      	ldr	r3, [pc, #128]	; (800197c <MX_TIM8_Init+0xa0>)
 80018fc:	4a20      	ldr	r2, [pc, #128]	; (8001980 <MX_TIM8_Init+0xa4>)
 80018fe:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 8001900:	4b1e      	ldr	r3, [pc, #120]	; (800197c <MX_TIM8_Init+0xa0>)
 8001902:	2253      	movs	r2, #83	; 0x53
 8001904:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001906:	4b1d      	ldr	r3, [pc, #116]	; (800197c <MX_TIM8_Init+0xa0>)
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 800190c:	4b1b      	ldr	r3, [pc, #108]	; (800197c <MX_TIM8_Init+0xa0>)
 800190e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001912:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001914:	4b19      	ldr	r3, [pc, #100]	; (800197c <MX_TIM8_Init+0xa0>)
 8001916:	2200      	movs	r2, #0
 8001918:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800191a:	4b18      	ldr	r3, [pc, #96]	; (800197c <MX_TIM8_Init+0xa0>)
 800191c:	2200      	movs	r2, #0
 800191e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001920:	4b16      	ldr	r3, [pc, #88]	; (800197c <MX_TIM8_Init+0xa0>)
 8001922:	2200      	movs	r2, #0
 8001924:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001926:	4815      	ldr	r0, [pc, #84]	; (800197c <MX_TIM8_Init+0xa0>)
 8001928:	f00a fda8 	bl	800c47c <HAL_TIM_Base_Init>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001932:	f000 fb41 	bl	8001fb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001936:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800193a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800193c:	f107 0310 	add.w	r3, r7, #16
 8001940:	4619      	mov	r1, r3
 8001942:	480e      	ldr	r0, [pc, #56]	; (800197c <MX_TIM8_Init+0xa0>)
 8001944:	f00b fb74 	bl	800d030 <HAL_TIM_ConfigClockSource>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800194e:	f000 fb33 	bl	8001fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001952:	2300      	movs	r3, #0
 8001954:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001956:	2300      	movs	r3, #0
 8001958:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	4619      	mov	r1, r3
 8001962:	4806      	ldr	r0, [pc, #24]	; (800197c <MX_TIM8_Init+0xa0>)
 8001964:	f00c f8c4 	bl	800daf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800196e:	f000 fb23 	bl	8001fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001972:	bf00      	nop
 8001974:	3720      	adds	r7, #32
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	24000634 	.word	0x24000634
 8001980:	40010400 	.word	0x40010400

08001984 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08a      	sub	sp, #40	; 0x28
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800198a:	f107 031c 	add.w	r3, r7, #28
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]
 8001994:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001996:	463b      	mov	r3, r7
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]
 80019a4:	615a      	str	r2, [r3, #20]
 80019a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80019a8:	4b27      	ldr	r3, [pc, #156]	; (8001a48 <MX_TIM12_Init+0xc4>)
 80019aa:	4a28      	ldr	r2, [pc, #160]	; (8001a4c <MX_TIM12_Init+0xc8>)
 80019ac:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80019ae:	4b26      	ldr	r3, [pc, #152]	; (8001a48 <MX_TIM12_Init+0xc4>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b4:	4b24      	ldr	r3, [pc, #144]	; (8001a48 <MX_TIM12_Init+0xc4>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 80019ba:	4b23      	ldr	r3, [pc, #140]	; (8001a48 <MX_TIM12_Init+0xc4>)
 80019bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019c0:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c2:	4b21      	ldr	r3, [pc, #132]	; (8001a48 <MX_TIM12_Init+0xc4>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c8:	4b1f      	ldr	r3, [pc, #124]	; (8001a48 <MX_TIM12_Init+0xc4>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80019ce:	481e      	ldr	r0, [pc, #120]	; (8001a48 <MX_TIM12_Init+0xc4>)
 80019d0:	f00a fe32 	bl	800c638 <HAL_TIM_PWM_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 80019da:	f000 faed 	bl	8001fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 80019e6:	f107 031c 	add.w	r3, r7, #28
 80019ea:	4619      	mov	r1, r3
 80019ec:	4816      	ldr	r0, [pc, #88]	; (8001a48 <MX_TIM12_Init+0xc4>)
 80019ee:	f00c f87f 	bl	800daf0 <HAL_TIMEx_MasterConfigSynchronization>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 80019f8:	f000 fade 	bl	8001fb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019fc:	2360      	movs	r3, #96	; 0x60
 80019fe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a0c:	463b      	mov	r3, r7
 8001a0e:	2200      	movs	r2, #0
 8001a10:	4619      	mov	r1, r3
 8001a12:	480d      	ldr	r0, [pc, #52]	; (8001a48 <MX_TIM12_Init+0xc4>)
 8001a14:	f00b f9f8 	bl	800ce08 <HAL_TIM_PWM_ConfigChannel>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_TIM12_Init+0x9e>
  {
    Error_Handler();
 8001a1e:	f000 facb 	bl	8001fb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a22:	463b      	mov	r3, r7
 8001a24:	2204      	movs	r2, #4
 8001a26:	4619      	mov	r1, r3
 8001a28:	4807      	ldr	r0, [pc, #28]	; (8001a48 <MX_TIM12_Init+0xc4>)
 8001a2a:	f00b f9ed 	bl	800ce08 <HAL_TIM_PWM_ConfigChannel>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM12_Init+0xb4>
  {
    Error_Handler();
 8001a34:	f000 fac0 	bl	8001fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001a38:	4803      	ldr	r0, [pc, #12]	; (8001a48 <MX_TIM12_Init+0xc4>)
 8001a3a:	f003 ffa3 	bl	8005984 <HAL_TIM_MspPostInit>

}
 8001a3e:	bf00      	nop
 8001a40:	3728      	adds	r7, #40	; 0x28
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	24000680 	.word	0x24000680
 8001a4c:	40001800 	.word	0x40001800

08001a50 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b098      	sub	sp, #96	; 0x60
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a56:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a62:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	60da      	str	r2, [r3, #12]
 8001a70:	611a      	str	r2, [r3, #16]
 8001a72:	615a      	str	r2, [r3, #20]
 8001a74:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a76:	1d3b      	adds	r3, r7, #4
 8001a78:	2234      	movs	r2, #52	; 0x34
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f00e fbb2 	bl	80101e6 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001a82:	4b3a      	ldr	r3, [pc, #232]	; (8001b6c <MX_TIM15_Init+0x11c>)
 8001a84:	4a3a      	ldr	r2, [pc, #232]	; (8001b70 <MX_TIM15_Init+0x120>)
 8001a86:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001a88:	4b38      	ldr	r3, [pc, #224]	; (8001b6c <MX_TIM15_Init+0x11c>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a8e:	4b37      	ldr	r3, [pc, #220]	; (8001b6c <MX_TIM15_Init+0x11c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8001a94:	4b35      	ldr	r3, [pc, #212]	; (8001b6c <MX_TIM15_Init+0x11c>)
 8001a96:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a9a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a9c:	4b33      	ldr	r3, [pc, #204]	; (8001b6c <MX_TIM15_Init+0x11c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001aa2:	4b32      	ldr	r3, [pc, #200]	; (8001b6c <MX_TIM15_Init+0x11c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa8:	4b30      	ldr	r3, [pc, #192]	; (8001b6c <MX_TIM15_Init+0x11c>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001aae:	482f      	ldr	r0, [pc, #188]	; (8001b6c <MX_TIM15_Init+0x11c>)
 8001ab0:	f00a fdc2 	bl	800c638 <HAL_TIM_PWM_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001aba:	f000 fa7d 	bl	8001fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001ac6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001aca:	4619      	mov	r1, r3
 8001acc:	4827      	ldr	r0, [pc, #156]	; (8001b6c <MX_TIM15_Init+0x11c>)
 8001ace:	f00c f80f 	bl	800daf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001ad8:	f000 fa6e 	bl	8001fb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001adc:	2360      	movs	r3, #96	; 0x60
 8001ade:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aec:	2300      	movs	r3, #0
 8001aee:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001af0:	2300      	movs	r3, #0
 8001af2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001af4:	2300      	movs	r3, #0
 8001af6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001af8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001afc:	2200      	movs	r2, #0
 8001afe:	4619      	mov	r1, r3
 8001b00:	481a      	ldr	r0, [pc, #104]	; (8001b6c <MX_TIM15_Init+0x11c>)
 8001b02:	f00b f981 	bl	800ce08 <HAL_TIM_PWM_ConfigChannel>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001b0c:	f000 fa54 	bl	8001fb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b10:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b14:	2204      	movs	r2, #4
 8001b16:	4619      	mov	r1, r3
 8001b18:	4814      	ldr	r0, [pc, #80]	; (8001b6c <MX_TIM15_Init+0x11c>)
 8001b1a:	f00b f975 	bl	800ce08 <HAL_TIM_PWM_ConfigChannel>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8001b24:	f000 fa48 	bl	8001fb8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b40:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b46:	2300      	movs	r3, #0
 8001b48:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001b4a:	1d3b      	adds	r3, r7, #4
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4807      	ldr	r0, [pc, #28]	; (8001b6c <MX_TIM15_Init+0x11c>)
 8001b50:	f00c f86a 	bl	800dc28 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8001b5a:	f000 fa2d 	bl	8001fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001b5e:	4803      	ldr	r0, [pc, #12]	; (8001b6c <MX_TIM15_Init+0x11c>)
 8001b60:	f003 ff10 	bl	8005984 <HAL_TIM_MspPostInit>

}
 8001b64:	bf00      	nop
 8001b66:	3760      	adds	r7, #96	; 0x60
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	240006cc 	.word	0x240006cc
 8001b70:	40014000 	.word	0x40014000

08001b74 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b088      	sub	sp, #32
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b7a:	f107 0310 	add.w	r3, r7, #16
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b88:	1d3b      	adds	r3, r7, #4
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]
 8001b90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8001b92:	4b1d      	ldr	r3, [pc, #116]	; (8001c08 <MX_TIM23_Init+0x94>)
 8001b94:	4a1d      	ldr	r2, [pc, #116]	; (8001c0c <MX_TIM23_Init+0x98>)
 8001b96:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 83;
 8001b98:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <MX_TIM23_Init+0x94>)
 8001b9a:	2253      	movs	r2, #83	; 0x53
 8001b9c:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b9e:	4b1a      	ldr	r3, [pc, #104]	; (8001c08 <MX_TIM23_Init+0x94>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 9999;
 8001ba4:	4b18      	ldr	r3, [pc, #96]	; (8001c08 <MX_TIM23_Init+0x94>)
 8001ba6:	f242 720f 	movw	r2, #9999	; 0x270f
 8001baa:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bac:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <MX_TIM23_Init+0x94>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb2:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <MX_TIM23_Init+0x94>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 8001bb8:	4813      	ldr	r0, [pc, #76]	; (8001c08 <MX_TIM23_Init+0x94>)
 8001bba:	f00a fc5f 	bl	800c47c <HAL_TIM_Base_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM23_Init+0x54>
  {
    Error_Handler();
 8001bc4:	f000 f9f8 	bl	8001fb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bcc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 8001bce:	f107 0310 	add.w	r3, r7, #16
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	480c      	ldr	r0, [pc, #48]	; (8001c08 <MX_TIM23_Init+0x94>)
 8001bd6:	f00b fa2b 	bl	800d030 <HAL_TIM_ConfigClockSource>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_TIM23_Init+0x70>
  {
    Error_Handler();
 8001be0:	f000 f9ea 	bl	8001fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be4:	2300      	movs	r3, #0
 8001be6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8001bec:	1d3b      	adds	r3, r7, #4
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4805      	ldr	r0, [pc, #20]	; (8001c08 <MX_TIM23_Init+0x94>)
 8001bf2:	f00b ff7d 	bl	800daf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM23_Init+0x8c>
  {
    Error_Handler();
 8001bfc:	f000 f9dc 	bl	8001fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8001c00:	bf00      	nop
 8001c02:	3720      	adds	r7, #32
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	24000718 	.word	0x24000718
 8001c0c:	4000e000 	.word	0x4000e000

08001c10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c14:	4b22      	ldr	r3, [pc, #136]	; (8001ca0 <MX_USART1_UART_Init+0x90>)
 8001c16:	4a23      	ldr	r2, [pc, #140]	; (8001ca4 <MX_USART1_UART_Init+0x94>)
 8001c18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001c1a:	4b21      	ldr	r3, [pc, #132]	; (8001ca0 <MX_USART1_UART_Init+0x90>)
 8001c1c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001c20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c22:	4b1f      	ldr	r3, [pc, #124]	; (8001ca0 <MX_USART1_UART_Init+0x90>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c28:	4b1d      	ldr	r3, [pc, #116]	; (8001ca0 <MX_USART1_UART_Init+0x90>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ca0 <MX_USART1_UART_Init+0x90>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c34:	4b1a      	ldr	r3, [pc, #104]	; (8001ca0 <MX_USART1_UART_Init+0x90>)
 8001c36:	220c      	movs	r2, #12
 8001c38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c3a:	4b19      	ldr	r3, [pc, #100]	; (8001ca0 <MX_USART1_UART_Init+0x90>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c40:	4b17      	ldr	r3, [pc, #92]	; (8001ca0 <MX_USART1_UART_Init+0x90>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c46:	4b16      	ldr	r3, [pc, #88]	; (8001ca0 <MX_USART1_UART_Init+0x90>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c4c:	4b14      	ldr	r3, [pc, #80]	; (8001ca0 <MX_USART1_UART_Init+0x90>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c52:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <MX_USART1_UART_Init+0x90>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c58:	4811      	ldr	r0, [pc, #68]	; (8001ca0 <MX_USART1_UART_Init+0x90>)
 8001c5a:	f00c f8a3 	bl	800dda4 <HAL_UART_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001c64:	f000 f9a8 	bl	8001fb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c68:	2100      	movs	r1, #0
 8001c6a:	480d      	ldr	r0, [pc, #52]	; (8001ca0 <MX_USART1_UART_Init+0x90>)
 8001c6c:	f00e f9ba 	bl	800ffe4 <HAL_UARTEx_SetTxFifoThreshold>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001c76:	f000 f99f 	bl	8001fb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	4808      	ldr	r0, [pc, #32]	; (8001ca0 <MX_USART1_UART_Init+0x90>)
 8001c7e:	f00e f9ef 	bl	8010060 <HAL_UARTEx_SetRxFifoThreshold>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001c88:	f000 f996 	bl	8001fb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001c8c:	4804      	ldr	r0, [pc, #16]	; (8001ca0 <MX_USART1_UART_Init+0x90>)
 8001c8e:	f00e f970 	bl	800ff72 <HAL_UARTEx_DisableFifoMode>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001c98:	f000 f98e 	bl	8001fb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	24000764 	.word	0x24000764
 8001ca4:	40011000 	.word	0x40011000

08001ca8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001cac:	4b22      	ldr	r3, [pc, #136]	; (8001d38 <MX_USART3_UART_Init+0x90>)
 8001cae:	4a23      	ldr	r2, [pc, #140]	; (8001d3c <MX_USART3_UART_Init+0x94>)
 8001cb0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 500000;
 8001cb2:	4b21      	ldr	r3, [pc, #132]	; (8001d38 <MX_USART3_UART_Init+0x90>)
 8001cb4:	4a22      	ldr	r2, [pc, #136]	; (8001d40 <MX_USART3_UART_Init+0x98>)
 8001cb6:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001cb8:	4b1f      	ldr	r3, [pc, #124]	; (8001d38 <MX_USART3_UART_Init+0x90>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001cbe:	4b1e      	ldr	r3, [pc, #120]	; (8001d38 <MX_USART3_UART_Init+0x90>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cc4:	4b1c      	ldr	r3, [pc, #112]	; (8001d38 <MX_USART3_UART_Init+0x90>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001cca:	4b1b      	ldr	r3, [pc, #108]	; (8001d38 <MX_USART3_UART_Init+0x90>)
 8001ccc:	220c      	movs	r2, #12
 8001cce:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cd0:	4b19      	ldr	r3, [pc, #100]	; (8001d38 <MX_USART3_UART_Init+0x90>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cd6:	4b18      	ldr	r3, [pc, #96]	; (8001d38 <MX_USART3_UART_Init+0x90>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cdc:	4b16      	ldr	r3, [pc, #88]	; (8001d38 <MX_USART3_UART_Init+0x90>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ce2:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <MX_USART3_UART_Init+0x90>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ce8:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <MX_USART3_UART_Init+0x90>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001cee:	4812      	ldr	r0, [pc, #72]	; (8001d38 <MX_USART3_UART_Init+0x90>)
 8001cf0:	f00c f858 	bl	800dda4 <HAL_UART_Init>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8001cfa:	f000 f95d 	bl	8001fb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cfe:	2100      	movs	r1, #0
 8001d00:	480d      	ldr	r0, [pc, #52]	; (8001d38 <MX_USART3_UART_Init+0x90>)
 8001d02:	f00e f96f 	bl	800ffe4 <HAL_UARTEx_SetTxFifoThreshold>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8001d0c:	f000 f954 	bl	8001fb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d10:	2100      	movs	r1, #0
 8001d12:	4809      	ldr	r0, [pc, #36]	; (8001d38 <MX_USART3_UART_Init+0x90>)
 8001d14:	f00e f9a4 	bl	8010060 <HAL_UARTEx_SetRxFifoThreshold>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8001d1e:	f000 f94b 	bl	8001fb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001d22:	4805      	ldr	r0, [pc, #20]	; (8001d38 <MX_USART3_UART_Init+0x90>)
 8001d24:	f00e f925 	bl	800ff72 <HAL_UARTEx_DisableFifoMode>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8001d2e:	f000 f943 	bl	8001fb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	240007f8 	.word	0x240007f8
 8001d3c:	40004800 	.word	0x40004800
 8001d40:	0007a120 	.word	0x0007a120

08001d44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d4a:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <MX_DMA_Init+0x4c>)
 8001d4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d50:	4a0f      	ldr	r2, [pc, #60]	; (8001d90 <MX_DMA_Init+0x4c>)
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d5a:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <MX_DMA_Init+0x4c>)
 8001d5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	607b      	str	r3, [r7, #4]
 8001d66:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	200b      	movs	r0, #11
 8001d6e:	f004 fb2e 	bl	80063ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001d72:	200b      	movs	r0, #11
 8001d74:	f004 fb45 	bl	8006402 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	200c      	movs	r0, #12
 8001d7e:	f004 fb26 	bl	80063ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001d82:	200c      	movs	r0, #12
 8001d84:	f004 fb3d 	bl	8006402 <HAL_NVIC_EnableIRQ>

}
 8001d88:	bf00      	nop
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	58024400 	.word	0x58024400

08001d94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08e      	sub	sp, #56	; 0x38
 8001d98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	605a      	str	r2, [r3, #4]
 8001da4:	609a      	str	r2, [r3, #8]
 8001da6:	60da      	str	r2, [r3, #12]
 8001da8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001daa:	4b7c      	ldr	r3, [pc, #496]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db0:	4a7a      	ldr	r2, [pc, #488]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001db2:	f043 0310 	orr.w	r3, r3, #16
 8001db6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dba:	4b78      	ldr	r3, [pc, #480]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc0:	f003 0310 	and.w	r3, r3, #16
 8001dc4:	623b      	str	r3, [r7, #32]
 8001dc6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc8:	4b74      	ldr	r3, [pc, #464]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dce:	4a73      	ldr	r2, [pc, #460]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001dd0:	f043 0304 	orr.w	r3, r3, #4
 8001dd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dd8:	4b70      	ldr	r3, [pc, #448]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	61fb      	str	r3, [r7, #28]
 8001de4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001de6:	4b6d      	ldr	r3, [pc, #436]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dec:	4a6b      	ldr	r2, [pc, #428]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001df2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001df6:	4b69      	ldr	r3, [pc, #420]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e00:	61bb      	str	r3, [r7, #24]
 8001e02:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e04:	4b65      	ldr	r3, [pc, #404]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e0a:	4a64      	ldr	r2, [pc, #400]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e14:	4b61      	ldr	r3, [pc, #388]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	617b      	str	r3, [r7, #20]
 8001e20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e22:	4b5e      	ldr	r3, [pc, #376]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e28:	4a5c      	ldr	r2, [pc, #368]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001e2a:	f043 0320 	orr.w	r3, r3, #32
 8001e2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e32:	4b5a      	ldr	r3, [pc, #360]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e38:	f003 0320 	and.w	r3, r3, #32
 8001e3c:	613b      	str	r3, [r7, #16]
 8001e3e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e40:	4b56      	ldr	r3, [pc, #344]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e46:	4a55      	ldr	r2, [pc, #340]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001e48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e50:	4b52      	ldr	r3, [pc, #328]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5e:	4b4f      	ldr	r3, [pc, #316]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e64:	4a4d      	ldr	r2, [pc, #308]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001e66:	f043 0302 	orr.w	r3, r3, #2
 8001e6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e6e:	4b4b      	ldr	r3, [pc, #300]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e7c:	4b47      	ldr	r3, [pc, #284]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e82:	4a46      	ldr	r2, [pc, #280]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001e84:	f043 0308 	orr.w	r3, r3, #8
 8001e88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e8c:	4b43      	ldr	r3, [pc, #268]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	607b      	str	r3, [r7, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f248 711c 	movw	r1, #34588	; 0x871c
 8001ea0:	483f      	ldr	r0, [pc, #252]	; (8001fa0 <MX_GPIO_Init+0x20c>)
 8001ea2:	f007 fd6f 	bl	8009984 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001eac:	483d      	ldr	r0, [pc, #244]	; (8001fa4 <MX_GPIO_Init+0x210>)
 8001eae:	f007 fd69 	bl	8009984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001eb8:	483b      	ldr	r0, [pc, #236]	; (8001fa8 <MX_GPIO_Init+0x214>)
 8001eba:	f007 fd63 	bl	8009984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	483a      	ldr	r0, [pc, #232]	; (8001fac <MX_GPIO_Init+0x218>)
 8001ec4:	f007 fd5e 	bl	8009984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f44f 5143 	mov.w	r1, #12480	; 0x30c0
 8001ece:	4838      	ldr	r0, [pc, #224]	; (8001fb0 <MX_GPIO_Init+0x21c>)
 8001ed0:	f007 fd58 	bl	8009984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_14, GPIO_PIN_RESET);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f44f 4182 	mov.w	r1, #16640	; 0x4100
 8001eda:	4836      	ldr	r0, [pc, #216]	; (8001fb4 <MX_GPIO_Init+0x220>)
 8001edc:	f007 fd52 	bl	8009984 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE8
                           PE9 PE10 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8
 8001ee0:	f248 731c 	movw	r3, #34588	; 0x871c
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ef2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4829      	ldr	r0, [pc, #164]	; (8001fa0 <MX_GPIO_Init+0x20c>)
 8001efa:	f007 fa99 	bl	8009430 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001efe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f04:	2301      	movs	r3, #1
 8001f06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f14:	4619      	mov	r1, r3
 8001f16:	4823      	ldr	r0, [pc, #140]	; (8001fa4 <MX_GPIO_Init+0x210>)
 8001f18:	f007 fa8a 	bl	8009430 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001f1c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f22:	2301      	movs	r3, #1
 8001f24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f32:	4619      	mov	r1, r3
 8001f34:	481c      	ldr	r0, [pc, #112]	; (8001fa8 <MX_GPIO_Init+0x214>)
 8001f36:	f007 fa7b 	bl	8009430 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f46:	2300      	movs	r3, #0
 8001f48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4816      	ldr	r0, [pc, #88]	; (8001fac <MX_GPIO_Init+0x218>)
 8001f52:	f007 fa6d 	bl	8009430 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7;
 8001f56:	f44f 5343 	mov.w	r3, #12480	; 0x30c0
 8001f5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f64:	2300      	movs	r3, #0
 8001f66:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4810      	ldr	r0, [pc, #64]	; (8001fb0 <MX_GPIO_Init+0x21c>)
 8001f70:	f007 fa5e 	bl	8009430 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_14;
 8001f74:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f82:	2300      	movs	r3, #0
 8001f84:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4809      	ldr	r0, [pc, #36]	; (8001fb4 <MX_GPIO_Init+0x220>)
 8001f8e:	f007 fa4f 	bl	8009430 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f92:	bf00      	nop
 8001f94:	3738      	adds	r7, #56	; 0x38
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	58024400 	.word	0x58024400
 8001fa0:	58021000 	.word	0x58021000
 8001fa4:	58020800 	.word	0x58020800
 8001fa8:	58021400 	.word	0x58021400
 8001fac:	58021800 	.word	0x58021800
 8001fb0:	58020400 	.word	0x58020400
 8001fb4:	58020c00 	.word	0x58020c00

08001fb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fbc:	b672      	cpsid	i
}
 8001fbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fc0:	e7fe      	b.n	8001fc0 <Error_Handler+0x8>

08001fc2 <_ZN6PUSHERC1Ev>:

#define PUSHER_SPEED 33.6

void pusher_reset();

class PUSHER{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	f04f 0200 	mov.w	r2, #0
 8001fd0:	f04f 0300 	mov.w	r3, #0
 8001fd4:	e9c1 2300 	strd	r2, r3, [r1]
 8001fd8:	6879      	ldr	r1, [r7, #4]
 8001fda:	f04f 0200 	mov.w	r2, #0
 8001fde:	f04f 0300 	mov.w	r3, #0
 8001fe2:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	f04f 0200 	mov.w	r2, #0
 8001fec:	f04f 0300 	mov.w	r3, #0
 8001ff0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	619a      	str	r2, [r3, #24]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <main_function>:
int a=0;
int flag = 0;
double Vx = 0, Vy = 0, W, rVx, rVy, rW;
int script_state = 0;
int pusher_reset_state = 0;
void main_function(){
 8002008:	b580      	push	{r7, lr}
 800200a:	b090      	sub	sp, #64	; 0x40
 800200c:	af00      	add	r7, sp, #0
	PUSHER pusher_A;
 800200e:	f107 0320 	add.w	r3, r7, #32
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff ffd5 	bl	8001fc2 <_ZN6PUSHERC1Ev>
	PUSHER pusher_B;
 8002018:	463b      	mov	r3, r7
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff ffd1 	bl	8001fc2 <_ZN6PUSHERC1Ev>
//	PUSHER pusher_C;
//	PUSHER pusher_D;
//	SCRIPT script_a;
	ros_setup();
 8002020:	f001 ffca 	bl	8003fb8 <_Z9ros_setupv>
	stm_setup();
 8002024:	f000 f84a 	bl	80020bc <stm_setup>
	script_a.scriptrun = 0;
 8002028:	4b1e      	ldr	r3, [pc, #120]	; (80020a4 <main_function+0x9c>)
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
	script_b.scriptrun = 0;
 800202e:	4b1e      	ldr	r3, [pc, #120]	; (80020a8 <main_function+0xa0>)
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
	pusher_reset();
 8002034:	f000 f8a0 	bl	8002178 <_Z12pusher_resetv>
	while(1){
		a++;
 8002038:	4b1c      	ldr	r3, [pc, #112]	; (80020ac <main_function+0xa4>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	3301      	adds	r3, #1
 800203e:	4a1b      	ldr	r2, [pc, #108]	; (80020ac <main_function+0xa4>)
 8002040:	6013      	str	r3, [r2, #0]
		ros_loop();
 8002042:	f001 ffd5 	bl	8003ff0 <_Z8ros_loopv>
		if(flag == 6 ){
 8002046:	4b1a      	ldr	r3, [pc, #104]	; (80020b0 <main_function+0xa8>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2b06      	cmp	r3, #6
 800204c:	d105      	bne.n	800205a <main_function+0x52>
			script_a.scriptrun = 1;
 800204e:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <main_function+0x9c>)
 8002050:	2201      	movs	r2, #1
 8002052:	601a      	str	r2, [r3, #0]
			flag = 0;
 8002054:	4b16      	ldr	r3, [pc, #88]	; (80020b0 <main_function+0xa8>)
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
		}
		if(flag == 7){
 800205a:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <main_function+0xa8>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2b07      	cmp	r3, #7
 8002060:	d116      	bne.n	8002090 <main_function+0x88>
			script_b.scriptrun = 1;
 8002062:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <main_function+0xa0>)
 8002064:	2201      	movs	r2, #1
 8002066:	601a      	str	r2, [r3, #0]
			flag = 0;
 8002068:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <main_function+0xa8>)
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
		}
		while(script_a.scriptrun == 1 || script_b.scriptrun == 1){
 800206e:	e00f      	b.n	8002090 <main_function+0x88>
			if(everRun == 1 || everRun2 == 1){
 8002070:	4b10      	ldr	r3, [pc, #64]	; (80020b4 <main_function+0xac>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d003      	beq.n	8002080 <main_function+0x78>
 8002078:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <main_function+0xb0>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d105      	bne.n	800208c <main_function+0x84>
				script_a.scriptrun = 0;
 8002080:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <main_function+0x9c>)
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
				script_b.scriptrun = 0;
 8002086:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <main_function+0xa0>)
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
			}
			script();
 800208c:	f003 f804 	bl	8005098 <_Z6scriptv>
		while(script_a.scriptrun == 1 || script_b.scriptrun == 1){
 8002090:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <main_function+0x9c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d0eb      	beq.n	8002070 <main_function+0x68>
 8002098:	4b03      	ldr	r3, [pc, #12]	; (80020a8 <main_function+0xa0>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d0e7      	beq.n	8002070 <main_function+0x68>
		a++;
 80020a0:	e7ca      	b.n	8002038 <main_function+0x30>
 80020a2:	bf00      	nop
 80020a4:	24002020 	.word	0x24002020
 80020a8:	24002024 	.word	0x24002024
 80020ac:	2400097c 	.word	0x2400097c
 80020b0:	24000980 	.word	0x24000980
 80020b4:	24002028 	.word	0x24002028
 80020b8:	2400202c 	.word	0x2400202c

080020bc <stm_setup>:
		}

	}
}
void stm_setup(void){
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim1);
 80020c0:	4806      	ldr	r0, [pc, #24]	; (80020dc <stm_setup+0x20>)
 80020c2:	f00a fa33 	bl	800c52c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 80020c6:	4806      	ldr	r0, [pc, #24]	; (80020e0 <stm_setup+0x24>)
 80020c8:	f00a fa30 	bl	800c52c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim23);//main Timer
 80020cc:	4805      	ldr	r0, [pc, #20]	; (80020e4 <stm_setup+0x28>)
 80020ce:	f00a fa2d 	bl	800c52c <HAL_TIM_Base_Start_IT>
	DC_motor_init();
 80020d2:	f7ff f8a1 	bl	8001218 <_Z13DC_motor_initv>
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	240004b8 	.word	0x240004b8
 80020e0:	24000634 	.word	0x24000634
 80020e4:	24000718 	.word	0x24000718

080020e8 <_Z13script_pusherdd>:
//PUSHER pusher_D;
extern int delay_start_reset;
extern int delay_reset;
extern int pusher_reset_state;

void script_pusher(double hight_a,double hight_b){
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	ed87 0b02 	vstr	d0, [r7, #8]
 80020f2:	ed87 1b00 	vstr	d1, [r7]
	pusher_A.state = hight_a;
 80020f6:	4908      	ldr	r1, [pc, #32]	; (8002118 <_Z13script_pusherdd+0x30>)
 80020f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020fc:	e9c1 2300 	strd	r2, r3, [r1]
	pusher_B.state = hight_b;
 8002100:	4906      	ldr	r1, [pc, #24]	; (800211c <_Z13script_pusherdd+0x34>)
 8002102:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002106:	e9c1 2300 	strd	r2, r3, [r1]
}
 800210a:	bf00      	nop
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	240009c0 	.word	0x240009c0
 800211c:	240009e0 	.word	0x240009e0

08002120 <_ZN6PUSHER8distenceEv>:

void PUSHER::distence(){
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]

	pusher_A.d = (pusher_A.state - pusher_A.p_state)*10;
 8002128:	4b11      	ldr	r3, [pc, #68]	; (8002170 <_ZN6PUSHER8distenceEv+0x50>)
 800212a:	ed93 6b00 	vldr	d6, [r3]
 800212e:	4b10      	ldr	r3, [pc, #64]	; (8002170 <_ZN6PUSHER8distenceEv+0x50>)
 8002130:	ed93 7b02 	vldr	d7, [r3, #8]
 8002134:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002138:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800213c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002140:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <_ZN6PUSHER8distenceEv+0x50>)
 8002142:	ed83 7b04 	vstr	d7, [r3, #16]
	pusher_B.d = (pusher_B.state - pusher_B.p_state)*10;
 8002146:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <_ZN6PUSHER8distenceEv+0x54>)
 8002148:	ed93 6b00 	vldr	d6, [r3]
 800214c:	4b09      	ldr	r3, [pc, #36]	; (8002174 <_ZN6PUSHER8distenceEv+0x54>)
 800214e:	ed93 7b02 	vldr	d7, [r3, #8]
 8002152:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002156:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800215a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800215e:	4b05      	ldr	r3, [pc, #20]	; (8002174 <_ZN6PUSHER8distenceEv+0x54>)
 8002160:	ed83 7b04 	vstr	d7, [r3, #16]
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	240009c0 	.word	0x240009c0
 8002174:	240009e0 	.word	0x240009e0

08002178 <_Z12pusher_resetv>:
void pusher_reset(){
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
//	while(pusher_reset_state == 0){
	if(pusher_reset_state == 0){
 800217c:	4b07      	ldr	r3, [pc, #28]	; (800219c <_Z12pusher_resetv+0x24>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d108      	bne.n	8002196 <_Z12pusher_resetv+0x1e>
		script_pusher(-14,15);
 8002184:	eeb2 1b0e 	vmov.f64	d1, #46	; 0x41700000  15.0
 8002188:	eeba 0b0c 	vmov.f64	d0, #172	; 0xc1600000 -14.0
 800218c:	f7ff ffac 	bl	80020e8 <_Z13script_pusherdd>
		pusher_reset_state =1;
 8002190:	4b02      	ldr	r3, [pc, #8]	; (800219c <_Z12pusher_resetv+0x24>)
 8002192:	2201      	movs	r2, #1
 8002194:	601a      	str	r2, [r3, #0]
//			delay_start_reset = 0;
//			delay_reset = 0;
//			pusher_reset_state =1;
//		}
	}
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	240009b8 	.word	0x240009b8

080021a0 <_Z41__static_initialization_and_destruction_0ii>:
//	if(pusher_D.d ==0){
//		HAL_GPIO_WritePin(PUSHER_D_IN1_PORT, PUSHER_D_IN1_PIN, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(PUSHER_D_IN2_PORT, PUSHER_D_IN2_PIN, GPIO_PIN_RESET);
//
//	}
}
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d10a      	bne.n	80021c6 <_Z41__static_initialization_and_destruction_0ii+0x26>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d105      	bne.n	80021c6 <_Z41__static_initialization_and_destruction_0ii+0x26>
PUSHER pusher_A;
 80021ba:	4805      	ldr	r0, [pc, #20]	; (80021d0 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80021bc:	f7ff ff01 	bl	8001fc2 <_ZN6PUSHERC1Ev>
PUSHER pusher_B;
 80021c0:	4804      	ldr	r0, [pc, #16]	; (80021d4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80021c2:	f7ff fefe 	bl	8001fc2 <_ZN6PUSHERC1Ev>
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	240009c0 	.word	0x240009c0
 80021d4:	240009e0 	.word	0x240009e0

080021d8 <_GLOBAL__sub_I_pusher_A>:
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
 80021dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80021e0:	2001      	movs	r0, #1
 80021e2:	f7ff ffdd 	bl	80021a0 <_Z41__static_initialization_and_destruction_0ii>
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	605a      	str	r2, [r3, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4618      	mov	r0, r3
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
	...

0800220c <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	4a04      	ldr	r2, [pc, #16]	; (8002228 <_ZN3ros3MsgC1Ev+0x1c>)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4618      	mov	r0, r3
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	080107bc 	.word	0x080107bc

0800222c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
      data()
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff ffe8 	bl	800220c <_ZN3ros3MsgC1Ev>
 800223c:	4a06      	ldr	r2, [pc, #24]	; (8002258 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	3304      	adds	r3, #4
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff ffce 	bl	80021e8 <_ZN3ros4TimeC1Ev>
    {
    }
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	080107a4 	.word	0x080107a4

0800225c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002266:	2300      	movs	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6859      	ldr	r1, [r3, #4]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	4413      	add	r3, r2
 8002274:	b2ca      	uxtb	r2, r1
 8002276:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	0a19      	lsrs	r1, r3, #8
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	3301      	adds	r3, #1
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	4413      	add	r3, r2
 8002286:	b2ca      	uxtb	r2, r1
 8002288:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	0c19      	lsrs	r1, r3, #16
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	3302      	adds	r3, #2
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	4413      	add	r3, r2
 8002298:	b2ca      	uxtb	r2, r1
 800229a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	0e19      	lsrs	r1, r3, #24
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	3303      	adds	r3, #3
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	4413      	add	r3, r2
 80022aa:	b2ca      	uxtb	r2, r1
 80022ac:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	3304      	adds	r3, #4
 80022b2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6899      	ldr	r1, [r3, #8]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	4413      	add	r3, r2
 80022be:	b2ca      	uxtb	r2, r1
 80022c0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	0a19      	lsrs	r1, r3, #8
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	3301      	adds	r3, #1
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	4413      	add	r3, r2
 80022d0:	b2ca      	uxtb	r2, r1
 80022d2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	0c19      	lsrs	r1, r3, #16
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	3302      	adds	r3, #2
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	4413      	add	r3, r2
 80022e2:	b2ca      	uxtb	r2, r1
 80022e4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	0e19      	lsrs	r1, r3, #24
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	3303      	adds	r3, #3
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	4413      	add	r3, r2
 80022f4:	b2ca      	uxtb	r2, r1
 80022f6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	3304      	adds	r3, #4
 80022fc:	60fb      	str	r3, [r7, #12]
      return offset;
 80022fe:	68fb      	ldr	r3, [r7, #12]
    }
 8002300:	4618      	mov	r0, r3
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002316:	2300      	movs	r3, #0
 8002318:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	4413      	add	r3, r2
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	461a      	mov	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	3301      	adds	r3, #1
 8002330:	6839      	ldr	r1, [r7, #0]
 8002332:	440b      	add	r3, r1
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	021b      	lsls	r3, r3, #8
 8002338:	431a      	orrs	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	3302      	adds	r3, #2
 8002346:	6839      	ldr	r1, [r7, #0]
 8002348:	440b      	add	r3, r1
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	041b      	lsls	r3, r3, #16
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	3303      	adds	r3, #3
 800235c:	6839      	ldr	r1, [r7, #0]
 800235e:	440b      	add	r3, r1
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	061b      	lsls	r3, r3, #24
 8002364:	431a      	orrs	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	3304      	adds	r3, #4
 800236e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	4413      	add	r3, r2
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	461a      	mov	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689a      	ldr	r2, [r3, #8]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	3301      	adds	r3, #1
 8002386:	6839      	ldr	r1, [r7, #0]
 8002388:	440b      	add	r3, r1
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	021b      	lsls	r3, r3, #8
 800238e:	431a      	orrs	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	3302      	adds	r3, #2
 800239c:	6839      	ldr	r1, [r7, #0]
 800239e:	440b      	add	r3, r1
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	041b      	lsls	r3, r3, #16
 80023a4:	431a      	orrs	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	3303      	adds	r3, #3
 80023b2:	6839      	ldr	r1, [r7, #0]
 80023b4:	440b      	add	r3, r1
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	061b      	lsls	r3, r3, #24
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	3304      	adds	r3, #4
 80023c4:	60fb      	str	r3, [r7, #12]
     return offset;
 80023c6:	68fb      	ldr	r3, [r7, #12]
    }
 80023c8:	4618      	mov	r0, r3
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	4b03      	ldr	r3, [pc, #12]	; (80023ec <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80023de:	4618      	mov	r0, r3
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	080104a4 	.word	0x080104a4

080023f0 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	4b03      	ldr	r3, [pc, #12]	; (8002408 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80023fa:	4618      	mov	r0, r3
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	080104b4 	.word	0x080104b4

0800240c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff fef8 	bl	800220c <_ZN3ros3MsgC1Ev>
 800241c:	4a0b      	ldr	r2, [pc, #44]	; (800244c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a09      	ldr	r2, [pc, #36]	; (8002450 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800242c:	609a      	str	r2, [r3, #8]
      message_type(""),
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a07      	ldr	r2, [pc, #28]	; (8002450 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002432:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a06      	ldr	r2, [pc, #24]	; (8002450 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002438:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	615a      	str	r2, [r3, #20]
    {
    }
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4618      	mov	r0, r3
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	0801078c 	.word	0x0801078c
 8002450:	080104d8 	.word	0x080104d8

08002454 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002454:	b580      	push	{r7, lr}
 8002456:	b088      	sub	sp, #32
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800245e:	2300      	movs	r3, #0
 8002460:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	8899      	ldrh	r1, [r3, #4]
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	4413      	add	r3, r2
 800246c:	b2ca      	uxtb	r2, r1
 800246e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	889b      	ldrh	r3, [r3, #4]
 8002474:	0a1b      	lsrs	r3, r3, #8
 8002476:	b299      	uxth	r1, r3
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	3301      	adds	r3, #1
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	4413      	add	r3, r2
 8002480:	b2ca      	uxtb	r2, r1
 8002482:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	3302      	adds	r3, #2
 8002488:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	4618      	mov	r0, r3
 8002490:	f7fd ff3e 	bl	8000310 <strlen>
 8002494:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	4413      	add	r3, r2
 800249c:	69b9      	ldr	r1, [r7, #24]
 800249e:	4618      	mov	r0, r3
 80024a0:	f001 fe44 	bl	800412c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	3304      	adds	r3, #4
 80024a8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	18d0      	adds	r0, r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4619      	mov	r1, r3
 80024b8:	f00d feca 	bl	8010250 <memcpy>
      offset += length_topic_name;
 80024bc:	69fa      	ldr	r2, [r7, #28]
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	4413      	add	r3, r2
 80024c2:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fd ff21 	bl	8000310 <strlen>
 80024ce:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	4413      	add	r3, r2
 80024d6:	6979      	ldr	r1, [r7, #20]
 80024d8:	4618      	mov	r0, r3
 80024da:	f001 fe27 	bl	800412c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	3304      	adds	r3, #4
 80024e2:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	18d0      	adds	r0, r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	4619      	mov	r1, r3
 80024f2:	f00d fead 	bl	8010250 <memcpy>
      offset += length_message_type;
 80024f6:	69fa      	ldr	r2, [r7, #28]
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	4413      	add	r3, r2
 80024fc:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	4618      	mov	r0, r3
 8002504:	f7fd ff04 	bl	8000310 <strlen>
 8002508:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	4413      	add	r3, r2
 8002510:	6939      	ldr	r1, [r7, #16]
 8002512:	4618      	mov	r0, r3
 8002514:	f001 fe0a 	bl	800412c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	3304      	adds	r3, #4
 800251c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	18d0      	adds	r0, r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	4619      	mov	r1, r3
 800252c:	f00d fe90 	bl	8010250 <memcpy>
      offset += length_md5sum;
 8002530:	69fa      	ldr	r2, [r7, #28]
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	4413      	add	r3, r2
 8002536:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800253e:	68f9      	ldr	r1, [r7, #12]
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	4413      	add	r3, r2
 8002546:	b2ca      	uxtb	r2, r1
 8002548:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	0a19      	lsrs	r1, r3, #8
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	3301      	adds	r3, #1
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	4413      	add	r3, r2
 8002556:	b2ca      	uxtb	r2, r1
 8002558:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	0c19      	lsrs	r1, r3, #16
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	3302      	adds	r3, #2
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	4413      	add	r3, r2
 8002566:	b2ca      	uxtb	r2, r1
 8002568:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	0e19      	lsrs	r1, r3, #24
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3303      	adds	r3, #3
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	4413      	add	r3, r2
 8002576:	b2ca      	uxtb	r2, r1
 8002578:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	3304      	adds	r3, #4
 800257e:	61fb      	str	r3, [r7, #28]
      return offset;
 8002580:	69fb      	ldr	r3, [r7, #28]
    }
 8002582:	4618      	mov	r0, r3
 8002584:	3720      	adds	r7, #32
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800258a:	b580      	push	{r7, lr}
 800258c:	b08a      	sub	sp, #40	; 0x28
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
 8002592:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002594:	2300      	movs	r3, #0
 8002596:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	4413      	add	r3, r2
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	889b      	ldrh	r3, [r3, #4]
 80025aa:	b21a      	sxth	r2, r3
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	3301      	adds	r3, #1
 80025b0:	6839      	ldr	r1, [r7, #0]
 80025b2:	440b      	add	r3, r1
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	021b      	lsls	r3, r3, #8
 80025b8:	b21b      	sxth	r3, r3
 80025ba:	4313      	orrs	r3, r2
 80025bc:	b21b      	sxth	r3, r3
 80025be:	b29a      	uxth	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	3302      	adds	r3, #2
 80025c8:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	441a      	add	r2, r3
 80025d0:	f107 0314 	add.w	r3, r7, #20
 80025d4:	4611      	mov	r1, r2
 80025d6:	4618      	mov	r0, r3
 80025d8:	f001 fdc7 	bl	800416a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	3304      	adds	r3, #4
 80025e0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	627b      	str	r3, [r7, #36]	; 0x24
 80025e6:	e00b      	b.n	8002600 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	441a      	add	r2, r3
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	3b01      	subs	r3, #1
 80025f2:	6839      	ldr	r1, [r7, #0]
 80025f4:	440b      	add	r3, r1
 80025f6:	7812      	ldrb	r2, [r2, #0]
 80025f8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	3301      	adds	r3, #1
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	4413      	add	r3, r2
 8002606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002608:	429a      	cmp	r2, r3
 800260a:	d3ed      	bcc.n	80025e8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	4413      	add	r3, r2
 8002612:	3b01      	subs	r3, #1
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	4413      	add	r3, r2
 8002618:	2200      	movs	r2, #0
 800261a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	3b01      	subs	r3, #1
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	441a      	add	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	4413      	add	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	441a      	add	r2, r3
 8002636:	f107 0310 	add.w	r3, r7, #16
 800263a:	4611      	mov	r1, r2
 800263c:	4618      	mov	r0, r3
 800263e:	f001 fd94 	bl	800416a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	3304      	adds	r3, #4
 8002646:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	623b      	str	r3, [r7, #32]
 800264c:	e00b      	b.n	8002666 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	6a3b      	ldr	r3, [r7, #32]
 8002652:	441a      	add	r2, r3
 8002654:	6a3b      	ldr	r3, [r7, #32]
 8002656:	3b01      	subs	r3, #1
 8002658:	6839      	ldr	r1, [r7, #0]
 800265a:	440b      	add	r3, r1
 800265c:	7812      	ldrb	r2, [r2, #0]
 800265e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002660:	6a3b      	ldr	r3, [r7, #32]
 8002662:	3301      	adds	r3, #1
 8002664:	623b      	str	r3, [r7, #32]
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	4413      	add	r3, r2
 800266c:	6a3a      	ldr	r2, [r7, #32]
 800266e:	429a      	cmp	r2, r3
 8002670:	d3ed      	bcc.n	800264e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	4413      	add	r3, r2
 8002678:	3b01      	subs	r3, #1
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	4413      	add	r3, r2
 800267e:	2200      	movs	r2, #0
 8002680:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	3b01      	subs	r3, #1
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	441a      	add	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	4413      	add	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	441a      	add	r2, r3
 800269c:	f107 030c 	add.w	r3, r7, #12
 80026a0:	4611      	mov	r1, r2
 80026a2:	4618      	mov	r0, r3
 80026a4:	f001 fd61 	bl	800416a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	3304      	adds	r3, #4
 80026ac:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	61fb      	str	r3, [r7, #28]
 80026b2:	e00b      	b.n	80026cc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	441a      	add	r2, r3
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	3b01      	subs	r3, #1
 80026be:	6839      	ldr	r1, [r7, #0]
 80026c0:	440b      	add	r3, r1
 80026c2:	7812      	ldrb	r2, [r2, #0]
 80026c4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	3301      	adds	r3, #1
 80026ca:	61fb      	str	r3, [r7, #28]
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	4413      	add	r3, r2
 80026d2:	69fa      	ldr	r2, [r7, #28]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d3ed      	bcc.n	80026b4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	4413      	add	r3, r2
 80026de:	3b01      	subs	r3, #1
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	4413      	add	r3, r2
 80026e4:	2200      	movs	r2, #0
 80026e6:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	3b01      	subs	r3, #1
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	441a      	add	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	4413      	add	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80026fc:	2300      	movs	r3, #0
 80026fe:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	6839      	ldr	r1, [r7, #0]
 8002706:	440a      	add	r2, r1
 8002708:	7812      	ldrb	r2, [r2, #0]
 800270a:	4313      	orrs	r3, r2
 800270c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800270e:	68ba      	ldr	r2, [r7, #8]
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	3301      	adds	r3, #1
 8002714:	6839      	ldr	r1, [r7, #0]
 8002716:	440b      	add	r3, r1
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	021b      	lsls	r3, r3, #8
 800271c:	4313      	orrs	r3, r2
 800271e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002720:	68ba      	ldr	r2, [r7, #8]
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	3302      	adds	r3, #2
 8002726:	6839      	ldr	r1, [r7, #0]
 8002728:	440b      	add	r3, r1
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	041b      	lsls	r3, r3, #16
 800272e:	4313      	orrs	r3, r2
 8002730:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	3303      	adds	r3, #3
 8002738:	6839      	ldr	r1, [r7, #0]
 800273a:	440b      	add	r3, r1
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	061b      	lsls	r3, r3, #24
 8002740:	4313      	orrs	r3, r2
 8002742:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	3304      	adds	r3, #4
 800274e:	61bb      	str	r3, [r7, #24]
     return offset;
 8002750:	69bb      	ldr	r3, [r7, #24]
    }
 8002752:	4618      	mov	r0, r3
 8002754:	3728      	adds	r7, #40	; 0x28
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
	...

0800275c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	4b03      	ldr	r3, [pc, #12]	; (8002774 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8002766:	4618      	mov	r0, r3
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	080104dc 	.word	0x080104dc

08002778 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	4b03      	ldr	r3, [pc, #12]	; (8002790 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8002782:	4618      	mov	r0, r3
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	080104f8 	.word	0x080104f8

08002794 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff fd34 	bl	800220c <_ZN3ros3MsgC1Ev>
 80027a4:	4a06      	ldr	r2, [pc, #24]	; (80027c0 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	601a      	str	r2, [r3, #0]
      level(0),
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	711a      	strb	r2, [r3, #4]
      msg("")
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a04      	ldr	r2, [pc, #16]	; (80027c4 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80027b4:	609a      	str	r2, [r3, #8]
    {
    }
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4618      	mov	r0, r3
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	08010774 	.word	0x08010774
 80027c4:	080104d8 	.word	0x080104d8

080027c8 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80027d2:	2300      	movs	r3, #0
 80027d4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	4413      	add	r3, r2
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	7912      	ldrb	r2, [r2, #4]
 80027e0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	3301      	adds	r3, #1
 80027e6:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7fd fd8f 	bl	8000310 <strlen>
 80027f2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	4413      	add	r3, r2
 80027fa:	68b9      	ldr	r1, [r7, #8]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f001 fc95 	bl	800412c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	3304      	adds	r3, #4
 8002806:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	18d0      	adds	r0, r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	68ba      	ldr	r2, [r7, #8]
 8002814:	4619      	mov	r1, r3
 8002816:	f00d fd1b 	bl	8010250 <memcpy>
      offset += length_msg;
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	4413      	add	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]
      return offset;
 8002822:	68fb      	ldr	r3, [r7, #12]
    }
 8002824:	4618      	mov	r0, r3
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002836:	2300      	movs	r3, #0
 8002838:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	4413      	add	r3, r2
 8002840:	781a      	ldrb	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	3301      	adds	r3, #1
 800284a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	441a      	add	r2, r3
 8002852:	f107 030c 	add.w	r3, r7, #12
 8002856:	4611      	mov	r1, r2
 8002858:	4618      	mov	r0, r3
 800285a:	f001 fc86 	bl	800416a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	3304      	adds	r3, #4
 8002862:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	617b      	str	r3, [r7, #20]
 8002868:	e00b      	b.n	8002882 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	441a      	add	r2, r3
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	3b01      	subs	r3, #1
 8002874:	6839      	ldr	r1, [r7, #0]
 8002876:	440b      	add	r3, r1
 8002878:	7812      	ldrb	r2, [r2, #0]
 800287a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	3301      	adds	r3, #1
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4413      	add	r3, r2
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	429a      	cmp	r2, r3
 800288c:	d3ed      	bcc.n	800286a <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4413      	add	r3, r2
 8002894:	3b01      	subs	r3, #1
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	4413      	add	r3, r2
 800289a:	2200      	movs	r2, #0
 800289c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	3b01      	subs	r3, #1
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	441a      	add	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4413      	add	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
     return offset;
 80028b2:	693b      	ldr	r3, [r7, #16]
    }
 80028b4:	4618      	mov	r0, r3
 80028b6:	3718      	adds	r7, #24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	4b03      	ldr	r3, [pc, #12]	; (80028d4 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80028c6:	4618      	mov	r0, r3
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	0801051c 	.word	0x0801051c

080028d8 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	4b03      	ldr	r3, [pc, #12]	; (80028f0 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80028e2:	4618      	mov	r0, r3
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	08010530 	.word	0x08010530

080028f4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff fc84 	bl	800220c <_ZN3ros3MsgC1Ev>
 8002904:	4a0c      	ldr	r2, [pc, #48]	; (8002938 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	601a      	str	r2, [r3, #0]
      ints_length(0), ints(NULL),
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	605a      	str	r2, [r3, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	60da      	str	r2, [r3, #12]
      floats_length(0), floats(NULL),
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	611a      	str	r2, [r3, #16]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	619a      	str	r2, [r3, #24]
      strings_length(0), strings(NULL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	61da      	str	r2, [r3, #28]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4618      	mov	r0, r3
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	0801075c 	.word	0x0801075c

0800293c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800293c:	b580      	push	{r7, lr}
 800293e:	b08a      	sub	sp, #40	; 0x28
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002946:	2300      	movs	r3, #0
 8002948:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6859      	ldr	r1, [r3, #4]
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	4413      	add	r3, r2
 8002954:	b2ca      	uxtb	r2, r1
 8002956:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	0a19      	lsrs	r1, r3, #8
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	3301      	adds	r3, #1
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	4413      	add	r3, r2
 8002966:	b2ca      	uxtb	r2, r1
 8002968:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	0c19      	lsrs	r1, r3, #16
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	3302      	adds	r3, #2
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	4413      	add	r3, r2
 8002978:	b2ca      	uxtb	r2, r1
 800297a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	0e19      	lsrs	r1, r3, #24
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	3303      	adds	r3, #3
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	4413      	add	r3, r2
 800298a:	b2ca      	uxtb	r2, r1
 800298c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	3304      	adds	r3, #4
 8002992:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002994:	2300      	movs	r3, #0
 8002996:	623b      	str	r3, [r7, #32]
 8002998:	e02a      	b.n	80029f0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68da      	ldr	r2, [r3, #12]
 800299e:	6a3b      	ldr	r3, [r7, #32]
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4413      	add	r3, r2
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80029a8:	6939      	ldr	r1, [r7, #16]
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	4413      	add	r3, r2
 80029b0:	b2ca      	uxtb	r2, r1
 80029b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	0a19      	lsrs	r1, r3, #8
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	3301      	adds	r3, #1
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	4413      	add	r3, r2
 80029c0:	b2ca      	uxtb	r2, r1
 80029c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	0c19      	lsrs	r1, r3, #16
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	3302      	adds	r3, #2
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	4413      	add	r3, r2
 80029d0:	b2ca      	uxtb	r2, r1
 80029d2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	0e19      	lsrs	r1, r3, #24
 80029d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029da:	3303      	adds	r3, #3
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	4413      	add	r3, r2
 80029e0:	b2ca      	uxtb	r2, r1
 80029e2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80029e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e6:	3304      	adds	r3, #4
 80029e8:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80029ea:	6a3b      	ldr	r3, [r7, #32]
 80029ec:	3301      	adds	r3, #1
 80029ee:	623b      	str	r3, [r7, #32]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	6a3a      	ldr	r2, [r7, #32]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d3cf      	bcc.n	800299a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6919      	ldr	r1, [r3, #16]
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	4413      	add	r3, r2
 8002a04:	b2ca      	uxtb	r2, r1
 8002a06:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	0a19      	lsrs	r1, r3, #8
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	3301      	adds	r3, #1
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	4413      	add	r3, r2
 8002a16:	b2ca      	uxtb	r2, r1
 8002a18:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	0c19      	lsrs	r1, r3, #16
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	3302      	adds	r3, #2
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	4413      	add	r3, r2
 8002a28:	b2ca      	uxtb	r2, r1
 8002a2a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	0e19      	lsrs	r1, r3, #24
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	3303      	adds	r3, #3
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	4413      	add	r3, r2
 8002a3a:	b2ca      	uxtb	r2, r1
 8002a3c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a40:	3304      	adds	r3, #4
 8002a42:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002a44:	2300      	movs	r3, #0
 8002a46:	61fb      	str	r3, [r7, #28]
 8002a48:	e02a      	b.n	8002aa0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699a      	ldr	r2, [r3, #24]
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002a58:	68f9      	ldr	r1, [r7, #12]
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	4413      	add	r3, r2
 8002a60:	b2ca      	uxtb	r2, r1
 8002a62:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	0a19      	lsrs	r1, r3, #8
 8002a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	4413      	add	r3, r2
 8002a70:	b2ca      	uxtb	r2, r1
 8002a72:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	0c19      	lsrs	r1, r3, #16
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	3302      	adds	r3, #2
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	4413      	add	r3, r2
 8002a80:	b2ca      	uxtb	r2, r1
 8002a82:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	0e19      	lsrs	r1, r3, #24
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8a:	3303      	adds	r3, #3
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	4413      	add	r3, r2
 8002a90:	b2ca      	uxtb	r2, r1
 8002a92:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	3304      	adds	r3, #4
 8002a98:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	61fb      	str	r3, [r7, #28]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	69fa      	ldr	r2, [r7, #28]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d3cf      	bcc.n	8002a4a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69d9      	ldr	r1, [r3, #28]
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	b2ca      	uxtb	r2, r1
 8002ab6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	69db      	ldr	r3, [r3, #28]
 8002abc:	0a19      	lsrs	r1, r3, #8
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	b2ca      	uxtb	r2, r1
 8002ac8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	0c19      	lsrs	r1, r3, #16
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	3302      	adds	r3, #2
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	b2ca      	uxtb	r2, r1
 8002ada:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	0e19      	lsrs	r1, r3, #24
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	3303      	adds	r3, #3
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	4413      	add	r3, r2
 8002aea:	b2ca      	uxtb	r2, r1
 8002aec:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	3304      	adds	r3, #4
 8002af2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002af4:	2300      	movs	r3, #0
 8002af6:	61bb      	str	r3, [r7, #24]
 8002af8:	e027      	b.n	8002b4a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fd fc02 	bl	8000310 <strlen>
 8002b0c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	4413      	add	r3, r2
 8002b14:	6979      	ldr	r1, [r7, #20]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f001 fb08 	bl	800412c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	3304      	adds	r3, #4
 8002b20:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	18d0      	adds	r0, r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4413      	add	r3, r2
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	4619      	mov	r1, r3
 8002b38:	f00d fb8a 	bl	8010250 <memcpy>
      offset += length_stringsi;
 8002b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	4413      	add	r3, r2
 8002b42:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	3301      	adds	r3, #1
 8002b48:	61bb      	str	r3, [r7, #24]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d3d2      	bcc.n	8002afa <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002b56:	4618      	mov	r0, r3
 8002b58:	3728      	adds	r7, #40	; 0x28
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b08e      	sub	sp, #56	; 0x38
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
 8002b66:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	4413      	add	r3, r2
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b78:	3301      	adds	r3, #1
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	021b      	lsls	r3, r3, #8
 8002b82:	6a3a      	ldr	r2, [r7, #32]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b8a:	3302      	adds	r3, #2
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	4413      	add	r3, r2
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	041b      	lsls	r3, r3, #16
 8002b94:	6a3a      	ldr	r2, [r7, #32]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b9c:	3303      	adds	r3, #3
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	061b      	lsls	r3, r3, #24
 8002ba6:	6a3a      	ldr	r2, [r7, #32]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bae:	3304      	adds	r3, #4
 8002bb0:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	6a3a      	ldr	r2, [r7, #32]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d90a      	bls.n	8002bd2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68da      	ldr	r2, [r3, #12]
 8002bc0:	6a3b      	ldr	r3, [r7, #32]
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4610      	mov	r0, r2
 8002bc8:	f00d fad6 	bl	8010178 <realloc>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a3a      	ldr	r2, [r7, #32]
 8002bd6:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002bd8:	2300      	movs	r3, #0
 8002bda:	633b      	str	r3, [r7, #48]	; 0x30
 8002bdc:	e035      	b.n	8002c4a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002bde:	2300      	movs	r3, #0
 8002be0:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002be6:	6839      	ldr	r1, [r7, #0]
 8002be8:	440a      	add	r2, r1
 8002bea:	7812      	ldrb	r2, [r2, #0]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	6839      	ldr	r1, [r7, #0]
 8002bf8:	440b      	add	r3, r1
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	021b      	lsls	r3, r3, #8
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c06:	3302      	adds	r3, #2
 8002c08:	6839      	ldr	r1, [r7, #0]
 8002c0a:	440b      	add	r3, r1
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	041b      	lsls	r3, r3, #16
 8002c10:	4313      	orrs	r3, r2
 8002c12:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c18:	3303      	adds	r3, #3
 8002c1a:	6839      	ldr	r1, [r7, #0]
 8002c1c:	440b      	add	r3, r1
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	061b      	lsls	r3, r3, #24
 8002c22:	4313      	orrs	r3, r2
 8002c24:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c2e:	3304      	adds	r3, #4
 8002c30:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	3208      	adds	r2, #8
 8002c40:	6812      	ldr	r2, [r2, #0]
 8002c42:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c46:	3301      	adds	r3, #1
 8002c48:	633b      	str	r3, [r7, #48]	; 0x30
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d3c4      	bcc.n	8002bde <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	4413      	add	r3, r2
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c60:	3301      	adds	r3, #1
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	4413      	add	r3, r2
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	021b      	lsls	r3, r3, #8
 8002c6a:	69fa      	ldr	r2, [r7, #28]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c72:	3302      	adds	r3, #2
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	4413      	add	r3, r2
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	041b      	lsls	r3, r3, #16
 8002c7c:	69fa      	ldr	r2, [r7, #28]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c84:	3303      	adds	r3, #3
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	4413      	add	r3, r2
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	061b      	lsls	r3, r3, #24
 8002c8e:	69fa      	ldr	r2, [r7, #28]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c96:	3304      	adds	r3, #4
 8002c98:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	69fa      	ldr	r2, [r7, #28]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d90a      	bls.n	8002cba <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	699a      	ldr	r2, [r3, #24]
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4619      	mov	r1, r3
 8002cae:	4610      	mov	r0, r2
 8002cb0:	f00d fa62 	bl	8010178 <realloc>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69fa      	ldr	r2, [r7, #28]
 8002cbe:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cc4:	e035      	b.n	8002d32 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cce:	6839      	ldr	r1, [r7, #0]
 8002cd0:	440a      	add	r2, r1
 8002cd2:	7812      	ldrb	r2, [r2, #0]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cdc:	3301      	adds	r3, #1
 8002cde:	6839      	ldr	r1, [r7, #0]
 8002ce0:	440b      	add	r3, r1
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	021b      	lsls	r3, r3, #8
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cee:	3302      	adds	r3, #2
 8002cf0:	6839      	ldr	r1, [r7, #0]
 8002cf2:	440b      	add	r3, r1
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	041b      	lsls	r3, r3, #16
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d00:	3303      	adds	r3, #3
 8002d02:	6839      	ldr	r1, [r7, #0]
 8002d04:	440b      	add	r3, r1
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	061b      	lsls	r3, r3, #24
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d16:	3304      	adds	r3, #4
 8002d18:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	699a      	ldr	r2, [r3, #24]
 8002d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	3214      	adds	r2, #20
 8002d28:	6812      	ldr	r2, [r2, #0]
 8002d2a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2e:	3301      	adds	r3, #1
 8002d30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d3c4      	bcc.n	8002cc6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	4413      	add	r3, r2
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d48:	3301      	adds	r3, #1
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	021b      	lsls	r3, r3, #8
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d5a:	3302      	adds	r3, #2
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	4413      	add	r3, r2
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	041b      	lsls	r3, r3, #16
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d6c:	3303      	adds	r3, #3
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	4413      	add	r3, r2
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	061b      	lsls	r3, r3, #24
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d7e:	3304      	adds	r3, #4
 8002d80:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d90a      	bls.n	8002da2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4619      	mov	r1, r3
 8002d96:	4610      	mov	r0, r2
 8002d98:	f00d f9ee 	bl	8010178 <realloc>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002da8:	2300      	movs	r3, #0
 8002daa:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dac:	e03e      	b.n	8002e2c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	441a      	add	r2, r3
 8002db4:	f107 030c 	add.w	r3, r7, #12
 8002db8:	4611      	mov	r1, r2
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f001 f9d5 	bl	800416a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dc2:	3304      	adds	r3, #4
 8002dc4:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dca:	e00b      	b.n	8002de4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd0:	441a      	add	r2, r3
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	6839      	ldr	r1, [r7, #0]
 8002dd8:	440b      	add	r3, r1
 8002dda:	7812      	ldrb	r2, [r2, #0]
 8002ddc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	3301      	adds	r3, #1
 8002de2:	627b      	str	r3, [r7, #36]	; 0x24
 8002de4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	4413      	add	r3, r2
 8002dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d3ed      	bcc.n	8002dcc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002df0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	4413      	add	r3, r2
 8002df6:	3b01      	subs	r3, #1
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e02:	3b01      	subs	r3, #1
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	441a      	add	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002e0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	4413      	add	r3, r2
 8002e12:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	3220      	adds	r2, #32
 8002e22:	6812      	ldr	r2, [r2, #0]
 8002e24:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e28:	3301      	adds	r3, #1
 8002e2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	69db      	ldr	r3, [r3, #28]
 8002e30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d3bb      	bcc.n	8002dae <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8002e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3738      	adds	r7, #56	; 0x38
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	4b03      	ldr	r3, [pc, #12]	; (8002e58 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	08010680 	.word	0x08010680

08002e5c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	4b03      	ldr	r3, [pc, #12]	; (8002e74 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002e66:	4618      	mov	r0, r3
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	08010554 	.word	0x08010554

08002e78 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
 8002e84:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	68ba      	ldr	r2, [r7, #8]
 8002e8a:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	611a      	str	r2, [r3, #16]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b082      	sub	sp, #8
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
 8002eae:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68d8      	ldr	r0, [r3, #12]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6891      	ldr	r1, [r2, #8]
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	4798      	blx	r3
 8002ec4:	4603      	mov	r3, r0
  };
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	691b      	ldr	r3, [r3, #16]
  }
 8002eda:	4618      	mov	r0, r3
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
	...

08002ee8 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 2048;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a4b      	ldr	r2, [pc, #300]	; (8003028 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d077      	beq.n	8002ff0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a48      	ldr	r2, [pc, #288]	; (800302c <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d06f      	beq.n	8002ff0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a45      	ldr	r2, [pc, #276]	; (8003030 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d067      	beq.n	8002ff0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a42      	ldr	r2, [pc, #264]	; (8003034 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d05f      	beq.n	8002ff0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a3f      	ldr	r2, [pc, #252]	; (8003038 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d057      	beq.n	8002ff0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a3c      	ldr	r2, [pc, #240]	; (800303c <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d04f      	beq.n	8002ff0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a39      	ldr	r2, [pc, #228]	; (8003040 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d047      	beq.n	8002ff0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a36      	ldr	r2, [pc, #216]	; (8003044 <_ZN13STM32Hardware10getRdmaIndEv+0x15c>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d03f      	beq.n	8002ff0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a33      	ldr	r2, [pc, #204]	; (8003048 <_ZN13STM32Hardware10getRdmaIndEv+0x160>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d037      	beq.n	8002ff0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a30      	ldr	r2, [pc, #192]	; (800304c <_ZN13STM32Hardware10getRdmaIndEv+0x164>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d02f      	beq.n	8002ff0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a2d      	ldr	r2, [pc, #180]	; (8003050 <_ZN13STM32Hardware10getRdmaIndEv+0x168>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d027      	beq.n	8002ff0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a2a      	ldr	r2, [pc, #168]	; (8003054 <_ZN13STM32Hardware10getRdmaIndEv+0x16c>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d01f      	beq.n	8002ff0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a27      	ldr	r2, [pc, #156]	; (8003058 <_ZN13STM32Hardware10getRdmaIndEv+0x170>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d017      	beq.n	8002ff0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a24      	ldr	r2, [pc, #144]	; (800305c <_ZN13STM32Hardware10getRdmaIndEv+0x174>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d00f      	beq.n	8002ff0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a21      	ldr	r2, [pc, #132]	; (8003060 <_ZN13STM32Hardware10getRdmaIndEv+0x178>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d007      	beq.n	8002ff0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a1e      	ldr	r2, [pc, #120]	; (8003064 <_ZN13STM32Hardware10getRdmaIndEv+0x17c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d10a      	bne.n	8003006 <_ZN13STM32Hardware10getRdmaIndEv+0x11e>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8003000:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003004:	e009      	b.n	800301a <_ZN13STM32Hardware10getRdmaIndEv+0x132>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8003016:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800301a:	4618      	mov	r0, r3
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	40020010 	.word	0x40020010
 800302c:	40020028 	.word	0x40020028
 8003030:	40020040 	.word	0x40020040
 8003034:	40020058 	.word	0x40020058
 8003038:	40020070 	.word	0x40020070
 800303c:	40020088 	.word	0x40020088
 8003040:	400200a0 	.word	0x400200a0
 8003044:	400200b8 	.word	0x400200b8
 8003048:	40020410 	.word	0x40020410
 800304c:	40020428 	.word	0x40020428
 8003050:	40020440 	.word	0x40020440
 8003054:	40020458 	.word	0x40020458
 8003058:	40020470 	.word	0x40020470
 800305c:	40020488 	.word	0x40020488
 8003060:	400204a0 	.word	0x400204a0
 8003064:	400204b8 	.word	0x400204b8

08003068 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a0c      	ldr	r2, [pc, #48]	; (80030a4 <_ZN13STM32HardwareC1Ev+0x3c>)
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003084:	461a      	mov	r2, r3
 8003086:	2300      	movs	r3, #0
 8003088:	6093      	str	r3, [r2, #8]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003090:	461a      	mov	r2, r3
 8003092:	2300      	movs	r3, #0
 8003094:	60d3      	str	r3, [r2, #12]
    }
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4618      	mov	r0, r3
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr
 80030a4:	24000764 	.word	0x24000764

080030a8 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 f804 	bl	80030be <_ZN13STM32Hardware10reset_rbufEv>
    }
 80030b6:	bf00      	nop
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80030be:	b580      	push	{r7, lr}
 80030c0:	b082      	sub	sp, #8
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6818      	ldr	r0, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	3304      	adds	r3, #4
 80030ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030d2:	4619      	mov	r1, r3
 80030d4:	f00b f804 	bl	800e0e0 <HAL_UART_Receive_DMA>
    }
 80030d8:	bf00      	nop
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <_ZN13STM32Hardware4readEv>:

    int read(){
 80030e0:	b590      	push	{r4, r7, lr}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
      int c = -1;
 80030e8:	f04f 33ff 	mov.w	r3, #4294967295
 80030ec:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f7ff fef7 	bl	8002ee8 <_ZN13STM32Hardware10getRdmaIndEv>
 80030fa:	4603      	mov	r3, r0
 80030fc:	429c      	cmp	r4, r3
 80030fe:	bf14      	ite	ne
 8003100:	2301      	movne	r3, #1
 8003102:	2300      	moveq	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d012      	beq.n	8003130 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8003110:	1c59      	adds	r1, r3, #1
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	f8c2 1804 	str.w	r1, [r2, #2052]	; 0x804
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	4413      	add	r3, r2
 800311c:	791b      	ldrb	r3, [r3, #4]
 800311e:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8003126:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      }
      return c;
 8003130:	68fb      	ldr	r3, [r7, #12]
    }
 8003132:	4618      	mov	r0, r3
 8003134:	3714      	adds	r7, #20
 8003136:	46bd      	mov	sp, r7
 8003138:	bd90      	pop	{r4, r7, pc}
	...

0800313c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314c:	2b20      	cmp	r3, #32
 800314e:	d108      	bne.n	8003162 <_ZN13STM32Hardware5flushEv+0x26>
 8003150:	4b2c      	ldr	r3, [pc, #176]	; (8003204 <_ZN13STM32Hardware5flushEv+0xc8>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	f083 0301 	eor.w	r3, r3, #1
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <_ZN13STM32Hardware5flushEv+0x26>
 800315e:	2301      	movs	r3, #1
 8003160:	e000      	b.n	8003164 <_ZN13STM32Hardware5flushEv+0x28>
 8003162:	2300      	movs	r3, #0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d049      	beq.n	80031fc <_ZN13STM32Hardware5flushEv+0xc0>
        mutex = true;
 8003168:	4b26      	ldr	r3, [pc, #152]	; (8003204 <_ZN13STM32Hardware5flushEv+0xc8>)
 800316a:	2201      	movs	r2, #1
 800316c:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003174:	689a      	ldr	r2, [r3, #8]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	429a      	cmp	r2, r3
 8003180:	d039      	beq.n	80031f6 <_ZN13STM32Hardware5flushEv+0xba>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	429a      	cmp	r2, r3
 8003194:	d20c      	bcs.n	80031b0 <_ZN13STM32Hardware5flushEv+0x74>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	b29a      	uxth	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	e007      	b.n	80031c0 <_ZN13STM32Hardware5flushEv+0x84>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80031be:	b29b      	uxth	r3, r3
 80031c0:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6818      	ldr	r0, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	f603 0308 	addw	r3, r3, #2056	; 0x808
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	4413      	add	r3, r2
 80031d6:	89fa      	ldrh	r2, [r7, #14]
 80031d8:	4619      	mov	r1, r3
 80031da:	f00a ff01 	bl	800dfe0 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031e4:	68da      	ldr	r2, [r3, #12]
 80031e6:	89fb      	ldrh	r3, [r7, #14]
 80031e8:	4413      	add	r3, r2
 80031ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80031f4:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 80031f6:	4b03      	ldr	r3, [pc, #12]	; (8003204 <_ZN13STM32Hardware5flushEv+0xc8>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	701a      	strb	r2, [r3, #0]
      }
    }
 80031fc:	bf00      	nop
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	24000a00 	.word	0x24000a00

08003208 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
      int n = length;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800321e:	bfa8      	it	ge
 8003220:	f44f 6300 	movge.w	r3, #2048	; 0x800
 8003224:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	4293      	cmp	r3, r2
 8003236:	bf28      	it	cs
 8003238:	4613      	movcs	r3, r2
 800323a:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	4413      	add	r3, r2
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	68b9      	ldr	r1, [r7, #8]
 8003250:	4618      	mov	r0, r3
 8003252:	f00c fffd 	bl	8010250 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800325c:	689a      	ldr	r2, [r3, #8]
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	4413      	add	r3, r2
 8003262:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800326c:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	429a      	cmp	r2, r3
 8003274:	d00b      	beq.n	800328e <_ZN13STM32Hardware5writeEPhi+0x86>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f603 0008 	addw	r0, r3, #2056	; 0x808
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	18d1      	adds	r1, r2, r3
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	461a      	mov	r2, r3
 800328a:	f00c ffe1 	bl	8010250 <memcpy>
      }

      flush();
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f7ff ff54 	bl	800313c <_ZN13STM32Hardware5flushEv>
    }
 8003294:	bf00      	nop
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	f002 ff88 	bl	80061b8 <HAL_GetTick>
 80032a8:	4603      	mov	r3, r0
 80032aa:	4618      	mov	r0, r3
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
	...

080032b4 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fe ffa4 	bl	800220c <_ZN3ros3MsgC1Ev>
 80032c4:	4a0e      	ldr	r2, [pc, #56]	; (8003300 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	601a      	str	r2, [r3, #0]
      x(0),
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	f04f 0300 	mov.w	r3, #0
 80032d4:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	f04f 0200 	mov.w	r2, #0
 80032de:	f04f 0300 	mov.w	r3, #0
 80032e2:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0)
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4618      	mov	r0, r3
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	08010718 	.word	0x08010718

08003304 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003304:	b480      	push	{r7}
 8003306:	b08b      	sub	sp, #44	; 0x2c
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800330e:	2300      	movs	r3, #0
 8003310:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003318:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 800331c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003320:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003322:	6838      	ldr	r0, [r7, #0]
 8003324:	4401      	add	r1, r0
 8003326:	b2d3      	uxtb	r3, r2
 8003328:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800332a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800332e:	f04f 0200 	mov.w	r2, #0
 8003332:	f04f 0300 	mov.w	r3, #0
 8003336:	0a02      	lsrs	r2, r0, #8
 8003338:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800333c:	0a0b      	lsrs	r3, r1, #8
 800333e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003340:	3101      	adds	r1, #1
 8003342:	6838      	ldr	r0, [r7, #0]
 8003344:	4401      	add	r1, r0
 8003346:	b2d3      	uxtb	r3, r2
 8003348:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800334a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800334e:	f04f 0200 	mov.w	r2, #0
 8003352:	f04f 0300 	mov.w	r3, #0
 8003356:	0c02      	lsrs	r2, r0, #16
 8003358:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800335c:	0c0b      	lsrs	r3, r1, #16
 800335e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003360:	3102      	adds	r1, #2
 8003362:	6838      	ldr	r0, [r7, #0]
 8003364:	4401      	add	r1, r0
 8003366:	b2d3      	uxtb	r3, r2
 8003368:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800336a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800336e:	f04f 0200 	mov.w	r2, #0
 8003372:	f04f 0300 	mov.w	r3, #0
 8003376:	0e02      	lsrs	r2, r0, #24
 8003378:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800337c:	0e0b      	lsrs	r3, r1, #24
 800337e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003380:	3103      	adds	r1, #3
 8003382:	6838      	ldr	r0, [r7, #0]
 8003384:	4401      	add	r1, r0
 8003386:	b2d3      	uxtb	r3, r2
 8003388:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800338a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	000a      	movs	r2, r1
 8003398:	2300      	movs	r3, #0
 800339a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800339c:	3104      	adds	r1, #4
 800339e:	6838      	ldr	r0, [r7, #0]
 80033a0:	4401      	add	r1, r0
 80033a2:	b2d3      	uxtb	r3, r2
 80033a4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80033a6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80033aa:	f04f 0200 	mov.w	r2, #0
 80033ae:	f04f 0300 	mov.w	r3, #0
 80033b2:	0a0a      	lsrs	r2, r1, #8
 80033b4:	2300      	movs	r3, #0
 80033b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033b8:	3105      	adds	r1, #5
 80033ba:	6838      	ldr	r0, [r7, #0]
 80033bc:	4401      	add	r1, r0
 80033be:	b2d3      	uxtb	r3, r2
 80033c0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80033c2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80033c6:	f04f 0200 	mov.w	r2, #0
 80033ca:	f04f 0300 	mov.w	r3, #0
 80033ce:	0c0a      	lsrs	r2, r1, #16
 80033d0:	2300      	movs	r3, #0
 80033d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033d4:	3106      	adds	r1, #6
 80033d6:	6838      	ldr	r0, [r7, #0]
 80033d8:	4401      	add	r1, r0
 80033da:	b2d3      	uxtb	r3, r2
 80033dc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80033de:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80033e2:	f04f 0200 	mov.w	r2, #0
 80033e6:	f04f 0300 	mov.w	r3, #0
 80033ea:	0e0a      	lsrs	r2, r1, #24
 80033ec:	2300      	movs	r3, #0
 80033ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033f0:	3107      	adds	r1, #7
 80033f2:	6838      	ldr	r0, [r7, #0]
 80033f4:	4401      	add	r1, r0
 80033f6:	b2d3      	uxtb	r3, r2
 80033f8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	3308      	adds	r3, #8
 80033fe:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003406:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800340a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800340e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003410:	6838      	ldr	r0, [r7, #0]
 8003412:	4401      	add	r1, r0
 8003414:	b2d3      	uxtb	r3, r2
 8003416:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8003418:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800341c:	f04f 0200 	mov.w	r2, #0
 8003420:	f04f 0300 	mov.w	r3, #0
 8003424:	0a02      	lsrs	r2, r0, #8
 8003426:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800342a:	0a0b      	lsrs	r3, r1, #8
 800342c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800342e:	3101      	adds	r1, #1
 8003430:	6838      	ldr	r0, [r7, #0]
 8003432:	4401      	add	r1, r0
 8003434:	b2d3      	uxtb	r3, r2
 8003436:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8003438:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	f04f 0300 	mov.w	r3, #0
 8003444:	0c02      	lsrs	r2, r0, #16
 8003446:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800344a:	0c0b      	lsrs	r3, r1, #16
 800344c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800344e:	3102      	adds	r1, #2
 8003450:	6838      	ldr	r0, [r7, #0]
 8003452:	4401      	add	r1, r0
 8003454:	b2d3      	uxtb	r3, r2
 8003456:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8003458:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800345c:	f04f 0200 	mov.w	r2, #0
 8003460:	f04f 0300 	mov.w	r3, #0
 8003464:	0e02      	lsrs	r2, r0, #24
 8003466:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800346a:	0e0b      	lsrs	r3, r1, #24
 800346c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800346e:	3103      	adds	r1, #3
 8003470:	6838      	ldr	r0, [r7, #0]
 8003472:	4401      	add	r1, r0
 8003474:	b2d3      	uxtb	r3, r2
 8003476:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8003478:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	f04f 0300 	mov.w	r3, #0
 8003484:	000a      	movs	r2, r1
 8003486:	2300      	movs	r3, #0
 8003488:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800348a:	3104      	adds	r1, #4
 800348c:	6838      	ldr	r0, [r7, #0]
 800348e:	4401      	add	r1, r0
 8003490:	b2d3      	uxtb	r3, r2
 8003492:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8003494:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003498:	f04f 0200 	mov.w	r2, #0
 800349c:	f04f 0300 	mov.w	r3, #0
 80034a0:	0a0a      	lsrs	r2, r1, #8
 80034a2:	2300      	movs	r3, #0
 80034a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034a6:	3105      	adds	r1, #5
 80034a8:	6838      	ldr	r0, [r7, #0]
 80034aa:	4401      	add	r1, r0
 80034ac:	b2d3      	uxtb	r3, r2
 80034ae:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80034b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	f04f 0300 	mov.w	r3, #0
 80034bc:	0c0a      	lsrs	r2, r1, #16
 80034be:	2300      	movs	r3, #0
 80034c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034c2:	3106      	adds	r1, #6
 80034c4:	6838      	ldr	r0, [r7, #0]
 80034c6:	4401      	add	r1, r0
 80034c8:	b2d3      	uxtb	r3, r2
 80034ca:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80034cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80034d0:	f04f 0200 	mov.w	r2, #0
 80034d4:	f04f 0300 	mov.w	r3, #0
 80034d8:	0e0a      	lsrs	r2, r1, #24
 80034da:	2300      	movs	r3, #0
 80034dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034de:	3107      	adds	r1, #7
 80034e0:	6838      	ldr	r0, [r7, #0]
 80034e2:	4401      	add	r1, r0
 80034e4:	b2d3      	uxtb	r3, r2
 80034e6:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	3308      	adds	r3, #8
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80034f4:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80034f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034fe:	6838      	ldr	r0, [r7, #0]
 8003500:	4401      	add	r1, r0
 8003502:	b2d3      	uxtb	r3, r2
 8003504:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8003506:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	f04f 0300 	mov.w	r3, #0
 8003512:	0a02      	lsrs	r2, r0, #8
 8003514:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003518:	0a0b      	lsrs	r3, r1, #8
 800351a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800351c:	3101      	adds	r1, #1
 800351e:	6838      	ldr	r0, [r7, #0]
 8003520:	4401      	add	r1, r0
 8003522:	b2d3      	uxtb	r3, r2
 8003524:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8003526:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	f04f 0300 	mov.w	r3, #0
 8003532:	0c02      	lsrs	r2, r0, #16
 8003534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003538:	0c0b      	lsrs	r3, r1, #16
 800353a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800353c:	3102      	adds	r1, #2
 800353e:	6838      	ldr	r0, [r7, #0]
 8003540:	4401      	add	r1, r0
 8003542:	b2d3      	uxtb	r3, r2
 8003544:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8003546:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800354a:	f04f 0200 	mov.w	r2, #0
 800354e:	f04f 0300 	mov.w	r3, #0
 8003552:	0e02      	lsrs	r2, r0, #24
 8003554:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003558:	0e0b      	lsrs	r3, r1, #24
 800355a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800355c:	3103      	adds	r1, #3
 800355e:	6838      	ldr	r0, [r7, #0]
 8003560:	4401      	add	r1, r0
 8003562:	b2d3      	uxtb	r3, r2
 8003564:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8003566:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800356a:	f04f 0200 	mov.w	r2, #0
 800356e:	f04f 0300 	mov.w	r3, #0
 8003572:	000a      	movs	r2, r1
 8003574:	2300      	movs	r3, #0
 8003576:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003578:	3104      	adds	r1, #4
 800357a:	6838      	ldr	r0, [r7, #0]
 800357c:	4401      	add	r1, r0
 800357e:	b2d3      	uxtb	r3, r2
 8003580:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8003582:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	f04f 0300 	mov.w	r3, #0
 800358e:	0a0a      	lsrs	r2, r1, #8
 8003590:	2300      	movs	r3, #0
 8003592:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003594:	3105      	adds	r1, #5
 8003596:	6838      	ldr	r0, [r7, #0]
 8003598:	4401      	add	r1, r0
 800359a:	b2d3      	uxtb	r3, r2
 800359c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 800359e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035a2:	f04f 0200 	mov.w	r2, #0
 80035a6:	f04f 0300 	mov.w	r3, #0
 80035aa:	0c0a      	lsrs	r2, r1, #16
 80035ac:	2300      	movs	r3, #0
 80035ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035b0:	3106      	adds	r1, #6
 80035b2:	6838      	ldr	r0, [r7, #0]
 80035b4:	4401      	add	r1, r0
 80035b6:	b2d3      	uxtb	r3, r2
 80035b8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80035ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	f04f 0300 	mov.w	r3, #0
 80035c6:	0e0a      	lsrs	r2, r1, #24
 80035c8:	2300      	movs	r3, #0
 80035ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035cc:	3107      	adds	r1, #7
 80035ce:	6838      	ldr	r0, [r7, #0]
 80035d0:	4401      	add	r1, r0
 80035d2:	b2d3      	uxtb	r3, r2
 80035d4:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	3308      	adds	r3, #8
 80035da:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 80035dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80035de:	4618      	mov	r0, r3
 80035e0:	372c      	adds	r7, #44	; 0x2c
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80035ea:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80035ee:	b0eb      	sub	sp, #428	; 0x1ac
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 80035f6:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 80035fa:	2300      	movs	r3, #0
 80035fc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	f04f 0300 	mov.w	r3, #0
 8003608:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800360c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003610:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003614:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003618:	4413      	add	r3, r2
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2200      	movs	r2, #0
 8003620:	461c      	mov	r4, r3
 8003622:	4615      	mov	r5, r2
 8003624:	ea40 0804 	orr.w	r8, r0, r4
 8003628:	ea41 0905 	orr.w	r9, r1, r5
 800362c:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003630:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003634:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003638:	1c5a      	adds	r2, r3, #1
 800363a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800363e:	4413      	add	r3, r2
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2200      	movs	r2, #0
 8003646:	469a      	mov	sl, r3
 8003648:	4693      	mov	fp, r2
 800364a:	f04f 0200 	mov.w	r2, #0
 800364e:	f04f 0300 	mov.w	r3, #0
 8003652:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8003656:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800365a:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800365e:	ea40 0402 	orr.w	r4, r0, r2
 8003662:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8003666:	430b      	orrs	r3, r1
 8003668:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800366c:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8003670:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003674:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003678:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800367c:	1c9a      	adds	r2, r3, #2
 800367e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003682:	4413      	add	r3, r2
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2200      	movs	r2, #0
 800368a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800368e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8003692:	f04f 0200 	mov.w	r2, #0
 8003696:	f04f 0300 	mov.w	r3, #0
 800369a:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 800369e:	464c      	mov	r4, r9
 80036a0:	0423      	lsls	r3, r4, #16
 80036a2:	4644      	mov	r4, r8
 80036a4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80036a8:	4644      	mov	r4, r8
 80036aa:	0422      	lsls	r2, r4, #16
 80036ac:	ea40 0402 	orr.w	r4, r0, r2
 80036b0:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 80036b4:	430b      	orrs	r3, r1
 80036b6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80036ba:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 80036be:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80036c2:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80036c6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80036ca:	1cda      	adds	r2, r3, #3
 80036cc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80036d0:	4413      	add	r3, r2
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2200      	movs	r2, #0
 80036d8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80036dc:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80036e0:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80036e4:	4623      	mov	r3, r4
 80036e6:	0a1b      	lsrs	r3, r3, #8
 80036e8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80036ec:	4623      	mov	r3, r4
 80036ee:	061b      	lsls	r3, r3, #24
 80036f0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80036f4:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 80036f8:	4623      	mov	r3, r4
 80036fa:	4303      	orrs	r3, r0
 80036fc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003700:	462b      	mov	r3, r5
 8003702:	430b      	orrs	r3, r1
 8003704:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003708:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 800370c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003710:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003714:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003718:	1d1a      	adds	r2, r3, #4
 800371a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800371e:	4413      	add	r3, r2
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2200      	movs	r2, #0
 8003726:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800372a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800372e:	f04f 0200 	mov.w	r2, #0
 8003732:	f04f 0300 	mov.w	r3, #0
 8003736:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 800373a:	0023      	movs	r3, r4
 800373c:	2200      	movs	r2, #0
 800373e:	ea40 0402 	orr.w	r4, r0, r2
 8003742:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8003746:	430b      	orrs	r3, r1
 8003748:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800374c:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003750:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003754:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003758:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800375c:	1d5a      	adds	r2, r3, #5
 800375e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003762:	4413      	add	r3, r2
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2200      	movs	r2, #0
 800376a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800376e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8003772:	f04f 0200 	mov.w	r2, #0
 8003776:	f04f 0300 	mov.w	r3, #0
 800377a:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 800377e:	0223      	lsls	r3, r4, #8
 8003780:	2200      	movs	r2, #0
 8003782:	ea40 0402 	orr.w	r4, r0, r2
 8003786:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800378a:	430b      	orrs	r3, r1
 800378c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8003790:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8003794:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003798:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800379c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80037a0:	1d9a      	adds	r2, r3, #6
 80037a2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80037a6:	4413      	add	r3, r2
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2200      	movs	r2, #0
 80037ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80037b2:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80037b6:	f04f 0200 	mov.w	r2, #0
 80037ba:	f04f 0300 	mov.w	r3, #0
 80037be:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 80037c2:	0423      	lsls	r3, r4, #16
 80037c4:	2200      	movs	r2, #0
 80037c6:	ea40 0402 	orr.w	r4, r0, r2
 80037ca:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 80037ce:	430b      	orrs	r3, r1
 80037d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80037d4:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 80037d8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80037dc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80037e0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80037e4:	1dda      	adds	r2, r3, #7
 80037e6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80037ea:	4413      	add	r3, r2
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2200      	movs	r2, #0
 80037f2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80037f6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80037fa:	f04f 0200 	mov.w	r2, #0
 80037fe:	f04f 0300 	mov.w	r3, #0
 8003802:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8003806:	0623      	lsls	r3, r4, #24
 8003808:	2200      	movs	r2, #0
 800380a:	ea40 0402 	orr.w	r4, r0, r2
 800380e:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8003812:	430b      	orrs	r3, r1
 8003814:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003818:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 800381c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8003820:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003824:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003828:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 800382c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003830:	3308      	adds	r3, #8
 8003832:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8003836:	f04f 0200 	mov.w	r2, #0
 800383a:	f04f 0300 	mov.w	r3, #0
 800383e:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003842:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003846:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800384a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800384e:	4413      	add	r3, r2
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2200      	movs	r2, #0
 8003856:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800385a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800385e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8003862:	4623      	mov	r3, r4
 8003864:	4303      	orrs	r3, r0
 8003866:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800386a:	462b      	mov	r3, r5
 800386c:	430b      	orrs	r3, r1
 800386e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003872:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8003876:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800387a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800387e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003882:	1c5a      	adds	r2, r3, #1
 8003884:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003888:	4413      	add	r3, r2
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2200      	movs	r2, #0
 8003890:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003894:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8003898:	f04f 0200 	mov.w	r2, #0
 800389c:	f04f 0300 	mov.w	r3, #0
 80038a0:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 80038a4:	464c      	mov	r4, r9
 80038a6:	0223      	lsls	r3, r4, #8
 80038a8:	4644      	mov	r4, r8
 80038aa:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80038ae:	4644      	mov	r4, r8
 80038b0:	0222      	lsls	r2, r4, #8
 80038b2:	ea40 0402 	orr.w	r4, r0, r2
 80038b6:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 80038ba:	430b      	orrs	r3, r1
 80038bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80038c0:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80038c4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80038c8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80038cc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80038d0:	1c9a      	adds	r2, r3, #2
 80038d2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80038d6:	4413      	add	r3, r2
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2200      	movs	r2, #0
 80038de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80038e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80038e6:	f04f 0200 	mov.w	r2, #0
 80038ea:	f04f 0300 	mov.w	r3, #0
 80038ee:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80038f2:	464c      	mov	r4, r9
 80038f4:	0423      	lsls	r3, r4, #16
 80038f6:	4644      	mov	r4, r8
 80038f8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80038fc:	4644      	mov	r4, r8
 80038fe:	0422      	lsls	r2, r4, #16
 8003900:	ea40 0402 	orr.w	r4, r0, r2
 8003904:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8003908:	430b      	orrs	r3, r1
 800390a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800390e:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8003912:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003916:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800391a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800391e:	1cda      	adds	r2, r3, #3
 8003920:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003924:	4413      	add	r3, r2
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2200      	movs	r2, #0
 800392c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003930:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003934:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003938:	4623      	mov	r3, r4
 800393a:	0a1b      	lsrs	r3, r3, #8
 800393c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003940:	4623      	mov	r3, r4
 8003942:	061b      	lsls	r3, r3, #24
 8003944:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003948:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800394c:	4623      	mov	r3, r4
 800394e:	4303      	orrs	r3, r0
 8003950:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003954:	462b      	mov	r3, r5
 8003956:	430b      	orrs	r3, r1
 8003958:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800395c:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8003960:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003964:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003968:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800396c:	1d1a      	adds	r2, r3, #4
 800396e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003972:	4413      	add	r3, r2
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2200      	movs	r2, #0
 800397a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800397e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003982:	f04f 0200 	mov.w	r2, #0
 8003986:	f04f 0300 	mov.w	r3, #0
 800398a:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 800398e:	0023      	movs	r3, r4
 8003990:	2200      	movs	r2, #0
 8003992:	ea40 0402 	orr.w	r4, r0, r2
 8003996:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800399a:	430b      	orrs	r3, r1
 800399c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80039a0:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80039a4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80039a8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80039ac:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80039b0:	1d5a      	adds	r2, r3, #5
 80039b2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80039b6:	4413      	add	r3, r2
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2200      	movs	r2, #0
 80039be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039c2:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80039c6:	f04f 0200 	mov.w	r2, #0
 80039ca:	f04f 0300 	mov.w	r3, #0
 80039ce:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 80039d2:	0223      	lsls	r3, r4, #8
 80039d4:	2200      	movs	r2, #0
 80039d6:	ea40 0402 	orr.w	r4, r0, r2
 80039da:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80039de:	430b      	orrs	r3, r1
 80039e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80039e4:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80039e8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80039ec:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80039f0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80039f4:	1d9a      	adds	r2, r3, #6
 80039f6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80039fa:	4413      	add	r3, r2
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2200      	movs	r2, #0
 8003a02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a06:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a0a:	f04f 0200 	mov.w	r2, #0
 8003a0e:	f04f 0300 	mov.w	r3, #0
 8003a12:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8003a16:	0423      	lsls	r3, r4, #16
 8003a18:	2200      	movs	r2, #0
 8003a1a:	ea40 0402 	orr.w	r4, r0, r2
 8003a1e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003a22:	430b      	orrs	r3, r1
 8003a24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a28:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003a2c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003a30:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003a34:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a38:	1dda      	adds	r2, r3, #7
 8003a3a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a3e:	4413      	add	r3, r2
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2200      	movs	r2, #0
 8003a46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a4e:	f04f 0200 	mov.w	r2, #0
 8003a52:	f04f 0300 	mov.w	r3, #0
 8003a56:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8003a5a:	0623      	lsls	r3, r4, #24
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	ea40 0402 	orr.w	r4, r0, r2
 8003a62:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8003a66:	430b      	orrs	r3, r1
 8003a68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003a6c:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003a70:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8003a74:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003a78:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003a7c:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8003a80:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a84:	3308      	adds	r3, #8
 8003a86:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8003a8a:	f04f 0200 	mov.w	r2, #0
 8003a8e:	f04f 0300 	mov.w	r3, #0
 8003a92:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003a96:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003a9a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003a9e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003aa2:	4413      	add	r3, r2
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003aae:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003ab2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8003ab6:	4623      	mov	r3, r4
 8003ab8:	4303      	orrs	r3, r0
 8003aba:	67bb      	str	r3, [r7, #120]	; 0x78
 8003abc:	462b      	mov	r3, r5
 8003abe:	430b      	orrs	r3, r1
 8003ac0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ac2:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8003ac6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003aca:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003ace:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003ad2:	1c5a      	adds	r2, r3, #1
 8003ad4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003ad8:	4413      	add	r3, r2
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2200      	movs	r2, #0
 8003ae0:	673b      	str	r3, [r7, #112]	; 0x70
 8003ae2:	677a      	str	r2, [r7, #116]	; 0x74
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	f04f 0300 	mov.w	r3, #0
 8003aec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003af0:	464c      	mov	r4, r9
 8003af2:	0223      	lsls	r3, r4, #8
 8003af4:	4644      	mov	r4, r8
 8003af6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003afa:	4644      	mov	r4, r8
 8003afc:	0222      	lsls	r2, r4, #8
 8003afe:	ea40 0402 	orr.w	r4, r0, r2
 8003b02:	66bc      	str	r4, [r7, #104]	; 0x68
 8003b04:	430b      	orrs	r3, r1
 8003b06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b08:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003b0c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003b10:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003b14:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b18:	1c9a      	adds	r2, r3, #2
 8003b1a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b1e:	4413      	add	r3, r2
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2200      	movs	r2, #0
 8003b26:	663b      	str	r3, [r7, #96]	; 0x60
 8003b28:	667a      	str	r2, [r7, #100]	; 0x64
 8003b2a:	f04f 0200 	mov.w	r2, #0
 8003b2e:	f04f 0300 	mov.w	r3, #0
 8003b32:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b36:	464c      	mov	r4, r9
 8003b38:	0423      	lsls	r3, r4, #16
 8003b3a:	4644      	mov	r4, r8
 8003b3c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003b40:	4644      	mov	r4, r8
 8003b42:	0422      	lsls	r2, r4, #16
 8003b44:	ea40 0402 	orr.w	r4, r0, r2
 8003b48:	65bc      	str	r4, [r7, #88]	; 0x58
 8003b4a:	430b      	orrs	r3, r1
 8003b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b4e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003b52:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003b56:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003b5a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b5e:	1cda      	adds	r2, r3, #3
 8003b60:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b64:	4413      	add	r3, r2
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	653b      	str	r3, [r7, #80]	; 0x50
 8003b6e:	657a      	str	r2, [r7, #84]	; 0x54
 8003b70:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003b74:	4623      	mov	r3, r4
 8003b76:	0a1b      	lsrs	r3, r3, #8
 8003b78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b7a:	4623      	mov	r3, r4
 8003b7c:	061b      	lsls	r3, r3, #24
 8003b7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b80:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003b84:	4623      	mov	r3, r4
 8003b86:	4303      	orrs	r3, r0
 8003b88:	643b      	str	r3, [r7, #64]	; 0x40
 8003b8a:	462b      	mov	r3, r5
 8003b8c:	430b      	orrs	r3, r1
 8003b8e:	647b      	str	r3, [r7, #68]	; 0x44
 8003b90:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003b94:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003b98:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003b9c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003ba0:	1d1a      	adds	r2, r3, #4
 8003ba2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003ba6:	4413      	add	r3, r2
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2200      	movs	r2, #0
 8003bae:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bb0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003bb2:	f04f 0200 	mov.w	r2, #0
 8003bb6:	f04f 0300 	mov.w	r3, #0
 8003bba:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003bbc:	0023      	movs	r3, r4
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	ea40 0402 	orr.w	r4, r0, r2
 8003bc4:	633c      	str	r4, [r7, #48]	; 0x30
 8003bc6:	430b      	orrs	r3, r1
 8003bc8:	637b      	str	r3, [r7, #52]	; 0x34
 8003bca:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003bce:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003bd2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003bd6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003bda:	1d5a      	adds	r2, r3, #5
 8003bdc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003be0:	4413      	add	r3, r2
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2200      	movs	r2, #0
 8003be8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bec:	f04f 0200 	mov.w	r2, #0
 8003bf0:	f04f 0300 	mov.w	r3, #0
 8003bf4:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003bf6:	0223      	lsls	r3, r4, #8
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	ea40 0402 	orr.w	r4, r0, r2
 8003bfe:	623c      	str	r4, [r7, #32]
 8003c00:	430b      	orrs	r3, r1
 8003c02:	627b      	str	r3, [r7, #36]	; 0x24
 8003c04:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003c08:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003c0c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003c10:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c14:	3306      	adds	r3, #6
 8003c16:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003c1a:	4413      	add	r3, r2
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2200      	movs	r2, #0
 8003c22:	61bb      	str	r3, [r7, #24]
 8003c24:	61fa      	str	r2, [r7, #28]
 8003c26:	f04f 0200 	mov.w	r2, #0
 8003c2a:	f04f 0300 	mov.w	r3, #0
 8003c2e:	69bc      	ldr	r4, [r7, #24]
 8003c30:	0423      	lsls	r3, r4, #16
 8003c32:	2200      	movs	r2, #0
 8003c34:	ea40 0402 	orr.w	r4, r0, r2
 8003c38:	613c      	str	r4, [r7, #16]
 8003c3a:	430b      	orrs	r3, r1
 8003c3c:	617b      	str	r3, [r7, #20]
 8003c3e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003c42:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003c46:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003c4a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c4e:	3307      	adds	r3, #7
 8003c50:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003c54:	4413      	add	r3, r2
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	60bb      	str	r3, [r7, #8]
 8003c5e:	60fa      	str	r2, [r7, #12]
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	f04f 0300 	mov.w	r3, #0
 8003c68:	68bc      	ldr	r4, [r7, #8]
 8003c6a:	0623      	lsls	r3, r4, #24
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	ea40 0402 	orr.w	r4, r0, r2
 8003c72:	603c      	str	r4, [r7, #0]
 8003c74:	430b      	orrs	r3, r1
 8003c76:	607b      	str	r3, [r7, #4]
 8003c78:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003c7c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8003c80:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003c84:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8003c88:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8003c8c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c90:	3308      	adds	r3, #8
 8003c92:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8003c96:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003ca6:	4770      	bx	lr

08003ca8 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	4b03      	ldr	r3, [pc, #12]	; (8003cc0 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	08010578 	.word	0x08010578

08003cc4 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	4b03      	ldr	r3, [pc, #12]	; (8003cdc <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8003cce:	4618      	mov	r0, r3
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	08010590 	.word	0x08010590

08003ce0 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fe fa8e 	bl	800220c <_ZN3ros3MsgC1Ev>
 8003cf0:	4a08      	ldr	r2, [pc, #32]	; (8003d14 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	601a      	str	r2, [r3, #0]
      linear(),
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	3308      	adds	r3, #8
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7ff fada 	bl	80032b4 <_ZN13geometry_msgs7Vector3C1Ev>
      angular()
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	3328      	adds	r3, #40	; 0x28
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7ff fad5 	bl	80032b4 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3708      	adds	r7, #8
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	08010700 	.word	0x08010700

08003d18 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003d22:	2300      	movs	r3, #0
 8003d24:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f103 0008 	add.w	r0, r3, #8
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	4413      	add	r3, r2
 8003d32:	4619      	mov	r1, r3
 8003d34:	f7ff fae6 	bl	8003304 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	f7ff fad9 	bl	8003304 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003d52:	4602      	mov	r2, r0
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4413      	add	r3, r2
 8003d58:	60fb      	str	r3, [r7, #12]
      return offset;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
    }
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f103 0008 	add.w	r0, r3, #8
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	4619      	mov	r1, r3
 8003d80:	f7ff fc33 	bl	80035ea <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003d84:	4602      	mov	r2, r0
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	4413      	add	r3, r2
 8003d8a:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	4413      	add	r3, r2
 8003d98:	4619      	mov	r1, r3
 8003d9a:	f7ff fc26 	bl	80035ea <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4413      	add	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]
     return offset;
 8003da6:	68fb      	ldr	r3, [r7, #12]
    }
 8003da8:	4618      	mov	r0, r3
 8003daa:	3710      	adds	r7, #16
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	4b03      	ldr	r3, [pc, #12]	; (8003dc8 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8003dba:	4618      	mov	r0, r3
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	080105b4 	.word	0x080105b4

08003dcc <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	4b03      	ldr	r3, [pc, #12]	; (8003de4 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	080105c8 	.word	0x080105c8

08003de8 <_ZN8std_msgs4Int8C1Ev>:
  {
    public:
      typedef int8_t _data_type;
      _data_type data;

    Int8():
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
      data(0)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7fe fa0a 	bl	800220c <_ZN3ros3MsgC1Ev>
 8003df8:	4a05      	ldr	r2, [pc, #20]	; (8003e10 <_ZN8std_msgs4Int8C1Ev+0x28>)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	601a      	str	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	711a      	strb	r2, [r3, #4]
    {
    }
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4618      	mov	r0, r3
 8003e08:	3708      	adds	r7, #8
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	080106e8 	.word	0x080106e8

08003e14 <_ZNK8std_msgs4Int89serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	60fb      	str	r3, [r7, #12]
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003e28:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	4413      	add	r3, r2
 8003e30:	7a3a      	ldrb	r2, [r7, #8]
 8003e32:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	3301      	adds	r3, #1
 8003e38:	60fb      	str	r3, [r7, #12]
      return offset;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
    }
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3714      	adds	r7, #20
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <_ZN8std_msgs4Int811deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003e52:	2300      	movs	r3, #0
 8003e54:	60fb      	str	r3, [r7, #12]
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 8003e56:	2300      	movs	r3, #0
 8003e58:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003e5a:	7a3a      	ldrb	r2, [r7, #8]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6839      	ldr	r1, [r7, #0]
 8003e60:	440b      	add	r3, r1
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 8003e6a:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	3301      	adds	r3, #1
 8003e76:	60fb      	str	r3, [r7, #12]
     return offset;
 8003e78:	68fb      	ldr	r3, [r7, #12]
    }
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3714      	adds	r7, #20
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
	...

08003e88 <_ZN8std_msgs4Int87getTypeEv>:

    const char * getType(){ return "std_msgs/Int8"; };
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	4b03      	ldr	r3, [pc, #12]	; (8003ea0 <_ZN8std_msgs4Int87getTypeEv+0x18>)
 8003e92:	4618      	mov	r0, r3
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	080105ec 	.word	0x080105ec

08003ea4 <_ZN8std_msgs4Int86getMD5Ev>:
    const char * getMD5(){ return "27ffa0c9c4b8fb8492252bcad9e5c57b"; };
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	4b03      	ldr	r3, [pc, #12]	; (8003ebc <_ZN8std_msgs4Int86getMD5Ev+0x18>)
 8003eae:	4618      	mov	r0, r3
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	080105fc 	.word	0x080105fc

08003ec0 <_Z12vel_callbackRKN13geometry_msgs5TwistE>:


geometry_msgs::Twist speed;

void vel_callback(const geometry_msgs::Twist &msg)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
	Vx = msg.linear.x;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003ece:	490a      	ldr	r1, [pc, #40]	; (8003ef8 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x38>)
 8003ed0:	e9c1 2300 	strd	r2, r3, [r1]
	Vy = msg.linear.y;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003eda:	4908      	ldr	r1, [pc, #32]	; (8003efc <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x3c>)
 8003edc:	e9c1 2300 	strd	r2, r3, [r1]
	W = msg.angular.z;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003ee6:	4906      	ldr	r1, [pc, #24]	; (8003f00 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x40>)
 8003ee8:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	24000988 	.word	0x24000988
 8003efc:	24000990 	.word	0x24000990
 8003f00:	24000998 	.word	0x24000998

08003f04 <_Z12ori_callbackRKN8std_msgs4Int8E>:
void ori_callback(const std_msgs::Int8 &msg){
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
	flag = msg.data;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003f12:	461a      	mov	r2, r3
 8003f14:	4b03      	ldr	r3, [pc, #12]	; (8003f24 <_Z12ori_callbackRKN8std_msgs4Int8E+0x20>)
 8003f16:	601a      	str	r2, [r3, #0]
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	24000980 	.word	0x24000980

08003f28 <_Z3pubv>:
ros::Subscriber<geometry_msgs::Twist> sub_vel("/cmd_vel", vel_callback);
ros::Publisher pub_vel("/realspeed", &speed);
ros::Subscriber<std_msgs::Int8> sub_ori("/cmd_ori", ori_callback);
//ros::Subscriber<std_msgs::Int8> sub_laji("cmd_laji", laji_callback);
//ros::Publisher pub_laji("laji_ok", &speed);
void pub(void){
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
	speed.linear.x = rVx;
 8003f2c:	4b1a      	ldr	r3, [pc, #104]	; (8003f98 <_Z3pubv+0x70>)
 8003f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f32:	491a      	ldr	r1, [pc, #104]	; (8003f9c <_Z3pubv+0x74>)
 8003f34:	e9c1 2304 	strd	r2, r3, [r1, #16]
	speed.linear.y = rVy;
 8003f38:	4b19      	ldr	r3, [pc, #100]	; (8003fa0 <_Z3pubv+0x78>)
 8003f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3e:	4917      	ldr	r1, [pc, #92]	; (8003f9c <_Z3pubv+0x74>)
 8003f40:	e9c1 2306 	strd	r2, r3, [r1, #24]
	speed.angular.z = rW;
 8003f44:	4b17      	ldr	r3, [pc, #92]	; (8003fa4 <_Z3pubv+0x7c>)
 8003f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4a:	4914      	ldr	r1, [pc, #80]	; (8003f9c <_Z3pubv+0x74>)
 8003f4c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	if(everRun2 == 1){//already completed flipping board
 8003f50:	4b15      	ldr	r3, [pc, #84]	; (8003fa8 <_Z3pubv+0x80>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d107      	bne.n	8003f68 <_Z3pubv+0x40>
		speed.linear.z = 2;
 8003f58:	4910      	ldr	r1, [pc, #64]	; (8003f9c <_Z3pubv+0x74>)
 8003f5a:	f04f 0200 	mov.w	r2, #0
 8003f5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003f62:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8003f66:	e011      	b.n	8003f8c <_Z3pubv+0x64>
	}
	else if(everRun == 1){//already completed crossing obstacle
 8003f68:	4b10      	ldr	r3, [pc, #64]	; (8003fac <_Z3pubv+0x84>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d106      	bne.n	8003f7e <_Z3pubv+0x56>
		speed.linear.z = 1;
 8003f70:	490a      	ldr	r1, [pc, #40]	; (8003f9c <_Z3pubv+0x74>)
 8003f72:	f04f 0200 	mov.w	r2, #0
 8003f76:	4b0e      	ldr	r3, [pc, #56]	; (8003fb0 <_Z3pubv+0x88>)
 8003f78:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8003f7c:	e006      	b.n	8003f8c <_Z3pubv+0x64>
	}
	else{
		speed.linear.z = 0;
 8003f7e:	4907      	ldr	r1, [pc, #28]	; (8003f9c <_Z3pubv+0x74>)
 8003f80:	f04f 0200 	mov.w	r2, #0
 8003f84:	f04f 0300 	mov.w	r3, #0
 8003f88:	e9c1 2308 	strd	r2, r3, [r1, #32]
	}
	pub_vel.publish(&speed);
 8003f8c:	4903      	ldr	r1, [pc, #12]	; (8003f9c <_Z3pubv+0x74>)
 8003f8e:	4809      	ldr	r0, [pc, #36]	; (8003fb4 <_Z3pubv+0x8c>)
 8003f90:	f7fe ff89 	bl	8002ea6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8003f94:	bf00      	nop
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	240009a0 	.word	0x240009a0
 8003f9c:	24000a08 	.word	0x24000a08
 8003fa0:	240009a8 	.word	0x240009a8
 8003fa4:	240009b0 	.word	0x240009b0
 8003fa8:	2400202c 	.word	0x2400202c
 8003fac:	24002028 	.word	0x24002028
 8003fb0:	3ff00000 	.word	0x3ff00000
 8003fb4:	24001ff0 	.word	0x24001ff0

08003fb8 <_Z9ros_setupv>:
void ros_setup(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
    nh.initNode();
 8003fbc:	4808      	ldr	r0, [pc, #32]	; (8003fe0 <_Z9ros_setupv+0x28>)
 8003fbe:	f000 f9fd 	bl	80043bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
    nh.subscribe(sub_vel);
 8003fc2:	4908      	ldr	r1, [pc, #32]	; (8003fe4 <_Z9ros_setupv+0x2c>)
 8003fc4:	4806      	ldr	r0, [pc, #24]	; (8003fe0 <_Z9ros_setupv+0x28>)
 8003fc6:	f000 fa22 	bl	800440e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
    nh.advertise(pub_vel);
 8003fca:	4907      	ldr	r1, [pc, #28]	; (8003fe8 <_Z9ros_setupv+0x30>)
 8003fcc:	4804      	ldr	r0, [pc, #16]	; (8003fe0 <_Z9ros_setupv+0x28>)
 8003fce:	f000 fa49 	bl	8004464 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
    nh.subscribe(sub_ori);
 8003fd2:	4906      	ldr	r1, [pc, #24]	; (8003fec <_Z9ros_setupv+0x34>)
 8003fd4:	4802      	ldr	r0, [pc, #8]	; (8003fe0 <_Z9ros_setupv+0x28>)
 8003fd6:	f000 fa75 	bl	80044c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>
//  nh.subscribe(sub_laji);
//	nh.advertise(pub_laji);

}
 8003fda:	bf00      	nop
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	24000a50 	.word	0x24000a50
 8003fe4:	24001f90 	.word	0x24001f90
 8003fe8:	24001ff0 	.word	0x24001ff0
 8003fec:	24002004 	.word	0x24002004

08003ff0 <_Z8ros_loopv>:
void ros_loop(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
    nh.spinOnce();
 8003ff4:	4802      	ldr	r0, [pc, #8]	; (8004000 <_Z8ros_loopv+0x10>)
 8003ff6:	f000 fa90 	bl	800451a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8003ffa:	bf00      	nop
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	24000a50 	.word	0x24000a50

08004004 <_Z13Error_Handlerv>:
/* UART Communication */
void Error_Handler(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004008:	b672      	cpsid	i
}
 800400a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800400c:	e7fe      	b.n	800400c <_Z13Error_Handlerv+0x8>
	...

08004010 <_ZL19MX_USART1_UART_Initv>:
  }
  /* USER CODE END Error_Handler_Debug */
}

static void MX_USART1_UART_Init(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart1.Instance = USART1;
 8004014:	4b2c      	ldr	r3, [pc, #176]	; (80040c8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004016:	4a2d      	ldr	r2, [pc, #180]	; (80040cc <_ZL19MX_USART1_UART_Initv+0xbc>)
 8004018:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800401a:	4b2b      	ldr	r3, [pc, #172]	; (80040c8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800401c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8004020:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004022:	4b29      	ldr	r3, [pc, #164]	; (80040c8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004024:	2200      	movs	r2, #0
 8004026:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004028:	4b27      	ldr	r3, [pc, #156]	; (80040c8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800402a:	2200      	movs	r2, #0
 800402c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800402e:	4b26      	ldr	r3, [pc, #152]	; (80040c8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004030:	2200      	movs	r2, #0
 8004032:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004034:	4b24      	ldr	r3, [pc, #144]	; (80040c8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004036:	220c      	movs	r2, #12
 8004038:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800403a:	4b23      	ldr	r3, [pc, #140]	; (80040c8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800403c:	2200      	movs	r2, #0
 800403e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004040:	4b21      	ldr	r3, [pc, #132]	; (80040c8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004042:	2200      	movs	r2, #0
 8004044:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004046:	4b20      	ldr	r3, [pc, #128]	; (80040c8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004048:	2200      	movs	r2, #0
 800404a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800404c:	4b1e      	ldr	r3, [pc, #120]	; (80040c8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800404e:	2200      	movs	r2, #0
 8004050:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004052:	4b1d      	ldr	r3, [pc, #116]	; (80040c8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004054:	2200      	movs	r2, #0
 8004056:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004058:	481b      	ldr	r0, [pc, #108]	; (80040c8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800405a:	f009 fea3 	bl	800dda4 <HAL_UART_Init>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	bf14      	ite	ne
 8004064:	2301      	movne	r3, #1
 8004066:	2300      	moveq	r3, #0
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 800406e:	f7ff ffc9 	bl	8004004 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004072:	2100      	movs	r1, #0
 8004074:	4814      	ldr	r0, [pc, #80]	; (80040c8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004076:	f00b ffb5 	bl	800ffe4 <HAL_UARTEx_SetTxFifoThreshold>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	bf14      	ite	ne
 8004080:	2301      	movne	r3, #1
 8004082:	2300      	moveq	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 800408a:	f7ff ffbb 	bl	8004004 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800408e:	2100      	movs	r1, #0
 8004090:	480d      	ldr	r0, [pc, #52]	; (80040c8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004092:	f00b ffe5 	bl	8010060 <HAL_UARTEx_SetRxFifoThreshold>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	bf14      	ite	ne
 800409c:	2301      	movne	r3, #1
 800409e:	2300      	moveq	r3, #0
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 80040a6:	f7ff ffad 	bl	8004004 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80040aa:	4807      	ldr	r0, [pc, #28]	; (80040c8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80040ac:	f00b ff61 	bl	800ff72 <HAL_UARTEx_DisableFifoMode>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	bf14      	ite	ne
 80040b6:	2301      	movne	r3, #1
 80040b8:	2300      	moveq	r3, #0
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 80040c0:	f7ff ffa0 	bl	8004004 <_Z13Error_Handlerv>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80040c4:	bf00      	nop
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	24000764 	.word	0x24000764
 80040cc:	40011000 	.word	0x40011000

080040d0 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
    if(huart == &huart1){
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a09      	ldr	r2, [pc, #36]	; (8004100 <HAL_UART_ErrorCallback+0x30>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d10b      	bne.n	80040f8 <HAL_UART_ErrorCallback+0x28>
    // set velocity 0 before uart reinitialization


		HAL_UART_DeInit(&huart1);
 80040e0:	4807      	ldr	r0, [pc, #28]	; (8004100 <HAL_UART_ErrorCallback+0x30>)
 80040e2:	f009 feaf 	bl	800de44 <HAL_UART_DeInit>
		MX_USART1_UART_Init();
 80040e6:	f7ff ff93 	bl	8004010 <_ZL19MX_USART1_UART_Initv>
		nh.getHardware()->init();
 80040ea:	4806      	ldr	r0, [pc, #24]	; (8004104 <HAL_UART_ErrorCallback+0x34>)
 80040ec:	f000 fc8d 	bl	8004a0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80040f0:	4603      	mov	r3, r0
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fe ffd8 	bl	80030a8 <_ZN13STM32Hardware4initEv>
    }
}
 80040f8:	bf00      	nop
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	24000764 	.word	0x24000764
 8004104:	24000a50 	.word	0x24000a50

08004108 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8004110:	4805      	ldr	r0, [pc, #20]	; (8004128 <HAL_UART_TxCpltCallback+0x20>)
 8004112:	f000 fc7a 	bl	8004a0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8004116:	4603      	mov	r3, r0
 8004118:	4618      	mov	r0, r3
 800411a:	f7ff f80f 	bl	800313c <_ZN13STM32Hardware5flushEv>
}
 800411e:	bf00      	nop
 8004120:	3708      	adds	r7, #8
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	24000a50 	.word	0x24000a50

0800412c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8004136:	2300      	movs	r3, #0
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	e00c      	b.n	8004156 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	fa22 f103 	lsr.w	r1, r2, r3
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4413      	add	r3, r2
 800414c:	b2ca      	uxtb	r2, r1
 800414e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	3301      	adds	r3, #1
 8004154:	60fb      	str	r3, [r7, #12]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2b03      	cmp	r3, #3
 800415a:	d9ef      	bls.n	800413c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 800415c:	bf00      	nop
 800415e:	bf00      	nop
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 800416a:	b480      	push	{r7}
 800416c:	b085      	sub	sp, #20
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
 8004172:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800417a:	2300      	movs	r3, #0
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	e010      	b.n	80041a2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6839      	ldr	r1, [r7, #0]
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	440a      	add	r2, r1
 800418a:	7812      	ldrb	r2, [r2, #0]
 800418c:	4611      	mov	r1, r2
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	00d2      	lsls	r2, r2, #3
 8004192:	fa01 f202 	lsl.w	r2, r1, r2
 8004196:	431a      	orrs	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	3301      	adds	r3, #1
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2b03      	cmp	r3, #3
 80041a6:	d9eb      	bls.n	8004180 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 80041a8:	bf00      	nop
 80041aa:	bf00      	nop
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
	...

080041b8 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	4a04      	ldr	r2, [pc, #16]	; (80041d4 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4618      	mov	r0, r3
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	08010748 	.word	0x08010748

080041d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7ff ffe8 	bl	80041b8 <_ZN3ros15NodeHandleBase_C1Ev>
 80041e8:	4a47      	ldr	r2, [pc, #284]	; (8004308 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x130>)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	601a      	str	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	3304      	adds	r3, #4
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7fe ff38 	bl	8003068 <_ZN13STM32HardwareC1Ev>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	f241 5314 	movw	r3, #5396	; 0x1514
 800420a:	4413      	add	r3, r2
 800420c:	4618      	mov	r0, r3
 800420e:	f7fe fb71 	bl	80028f4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8004212:	2300      	movs	r3, #0
 8004214:	617b      	str	r3, [r7, #20]
 8004216:	e00a      	b.n	800422e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4413      	add	r3, r2
 8004224:	2200      	movs	r2, #0
 8004226:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	3301      	adds	r3, #1
 800422c:	617b      	str	r3, [r7, #20]
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	2b18      	cmp	r3, #24
 8004232:	d9f1      	bls.n	8004218 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x40>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004234:	2300      	movs	r3, #0
 8004236:	613b      	str	r3, [r7, #16]
 8004238:	e009      	b.n	800424e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004242:	2100      	movs	r1, #0
 8004244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	3301      	adds	r3, #1
 800424c:	613b      	str	r3, [r7, #16]
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	2b18      	cmp	r3, #24
 8004252:	d9f2      	bls.n	800423a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x62>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8004254:	2300      	movs	r3, #0
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	e00a      	b.n	8004270 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	441a      	add	r2, r3
 8004260:	f241 0324 	movw	r3, #4132	; 0x1024
 8004264:	4413      	add	r3, r2
 8004266:	2200      	movs	r2, #0
 8004268:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	3301      	adds	r3, #1
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004276:	d3f0      	bcc.n	800425a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x82>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8004278:	2300      	movs	r3, #0
 800427a:	60bb      	str	r3, [r7, #8]
 800427c:	e00a      	b.n	8004294 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xbc>
      message_out[i] = 0;
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	441a      	add	r2, r3
 8004284:	f241 2324 	movw	r3, #4644	; 0x1224
 8004288:	4413      	add	r3, r2
 800428a:	2200      	movs	r2, #0
 800428c:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	3301      	adds	r3, #1
 8004292:	60bb      	str	r3, [r7, #8]
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800429a:	d3f0      	bcc.n	800427e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa6>

    req_param_resp.ints_length = 0;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042a2:	461a      	mov	r2, r3
 80042a4:	2300      	movs	r3, #0
 80042a6:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042b0:	461a      	mov	r2, r3
 80042b2:	2300      	movs	r3, #0
 80042b4:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
    req_param_resp.floats_length = 0;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042be:	461a      	mov	r2, r3
 80042c0:	2300      	movs	r3, #0
 80042c2:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
    req_param_resp.floats = NULL;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042cc:	461a      	mov	r2, r3
 80042ce:	2300      	movs	r3, #0
 80042d0:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    req_param_resp.ints_length = 0;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042da:	461a      	mov	r2, r3
 80042dc:	2300      	movs	r3, #0
 80042de:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042e8:	461a      	mov	r2, r3
 80042ea:	2300      	movs	r3, #0
 80042ec:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520

    spin_timeout_ = 0;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042f6:	461a      	mov	r2, r3
 80042f8:	2300      	movs	r3, #0
 80042fa:	6213      	str	r3, [r2, #32]
  }
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4618      	mov	r0, r3
 8004300:	3718      	adds	r7, #24
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	080106d4 	.word	0x080106d4

0800430c <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	4a04      	ldr	r2, [pc, #16]	; (8004328 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	601a      	str	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4618      	mov	r0, r3
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	08010730 	.word	0x08010730

0800432c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
 8004338:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	4618      	mov	r0, r3
 800433e:	f7ff ffe5 	bl	800430c <_ZN3ros11Subscriber_C1Ev>
 8004342:	4a0b      	ldr	r2, [pc, #44]	; (8004370 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	601a      	str	r2, [r3, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	3310      	adds	r3, #16
 800434c:	4618      	mov	r0, r3
 800434e:	f7ff fcc7 	bl	8003ce0 <_ZN13geometry_msgs5TwistC1Ev>
    cb_(cb),
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	659a      	str	r2, [r3, #88]	; 0x58
    endpoint_(endpoint)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	683a      	ldr	r2, [r7, #0]
 800435c:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	609a      	str	r2, [r3, #8]
  };
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4618      	mov	r0, r3
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	080106bc 	.word	0x080106bc

08004374 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
 8004380:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	4618      	mov	r0, r3
 8004386:	f7ff ffc1 	bl	800430c <_ZN3ros11Subscriber_C1Ev>
 800438a:	4a0b      	ldr	r2, [pc, #44]	; (80043b8 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei+0x44>)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	601a      	str	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	330c      	adds	r3, #12
 8004394:	4618      	mov	r0, r3
 8004396:	f7ff fd27 	bl	8003de8 <_ZN8std_msgs4Int8C1Ev>
    cb_(cb),
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	619a      	str	r2, [r3, #24]
    topic_ = topic_name;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	609a      	str	r2, [r3, #8]
  };
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4618      	mov	r0, r3
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	080106a4 	.word	0x080106a4

080043bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	3304      	adds	r3, #4
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7fe fe6d 	bl	80030a8 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043d4:	461a      	mov	r2, r3
 80043d6:	2300      	movs	r3, #0
 80043d8:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
    bytes_ = 0;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043e2:	461a      	mov	r2, r3
 80043e4:	2300      	movs	r3, #0
 80043e6:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
    index_ = 0;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043f0:	461a      	mov	r2, r3
 80043f2:	2300      	movs	r3, #0
 80043f4:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
    topic_ = 0;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043fe:	461a      	mov	r2, r3
 8004400:	2300      	movs	r3, #0
 8004402:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
  };
 8004406:	bf00      	nop
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 800440e:	b480      	push	{r7}
 8004410:	b085      	sub	sp, #20
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
 8004416:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004418:	2300      	movs	r3, #0
 800441a:	60fb      	str	r3, [r7, #12]
 800441c:	e018      	b.n	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x42>
    {
      if (subscribers[i] == 0) // empty slot
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10d      	bne.n	800444a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x3c>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 800442e:	6839      	ldr	r1, [r7, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	605a      	str	r2, [r3, #4]
        return true;
 8004446:	2301      	movs	r3, #1
 8004448:	e006      	b.n	8004458 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	3301      	adds	r3, #1
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2b18      	cmp	r3, #24
 8004454:	dde3      	ble.n	800441e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x10>
      }
    }
    return false;
 8004456:	2300      	movs	r3, #0
  }
 8004458:	4618      	mov	r0, r3
 800445a:	3714      	adds	r7, #20
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800446e:	2300      	movs	r3, #0
 8004470:	60fb      	str	r3, [r7, #12]
 8004472:	e01d      	b.n	80044b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
      if (publishers[i] == 0) // empty slot
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4413      	add	r3, r2
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d111      	bne.n	80044aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
        publishers[i] = &p;
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	60da      	str	r2, [r3, #12]
        return true;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e006      	b.n	80044b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	3301      	adds	r3, #1
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2b18      	cmp	r3, #24
 80044b4:	ddde      	ble.n	8004474 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
    return false;
 80044b6:	2300      	movs	r3, #0
  }
 80044b8:	4618      	mov	r0, r3
 80044ba:	3714      	adds	r7, #20
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80044ce:	2300      	movs	r3, #0
 80044d0:	60fb      	str	r3, [r7, #12]
 80044d2:	e018      	b.n	8004506 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0x42>
      if (subscribers[i] == 0) // empty slot
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80044dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10d      	bne.n	8004500 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0x3c>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80044e4:	6839      	ldr	r1, [r7, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80044ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	605a      	str	r2, [r3, #4]
        return true;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e006      	b.n	800450e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	3301      	adds	r3, #1
 8004504:	60fb      	str	r3, [r7, #12]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2b18      	cmp	r3, #24
 800450a:	dde3      	ble.n	80044d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0x10>
    return false;
 800450c:	2300      	movs	r3, #0
  }
 800450e:	4618      	mov	r0, r3
 8004510:	3714      	adds	r7, #20
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 800451a:	b580      	push	{r7, lr}
 800451c:	b084      	sub	sp, #16
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
	  uint32_t c_time = hardware_.time();
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	3304      	adds	r3, #4
 8004526:	4618      	mov	r0, r3
 8004528:	f7fe feb8 	bl	800329c <_ZN13STM32Hardware4timeEv>
 800452c:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004534:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004540:	4293      	cmp	r3, r2
 8004542:	d905      	bls.n	8004550 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      configured_ = false;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
    if (mode_ != MODE_FIRST_FF)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004556:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00e      	beq.n	800457c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004564:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	429a      	cmp	r2, r3
 800456c:	d906      	bls.n	800457c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004574:	461a      	mov	r2, r3
 8004576:	2300      	movs	r3, #0
 8004578:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
      if (spin_timeout_ > 0)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d015      	beq.n	80045b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	3304      	adds	r3, #4
 800458c:	4618      	mov	r0, r3
 800458e:	f7fe fe85 	bl	800329c <_ZN13STM32Hardware4timeEv>
 8004592:	4602      	mov	r2, r0
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	1ad2      	subs	r2, r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	bf8c      	ite	hi
 80045a4:	2301      	movhi	r3, #1
 80045a6:	2300      	movls	r3, #0
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d002      	beq.n	80045b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
          return SPIN_TIMEOUT;
 80045ae:	f06f 0301 	mvn.w	r3, #1
 80045b2:	e226      	b.n	8004a02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      int data = hardware_.read();
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3304      	adds	r3, #4
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7fe fd91 	bl	80030e0 <_ZN13STM32Hardware4readEv>
 80045be:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f2c0 81ff 	blt.w	80049c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ac>
      checksum_ += data;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ce:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	; 0x4fc
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	4413      	add	r3, r2
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045dc:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045e6:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80045ea:	2b07      	cmp	r3, #7
 80045ec:	d12d      	bne.n	800464a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045f4:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 80045f8:	1c5a      	adds	r2, r3, #1
 80045fa:	6879      	ldr	r1, [r7, #4]
 80045fc:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8004600:	f8c1 24f8 	str.w	r2, [r1, #1272]	; 0x4f8
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	b2d1      	uxtb	r1, r2
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	441a      	add	r2, r3
 800460c:	f241 0324 	movw	r3, #4132	; 0x1024
 8004610:	4413      	add	r3, r2
 8004612:	460a      	mov	r2, r1
 8004614:	701a      	strb	r2, [r3, #0]
        bytes_--;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800461c:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8004620:	3b01      	subs	r3, #1
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004628:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004632:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1a0      	bne.n	800457c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004640:	461a      	mov	r2, r3
 8004642:	2308      	movs	r3, #8
 8004644:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004648:	e798      	b.n	800457c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004650:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004654:	2b00      	cmp	r3, #0
 8004656:	d130      	bne.n	80046ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2bff      	cmp	r3, #255	; 0xff
 800465c:	d112      	bne.n	8004684 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x16a>
          mode_++;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004664:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004668:	3301      	adds	r3, #1
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004670:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	3314      	adds	r3, #20
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800467e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
 8004682:	e77b      	b.n	800457c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	3304      	adds	r3, #4
 8004688:	4618      	mov	r0, r3
 800468a:	f7fe fe07 	bl	800329c <_ZN13STM32Hardware4timeEv>
 800468e:	4602      	mov	r2, r0
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	f241 3288 	movw	r2, #5000	; 0x1388
 8004698:	4293      	cmp	r3, r2
 800469a:	bf8c      	ite	hi
 800469c:	2301      	movhi	r3, #1
 800469e:	2300      	movls	r3, #0
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f43f af6a 	beq.w	800457c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          configured_ = false;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
          return SPIN_TIMEOUT;
 80046b4:	f06f 0301 	mvn.w	r3, #1
 80046b8:	e1a3      	b.n	8004a02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      else if (mode_ == MODE_PROTOCOL_VER)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046c0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d121      	bne.n	800470c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	2bfe      	cmp	r3, #254	; 0xfe
 80046cc:	d10b      	bne.n	80046e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1cc>
          mode_++;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046d4:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80046d8:	3301      	adds	r3, #1
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046e0:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80046e4:	e74a      	b.n	800457c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046ec:	461a      	mov	r2, r3
 80046ee:	2300      	movs	r3, #0
 80046f0:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          if (configured_ == false)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046fa:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f47f af3c 	bne.w	800457c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 f98c 	bl	8004a22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 800470a:	e737      	b.n	800457c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004712:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004716:	2b02      	cmp	r3, #2
 8004718:	d120      	bne.n	800475c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
        bytes_ = data;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004720:	461a      	mov	r2, r3
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        index_ = 0;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800472e:	461a      	mov	r2, r3
 8004730:	2300      	movs	r3, #0
 8004732:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
        mode_++;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800473c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004740:	3301      	adds	r3, #1
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004748:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte for calculating size checksum */
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004752:	461a      	mov	r2, r3
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 800475a:	e70f      	b.n	800457c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004762:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004766:	2b03      	cmp	r3, #3
 8004768:	d118      	bne.n	800479c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004770:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	021b      	lsls	r3, r3, #8
 8004778:	4413      	add	r3, r2
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004780:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        mode_++;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800478a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800478e:	3301      	adds	r3, #1
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004796:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 800479a:	e6ef      	b.n	800457c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047a2:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80047a6:	2b04      	cmp	r3, #4
 80047a8:	d11f      	bne.n	80047ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047b0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80047b4:	425a      	negs	r2, r3
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	b2d2      	uxtb	r2, r2
 80047ba:	bf58      	it	pl
 80047bc:	4253      	negpl	r3, r2
 80047be:	2bff      	cmp	r3, #255	; 0xff
 80047c0:	d10b      	bne.n	80047da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>
          mode_++;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047c8:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80047cc:	3301      	adds	r3, #1
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80047d4:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80047d8:	e6d0      	b.n	800457c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047e0:	461a      	mov	r2, r3
 80047e2:	2300      	movs	r3, #0
 80047e4:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80047e8:	e6c8      	b.n	800457c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047f0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80047f4:	2b05      	cmp	r3, #5
 80047f6:	d119      	bne.n	800482c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
        topic_ = data;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047fe:	461a      	mov	r2, r3
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_++;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800480c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004810:	3301      	adds	r3, #1
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004818:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte included in checksum */
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004822:	461a      	mov	r2, r3
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 800482a:	e6a7      	b.n	800457c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004832:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004836:	2b06      	cmp	r3, #6
 8004838:	d123      	bne.n	8004882 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>
        topic_ += data << 8;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004840:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	021b      	lsls	r3, r3, #8
 8004848:	4413      	add	r3, r2
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004850:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_ = MODE_MESSAGE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800485a:	461a      	mov	r2, r3
 800485c:	2307      	movs	r3, #7
 800485e:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if (bytes_ == 0)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004868:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 800486c:	2b00      	cmp	r3, #0
 800486e:	f47f ae85 	bne.w	800457c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004878:	461a      	mov	r2, r3
 800487a:	2308      	movs	r3, #8
 800487c:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004880:	e67c      	b.n	800457c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004888:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800488c:	2b08      	cmp	r3, #8
 800488e:	f47f ae75 	bne.w	800457c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004898:	461a      	mov	r2, r3
 800489a:	2300      	movs	r3, #0
 800489c:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if ((checksum_ % 256) == 255)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048a6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80048aa:	425a      	negs	r2, r3
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	b2d2      	uxtb	r2, r2
 80048b0:	bf58      	it	pl
 80048b2:	4253      	negpl	r3, r2
 80048b4:	2bff      	cmp	r3, #255	; 0xff
 80048b6:	f47f ae61 	bne.w	800457c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048c0:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d116      	bne.n	80048f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3dc>
            requestSyncTime();
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f8aa 	bl	8004a22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 f8c6 	bl	8004a60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048da:	461a      	mov	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
            last_sync_receive_time = c_time;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048e8:	461a      	mov	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
            return SPIN_ERR;
 80048f0:	f04f 33ff 	mov.w	r3, #4294967295
 80048f4:	e085      	b.n	8004a02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
          else if (topic_ == TopicInfo::ID_TIME)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048fc:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004900:	2b0a      	cmp	r3, #10
 8004902:	d108      	bne.n	8004916 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3fc>
            syncTime(message_in);
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	f241 0324 	movw	r3, #4132	; 0x1024
 800490a:	4413      	add	r3, r2
 800490c:	4619      	mov	r1, r3
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f988 	bl	8004c24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8004914:	e632      	b.n	800457c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800491c:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004920:	2b06      	cmp	r3, #6
 8004922:	d112      	bne.n	800494a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	f241 5314 	movw	r3, #5396	; 0x1514
 800492a:	4413      	add	r3, r2
 800492c:	6879      	ldr	r1, [r7, #4]
 800492e:	f241 0224 	movw	r2, #4132	; 0x1024
 8004932:	440a      	add	r2, r1
 8004934:	4611      	mov	r1, r2
 8004936:	4618      	mov	r0, r3
 8004938:	f7fe f911 	bl	8002b5e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 8004948:	e618      	b.n	800457c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004950:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004954:	2b0b      	cmp	r3, #11
 8004956:	d106      	bne.n	8004966 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44c>
            configured_ = false;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800495e:	2200      	movs	r2, #0
 8004960:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 8004964:	e60a      	b.n	800457c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800496c:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004970:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800497a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800497e:	2b00      	cmp	r3, #0
 8004980:	f43f adfc 	beq.w	800457c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800498a:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 800498e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004998:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049a2:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80049a6:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80049b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	6879      	ldr	r1, [r7, #4]
 80049ba:	f241 0324 	movw	r3, #4132	; 0x1024
 80049be:	440b      	add	r3, r1
 80049c0:	4619      	mov	r1, r3
 80049c2:	4790      	blx	r2
    while (true)
 80049c4:	e5da      	b.n	800457c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        break;
 80049c6:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049ce:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d014      	beq.n	8004a00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049dc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d909      	bls.n	8004a00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
      requestSyncTime();
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 f818 	bl	8004a22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049f8:	461a      	mov	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    return SPIN_OK;
 8004a00:	2300      	movs	r3, #0
  }
 8004a02:	4618      	mov	r0, r3
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:
  Hardware* getHardware()
 8004a0a:	b480      	push	{r7}
 8004a0c:	b083      	sub	sp, #12
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
    return &hardware_;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	3304      	adds	r3, #4
  }
 8004a16:	4618      	mov	r0, r3
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b086      	sub	sp, #24
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8004a2a:	f107 030c 	add.w	r3, r7, #12
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7fd fbfc 	bl	800222c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f107 020c 	add.w	r2, r7, #12
 8004a3e:	210a      	movs	r1, #10
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	4798      	blx	r3
    rt_time = hardware_.time();
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	3304      	adds	r3, #4
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7fe fc27 	bl	800329c <_ZN13STM32Hardware4timeEv>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a56:	615a      	str	r2, [r3, #20]
  }
 8004a58:	bf00      	nop
 8004a5a:	3718      	adds	r7, #24
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8004a60:	b590      	push	{r4, r7, lr}
 8004a62:	b08b      	sub	sp, #44	; 0x2c
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004a68:	f107 030c 	add.w	r3, r7, #12
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7fd fccd 	bl	800240c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004a72:	2300      	movs	r3, #0
 8004a74:	627b      	str	r3, [r7, #36]	; 0x24
 8004a76:	e062      	b.n	8004b3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7c:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d056      	beq.n	8004b38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8e:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4413      	add	r3, r2
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4413      	add	r3, r2
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	4413      	add	r3, r2
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	6859      	ldr	r1, [r3, #4]
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4413      	add	r3, r2
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	3308      	adds	r3, #8
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4608      	mov	r0, r1
 8004ad8:	4798      	blx	r3
 8004ada:	4603      	mov	r3, r0
 8004adc:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4413      	add	r3, r2
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	6859      	ldr	r1, [r3, #4]
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4413      	add	r3, r2
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	330c      	adds	r3, #12
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4608      	mov	r0, r1
 8004b06:	4798      	blx	r3
 8004b08:	4603      	mov	r3, r0
 8004b0a:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004b0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b10:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681c      	ldr	r4, [r3, #0]
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4413      	add	r3, r2
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7fe f9d1 	bl	8002ece <_ZN3ros9Publisher15getEndpointTypeEv>
 8004b2c:	4601      	mov	r1, r0
 8004b2e:	f107 030c 	add.w	r3, r7, #12
 8004b32:	461a      	mov	r2, r3
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b40:	2b18      	cmp	r3, #24
 8004b42:	dd99      	ble.n	8004a78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004b44:	2300      	movs	r3, #0
 8004b46:	627b      	str	r3, [r7, #36]	; 0x24
 8004b48:	e05e      	b.n	8004c08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b4e:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d053      	beq.n	8004c02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b5e:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b70:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b80:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b8c:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	3308      	adds	r3, #8
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4608      	mov	r0, r1
 8004b9c:	4798      	blx	r3
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ba6:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004baa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bb2:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	330c      	adds	r3, #12
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4608      	mov	r0, r1
 8004bc2:	4798      	blx	r3
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8004bc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bcc:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681c      	ldr	r4, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bd8:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004bdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004be4:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	3304      	adds	r3, #4
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4608      	mov	r0, r1
 8004bf4:	4798      	blx	r3
 8004bf6:	4601      	mov	r1, r0
 8004bf8:	f107 030c 	add.w	r3, r7, #12
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c04:	3301      	adds	r3, #1
 8004c06:	627b      	str	r3, [r7, #36]	; 0x24
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	2b18      	cmp	r3, #24
 8004c0c:	dd9d      	ble.n	8004b4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
  }
 8004c1a:	bf00      	nop
 8004c1c:	372c      	adds	r7, #44	; 0x2c
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd90      	pop	{r4, r7, pc}
	...

08004c24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004c2e:	f107 0308 	add.w	r3, r7, #8
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7fd fafa 	bl	800222c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	3304      	adds	r3, #4
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7fe fb2d 	bl	800329c <_ZN13STM32Hardware4timeEv>
 8004c42:	4602      	mov	r2, r0
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004c50:	f107 0308 	add.w	r3, r7, #8
 8004c54:	6839      	ldr	r1, [r7, #0]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7fd fb58 	bl	800230c <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	4915      	ldr	r1, [pc, #84]	; (8004cb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004c62:	fba1 1303 	umull	r1, r3, r1, r3
 8004c66:	099b      	lsrs	r3, r3, #6
 8004c68:	4413      	add	r3, r2
 8004c6a:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004c6c:	6939      	ldr	r1, [r7, #16]
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	4b11      	ldr	r3, [pc, #68]	; (8004cb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004c72:	fba3 0302 	umull	r0, r3, r3, r2
 8004c76:	099b      	lsrs	r3, r3, #6
 8004c78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c7c:	fb00 f303 	mul.w	r3, r0, r3
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	4a0e      	ldr	r2, [pc, #56]	; (8004cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 8004c84:	fb02 f303 	mul.w	r3, r2, r3
 8004c88:	440b      	add	r3, r1
 8004c8a:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004c8c:	f107 0308 	add.w	r3, r7, #8
 8004c90:	3304      	adds	r3, #4
 8004c92:	4619      	mov	r1, r3
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 f8bf 	bl	8004e18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fe fafc 	bl	800329c <_ZN13STM32Hardware4timeEv>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cac:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
  }
 8004cb0:	bf00      	nop
 8004cb2:	3718      	adds	r7, #24
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	10624dd3 	.word	0x10624dd3
 8004cbc:	000f4240 	.word	0x000f4240

08004cc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b088      	sub	sp, #32
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	2b63      	cmp	r3, #99	; 0x63
 8004cd0:	dd0b      	ble.n	8004cea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cd8:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8004cdc:	f083 0301 	eor.w	r3, r3, #1
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d001      	beq.n	8004cea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	e090      	b.n	8004e0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	68f9      	ldr	r1, [r7, #12]
 8004cf2:	f241 2324 	movw	r3, #4644	; 0x1224
 8004cf6:	440b      	add	r3, r1
 8004cf8:	3307      	adds	r3, #7
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	4790      	blx	r2
 8004d00:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d08:	22ff      	movs	r2, #255	; 0xff
 8004d0a:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
    message_out[1] = PROTOCOL_VER;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d14:	22fe      	movs	r2, #254	; 0xfe
 8004d16:	f883 2225 	strb.w	r2, [r3, #549]	; 0x225
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d24:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	0a1b      	lsrs	r3, r3, #8
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d38:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d42:	f893 2226 	ldrb.w	r2, [r3, #550]	; 0x226
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d4c:	f893 3227 	ldrb.w	r3, [r3, #551]	; 0x227
 8004d50:	4413      	add	r3, r2
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	43db      	mvns	r3, r3
 8004d56:	b2da      	uxtb	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d5e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	b2da      	uxtb	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d6c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	b21b      	sxth	r3, r3
 8004d74:	121b      	asrs	r3, r3, #8
 8004d76:	b21b      	sxth	r3, r3
 8004d78:	b2da      	uxtb	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d80:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a

    /* calculate checksum */
    int chk = 0;
 8004d84:	2300      	movs	r3, #0
 8004d86:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004d88:	2305      	movs	r3, #5
 8004d8a:	61bb      	str	r3, [r7, #24]
 8004d8c:	e00d      	b.n	8004daa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xea>
      chk += message_out[i];
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	441a      	add	r2, r3
 8004d94:	f241 2324 	movw	r3, #4644	; 0x1224
 8004d98:	4413      	add	r3, r2
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	4413      	add	r3, r2
 8004da2:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	3301      	adds	r3, #1
 8004da8:	61bb      	str	r3, [r7, #24]
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	3306      	adds	r3, #6
 8004dae:	69ba      	ldr	r2, [r7, #24]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	ddec      	ble.n	8004d8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xce>
    l += 7;
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	3307      	adds	r3, #7
 8004db8:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	425a      	negs	r2, r3
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	b2d2      	uxtb	r2, r2
 8004dc2:	bf58      	it	pl
 8004dc4:	4253      	negpl	r3, r2
 8004dc6:	b2da      	uxtb	r2, r3
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	1c59      	adds	r1, r3, #1
 8004dcc:	6179      	str	r1, [r7, #20]
 8004dce:	43d2      	mvns	r2, r2
 8004dd0:	b2d1      	uxtb	r1, r2
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	441a      	add	r2, r3
 8004dd6:	f241 2324 	movw	r3, #4644	; 0x1224
 8004dda:	4413      	add	r3, r2
 8004ddc:	460a      	mov	r2, r1
 8004dde:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004de6:	dc0b      	bgt.n	8004e00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	1d18      	adds	r0, r3, #4
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	f241 2324 	movw	r3, #4644	; 0x1224
 8004df2:	4413      	add	r3, r2
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	4619      	mov	r1, r3
 8004df8:	f7fe fa06 	bl	8003208 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	e005      	b.n	8004e0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004e00:	4904      	ldr	r1, [pc, #16]	; (8004e14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x154>)
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f000 f84c 	bl	8004ea0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004e08:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3720      	adds	r7, #32
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	08010620 	.word	0x08010620

08004e18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	3304      	adds	r3, #4
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7fe fa38 	bl	800329c <_ZN13STM32Hardware4timeEv>
 8004e2c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	4917      	ldr	r1, [pc, #92]	; (8004e94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004e36:	fba1 1303 	umull	r1, r3, r1, r3
 8004e3a:	099b      	lsrs	r3, r3, #6
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004e46:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	6859      	ldr	r1, [r3, #4]
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	4b11      	ldr	r3, [pc, #68]	; (8004e94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004e50:	fba3 0302 	umull	r0, r3, r3, r2
 8004e54:	099b      	lsrs	r3, r3, #6
 8004e56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e5a:	fb00 f303 	mul.w	r3, r0, r3
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	4a0d      	ldr	r2, [pc, #52]	; (8004e98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x80>)
 8004e62:	fb02 f303 	mul.w	r3, r2, r3
 8004e66:	1aca      	subs	r2, r1, r3
 8004e68:	4b0c      	ldr	r3, [pc, #48]	; (8004e9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x84>)
 8004e6a:	4413      	add	r3, r2
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004e72:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	f241 0318 	movw	r3, #4120	; 0x1018
 8004e7a:	4413      	add	r3, r2
 8004e7c:	6879      	ldr	r1, [r7, #4]
 8004e7e:	f241 021c 	movw	r2, #4124	; 0x101c
 8004e82:	440a      	add	r2, r1
 8004e84:	4611      	mov	r1, r2
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7fb fbc8 	bl	800061c <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004e8c:	bf00      	nop
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	10624dd3 	.word	0x10624dd3
 8004e98:	000f4240 	.word	0x000f4240
 8004e9c:	3b9aca00 	.word	0x3b9aca00

08004ea0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	2103      	movs	r1, #3
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f804 	bl	8004ebc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004eb4:	bf00      	nop
 8004eb6:	3708      	adds	r7, #8
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b088      	sub	sp, #32
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	607a      	str	r2, [r7, #4]
 8004ec8:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004eca:	f107 0314 	add.w	r3, r7, #20
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7fd fc60 	bl	8002794 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004ed4:	7afb      	ldrb	r3, [r7, #11]
 8004ed6:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f107 0214 	add.w	r2, r7, #20
 8004ee6:	2107      	movs	r1, #7
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	4798      	blx	r3
  }
 8004eec:	bf00      	nop
 8004eee:	3720      	adds	r7, #32
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <_Z41__static_initialization_and_destruction_0ii>:
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d11c      	bne.n	8004f3e <_Z41__static_initialization_and_destruction_0ii+0x4a>
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d117      	bne.n	8004f3e <_Z41__static_initialization_and_destruction_0ii+0x4a>
geometry_msgs::Twist speed;
 8004f0e:	480e      	ldr	r0, [pc, #56]	; (8004f48 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004f10:	f7fe fee6 	bl	8003ce0 <_ZN13geometry_msgs5TwistC1Ev>
ros::NodeHandle nh;
 8004f14:	480d      	ldr	r0, [pc, #52]	; (8004f4c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8004f16:	f7ff f95f 	bl	80041d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<geometry_msgs::Twist> sub_vel("/cmd_vel", vel_callback);
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	4a0c      	ldr	r2, [pc, #48]	; (8004f50 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004f1e:	490d      	ldr	r1, [pc, #52]	; (8004f54 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8004f20:	480d      	ldr	r0, [pc, #52]	; (8004f58 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8004f22:	f7ff fa03 	bl	800432c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Publisher pub_vel("/realspeed", &speed);
 8004f26:	2300      	movs	r3, #0
 8004f28:	4a07      	ldr	r2, [pc, #28]	; (8004f48 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004f2a:	490c      	ldr	r1, [pc, #48]	; (8004f5c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8004f2c:	480c      	ldr	r0, [pc, #48]	; (8004f60 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8004f2e:	f7fd ffa3 	bl	8002e78 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Int8> sub_ori("/cmd_ori", ori_callback);
 8004f32:	2301      	movs	r3, #1
 8004f34:	4a0b      	ldr	r2, [pc, #44]	; (8004f64 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8004f36:	490c      	ldr	r1, [pc, #48]	; (8004f68 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004f38:	480c      	ldr	r0, [pc, #48]	; (8004f6c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8004f3a:	f7ff fa1b 	bl	8004374 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>
}
 8004f3e:	bf00      	nop
 8004f40:	3708      	adds	r7, #8
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	24000a08 	.word	0x24000a08
 8004f4c:	24000a50 	.word	0x24000a50
 8004f50:	08003ec1 	.word	0x08003ec1
 8004f54:	0801065c 	.word	0x0801065c
 8004f58:	24001f90 	.word	0x24001f90
 8004f5c:	08010668 	.word	0x08010668
 8004f60:	24001ff0 	.word	0x24001ff0
 8004f64:	08003f05 	.word	0x08003f05
 8004f68:	08010674 	.word	0x08010674
 8004f6c:	24002004 	.word	0x24002004

08004f70 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	330c      	adds	r3, #12
 8004f7e:	6839      	ldr	r1, [r7, #0]
 8004f80:	4618      	mov	r0, r3
 8004f82:	f7fe ff61 	bl	8003e48 <_ZN8std_msgs4Int811deserializeEPh>
    this->cb_(msg);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	320c      	adds	r2, #12
 8004f8e:	4610      	mov	r0, r2
 8004f90:	4798      	blx	r3
  }
 8004f92:	bf00      	nop
 8004f94:	3708      	adds	r7, #8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <_ZN3ros10SubscriberIN8std_msgs4Int8EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8004f9a:	b480      	push	{r7}
 8004f9c:	b083      	sub	sp, #12
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	699b      	ldr	r3, [r3, #24]
  }
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b082      	sub	sp, #8
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	330c      	adds	r3, #12
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7fe ff62 	bl	8003e88 <_ZN8std_msgs4Int87getTypeEv>
 8004fc4:	4603      	mov	r3, r0
  }
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <_ZN3ros10SubscriberIN8std_msgs4Int8EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b082      	sub	sp, #8
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	330c      	adds	r3, #12
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7fe ff62 	bl	8003ea4 <_ZN8std_msgs4Int86getMD5Ev>
 8004fe0:	4603      	mov	r3, r0
  }
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b082      	sub	sp, #8
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
 8004ff2:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	3310      	adds	r3, #16
 8004ff8:	6839      	ldr	r1, [r7, #0]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7fe feb2 	bl	8003d64 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	3210      	adds	r2, #16
 8005008:	4610      	mov	r0, r2
 800500a:	4798      	blx	r3
  }
 800500c:	bf00      	nop
 800500e:	3708      	adds	r7, #8
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
    return endpoint_;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8005020:	4618      	mov	r0, r3
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	3310      	adds	r3, #16
 8005038:	4618      	mov	r0, r3
 800503a:	f7fe feb9 	bl	8003db0 <_ZN13geometry_msgs5Twist7getTypeEv>
 800503e:	4603      	mov	r3, r0
  }
 8005040:	4618      	mov	r0, r3
 8005042:	3708      	adds	r7, #8
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	3310      	adds	r3, #16
 8005054:	4618      	mov	r0, r3
 8005056:	f7fe feb9 	bl	8003dcc <_ZN13geometry_msgs5Twist6getMD5Ev>
 800505a:	4603      	mov	r3, r0
  }
 800505c:	4618      	mov	r0, r3
 800505e:	3708      	adds	r7, #8
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
    return configured_;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005072:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
  };
 8005076:	4618      	mov	r0, r3
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <_GLOBAL__sub_I_speed>:
 8005082:	b580      	push	{r7, lr}
 8005084:	af00      	add	r7, sp, #0
 8005086:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800508a:	2001      	movs	r0, #1
 800508c:	f7ff ff32 	bl	8004ef4 <_Z41__static_initialization_and_destruction_0ii>
 8005090:	bd80      	pop	{r7, pc}
 8005092:	0000      	movs	r0, r0
 8005094:	0000      	movs	r0, r0
	...

08005098 <_Z6scriptv>:
int everRun2 = 0;

//void pusher_reset(){
//	script_pusher(-15,-15);
//}
void script(){
 8005098:	b580      	push	{r7, lr}
 800509a:	af00      	add	r7, sp, #0
	if(script_a.scriptrun == 1){
 800509c:	4bb8      	ldr	r3, [pc, #736]	; (8005380 <_Z6scriptv+0x2e8>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	f040 810f 	bne.w	80052c4 <_Z6scriptv+0x22c>
		if(delay_start == 0){
 80050a6:	4bb7      	ldr	r3, [pc, #732]	; (8005384 <_Z6scriptv+0x2ec>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d110      	bne.n	80050d0 <_Z6scriptv+0x38>
			script_wheel(5,0,0);
 80050ae:	ed9f 2bb2 	vldr	d2, [pc, #712]	; 8005378 <_Z6scriptv+0x2e0>
 80050b2:	ed9f 1bb1 	vldr	d1, [pc, #708]	; 8005378 <_Z6scriptv+0x2e0>
 80050b6:	eeb1 0b04 	vmov.f64	d0, #20	; 0x40a00000  5.0
 80050ba:	f000 f9e1 	bl	8005480 <_Z12script_wheelddd>
			script_pusher(5,5);
 80050be:	eeb1 1b04 	vmov.f64	d1, #20	; 0x40a00000  5.0
 80050c2:	eeb1 0b04 	vmov.f64	d0, #20	; 0x40a00000  5.0
 80050c6:	f7fd f80f 	bl	80020e8 <_Z13script_pusherdd>
			delay_start = 1;
 80050ca:	4bae      	ldr	r3, [pc, #696]	; (8005384 <_Z6scriptv+0x2ec>)
 80050cc:	2201      	movs	r2, #1
 80050ce:	601a      	str	r2, [r3, #0]
		}
		if(delay == 250 && delay_start == 1){
 80050d0:	4bad      	ldr	r3, [pc, #692]	; (8005388 <_Z6scriptv+0x2f0>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2bfa      	cmp	r3, #250	; 0xfa
 80050d6:	d114      	bne.n	8005102 <_Z6scriptv+0x6a>
 80050d8:	4baa      	ldr	r3, [pc, #680]	; (8005384 <_Z6scriptv+0x2ec>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d110      	bne.n	8005102 <_Z6scriptv+0x6a>
			script_wheel(0,0,0);
 80050e0:	ed9f 2ba5 	vldr	d2, [pc, #660]	; 8005378 <_Z6scriptv+0x2e0>
 80050e4:	ed9f 1ba4 	vldr	d1, [pc, #656]	; 8005378 <_Z6scriptv+0x2e0>
 80050e8:	ed9f 0ba3 	vldr	d0, [pc, #652]	; 8005378 <_Z6scriptv+0x2e0>
 80050ec:	f000 f9c8 	bl	8005480 <_Z12script_wheelddd>
			script_pusher(13,5);
 80050f0:	eeb1 1b04 	vmov.f64	d1, #20	; 0x40a00000  5.0
 80050f4:	eeb2 0b0a 	vmov.f64	d0, #42	; 0x41500000  13.0
 80050f8:	f7fc fff6 	bl	80020e8 <_Z13script_pusherdd>
			delay_start = 2;
 80050fc:	4ba1      	ldr	r3, [pc, #644]	; (8005384 <_Z6scriptv+0x2ec>)
 80050fe:	2202      	movs	r2, #2
 8005100:	601a      	str	r2, [r3, #0]
		}
		if(delay == 550 && delay_start == 2){
 8005102:	4ba1      	ldr	r3, [pc, #644]	; (8005388 <_Z6scriptv+0x2f0>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f240 2226 	movw	r2, #550	; 0x226
 800510a:	4293      	cmp	r3, r2
 800510c:	d10e      	bne.n	800512c <_Z6scriptv+0x94>
 800510e:	4b9d      	ldr	r3, [pc, #628]	; (8005384 <_Z6scriptv+0x2ec>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2b02      	cmp	r3, #2
 8005114:	d10a      	bne.n	800512c <_Z6scriptv+0x94>
			script_wheel(20,0,0);
 8005116:	ed9f 2b98 	vldr	d2, [pc, #608]	; 8005378 <_Z6scriptv+0x2e0>
 800511a:	ed9f 1b97 	vldr	d1, [pc, #604]	; 8005378 <_Z6scriptv+0x2e0>
 800511e:	eeb3 0b04 	vmov.f64	d0, #52	; 0x41a00000  20.0
 8005122:	f000 f9ad 	bl	8005480 <_Z12script_wheelddd>
			delay_start = 3;
 8005126:	4b97      	ldr	r3, [pc, #604]	; (8005384 <_Z6scriptv+0x2ec>)
 8005128:	2203      	movs	r2, #3
 800512a:	601a      	str	r2, [r3, #0]
		}
		if(delay == 850 && delay_start == 3){
 800512c:	4b96      	ldr	r3, [pc, #600]	; (8005388 <_Z6scriptv+0x2f0>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f240 3252 	movw	r2, #850	; 0x352
 8005134:	4293      	cmp	r3, r2
 8005136:	d114      	bne.n	8005162 <_Z6scriptv+0xca>
 8005138:	4b92      	ldr	r3, [pc, #584]	; (8005384 <_Z6scriptv+0x2ec>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2b03      	cmp	r3, #3
 800513e:	d110      	bne.n	8005162 <_Z6scriptv+0xca>
			script_wheel(0,0,0);
 8005140:	ed9f 2b8d 	vldr	d2, [pc, #564]	; 8005378 <_Z6scriptv+0x2e0>
 8005144:	ed9f 1b8c 	vldr	d1, [pc, #560]	; 8005378 <_Z6scriptv+0x2e0>
 8005148:	ed9f 0b8b 	vldr	d0, [pc, #556]	; 8005378 <_Z6scriptv+0x2e0>
 800514c:	f000 f998 	bl	8005480 <_Z12script_wheelddd>
			script_pusher(-2,13);
 8005150:	eeb2 1b0a 	vmov.f64	d1, #42	; 0x41500000  13.0
 8005154:	eeb8 0b00 	vmov.f64	d0, #128	; 0xc0000000 -2.0
 8005158:	f7fc ffc6 	bl	80020e8 <_Z13script_pusherdd>
			delay_start = 4;
 800515c:	4b89      	ldr	r3, [pc, #548]	; (8005384 <_Z6scriptv+0x2ec>)
 800515e:	2204      	movs	r2, #4
 8005160:	601a      	str	r2, [r3, #0]
		}
		if(delay == 1100 && delay_start == 4){
 8005162:	4b89      	ldr	r3, [pc, #548]	; (8005388 <_Z6scriptv+0x2f0>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f240 424c 	movw	r2, #1100	; 0x44c
 800516a:	4293      	cmp	r3, r2
 800516c:	d114      	bne.n	8005198 <_Z6scriptv+0x100>
 800516e:	4b85      	ldr	r3, [pc, #532]	; (8005384 <_Z6scriptv+0x2ec>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2b04      	cmp	r3, #4
 8005174:	d110      	bne.n	8005198 <_Z6scriptv+0x100>
			script_wheel(0,0,0);
 8005176:	ed9f 2b80 	vldr	d2, [pc, #512]	; 8005378 <_Z6scriptv+0x2e0>
 800517a:	ed9f 1b7f 	vldr	d1, [pc, #508]	; 8005378 <_Z6scriptv+0x2e0>
 800517e:	ed9f 0b7e 	vldr	d0, [pc, #504]	; 8005378 <_Z6scriptv+0x2e0>
 8005182:	f000 f97d 	bl	8005480 <_Z12script_wheelddd>
			script_pusher(-2,13);
 8005186:	eeb2 1b0a 	vmov.f64	d1, #42	; 0x41500000  13.0
 800518a:	eeb8 0b00 	vmov.f64	d0, #128	; 0xc0000000 -2.0
 800518e:	f7fc ffab 	bl	80020e8 <_Z13script_pusherdd>
			delay_start = 5;
 8005192:	4b7c      	ldr	r3, [pc, #496]	; (8005384 <_Z6scriptv+0x2ec>)
 8005194:	2205      	movs	r2, #5
 8005196:	601a      	str	r2, [r3, #0]
		}
		if(delay == 1200 && delay_start == 5){/*-50*/
 8005198:	4b7b      	ldr	r3, [pc, #492]	; (8005388 <_Z6scriptv+0x2f0>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80051a0:	d10e      	bne.n	80051c0 <_Z6scriptv+0x128>
 80051a2:	4b78      	ldr	r3, [pc, #480]	; (8005384 <_Z6scriptv+0x2ec>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2b05      	cmp	r3, #5
 80051a8:	d10a      	bne.n	80051c0 <_Z6scriptv+0x128>
//			script_pusher(-2,10);
			script_wheel(15,0,0);
 80051aa:	ed9f 2b73 	vldr	d2, [pc, #460]	; 8005378 <_Z6scriptv+0x2e0>
 80051ae:	ed9f 1b72 	vldr	d1, [pc, #456]	; 8005378 <_Z6scriptv+0x2e0>
 80051b2:	eeb2 0b0e 	vmov.f64	d0, #46	; 0x41700000  15.0
 80051b6:	f000 f963 	bl	8005480 <_Z12script_wheelddd>
			delay_start = 6;
 80051ba:	4b72      	ldr	r3, [pc, #456]	; (8005384 <_Z6scriptv+0x2ec>)
 80051bc:	2206      	movs	r2, #6
 80051be:	601a      	str	r2, [r3, #0]
		}
		if(delay == 1400 && delay_start == 6){/*-50*/
 80051c0:	4b71      	ldr	r3, [pc, #452]	; (8005388 <_Z6scriptv+0x2f0>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80051c8:	d114      	bne.n	80051f4 <_Z6scriptv+0x15c>
 80051ca:	4b6e      	ldr	r3, [pc, #440]	; (8005384 <_Z6scriptv+0x2ec>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2b06      	cmp	r3, #6
 80051d0:	d110      	bne.n	80051f4 <_Z6scriptv+0x15c>
			script_wheel(0,0,0);
 80051d2:	ed9f 2b69 	vldr	d2, [pc, #420]	; 8005378 <_Z6scriptv+0x2e0>
 80051d6:	ed9f 1b68 	vldr	d1, [pc, #416]	; 8005378 <_Z6scriptv+0x2e0>
 80051da:	ed9f 0b67 	vldr	d0, [pc, #412]	; 8005378 <_Z6scriptv+0x2e0>
 80051de:	f000 f94f 	bl	8005480 <_Z12script_wheelddd>
			script_pusher(13,-2);
 80051e2:	eeb8 1b00 	vmov.f64	d1, #128	; 0xc0000000 -2.0
 80051e6:	eeb2 0b0a 	vmov.f64	d0, #42	; 0x41500000  13.0
 80051ea:	f7fc ff7d 	bl	80020e8 <_Z13script_pusherdd>
			delay_start = 7;
 80051ee:	4b65      	ldr	r3, [pc, #404]	; (8005384 <_Z6scriptv+0x2ec>)
 80051f0:	2207      	movs	r2, #7
 80051f2:	601a      	str	r2, [r3, #0]
		}
		if(delay == 1700 && delay_start == 7){
 80051f4:	4b64      	ldr	r3, [pc, #400]	; (8005388 <_Z6scriptv+0x2f0>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f240 62a4 	movw	r2, #1700	; 0x6a4
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d10e      	bne.n	800521e <_Z6scriptv+0x186>
 8005200:	4b60      	ldr	r3, [pc, #384]	; (8005384 <_Z6scriptv+0x2ec>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2b07      	cmp	r3, #7
 8005206:	d10a      	bne.n	800521e <_Z6scriptv+0x186>
			script_wheel(15,0,0);
 8005208:	ed9f 2b5b 	vldr	d2, [pc, #364]	; 8005378 <_Z6scriptv+0x2e0>
 800520c:	ed9f 1b5a 	vldr	d1, [pc, #360]	; 8005378 <_Z6scriptv+0x2e0>
 8005210:	eeb2 0b0e 	vmov.f64	d0, #46	; 0x41700000  15.0
 8005214:	f000 f934 	bl	8005480 <_Z12script_wheelddd>
//			script_pusher(12,0);
			delay_start = 8;
 8005218:	4b5a      	ldr	r3, [pc, #360]	; (8005384 <_Z6scriptv+0x2ec>)
 800521a:	2208      	movs	r2, #8
 800521c:	601a      	str	r2, [r3, #0]
		}
		if(delay == 2000 && delay_start == 8){
 800521e:	4b5a      	ldr	r3, [pc, #360]	; (8005388 <_Z6scriptv+0x2f0>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005226:	d114      	bne.n	8005252 <_Z6scriptv+0x1ba>
 8005228:	4b56      	ldr	r3, [pc, #344]	; (8005384 <_Z6scriptv+0x2ec>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2b08      	cmp	r3, #8
 800522e:	d110      	bne.n	8005252 <_Z6scriptv+0x1ba>
			script_wheel(0,0,0);
 8005230:	ed9f 2b51 	vldr	d2, [pc, #324]	; 8005378 <_Z6scriptv+0x2e0>
 8005234:	ed9f 1b50 	vldr	d1, [pc, #320]	; 8005378 <_Z6scriptv+0x2e0>
 8005238:	ed9f 0b4f 	vldr	d0, [pc, #316]	; 8005378 <_Z6scriptv+0x2e0>
 800523c:	f000 f920 	bl	8005480 <_Z12script_wheelddd>
			script_pusher(-2,11);
 8005240:	eeb2 1b06 	vmov.f64	d1, #38	; 0x41300000  11.0
 8005244:	eeb8 0b00 	vmov.f64	d0, #128	; 0xc0000000 -2.0
 8005248:	f7fc ff4e 	bl	80020e8 <_Z13script_pusherdd>
			delay_start = 9;
 800524c:	4b4d      	ldr	r3, [pc, #308]	; (8005384 <_Z6scriptv+0x2ec>)
 800524e:	2209      	movs	r2, #9
 8005250:	601a      	str	r2, [r3, #0]
//		if(delay == 2000 && delay_start == 8){
//			script_wheel(0,0,0);
//			script_pusher(-2,10);
//			delay_start = 9;
//		}
		if(delay == 2500 && delay_start == 9){
 8005252:	4b4d      	ldr	r3, [pc, #308]	; (8005388 <_Z6scriptv+0x2f0>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800525a:	4293      	cmp	r3, r2
 800525c:	d10e      	bne.n	800527c <_Z6scriptv+0x1e4>
 800525e:	4b49      	ldr	r3, [pc, #292]	; (8005384 <_Z6scriptv+0x2ec>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2b09      	cmp	r3, #9
 8005264:	d10a      	bne.n	800527c <_Z6scriptv+0x1e4>
			script_wheel(15,0,0);
 8005266:	ed9f 2b44 	vldr	d2, [pc, #272]	; 8005378 <_Z6scriptv+0x2e0>
 800526a:	ed9f 1b43 	vldr	d1, [pc, #268]	; 8005378 <_Z6scriptv+0x2e0>
 800526e:	eeb2 0b0e 	vmov.f64	d0, #46	; 0x41700000  15.0
 8005272:	f000 f905 	bl	8005480 <_Z12script_wheelddd>
			delay_start = 10;
 8005276:	4b43      	ldr	r3, [pc, #268]	; (8005384 <_Z6scriptv+0x2ec>)
 8005278:	220a      	movs	r2, #10
 800527a:	601a      	str	r2, [r3, #0]
		}
		if(delay == 2900 && delay_start == 10){
 800527c:	4b42      	ldr	r3, [pc, #264]	; (8005388 <_Z6scriptv+0x2f0>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f640 3254 	movw	r2, #2900	; 0xb54
 8005284:	4293      	cmp	r3, r2
 8005286:	d11d      	bne.n	80052c4 <_Z6scriptv+0x22c>
 8005288:	4b3e      	ldr	r3, [pc, #248]	; (8005384 <_Z6scriptv+0x2ec>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2b0a      	cmp	r3, #10
 800528e:	d119      	bne.n	80052c4 <_Z6scriptv+0x22c>
			script_wheel(0,0,0);
 8005290:	ed9f 2b39 	vldr	d2, [pc, #228]	; 8005378 <_Z6scriptv+0x2e0>
 8005294:	ed9f 1b38 	vldr	d1, [pc, #224]	; 8005378 <_Z6scriptv+0x2e0>
 8005298:	ed9f 0b37 	vldr	d0, [pc, #220]	; 8005378 <_Z6scriptv+0x2e0>
 800529c:	f000 f8f0 	bl	8005480 <_Z12script_wheelddd>
			script_pusher(-2,15);
 80052a0:	eeb2 1b0e 	vmov.f64	d1, #46	; 0x41700000  15.0
 80052a4:	eeb8 0b00 	vmov.f64	d0, #128	; 0xc0000000 -2.0
 80052a8:	f7fc ff1e 	bl	80020e8 <_Z13script_pusherdd>
			delay_start = 0;
 80052ac:	4b35      	ldr	r3, [pc, #212]	; (8005384 <_Z6scriptv+0x2ec>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	601a      	str	r2, [r3, #0]
			script_a.scriptrun = 0;
 80052b2:	4b33      	ldr	r3, [pc, #204]	; (8005380 <_Z6scriptv+0x2e8>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	601a      	str	r2, [r3, #0]
			delay = 0;
 80052b8:	4b33      	ldr	r3, [pc, #204]	; (8005388 <_Z6scriptv+0x2f0>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	601a      	str	r2, [r3, #0]
			everRun =1;
 80052be:	4b33      	ldr	r3, [pc, #204]	; (800538c <_Z6scriptv+0x2f4>)
 80052c0:	2201      	movs	r2, #1
 80052c2:	601a      	str	r2, [r3, #0]
		}
	}
	if(script_b.scriptrun == 1){
 80052c4:	4b32      	ldr	r3, [pc, #200]	; (8005390 <_Z6scriptv+0x2f8>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	f040 80cb 	bne.w	8005464 <_Z6scriptv+0x3cc>
		if(delay_start_2 == 0){
 80052ce:	4b31      	ldr	r3, [pc, #196]	; (8005394 <_Z6scriptv+0x2fc>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d11e      	bne.n	8005314 <_Z6scriptv+0x27c>
			script_pusher(3,12);
 80052d6:	eeb2 1b08 	vmov.f64	d1, #40	; 0x41400000  12.0
 80052da:	eeb0 0b08 	vmov.f64	d0, #8	; 0x40400000  3.0
 80052de:	f7fc ff03 	bl	80020e8 <_Z13script_pusherdd>
			script_wheel(10,0,0);
 80052e2:	ed9f 2b25 	vldr	d2, [pc, #148]	; 8005378 <_Z6scriptv+0x2e0>
 80052e6:	ed9f 1b24 	vldr	d1, [pc, #144]	; 8005378 <_Z6scriptv+0x2e0>
 80052ea:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 80052ee:	f000 f8c7 	bl	8005480 <_Z12script_wheelddd>
			UART_Send_SetMotorPosition(3, 1650, 500);
 80052f2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80052f6:	f240 6172 	movw	r1, #1650	; 0x672
 80052fa:	2003      	movs	r0, #3
 80052fc:	f000 f900 	bl	8005500 <_Z26UART_Send_SetMotorPositionttt>
			UART_Send_SetMotorPosition(1, 850, 500);
 8005300:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005304:	f240 3152 	movw	r1, #850	; 0x352
 8005308:	2001      	movs	r0, #1
 800530a:	f000 f8f9 	bl	8005500 <_Z26UART_Send_SetMotorPositionttt>
			delay_start_2 =1;
 800530e:	4b21      	ldr	r3, [pc, #132]	; (8005394 <_Z6scriptv+0x2fc>)
 8005310:	2201      	movs	r2, #1
 8005312:	601a      	str	r2, [r3, #0]
		}
		if(delay_2 == 550 && delay_start_2 == 1){
 8005314:	4b20      	ldr	r3, [pc, #128]	; (8005398 <_Z6scriptv+0x300>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f240 2226 	movw	r2, #550	; 0x226
 800531c:	4293      	cmp	r3, r2
 800531e:	d122      	bne.n	8005366 <_Z6scriptv+0x2ce>
 8005320:	4b1c      	ldr	r3, [pc, #112]	; (8005394 <_Z6scriptv+0x2fc>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d11e      	bne.n	8005366 <_Z6scriptv+0x2ce>
			script_pusher(-2,12);
 8005328:	eeb2 1b08 	vmov.f64	d1, #40	; 0x41400000  12.0
 800532c:	eeb8 0b00 	vmov.f64	d0, #128	; 0xc0000000 -2.0
 8005330:	f7fc feda 	bl	80020e8 <_Z13script_pusherdd>
			UART_Send_SetMotorPosition(1, 1300, 1500);
 8005334:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005338:	f240 5114 	movw	r1, #1300	; 0x514
 800533c:	2001      	movs	r0, #1
 800533e:	f000 f8df 	bl	8005500 <_Z26UART_Send_SetMotorPositionttt>
			UART_Send_SetMotorPosition(3, 1200, 1500);
 8005342:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005346:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800534a:	2003      	movs	r0, #3
 800534c:	f000 f8d8 	bl	8005500 <_Z26UART_Send_SetMotorPositionttt>
			script_wheel(0,0,0);
 8005350:	ed9f 2b09 	vldr	d2, [pc, #36]	; 8005378 <_Z6scriptv+0x2e0>
 8005354:	ed9f 1b08 	vldr	d1, [pc, #32]	; 8005378 <_Z6scriptv+0x2e0>
 8005358:	ed9f 0b07 	vldr	d0, [pc, #28]	; 8005378 <_Z6scriptv+0x2e0>
 800535c:	f000 f890 	bl	8005480 <_Z12script_wheelddd>
			delay_start_2 =2;
 8005360:	4b0c      	ldr	r3, [pc, #48]	; (8005394 <_Z6scriptv+0x2fc>)
 8005362:	2202      	movs	r2, #2
 8005364:	601a      	str	r2, [r3, #0]
		}
		if(delay_2 == 750 && delay_start_2 == 2){
 8005366:	4b0c      	ldr	r3, [pc, #48]	; (8005398 <_Z6scriptv+0x300>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f240 22ee 	movw	r2, #750	; 0x2ee
 800536e:	4293      	cmp	r3, r2
 8005370:	d137      	bne.n	80053e2 <_Z6scriptv+0x34a>
 8005372:	e013      	b.n	800539c <_Z6scriptv+0x304>
 8005374:	f3af 8000 	nop.w
	...
 8005380:	24002020 	.word	0x24002020
 8005384:	240002b8 	.word	0x240002b8
 8005388:	240002bc 	.word	0x240002bc
 800538c:	24002028 	.word	0x24002028
 8005390:	24002024 	.word	0x24002024
 8005394:	240002c0 	.word	0x240002c0
 8005398:	240002c4 	.word	0x240002c4
 800539c:	4b34      	ldr	r3, [pc, #208]	; (8005470 <_Z6scriptv+0x3d8>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d11e      	bne.n	80053e2 <_Z6scriptv+0x34a>
			script_pusher(-2,12);
 80053a4:	eeb2 1b08 	vmov.f64	d1, #40	; 0x41400000  12.0
 80053a8:	eeb8 0b00 	vmov.f64	d0, #128	; 0xc0000000 -2.0
 80053ac:	f7fc fe9c 	bl	80020e8 <_Z13script_pusherdd>
			UART_Send_SetMotorPosition(1, 1300, 1500);
 80053b0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80053b4:	f240 5114 	movw	r1, #1300	; 0x514
 80053b8:	2001      	movs	r0, #1
 80053ba:	f000 f8a1 	bl	8005500 <_Z26UART_Send_SetMotorPositionttt>
			UART_Send_SetMotorPosition(3, 1200, 1500);
 80053be:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80053c2:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80053c6:	2003      	movs	r0, #3
 80053c8:	f000 f89a 	bl	8005500 <_Z26UART_Send_SetMotorPositionttt>
			script_wheel(2,0,0);
 80053cc:	ed9f 2b26 	vldr	d2, [pc, #152]	; 8005468 <_Z6scriptv+0x3d0>
 80053d0:	ed9f 1b25 	vldr	d1, [pc, #148]	; 8005468 <_Z6scriptv+0x3d0>
 80053d4:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80053d8:	f000 f852 	bl	8005480 <_Z12script_wheelddd>
			delay_start_2 =3;
 80053dc:	4b24      	ldr	r3, [pc, #144]	; (8005470 <_Z6scriptv+0x3d8>)
 80053de:	2203      	movs	r2, #3
 80053e0:	601a      	str	r2, [r3, #0]
		}
		if(delay_2 == 1500 && delay_start_2 == 3){
 80053e2:	4b24      	ldr	r3, [pc, #144]	; (8005474 <_Z6scriptv+0x3dc>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d10e      	bne.n	800540c <_Z6scriptv+0x374>
 80053ee:	4b20      	ldr	r3, [pc, #128]	; (8005470 <_Z6scriptv+0x3d8>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2b03      	cmp	r3, #3
 80053f4:	d10a      	bne.n	800540c <_Z6scriptv+0x374>
//			UART_Send_SetMotorPosition(1, 1300, 300);
			script_wheel(10,0,0);
 80053f6:	ed9f 2b1c 	vldr	d2, [pc, #112]	; 8005468 <_Z6scriptv+0x3d0>
 80053fa:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8005468 <_Z6scriptv+0x3d0>
 80053fe:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8005402:	f000 f83d 	bl	8005480 <_Z12script_wheelddd>
//			script_pusher(-2,12);
			delay_start_2 =4;
 8005406:	4b1a      	ldr	r3, [pc, #104]	; (8005470 <_Z6scriptv+0x3d8>)
 8005408:	2204      	movs	r2, #4
 800540a:	601a      	str	r2, [r3, #0]
		}
		if(delay_2 == 2100 && delay_start_2 == 4){
 800540c:	4b19      	ldr	r3, [pc, #100]	; (8005474 <_Z6scriptv+0x3dc>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f640 0234 	movw	r2, #2100	; 0x834
 8005414:	4293      	cmp	r3, r2
 8005416:	d125      	bne.n	8005464 <_Z6scriptv+0x3cc>
 8005418:	4b15      	ldr	r3, [pc, #84]	; (8005470 <_Z6scriptv+0x3d8>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2b04      	cmp	r3, #4
 800541e:	d121      	bne.n	8005464 <_Z6scriptv+0x3cc>
			UART_Send_SetMotorPosition(1, 1400, 500);
 8005420:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005424:	f44f 61af 	mov.w	r1, #1400	; 0x578
 8005428:	2001      	movs	r0, #1
 800542a:	f000 f869 	bl	8005500 <_Z26UART_Send_SetMotorPositionttt>
			UART_Send_SetMotorPosition(3, 1100, 500);
 800542e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005432:	f240 414c 	movw	r1, #1100	; 0x44c
 8005436:	2003      	movs	r0, #3
 8005438:	f000 f862 	bl	8005500 <_Z26UART_Send_SetMotorPositionttt>
			script_wheel(0,0,0);
 800543c:	ed9f 2b0a 	vldr	d2, [pc, #40]	; 8005468 <_Z6scriptv+0x3d0>
 8005440:	ed9f 1b09 	vldr	d1, [pc, #36]	; 8005468 <_Z6scriptv+0x3d0>
 8005444:	ed9f 0b08 	vldr	d0, [pc, #32]	; 8005468 <_Z6scriptv+0x3d0>
 8005448:	f000 f81a 	bl	8005480 <_Z12script_wheelddd>
			delay_start_2 =0;
 800544c:	4b08      	ldr	r3, [pc, #32]	; (8005470 <_Z6scriptv+0x3d8>)
 800544e:	2200      	movs	r2, #0
 8005450:	601a      	str	r2, [r3, #0]
			script_b.scriptrun =0;
 8005452:	4b09      	ldr	r3, [pc, #36]	; (8005478 <_Z6scriptv+0x3e0>)
 8005454:	2200      	movs	r2, #0
 8005456:	601a      	str	r2, [r3, #0]
			delay_2 = 0;
 8005458:	4b06      	ldr	r3, [pc, #24]	; (8005474 <_Z6scriptv+0x3dc>)
 800545a:	2200      	movs	r2, #0
 800545c:	601a      	str	r2, [r3, #0]
			everRun2 = 1;
 800545e:	4b07      	ldr	r3, [pc, #28]	; (800547c <_Z6scriptv+0x3e4>)
 8005460:	2201      	movs	r2, #1
 8005462:	601a      	str	r2, [r3, #0]
		}
	}

}
 8005464:	bf00      	nop
 8005466:	bd80      	pop	{r7, pc}
	...
 8005470:	240002c0 	.word	0x240002c0
 8005474:	240002c4 	.word	0x240002c4
 8005478:	24002024 	.word	0x24002024
 800547c:	2400202c 	.word	0x2400202c

08005480 <_Z12script_wheelddd>:
void script_wheel(double s_Vx,double s_Vy,double s_w){
 8005480:	b480      	push	{r7}
 8005482:	b087      	sub	sp, #28
 8005484:	af00      	add	r7, sp, #0
 8005486:	ed87 0b04 	vstr	d0, [r7, #16]
 800548a:	ed87 1b02 	vstr	d1, [r7, #8]
 800548e:	ed87 2b00 	vstr	d2, [r7]
	Vx = s_Vx;
 8005492:	490a      	ldr	r1, [pc, #40]	; (80054bc <_Z12script_wheelddd+0x3c>)
 8005494:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005498:	e9c1 2300 	strd	r2, r3, [r1]
	Vy = s_Vy;
 800549c:	4908      	ldr	r1, [pc, #32]	; (80054c0 <_Z12script_wheelddd+0x40>)
 800549e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054a2:	e9c1 2300 	strd	r2, r3, [r1]
	W = s_w;
 80054a6:	4907      	ldr	r1, [pc, #28]	; (80054c4 <_Z12script_wheelddd+0x44>)
 80054a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054ac:	e9c1 2300 	strd	r2, r3, [r1]
}
 80054b0:	bf00      	nop
 80054b2:	371c      	adds	r7, #28
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr
 80054bc:	24000988 	.word	0x24000988
 80054c0:	24000990 	.word	0x24000990
 80054c4:	24000998 	.word	0x24000998

080054c8 <_Z9UART_Sendh>:
 */
#include "servo.h"
#include"math.h"
extern UART_HandleTypeDef huart3;
int Checksum_Calc, count=0;
void UART_Send(uint8_t u8_data){
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	4603      	mov	r3, r0
 80054d0:	71fb      	strb	r3, [r7, #7]
	uint8_t *u8_pointer = &u8_data;
 80054d2:	1dfb      	adds	r3, r7, #7
 80054d4:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart3, u8_pointer, 1,100);
 80054d6:	2364      	movs	r3, #100	; 0x64
 80054d8:	2201      	movs	r2, #1
 80054da:	68f9      	ldr	r1, [r7, #12]
 80054dc:	4806      	ldr	r0, [pc, #24]	; (80054f8 <_Z9UART_Sendh+0x30>)
 80054de:	f008 fcf0 	bl	800dec2 <HAL_UART_Transmit>

	Checksum_Calc += u8_data;
 80054e2:	79fb      	ldrb	r3, [r7, #7]
 80054e4:	461a      	mov	r2, r3
 80054e6:	4b05      	ldr	r3, [pc, #20]	; (80054fc <_Z9UART_Sendh+0x34>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4413      	add	r3, r2
 80054ec:	4a03      	ldr	r2, [pc, #12]	; (80054fc <_Z9UART_Sendh+0x34>)
 80054ee:	6013      	str	r3, [r2, #0]
}
 80054f0:	bf00      	nop
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	240007f8 	.word	0x240007f8
 80054fc:	24002030 	.word	0x24002030

08005500 <_Z26UART_Send_SetMotorPositionttt>:

void UART_Send_SetMotorPosition(uint16_t motorId, uint16_t Position, uint16_t Time){
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	4603      	mov	r3, r0
 8005508:	80fb      	strh	r3, [r7, #6]
 800550a:	460b      	mov	r3, r1
 800550c:	80bb      	strh	r3, [r7, #4]
 800550e:	4613      	mov	r3, r2
 8005510:	807b      	strh	r3, [r7, #2]
	Checksum_Calc = 0;
 8005512:	4b1c      	ldr	r3, [pc, #112]	; (8005584 <_Z26UART_Send_SetMotorPositionttt+0x84>)
 8005514:	2200      	movs	r2, #0
 8005516:	601a      	str	r2, [r3, #0]
	UART_Send(0x80 + motorId);
 8005518:	88fb      	ldrh	r3, [r7, #6]
 800551a:	b2db      	uxtb	r3, r3
 800551c:	3b80      	subs	r3, #128	; 0x80
 800551e:	b2db      	uxtb	r3, r3
 8005520:	4618      	mov	r0, r3
 8005522:	f7ff ffd1 	bl	80054c8 <_Z9UART_Sendh>
	UART_Send(0x83);
 8005526:	2083      	movs	r0, #131	; 0x83
 8005528:	f7ff ffce 	bl	80054c8 <_Z9UART_Sendh>
	UART_Send(0x05);
 800552c:	2005      	movs	r0, #5
 800552e:	f7ff ffcb 	bl	80054c8 <_Z9UART_Sendh>
	UART_Send((Position / 256)& 0x7F);
 8005532:	88bb      	ldrh	r3, [r7, #4]
 8005534:	0a1b      	lsrs	r3, r3, #8
 8005536:	b29b      	uxth	r3, r3
 8005538:	b2db      	uxtb	r3, r3
 800553a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800553e:	b2db      	uxtb	r3, r3
 8005540:	4618      	mov	r0, r3
 8005542:	f7ff ffc1 	bl	80054c8 <_Z9UART_Sendh>
	UART_Send(Position % 256);
 8005546:	88bb      	ldrh	r3, [r7, #4]
 8005548:	b2db      	uxtb	r3, r3
 800554a:	4618      	mov	r0, r3
 800554c:	f7ff ffbc 	bl	80054c8 <_Z9UART_Sendh>
	UART_Send((Time / 256)& 0x7F);
 8005550:	887b      	ldrh	r3, [r7, #2]
 8005552:	0a1b      	lsrs	r3, r3, #8
 8005554:	b29b      	uxth	r3, r3
 8005556:	b2db      	uxtb	r3, r3
 8005558:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800555c:	b2db      	uxtb	r3, r3
 800555e:	4618      	mov	r0, r3
 8005560:	f7ff ffb2 	bl	80054c8 <_Z9UART_Sendh>
	UART_Send(Time % 256);
 8005564:	887b      	ldrh	r3, [r7, #2]
 8005566:	b2db      	uxtb	r3, r3
 8005568:	4618      	mov	r0, r3
 800556a:	f7ff ffad 	bl	80054c8 <_Z9UART_Sendh>
	UART_Send(Checksum_Calc);
 800556e:	4b05      	ldr	r3, [pc, #20]	; (8005584 <_Z26UART_Send_SetMotorPositionttt+0x84>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	b2db      	uxtb	r3, r3
 8005574:	4618      	mov	r0, r3
 8005576:	f7ff ffa7 	bl	80054c8 <_Z9UART_Sendh>
}
 800557a:	bf00      	nop
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	24002030 	.word	0x24002030

08005588 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800558e:	4b0a      	ldr	r3, [pc, #40]	; (80055b8 <HAL_MspInit+0x30>)
 8005590:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005594:	4a08      	ldr	r2, [pc, #32]	; (80055b8 <HAL_MspInit+0x30>)
 8005596:	f043 0302 	orr.w	r3, r3, #2
 800559a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800559e:	4b06      	ldr	r3, [pc, #24]	; (80055b8 <HAL_MspInit+0x30>)
 80055a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80055a4:	f003 0302 	and.w	r3, r3, #2
 80055a8:	607b      	str	r3, [r7, #4]
 80055aa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	58024400 	.word	0x58024400

080055bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b086      	sub	sp, #24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a43      	ldr	r2, [pc, #268]	; (80056d8 <HAL_TIM_Base_MspInit+0x11c>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d12f      	bne.n	800562e <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80055ce:	4b43      	ldr	r3, [pc, #268]	; (80056dc <HAL_TIM_Base_MspInit+0x120>)
 80055d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055d4:	4a41      	ldr	r2, [pc, #260]	; (80056dc <HAL_TIM_Base_MspInit+0x120>)
 80055d6:	f043 0301 	orr.w	r3, r3, #1
 80055da:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80055de:	4b3f      	ldr	r3, [pc, #252]	; (80056dc <HAL_TIM_Base_MspInit+0x120>)
 80055e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	617b      	str	r3, [r7, #20]
 80055ea:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80055ec:	2200      	movs	r2, #0
 80055ee:	2100      	movs	r1, #0
 80055f0:	2018      	movs	r0, #24
 80055f2:	f000 feec 	bl	80063ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80055f6:	2018      	movs	r0, #24
 80055f8:	f000 ff03 	bl	8006402 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80055fc:	2200      	movs	r2, #0
 80055fe:	2100      	movs	r1, #0
 8005600:	2019      	movs	r0, #25
 8005602:	f000 fee4 	bl	80063ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8005606:	2019      	movs	r0, #25
 8005608:	f000 fefb 	bl	8006402 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800560c:	2200      	movs	r2, #0
 800560e:	2100      	movs	r1, #0
 8005610:	201a      	movs	r0, #26
 8005612:	f000 fedc 	bl	80063ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8005616:	201a      	movs	r0, #26
 8005618:	f000 fef3 	bl	8006402 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800561c:	2200      	movs	r2, #0
 800561e:	2100      	movs	r1, #0
 8005620:	201b      	movs	r0, #27
 8005622:	f000 fed4 	bl	80063ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8005626:	201b      	movs	r0, #27
 8005628:	f000 feeb 	bl	8006402 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }

}
 800562c:	e050      	b.n	80056d0 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM8)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a2b      	ldr	r2, [pc, #172]	; (80056e0 <HAL_TIM_Base_MspInit+0x124>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d12f      	bne.n	8005698 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005638:	4b28      	ldr	r3, [pc, #160]	; (80056dc <HAL_TIM_Base_MspInit+0x120>)
 800563a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800563e:	4a27      	ldr	r2, [pc, #156]	; (80056dc <HAL_TIM_Base_MspInit+0x120>)
 8005640:	f043 0302 	orr.w	r3, r3, #2
 8005644:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005648:	4b24      	ldr	r3, [pc, #144]	; (80056dc <HAL_TIM_Base_MspInit+0x120>)
 800564a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	613b      	str	r3, [r7, #16]
 8005654:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8005656:	2200      	movs	r2, #0
 8005658:	2100      	movs	r1, #0
 800565a:	202b      	movs	r0, #43	; 0x2b
 800565c:	f000 feb7 	bl	80063ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8005660:	202b      	movs	r0, #43	; 0x2b
 8005662:	f000 fece 	bl	8006402 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005666:	2200      	movs	r2, #0
 8005668:	2100      	movs	r1, #0
 800566a:	202c      	movs	r0, #44	; 0x2c
 800566c:	f000 feaf 	bl	80063ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005670:	202c      	movs	r0, #44	; 0x2c
 8005672:	f000 fec6 	bl	8006402 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8005676:	2200      	movs	r2, #0
 8005678:	2100      	movs	r1, #0
 800567a:	202d      	movs	r0, #45	; 0x2d
 800567c:	f000 fea7 	bl	80063ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8005680:	202d      	movs	r0, #45	; 0x2d
 8005682:	f000 febe 	bl	8006402 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8005686:	2200      	movs	r2, #0
 8005688:	2100      	movs	r1, #0
 800568a:	202e      	movs	r0, #46	; 0x2e
 800568c:	f000 fe9f 	bl	80063ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8005690:	202e      	movs	r0, #46	; 0x2e
 8005692:	f000 feb6 	bl	8006402 <HAL_NVIC_EnableIRQ>
}
 8005696:	e01b      	b.n	80056d0 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM23)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a11      	ldr	r2, [pc, #68]	; (80056e4 <HAL_TIM_Base_MspInit+0x128>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d116      	bne.n	80056d0 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM23_CLK_ENABLE();
 80056a2:	4b0e      	ldr	r3, [pc, #56]	; (80056dc <HAL_TIM_Base_MspInit+0x120>)
 80056a4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80056a8:	4a0c      	ldr	r2, [pc, #48]	; (80056dc <HAL_TIM_Base_MspInit+0x120>)
 80056aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056ae:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80056b2:	4b0a      	ldr	r3, [pc, #40]	; (80056dc <HAL_TIM_Base_MspInit+0x120>)
 80056b4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80056b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056bc:	60fb      	str	r3, [r7, #12]
 80056be:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM23_IRQn, 0, 0);
 80056c0:	2200      	movs	r2, #0
 80056c2:	2100      	movs	r1, #0
 80056c4:	20a1      	movs	r0, #161	; 0xa1
 80056c6:	f000 fe82 	bl	80063ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM23_IRQn);
 80056ca:	20a1      	movs	r0, #161	; 0xa1
 80056cc:	f000 fe99 	bl	8006402 <HAL_NVIC_EnableIRQ>
}
 80056d0:	bf00      	nop
 80056d2:	3718      	adds	r7, #24
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	40010000 	.word	0x40010000
 80056dc:	58024400 	.word	0x58024400
 80056e0:	40010400 	.word	0x40010400
 80056e4:	4000e000 	.word	0x4000e000

080056e8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b090      	sub	sp, #64	; 0x40
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80056f4:	2200      	movs	r2, #0
 80056f6:	601a      	str	r2, [r3, #0]
 80056f8:	605a      	str	r2, [r3, #4]
 80056fa:	609a      	str	r2, [r3, #8]
 80056fc:	60da      	str	r2, [r3, #12]
 80056fe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005708:	d14e      	bne.n	80057a8 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800570a:	4b77      	ldr	r3, [pc, #476]	; (80058e8 <HAL_TIM_Encoder_MspInit+0x200>)
 800570c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005710:	4a75      	ldr	r2, [pc, #468]	; (80058e8 <HAL_TIM_Encoder_MspInit+0x200>)
 8005712:	f043 0301 	orr.w	r3, r3, #1
 8005716:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800571a:	4b73      	ldr	r3, [pc, #460]	; (80058e8 <HAL_TIM_Encoder_MspInit+0x200>)
 800571c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	62bb      	str	r3, [r7, #40]	; 0x28
 8005726:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005728:	4b6f      	ldr	r3, [pc, #444]	; (80058e8 <HAL_TIM_Encoder_MspInit+0x200>)
 800572a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800572e:	4a6e      	ldr	r2, [pc, #440]	; (80058e8 <HAL_TIM_Encoder_MspInit+0x200>)
 8005730:	f043 0301 	orr.w	r3, r3, #1
 8005734:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005738:	4b6b      	ldr	r3, [pc, #428]	; (80058e8 <HAL_TIM_Encoder_MspInit+0x200>)
 800573a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	627b      	str	r3, [r7, #36]	; 0x24
 8005744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005746:	4b68      	ldr	r3, [pc, #416]	; (80058e8 <HAL_TIM_Encoder_MspInit+0x200>)
 8005748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800574c:	4a66      	ldr	r2, [pc, #408]	; (80058e8 <HAL_TIM_Encoder_MspInit+0x200>)
 800574e:	f043 0302 	orr.w	r3, r3, #2
 8005752:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005756:	4b64      	ldr	r3, [pc, #400]	; (80058e8 <HAL_TIM_Encoder_MspInit+0x200>)
 8005758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800575c:	f003 0302 	and.w	r3, r3, #2
 8005760:	623b      	str	r3, [r7, #32]
 8005762:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005764:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005768:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800576a:	2302      	movs	r3, #2
 800576c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800576e:	2300      	movs	r3, #0
 8005770:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005772:	2300      	movs	r3, #0
 8005774:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005776:	2301      	movs	r3, #1
 8005778:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800577a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800577e:	4619      	mov	r1, r3
 8005780:	485a      	ldr	r0, [pc, #360]	; (80058ec <HAL_TIM_Encoder_MspInit+0x204>)
 8005782:	f003 fe55 	bl	8009430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005786:	2308      	movs	r3, #8
 8005788:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800578a:	2302      	movs	r3, #2
 800578c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800578e:	2300      	movs	r3, #0
 8005790:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005792:	2300      	movs	r3, #0
 8005794:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005796:	2301      	movs	r3, #1
 8005798:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800579a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800579e:	4619      	mov	r1, r3
 80057a0:	4853      	ldr	r0, [pc, #332]	; (80058f0 <HAL_TIM_Encoder_MspInit+0x208>)
 80057a2:	f003 fe45 	bl	8009430 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80057a6:	e09b      	b.n	80058e0 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM3)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a51      	ldr	r2, [pc, #324]	; (80058f4 <HAL_TIM_Encoder_MspInit+0x20c>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d12e      	bne.n	8005810 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80057b2:	4b4d      	ldr	r3, [pc, #308]	; (80058e8 <HAL_TIM_Encoder_MspInit+0x200>)
 80057b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80057b8:	4a4b      	ldr	r2, [pc, #300]	; (80058e8 <HAL_TIM_Encoder_MspInit+0x200>)
 80057ba:	f043 0302 	orr.w	r3, r3, #2
 80057be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80057c2:	4b49      	ldr	r3, [pc, #292]	; (80058e8 <HAL_TIM_Encoder_MspInit+0x200>)
 80057c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80057c8:	f003 0302 	and.w	r3, r3, #2
 80057cc:	61fb      	str	r3, [r7, #28]
 80057ce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057d0:	4b45      	ldr	r3, [pc, #276]	; (80058e8 <HAL_TIM_Encoder_MspInit+0x200>)
 80057d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057d6:	4a44      	ldr	r2, [pc, #272]	; (80058e8 <HAL_TIM_Encoder_MspInit+0x200>)
 80057d8:	f043 0302 	orr.w	r3, r3, #2
 80057dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80057e0:	4b41      	ldr	r3, [pc, #260]	; (80058e8 <HAL_TIM_Encoder_MspInit+0x200>)
 80057e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057e6:	f003 0302 	and.w	r3, r3, #2
 80057ea:	61bb      	str	r3, [r7, #24]
 80057ec:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80057ee:	2330      	movs	r3, #48	; 0x30
 80057f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057f2:	2302      	movs	r3, #2
 80057f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057f6:	2300      	movs	r3, #0
 80057f8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057fa:	2300      	movs	r3, #0
 80057fc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80057fe:	2302      	movs	r3, #2
 8005800:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005802:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005806:	4619      	mov	r1, r3
 8005808:	4839      	ldr	r0, [pc, #228]	; (80058f0 <HAL_TIM_Encoder_MspInit+0x208>)
 800580a:	f003 fe11 	bl	8009430 <HAL_GPIO_Init>
}
 800580e:	e067      	b.n	80058e0 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM4)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a38      	ldr	r2, [pc, #224]	; (80058f8 <HAL_TIM_Encoder_MspInit+0x210>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d12f      	bne.n	800587a <HAL_TIM_Encoder_MspInit+0x192>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800581a:	4b33      	ldr	r3, [pc, #204]	; (80058e8 <HAL_TIM_Encoder_MspInit+0x200>)
 800581c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005820:	4a31      	ldr	r2, [pc, #196]	; (80058e8 <HAL_TIM_Encoder_MspInit+0x200>)
 8005822:	f043 0304 	orr.w	r3, r3, #4
 8005826:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800582a:	4b2f      	ldr	r3, [pc, #188]	; (80058e8 <HAL_TIM_Encoder_MspInit+0x200>)
 800582c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005830:	f003 0304 	and.w	r3, r3, #4
 8005834:	617b      	str	r3, [r7, #20]
 8005836:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005838:	4b2b      	ldr	r3, [pc, #172]	; (80058e8 <HAL_TIM_Encoder_MspInit+0x200>)
 800583a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800583e:	4a2a      	ldr	r2, [pc, #168]	; (80058e8 <HAL_TIM_Encoder_MspInit+0x200>)
 8005840:	f043 0308 	orr.w	r3, r3, #8
 8005844:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005848:	4b27      	ldr	r3, [pc, #156]	; (80058e8 <HAL_TIM_Encoder_MspInit+0x200>)
 800584a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800584e:	f003 0308 	and.w	r3, r3, #8
 8005852:	613b      	str	r3, [r7, #16]
 8005854:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8005856:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800585a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800585c:	2302      	movs	r3, #2
 800585e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005860:	2300      	movs	r3, #0
 8005862:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005864:	2300      	movs	r3, #0
 8005866:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005868:	2302      	movs	r3, #2
 800586a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800586c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005870:	4619      	mov	r1, r3
 8005872:	4822      	ldr	r0, [pc, #136]	; (80058fc <HAL_TIM_Encoder_MspInit+0x214>)
 8005874:	f003 fddc 	bl	8009430 <HAL_GPIO_Init>
}
 8005878:	e032      	b.n	80058e0 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM5)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a20      	ldr	r2, [pc, #128]	; (8005900 <HAL_TIM_Encoder_MspInit+0x218>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d12d      	bne.n	80058e0 <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005884:	4b18      	ldr	r3, [pc, #96]	; (80058e8 <HAL_TIM_Encoder_MspInit+0x200>)
 8005886:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800588a:	4a17      	ldr	r2, [pc, #92]	; (80058e8 <HAL_TIM_Encoder_MspInit+0x200>)
 800588c:	f043 0308 	orr.w	r3, r3, #8
 8005890:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005894:	4b14      	ldr	r3, [pc, #80]	; (80058e8 <HAL_TIM_Encoder_MspInit+0x200>)
 8005896:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800589a:	f003 0308 	and.w	r3, r3, #8
 800589e:	60fb      	str	r3, [r7, #12]
 80058a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058a2:	4b11      	ldr	r3, [pc, #68]	; (80058e8 <HAL_TIM_Encoder_MspInit+0x200>)
 80058a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80058a8:	4a0f      	ldr	r2, [pc, #60]	; (80058e8 <HAL_TIM_Encoder_MspInit+0x200>)
 80058aa:	f043 0301 	orr.w	r3, r3, #1
 80058ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80058b2:	4b0d      	ldr	r3, [pc, #52]	; (80058e8 <HAL_TIM_Encoder_MspInit+0x200>)
 80058b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80058b8:	f003 0301 	and.w	r3, r3, #1
 80058bc:	60bb      	str	r3, [r7, #8]
 80058be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80058c0:	2303      	movs	r3, #3
 80058c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058c4:	2302      	movs	r3, #2
 80058c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058c8:	2300      	movs	r3, #0
 80058ca:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058cc:	2300      	movs	r3, #0
 80058ce:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80058d0:	2302      	movs	r3, #2
 80058d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80058d8:	4619      	mov	r1, r3
 80058da:	4804      	ldr	r0, [pc, #16]	; (80058ec <HAL_TIM_Encoder_MspInit+0x204>)
 80058dc:	f003 fda8 	bl	8009430 <HAL_GPIO_Init>
}
 80058e0:	bf00      	nop
 80058e2:	3740      	adds	r7, #64	; 0x40
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	58024400 	.word	0x58024400
 80058ec:	58020000 	.word	0x58020000
 80058f0:	58020400 	.word	0x58020400
 80058f4:	40000400 	.word	0x40000400
 80058f8:	40000800 	.word	0x40000800
 80058fc:	58020c00 	.word	0x58020c00
 8005900:	40000c00 	.word	0x40000c00

08005904 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a19      	ldr	r2, [pc, #100]	; (8005978 <HAL_TIM_PWM_MspInit+0x74>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d117      	bne.n	8005946 <HAL_TIM_PWM_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8005916:	4b19      	ldr	r3, [pc, #100]	; (800597c <HAL_TIM_PWM_MspInit+0x78>)
 8005918:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800591c:	4a17      	ldr	r2, [pc, #92]	; (800597c <HAL_TIM_PWM_MspInit+0x78>)
 800591e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005922:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005926:	4b15      	ldr	r3, [pc, #84]	; (800597c <HAL_TIM_PWM_MspInit+0x78>)
 8005928:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800592c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005930:	60fb      	str	r3, [r7, #12]
 8005932:	68fb      	ldr	r3, [r7, #12]
    /* TIM12 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8005934:	2200      	movs	r2, #0
 8005936:	2100      	movs	r1, #0
 8005938:	202b      	movs	r0, #43	; 0x2b
 800593a:	f000 fd48 	bl	80063ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800593e:	202b      	movs	r0, #43	; 0x2b
 8005940:	f000 fd5f 	bl	8006402 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8005944:	e013      	b.n	800596e <HAL_TIM_PWM_MspInit+0x6a>
  else if(htim_pwm->Instance==TIM15)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a0d      	ldr	r2, [pc, #52]	; (8005980 <HAL_TIM_PWM_MspInit+0x7c>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d10e      	bne.n	800596e <HAL_TIM_PWM_MspInit+0x6a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005950:	4b0a      	ldr	r3, [pc, #40]	; (800597c <HAL_TIM_PWM_MspInit+0x78>)
 8005952:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005956:	4a09      	ldr	r2, [pc, #36]	; (800597c <HAL_TIM_PWM_MspInit+0x78>)
 8005958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800595c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005960:	4b06      	ldr	r3, [pc, #24]	; (800597c <HAL_TIM_PWM_MspInit+0x78>)
 8005962:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800596a:	60bb      	str	r3, [r7, #8]
 800596c:	68bb      	ldr	r3, [r7, #8]
}
 800596e:	bf00      	nop
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	40001800 	.word	0x40001800
 800597c:	58024400 	.word	0x58024400
 8005980:	40014000 	.word	0x40014000

08005984 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b08a      	sub	sp, #40	; 0x28
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800598c:	f107 0314 	add.w	r3, r7, #20
 8005990:	2200      	movs	r2, #0
 8005992:	601a      	str	r2, [r3, #0]
 8005994:	605a      	str	r2, [r3, #4]
 8005996:	609a      	str	r2, [r3, #8]
 8005998:	60da      	str	r2, [r3, #12]
 800599a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a25      	ldr	r2, [pc, #148]	; (8005a38 <HAL_TIM_MspPostInit+0xb4>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d120      	bne.n	80059e8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059a6:	4b25      	ldr	r3, [pc, #148]	; (8005a3c <HAL_TIM_MspPostInit+0xb8>)
 80059a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059ac:	4a23      	ldr	r2, [pc, #140]	; (8005a3c <HAL_TIM_MspPostInit+0xb8>)
 80059ae:	f043 0302 	orr.w	r3, r3, #2
 80059b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80059b6:	4b21      	ldr	r3, [pc, #132]	; (8005a3c <HAL_TIM_MspPostInit+0xb8>)
 80059b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059bc:	f003 0302 	and.w	r3, r3, #2
 80059c0:	613b      	str	r3, [r7, #16]
 80059c2:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80059c4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80059c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059ca:	2302      	movs	r3, #2
 80059cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059ce:	2300      	movs	r3, #0
 80059d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059d2:	2300      	movs	r3, #0
 80059d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 80059d6:	2302      	movs	r3, #2
 80059d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059da:	f107 0314 	add.w	r3, r7, #20
 80059de:	4619      	mov	r1, r3
 80059e0:	4817      	ldr	r0, [pc, #92]	; (8005a40 <HAL_TIM_MspPostInit+0xbc>)
 80059e2:	f003 fd25 	bl	8009430 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80059e6:	e023      	b.n	8005a30 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM15)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a15      	ldr	r2, [pc, #84]	; (8005a44 <HAL_TIM_MspPostInit+0xc0>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d11e      	bne.n	8005a30 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80059f2:	4b12      	ldr	r3, [pc, #72]	; (8005a3c <HAL_TIM_MspPostInit+0xb8>)
 80059f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059f8:	4a10      	ldr	r2, [pc, #64]	; (8005a3c <HAL_TIM_MspPostInit+0xb8>)
 80059fa:	f043 0310 	orr.w	r3, r3, #16
 80059fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005a02:	4b0e      	ldr	r3, [pc, #56]	; (8005a3c <HAL_TIM_MspPostInit+0xb8>)
 8005a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a08:	f003 0310 	and.w	r3, r3, #16
 8005a0c:	60fb      	str	r3, [r7, #12]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005a10:	2360      	movs	r3, #96	; 0x60
 8005a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a14:	2302      	movs	r3, #2
 8005a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8005a20:	2304      	movs	r3, #4
 8005a22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005a24:	f107 0314 	add.w	r3, r7, #20
 8005a28:	4619      	mov	r1, r3
 8005a2a:	4807      	ldr	r0, [pc, #28]	; (8005a48 <HAL_TIM_MspPostInit+0xc4>)
 8005a2c:	f003 fd00 	bl	8009430 <HAL_GPIO_Init>
}
 8005a30:	bf00      	nop
 8005a32:	3728      	adds	r7, #40	; 0x28
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	40001800 	.word	0x40001800
 8005a3c:	58024400 	.word	0x58024400
 8005a40:	58020400 	.word	0x58020400
 8005a44:	40014000 	.word	0x40014000
 8005a48:	58021000 	.word	0x58021000

08005a4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b0bc      	sub	sp, #240	; 0xf0
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a54:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005a58:	2200      	movs	r2, #0
 8005a5a:	601a      	str	r2, [r3, #0]
 8005a5c:	605a      	str	r2, [r3, #4]
 8005a5e:	609a      	str	r2, [r3, #8]
 8005a60:	60da      	str	r2, [r3, #12]
 8005a62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005a64:	f107 0320 	add.w	r3, r7, #32
 8005a68:	22b8      	movs	r2, #184	; 0xb8
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f00a fbba 	bl	80101e6 <memset>
  if(huart->Instance==USART1)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a97      	ldr	r2, [pc, #604]	; (8005cd4 <HAL_UART_MspInit+0x288>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	f040 80ae 	bne.w	8005bda <HAL_UART_MspInit+0x18e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005a7e:	f04f 0201 	mov.w	r2, #1
 8005a82:	f04f 0300 	mov.w	r3, #0
 8005a86:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005a90:	f107 0320 	add.w	r3, r7, #32
 8005a94:	4618      	mov	r0, r3
 8005a96:	f004 ff2f 	bl	800a8f8 <HAL_RCCEx_PeriphCLKConfig>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d001      	beq.n	8005aa4 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8005aa0:	f7fc fa8a 	bl	8001fb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005aa4:	4b8c      	ldr	r3, [pc, #560]	; (8005cd8 <HAL_UART_MspInit+0x28c>)
 8005aa6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005aaa:	4a8b      	ldr	r2, [pc, #556]	; (8005cd8 <HAL_UART_MspInit+0x28c>)
 8005aac:	f043 0310 	orr.w	r3, r3, #16
 8005ab0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005ab4:	4b88      	ldr	r3, [pc, #544]	; (8005cd8 <HAL_UART_MspInit+0x28c>)
 8005ab6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005aba:	f003 0310 	and.w	r3, r3, #16
 8005abe:	61fb      	str	r3, [r7, #28]
 8005ac0:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ac2:	4b85      	ldr	r3, [pc, #532]	; (8005cd8 <HAL_UART_MspInit+0x28c>)
 8005ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ac8:	4a83      	ldr	r2, [pc, #524]	; (8005cd8 <HAL_UART_MspInit+0x28c>)
 8005aca:	f043 0301 	orr.w	r3, r3, #1
 8005ace:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005ad2:	4b81      	ldr	r3, [pc, #516]	; (8005cd8 <HAL_UART_MspInit+0x28c>)
 8005ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ad8:	f003 0301 	and.w	r3, r3, #1
 8005adc:	61bb      	str	r3, [r7, #24]
 8005ade:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005ae0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005ae4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ae8:	2302      	movs	r3, #2
 8005aea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aee:	2300      	movs	r3, #0
 8005af0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005af4:	2300      	movs	r3, #0
 8005af6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005afa:	2307      	movs	r3, #7
 8005afc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b00:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005b04:	4619      	mov	r1, r3
 8005b06:	4875      	ldr	r0, [pc, #468]	; (8005cdc <HAL_UART_MspInit+0x290>)
 8005b08:	f003 fc92 	bl	8009430 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8005b0c:	4b74      	ldr	r3, [pc, #464]	; (8005ce0 <HAL_UART_MspInit+0x294>)
 8005b0e:	4a75      	ldr	r2, [pc, #468]	; (8005ce4 <HAL_UART_MspInit+0x298>)
 8005b10:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8005b12:	4b73      	ldr	r3, [pc, #460]	; (8005ce0 <HAL_UART_MspInit+0x294>)
 8005b14:	2229      	movs	r2, #41	; 0x29
 8005b16:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005b18:	4b71      	ldr	r3, [pc, #452]	; (8005ce0 <HAL_UART_MspInit+0x294>)
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b1e:	4b70      	ldr	r3, [pc, #448]	; (8005ce0 <HAL_UART_MspInit+0x294>)
 8005b20:	2200      	movs	r2, #0
 8005b22:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005b24:	4b6e      	ldr	r3, [pc, #440]	; (8005ce0 <HAL_UART_MspInit+0x294>)
 8005b26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b2a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b2c:	4b6c      	ldr	r3, [pc, #432]	; (8005ce0 <HAL_UART_MspInit+0x294>)
 8005b2e:	2200      	movs	r2, #0
 8005b30:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005b32:	4b6b      	ldr	r3, [pc, #428]	; (8005ce0 <HAL_UART_MspInit+0x294>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8005b38:	4b69      	ldr	r3, [pc, #420]	; (8005ce0 <HAL_UART_MspInit+0x294>)
 8005b3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b3e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005b40:	4b67      	ldr	r3, [pc, #412]	; (8005ce0 <HAL_UART_MspInit+0x294>)
 8005b42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005b46:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005b48:	4b65      	ldr	r3, [pc, #404]	; (8005ce0 <HAL_UART_MspInit+0x294>)
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005b4e:	4864      	ldr	r0, [pc, #400]	; (8005ce0 <HAL_UART_MspInit+0x294>)
 8005b50:	f000 fc80 	bl	8006454 <HAL_DMA_Init>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d001      	beq.n	8005b5e <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8005b5a:	f7fc fa2d 	bl	8001fb8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a5f      	ldr	r2, [pc, #380]	; (8005ce0 <HAL_UART_MspInit+0x294>)
 8005b62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8005b66:	4a5e      	ldr	r2, [pc, #376]	; (8005ce0 <HAL_UART_MspInit+0x294>)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 8005b6c:	4b5e      	ldr	r3, [pc, #376]	; (8005ce8 <HAL_UART_MspInit+0x29c>)
 8005b6e:	4a5f      	ldr	r2, [pc, #380]	; (8005cec <HAL_UART_MspInit+0x2a0>)
 8005b70:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8005b72:	4b5d      	ldr	r3, [pc, #372]	; (8005ce8 <HAL_UART_MspInit+0x29c>)
 8005b74:	222a      	movs	r2, #42	; 0x2a
 8005b76:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005b78:	4b5b      	ldr	r3, [pc, #364]	; (8005ce8 <HAL_UART_MspInit+0x29c>)
 8005b7a:	2240      	movs	r2, #64	; 0x40
 8005b7c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b7e:	4b5a      	ldr	r3, [pc, #360]	; (8005ce8 <HAL_UART_MspInit+0x29c>)
 8005b80:	2200      	movs	r2, #0
 8005b82:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005b84:	4b58      	ldr	r3, [pc, #352]	; (8005ce8 <HAL_UART_MspInit+0x29c>)
 8005b86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b8a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b8c:	4b56      	ldr	r3, [pc, #344]	; (8005ce8 <HAL_UART_MspInit+0x29c>)
 8005b8e:	2200      	movs	r2, #0
 8005b90:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005b92:	4b55      	ldr	r3, [pc, #340]	; (8005ce8 <HAL_UART_MspInit+0x29c>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005b98:	4b53      	ldr	r3, [pc, #332]	; (8005ce8 <HAL_UART_MspInit+0x29c>)
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005b9e:	4b52      	ldr	r3, [pc, #328]	; (8005ce8 <HAL_UART_MspInit+0x29c>)
 8005ba0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005ba4:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005ba6:	4b50      	ldr	r3, [pc, #320]	; (8005ce8 <HAL_UART_MspInit+0x29c>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005bac:	484e      	ldr	r0, [pc, #312]	; (8005ce8 <HAL_UART_MspInit+0x29c>)
 8005bae:	f000 fc51 	bl	8006454 <HAL_DMA_Init>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d001      	beq.n	8005bbc <HAL_UART_MspInit+0x170>
    {
      Error_Handler();
 8005bb8:	f7fc f9fe 	bl	8001fb8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a4a      	ldr	r2, [pc, #296]	; (8005ce8 <HAL_UART_MspInit+0x29c>)
 8005bc0:	67da      	str	r2, [r3, #124]	; 0x7c
 8005bc2:	4a49      	ldr	r2, [pc, #292]	; (8005ce8 <HAL_UART_MspInit+0x29c>)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005bc8:	2200      	movs	r2, #0
 8005bca:	2100      	movs	r1, #0
 8005bcc:	2025      	movs	r0, #37	; 0x25
 8005bce:	f000 fbfe 	bl	80063ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005bd2:	2025      	movs	r0, #37	; 0x25
 8005bd4:	f000 fc15 	bl	8006402 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005bd8:	e078      	b.n	8005ccc <HAL_UART_MspInit+0x280>
  else if(huart->Instance==USART3)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a44      	ldr	r2, [pc, #272]	; (8005cf0 <HAL_UART_MspInit+0x2a4>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d173      	bne.n	8005ccc <HAL_UART_MspInit+0x280>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005be4:	f04f 0202 	mov.w	r2, #2
 8005be8:	f04f 0300 	mov.w	r3, #0
 8005bec:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005bf6:	f107 0320 	add.w	r3, r7, #32
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f004 fe7c 	bl	800a8f8 <HAL_RCCEx_PeriphCLKConfig>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d001      	beq.n	8005c0a <HAL_UART_MspInit+0x1be>
      Error_Handler();
 8005c06:	f7fc f9d7 	bl	8001fb8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005c0a:	4b33      	ldr	r3, [pc, #204]	; (8005cd8 <HAL_UART_MspInit+0x28c>)
 8005c0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c10:	4a31      	ldr	r2, [pc, #196]	; (8005cd8 <HAL_UART_MspInit+0x28c>)
 8005c12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c16:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005c1a:	4b2f      	ldr	r3, [pc, #188]	; (8005cd8 <HAL_UART_MspInit+0x28c>)
 8005c1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c24:	617b      	str	r3, [r7, #20]
 8005c26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c28:	4b2b      	ldr	r3, [pc, #172]	; (8005cd8 <HAL_UART_MspInit+0x28c>)
 8005c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c2e:	4a2a      	ldr	r2, [pc, #168]	; (8005cd8 <HAL_UART_MspInit+0x28c>)
 8005c30:	f043 0302 	orr.w	r3, r3, #2
 8005c34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005c38:	4b27      	ldr	r3, [pc, #156]	; (8005cd8 <HAL_UART_MspInit+0x28c>)
 8005c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	613b      	str	r3, [r7, #16]
 8005c44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005c46:	4b24      	ldr	r3, [pc, #144]	; (8005cd8 <HAL_UART_MspInit+0x28c>)
 8005c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c4c:	4a22      	ldr	r2, [pc, #136]	; (8005cd8 <HAL_UART_MspInit+0x28c>)
 8005c4e:	f043 0308 	orr.w	r3, r3, #8
 8005c52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005c56:	4b20      	ldr	r3, [pc, #128]	; (8005cd8 <HAL_UART_MspInit+0x28c>)
 8005c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c5c:	f003 0308 	and.w	r3, r3, #8
 8005c60:	60fb      	str	r3, [r7, #12]
 8005c62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005c64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c68:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c72:	2300      	movs	r3, #0
 8005c74:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005c7e:	2307      	movs	r3, #7
 8005c80:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c84:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005c88:	4619      	mov	r1, r3
 8005c8a:	481a      	ldr	r0, [pc, #104]	; (8005cf4 <HAL_UART_MspInit+0x2a8>)
 8005c8c:	f003 fbd0 	bl	8009430 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005c90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c94:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c98:	2302      	movs	r3, #2
 8005c9a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005caa:	2307      	movs	r3, #7
 8005cac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005cb0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	4810      	ldr	r0, [pc, #64]	; (8005cf8 <HAL_UART_MspInit+0x2ac>)
 8005cb8:	f003 fbba 	bl	8009430 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	2100      	movs	r1, #0
 8005cc0:	2027      	movs	r0, #39	; 0x27
 8005cc2:	f000 fb84 	bl	80063ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005cc6:	2027      	movs	r0, #39	; 0x27
 8005cc8:	f000 fb9b 	bl	8006402 <HAL_NVIC_EnableIRQ>
}
 8005ccc:	bf00      	nop
 8005cce:	37f0      	adds	r7, #240	; 0xf0
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	40011000 	.word	0x40011000
 8005cd8:	58024400 	.word	0x58024400
 8005cdc:	58020000 	.word	0x58020000
 8005ce0:	2400088c 	.word	0x2400088c
 8005ce4:	40020010 	.word	0x40020010
 8005ce8:	24000904 	.word	0x24000904
 8005cec:	40020028 	.word	0x40020028
 8005cf0:	40004800 	.word	0x40004800
 8005cf4:	58020400 	.word	0x58020400
 8005cf8:	58020c00 	.word	0x58020c00

08005cfc <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a1e      	ldr	r2, [pc, #120]	; (8005d84 <HAL_UART_MspDeInit+0x88>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d11b      	bne.n	8005d46 <HAL_UART_MspDeInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8005d0e:	4b1e      	ldr	r3, [pc, #120]	; (8005d88 <HAL_UART_MspDeInit+0x8c>)
 8005d10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d14:	4a1c      	ldr	r2, [pc, #112]	; (8005d88 <HAL_UART_MspDeInit+0x8c>)
 8005d16:	f023 0310 	bic.w	r3, r3, #16
 8005d1a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8005d1e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005d22:	481a      	ldr	r0, [pc, #104]	; (8005d8c <HAL_UART_MspDeInit+0x90>)
 8005d24:	f003 fd2c 	bl	8009780 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 fee8 	bl	8006b04 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f000 fee3 	bl	8006b04 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8005d3e:	2025      	movs	r0, #37	; 0x25
 8005d40:	f000 fb6d 	bl	800641e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8005d44:	e019      	b.n	8005d7a <HAL_UART_MspDeInit+0x7e>
  else if(huart->Instance==USART3)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a11      	ldr	r2, [pc, #68]	; (8005d90 <HAL_UART_MspDeInit+0x94>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d114      	bne.n	8005d7a <HAL_UART_MspDeInit+0x7e>
    __HAL_RCC_USART3_CLK_DISABLE();
 8005d50:	4b0d      	ldr	r3, [pc, #52]	; (8005d88 <HAL_UART_MspDeInit+0x8c>)
 8005d52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d56:	4a0c      	ldr	r2, [pc, #48]	; (8005d88 <HAL_UART_MspDeInit+0x8c>)
 8005d58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d5c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8005d60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005d64:	480b      	ldr	r0, [pc, #44]	; (8005d94 <HAL_UART_MspDeInit+0x98>)
 8005d66:	f003 fd0b 	bl	8009780 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_9);
 8005d6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d6e:	480a      	ldr	r0, [pc, #40]	; (8005d98 <HAL_UART_MspDeInit+0x9c>)
 8005d70:	f003 fd06 	bl	8009780 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 8005d74:	2027      	movs	r0, #39	; 0x27
 8005d76:	f000 fb52 	bl	800641e <HAL_NVIC_DisableIRQ>
}
 8005d7a:	bf00      	nop
 8005d7c:	3708      	adds	r7, #8
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	40011000 	.word	0x40011000
 8005d88:	58024400 	.word	0x58024400
 8005d8c:	58020000 	.word	0x58020000
 8005d90:	40004800 	.word	0x40004800
 8005d94:	58020400 	.word	0x58020400
 8005d98:	58020c00 	.word	0x58020c00

08005d9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005da0:	e7fe      	b.n	8005da0 <NMI_Handler+0x4>

08005da2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005da2:	b480      	push	{r7}
 8005da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005da6:	e7fe      	b.n	8005da6 <HardFault_Handler+0x4>

08005da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005da8:	b480      	push	{r7}
 8005daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005dac:	e7fe      	b.n	8005dac <MemManage_Handler+0x4>

08005dae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005dae:	b480      	push	{r7}
 8005db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005db2:	e7fe      	b.n	8005db2 <BusFault_Handler+0x4>

08005db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005db4:	b480      	push	{r7}
 8005db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005db8:	e7fe      	b.n	8005db8 <UsageFault_Handler+0x4>

08005dba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005dba:	b480      	push	{r7}
 8005dbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005dbe:	bf00      	nop
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005dcc:	bf00      	nop
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr

08005dd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005dd6:	b480      	push	{r7}
 8005dd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005dda:	bf00      	nop
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005de8:	f000 f9d2 	bl	8006190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005dec:	bf00      	nop
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005df4:	4802      	ldr	r0, [pc, #8]	; (8005e00 <DMA1_Stream0_IRQHandler+0x10>)
 8005df6:	f002 f809 	bl	8007e0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8005dfa:	bf00      	nop
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	2400088c 	.word	0x2400088c

08005e04 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005e08:	4802      	ldr	r0, [pc, #8]	; (8005e14 <DMA1_Stream1_IRQHandler+0x10>)
 8005e0a:	f001 ffff 	bl	8007e0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8005e0e:	bf00      	nop
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	24000904 	.word	0x24000904

08005e18 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005e1c:	4802      	ldr	r0, [pc, #8]	; (8005e28 <TIM1_BRK_IRQHandler+0x10>)
 8005e1e:	f006 fed3 	bl	800cbc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8005e22:	bf00      	nop
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	240004b8 	.word	0x240004b8

08005e2c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005e30:	4802      	ldr	r0, [pc, #8]	; (8005e3c <TIM1_UP_IRQHandler+0x10>)
 8005e32:	f006 fec9 	bl	800cbc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8005e36:	bf00      	nop
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	240004b8 	.word	0x240004b8

08005e40 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005e44:	4802      	ldr	r0, [pc, #8]	; (8005e50 <TIM1_TRG_COM_IRQHandler+0x10>)
 8005e46:	f006 febf 	bl	800cbc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8005e4a:	bf00      	nop
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	240004b8 	.word	0x240004b8

08005e54 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005e58:	4802      	ldr	r0, [pc, #8]	; (8005e64 <TIM1_CC_IRQHandler+0x10>)
 8005e5a:	f006 feb5 	bl	800cbc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8005e5e:	bf00      	nop
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	240004b8 	.word	0x240004b8

08005e68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005e6c:	4802      	ldr	r0, [pc, #8]	; (8005e78 <USART1_IRQHandler+0x10>)
 8005e6e:	f008 f983 	bl	800e178 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005e72:	bf00      	nop
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	24000764 	.word	0x24000764

08005e7c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005e80:	4802      	ldr	r0, [pc, #8]	; (8005e8c <USART3_IRQHandler+0x10>)
 8005e82:	f008 f979 	bl	800e178 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005e86:	bf00      	nop
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	240007f8 	.word	0x240007f8

08005e90 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005e94:	4803      	ldr	r0, [pc, #12]	; (8005ea4 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8005e96:	f006 fe97 	bl	800cbc8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8005e9a:	4803      	ldr	r0, [pc, #12]	; (8005ea8 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8005e9c:	f006 fe94 	bl	800cbc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8005ea0:	bf00      	nop
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	24000634 	.word	0x24000634
 8005ea8:	24000680 	.word	0x24000680

08005eac <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005eb0:	4802      	ldr	r0, [pc, #8]	; (8005ebc <TIM8_UP_TIM13_IRQHandler+0x10>)
 8005eb2:	f006 fe89 	bl	800cbc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8005eb6:	bf00      	nop
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	24000634 	.word	0x24000634

08005ec0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005ec4:	4802      	ldr	r0, [pc, #8]	; (8005ed0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8005ec6:	f006 fe7f 	bl	800cbc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8005eca:	bf00      	nop
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	24000634 	.word	0x24000634

08005ed4 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005ed8:	4802      	ldr	r0, [pc, #8]	; (8005ee4 <TIM8_CC_IRQHandler+0x10>)
 8005eda:	f006 fe75 	bl	800cbc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8005ede:	bf00      	nop
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	24000634 	.word	0x24000634

08005ee8 <TIM23_IRQHandler>:

/**
  * @brief This function handles TIM23 global interrupt.
  */
void TIM23_IRQHandler(void)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM23_IRQn 0 */

  /* USER CODE END TIM23_IRQn 0 */
  HAL_TIM_IRQHandler(&htim23);
 8005eec:	4802      	ldr	r0, [pc, #8]	; (8005ef8 <TIM23_IRQHandler+0x10>)
 8005eee:	f006 fe6b 	bl	800cbc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM23_IRQn 1 */

  /* USER CODE END TIM23_IRQn 1 */
}
 8005ef2:	bf00      	nop
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	24000718 	.word	0x24000718

08005efc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005f04:	4a14      	ldr	r2, [pc, #80]	; (8005f58 <_sbrk+0x5c>)
 8005f06:	4b15      	ldr	r3, [pc, #84]	; (8005f5c <_sbrk+0x60>)
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005f10:	4b13      	ldr	r3, [pc, #76]	; (8005f60 <_sbrk+0x64>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d102      	bne.n	8005f1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005f18:	4b11      	ldr	r3, [pc, #68]	; (8005f60 <_sbrk+0x64>)
 8005f1a:	4a12      	ldr	r2, [pc, #72]	; (8005f64 <_sbrk+0x68>)
 8005f1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005f1e:	4b10      	ldr	r3, [pc, #64]	; (8005f60 <_sbrk+0x64>)
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4413      	add	r3, r2
 8005f26:	693a      	ldr	r2, [r7, #16]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d207      	bcs.n	8005f3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005f2c:	f00a f964 	bl	80101f8 <__errno>
 8005f30:	4603      	mov	r3, r0
 8005f32:	220c      	movs	r2, #12
 8005f34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005f36:	f04f 33ff 	mov.w	r3, #4294967295
 8005f3a:	e009      	b.n	8005f50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005f3c:	4b08      	ldr	r3, [pc, #32]	; (8005f60 <_sbrk+0x64>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005f42:	4b07      	ldr	r3, [pc, #28]	; (8005f60 <_sbrk+0x64>)
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4413      	add	r3, r2
 8005f4a:	4a05      	ldr	r2, [pc, #20]	; (8005f60 <_sbrk+0x64>)
 8005f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3718      	adds	r7, #24
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	24050000 	.word	0x24050000
 8005f5c:	00000400 	.word	0x00000400
 8005f60:	24002034 	.word	0x24002034
 8005f64:	24002188 	.word	0x24002188

08005f68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005f6c:	4b32      	ldr	r3, [pc, #200]	; (8006038 <SystemInit+0xd0>)
 8005f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f72:	4a31      	ldr	r2, [pc, #196]	; (8006038 <SystemInit+0xd0>)
 8005f74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005f78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005f7c:	4b2f      	ldr	r3, [pc, #188]	; (800603c <SystemInit+0xd4>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 030f 	and.w	r3, r3, #15
 8005f84:	2b06      	cmp	r3, #6
 8005f86:	d807      	bhi.n	8005f98 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005f88:	4b2c      	ldr	r3, [pc, #176]	; (800603c <SystemInit+0xd4>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f023 030f 	bic.w	r3, r3, #15
 8005f90:	4a2a      	ldr	r2, [pc, #168]	; (800603c <SystemInit+0xd4>)
 8005f92:	f043 0307 	orr.w	r3, r3, #7
 8005f96:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005f98:	4b29      	ldr	r3, [pc, #164]	; (8006040 <SystemInit+0xd8>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a28      	ldr	r2, [pc, #160]	; (8006040 <SystemInit+0xd8>)
 8005f9e:	f043 0301 	orr.w	r3, r3, #1
 8005fa2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005fa4:	4b26      	ldr	r3, [pc, #152]	; (8006040 <SystemInit+0xd8>)
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005faa:	4b25      	ldr	r3, [pc, #148]	; (8006040 <SystemInit+0xd8>)
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	4924      	ldr	r1, [pc, #144]	; (8006040 <SystemInit+0xd8>)
 8005fb0:	4b24      	ldr	r3, [pc, #144]	; (8006044 <SystemInit+0xdc>)
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005fb6:	4b21      	ldr	r3, [pc, #132]	; (800603c <SystemInit+0xd4>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0308 	and.w	r3, r3, #8
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d007      	beq.n	8005fd2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005fc2:	4b1e      	ldr	r3, [pc, #120]	; (800603c <SystemInit+0xd4>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f023 030f 	bic.w	r3, r3, #15
 8005fca:	4a1c      	ldr	r2, [pc, #112]	; (800603c <SystemInit+0xd4>)
 8005fcc:	f043 0307 	orr.w	r3, r3, #7
 8005fd0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005fd2:	4b1b      	ldr	r3, [pc, #108]	; (8006040 <SystemInit+0xd8>)
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005fd8:	4b19      	ldr	r3, [pc, #100]	; (8006040 <SystemInit+0xd8>)
 8005fda:	2200      	movs	r2, #0
 8005fdc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8005fde:	4b18      	ldr	r3, [pc, #96]	; (8006040 <SystemInit+0xd8>)
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005fe4:	4b16      	ldr	r3, [pc, #88]	; (8006040 <SystemInit+0xd8>)
 8005fe6:	4a18      	ldr	r2, [pc, #96]	; (8006048 <SystemInit+0xe0>)
 8005fe8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005fea:	4b15      	ldr	r3, [pc, #84]	; (8006040 <SystemInit+0xd8>)
 8005fec:	4a17      	ldr	r2, [pc, #92]	; (800604c <SystemInit+0xe4>)
 8005fee:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005ff0:	4b13      	ldr	r3, [pc, #76]	; (8006040 <SystemInit+0xd8>)
 8005ff2:	4a17      	ldr	r2, [pc, #92]	; (8006050 <SystemInit+0xe8>)
 8005ff4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005ff6:	4b12      	ldr	r3, [pc, #72]	; (8006040 <SystemInit+0xd8>)
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005ffc:	4b10      	ldr	r3, [pc, #64]	; (8006040 <SystemInit+0xd8>)
 8005ffe:	4a14      	ldr	r2, [pc, #80]	; (8006050 <SystemInit+0xe8>)
 8006000:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8006002:	4b0f      	ldr	r3, [pc, #60]	; (8006040 <SystemInit+0xd8>)
 8006004:	2200      	movs	r2, #0
 8006006:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8006008:	4b0d      	ldr	r3, [pc, #52]	; (8006040 <SystemInit+0xd8>)
 800600a:	4a11      	ldr	r2, [pc, #68]	; (8006050 <SystemInit+0xe8>)
 800600c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800600e:	4b0c      	ldr	r3, [pc, #48]	; (8006040 <SystemInit+0xd8>)
 8006010:	2200      	movs	r2, #0
 8006012:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006014:	4b0a      	ldr	r3, [pc, #40]	; (8006040 <SystemInit+0xd8>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a09      	ldr	r2, [pc, #36]	; (8006040 <SystemInit+0xd8>)
 800601a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800601e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8006020:	4b07      	ldr	r3, [pc, #28]	; (8006040 <SystemInit+0xd8>)
 8006022:	2200      	movs	r2, #0
 8006024:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8006026:	4b0b      	ldr	r3, [pc, #44]	; (8006054 <SystemInit+0xec>)
 8006028:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800602c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800602e:	bf00      	nop
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr
 8006038:	e000ed00 	.word	0xe000ed00
 800603c:	52002000 	.word	0x52002000
 8006040:	58024400 	.word	0x58024400
 8006044:	eaf6ed7f 	.word	0xeaf6ed7f
 8006048:	02020200 	.word	0x02020200
 800604c:	01ff0000 	.word	0x01ff0000
 8006050:	01010280 	.word	0x01010280
 8006054:	52004000 	.word	0x52004000

08006058 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8006058:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006090 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800605c:	f7ff ff84 	bl	8005f68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006060:	480c      	ldr	r0, [pc, #48]	; (8006094 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006062:	490d      	ldr	r1, [pc, #52]	; (8006098 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006064:	4a0d      	ldr	r2, [pc, #52]	; (800609c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006066:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006068:	e002      	b.n	8006070 <LoopCopyDataInit>

0800606a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800606a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800606c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800606e:	3304      	adds	r3, #4

08006070 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006070:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006072:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006074:	d3f9      	bcc.n	800606a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006076:	4a0a      	ldr	r2, [pc, #40]	; (80060a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006078:	4c0a      	ldr	r4, [pc, #40]	; (80060a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800607a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800607c:	e001      	b.n	8006082 <LoopFillZerobss>

0800607e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800607e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006080:	3204      	adds	r2, #4

08006082 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006082:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006084:	d3fb      	bcc.n	800607e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006086:	f00a f8bd 	bl	8010204 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800608a:	f7fb f9e9 	bl	8001460 <main>
  bx  lr
 800608e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006090:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8006094:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8006098:	240000b4 	.word	0x240000b4
  ldr r2, =_sidata
 800609c:	0801082c 	.word	0x0801082c
  ldr r2, =_sbss
 80060a0:	240000b8 	.word	0x240000b8
  ldr r4, =_ebss
 80060a4:	24002184 	.word	0x24002184

080060a8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80060a8:	e7fe      	b.n	80060a8 <ADC3_IRQHandler>
	...

080060ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80060b2:	2003      	movs	r0, #3
 80060b4:	f000 f980 	bl	80063b8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80060b8:	f004 fa48 	bl	800a54c <HAL_RCC_GetSysClockFreq>
 80060bc:	4602      	mov	r2, r0
 80060be:	4b15      	ldr	r3, [pc, #84]	; (8006114 <HAL_Init+0x68>)
 80060c0:	699b      	ldr	r3, [r3, #24]
 80060c2:	0a1b      	lsrs	r3, r3, #8
 80060c4:	f003 030f 	and.w	r3, r3, #15
 80060c8:	4913      	ldr	r1, [pc, #76]	; (8006118 <HAL_Init+0x6c>)
 80060ca:	5ccb      	ldrb	r3, [r1, r3]
 80060cc:	f003 031f 	and.w	r3, r3, #31
 80060d0:	fa22 f303 	lsr.w	r3, r2, r3
 80060d4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80060d6:	4b0f      	ldr	r3, [pc, #60]	; (8006114 <HAL_Init+0x68>)
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	f003 030f 	and.w	r3, r3, #15
 80060de:	4a0e      	ldr	r2, [pc, #56]	; (8006118 <HAL_Init+0x6c>)
 80060e0:	5cd3      	ldrb	r3, [r2, r3]
 80060e2:	f003 031f 	and.w	r3, r3, #31
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	fa22 f303 	lsr.w	r3, r2, r3
 80060ec:	4a0b      	ldr	r2, [pc, #44]	; (800611c <HAL_Init+0x70>)
 80060ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80060f0:	4a0b      	ldr	r2, [pc, #44]	; (8006120 <HAL_Init+0x74>)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80060f6:	200f      	movs	r0, #15
 80060f8:	f000 f814 	bl	8006124 <HAL_InitTick>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d001      	beq.n	8006106 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e002      	b.n	800610c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006106:	f7ff fa3f 	bl	8005588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800610a:	2300      	movs	r3, #0
}
 800610c:	4618      	mov	r0, r3
 800610e:	3708      	adds	r7, #8
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	58024400 	.word	0x58024400
 8006118:	080107cc 	.word	0x080107cc
 800611c:	24000058 	.word	0x24000058
 8006120:	24000054 	.word	0x24000054

08006124 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800612c:	4b15      	ldr	r3, [pc, #84]	; (8006184 <HAL_InitTick+0x60>)
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d101      	bne.n	8006138 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e021      	b.n	800617c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006138:	4b13      	ldr	r3, [pc, #76]	; (8006188 <HAL_InitTick+0x64>)
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	4b11      	ldr	r3, [pc, #68]	; (8006184 <HAL_InitTick+0x60>)
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	4619      	mov	r1, r3
 8006142:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006146:	fbb3 f3f1 	udiv	r3, r3, r1
 800614a:	fbb2 f3f3 	udiv	r3, r2, r3
 800614e:	4618      	mov	r0, r3
 8006150:	f000 f973 	bl	800643a <HAL_SYSTICK_Config>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d001      	beq.n	800615e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e00e      	b.n	800617c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2b0f      	cmp	r3, #15
 8006162:	d80a      	bhi.n	800617a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006164:	2200      	movs	r2, #0
 8006166:	6879      	ldr	r1, [r7, #4]
 8006168:	f04f 30ff 	mov.w	r0, #4294967295
 800616c:	f000 f92f 	bl	80063ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006170:	4a06      	ldr	r2, [pc, #24]	; (800618c <HAL_InitTick+0x68>)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006176:	2300      	movs	r3, #0
 8006178:	e000      	b.n	800617c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
}
 800617c:	4618      	mov	r0, r3
 800617e:	3708      	adds	r7, #8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	24000060 	.word	0x24000060
 8006188:	24000054 	.word	0x24000054
 800618c:	2400005c 	.word	0x2400005c

08006190 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006190:	b480      	push	{r7}
 8006192:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006194:	4b06      	ldr	r3, [pc, #24]	; (80061b0 <HAL_IncTick+0x20>)
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	461a      	mov	r2, r3
 800619a:	4b06      	ldr	r3, [pc, #24]	; (80061b4 <HAL_IncTick+0x24>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4413      	add	r3, r2
 80061a0:	4a04      	ldr	r2, [pc, #16]	; (80061b4 <HAL_IncTick+0x24>)
 80061a2:	6013      	str	r3, [r2, #0]
}
 80061a4:	bf00      	nop
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	24000060 	.word	0x24000060
 80061b4:	24002038 	.word	0x24002038

080061b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80061b8:	b480      	push	{r7}
 80061ba:	af00      	add	r7, sp, #0
  return uwTick;
 80061bc:	4b03      	ldr	r3, [pc, #12]	; (80061cc <HAL_GetTick+0x14>)
 80061be:	681b      	ldr	r3, [r3, #0]
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	24002038 	.word	0x24002038

080061d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f003 0307 	and.w	r3, r3, #7
 80061de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80061e0:	4b0b      	ldr	r3, [pc, #44]	; (8006210 <__NVIC_SetPriorityGrouping+0x40>)
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80061e6:	68ba      	ldr	r2, [r7, #8]
 80061e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80061ec:	4013      	ands	r3, r2
 80061ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80061f8:	4b06      	ldr	r3, [pc, #24]	; (8006214 <__NVIC_SetPriorityGrouping+0x44>)
 80061fa:	4313      	orrs	r3, r2
 80061fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80061fe:	4a04      	ldr	r2, [pc, #16]	; (8006210 <__NVIC_SetPriorityGrouping+0x40>)
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	60d3      	str	r3, [r2, #12]
}
 8006204:	bf00      	nop
 8006206:	3714      	adds	r7, #20
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr
 8006210:	e000ed00 	.word	0xe000ed00
 8006214:	05fa0000 	.word	0x05fa0000

08006218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006218:	b480      	push	{r7}
 800621a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800621c:	4b04      	ldr	r3, [pc, #16]	; (8006230 <__NVIC_GetPriorityGrouping+0x18>)
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	0a1b      	lsrs	r3, r3, #8
 8006222:	f003 0307 	and.w	r3, r3, #7
}
 8006226:	4618      	mov	r0, r3
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr
 8006230:	e000ed00 	.word	0xe000ed00

08006234 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	4603      	mov	r3, r0
 800623c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800623e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006242:	2b00      	cmp	r3, #0
 8006244:	db0b      	blt.n	800625e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006246:	88fb      	ldrh	r3, [r7, #6]
 8006248:	f003 021f 	and.w	r2, r3, #31
 800624c:	4907      	ldr	r1, [pc, #28]	; (800626c <__NVIC_EnableIRQ+0x38>)
 800624e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006252:	095b      	lsrs	r3, r3, #5
 8006254:	2001      	movs	r0, #1
 8006256:	fa00 f202 	lsl.w	r2, r0, r2
 800625a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800625e:	bf00      	nop
 8006260:	370c      	adds	r7, #12
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	e000e100 	.word	0xe000e100

08006270 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	4603      	mov	r3, r0
 8006278:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800627a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800627e:	2b00      	cmp	r3, #0
 8006280:	db12      	blt.n	80062a8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006282:	88fb      	ldrh	r3, [r7, #6]
 8006284:	f003 021f 	and.w	r2, r3, #31
 8006288:	490a      	ldr	r1, [pc, #40]	; (80062b4 <__NVIC_DisableIRQ+0x44>)
 800628a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800628e:	095b      	lsrs	r3, r3, #5
 8006290:	2001      	movs	r0, #1
 8006292:	fa00 f202 	lsl.w	r2, r0, r2
 8006296:	3320      	adds	r3, #32
 8006298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800629c:	f3bf 8f4f 	dsb	sy
}
 80062a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80062a2:	f3bf 8f6f 	isb	sy
}
 80062a6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80062a8:	bf00      	nop
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr
 80062b4:	e000e100 	.word	0xe000e100

080062b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	4603      	mov	r3, r0
 80062c0:	6039      	str	r1, [r7, #0]
 80062c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80062c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	db0a      	blt.n	80062e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	b2da      	uxtb	r2, r3
 80062d0:	490c      	ldr	r1, [pc, #48]	; (8006304 <__NVIC_SetPriority+0x4c>)
 80062d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80062d6:	0112      	lsls	r2, r2, #4
 80062d8:	b2d2      	uxtb	r2, r2
 80062da:	440b      	add	r3, r1
 80062dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80062e0:	e00a      	b.n	80062f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	b2da      	uxtb	r2, r3
 80062e6:	4908      	ldr	r1, [pc, #32]	; (8006308 <__NVIC_SetPriority+0x50>)
 80062e8:	88fb      	ldrh	r3, [r7, #6]
 80062ea:	f003 030f 	and.w	r3, r3, #15
 80062ee:	3b04      	subs	r3, #4
 80062f0:	0112      	lsls	r2, r2, #4
 80062f2:	b2d2      	uxtb	r2, r2
 80062f4:	440b      	add	r3, r1
 80062f6:	761a      	strb	r2, [r3, #24]
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr
 8006304:	e000e100 	.word	0xe000e100
 8006308:	e000ed00 	.word	0xe000ed00

0800630c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800630c:	b480      	push	{r7}
 800630e:	b089      	sub	sp, #36	; 0x24
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f003 0307 	and.w	r3, r3, #7
 800631e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	f1c3 0307 	rsb	r3, r3, #7
 8006326:	2b04      	cmp	r3, #4
 8006328:	bf28      	it	cs
 800632a:	2304      	movcs	r3, #4
 800632c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	3304      	adds	r3, #4
 8006332:	2b06      	cmp	r3, #6
 8006334:	d902      	bls.n	800633c <NVIC_EncodePriority+0x30>
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	3b03      	subs	r3, #3
 800633a:	e000      	b.n	800633e <NVIC_EncodePriority+0x32>
 800633c:	2300      	movs	r3, #0
 800633e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006340:	f04f 32ff 	mov.w	r2, #4294967295
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	fa02 f303 	lsl.w	r3, r2, r3
 800634a:	43da      	mvns	r2, r3
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	401a      	ands	r2, r3
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006354:	f04f 31ff 	mov.w	r1, #4294967295
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	fa01 f303 	lsl.w	r3, r1, r3
 800635e:	43d9      	mvns	r1, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006364:	4313      	orrs	r3, r2
         );
}
 8006366:	4618      	mov	r0, r3
 8006368:	3724      	adds	r7, #36	; 0x24
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
	...

08006374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	3b01      	subs	r3, #1
 8006380:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006384:	d301      	bcc.n	800638a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006386:	2301      	movs	r3, #1
 8006388:	e00f      	b.n	80063aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800638a:	4a0a      	ldr	r2, [pc, #40]	; (80063b4 <SysTick_Config+0x40>)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	3b01      	subs	r3, #1
 8006390:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006392:	210f      	movs	r1, #15
 8006394:	f04f 30ff 	mov.w	r0, #4294967295
 8006398:	f7ff ff8e 	bl	80062b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800639c:	4b05      	ldr	r3, [pc, #20]	; (80063b4 <SysTick_Config+0x40>)
 800639e:	2200      	movs	r2, #0
 80063a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80063a2:	4b04      	ldr	r3, [pc, #16]	; (80063b4 <SysTick_Config+0x40>)
 80063a4:	2207      	movs	r2, #7
 80063a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3708      	adds	r7, #8
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	e000e010 	.word	0xe000e010

080063b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f7ff ff05 	bl	80061d0 <__NVIC_SetPriorityGrouping>
}
 80063c6:	bf00      	nop
 80063c8:	3708      	adds	r7, #8
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}

080063ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b086      	sub	sp, #24
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	4603      	mov	r3, r0
 80063d6:	60b9      	str	r1, [r7, #8]
 80063d8:	607a      	str	r2, [r7, #4]
 80063da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80063dc:	f7ff ff1c 	bl	8006218 <__NVIC_GetPriorityGrouping>
 80063e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	68b9      	ldr	r1, [r7, #8]
 80063e6:	6978      	ldr	r0, [r7, #20]
 80063e8:	f7ff ff90 	bl	800630c <NVIC_EncodePriority>
 80063ec:	4602      	mov	r2, r0
 80063ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80063f2:	4611      	mov	r1, r2
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7ff ff5f 	bl	80062b8 <__NVIC_SetPriority>
}
 80063fa:	bf00      	nop
 80063fc:	3718      	adds	r7, #24
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006402:	b580      	push	{r7, lr}
 8006404:	b082      	sub	sp, #8
 8006406:	af00      	add	r7, sp, #0
 8006408:	4603      	mov	r3, r0
 800640a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800640c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006410:	4618      	mov	r0, r3
 8006412:	f7ff ff0f 	bl	8006234 <__NVIC_EnableIRQ>
}
 8006416:	bf00      	nop
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b082      	sub	sp, #8
 8006422:	af00      	add	r7, sp, #0
 8006424:	4603      	mov	r3, r0
 8006426:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006428:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800642c:	4618      	mov	r0, r3
 800642e:	f7ff ff1f 	bl	8006270 <__NVIC_DisableIRQ>
}
 8006432:	bf00      	nop
 8006434:	3708      	adds	r7, #8
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b082      	sub	sp, #8
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f7ff ff96 	bl	8006374 <SysTick_Config>
 8006448:	4603      	mov	r3, r0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3708      	adds	r7, #8
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
	...

08006454 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b086      	sub	sp, #24
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800645c:	f7ff feac 	bl	80061b8 <HAL_GetTick>
 8006460:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d101      	bne.n	800646c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e312      	b.n	8006a92 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a66      	ldr	r2, [pc, #408]	; (800660c <HAL_DMA_Init+0x1b8>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d04a      	beq.n	800650c <HAL_DMA_Init+0xb8>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a65      	ldr	r2, [pc, #404]	; (8006610 <HAL_DMA_Init+0x1bc>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d045      	beq.n	800650c <HAL_DMA_Init+0xb8>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a63      	ldr	r2, [pc, #396]	; (8006614 <HAL_DMA_Init+0x1c0>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d040      	beq.n	800650c <HAL_DMA_Init+0xb8>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a62      	ldr	r2, [pc, #392]	; (8006618 <HAL_DMA_Init+0x1c4>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d03b      	beq.n	800650c <HAL_DMA_Init+0xb8>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a60      	ldr	r2, [pc, #384]	; (800661c <HAL_DMA_Init+0x1c8>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d036      	beq.n	800650c <HAL_DMA_Init+0xb8>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a5f      	ldr	r2, [pc, #380]	; (8006620 <HAL_DMA_Init+0x1cc>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d031      	beq.n	800650c <HAL_DMA_Init+0xb8>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a5d      	ldr	r2, [pc, #372]	; (8006624 <HAL_DMA_Init+0x1d0>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d02c      	beq.n	800650c <HAL_DMA_Init+0xb8>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a5c      	ldr	r2, [pc, #368]	; (8006628 <HAL_DMA_Init+0x1d4>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d027      	beq.n	800650c <HAL_DMA_Init+0xb8>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a5a      	ldr	r2, [pc, #360]	; (800662c <HAL_DMA_Init+0x1d8>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d022      	beq.n	800650c <HAL_DMA_Init+0xb8>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a59      	ldr	r2, [pc, #356]	; (8006630 <HAL_DMA_Init+0x1dc>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d01d      	beq.n	800650c <HAL_DMA_Init+0xb8>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a57      	ldr	r2, [pc, #348]	; (8006634 <HAL_DMA_Init+0x1e0>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d018      	beq.n	800650c <HAL_DMA_Init+0xb8>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a56      	ldr	r2, [pc, #344]	; (8006638 <HAL_DMA_Init+0x1e4>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d013      	beq.n	800650c <HAL_DMA_Init+0xb8>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a54      	ldr	r2, [pc, #336]	; (800663c <HAL_DMA_Init+0x1e8>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d00e      	beq.n	800650c <HAL_DMA_Init+0xb8>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a53      	ldr	r2, [pc, #332]	; (8006640 <HAL_DMA_Init+0x1ec>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d009      	beq.n	800650c <HAL_DMA_Init+0xb8>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a51      	ldr	r2, [pc, #324]	; (8006644 <HAL_DMA_Init+0x1f0>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d004      	beq.n	800650c <HAL_DMA_Init+0xb8>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a50      	ldr	r2, [pc, #320]	; (8006648 <HAL_DMA_Init+0x1f4>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d101      	bne.n	8006510 <HAL_DMA_Init+0xbc>
 800650c:	2301      	movs	r3, #1
 800650e:	e000      	b.n	8006512 <HAL_DMA_Init+0xbe>
 8006510:	2300      	movs	r3, #0
 8006512:	2b00      	cmp	r3, #0
 8006514:	f000 813c 	beq.w	8006790 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2202      	movs	r2, #2
 800651c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a37      	ldr	r2, [pc, #220]	; (800660c <HAL_DMA_Init+0x1b8>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d04a      	beq.n	80065c8 <HAL_DMA_Init+0x174>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a36      	ldr	r2, [pc, #216]	; (8006610 <HAL_DMA_Init+0x1bc>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d045      	beq.n	80065c8 <HAL_DMA_Init+0x174>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a34      	ldr	r2, [pc, #208]	; (8006614 <HAL_DMA_Init+0x1c0>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d040      	beq.n	80065c8 <HAL_DMA_Init+0x174>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a33      	ldr	r2, [pc, #204]	; (8006618 <HAL_DMA_Init+0x1c4>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d03b      	beq.n	80065c8 <HAL_DMA_Init+0x174>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a31      	ldr	r2, [pc, #196]	; (800661c <HAL_DMA_Init+0x1c8>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d036      	beq.n	80065c8 <HAL_DMA_Init+0x174>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a30      	ldr	r2, [pc, #192]	; (8006620 <HAL_DMA_Init+0x1cc>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d031      	beq.n	80065c8 <HAL_DMA_Init+0x174>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a2e      	ldr	r2, [pc, #184]	; (8006624 <HAL_DMA_Init+0x1d0>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d02c      	beq.n	80065c8 <HAL_DMA_Init+0x174>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a2d      	ldr	r2, [pc, #180]	; (8006628 <HAL_DMA_Init+0x1d4>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d027      	beq.n	80065c8 <HAL_DMA_Init+0x174>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a2b      	ldr	r2, [pc, #172]	; (800662c <HAL_DMA_Init+0x1d8>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d022      	beq.n	80065c8 <HAL_DMA_Init+0x174>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a2a      	ldr	r2, [pc, #168]	; (8006630 <HAL_DMA_Init+0x1dc>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d01d      	beq.n	80065c8 <HAL_DMA_Init+0x174>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a28      	ldr	r2, [pc, #160]	; (8006634 <HAL_DMA_Init+0x1e0>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d018      	beq.n	80065c8 <HAL_DMA_Init+0x174>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a27      	ldr	r2, [pc, #156]	; (8006638 <HAL_DMA_Init+0x1e4>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d013      	beq.n	80065c8 <HAL_DMA_Init+0x174>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a25      	ldr	r2, [pc, #148]	; (800663c <HAL_DMA_Init+0x1e8>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d00e      	beq.n	80065c8 <HAL_DMA_Init+0x174>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a24      	ldr	r2, [pc, #144]	; (8006640 <HAL_DMA_Init+0x1ec>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d009      	beq.n	80065c8 <HAL_DMA_Init+0x174>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a22      	ldr	r2, [pc, #136]	; (8006644 <HAL_DMA_Init+0x1f0>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d004      	beq.n	80065c8 <HAL_DMA_Init+0x174>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a21      	ldr	r2, [pc, #132]	; (8006648 <HAL_DMA_Init+0x1f4>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d108      	bne.n	80065da <HAL_DMA_Init+0x186>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f022 0201 	bic.w	r2, r2, #1
 80065d6:	601a      	str	r2, [r3, #0]
 80065d8:	e007      	b.n	80065ea <HAL_DMA_Init+0x196>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f022 0201 	bic.w	r2, r2, #1
 80065e8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80065ea:	e02f      	b.n	800664c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80065ec:	f7ff fde4 	bl	80061b8 <HAL_GetTick>
 80065f0:	4602      	mov	r2, r0
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	2b05      	cmp	r3, #5
 80065f8:	d928      	bls.n	800664c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2220      	movs	r2, #32
 80065fe:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2203      	movs	r2, #3
 8006604:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e242      	b.n	8006a92 <HAL_DMA_Init+0x63e>
 800660c:	40020010 	.word	0x40020010
 8006610:	40020028 	.word	0x40020028
 8006614:	40020040 	.word	0x40020040
 8006618:	40020058 	.word	0x40020058
 800661c:	40020070 	.word	0x40020070
 8006620:	40020088 	.word	0x40020088
 8006624:	400200a0 	.word	0x400200a0
 8006628:	400200b8 	.word	0x400200b8
 800662c:	40020410 	.word	0x40020410
 8006630:	40020428 	.word	0x40020428
 8006634:	40020440 	.word	0x40020440
 8006638:	40020458 	.word	0x40020458
 800663c:	40020470 	.word	0x40020470
 8006640:	40020488 	.word	0x40020488
 8006644:	400204a0 	.word	0x400204a0
 8006648:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	2b00      	cmp	r3, #0
 8006658:	d1c8      	bne.n	80065ec <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	4b83      	ldr	r3, [pc, #524]	; (8006874 <HAL_DMA_Init+0x420>)
 8006666:	4013      	ands	r3, r2
 8006668:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006672:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800667e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800668a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a1b      	ldr	r3, [r3, #32]
 8006690:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	4313      	orrs	r3, r2
 8006696:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669c:	2b04      	cmp	r3, #4
 800669e:	d107      	bne.n	80066b0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a8:	4313      	orrs	r3, r2
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	2b28      	cmp	r3, #40	; 0x28
 80066b6:	d903      	bls.n	80066c0 <HAL_DMA_Init+0x26c>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	2b2e      	cmp	r3, #46	; 0x2e
 80066be:	d91f      	bls.n	8006700 <HAL_DMA_Init+0x2ac>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	2b3e      	cmp	r3, #62	; 0x3e
 80066c6:	d903      	bls.n	80066d0 <HAL_DMA_Init+0x27c>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	2b42      	cmp	r3, #66	; 0x42
 80066ce:	d917      	bls.n	8006700 <HAL_DMA_Init+0x2ac>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	2b46      	cmp	r3, #70	; 0x46
 80066d6:	d903      	bls.n	80066e0 <HAL_DMA_Init+0x28c>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	2b48      	cmp	r3, #72	; 0x48
 80066de:	d90f      	bls.n	8006700 <HAL_DMA_Init+0x2ac>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	2b4e      	cmp	r3, #78	; 0x4e
 80066e6:	d903      	bls.n	80066f0 <HAL_DMA_Init+0x29c>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	2b52      	cmp	r3, #82	; 0x52
 80066ee:	d907      	bls.n	8006700 <HAL_DMA_Init+0x2ac>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	2b73      	cmp	r3, #115	; 0x73
 80066f6:	d905      	bls.n	8006704 <HAL_DMA_Init+0x2b0>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	2b77      	cmp	r3, #119	; 0x77
 80066fe:	d801      	bhi.n	8006704 <HAL_DMA_Init+0x2b0>
 8006700:	2301      	movs	r3, #1
 8006702:	e000      	b.n	8006706 <HAL_DMA_Init+0x2b2>
 8006704:	2300      	movs	r3, #0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d003      	beq.n	8006712 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006710:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	697a      	ldr	r2, [r7, #20]
 8006718:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	695b      	ldr	r3, [r3, #20]
 8006720:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	f023 0307 	bic.w	r3, r3, #7
 8006728:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672e:	697a      	ldr	r2, [r7, #20]
 8006730:	4313      	orrs	r3, r2
 8006732:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006738:	2b04      	cmp	r3, #4
 800673a:	d117      	bne.n	800676c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	4313      	orrs	r3, r2
 8006744:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00e      	beq.n	800676c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f002 fce4 	bl	800911c <DMA_CheckFifoParam>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d008      	beq.n	800676c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2240      	movs	r2, #64	; 0x40
 800675e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e192      	b.n	8006a92 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f002 fc1f 	bl	8008fb8 <DMA_CalcBaseAndBitshift>
 800677a:	4603      	mov	r3, r0
 800677c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006782:	f003 031f 	and.w	r3, r3, #31
 8006786:	223f      	movs	r2, #63	; 0x3f
 8006788:	409a      	lsls	r2, r3
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	609a      	str	r2, [r3, #8]
 800678e:	e0c8      	b.n	8006922 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a38      	ldr	r2, [pc, #224]	; (8006878 <HAL_DMA_Init+0x424>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d022      	beq.n	80067e0 <HAL_DMA_Init+0x38c>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a37      	ldr	r2, [pc, #220]	; (800687c <HAL_DMA_Init+0x428>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d01d      	beq.n	80067e0 <HAL_DMA_Init+0x38c>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a35      	ldr	r2, [pc, #212]	; (8006880 <HAL_DMA_Init+0x42c>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d018      	beq.n	80067e0 <HAL_DMA_Init+0x38c>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a34      	ldr	r2, [pc, #208]	; (8006884 <HAL_DMA_Init+0x430>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d013      	beq.n	80067e0 <HAL_DMA_Init+0x38c>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a32      	ldr	r2, [pc, #200]	; (8006888 <HAL_DMA_Init+0x434>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d00e      	beq.n	80067e0 <HAL_DMA_Init+0x38c>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a31      	ldr	r2, [pc, #196]	; (800688c <HAL_DMA_Init+0x438>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d009      	beq.n	80067e0 <HAL_DMA_Init+0x38c>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a2f      	ldr	r2, [pc, #188]	; (8006890 <HAL_DMA_Init+0x43c>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d004      	beq.n	80067e0 <HAL_DMA_Init+0x38c>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a2e      	ldr	r2, [pc, #184]	; (8006894 <HAL_DMA_Init+0x440>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d101      	bne.n	80067e4 <HAL_DMA_Init+0x390>
 80067e0:	2301      	movs	r3, #1
 80067e2:	e000      	b.n	80067e6 <HAL_DMA_Init+0x392>
 80067e4:	2300      	movs	r3, #0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	f000 8092 	beq.w	8006910 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a21      	ldr	r2, [pc, #132]	; (8006878 <HAL_DMA_Init+0x424>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d021      	beq.n	800683a <HAL_DMA_Init+0x3e6>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a20      	ldr	r2, [pc, #128]	; (800687c <HAL_DMA_Init+0x428>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d01c      	beq.n	800683a <HAL_DMA_Init+0x3e6>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a1e      	ldr	r2, [pc, #120]	; (8006880 <HAL_DMA_Init+0x42c>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d017      	beq.n	800683a <HAL_DMA_Init+0x3e6>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a1d      	ldr	r2, [pc, #116]	; (8006884 <HAL_DMA_Init+0x430>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d012      	beq.n	800683a <HAL_DMA_Init+0x3e6>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a1b      	ldr	r2, [pc, #108]	; (8006888 <HAL_DMA_Init+0x434>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d00d      	beq.n	800683a <HAL_DMA_Init+0x3e6>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a1a      	ldr	r2, [pc, #104]	; (800688c <HAL_DMA_Init+0x438>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d008      	beq.n	800683a <HAL_DMA_Init+0x3e6>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a18      	ldr	r2, [pc, #96]	; (8006890 <HAL_DMA_Init+0x43c>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d003      	beq.n	800683a <HAL_DMA_Init+0x3e6>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a17      	ldr	r2, [pc, #92]	; (8006894 <HAL_DMA_Init+0x440>)
 8006838:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2202      	movs	r2, #2
 800683e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006852:	697a      	ldr	r2, [r7, #20]
 8006854:	4b10      	ldr	r3, [pc, #64]	; (8006898 <HAL_DMA_Init+0x444>)
 8006856:	4013      	ands	r3, r2
 8006858:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	2b40      	cmp	r3, #64	; 0x40
 8006860:	d01c      	beq.n	800689c <HAL_DMA_Init+0x448>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	2b80      	cmp	r3, #128	; 0x80
 8006868:	d102      	bne.n	8006870 <HAL_DMA_Init+0x41c>
 800686a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800686e:	e016      	b.n	800689e <HAL_DMA_Init+0x44a>
 8006870:	2300      	movs	r3, #0
 8006872:	e014      	b.n	800689e <HAL_DMA_Init+0x44a>
 8006874:	fe10803f 	.word	0xfe10803f
 8006878:	58025408 	.word	0x58025408
 800687c:	5802541c 	.word	0x5802541c
 8006880:	58025430 	.word	0x58025430
 8006884:	58025444 	.word	0x58025444
 8006888:	58025458 	.word	0x58025458
 800688c:	5802546c 	.word	0x5802546c
 8006890:	58025480 	.word	0x58025480
 8006894:	58025494 	.word	0x58025494
 8006898:	fffe000f 	.word	0xfffe000f
 800689c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	68d2      	ldr	r2, [r2, #12]
 80068a2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80068a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80068ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80068b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80068bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	69db      	ldr	r3, [r3, #28]
 80068c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80068c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a1b      	ldr	r3, [r3, #32]
 80068ca:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80068cc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	697a      	ldr	r2, [r7, #20]
 80068da:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	461a      	mov	r2, r3
 80068e2:	4b6e      	ldr	r3, [pc, #440]	; (8006a9c <HAL_DMA_Init+0x648>)
 80068e4:	4413      	add	r3, r2
 80068e6:	4a6e      	ldr	r2, [pc, #440]	; (8006aa0 <HAL_DMA_Init+0x64c>)
 80068e8:	fba2 2303 	umull	r2, r3, r2, r3
 80068ec:	091b      	lsrs	r3, r3, #4
 80068ee:	009a      	lsls	r2, r3, #2
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f002 fb5f 	bl	8008fb8 <DMA_CalcBaseAndBitshift>
 80068fa:	4603      	mov	r3, r0
 80068fc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006902:	f003 031f 	and.w	r3, r3, #31
 8006906:	2201      	movs	r2, #1
 8006908:	409a      	lsls	r2, r3
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	605a      	str	r2, [r3, #4]
 800690e:	e008      	b.n	8006922 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2240      	movs	r2, #64	; 0x40
 8006914:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2203      	movs	r2, #3
 800691a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e0b7      	b.n	8006a92 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a5f      	ldr	r2, [pc, #380]	; (8006aa4 <HAL_DMA_Init+0x650>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d072      	beq.n	8006a12 <HAL_DMA_Init+0x5be>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a5d      	ldr	r2, [pc, #372]	; (8006aa8 <HAL_DMA_Init+0x654>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d06d      	beq.n	8006a12 <HAL_DMA_Init+0x5be>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a5c      	ldr	r2, [pc, #368]	; (8006aac <HAL_DMA_Init+0x658>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d068      	beq.n	8006a12 <HAL_DMA_Init+0x5be>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a5a      	ldr	r2, [pc, #360]	; (8006ab0 <HAL_DMA_Init+0x65c>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d063      	beq.n	8006a12 <HAL_DMA_Init+0x5be>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a59      	ldr	r2, [pc, #356]	; (8006ab4 <HAL_DMA_Init+0x660>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d05e      	beq.n	8006a12 <HAL_DMA_Init+0x5be>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a57      	ldr	r2, [pc, #348]	; (8006ab8 <HAL_DMA_Init+0x664>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d059      	beq.n	8006a12 <HAL_DMA_Init+0x5be>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a56      	ldr	r2, [pc, #344]	; (8006abc <HAL_DMA_Init+0x668>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d054      	beq.n	8006a12 <HAL_DMA_Init+0x5be>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a54      	ldr	r2, [pc, #336]	; (8006ac0 <HAL_DMA_Init+0x66c>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d04f      	beq.n	8006a12 <HAL_DMA_Init+0x5be>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a53      	ldr	r2, [pc, #332]	; (8006ac4 <HAL_DMA_Init+0x670>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d04a      	beq.n	8006a12 <HAL_DMA_Init+0x5be>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a51      	ldr	r2, [pc, #324]	; (8006ac8 <HAL_DMA_Init+0x674>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d045      	beq.n	8006a12 <HAL_DMA_Init+0x5be>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a50      	ldr	r2, [pc, #320]	; (8006acc <HAL_DMA_Init+0x678>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d040      	beq.n	8006a12 <HAL_DMA_Init+0x5be>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a4e      	ldr	r2, [pc, #312]	; (8006ad0 <HAL_DMA_Init+0x67c>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d03b      	beq.n	8006a12 <HAL_DMA_Init+0x5be>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a4d      	ldr	r2, [pc, #308]	; (8006ad4 <HAL_DMA_Init+0x680>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d036      	beq.n	8006a12 <HAL_DMA_Init+0x5be>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a4b      	ldr	r2, [pc, #300]	; (8006ad8 <HAL_DMA_Init+0x684>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d031      	beq.n	8006a12 <HAL_DMA_Init+0x5be>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a4a      	ldr	r2, [pc, #296]	; (8006adc <HAL_DMA_Init+0x688>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d02c      	beq.n	8006a12 <HAL_DMA_Init+0x5be>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a48      	ldr	r2, [pc, #288]	; (8006ae0 <HAL_DMA_Init+0x68c>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d027      	beq.n	8006a12 <HAL_DMA_Init+0x5be>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a47      	ldr	r2, [pc, #284]	; (8006ae4 <HAL_DMA_Init+0x690>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d022      	beq.n	8006a12 <HAL_DMA_Init+0x5be>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a45      	ldr	r2, [pc, #276]	; (8006ae8 <HAL_DMA_Init+0x694>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d01d      	beq.n	8006a12 <HAL_DMA_Init+0x5be>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a44      	ldr	r2, [pc, #272]	; (8006aec <HAL_DMA_Init+0x698>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d018      	beq.n	8006a12 <HAL_DMA_Init+0x5be>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a42      	ldr	r2, [pc, #264]	; (8006af0 <HAL_DMA_Init+0x69c>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d013      	beq.n	8006a12 <HAL_DMA_Init+0x5be>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a41      	ldr	r2, [pc, #260]	; (8006af4 <HAL_DMA_Init+0x6a0>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d00e      	beq.n	8006a12 <HAL_DMA_Init+0x5be>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a3f      	ldr	r2, [pc, #252]	; (8006af8 <HAL_DMA_Init+0x6a4>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d009      	beq.n	8006a12 <HAL_DMA_Init+0x5be>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a3e      	ldr	r2, [pc, #248]	; (8006afc <HAL_DMA_Init+0x6a8>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d004      	beq.n	8006a12 <HAL_DMA_Init+0x5be>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a3c      	ldr	r2, [pc, #240]	; (8006b00 <HAL_DMA_Init+0x6ac>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d101      	bne.n	8006a16 <HAL_DMA_Init+0x5c2>
 8006a12:	2301      	movs	r3, #1
 8006a14:	e000      	b.n	8006a18 <HAL_DMA_Init+0x5c4>
 8006a16:	2300      	movs	r3, #0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d032      	beq.n	8006a82 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f002 fbf9 	bl	8009214 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	2b80      	cmp	r3, #128	; 0x80
 8006a28:	d102      	bne.n	8006a30 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	685a      	ldr	r2, [r3, #4]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a38:	b2d2      	uxtb	r2, r2
 8006a3a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006a44:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d010      	beq.n	8006a70 <HAL_DMA_Init+0x61c>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	2b08      	cmp	r3, #8
 8006a54:	d80c      	bhi.n	8006a70 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f002 fc76 	bl	8009348 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a60:	2200      	movs	r2, #0
 8006a62:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006a6c:	605a      	str	r2, [r3, #4]
 8006a6e:	e008      	b.n	8006a82 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3718      	adds	r7, #24
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	a7fdabf8 	.word	0xa7fdabf8
 8006aa0:	cccccccd 	.word	0xcccccccd
 8006aa4:	40020010 	.word	0x40020010
 8006aa8:	40020028 	.word	0x40020028
 8006aac:	40020040 	.word	0x40020040
 8006ab0:	40020058 	.word	0x40020058
 8006ab4:	40020070 	.word	0x40020070
 8006ab8:	40020088 	.word	0x40020088
 8006abc:	400200a0 	.word	0x400200a0
 8006ac0:	400200b8 	.word	0x400200b8
 8006ac4:	40020410 	.word	0x40020410
 8006ac8:	40020428 	.word	0x40020428
 8006acc:	40020440 	.word	0x40020440
 8006ad0:	40020458 	.word	0x40020458
 8006ad4:	40020470 	.word	0x40020470
 8006ad8:	40020488 	.word	0x40020488
 8006adc:	400204a0 	.word	0x400204a0
 8006ae0:	400204b8 	.word	0x400204b8
 8006ae4:	58025408 	.word	0x58025408
 8006ae8:	5802541c 	.word	0x5802541c
 8006aec:	58025430 	.word	0x58025430
 8006af0:	58025444 	.word	0x58025444
 8006af4:	58025458 	.word	0x58025458
 8006af8:	5802546c 	.word	0x5802546c
 8006afc:	58025480 	.word	0x58025480
 8006b00:	58025494 	.word	0x58025494

08006b04 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d101      	bne.n	8006b16 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e1a8      	b.n	8006e68 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a82      	ldr	r2, [pc, #520]	; (8006d24 <HAL_DMA_DeInit+0x220>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d04a      	beq.n	8006bb6 <HAL_DMA_DeInit+0xb2>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a80      	ldr	r2, [pc, #512]	; (8006d28 <HAL_DMA_DeInit+0x224>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d045      	beq.n	8006bb6 <HAL_DMA_DeInit+0xb2>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a7f      	ldr	r2, [pc, #508]	; (8006d2c <HAL_DMA_DeInit+0x228>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d040      	beq.n	8006bb6 <HAL_DMA_DeInit+0xb2>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a7d      	ldr	r2, [pc, #500]	; (8006d30 <HAL_DMA_DeInit+0x22c>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d03b      	beq.n	8006bb6 <HAL_DMA_DeInit+0xb2>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a7c      	ldr	r2, [pc, #496]	; (8006d34 <HAL_DMA_DeInit+0x230>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d036      	beq.n	8006bb6 <HAL_DMA_DeInit+0xb2>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a7a      	ldr	r2, [pc, #488]	; (8006d38 <HAL_DMA_DeInit+0x234>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d031      	beq.n	8006bb6 <HAL_DMA_DeInit+0xb2>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a79      	ldr	r2, [pc, #484]	; (8006d3c <HAL_DMA_DeInit+0x238>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d02c      	beq.n	8006bb6 <HAL_DMA_DeInit+0xb2>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a77      	ldr	r2, [pc, #476]	; (8006d40 <HAL_DMA_DeInit+0x23c>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d027      	beq.n	8006bb6 <HAL_DMA_DeInit+0xb2>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a76      	ldr	r2, [pc, #472]	; (8006d44 <HAL_DMA_DeInit+0x240>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d022      	beq.n	8006bb6 <HAL_DMA_DeInit+0xb2>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a74      	ldr	r2, [pc, #464]	; (8006d48 <HAL_DMA_DeInit+0x244>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d01d      	beq.n	8006bb6 <HAL_DMA_DeInit+0xb2>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a73      	ldr	r2, [pc, #460]	; (8006d4c <HAL_DMA_DeInit+0x248>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d018      	beq.n	8006bb6 <HAL_DMA_DeInit+0xb2>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a71      	ldr	r2, [pc, #452]	; (8006d50 <HAL_DMA_DeInit+0x24c>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d013      	beq.n	8006bb6 <HAL_DMA_DeInit+0xb2>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a70      	ldr	r2, [pc, #448]	; (8006d54 <HAL_DMA_DeInit+0x250>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d00e      	beq.n	8006bb6 <HAL_DMA_DeInit+0xb2>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a6e      	ldr	r2, [pc, #440]	; (8006d58 <HAL_DMA_DeInit+0x254>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d009      	beq.n	8006bb6 <HAL_DMA_DeInit+0xb2>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a6d      	ldr	r2, [pc, #436]	; (8006d5c <HAL_DMA_DeInit+0x258>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d004      	beq.n	8006bb6 <HAL_DMA_DeInit+0xb2>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a6b      	ldr	r2, [pc, #428]	; (8006d60 <HAL_DMA_DeInit+0x25c>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d108      	bne.n	8006bc8 <HAL_DMA_DeInit+0xc4>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f022 0201 	bic.w	r2, r2, #1
 8006bc4:	601a      	str	r2, [r3, #0]
 8006bc6:	e007      	b.n	8006bd8 <HAL_DMA_DeInit+0xd4>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f022 0201 	bic.w	r2, r2, #1
 8006bd6:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a51      	ldr	r2, [pc, #324]	; (8006d24 <HAL_DMA_DeInit+0x220>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d04a      	beq.n	8006c78 <HAL_DMA_DeInit+0x174>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a50      	ldr	r2, [pc, #320]	; (8006d28 <HAL_DMA_DeInit+0x224>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d045      	beq.n	8006c78 <HAL_DMA_DeInit+0x174>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a4e      	ldr	r2, [pc, #312]	; (8006d2c <HAL_DMA_DeInit+0x228>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d040      	beq.n	8006c78 <HAL_DMA_DeInit+0x174>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a4d      	ldr	r2, [pc, #308]	; (8006d30 <HAL_DMA_DeInit+0x22c>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d03b      	beq.n	8006c78 <HAL_DMA_DeInit+0x174>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a4b      	ldr	r2, [pc, #300]	; (8006d34 <HAL_DMA_DeInit+0x230>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d036      	beq.n	8006c78 <HAL_DMA_DeInit+0x174>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a4a      	ldr	r2, [pc, #296]	; (8006d38 <HAL_DMA_DeInit+0x234>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d031      	beq.n	8006c78 <HAL_DMA_DeInit+0x174>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a48      	ldr	r2, [pc, #288]	; (8006d3c <HAL_DMA_DeInit+0x238>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d02c      	beq.n	8006c78 <HAL_DMA_DeInit+0x174>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a47      	ldr	r2, [pc, #284]	; (8006d40 <HAL_DMA_DeInit+0x23c>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d027      	beq.n	8006c78 <HAL_DMA_DeInit+0x174>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a45      	ldr	r2, [pc, #276]	; (8006d44 <HAL_DMA_DeInit+0x240>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d022      	beq.n	8006c78 <HAL_DMA_DeInit+0x174>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a44      	ldr	r2, [pc, #272]	; (8006d48 <HAL_DMA_DeInit+0x244>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d01d      	beq.n	8006c78 <HAL_DMA_DeInit+0x174>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a42      	ldr	r2, [pc, #264]	; (8006d4c <HAL_DMA_DeInit+0x248>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d018      	beq.n	8006c78 <HAL_DMA_DeInit+0x174>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a41      	ldr	r2, [pc, #260]	; (8006d50 <HAL_DMA_DeInit+0x24c>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d013      	beq.n	8006c78 <HAL_DMA_DeInit+0x174>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a3f      	ldr	r2, [pc, #252]	; (8006d54 <HAL_DMA_DeInit+0x250>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d00e      	beq.n	8006c78 <HAL_DMA_DeInit+0x174>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a3e      	ldr	r2, [pc, #248]	; (8006d58 <HAL_DMA_DeInit+0x254>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d009      	beq.n	8006c78 <HAL_DMA_DeInit+0x174>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a3c      	ldr	r2, [pc, #240]	; (8006d5c <HAL_DMA_DeInit+0x258>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d004      	beq.n	8006c78 <HAL_DMA_DeInit+0x174>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a3b      	ldr	r2, [pc, #236]	; (8006d60 <HAL_DMA_DeInit+0x25c>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d101      	bne.n	8006c7c <HAL_DMA_DeInit+0x178>
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e000      	b.n	8006c7e <HAL_DMA_DeInit+0x17a>
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d025      	beq.n	8006cce <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2200      	movs	r2, #0
 8006c88:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2200      	movs	r2, #0
 8006c98:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2221      	movs	r2, #33	; 0x21
 8006cb0:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f002 f980 	bl	8008fb8 <DMA_CalcBaseAndBitshift>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cc0:	f003 031f 	and.w	r3, r3, #31
 8006cc4:	223f      	movs	r2, #63	; 0x3f
 8006cc6:	409a      	lsls	r2, r3
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	609a      	str	r2, [r3, #8]
 8006ccc:	e081      	b.n	8006dd2 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a24      	ldr	r2, [pc, #144]	; (8006d64 <HAL_DMA_DeInit+0x260>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d022      	beq.n	8006d1e <HAL_DMA_DeInit+0x21a>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a22      	ldr	r2, [pc, #136]	; (8006d68 <HAL_DMA_DeInit+0x264>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d01d      	beq.n	8006d1e <HAL_DMA_DeInit+0x21a>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a21      	ldr	r2, [pc, #132]	; (8006d6c <HAL_DMA_DeInit+0x268>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d018      	beq.n	8006d1e <HAL_DMA_DeInit+0x21a>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a1f      	ldr	r2, [pc, #124]	; (8006d70 <HAL_DMA_DeInit+0x26c>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d013      	beq.n	8006d1e <HAL_DMA_DeInit+0x21a>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a1e      	ldr	r2, [pc, #120]	; (8006d74 <HAL_DMA_DeInit+0x270>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d00e      	beq.n	8006d1e <HAL_DMA_DeInit+0x21a>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a1c      	ldr	r2, [pc, #112]	; (8006d78 <HAL_DMA_DeInit+0x274>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d009      	beq.n	8006d1e <HAL_DMA_DeInit+0x21a>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a1b      	ldr	r2, [pc, #108]	; (8006d7c <HAL_DMA_DeInit+0x278>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d004      	beq.n	8006d1e <HAL_DMA_DeInit+0x21a>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a19      	ldr	r2, [pc, #100]	; (8006d80 <HAL_DMA_DeInit+0x27c>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d132      	bne.n	8006d84 <HAL_DMA_DeInit+0x280>
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e031      	b.n	8006d86 <HAL_DMA_DeInit+0x282>
 8006d22:	bf00      	nop
 8006d24:	40020010 	.word	0x40020010
 8006d28:	40020028 	.word	0x40020028
 8006d2c:	40020040 	.word	0x40020040
 8006d30:	40020058 	.word	0x40020058
 8006d34:	40020070 	.word	0x40020070
 8006d38:	40020088 	.word	0x40020088
 8006d3c:	400200a0 	.word	0x400200a0
 8006d40:	400200b8 	.word	0x400200b8
 8006d44:	40020410 	.word	0x40020410
 8006d48:	40020428 	.word	0x40020428
 8006d4c:	40020440 	.word	0x40020440
 8006d50:	40020458 	.word	0x40020458
 8006d54:	40020470 	.word	0x40020470
 8006d58:	40020488 	.word	0x40020488
 8006d5c:	400204a0 	.word	0x400204a0
 8006d60:	400204b8 	.word	0x400204b8
 8006d64:	58025408 	.word	0x58025408
 8006d68:	5802541c 	.word	0x5802541c
 8006d6c:	58025430 	.word	0x58025430
 8006d70:	58025444 	.word	0x58025444
 8006d74:	58025458 	.word	0x58025458
 8006d78:	5802546c 	.word	0x5802546c
 8006d7c:	58025480 	.word	0x58025480
 8006d80:	58025494 	.word	0x58025494
 8006d84:	2300      	movs	r3, #0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d021      	beq.n	8006dce <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2200      	movs	r2, #0
 8006d98:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2200      	movs	r2, #0
 8006da8:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2200      	movs	r2, #0
 8006db0:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f002 f900 	bl	8008fb8 <DMA_CalcBaseAndBitshift>
 8006db8:	4603      	mov	r3, r0
 8006dba:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dc0:	f003 031f 	and.w	r3, r3, #31
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	409a      	lsls	r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	605a      	str	r2, [r3, #4]
 8006dcc:	e001      	b.n	8006dd2 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e04a      	b.n	8006e68 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f002 fa1e 	bl	8009214 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d008      	beq.n	8006df2 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006de4:	2200      	movs	r2, #0
 8006de6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006df0:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00f      	beq.n	8006e1a <HAL_DMA_DeInit+0x316>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	2b08      	cmp	r3, #8
 8006e00:	d80b      	bhi.n	8006e1a <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f002 faa0 	bl	8009348 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006e18:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b086      	sub	sp, #24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]
 8006e7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d101      	bne.n	8006e8c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e226      	b.n	80072da <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d101      	bne.n	8006e9a <HAL_DMA_Start_IT+0x2a>
 8006e96:	2302      	movs	r3, #2
 8006e98:	e21f      	b.n	80072da <HAL_DMA_Start_IT+0x46a>
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	f040 820a 	bne.w	80072c4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2202      	movs	r2, #2
 8006eb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a68      	ldr	r2, [pc, #416]	; (8007064 <HAL_DMA_Start_IT+0x1f4>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d04a      	beq.n	8006f5e <HAL_DMA_Start_IT+0xee>
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a66      	ldr	r2, [pc, #408]	; (8007068 <HAL_DMA_Start_IT+0x1f8>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d045      	beq.n	8006f5e <HAL_DMA_Start_IT+0xee>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a65      	ldr	r2, [pc, #404]	; (800706c <HAL_DMA_Start_IT+0x1fc>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d040      	beq.n	8006f5e <HAL_DMA_Start_IT+0xee>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a63      	ldr	r2, [pc, #396]	; (8007070 <HAL_DMA_Start_IT+0x200>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d03b      	beq.n	8006f5e <HAL_DMA_Start_IT+0xee>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a62      	ldr	r2, [pc, #392]	; (8007074 <HAL_DMA_Start_IT+0x204>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d036      	beq.n	8006f5e <HAL_DMA_Start_IT+0xee>
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a60      	ldr	r2, [pc, #384]	; (8007078 <HAL_DMA_Start_IT+0x208>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d031      	beq.n	8006f5e <HAL_DMA_Start_IT+0xee>
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a5f      	ldr	r2, [pc, #380]	; (800707c <HAL_DMA_Start_IT+0x20c>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d02c      	beq.n	8006f5e <HAL_DMA_Start_IT+0xee>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a5d      	ldr	r2, [pc, #372]	; (8007080 <HAL_DMA_Start_IT+0x210>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d027      	beq.n	8006f5e <HAL_DMA_Start_IT+0xee>
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a5c      	ldr	r2, [pc, #368]	; (8007084 <HAL_DMA_Start_IT+0x214>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d022      	beq.n	8006f5e <HAL_DMA_Start_IT+0xee>
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a5a      	ldr	r2, [pc, #360]	; (8007088 <HAL_DMA_Start_IT+0x218>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d01d      	beq.n	8006f5e <HAL_DMA_Start_IT+0xee>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a59      	ldr	r2, [pc, #356]	; (800708c <HAL_DMA_Start_IT+0x21c>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d018      	beq.n	8006f5e <HAL_DMA_Start_IT+0xee>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a57      	ldr	r2, [pc, #348]	; (8007090 <HAL_DMA_Start_IT+0x220>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d013      	beq.n	8006f5e <HAL_DMA_Start_IT+0xee>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a56      	ldr	r2, [pc, #344]	; (8007094 <HAL_DMA_Start_IT+0x224>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d00e      	beq.n	8006f5e <HAL_DMA_Start_IT+0xee>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a54      	ldr	r2, [pc, #336]	; (8007098 <HAL_DMA_Start_IT+0x228>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d009      	beq.n	8006f5e <HAL_DMA_Start_IT+0xee>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a53      	ldr	r2, [pc, #332]	; (800709c <HAL_DMA_Start_IT+0x22c>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d004      	beq.n	8006f5e <HAL_DMA_Start_IT+0xee>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a51      	ldr	r2, [pc, #324]	; (80070a0 <HAL_DMA_Start_IT+0x230>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d108      	bne.n	8006f70 <HAL_DMA_Start_IT+0x100>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f022 0201 	bic.w	r2, r2, #1
 8006f6c:	601a      	str	r2, [r3, #0]
 8006f6e:	e007      	b.n	8006f80 <HAL_DMA_Start_IT+0x110>
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f022 0201 	bic.w	r2, r2, #1
 8006f7e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	68b9      	ldr	r1, [r7, #8]
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	f001 fe6a 	bl	8008c60 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a34      	ldr	r2, [pc, #208]	; (8007064 <HAL_DMA_Start_IT+0x1f4>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d04a      	beq.n	800702c <HAL_DMA_Start_IT+0x1bc>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a33      	ldr	r2, [pc, #204]	; (8007068 <HAL_DMA_Start_IT+0x1f8>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d045      	beq.n	800702c <HAL_DMA_Start_IT+0x1bc>
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a31      	ldr	r2, [pc, #196]	; (800706c <HAL_DMA_Start_IT+0x1fc>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d040      	beq.n	800702c <HAL_DMA_Start_IT+0x1bc>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a30      	ldr	r2, [pc, #192]	; (8007070 <HAL_DMA_Start_IT+0x200>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d03b      	beq.n	800702c <HAL_DMA_Start_IT+0x1bc>
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a2e      	ldr	r2, [pc, #184]	; (8007074 <HAL_DMA_Start_IT+0x204>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d036      	beq.n	800702c <HAL_DMA_Start_IT+0x1bc>
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a2d      	ldr	r2, [pc, #180]	; (8007078 <HAL_DMA_Start_IT+0x208>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d031      	beq.n	800702c <HAL_DMA_Start_IT+0x1bc>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a2b      	ldr	r2, [pc, #172]	; (800707c <HAL_DMA_Start_IT+0x20c>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d02c      	beq.n	800702c <HAL_DMA_Start_IT+0x1bc>
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a2a      	ldr	r2, [pc, #168]	; (8007080 <HAL_DMA_Start_IT+0x210>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d027      	beq.n	800702c <HAL_DMA_Start_IT+0x1bc>
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a28      	ldr	r2, [pc, #160]	; (8007084 <HAL_DMA_Start_IT+0x214>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d022      	beq.n	800702c <HAL_DMA_Start_IT+0x1bc>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a27      	ldr	r2, [pc, #156]	; (8007088 <HAL_DMA_Start_IT+0x218>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d01d      	beq.n	800702c <HAL_DMA_Start_IT+0x1bc>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a25      	ldr	r2, [pc, #148]	; (800708c <HAL_DMA_Start_IT+0x21c>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d018      	beq.n	800702c <HAL_DMA_Start_IT+0x1bc>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a24      	ldr	r2, [pc, #144]	; (8007090 <HAL_DMA_Start_IT+0x220>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d013      	beq.n	800702c <HAL_DMA_Start_IT+0x1bc>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a22      	ldr	r2, [pc, #136]	; (8007094 <HAL_DMA_Start_IT+0x224>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d00e      	beq.n	800702c <HAL_DMA_Start_IT+0x1bc>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a21      	ldr	r2, [pc, #132]	; (8007098 <HAL_DMA_Start_IT+0x228>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d009      	beq.n	800702c <HAL_DMA_Start_IT+0x1bc>
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a1f      	ldr	r2, [pc, #124]	; (800709c <HAL_DMA_Start_IT+0x22c>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d004      	beq.n	800702c <HAL_DMA_Start_IT+0x1bc>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a1e      	ldr	r2, [pc, #120]	; (80070a0 <HAL_DMA_Start_IT+0x230>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d101      	bne.n	8007030 <HAL_DMA_Start_IT+0x1c0>
 800702c:	2301      	movs	r3, #1
 800702e:	e000      	b.n	8007032 <HAL_DMA_Start_IT+0x1c2>
 8007030:	2300      	movs	r3, #0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d036      	beq.n	80070a4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f023 021e 	bic.w	r2, r3, #30
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f042 0216 	orr.w	r2, r2, #22
 8007048:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704e:	2b00      	cmp	r3, #0
 8007050:	d03e      	beq.n	80070d0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f042 0208 	orr.w	r2, r2, #8
 8007060:	601a      	str	r2, [r3, #0]
 8007062:	e035      	b.n	80070d0 <HAL_DMA_Start_IT+0x260>
 8007064:	40020010 	.word	0x40020010
 8007068:	40020028 	.word	0x40020028
 800706c:	40020040 	.word	0x40020040
 8007070:	40020058 	.word	0x40020058
 8007074:	40020070 	.word	0x40020070
 8007078:	40020088 	.word	0x40020088
 800707c:	400200a0 	.word	0x400200a0
 8007080:	400200b8 	.word	0x400200b8
 8007084:	40020410 	.word	0x40020410
 8007088:	40020428 	.word	0x40020428
 800708c:	40020440 	.word	0x40020440
 8007090:	40020458 	.word	0x40020458
 8007094:	40020470 	.word	0x40020470
 8007098:	40020488 	.word	0x40020488
 800709c:	400204a0 	.word	0x400204a0
 80070a0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f023 020e 	bic.w	r2, r3, #14
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f042 020a 	orr.w	r2, r2, #10
 80070b6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d007      	beq.n	80070d0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f042 0204 	orr.w	r2, r2, #4
 80070ce:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a83      	ldr	r2, [pc, #524]	; (80072e4 <HAL_DMA_Start_IT+0x474>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d072      	beq.n	80071c0 <HAL_DMA_Start_IT+0x350>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a82      	ldr	r2, [pc, #520]	; (80072e8 <HAL_DMA_Start_IT+0x478>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d06d      	beq.n	80071c0 <HAL_DMA_Start_IT+0x350>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a80      	ldr	r2, [pc, #512]	; (80072ec <HAL_DMA_Start_IT+0x47c>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d068      	beq.n	80071c0 <HAL_DMA_Start_IT+0x350>
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a7f      	ldr	r2, [pc, #508]	; (80072f0 <HAL_DMA_Start_IT+0x480>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d063      	beq.n	80071c0 <HAL_DMA_Start_IT+0x350>
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a7d      	ldr	r2, [pc, #500]	; (80072f4 <HAL_DMA_Start_IT+0x484>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d05e      	beq.n	80071c0 <HAL_DMA_Start_IT+0x350>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a7c      	ldr	r2, [pc, #496]	; (80072f8 <HAL_DMA_Start_IT+0x488>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d059      	beq.n	80071c0 <HAL_DMA_Start_IT+0x350>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a7a      	ldr	r2, [pc, #488]	; (80072fc <HAL_DMA_Start_IT+0x48c>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d054      	beq.n	80071c0 <HAL_DMA_Start_IT+0x350>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a79      	ldr	r2, [pc, #484]	; (8007300 <HAL_DMA_Start_IT+0x490>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d04f      	beq.n	80071c0 <HAL_DMA_Start_IT+0x350>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a77      	ldr	r2, [pc, #476]	; (8007304 <HAL_DMA_Start_IT+0x494>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d04a      	beq.n	80071c0 <HAL_DMA_Start_IT+0x350>
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a76      	ldr	r2, [pc, #472]	; (8007308 <HAL_DMA_Start_IT+0x498>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d045      	beq.n	80071c0 <HAL_DMA_Start_IT+0x350>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a74      	ldr	r2, [pc, #464]	; (800730c <HAL_DMA_Start_IT+0x49c>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d040      	beq.n	80071c0 <HAL_DMA_Start_IT+0x350>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a73      	ldr	r2, [pc, #460]	; (8007310 <HAL_DMA_Start_IT+0x4a0>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d03b      	beq.n	80071c0 <HAL_DMA_Start_IT+0x350>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a71      	ldr	r2, [pc, #452]	; (8007314 <HAL_DMA_Start_IT+0x4a4>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d036      	beq.n	80071c0 <HAL_DMA_Start_IT+0x350>
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a70      	ldr	r2, [pc, #448]	; (8007318 <HAL_DMA_Start_IT+0x4a8>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d031      	beq.n	80071c0 <HAL_DMA_Start_IT+0x350>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a6e      	ldr	r2, [pc, #440]	; (800731c <HAL_DMA_Start_IT+0x4ac>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d02c      	beq.n	80071c0 <HAL_DMA_Start_IT+0x350>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a6d      	ldr	r2, [pc, #436]	; (8007320 <HAL_DMA_Start_IT+0x4b0>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d027      	beq.n	80071c0 <HAL_DMA_Start_IT+0x350>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a6b      	ldr	r2, [pc, #428]	; (8007324 <HAL_DMA_Start_IT+0x4b4>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d022      	beq.n	80071c0 <HAL_DMA_Start_IT+0x350>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a6a      	ldr	r2, [pc, #424]	; (8007328 <HAL_DMA_Start_IT+0x4b8>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d01d      	beq.n	80071c0 <HAL_DMA_Start_IT+0x350>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a68      	ldr	r2, [pc, #416]	; (800732c <HAL_DMA_Start_IT+0x4bc>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d018      	beq.n	80071c0 <HAL_DMA_Start_IT+0x350>
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a67      	ldr	r2, [pc, #412]	; (8007330 <HAL_DMA_Start_IT+0x4c0>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d013      	beq.n	80071c0 <HAL_DMA_Start_IT+0x350>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a65      	ldr	r2, [pc, #404]	; (8007334 <HAL_DMA_Start_IT+0x4c4>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d00e      	beq.n	80071c0 <HAL_DMA_Start_IT+0x350>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a64      	ldr	r2, [pc, #400]	; (8007338 <HAL_DMA_Start_IT+0x4c8>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d009      	beq.n	80071c0 <HAL_DMA_Start_IT+0x350>
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a62      	ldr	r2, [pc, #392]	; (800733c <HAL_DMA_Start_IT+0x4cc>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d004      	beq.n	80071c0 <HAL_DMA_Start_IT+0x350>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a61      	ldr	r2, [pc, #388]	; (8007340 <HAL_DMA_Start_IT+0x4d0>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d101      	bne.n	80071c4 <HAL_DMA_Start_IT+0x354>
 80071c0:	2301      	movs	r3, #1
 80071c2:	e000      	b.n	80071c6 <HAL_DMA_Start_IT+0x356>
 80071c4:	2300      	movs	r3, #0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d01a      	beq.n	8007200 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d007      	beq.n	80071e8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071e6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d007      	beq.n	8007200 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071fe:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a37      	ldr	r2, [pc, #220]	; (80072e4 <HAL_DMA_Start_IT+0x474>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d04a      	beq.n	80072a0 <HAL_DMA_Start_IT+0x430>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a36      	ldr	r2, [pc, #216]	; (80072e8 <HAL_DMA_Start_IT+0x478>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d045      	beq.n	80072a0 <HAL_DMA_Start_IT+0x430>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a34      	ldr	r2, [pc, #208]	; (80072ec <HAL_DMA_Start_IT+0x47c>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d040      	beq.n	80072a0 <HAL_DMA_Start_IT+0x430>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a33      	ldr	r2, [pc, #204]	; (80072f0 <HAL_DMA_Start_IT+0x480>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d03b      	beq.n	80072a0 <HAL_DMA_Start_IT+0x430>
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a31      	ldr	r2, [pc, #196]	; (80072f4 <HAL_DMA_Start_IT+0x484>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d036      	beq.n	80072a0 <HAL_DMA_Start_IT+0x430>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a30      	ldr	r2, [pc, #192]	; (80072f8 <HAL_DMA_Start_IT+0x488>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d031      	beq.n	80072a0 <HAL_DMA_Start_IT+0x430>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a2e      	ldr	r2, [pc, #184]	; (80072fc <HAL_DMA_Start_IT+0x48c>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d02c      	beq.n	80072a0 <HAL_DMA_Start_IT+0x430>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a2d      	ldr	r2, [pc, #180]	; (8007300 <HAL_DMA_Start_IT+0x490>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d027      	beq.n	80072a0 <HAL_DMA_Start_IT+0x430>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a2b      	ldr	r2, [pc, #172]	; (8007304 <HAL_DMA_Start_IT+0x494>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d022      	beq.n	80072a0 <HAL_DMA_Start_IT+0x430>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a2a      	ldr	r2, [pc, #168]	; (8007308 <HAL_DMA_Start_IT+0x498>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d01d      	beq.n	80072a0 <HAL_DMA_Start_IT+0x430>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a28      	ldr	r2, [pc, #160]	; (800730c <HAL_DMA_Start_IT+0x49c>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d018      	beq.n	80072a0 <HAL_DMA_Start_IT+0x430>
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a27      	ldr	r2, [pc, #156]	; (8007310 <HAL_DMA_Start_IT+0x4a0>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d013      	beq.n	80072a0 <HAL_DMA_Start_IT+0x430>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a25      	ldr	r2, [pc, #148]	; (8007314 <HAL_DMA_Start_IT+0x4a4>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d00e      	beq.n	80072a0 <HAL_DMA_Start_IT+0x430>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a24      	ldr	r2, [pc, #144]	; (8007318 <HAL_DMA_Start_IT+0x4a8>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d009      	beq.n	80072a0 <HAL_DMA_Start_IT+0x430>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a22      	ldr	r2, [pc, #136]	; (800731c <HAL_DMA_Start_IT+0x4ac>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d004      	beq.n	80072a0 <HAL_DMA_Start_IT+0x430>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a21      	ldr	r2, [pc, #132]	; (8007320 <HAL_DMA_Start_IT+0x4b0>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d108      	bne.n	80072b2 <HAL_DMA_Start_IT+0x442>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f042 0201 	orr.w	r2, r2, #1
 80072ae:	601a      	str	r2, [r3, #0]
 80072b0:	e012      	b.n	80072d8 <HAL_DMA_Start_IT+0x468>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f042 0201 	orr.w	r2, r2, #1
 80072c0:	601a      	str	r2, [r3, #0]
 80072c2:	e009      	b.n	80072d8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80072d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3718      	adds	r7, #24
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	40020010 	.word	0x40020010
 80072e8:	40020028 	.word	0x40020028
 80072ec:	40020040 	.word	0x40020040
 80072f0:	40020058 	.word	0x40020058
 80072f4:	40020070 	.word	0x40020070
 80072f8:	40020088 	.word	0x40020088
 80072fc:	400200a0 	.word	0x400200a0
 8007300:	400200b8 	.word	0x400200b8
 8007304:	40020410 	.word	0x40020410
 8007308:	40020428 	.word	0x40020428
 800730c:	40020440 	.word	0x40020440
 8007310:	40020458 	.word	0x40020458
 8007314:	40020470 	.word	0x40020470
 8007318:	40020488 	.word	0x40020488
 800731c:	400204a0 	.word	0x400204a0
 8007320:	400204b8 	.word	0x400204b8
 8007324:	58025408 	.word	0x58025408
 8007328:	5802541c 	.word	0x5802541c
 800732c:	58025430 	.word	0x58025430
 8007330:	58025444 	.word	0x58025444
 8007334:	58025458 	.word	0x58025458
 8007338:	5802546c 	.word	0x5802546c
 800733c:	58025480 	.word	0x58025480
 8007340:	58025494 	.word	0x58025494

08007344 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b086      	sub	sp, #24
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800734c:	f7fe ff34 	bl	80061b8 <HAL_GetTick>
 8007350:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d101      	bne.n	800735c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	e2dc      	b.n	8007916 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007362:	b2db      	uxtb	r3, r3
 8007364:	2b02      	cmp	r3, #2
 8007366:	d008      	beq.n	800737a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2280      	movs	r2, #128	; 0x80
 800736c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	e2cd      	b.n	8007916 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a76      	ldr	r2, [pc, #472]	; (8007558 <HAL_DMA_Abort+0x214>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d04a      	beq.n	800741a <HAL_DMA_Abort+0xd6>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a74      	ldr	r2, [pc, #464]	; (800755c <HAL_DMA_Abort+0x218>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d045      	beq.n	800741a <HAL_DMA_Abort+0xd6>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a73      	ldr	r2, [pc, #460]	; (8007560 <HAL_DMA_Abort+0x21c>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d040      	beq.n	800741a <HAL_DMA_Abort+0xd6>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a71      	ldr	r2, [pc, #452]	; (8007564 <HAL_DMA_Abort+0x220>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d03b      	beq.n	800741a <HAL_DMA_Abort+0xd6>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a70      	ldr	r2, [pc, #448]	; (8007568 <HAL_DMA_Abort+0x224>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d036      	beq.n	800741a <HAL_DMA_Abort+0xd6>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a6e      	ldr	r2, [pc, #440]	; (800756c <HAL_DMA_Abort+0x228>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d031      	beq.n	800741a <HAL_DMA_Abort+0xd6>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a6d      	ldr	r2, [pc, #436]	; (8007570 <HAL_DMA_Abort+0x22c>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d02c      	beq.n	800741a <HAL_DMA_Abort+0xd6>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a6b      	ldr	r2, [pc, #428]	; (8007574 <HAL_DMA_Abort+0x230>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d027      	beq.n	800741a <HAL_DMA_Abort+0xd6>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a6a      	ldr	r2, [pc, #424]	; (8007578 <HAL_DMA_Abort+0x234>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d022      	beq.n	800741a <HAL_DMA_Abort+0xd6>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a68      	ldr	r2, [pc, #416]	; (800757c <HAL_DMA_Abort+0x238>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d01d      	beq.n	800741a <HAL_DMA_Abort+0xd6>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a67      	ldr	r2, [pc, #412]	; (8007580 <HAL_DMA_Abort+0x23c>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d018      	beq.n	800741a <HAL_DMA_Abort+0xd6>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a65      	ldr	r2, [pc, #404]	; (8007584 <HAL_DMA_Abort+0x240>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d013      	beq.n	800741a <HAL_DMA_Abort+0xd6>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a64      	ldr	r2, [pc, #400]	; (8007588 <HAL_DMA_Abort+0x244>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d00e      	beq.n	800741a <HAL_DMA_Abort+0xd6>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a62      	ldr	r2, [pc, #392]	; (800758c <HAL_DMA_Abort+0x248>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d009      	beq.n	800741a <HAL_DMA_Abort+0xd6>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a61      	ldr	r2, [pc, #388]	; (8007590 <HAL_DMA_Abort+0x24c>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d004      	beq.n	800741a <HAL_DMA_Abort+0xd6>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a5f      	ldr	r2, [pc, #380]	; (8007594 <HAL_DMA_Abort+0x250>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d101      	bne.n	800741e <HAL_DMA_Abort+0xda>
 800741a:	2301      	movs	r3, #1
 800741c:	e000      	b.n	8007420 <HAL_DMA_Abort+0xdc>
 800741e:	2300      	movs	r3, #0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d013      	beq.n	800744c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f022 021e 	bic.w	r2, r2, #30
 8007432:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	695a      	ldr	r2, [r3, #20]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007442:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	617b      	str	r3, [r7, #20]
 800744a:	e00a      	b.n	8007462 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f022 020e 	bic.w	r2, r2, #14
 800745a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a3c      	ldr	r2, [pc, #240]	; (8007558 <HAL_DMA_Abort+0x214>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d072      	beq.n	8007552 <HAL_DMA_Abort+0x20e>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a3a      	ldr	r2, [pc, #232]	; (800755c <HAL_DMA_Abort+0x218>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d06d      	beq.n	8007552 <HAL_DMA_Abort+0x20e>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a39      	ldr	r2, [pc, #228]	; (8007560 <HAL_DMA_Abort+0x21c>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d068      	beq.n	8007552 <HAL_DMA_Abort+0x20e>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a37      	ldr	r2, [pc, #220]	; (8007564 <HAL_DMA_Abort+0x220>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d063      	beq.n	8007552 <HAL_DMA_Abort+0x20e>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a36      	ldr	r2, [pc, #216]	; (8007568 <HAL_DMA_Abort+0x224>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d05e      	beq.n	8007552 <HAL_DMA_Abort+0x20e>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a34      	ldr	r2, [pc, #208]	; (800756c <HAL_DMA_Abort+0x228>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d059      	beq.n	8007552 <HAL_DMA_Abort+0x20e>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a33      	ldr	r2, [pc, #204]	; (8007570 <HAL_DMA_Abort+0x22c>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d054      	beq.n	8007552 <HAL_DMA_Abort+0x20e>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a31      	ldr	r2, [pc, #196]	; (8007574 <HAL_DMA_Abort+0x230>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d04f      	beq.n	8007552 <HAL_DMA_Abort+0x20e>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a30      	ldr	r2, [pc, #192]	; (8007578 <HAL_DMA_Abort+0x234>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d04a      	beq.n	8007552 <HAL_DMA_Abort+0x20e>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a2e      	ldr	r2, [pc, #184]	; (800757c <HAL_DMA_Abort+0x238>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d045      	beq.n	8007552 <HAL_DMA_Abort+0x20e>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a2d      	ldr	r2, [pc, #180]	; (8007580 <HAL_DMA_Abort+0x23c>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d040      	beq.n	8007552 <HAL_DMA_Abort+0x20e>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a2b      	ldr	r2, [pc, #172]	; (8007584 <HAL_DMA_Abort+0x240>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d03b      	beq.n	8007552 <HAL_DMA_Abort+0x20e>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a2a      	ldr	r2, [pc, #168]	; (8007588 <HAL_DMA_Abort+0x244>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d036      	beq.n	8007552 <HAL_DMA_Abort+0x20e>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a28      	ldr	r2, [pc, #160]	; (800758c <HAL_DMA_Abort+0x248>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d031      	beq.n	8007552 <HAL_DMA_Abort+0x20e>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a27      	ldr	r2, [pc, #156]	; (8007590 <HAL_DMA_Abort+0x24c>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d02c      	beq.n	8007552 <HAL_DMA_Abort+0x20e>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a25      	ldr	r2, [pc, #148]	; (8007594 <HAL_DMA_Abort+0x250>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d027      	beq.n	8007552 <HAL_DMA_Abort+0x20e>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a24      	ldr	r2, [pc, #144]	; (8007598 <HAL_DMA_Abort+0x254>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d022      	beq.n	8007552 <HAL_DMA_Abort+0x20e>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a22      	ldr	r2, [pc, #136]	; (800759c <HAL_DMA_Abort+0x258>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d01d      	beq.n	8007552 <HAL_DMA_Abort+0x20e>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a21      	ldr	r2, [pc, #132]	; (80075a0 <HAL_DMA_Abort+0x25c>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d018      	beq.n	8007552 <HAL_DMA_Abort+0x20e>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a1f      	ldr	r2, [pc, #124]	; (80075a4 <HAL_DMA_Abort+0x260>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d013      	beq.n	8007552 <HAL_DMA_Abort+0x20e>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a1e      	ldr	r2, [pc, #120]	; (80075a8 <HAL_DMA_Abort+0x264>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d00e      	beq.n	8007552 <HAL_DMA_Abort+0x20e>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a1c      	ldr	r2, [pc, #112]	; (80075ac <HAL_DMA_Abort+0x268>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d009      	beq.n	8007552 <HAL_DMA_Abort+0x20e>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a1b      	ldr	r2, [pc, #108]	; (80075b0 <HAL_DMA_Abort+0x26c>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d004      	beq.n	8007552 <HAL_DMA_Abort+0x20e>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a19      	ldr	r2, [pc, #100]	; (80075b4 <HAL_DMA_Abort+0x270>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d132      	bne.n	80075b8 <HAL_DMA_Abort+0x274>
 8007552:	2301      	movs	r3, #1
 8007554:	e031      	b.n	80075ba <HAL_DMA_Abort+0x276>
 8007556:	bf00      	nop
 8007558:	40020010 	.word	0x40020010
 800755c:	40020028 	.word	0x40020028
 8007560:	40020040 	.word	0x40020040
 8007564:	40020058 	.word	0x40020058
 8007568:	40020070 	.word	0x40020070
 800756c:	40020088 	.word	0x40020088
 8007570:	400200a0 	.word	0x400200a0
 8007574:	400200b8 	.word	0x400200b8
 8007578:	40020410 	.word	0x40020410
 800757c:	40020428 	.word	0x40020428
 8007580:	40020440 	.word	0x40020440
 8007584:	40020458 	.word	0x40020458
 8007588:	40020470 	.word	0x40020470
 800758c:	40020488 	.word	0x40020488
 8007590:	400204a0 	.word	0x400204a0
 8007594:	400204b8 	.word	0x400204b8
 8007598:	58025408 	.word	0x58025408
 800759c:	5802541c 	.word	0x5802541c
 80075a0:	58025430 	.word	0x58025430
 80075a4:	58025444 	.word	0x58025444
 80075a8:	58025458 	.word	0x58025458
 80075ac:	5802546c 	.word	0x5802546c
 80075b0:	58025480 	.word	0x58025480
 80075b4:	58025494 	.word	0x58025494
 80075b8:	2300      	movs	r3, #0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d007      	beq.n	80075ce <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a6d      	ldr	r2, [pc, #436]	; (8007788 <HAL_DMA_Abort+0x444>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d04a      	beq.n	800766e <HAL_DMA_Abort+0x32a>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a6b      	ldr	r2, [pc, #428]	; (800778c <HAL_DMA_Abort+0x448>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d045      	beq.n	800766e <HAL_DMA_Abort+0x32a>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a6a      	ldr	r2, [pc, #424]	; (8007790 <HAL_DMA_Abort+0x44c>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d040      	beq.n	800766e <HAL_DMA_Abort+0x32a>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a68      	ldr	r2, [pc, #416]	; (8007794 <HAL_DMA_Abort+0x450>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d03b      	beq.n	800766e <HAL_DMA_Abort+0x32a>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a67      	ldr	r2, [pc, #412]	; (8007798 <HAL_DMA_Abort+0x454>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d036      	beq.n	800766e <HAL_DMA_Abort+0x32a>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a65      	ldr	r2, [pc, #404]	; (800779c <HAL_DMA_Abort+0x458>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d031      	beq.n	800766e <HAL_DMA_Abort+0x32a>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a64      	ldr	r2, [pc, #400]	; (80077a0 <HAL_DMA_Abort+0x45c>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d02c      	beq.n	800766e <HAL_DMA_Abort+0x32a>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a62      	ldr	r2, [pc, #392]	; (80077a4 <HAL_DMA_Abort+0x460>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d027      	beq.n	800766e <HAL_DMA_Abort+0x32a>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a61      	ldr	r2, [pc, #388]	; (80077a8 <HAL_DMA_Abort+0x464>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d022      	beq.n	800766e <HAL_DMA_Abort+0x32a>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a5f      	ldr	r2, [pc, #380]	; (80077ac <HAL_DMA_Abort+0x468>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d01d      	beq.n	800766e <HAL_DMA_Abort+0x32a>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a5e      	ldr	r2, [pc, #376]	; (80077b0 <HAL_DMA_Abort+0x46c>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d018      	beq.n	800766e <HAL_DMA_Abort+0x32a>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a5c      	ldr	r2, [pc, #368]	; (80077b4 <HAL_DMA_Abort+0x470>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d013      	beq.n	800766e <HAL_DMA_Abort+0x32a>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a5b      	ldr	r2, [pc, #364]	; (80077b8 <HAL_DMA_Abort+0x474>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d00e      	beq.n	800766e <HAL_DMA_Abort+0x32a>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a59      	ldr	r2, [pc, #356]	; (80077bc <HAL_DMA_Abort+0x478>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d009      	beq.n	800766e <HAL_DMA_Abort+0x32a>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a58      	ldr	r2, [pc, #352]	; (80077c0 <HAL_DMA_Abort+0x47c>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d004      	beq.n	800766e <HAL_DMA_Abort+0x32a>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a56      	ldr	r2, [pc, #344]	; (80077c4 <HAL_DMA_Abort+0x480>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d108      	bne.n	8007680 <HAL_DMA_Abort+0x33c>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f022 0201 	bic.w	r2, r2, #1
 800767c:	601a      	str	r2, [r3, #0]
 800767e:	e007      	b.n	8007690 <HAL_DMA_Abort+0x34c>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f022 0201 	bic.w	r2, r2, #1
 800768e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007690:	e013      	b.n	80076ba <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007692:	f7fe fd91 	bl	80061b8 <HAL_GetTick>
 8007696:	4602      	mov	r2, r0
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	1ad3      	subs	r3, r2, r3
 800769c:	2b05      	cmp	r3, #5
 800769e:	d90c      	bls.n	80076ba <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2220      	movs	r2, #32
 80076a4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2203      	movs	r2, #3
 80076aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	e12d      	b.n	8007916 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 0301 	and.w	r3, r3, #1
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1e5      	bne.n	8007692 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a2f      	ldr	r2, [pc, #188]	; (8007788 <HAL_DMA_Abort+0x444>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d04a      	beq.n	8007766 <HAL_DMA_Abort+0x422>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a2d      	ldr	r2, [pc, #180]	; (800778c <HAL_DMA_Abort+0x448>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d045      	beq.n	8007766 <HAL_DMA_Abort+0x422>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a2c      	ldr	r2, [pc, #176]	; (8007790 <HAL_DMA_Abort+0x44c>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d040      	beq.n	8007766 <HAL_DMA_Abort+0x422>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a2a      	ldr	r2, [pc, #168]	; (8007794 <HAL_DMA_Abort+0x450>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d03b      	beq.n	8007766 <HAL_DMA_Abort+0x422>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a29      	ldr	r2, [pc, #164]	; (8007798 <HAL_DMA_Abort+0x454>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d036      	beq.n	8007766 <HAL_DMA_Abort+0x422>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a27      	ldr	r2, [pc, #156]	; (800779c <HAL_DMA_Abort+0x458>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d031      	beq.n	8007766 <HAL_DMA_Abort+0x422>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a26      	ldr	r2, [pc, #152]	; (80077a0 <HAL_DMA_Abort+0x45c>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d02c      	beq.n	8007766 <HAL_DMA_Abort+0x422>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a24      	ldr	r2, [pc, #144]	; (80077a4 <HAL_DMA_Abort+0x460>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d027      	beq.n	8007766 <HAL_DMA_Abort+0x422>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a23      	ldr	r2, [pc, #140]	; (80077a8 <HAL_DMA_Abort+0x464>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d022      	beq.n	8007766 <HAL_DMA_Abort+0x422>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a21      	ldr	r2, [pc, #132]	; (80077ac <HAL_DMA_Abort+0x468>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d01d      	beq.n	8007766 <HAL_DMA_Abort+0x422>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a20      	ldr	r2, [pc, #128]	; (80077b0 <HAL_DMA_Abort+0x46c>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d018      	beq.n	8007766 <HAL_DMA_Abort+0x422>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a1e      	ldr	r2, [pc, #120]	; (80077b4 <HAL_DMA_Abort+0x470>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d013      	beq.n	8007766 <HAL_DMA_Abort+0x422>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a1d      	ldr	r2, [pc, #116]	; (80077b8 <HAL_DMA_Abort+0x474>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d00e      	beq.n	8007766 <HAL_DMA_Abort+0x422>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a1b      	ldr	r2, [pc, #108]	; (80077bc <HAL_DMA_Abort+0x478>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d009      	beq.n	8007766 <HAL_DMA_Abort+0x422>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a1a      	ldr	r2, [pc, #104]	; (80077c0 <HAL_DMA_Abort+0x47c>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d004      	beq.n	8007766 <HAL_DMA_Abort+0x422>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a18      	ldr	r2, [pc, #96]	; (80077c4 <HAL_DMA_Abort+0x480>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d101      	bne.n	800776a <HAL_DMA_Abort+0x426>
 8007766:	2301      	movs	r3, #1
 8007768:	e000      	b.n	800776c <HAL_DMA_Abort+0x428>
 800776a:	2300      	movs	r3, #0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d02b      	beq.n	80077c8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007774:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800777a:	f003 031f 	and.w	r3, r3, #31
 800777e:	223f      	movs	r2, #63	; 0x3f
 8007780:	409a      	lsls	r2, r3
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	609a      	str	r2, [r3, #8]
 8007786:	e02a      	b.n	80077de <HAL_DMA_Abort+0x49a>
 8007788:	40020010 	.word	0x40020010
 800778c:	40020028 	.word	0x40020028
 8007790:	40020040 	.word	0x40020040
 8007794:	40020058 	.word	0x40020058
 8007798:	40020070 	.word	0x40020070
 800779c:	40020088 	.word	0x40020088
 80077a0:	400200a0 	.word	0x400200a0
 80077a4:	400200b8 	.word	0x400200b8
 80077a8:	40020410 	.word	0x40020410
 80077ac:	40020428 	.word	0x40020428
 80077b0:	40020440 	.word	0x40020440
 80077b4:	40020458 	.word	0x40020458
 80077b8:	40020470 	.word	0x40020470
 80077bc:	40020488 	.word	0x40020488
 80077c0:	400204a0 	.word	0x400204a0
 80077c4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077cc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077d2:	f003 031f 	and.w	r3, r3, #31
 80077d6:	2201      	movs	r2, #1
 80077d8:	409a      	lsls	r2, r3
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a4f      	ldr	r2, [pc, #316]	; (8007920 <HAL_DMA_Abort+0x5dc>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d072      	beq.n	80078ce <HAL_DMA_Abort+0x58a>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a4d      	ldr	r2, [pc, #308]	; (8007924 <HAL_DMA_Abort+0x5e0>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d06d      	beq.n	80078ce <HAL_DMA_Abort+0x58a>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a4c      	ldr	r2, [pc, #304]	; (8007928 <HAL_DMA_Abort+0x5e4>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d068      	beq.n	80078ce <HAL_DMA_Abort+0x58a>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a4a      	ldr	r2, [pc, #296]	; (800792c <HAL_DMA_Abort+0x5e8>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d063      	beq.n	80078ce <HAL_DMA_Abort+0x58a>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a49      	ldr	r2, [pc, #292]	; (8007930 <HAL_DMA_Abort+0x5ec>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d05e      	beq.n	80078ce <HAL_DMA_Abort+0x58a>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a47      	ldr	r2, [pc, #284]	; (8007934 <HAL_DMA_Abort+0x5f0>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d059      	beq.n	80078ce <HAL_DMA_Abort+0x58a>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a46      	ldr	r2, [pc, #280]	; (8007938 <HAL_DMA_Abort+0x5f4>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d054      	beq.n	80078ce <HAL_DMA_Abort+0x58a>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a44      	ldr	r2, [pc, #272]	; (800793c <HAL_DMA_Abort+0x5f8>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d04f      	beq.n	80078ce <HAL_DMA_Abort+0x58a>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a43      	ldr	r2, [pc, #268]	; (8007940 <HAL_DMA_Abort+0x5fc>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d04a      	beq.n	80078ce <HAL_DMA_Abort+0x58a>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a41      	ldr	r2, [pc, #260]	; (8007944 <HAL_DMA_Abort+0x600>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d045      	beq.n	80078ce <HAL_DMA_Abort+0x58a>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a40      	ldr	r2, [pc, #256]	; (8007948 <HAL_DMA_Abort+0x604>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d040      	beq.n	80078ce <HAL_DMA_Abort+0x58a>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a3e      	ldr	r2, [pc, #248]	; (800794c <HAL_DMA_Abort+0x608>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d03b      	beq.n	80078ce <HAL_DMA_Abort+0x58a>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a3d      	ldr	r2, [pc, #244]	; (8007950 <HAL_DMA_Abort+0x60c>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d036      	beq.n	80078ce <HAL_DMA_Abort+0x58a>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a3b      	ldr	r2, [pc, #236]	; (8007954 <HAL_DMA_Abort+0x610>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d031      	beq.n	80078ce <HAL_DMA_Abort+0x58a>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a3a      	ldr	r2, [pc, #232]	; (8007958 <HAL_DMA_Abort+0x614>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d02c      	beq.n	80078ce <HAL_DMA_Abort+0x58a>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a38      	ldr	r2, [pc, #224]	; (800795c <HAL_DMA_Abort+0x618>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d027      	beq.n	80078ce <HAL_DMA_Abort+0x58a>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a37      	ldr	r2, [pc, #220]	; (8007960 <HAL_DMA_Abort+0x61c>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d022      	beq.n	80078ce <HAL_DMA_Abort+0x58a>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a35      	ldr	r2, [pc, #212]	; (8007964 <HAL_DMA_Abort+0x620>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d01d      	beq.n	80078ce <HAL_DMA_Abort+0x58a>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a34      	ldr	r2, [pc, #208]	; (8007968 <HAL_DMA_Abort+0x624>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d018      	beq.n	80078ce <HAL_DMA_Abort+0x58a>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a32      	ldr	r2, [pc, #200]	; (800796c <HAL_DMA_Abort+0x628>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d013      	beq.n	80078ce <HAL_DMA_Abort+0x58a>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a31      	ldr	r2, [pc, #196]	; (8007970 <HAL_DMA_Abort+0x62c>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d00e      	beq.n	80078ce <HAL_DMA_Abort+0x58a>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a2f      	ldr	r2, [pc, #188]	; (8007974 <HAL_DMA_Abort+0x630>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d009      	beq.n	80078ce <HAL_DMA_Abort+0x58a>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a2e      	ldr	r2, [pc, #184]	; (8007978 <HAL_DMA_Abort+0x634>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d004      	beq.n	80078ce <HAL_DMA_Abort+0x58a>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a2c      	ldr	r2, [pc, #176]	; (800797c <HAL_DMA_Abort+0x638>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d101      	bne.n	80078d2 <HAL_DMA_Abort+0x58e>
 80078ce:	2301      	movs	r3, #1
 80078d0:	e000      	b.n	80078d4 <HAL_DMA_Abort+0x590>
 80078d2:	2300      	movs	r3, #0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d015      	beq.n	8007904 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80078e0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00c      	beq.n	8007904 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80078f8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007902:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3718      	adds	r7, #24
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	40020010 	.word	0x40020010
 8007924:	40020028 	.word	0x40020028
 8007928:	40020040 	.word	0x40020040
 800792c:	40020058 	.word	0x40020058
 8007930:	40020070 	.word	0x40020070
 8007934:	40020088 	.word	0x40020088
 8007938:	400200a0 	.word	0x400200a0
 800793c:	400200b8 	.word	0x400200b8
 8007940:	40020410 	.word	0x40020410
 8007944:	40020428 	.word	0x40020428
 8007948:	40020440 	.word	0x40020440
 800794c:	40020458 	.word	0x40020458
 8007950:	40020470 	.word	0x40020470
 8007954:	40020488 	.word	0x40020488
 8007958:	400204a0 	.word	0x400204a0
 800795c:	400204b8 	.word	0x400204b8
 8007960:	58025408 	.word	0x58025408
 8007964:	5802541c 	.word	0x5802541c
 8007968:	58025430 	.word	0x58025430
 800796c:	58025444 	.word	0x58025444
 8007970:	58025458 	.word	0x58025458
 8007974:	5802546c 	.word	0x5802546c
 8007978:	58025480 	.word	0x58025480
 800797c:	58025494 	.word	0x58025494

08007980 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d101      	bne.n	8007992 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	e237      	b.n	8007e02 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007998:	b2db      	uxtb	r3, r3
 800799a:	2b02      	cmp	r3, #2
 800799c:	d004      	beq.n	80079a8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2280      	movs	r2, #128	; 0x80
 80079a2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e22c      	b.n	8007e02 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a5c      	ldr	r2, [pc, #368]	; (8007b20 <HAL_DMA_Abort_IT+0x1a0>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d04a      	beq.n	8007a48 <HAL_DMA_Abort_IT+0xc8>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a5b      	ldr	r2, [pc, #364]	; (8007b24 <HAL_DMA_Abort_IT+0x1a4>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d045      	beq.n	8007a48 <HAL_DMA_Abort_IT+0xc8>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a59      	ldr	r2, [pc, #356]	; (8007b28 <HAL_DMA_Abort_IT+0x1a8>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d040      	beq.n	8007a48 <HAL_DMA_Abort_IT+0xc8>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a58      	ldr	r2, [pc, #352]	; (8007b2c <HAL_DMA_Abort_IT+0x1ac>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d03b      	beq.n	8007a48 <HAL_DMA_Abort_IT+0xc8>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a56      	ldr	r2, [pc, #344]	; (8007b30 <HAL_DMA_Abort_IT+0x1b0>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d036      	beq.n	8007a48 <HAL_DMA_Abort_IT+0xc8>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a55      	ldr	r2, [pc, #340]	; (8007b34 <HAL_DMA_Abort_IT+0x1b4>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d031      	beq.n	8007a48 <HAL_DMA_Abort_IT+0xc8>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a53      	ldr	r2, [pc, #332]	; (8007b38 <HAL_DMA_Abort_IT+0x1b8>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d02c      	beq.n	8007a48 <HAL_DMA_Abort_IT+0xc8>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a52      	ldr	r2, [pc, #328]	; (8007b3c <HAL_DMA_Abort_IT+0x1bc>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d027      	beq.n	8007a48 <HAL_DMA_Abort_IT+0xc8>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a50      	ldr	r2, [pc, #320]	; (8007b40 <HAL_DMA_Abort_IT+0x1c0>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d022      	beq.n	8007a48 <HAL_DMA_Abort_IT+0xc8>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a4f      	ldr	r2, [pc, #316]	; (8007b44 <HAL_DMA_Abort_IT+0x1c4>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d01d      	beq.n	8007a48 <HAL_DMA_Abort_IT+0xc8>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a4d      	ldr	r2, [pc, #308]	; (8007b48 <HAL_DMA_Abort_IT+0x1c8>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d018      	beq.n	8007a48 <HAL_DMA_Abort_IT+0xc8>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a4c      	ldr	r2, [pc, #304]	; (8007b4c <HAL_DMA_Abort_IT+0x1cc>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d013      	beq.n	8007a48 <HAL_DMA_Abort_IT+0xc8>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a4a      	ldr	r2, [pc, #296]	; (8007b50 <HAL_DMA_Abort_IT+0x1d0>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d00e      	beq.n	8007a48 <HAL_DMA_Abort_IT+0xc8>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a49      	ldr	r2, [pc, #292]	; (8007b54 <HAL_DMA_Abort_IT+0x1d4>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d009      	beq.n	8007a48 <HAL_DMA_Abort_IT+0xc8>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a47      	ldr	r2, [pc, #284]	; (8007b58 <HAL_DMA_Abort_IT+0x1d8>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d004      	beq.n	8007a48 <HAL_DMA_Abort_IT+0xc8>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a46      	ldr	r2, [pc, #280]	; (8007b5c <HAL_DMA_Abort_IT+0x1dc>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d101      	bne.n	8007a4c <HAL_DMA_Abort_IT+0xcc>
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e000      	b.n	8007a4e <HAL_DMA_Abort_IT+0xce>
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	f000 8086 	beq.w	8007b60 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2204      	movs	r2, #4
 8007a58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a2f      	ldr	r2, [pc, #188]	; (8007b20 <HAL_DMA_Abort_IT+0x1a0>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d04a      	beq.n	8007afc <HAL_DMA_Abort_IT+0x17c>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a2e      	ldr	r2, [pc, #184]	; (8007b24 <HAL_DMA_Abort_IT+0x1a4>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d045      	beq.n	8007afc <HAL_DMA_Abort_IT+0x17c>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a2c      	ldr	r2, [pc, #176]	; (8007b28 <HAL_DMA_Abort_IT+0x1a8>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d040      	beq.n	8007afc <HAL_DMA_Abort_IT+0x17c>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a2b      	ldr	r2, [pc, #172]	; (8007b2c <HAL_DMA_Abort_IT+0x1ac>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d03b      	beq.n	8007afc <HAL_DMA_Abort_IT+0x17c>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a29      	ldr	r2, [pc, #164]	; (8007b30 <HAL_DMA_Abort_IT+0x1b0>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d036      	beq.n	8007afc <HAL_DMA_Abort_IT+0x17c>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a28      	ldr	r2, [pc, #160]	; (8007b34 <HAL_DMA_Abort_IT+0x1b4>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d031      	beq.n	8007afc <HAL_DMA_Abort_IT+0x17c>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a26      	ldr	r2, [pc, #152]	; (8007b38 <HAL_DMA_Abort_IT+0x1b8>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d02c      	beq.n	8007afc <HAL_DMA_Abort_IT+0x17c>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a25      	ldr	r2, [pc, #148]	; (8007b3c <HAL_DMA_Abort_IT+0x1bc>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d027      	beq.n	8007afc <HAL_DMA_Abort_IT+0x17c>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a23      	ldr	r2, [pc, #140]	; (8007b40 <HAL_DMA_Abort_IT+0x1c0>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d022      	beq.n	8007afc <HAL_DMA_Abort_IT+0x17c>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a22      	ldr	r2, [pc, #136]	; (8007b44 <HAL_DMA_Abort_IT+0x1c4>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d01d      	beq.n	8007afc <HAL_DMA_Abort_IT+0x17c>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a20      	ldr	r2, [pc, #128]	; (8007b48 <HAL_DMA_Abort_IT+0x1c8>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d018      	beq.n	8007afc <HAL_DMA_Abort_IT+0x17c>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a1f      	ldr	r2, [pc, #124]	; (8007b4c <HAL_DMA_Abort_IT+0x1cc>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d013      	beq.n	8007afc <HAL_DMA_Abort_IT+0x17c>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a1d      	ldr	r2, [pc, #116]	; (8007b50 <HAL_DMA_Abort_IT+0x1d0>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d00e      	beq.n	8007afc <HAL_DMA_Abort_IT+0x17c>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a1c      	ldr	r2, [pc, #112]	; (8007b54 <HAL_DMA_Abort_IT+0x1d4>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d009      	beq.n	8007afc <HAL_DMA_Abort_IT+0x17c>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a1a      	ldr	r2, [pc, #104]	; (8007b58 <HAL_DMA_Abort_IT+0x1d8>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d004      	beq.n	8007afc <HAL_DMA_Abort_IT+0x17c>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a19      	ldr	r2, [pc, #100]	; (8007b5c <HAL_DMA_Abort_IT+0x1dc>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d108      	bne.n	8007b0e <HAL_DMA_Abort_IT+0x18e>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f022 0201 	bic.w	r2, r2, #1
 8007b0a:	601a      	str	r2, [r3, #0]
 8007b0c:	e178      	b.n	8007e00 <HAL_DMA_Abort_IT+0x480>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f022 0201 	bic.w	r2, r2, #1
 8007b1c:	601a      	str	r2, [r3, #0]
 8007b1e:	e16f      	b.n	8007e00 <HAL_DMA_Abort_IT+0x480>
 8007b20:	40020010 	.word	0x40020010
 8007b24:	40020028 	.word	0x40020028
 8007b28:	40020040 	.word	0x40020040
 8007b2c:	40020058 	.word	0x40020058
 8007b30:	40020070 	.word	0x40020070
 8007b34:	40020088 	.word	0x40020088
 8007b38:	400200a0 	.word	0x400200a0
 8007b3c:	400200b8 	.word	0x400200b8
 8007b40:	40020410 	.word	0x40020410
 8007b44:	40020428 	.word	0x40020428
 8007b48:	40020440 	.word	0x40020440
 8007b4c:	40020458 	.word	0x40020458
 8007b50:	40020470 	.word	0x40020470
 8007b54:	40020488 	.word	0x40020488
 8007b58:	400204a0 	.word	0x400204a0
 8007b5c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f022 020e 	bic.w	r2, r2, #14
 8007b6e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a6c      	ldr	r2, [pc, #432]	; (8007d28 <HAL_DMA_Abort_IT+0x3a8>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d04a      	beq.n	8007c10 <HAL_DMA_Abort_IT+0x290>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a6b      	ldr	r2, [pc, #428]	; (8007d2c <HAL_DMA_Abort_IT+0x3ac>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d045      	beq.n	8007c10 <HAL_DMA_Abort_IT+0x290>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a69      	ldr	r2, [pc, #420]	; (8007d30 <HAL_DMA_Abort_IT+0x3b0>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d040      	beq.n	8007c10 <HAL_DMA_Abort_IT+0x290>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a68      	ldr	r2, [pc, #416]	; (8007d34 <HAL_DMA_Abort_IT+0x3b4>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d03b      	beq.n	8007c10 <HAL_DMA_Abort_IT+0x290>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a66      	ldr	r2, [pc, #408]	; (8007d38 <HAL_DMA_Abort_IT+0x3b8>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d036      	beq.n	8007c10 <HAL_DMA_Abort_IT+0x290>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a65      	ldr	r2, [pc, #404]	; (8007d3c <HAL_DMA_Abort_IT+0x3bc>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d031      	beq.n	8007c10 <HAL_DMA_Abort_IT+0x290>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a63      	ldr	r2, [pc, #396]	; (8007d40 <HAL_DMA_Abort_IT+0x3c0>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d02c      	beq.n	8007c10 <HAL_DMA_Abort_IT+0x290>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a62      	ldr	r2, [pc, #392]	; (8007d44 <HAL_DMA_Abort_IT+0x3c4>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d027      	beq.n	8007c10 <HAL_DMA_Abort_IT+0x290>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a60      	ldr	r2, [pc, #384]	; (8007d48 <HAL_DMA_Abort_IT+0x3c8>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d022      	beq.n	8007c10 <HAL_DMA_Abort_IT+0x290>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a5f      	ldr	r2, [pc, #380]	; (8007d4c <HAL_DMA_Abort_IT+0x3cc>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d01d      	beq.n	8007c10 <HAL_DMA_Abort_IT+0x290>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a5d      	ldr	r2, [pc, #372]	; (8007d50 <HAL_DMA_Abort_IT+0x3d0>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d018      	beq.n	8007c10 <HAL_DMA_Abort_IT+0x290>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a5c      	ldr	r2, [pc, #368]	; (8007d54 <HAL_DMA_Abort_IT+0x3d4>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d013      	beq.n	8007c10 <HAL_DMA_Abort_IT+0x290>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a5a      	ldr	r2, [pc, #360]	; (8007d58 <HAL_DMA_Abort_IT+0x3d8>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d00e      	beq.n	8007c10 <HAL_DMA_Abort_IT+0x290>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a59      	ldr	r2, [pc, #356]	; (8007d5c <HAL_DMA_Abort_IT+0x3dc>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d009      	beq.n	8007c10 <HAL_DMA_Abort_IT+0x290>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a57      	ldr	r2, [pc, #348]	; (8007d60 <HAL_DMA_Abort_IT+0x3e0>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d004      	beq.n	8007c10 <HAL_DMA_Abort_IT+0x290>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a56      	ldr	r2, [pc, #344]	; (8007d64 <HAL_DMA_Abort_IT+0x3e4>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d108      	bne.n	8007c22 <HAL_DMA_Abort_IT+0x2a2>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f022 0201 	bic.w	r2, r2, #1
 8007c1e:	601a      	str	r2, [r3, #0]
 8007c20:	e007      	b.n	8007c32 <HAL_DMA_Abort_IT+0x2b2>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f022 0201 	bic.w	r2, r2, #1
 8007c30:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a3c      	ldr	r2, [pc, #240]	; (8007d28 <HAL_DMA_Abort_IT+0x3a8>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d072      	beq.n	8007d22 <HAL_DMA_Abort_IT+0x3a2>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a3a      	ldr	r2, [pc, #232]	; (8007d2c <HAL_DMA_Abort_IT+0x3ac>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d06d      	beq.n	8007d22 <HAL_DMA_Abort_IT+0x3a2>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a39      	ldr	r2, [pc, #228]	; (8007d30 <HAL_DMA_Abort_IT+0x3b0>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d068      	beq.n	8007d22 <HAL_DMA_Abort_IT+0x3a2>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a37      	ldr	r2, [pc, #220]	; (8007d34 <HAL_DMA_Abort_IT+0x3b4>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d063      	beq.n	8007d22 <HAL_DMA_Abort_IT+0x3a2>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a36      	ldr	r2, [pc, #216]	; (8007d38 <HAL_DMA_Abort_IT+0x3b8>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d05e      	beq.n	8007d22 <HAL_DMA_Abort_IT+0x3a2>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a34      	ldr	r2, [pc, #208]	; (8007d3c <HAL_DMA_Abort_IT+0x3bc>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d059      	beq.n	8007d22 <HAL_DMA_Abort_IT+0x3a2>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a33      	ldr	r2, [pc, #204]	; (8007d40 <HAL_DMA_Abort_IT+0x3c0>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d054      	beq.n	8007d22 <HAL_DMA_Abort_IT+0x3a2>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a31      	ldr	r2, [pc, #196]	; (8007d44 <HAL_DMA_Abort_IT+0x3c4>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d04f      	beq.n	8007d22 <HAL_DMA_Abort_IT+0x3a2>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a30      	ldr	r2, [pc, #192]	; (8007d48 <HAL_DMA_Abort_IT+0x3c8>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d04a      	beq.n	8007d22 <HAL_DMA_Abort_IT+0x3a2>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a2e      	ldr	r2, [pc, #184]	; (8007d4c <HAL_DMA_Abort_IT+0x3cc>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d045      	beq.n	8007d22 <HAL_DMA_Abort_IT+0x3a2>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a2d      	ldr	r2, [pc, #180]	; (8007d50 <HAL_DMA_Abort_IT+0x3d0>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d040      	beq.n	8007d22 <HAL_DMA_Abort_IT+0x3a2>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a2b      	ldr	r2, [pc, #172]	; (8007d54 <HAL_DMA_Abort_IT+0x3d4>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d03b      	beq.n	8007d22 <HAL_DMA_Abort_IT+0x3a2>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a2a      	ldr	r2, [pc, #168]	; (8007d58 <HAL_DMA_Abort_IT+0x3d8>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d036      	beq.n	8007d22 <HAL_DMA_Abort_IT+0x3a2>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a28      	ldr	r2, [pc, #160]	; (8007d5c <HAL_DMA_Abort_IT+0x3dc>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d031      	beq.n	8007d22 <HAL_DMA_Abort_IT+0x3a2>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a27      	ldr	r2, [pc, #156]	; (8007d60 <HAL_DMA_Abort_IT+0x3e0>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d02c      	beq.n	8007d22 <HAL_DMA_Abort_IT+0x3a2>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a25      	ldr	r2, [pc, #148]	; (8007d64 <HAL_DMA_Abort_IT+0x3e4>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d027      	beq.n	8007d22 <HAL_DMA_Abort_IT+0x3a2>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a24      	ldr	r2, [pc, #144]	; (8007d68 <HAL_DMA_Abort_IT+0x3e8>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d022      	beq.n	8007d22 <HAL_DMA_Abort_IT+0x3a2>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a22      	ldr	r2, [pc, #136]	; (8007d6c <HAL_DMA_Abort_IT+0x3ec>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d01d      	beq.n	8007d22 <HAL_DMA_Abort_IT+0x3a2>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a21      	ldr	r2, [pc, #132]	; (8007d70 <HAL_DMA_Abort_IT+0x3f0>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d018      	beq.n	8007d22 <HAL_DMA_Abort_IT+0x3a2>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a1f      	ldr	r2, [pc, #124]	; (8007d74 <HAL_DMA_Abort_IT+0x3f4>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d013      	beq.n	8007d22 <HAL_DMA_Abort_IT+0x3a2>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a1e      	ldr	r2, [pc, #120]	; (8007d78 <HAL_DMA_Abort_IT+0x3f8>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d00e      	beq.n	8007d22 <HAL_DMA_Abort_IT+0x3a2>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a1c      	ldr	r2, [pc, #112]	; (8007d7c <HAL_DMA_Abort_IT+0x3fc>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d009      	beq.n	8007d22 <HAL_DMA_Abort_IT+0x3a2>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a1b      	ldr	r2, [pc, #108]	; (8007d80 <HAL_DMA_Abort_IT+0x400>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d004      	beq.n	8007d22 <HAL_DMA_Abort_IT+0x3a2>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a19      	ldr	r2, [pc, #100]	; (8007d84 <HAL_DMA_Abort_IT+0x404>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d132      	bne.n	8007d88 <HAL_DMA_Abort_IT+0x408>
 8007d22:	2301      	movs	r3, #1
 8007d24:	e031      	b.n	8007d8a <HAL_DMA_Abort_IT+0x40a>
 8007d26:	bf00      	nop
 8007d28:	40020010 	.word	0x40020010
 8007d2c:	40020028 	.word	0x40020028
 8007d30:	40020040 	.word	0x40020040
 8007d34:	40020058 	.word	0x40020058
 8007d38:	40020070 	.word	0x40020070
 8007d3c:	40020088 	.word	0x40020088
 8007d40:	400200a0 	.word	0x400200a0
 8007d44:	400200b8 	.word	0x400200b8
 8007d48:	40020410 	.word	0x40020410
 8007d4c:	40020428 	.word	0x40020428
 8007d50:	40020440 	.word	0x40020440
 8007d54:	40020458 	.word	0x40020458
 8007d58:	40020470 	.word	0x40020470
 8007d5c:	40020488 	.word	0x40020488
 8007d60:	400204a0 	.word	0x400204a0
 8007d64:	400204b8 	.word	0x400204b8
 8007d68:	58025408 	.word	0x58025408
 8007d6c:	5802541c 	.word	0x5802541c
 8007d70:	58025430 	.word	0x58025430
 8007d74:	58025444 	.word	0x58025444
 8007d78:	58025458 	.word	0x58025458
 8007d7c:	5802546c 	.word	0x5802546c
 8007d80:	58025480 	.word	0x58025480
 8007d84:	58025494 	.word	0x58025494
 8007d88:	2300      	movs	r3, #0
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d028      	beq.n	8007de0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d9c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007da2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007da8:	f003 031f 	and.w	r3, r3, #31
 8007dac:	2201      	movs	r2, #1
 8007dae:	409a      	lsls	r2, r3
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007dbc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00c      	beq.n	8007de0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007dd4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007dde:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d003      	beq.n	8007e00 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop

08007e0c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b08a      	sub	sp, #40	; 0x28
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007e14:	2300      	movs	r3, #0
 8007e16:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007e18:	4b67      	ldr	r3, [pc, #412]	; (8007fb8 <HAL_DMA_IRQHandler+0x1ac>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a67      	ldr	r2, [pc, #412]	; (8007fbc <HAL_DMA_IRQHandler+0x1b0>)
 8007e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e22:	0a9b      	lsrs	r3, r3, #10
 8007e24:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e2a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e30:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007e32:	6a3b      	ldr	r3, [r7, #32]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a5f      	ldr	r2, [pc, #380]	; (8007fc0 <HAL_DMA_IRQHandler+0x1b4>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d04a      	beq.n	8007ede <HAL_DMA_IRQHandler+0xd2>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a5d      	ldr	r2, [pc, #372]	; (8007fc4 <HAL_DMA_IRQHandler+0x1b8>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d045      	beq.n	8007ede <HAL_DMA_IRQHandler+0xd2>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a5c      	ldr	r2, [pc, #368]	; (8007fc8 <HAL_DMA_IRQHandler+0x1bc>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d040      	beq.n	8007ede <HAL_DMA_IRQHandler+0xd2>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a5a      	ldr	r2, [pc, #360]	; (8007fcc <HAL_DMA_IRQHandler+0x1c0>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d03b      	beq.n	8007ede <HAL_DMA_IRQHandler+0xd2>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a59      	ldr	r2, [pc, #356]	; (8007fd0 <HAL_DMA_IRQHandler+0x1c4>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d036      	beq.n	8007ede <HAL_DMA_IRQHandler+0xd2>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a57      	ldr	r2, [pc, #348]	; (8007fd4 <HAL_DMA_IRQHandler+0x1c8>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d031      	beq.n	8007ede <HAL_DMA_IRQHandler+0xd2>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a56      	ldr	r2, [pc, #344]	; (8007fd8 <HAL_DMA_IRQHandler+0x1cc>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d02c      	beq.n	8007ede <HAL_DMA_IRQHandler+0xd2>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a54      	ldr	r2, [pc, #336]	; (8007fdc <HAL_DMA_IRQHandler+0x1d0>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d027      	beq.n	8007ede <HAL_DMA_IRQHandler+0xd2>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a53      	ldr	r2, [pc, #332]	; (8007fe0 <HAL_DMA_IRQHandler+0x1d4>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d022      	beq.n	8007ede <HAL_DMA_IRQHandler+0xd2>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a51      	ldr	r2, [pc, #324]	; (8007fe4 <HAL_DMA_IRQHandler+0x1d8>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d01d      	beq.n	8007ede <HAL_DMA_IRQHandler+0xd2>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a50      	ldr	r2, [pc, #320]	; (8007fe8 <HAL_DMA_IRQHandler+0x1dc>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d018      	beq.n	8007ede <HAL_DMA_IRQHandler+0xd2>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a4e      	ldr	r2, [pc, #312]	; (8007fec <HAL_DMA_IRQHandler+0x1e0>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d013      	beq.n	8007ede <HAL_DMA_IRQHandler+0xd2>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a4d      	ldr	r2, [pc, #308]	; (8007ff0 <HAL_DMA_IRQHandler+0x1e4>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d00e      	beq.n	8007ede <HAL_DMA_IRQHandler+0xd2>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a4b      	ldr	r2, [pc, #300]	; (8007ff4 <HAL_DMA_IRQHandler+0x1e8>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d009      	beq.n	8007ede <HAL_DMA_IRQHandler+0xd2>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a4a      	ldr	r2, [pc, #296]	; (8007ff8 <HAL_DMA_IRQHandler+0x1ec>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d004      	beq.n	8007ede <HAL_DMA_IRQHandler+0xd2>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a48      	ldr	r2, [pc, #288]	; (8007ffc <HAL_DMA_IRQHandler+0x1f0>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d101      	bne.n	8007ee2 <HAL_DMA_IRQHandler+0xd6>
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e000      	b.n	8007ee4 <HAL_DMA_IRQHandler+0xd8>
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	f000 842b 	beq.w	8008740 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eee:	f003 031f 	and.w	r3, r3, #31
 8007ef2:	2208      	movs	r2, #8
 8007ef4:	409a      	lsls	r2, r3
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	4013      	ands	r3, r2
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f000 80a2 	beq.w	8008044 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a2e      	ldr	r2, [pc, #184]	; (8007fc0 <HAL_DMA_IRQHandler+0x1b4>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d04a      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x194>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a2d      	ldr	r2, [pc, #180]	; (8007fc4 <HAL_DMA_IRQHandler+0x1b8>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d045      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x194>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a2b      	ldr	r2, [pc, #172]	; (8007fc8 <HAL_DMA_IRQHandler+0x1bc>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d040      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x194>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a2a      	ldr	r2, [pc, #168]	; (8007fcc <HAL_DMA_IRQHandler+0x1c0>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d03b      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x194>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a28      	ldr	r2, [pc, #160]	; (8007fd0 <HAL_DMA_IRQHandler+0x1c4>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d036      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x194>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a27      	ldr	r2, [pc, #156]	; (8007fd4 <HAL_DMA_IRQHandler+0x1c8>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d031      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x194>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a25      	ldr	r2, [pc, #148]	; (8007fd8 <HAL_DMA_IRQHandler+0x1cc>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d02c      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x194>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a24      	ldr	r2, [pc, #144]	; (8007fdc <HAL_DMA_IRQHandler+0x1d0>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d027      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x194>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a22      	ldr	r2, [pc, #136]	; (8007fe0 <HAL_DMA_IRQHandler+0x1d4>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d022      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x194>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a21      	ldr	r2, [pc, #132]	; (8007fe4 <HAL_DMA_IRQHandler+0x1d8>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d01d      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x194>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a1f      	ldr	r2, [pc, #124]	; (8007fe8 <HAL_DMA_IRQHandler+0x1dc>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d018      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x194>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a1e      	ldr	r2, [pc, #120]	; (8007fec <HAL_DMA_IRQHandler+0x1e0>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d013      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x194>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a1c      	ldr	r2, [pc, #112]	; (8007ff0 <HAL_DMA_IRQHandler+0x1e4>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d00e      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x194>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a1b      	ldr	r2, [pc, #108]	; (8007ff4 <HAL_DMA_IRQHandler+0x1e8>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d009      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x194>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a19      	ldr	r2, [pc, #100]	; (8007ff8 <HAL_DMA_IRQHandler+0x1ec>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d004      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x194>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a18      	ldr	r2, [pc, #96]	; (8007ffc <HAL_DMA_IRQHandler+0x1f0>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d12f      	bne.n	8008000 <HAL_DMA_IRQHandler+0x1f4>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f003 0304 	and.w	r3, r3, #4
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	bf14      	ite	ne
 8007fae:	2301      	movne	r3, #1
 8007fb0:	2300      	moveq	r3, #0
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	e02e      	b.n	8008014 <HAL_DMA_IRQHandler+0x208>
 8007fb6:	bf00      	nop
 8007fb8:	24000054 	.word	0x24000054
 8007fbc:	1b4e81b5 	.word	0x1b4e81b5
 8007fc0:	40020010 	.word	0x40020010
 8007fc4:	40020028 	.word	0x40020028
 8007fc8:	40020040 	.word	0x40020040
 8007fcc:	40020058 	.word	0x40020058
 8007fd0:	40020070 	.word	0x40020070
 8007fd4:	40020088 	.word	0x40020088
 8007fd8:	400200a0 	.word	0x400200a0
 8007fdc:	400200b8 	.word	0x400200b8
 8007fe0:	40020410 	.word	0x40020410
 8007fe4:	40020428 	.word	0x40020428
 8007fe8:	40020440 	.word	0x40020440
 8007fec:	40020458 	.word	0x40020458
 8007ff0:	40020470 	.word	0x40020470
 8007ff4:	40020488 	.word	0x40020488
 8007ff8:	400204a0 	.word	0x400204a0
 8007ffc:	400204b8 	.word	0x400204b8
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f003 0308 	and.w	r3, r3, #8
 800800a:	2b00      	cmp	r3, #0
 800800c:	bf14      	ite	ne
 800800e:	2301      	movne	r3, #1
 8008010:	2300      	moveq	r3, #0
 8008012:	b2db      	uxtb	r3, r3
 8008014:	2b00      	cmp	r3, #0
 8008016:	d015      	beq.n	8008044 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f022 0204 	bic.w	r2, r2, #4
 8008026:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800802c:	f003 031f 	and.w	r3, r3, #31
 8008030:	2208      	movs	r2, #8
 8008032:	409a      	lsls	r2, r3
 8008034:	6a3b      	ldr	r3, [r7, #32]
 8008036:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800803c:	f043 0201 	orr.w	r2, r3, #1
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008048:	f003 031f 	and.w	r3, r3, #31
 800804c:	69ba      	ldr	r2, [r7, #24]
 800804e:	fa22 f303 	lsr.w	r3, r2, r3
 8008052:	f003 0301 	and.w	r3, r3, #1
 8008056:	2b00      	cmp	r3, #0
 8008058:	d06e      	beq.n	8008138 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a69      	ldr	r2, [pc, #420]	; (8008204 <HAL_DMA_IRQHandler+0x3f8>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d04a      	beq.n	80080fa <HAL_DMA_IRQHandler+0x2ee>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a67      	ldr	r2, [pc, #412]	; (8008208 <HAL_DMA_IRQHandler+0x3fc>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d045      	beq.n	80080fa <HAL_DMA_IRQHandler+0x2ee>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a66      	ldr	r2, [pc, #408]	; (800820c <HAL_DMA_IRQHandler+0x400>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d040      	beq.n	80080fa <HAL_DMA_IRQHandler+0x2ee>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a64      	ldr	r2, [pc, #400]	; (8008210 <HAL_DMA_IRQHandler+0x404>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d03b      	beq.n	80080fa <HAL_DMA_IRQHandler+0x2ee>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a63      	ldr	r2, [pc, #396]	; (8008214 <HAL_DMA_IRQHandler+0x408>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d036      	beq.n	80080fa <HAL_DMA_IRQHandler+0x2ee>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a61      	ldr	r2, [pc, #388]	; (8008218 <HAL_DMA_IRQHandler+0x40c>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d031      	beq.n	80080fa <HAL_DMA_IRQHandler+0x2ee>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a60      	ldr	r2, [pc, #384]	; (800821c <HAL_DMA_IRQHandler+0x410>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d02c      	beq.n	80080fa <HAL_DMA_IRQHandler+0x2ee>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a5e      	ldr	r2, [pc, #376]	; (8008220 <HAL_DMA_IRQHandler+0x414>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d027      	beq.n	80080fa <HAL_DMA_IRQHandler+0x2ee>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a5d      	ldr	r2, [pc, #372]	; (8008224 <HAL_DMA_IRQHandler+0x418>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d022      	beq.n	80080fa <HAL_DMA_IRQHandler+0x2ee>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a5b      	ldr	r2, [pc, #364]	; (8008228 <HAL_DMA_IRQHandler+0x41c>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d01d      	beq.n	80080fa <HAL_DMA_IRQHandler+0x2ee>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a5a      	ldr	r2, [pc, #360]	; (800822c <HAL_DMA_IRQHandler+0x420>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d018      	beq.n	80080fa <HAL_DMA_IRQHandler+0x2ee>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a58      	ldr	r2, [pc, #352]	; (8008230 <HAL_DMA_IRQHandler+0x424>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d013      	beq.n	80080fa <HAL_DMA_IRQHandler+0x2ee>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a57      	ldr	r2, [pc, #348]	; (8008234 <HAL_DMA_IRQHandler+0x428>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d00e      	beq.n	80080fa <HAL_DMA_IRQHandler+0x2ee>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a55      	ldr	r2, [pc, #340]	; (8008238 <HAL_DMA_IRQHandler+0x42c>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d009      	beq.n	80080fa <HAL_DMA_IRQHandler+0x2ee>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a54      	ldr	r2, [pc, #336]	; (800823c <HAL_DMA_IRQHandler+0x430>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d004      	beq.n	80080fa <HAL_DMA_IRQHandler+0x2ee>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a52      	ldr	r2, [pc, #328]	; (8008240 <HAL_DMA_IRQHandler+0x434>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d10a      	bne.n	8008110 <HAL_DMA_IRQHandler+0x304>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	695b      	ldr	r3, [r3, #20]
 8008100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008104:	2b00      	cmp	r3, #0
 8008106:	bf14      	ite	ne
 8008108:	2301      	movne	r3, #1
 800810a:	2300      	moveq	r3, #0
 800810c:	b2db      	uxtb	r3, r3
 800810e:	e003      	b.n	8008118 <HAL_DMA_IRQHandler+0x30c>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2300      	movs	r3, #0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00d      	beq.n	8008138 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008120:	f003 031f 	and.w	r3, r3, #31
 8008124:	2201      	movs	r2, #1
 8008126:	409a      	lsls	r2, r3
 8008128:	6a3b      	ldr	r3, [r7, #32]
 800812a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008130:	f043 0202 	orr.w	r2, r3, #2
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800813c:	f003 031f 	and.w	r3, r3, #31
 8008140:	2204      	movs	r2, #4
 8008142:	409a      	lsls	r2, r3
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	4013      	ands	r3, r2
 8008148:	2b00      	cmp	r3, #0
 800814a:	f000 808f 	beq.w	800826c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a2c      	ldr	r2, [pc, #176]	; (8008204 <HAL_DMA_IRQHandler+0x3f8>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d04a      	beq.n	80081ee <HAL_DMA_IRQHandler+0x3e2>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a2a      	ldr	r2, [pc, #168]	; (8008208 <HAL_DMA_IRQHandler+0x3fc>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d045      	beq.n	80081ee <HAL_DMA_IRQHandler+0x3e2>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a29      	ldr	r2, [pc, #164]	; (800820c <HAL_DMA_IRQHandler+0x400>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d040      	beq.n	80081ee <HAL_DMA_IRQHandler+0x3e2>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a27      	ldr	r2, [pc, #156]	; (8008210 <HAL_DMA_IRQHandler+0x404>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d03b      	beq.n	80081ee <HAL_DMA_IRQHandler+0x3e2>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a26      	ldr	r2, [pc, #152]	; (8008214 <HAL_DMA_IRQHandler+0x408>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d036      	beq.n	80081ee <HAL_DMA_IRQHandler+0x3e2>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a24      	ldr	r2, [pc, #144]	; (8008218 <HAL_DMA_IRQHandler+0x40c>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d031      	beq.n	80081ee <HAL_DMA_IRQHandler+0x3e2>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a23      	ldr	r2, [pc, #140]	; (800821c <HAL_DMA_IRQHandler+0x410>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d02c      	beq.n	80081ee <HAL_DMA_IRQHandler+0x3e2>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a21      	ldr	r2, [pc, #132]	; (8008220 <HAL_DMA_IRQHandler+0x414>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d027      	beq.n	80081ee <HAL_DMA_IRQHandler+0x3e2>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a20      	ldr	r2, [pc, #128]	; (8008224 <HAL_DMA_IRQHandler+0x418>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d022      	beq.n	80081ee <HAL_DMA_IRQHandler+0x3e2>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a1e      	ldr	r2, [pc, #120]	; (8008228 <HAL_DMA_IRQHandler+0x41c>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d01d      	beq.n	80081ee <HAL_DMA_IRQHandler+0x3e2>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a1d      	ldr	r2, [pc, #116]	; (800822c <HAL_DMA_IRQHandler+0x420>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d018      	beq.n	80081ee <HAL_DMA_IRQHandler+0x3e2>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a1b      	ldr	r2, [pc, #108]	; (8008230 <HAL_DMA_IRQHandler+0x424>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d013      	beq.n	80081ee <HAL_DMA_IRQHandler+0x3e2>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a1a      	ldr	r2, [pc, #104]	; (8008234 <HAL_DMA_IRQHandler+0x428>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d00e      	beq.n	80081ee <HAL_DMA_IRQHandler+0x3e2>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a18      	ldr	r2, [pc, #96]	; (8008238 <HAL_DMA_IRQHandler+0x42c>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d009      	beq.n	80081ee <HAL_DMA_IRQHandler+0x3e2>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a17      	ldr	r2, [pc, #92]	; (800823c <HAL_DMA_IRQHandler+0x430>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d004      	beq.n	80081ee <HAL_DMA_IRQHandler+0x3e2>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a15      	ldr	r2, [pc, #84]	; (8008240 <HAL_DMA_IRQHandler+0x434>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d12a      	bne.n	8008244 <HAL_DMA_IRQHandler+0x438>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f003 0302 	and.w	r3, r3, #2
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	bf14      	ite	ne
 80081fc:	2301      	movne	r3, #1
 80081fe:	2300      	moveq	r3, #0
 8008200:	b2db      	uxtb	r3, r3
 8008202:	e023      	b.n	800824c <HAL_DMA_IRQHandler+0x440>
 8008204:	40020010 	.word	0x40020010
 8008208:	40020028 	.word	0x40020028
 800820c:	40020040 	.word	0x40020040
 8008210:	40020058 	.word	0x40020058
 8008214:	40020070 	.word	0x40020070
 8008218:	40020088 	.word	0x40020088
 800821c:	400200a0 	.word	0x400200a0
 8008220:	400200b8 	.word	0x400200b8
 8008224:	40020410 	.word	0x40020410
 8008228:	40020428 	.word	0x40020428
 800822c:	40020440 	.word	0x40020440
 8008230:	40020458 	.word	0x40020458
 8008234:	40020470 	.word	0x40020470
 8008238:	40020488 	.word	0x40020488
 800823c:	400204a0 	.word	0x400204a0
 8008240:	400204b8 	.word	0x400204b8
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	2300      	movs	r3, #0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d00d      	beq.n	800826c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008254:	f003 031f 	and.w	r3, r3, #31
 8008258:	2204      	movs	r2, #4
 800825a:	409a      	lsls	r2, r3
 800825c:	6a3b      	ldr	r3, [r7, #32]
 800825e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008264:	f043 0204 	orr.w	r2, r3, #4
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008270:	f003 031f 	and.w	r3, r3, #31
 8008274:	2210      	movs	r2, #16
 8008276:	409a      	lsls	r2, r3
 8008278:	69bb      	ldr	r3, [r7, #24]
 800827a:	4013      	ands	r3, r2
 800827c:	2b00      	cmp	r3, #0
 800827e:	f000 80a6 	beq.w	80083ce <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a85      	ldr	r2, [pc, #532]	; (800849c <HAL_DMA_IRQHandler+0x690>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d04a      	beq.n	8008322 <HAL_DMA_IRQHandler+0x516>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a83      	ldr	r2, [pc, #524]	; (80084a0 <HAL_DMA_IRQHandler+0x694>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d045      	beq.n	8008322 <HAL_DMA_IRQHandler+0x516>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a82      	ldr	r2, [pc, #520]	; (80084a4 <HAL_DMA_IRQHandler+0x698>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d040      	beq.n	8008322 <HAL_DMA_IRQHandler+0x516>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a80      	ldr	r2, [pc, #512]	; (80084a8 <HAL_DMA_IRQHandler+0x69c>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d03b      	beq.n	8008322 <HAL_DMA_IRQHandler+0x516>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a7f      	ldr	r2, [pc, #508]	; (80084ac <HAL_DMA_IRQHandler+0x6a0>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d036      	beq.n	8008322 <HAL_DMA_IRQHandler+0x516>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a7d      	ldr	r2, [pc, #500]	; (80084b0 <HAL_DMA_IRQHandler+0x6a4>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d031      	beq.n	8008322 <HAL_DMA_IRQHandler+0x516>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a7c      	ldr	r2, [pc, #496]	; (80084b4 <HAL_DMA_IRQHandler+0x6a8>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d02c      	beq.n	8008322 <HAL_DMA_IRQHandler+0x516>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a7a      	ldr	r2, [pc, #488]	; (80084b8 <HAL_DMA_IRQHandler+0x6ac>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d027      	beq.n	8008322 <HAL_DMA_IRQHandler+0x516>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a79      	ldr	r2, [pc, #484]	; (80084bc <HAL_DMA_IRQHandler+0x6b0>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d022      	beq.n	8008322 <HAL_DMA_IRQHandler+0x516>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a77      	ldr	r2, [pc, #476]	; (80084c0 <HAL_DMA_IRQHandler+0x6b4>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d01d      	beq.n	8008322 <HAL_DMA_IRQHandler+0x516>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a76      	ldr	r2, [pc, #472]	; (80084c4 <HAL_DMA_IRQHandler+0x6b8>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d018      	beq.n	8008322 <HAL_DMA_IRQHandler+0x516>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a74      	ldr	r2, [pc, #464]	; (80084c8 <HAL_DMA_IRQHandler+0x6bc>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d013      	beq.n	8008322 <HAL_DMA_IRQHandler+0x516>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a73      	ldr	r2, [pc, #460]	; (80084cc <HAL_DMA_IRQHandler+0x6c0>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d00e      	beq.n	8008322 <HAL_DMA_IRQHandler+0x516>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a71      	ldr	r2, [pc, #452]	; (80084d0 <HAL_DMA_IRQHandler+0x6c4>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d009      	beq.n	8008322 <HAL_DMA_IRQHandler+0x516>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a70      	ldr	r2, [pc, #448]	; (80084d4 <HAL_DMA_IRQHandler+0x6c8>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d004      	beq.n	8008322 <HAL_DMA_IRQHandler+0x516>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a6e      	ldr	r2, [pc, #440]	; (80084d8 <HAL_DMA_IRQHandler+0x6cc>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d10a      	bne.n	8008338 <HAL_DMA_IRQHandler+0x52c>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f003 0308 	and.w	r3, r3, #8
 800832c:	2b00      	cmp	r3, #0
 800832e:	bf14      	ite	ne
 8008330:	2301      	movne	r3, #1
 8008332:	2300      	moveq	r3, #0
 8008334:	b2db      	uxtb	r3, r3
 8008336:	e009      	b.n	800834c <HAL_DMA_IRQHandler+0x540>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f003 0304 	and.w	r3, r3, #4
 8008342:	2b00      	cmp	r3, #0
 8008344:	bf14      	ite	ne
 8008346:	2301      	movne	r3, #1
 8008348:	2300      	moveq	r3, #0
 800834a:	b2db      	uxtb	r3, r3
 800834c:	2b00      	cmp	r3, #0
 800834e:	d03e      	beq.n	80083ce <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008354:	f003 031f 	and.w	r3, r3, #31
 8008358:	2210      	movs	r2, #16
 800835a:	409a      	lsls	r2, r3
 800835c:	6a3b      	ldr	r3, [r7, #32]
 800835e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800836a:	2b00      	cmp	r3, #0
 800836c:	d018      	beq.n	80083a0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008378:	2b00      	cmp	r3, #0
 800837a:	d108      	bne.n	800838e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008380:	2b00      	cmp	r3, #0
 8008382:	d024      	beq.n	80083ce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	4798      	blx	r3
 800838c:	e01f      	b.n	80083ce <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008392:	2b00      	cmp	r3, #0
 8008394:	d01b      	beq.n	80083ce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	4798      	blx	r3
 800839e:	e016      	b.n	80083ce <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d107      	bne.n	80083be <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f022 0208 	bic.w	r2, r2, #8
 80083bc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d003      	beq.n	80083ce <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083d2:	f003 031f 	and.w	r3, r3, #31
 80083d6:	2220      	movs	r2, #32
 80083d8:	409a      	lsls	r2, r3
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	4013      	ands	r3, r2
 80083de:	2b00      	cmp	r3, #0
 80083e0:	f000 8110 	beq.w	8008604 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a2c      	ldr	r2, [pc, #176]	; (800849c <HAL_DMA_IRQHandler+0x690>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d04a      	beq.n	8008484 <HAL_DMA_IRQHandler+0x678>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a2b      	ldr	r2, [pc, #172]	; (80084a0 <HAL_DMA_IRQHandler+0x694>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d045      	beq.n	8008484 <HAL_DMA_IRQHandler+0x678>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a29      	ldr	r2, [pc, #164]	; (80084a4 <HAL_DMA_IRQHandler+0x698>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d040      	beq.n	8008484 <HAL_DMA_IRQHandler+0x678>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a28      	ldr	r2, [pc, #160]	; (80084a8 <HAL_DMA_IRQHandler+0x69c>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d03b      	beq.n	8008484 <HAL_DMA_IRQHandler+0x678>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a26      	ldr	r2, [pc, #152]	; (80084ac <HAL_DMA_IRQHandler+0x6a0>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d036      	beq.n	8008484 <HAL_DMA_IRQHandler+0x678>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a25      	ldr	r2, [pc, #148]	; (80084b0 <HAL_DMA_IRQHandler+0x6a4>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d031      	beq.n	8008484 <HAL_DMA_IRQHandler+0x678>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a23      	ldr	r2, [pc, #140]	; (80084b4 <HAL_DMA_IRQHandler+0x6a8>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d02c      	beq.n	8008484 <HAL_DMA_IRQHandler+0x678>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a22      	ldr	r2, [pc, #136]	; (80084b8 <HAL_DMA_IRQHandler+0x6ac>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d027      	beq.n	8008484 <HAL_DMA_IRQHandler+0x678>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a20      	ldr	r2, [pc, #128]	; (80084bc <HAL_DMA_IRQHandler+0x6b0>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d022      	beq.n	8008484 <HAL_DMA_IRQHandler+0x678>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a1f      	ldr	r2, [pc, #124]	; (80084c0 <HAL_DMA_IRQHandler+0x6b4>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d01d      	beq.n	8008484 <HAL_DMA_IRQHandler+0x678>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a1d      	ldr	r2, [pc, #116]	; (80084c4 <HAL_DMA_IRQHandler+0x6b8>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d018      	beq.n	8008484 <HAL_DMA_IRQHandler+0x678>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a1c      	ldr	r2, [pc, #112]	; (80084c8 <HAL_DMA_IRQHandler+0x6bc>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d013      	beq.n	8008484 <HAL_DMA_IRQHandler+0x678>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a1a      	ldr	r2, [pc, #104]	; (80084cc <HAL_DMA_IRQHandler+0x6c0>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d00e      	beq.n	8008484 <HAL_DMA_IRQHandler+0x678>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a19      	ldr	r2, [pc, #100]	; (80084d0 <HAL_DMA_IRQHandler+0x6c4>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d009      	beq.n	8008484 <HAL_DMA_IRQHandler+0x678>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a17      	ldr	r2, [pc, #92]	; (80084d4 <HAL_DMA_IRQHandler+0x6c8>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d004      	beq.n	8008484 <HAL_DMA_IRQHandler+0x678>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a16      	ldr	r2, [pc, #88]	; (80084d8 <HAL_DMA_IRQHandler+0x6cc>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d12b      	bne.n	80084dc <HAL_DMA_IRQHandler+0x6d0>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f003 0310 	and.w	r3, r3, #16
 800848e:	2b00      	cmp	r3, #0
 8008490:	bf14      	ite	ne
 8008492:	2301      	movne	r3, #1
 8008494:	2300      	moveq	r3, #0
 8008496:	b2db      	uxtb	r3, r3
 8008498:	e02a      	b.n	80084f0 <HAL_DMA_IRQHandler+0x6e4>
 800849a:	bf00      	nop
 800849c:	40020010 	.word	0x40020010
 80084a0:	40020028 	.word	0x40020028
 80084a4:	40020040 	.word	0x40020040
 80084a8:	40020058 	.word	0x40020058
 80084ac:	40020070 	.word	0x40020070
 80084b0:	40020088 	.word	0x40020088
 80084b4:	400200a0 	.word	0x400200a0
 80084b8:	400200b8 	.word	0x400200b8
 80084bc:	40020410 	.word	0x40020410
 80084c0:	40020428 	.word	0x40020428
 80084c4:	40020440 	.word	0x40020440
 80084c8:	40020458 	.word	0x40020458
 80084cc:	40020470 	.word	0x40020470
 80084d0:	40020488 	.word	0x40020488
 80084d4:	400204a0 	.word	0x400204a0
 80084d8:	400204b8 	.word	0x400204b8
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f003 0302 	and.w	r3, r3, #2
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	bf14      	ite	ne
 80084ea:	2301      	movne	r3, #1
 80084ec:	2300      	moveq	r3, #0
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	f000 8087 	beq.w	8008604 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084fa:	f003 031f 	and.w	r3, r3, #31
 80084fe:	2220      	movs	r2, #32
 8008500:	409a      	lsls	r2, r3
 8008502:	6a3b      	ldr	r3, [r7, #32]
 8008504:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800850c:	b2db      	uxtb	r3, r3
 800850e:	2b04      	cmp	r3, #4
 8008510:	d139      	bne.n	8008586 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f022 0216 	bic.w	r2, r2, #22
 8008520:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	695a      	ldr	r2, [r3, #20]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008530:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008536:	2b00      	cmp	r3, #0
 8008538:	d103      	bne.n	8008542 <HAL_DMA_IRQHandler+0x736>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800853e:	2b00      	cmp	r3, #0
 8008540:	d007      	beq.n	8008552 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f022 0208 	bic.w	r2, r2, #8
 8008550:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008556:	f003 031f 	and.w	r3, r3, #31
 800855a:	223f      	movs	r2, #63	; 0x3f
 800855c:	409a      	lsls	r2, r3
 800855e:	6a3b      	ldr	r3, [r7, #32]
 8008560:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2201      	movs	r2, #1
 8008566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008576:	2b00      	cmp	r3, #0
 8008578:	f000 834a 	beq.w	8008c10 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	4798      	blx	r3
          }
          return;
 8008584:	e344      	b.n	8008c10 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008590:	2b00      	cmp	r3, #0
 8008592:	d018      	beq.n	80085c6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d108      	bne.n	80085b4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d02c      	beq.n	8008604 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	4798      	blx	r3
 80085b2:	e027      	b.n	8008604 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d023      	beq.n	8008604 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	4798      	blx	r3
 80085c4:	e01e      	b.n	8008604 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d10f      	bne.n	80085f4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f022 0210 	bic.w	r2, r2, #16
 80085e2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d003      	beq.n	8008604 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008608:	2b00      	cmp	r3, #0
 800860a:	f000 8306 	beq.w	8008c1a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008612:	f003 0301 	and.w	r3, r3, #1
 8008616:	2b00      	cmp	r3, #0
 8008618:	f000 8088 	beq.w	800872c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2204      	movs	r2, #4
 8008620:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a7a      	ldr	r2, [pc, #488]	; (8008814 <HAL_DMA_IRQHandler+0xa08>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d04a      	beq.n	80086c4 <HAL_DMA_IRQHandler+0x8b8>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a79      	ldr	r2, [pc, #484]	; (8008818 <HAL_DMA_IRQHandler+0xa0c>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d045      	beq.n	80086c4 <HAL_DMA_IRQHandler+0x8b8>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a77      	ldr	r2, [pc, #476]	; (800881c <HAL_DMA_IRQHandler+0xa10>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d040      	beq.n	80086c4 <HAL_DMA_IRQHandler+0x8b8>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a76      	ldr	r2, [pc, #472]	; (8008820 <HAL_DMA_IRQHandler+0xa14>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d03b      	beq.n	80086c4 <HAL_DMA_IRQHandler+0x8b8>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a74      	ldr	r2, [pc, #464]	; (8008824 <HAL_DMA_IRQHandler+0xa18>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d036      	beq.n	80086c4 <HAL_DMA_IRQHandler+0x8b8>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a73      	ldr	r2, [pc, #460]	; (8008828 <HAL_DMA_IRQHandler+0xa1c>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d031      	beq.n	80086c4 <HAL_DMA_IRQHandler+0x8b8>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a71      	ldr	r2, [pc, #452]	; (800882c <HAL_DMA_IRQHandler+0xa20>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d02c      	beq.n	80086c4 <HAL_DMA_IRQHandler+0x8b8>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a70      	ldr	r2, [pc, #448]	; (8008830 <HAL_DMA_IRQHandler+0xa24>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d027      	beq.n	80086c4 <HAL_DMA_IRQHandler+0x8b8>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a6e      	ldr	r2, [pc, #440]	; (8008834 <HAL_DMA_IRQHandler+0xa28>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d022      	beq.n	80086c4 <HAL_DMA_IRQHandler+0x8b8>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a6d      	ldr	r2, [pc, #436]	; (8008838 <HAL_DMA_IRQHandler+0xa2c>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d01d      	beq.n	80086c4 <HAL_DMA_IRQHandler+0x8b8>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a6b      	ldr	r2, [pc, #428]	; (800883c <HAL_DMA_IRQHandler+0xa30>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d018      	beq.n	80086c4 <HAL_DMA_IRQHandler+0x8b8>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a6a      	ldr	r2, [pc, #424]	; (8008840 <HAL_DMA_IRQHandler+0xa34>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d013      	beq.n	80086c4 <HAL_DMA_IRQHandler+0x8b8>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a68      	ldr	r2, [pc, #416]	; (8008844 <HAL_DMA_IRQHandler+0xa38>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d00e      	beq.n	80086c4 <HAL_DMA_IRQHandler+0x8b8>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a67      	ldr	r2, [pc, #412]	; (8008848 <HAL_DMA_IRQHandler+0xa3c>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d009      	beq.n	80086c4 <HAL_DMA_IRQHandler+0x8b8>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a65      	ldr	r2, [pc, #404]	; (800884c <HAL_DMA_IRQHandler+0xa40>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d004      	beq.n	80086c4 <HAL_DMA_IRQHandler+0x8b8>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a64      	ldr	r2, [pc, #400]	; (8008850 <HAL_DMA_IRQHandler+0xa44>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d108      	bne.n	80086d6 <HAL_DMA_IRQHandler+0x8ca>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f022 0201 	bic.w	r2, r2, #1
 80086d2:	601a      	str	r2, [r3, #0]
 80086d4:	e007      	b.n	80086e6 <HAL_DMA_IRQHandler+0x8da>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f022 0201 	bic.w	r2, r2, #1
 80086e4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	3301      	adds	r3, #1
 80086ea:	60fb      	str	r3, [r7, #12]
 80086ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d307      	bcc.n	8008702 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f003 0301 	and.w	r3, r3, #1
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d1f2      	bne.n	80086e6 <HAL_DMA_IRQHandler+0x8da>
 8008700:	e000      	b.n	8008704 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008702:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f003 0301 	and.w	r3, r3, #1
 800870e:	2b00      	cmp	r3, #0
 8008710:	d004      	beq.n	800871c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2203      	movs	r2, #3
 8008716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800871a:	e003      	b.n	8008724 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008730:	2b00      	cmp	r3, #0
 8008732:	f000 8272 	beq.w	8008c1a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	4798      	blx	r3
 800873e:	e26c      	b.n	8008c1a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a43      	ldr	r2, [pc, #268]	; (8008854 <HAL_DMA_IRQHandler+0xa48>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d022      	beq.n	8008790 <HAL_DMA_IRQHandler+0x984>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a42      	ldr	r2, [pc, #264]	; (8008858 <HAL_DMA_IRQHandler+0xa4c>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d01d      	beq.n	8008790 <HAL_DMA_IRQHandler+0x984>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a40      	ldr	r2, [pc, #256]	; (800885c <HAL_DMA_IRQHandler+0xa50>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d018      	beq.n	8008790 <HAL_DMA_IRQHandler+0x984>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a3f      	ldr	r2, [pc, #252]	; (8008860 <HAL_DMA_IRQHandler+0xa54>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d013      	beq.n	8008790 <HAL_DMA_IRQHandler+0x984>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a3d      	ldr	r2, [pc, #244]	; (8008864 <HAL_DMA_IRQHandler+0xa58>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d00e      	beq.n	8008790 <HAL_DMA_IRQHandler+0x984>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a3c      	ldr	r2, [pc, #240]	; (8008868 <HAL_DMA_IRQHandler+0xa5c>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d009      	beq.n	8008790 <HAL_DMA_IRQHandler+0x984>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a3a      	ldr	r2, [pc, #232]	; (800886c <HAL_DMA_IRQHandler+0xa60>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d004      	beq.n	8008790 <HAL_DMA_IRQHandler+0x984>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a39      	ldr	r2, [pc, #228]	; (8008870 <HAL_DMA_IRQHandler+0xa64>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d101      	bne.n	8008794 <HAL_DMA_IRQHandler+0x988>
 8008790:	2301      	movs	r3, #1
 8008792:	e000      	b.n	8008796 <HAL_DMA_IRQHandler+0x98a>
 8008794:	2300      	movs	r3, #0
 8008796:	2b00      	cmp	r3, #0
 8008798:	f000 823f 	beq.w	8008c1a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087a8:	f003 031f 	and.w	r3, r3, #31
 80087ac:	2204      	movs	r2, #4
 80087ae:	409a      	lsls	r2, r3
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	4013      	ands	r3, r2
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	f000 80cd 	beq.w	8008954 <HAL_DMA_IRQHandler+0xb48>
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	f003 0304 	and.w	r3, r3, #4
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f000 80c7 	beq.w	8008954 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087ca:	f003 031f 	and.w	r3, r3, #31
 80087ce:	2204      	movs	r2, #4
 80087d0:	409a      	lsls	r2, r3
 80087d2:	69fb      	ldr	r3, [r7, #28]
 80087d4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d049      	beq.n	8008874 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d109      	bne.n	80087fe <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	f000 8210 	beq.w	8008c14 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80087fc:	e20a      	b.n	8008c14 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008802:	2b00      	cmp	r3, #0
 8008804:	f000 8206 	beq.w	8008c14 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008810:	e200      	b.n	8008c14 <HAL_DMA_IRQHandler+0xe08>
 8008812:	bf00      	nop
 8008814:	40020010 	.word	0x40020010
 8008818:	40020028 	.word	0x40020028
 800881c:	40020040 	.word	0x40020040
 8008820:	40020058 	.word	0x40020058
 8008824:	40020070 	.word	0x40020070
 8008828:	40020088 	.word	0x40020088
 800882c:	400200a0 	.word	0x400200a0
 8008830:	400200b8 	.word	0x400200b8
 8008834:	40020410 	.word	0x40020410
 8008838:	40020428 	.word	0x40020428
 800883c:	40020440 	.word	0x40020440
 8008840:	40020458 	.word	0x40020458
 8008844:	40020470 	.word	0x40020470
 8008848:	40020488 	.word	0x40020488
 800884c:	400204a0 	.word	0x400204a0
 8008850:	400204b8 	.word	0x400204b8
 8008854:	58025408 	.word	0x58025408
 8008858:	5802541c 	.word	0x5802541c
 800885c:	58025430 	.word	0x58025430
 8008860:	58025444 	.word	0x58025444
 8008864:	58025458 	.word	0x58025458
 8008868:	5802546c 	.word	0x5802546c
 800886c:	58025480 	.word	0x58025480
 8008870:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	f003 0320 	and.w	r3, r3, #32
 800887a:	2b00      	cmp	r3, #0
 800887c:	d160      	bne.n	8008940 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a7f      	ldr	r2, [pc, #508]	; (8008a80 <HAL_DMA_IRQHandler+0xc74>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d04a      	beq.n	800891e <HAL_DMA_IRQHandler+0xb12>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a7d      	ldr	r2, [pc, #500]	; (8008a84 <HAL_DMA_IRQHandler+0xc78>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d045      	beq.n	800891e <HAL_DMA_IRQHandler+0xb12>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a7c      	ldr	r2, [pc, #496]	; (8008a88 <HAL_DMA_IRQHandler+0xc7c>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d040      	beq.n	800891e <HAL_DMA_IRQHandler+0xb12>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a7a      	ldr	r2, [pc, #488]	; (8008a8c <HAL_DMA_IRQHandler+0xc80>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d03b      	beq.n	800891e <HAL_DMA_IRQHandler+0xb12>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a79      	ldr	r2, [pc, #484]	; (8008a90 <HAL_DMA_IRQHandler+0xc84>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d036      	beq.n	800891e <HAL_DMA_IRQHandler+0xb12>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a77      	ldr	r2, [pc, #476]	; (8008a94 <HAL_DMA_IRQHandler+0xc88>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d031      	beq.n	800891e <HAL_DMA_IRQHandler+0xb12>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a76      	ldr	r2, [pc, #472]	; (8008a98 <HAL_DMA_IRQHandler+0xc8c>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d02c      	beq.n	800891e <HAL_DMA_IRQHandler+0xb12>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a74      	ldr	r2, [pc, #464]	; (8008a9c <HAL_DMA_IRQHandler+0xc90>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d027      	beq.n	800891e <HAL_DMA_IRQHandler+0xb12>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a73      	ldr	r2, [pc, #460]	; (8008aa0 <HAL_DMA_IRQHandler+0xc94>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d022      	beq.n	800891e <HAL_DMA_IRQHandler+0xb12>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a71      	ldr	r2, [pc, #452]	; (8008aa4 <HAL_DMA_IRQHandler+0xc98>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d01d      	beq.n	800891e <HAL_DMA_IRQHandler+0xb12>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a70      	ldr	r2, [pc, #448]	; (8008aa8 <HAL_DMA_IRQHandler+0xc9c>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d018      	beq.n	800891e <HAL_DMA_IRQHandler+0xb12>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a6e      	ldr	r2, [pc, #440]	; (8008aac <HAL_DMA_IRQHandler+0xca0>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d013      	beq.n	800891e <HAL_DMA_IRQHandler+0xb12>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a6d      	ldr	r2, [pc, #436]	; (8008ab0 <HAL_DMA_IRQHandler+0xca4>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d00e      	beq.n	800891e <HAL_DMA_IRQHandler+0xb12>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a6b      	ldr	r2, [pc, #428]	; (8008ab4 <HAL_DMA_IRQHandler+0xca8>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d009      	beq.n	800891e <HAL_DMA_IRQHandler+0xb12>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a6a      	ldr	r2, [pc, #424]	; (8008ab8 <HAL_DMA_IRQHandler+0xcac>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d004      	beq.n	800891e <HAL_DMA_IRQHandler+0xb12>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a68      	ldr	r2, [pc, #416]	; (8008abc <HAL_DMA_IRQHandler+0xcb0>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d108      	bne.n	8008930 <HAL_DMA_IRQHandler+0xb24>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	681a      	ldr	r2, [r3, #0]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f022 0208 	bic.w	r2, r2, #8
 800892c:	601a      	str	r2, [r3, #0]
 800892e:	e007      	b.n	8008940 <HAL_DMA_IRQHandler+0xb34>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f022 0204 	bic.w	r2, r2, #4
 800893e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008944:	2b00      	cmp	r3, #0
 8008946:	f000 8165 	beq.w	8008c14 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008952:	e15f      	b.n	8008c14 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008958:	f003 031f 	and.w	r3, r3, #31
 800895c:	2202      	movs	r2, #2
 800895e:	409a      	lsls	r2, r3
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	4013      	ands	r3, r2
 8008964:	2b00      	cmp	r3, #0
 8008966:	f000 80c5 	beq.w	8008af4 <HAL_DMA_IRQHandler+0xce8>
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	f003 0302 	and.w	r3, r3, #2
 8008970:	2b00      	cmp	r3, #0
 8008972:	f000 80bf 	beq.w	8008af4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800897a:	f003 031f 	and.w	r3, r3, #31
 800897e:	2202      	movs	r2, #2
 8008980:	409a      	lsls	r2, r3
 8008982:	69fb      	ldr	r3, [r7, #28]
 8008984:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800898c:	2b00      	cmp	r3, #0
 800898e:	d018      	beq.n	80089c2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008996:	2b00      	cmp	r3, #0
 8008998:	d109      	bne.n	80089ae <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800899e:	2b00      	cmp	r3, #0
 80089a0:	f000 813a 	beq.w	8008c18 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80089ac:	e134      	b.n	8008c18 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	f000 8130 	beq.w	8008c18 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80089c0:	e12a      	b.n	8008c18 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	f003 0320 	and.w	r3, r3, #32
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	f040 8089 	bne.w	8008ae0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a2b      	ldr	r2, [pc, #172]	; (8008a80 <HAL_DMA_IRQHandler+0xc74>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d04a      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xc62>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a29      	ldr	r2, [pc, #164]	; (8008a84 <HAL_DMA_IRQHandler+0xc78>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d045      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xc62>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a28      	ldr	r2, [pc, #160]	; (8008a88 <HAL_DMA_IRQHandler+0xc7c>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d040      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xc62>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a26      	ldr	r2, [pc, #152]	; (8008a8c <HAL_DMA_IRQHandler+0xc80>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d03b      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xc62>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a25      	ldr	r2, [pc, #148]	; (8008a90 <HAL_DMA_IRQHandler+0xc84>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d036      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xc62>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a23      	ldr	r2, [pc, #140]	; (8008a94 <HAL_DMA_IRQHandler+0xc88>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d031      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xc62>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a22      	ldr	r2, [pc, #136]	; (8008a98 <HAL_DMA_IRQHandler+0xc8c>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d02c      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xc62>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a20      	ldr	r2, [pc, #128]	; (8008a9c <HAL_DMA_IRQHandler+0xc90>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d027      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xc62>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a1f      	ldr	r2, [pc, #124]	; (8008aa0 <HAL_DMA_IRQHandler+0xc94>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d022      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xc62>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a1d      	ldr	r2, [pc, #116]	; (8008aa4 <HAL_DMA_IRQHandler+0xc98>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d01d      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xc62>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a1c      	ldr	r2, [pc, #112]	; (8008aa8 <HAL_DMA_IRQHandler+0xc9c>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d018      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xc62>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a1a      	ldr	r2, [pc, #104]	; (8008aac <HAL_DMA_IRQHandler+0xca0>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d013      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xc62>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a19      	ldr	r2, [pc, #100]	; (8008ab0 <HAL_DMA_IRQHandler+0xca4>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d00e      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xc62>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a17      	ldr	r2, [pc, #92]	; (8008ab4 <HAL_DMA_IRQHandler+0xca8>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d009      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xc62>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a16      	ldr	r2, [pc, #88]	; (8008ab8 <HAL_DMA_IRQHandler+0xcac>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d004      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xc62>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a14      	ldr	r2, [pc, #80]	; (8008abc <HAL_DMA_IRQHandler+0xcb0>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d128      	bne.n	8008ac0 <HAL_DMA_IRQHandler+0xcb4>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f022 0214 	bic.w	r2, r2, #20
 8008a7c:	601a      	str	r2, [r3, #0]
 8008a7e:	e027      	b.n	8008ad0 <HAL_DMA_IRQHandler+0xcc4>
 8008a80:	40020010 	.word	0x40020010
 8008a84:	40020028 	.word	0x40020028
 8008a88:	40020040 	.word	0x40020040
 8008a8c:	40020058 	.word	0x40020058
 8008a90:	40020070 	.word	0x40020070
 8008a94:	40020088 	.word	0x40020088
 8008a98:	400200a0 	.word	0x400200a0
 8008a9c:	400200b8 	.word	0x400200b8
 8008aa0:	40020410 	.word	0x40020410
 8008aa4:	40020428 	.word	0x40020428
 8008aa8:	40020440 	.word	0x40020440
 8008aac:	40020458 	.word	0x40020458
 8008ab0:	40020470 	.word	0x40020470
 8008ab4:	40020488 	.word	0x40020488
 8008ab8:	400204a0 	.word	0x400204a0
 8008abc:	400204b8 	.word	0x400204b8
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f022 020a 	bic.w	r2, r2, #10
 8008ace:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	f000 8097 	beq.w	8008c18 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008af2:	e091      	b.n	8008c18 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008af8:	f003 031f 	and.w	r3, r3, #31
 8008afc:	2208      	movs	r2, #8
 8008afe:	409a      	lsls	r2, r3
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	4013      	ands	r3, r2
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	f000 8088 	beq.w	8008c1a <HAL_DMA_IRQHandler+0xe0e>
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	f003 0308 	and.w	r3, r3, #8
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	f000 8082 	beq.w	8008c1a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a41      	ldr	r2, [pc, #260]	; (8008c20 <HAL_DMA_IRQHandler+0xe14>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d04a      	beq.n	8008bb6 <HAL_DMA_IRQHandler+0xdaa>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a3f      	ldr	r2, [pc, #252]	; (8008c24 <HAL_DMA_IRQHandler+0xe18>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d045      	beq.n	8008bb6 <HAL_DMA_IRQHandler+0xdaa>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a3e      	ldr	r2, [pc, #248]	; (8008c28 <HAL_DMA_IRQHandler+0xe1c>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d040      	beq.n	8008bb6 <HAL_DMA_IRQHandler+0xdaa>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a3c      	ldr	r2, [pc, #240]	; (8008c2c <HAL_DMA_IRQHandler+0xe20>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d03b      	beq.n	8008bb6 <HAL_DMA_IRQHandler+0xdaa>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a3b      	ldr	r2, [pc, #236]	; (8008c30 <HAL_DMA_IRQHandler+0xe24>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d036      	beq.n	8008bb6 <HAL_DMA_IRQHandler+0xdaa>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a39      	ldr	r2, [pc, #228]	; (8008c34 <HAL_DMA_IRQHandler+0xe28>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d031      	beq.n	8008bb6 <HAL_DMA_IRQHandler+0xdaa>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a38      	ldr	r2, [pc, #224]	; (8008c38 <HAL_DMA_IRQHandler+0xe2c>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d02c      	beq.n	8008bb6 <HAL_DMA_IRQHandler+0xdaa>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a36      	ldr	r2, [pc, #216]	; (8008c3c <HAL_DMA_IRQHandler+0xe30>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d027      	beq.n	8008bb6 <HAL_DMA_IRQHandler+0xdaa>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a35      	ldr	r2, [pc, #212]	; (8008c40 <HAL_DMA_IRQHandler+0xe34>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d022      	beq.n	8008bb6 <HAL_DMA_IRQHandler+0xdaa>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a33      	ldr	r2, [pc, #204]	; (8008c44 <HAL_DMA_IRQHandler+0xe38>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d01d      	beq.n	8008bb6 <HAL_DMA_IRQHandler+0xdaa>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a32      	ldr	r2, [pc, #200]	; (8008c48 <HAL_DMA_IRQHandler+0xe3c>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d018      	beq.n	8008bb6 <HAL_DMA_IRQHandler+0xdaa>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a30      	ldr	r2, [pc, #192]	; (8008c4c <HAL_DMA_IRQHandler+0xe40>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d013      	beq.n	8008bb6 <HAL_DMA_IRQHandler+0xdaa>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a2f      	ldr	r2, [pc, #188]	; (8008c50 <HAL_DMA_IRQHandler+0xe44>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d00e      	beq.n	8008bb6 <HAL_DMA_IRQHandler+0xdaa>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a2d      	ldr	r2, [pc, #180]	; (8008c54 <HAL_DMA_IRQHandler+0xe48>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d009      	beq.n	8008bb6 <HAL_DMA_IRQHandler+0xdaa>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a2c      	ldr	r2, [pc, #176]	; (8008c58 <HAL_DMA_IRQHandler+0xe4c>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d004      	beq.n	8008bb6 <HAL_DMA_IRQHandler+0xdaa>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a2a      	ldr	r2, [pc, #168]	; (8008c5c <HAL_DMA_IRQHandler+0xe50>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d108      	bne.n	8008bc8 <HAL_DMA_IRQHandler+0xdbc>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f022 021c 	bic.w	r2, r2, #28
 8008bc4:	601a      	str	r2, [r3, #0]
 8008bc6:	e007      	b.n	8008bd8 <HAL_DMA_IRQHandler+0xdcc>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f022 020e 	bic.w	r2, r2, #14
 8008bd6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bdc:	f003 031f 	and.w	r3, r3, #31
 8008be0:	2201      	movs	r2, #1
 8008be2:	409a      	lsls	r2, r3
 8008be4:	69fb      	ldr	r3, [r7, #28]
 8008be6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2201      	movs	r2, #1
 8008bec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d009      	beq.n	8008c1a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	4798      	blx	r3
 8008c0e:	e004      	b.n	8008c1a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008c10:	bf00      	nop
 8008c12:	e002      	b.n	8008c1a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008c14:	bf00      	nop
 8008c16:	e000      	b.n	8008c1a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008c18:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008c1a:	3728      	adds	r7, #40	; 0x28
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}
 8008c20:	40020010 	.word	0x40020010
 8008c24:	40020028 	.word	0x40020028
 8008c28:	40020040 	.word	0x40020040
 8008c2c:	40020058 	.word	0x40020058
 8008c30:	40020070 	.word	0x40020070
 8008c34:	40020088 	.word	0x40020088
 8008c38:	400200a0 	.word	0x400200a0
 8008c3c:	400200b8 	.word	0x400200b8
 8008c40:	40020410 	.word	0x40020410
 8008c44:	40020428 	.word	0x40020428
 8008c48:	40020440 	.word	0x40020440
 8008c4c:	40020458 	.word	0x40020458
 8008c50:	40020470 	.word	0x40020470
 8008c54:	40020488 	.word	0x40020488
 8008c58:	400204a0 	.word	0x400204a0
 8008c5c:	400204b8 	.word	0x400204b8

08008c60 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b087      	sub	sp, #28
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	60b9      	str	r1, [r7, #8]
 8008c6a:	607a      	str	r2, [r7, #4]
 8008c6c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c72:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c78:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a7f      	ldr	r2, [pc, #508]	; (8008e7c <DMA_SetConfig+0x21c>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d072      	beq.n	8008d6a <DMA_SetConfig+0x10a>
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a7d      	ldr	r2, [pc, #500]	; (8008e80 <DMA_SetConfig+0x220>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d06d      	beq.n	8008d6a <DMA_SetConfig+0x10a>
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a7c      	ldr	r2, [pc, #496]	; (8008e84 <DMA_SetConfig+0x224>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d068      	beq.n	8008d6a <DMA_SetConfig+0x10a>
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a7a      	ldr	r2, [pc, #488]	; (8008e88 <DMA_SetConfig+0x228>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d063      	beq.n	8008d6a <DMA_SetConfig+0x10a>
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a79      	ldr	r2, [pc, #484]	; (8008e8c <DMA_SetConfig+0x22c>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d05e      	beq.n	8008d6a <DMA_SetConfig+0x10a>
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a77      	ldr	r2, [pc, #476]	; (8008e90 <DMA_SetConfig+0x230>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d059      	beq.n	8008d6a <DMA_SetConfig+0x10a>
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a76      	ldr	r2, [pc, #472]	; (8008e94 <DMA_SetConfig+0x234>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d054      	beq.n	8008d6a <DMA_SetConfig+0x10a>
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a74      	ldr	r2, [pc, #464]	; (8008e98 <DMA_SetConfig+0x238>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d04f      	beq.n	8008d6a <DMA_SetConfig+0x10a>
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a73      	ldr	r2, [pc, #460]	; (8008e9c <DMA_SetConfig+0x23c>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d04a      	beq.n	8008d6a <DMA_SetConfig+0x10a>
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a71      	ldr	r2, [pc, #452]	; (8008ea0 <DMA_SetConfig+0x240>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d045      	beq.n	8008d6a <DMA_SetConfig+0x10a>
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a70      	ldr	r2, [pc, #448]	; (8008ea4 <DMA_SetConfig+0x244>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d040      	beq.n	8008d6a <DMA_SetConfig+0x10a>
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a6e      	ldr	r2, [pc, #440]	; (8008ea8 <DMA_SetConfig+0x248>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d03b      	beq.n	8008d6a <DMA_SetConfig+0x10a>
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a6d      	ldr	r2, [pc, #436]	; (8008eac <DMA_SetConfig+0x24c>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d036      	beq.n	8008d6a <DMA_SetConfig+0x10a>
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a6b      	ldr	r2, [pc, #428]	; (8008eb0 <DMA_SetConfig+0x250>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d031      	beq.n	8008d6a <DMA_SetConfig+0x10a>
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a6a      	ldr	r2, [pc, #424]	; (8008eb4 <DMA_SetConfig+0x254>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d02c      	beq.n	8008d6a <DMA_SetConfig+0x10a>
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a68      	ldr	r2, [pc, #416]	; (8008eb8 <DMA_SetConfig+0x258>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d027      	beq.n	8008d6a <DMA_SetConfig+0x10a>
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4a67      	ldr	r2, [pc, #412]	; (8008ebc <DMA_SetConfig+0x25c>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d022      	beq.n	8008d6a <DMA_SetConfig+0x10a>
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a65      	ldr	r2, [pc, #404]	; (8008ec0 <DMA_SetConfig+0x260>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d01d      	beq.n	8008d6a <DMA_SetConfig+0x10a>
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a64      	ldr	r2, [pc, #400]	; (8008ec4 <DMA_SetConfig+0x264>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d018      	beq.n	8008d6a <DMA_SetConfig+0x10a>
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a62      	ldr	r2, [pc, #392]	; (8008ec8 <DMA_SetConfig+0x268>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d013      	beq.n	8008d6a <DMA_SetConfig+0x10a>
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a61      	ldr	r2, [pc, #388]	; (8008ecc <DMA_SetConfig+0x26c>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d00e      	beq.n	8008d6a <DMA_SetConfig+0x10a>
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a5f      	ldr	r2, [pc, #380]	; (8008ed0 <DMA_SetConfig+0x270>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d009      	beq.n	8008d6a <DMA_SetConfig+0x10a>
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a5e      	ldr	r2, [pc, #376]	; (8008ed4 <DMA_SetConfig+0x274>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d004      	beq.n	8008d6a <DMA_SetConfig+0x10a>
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a5c      	ldr	r2, [pc, #368]	; (8008ed8 <DMA_SetConfig+0x278>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d101      	bne.n	8008d6e <DMA_SetConfig+0x10e>
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e000      	b.n	8008d70 <DMA_SetConfig+0x110>
 8008d6e:	2300      	movs	r3, #0
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d00d      	beq.n	8008d90 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008d7c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d004      	beq.n	8008d90 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d8a:	68fa      	ldr	r2, [r7, #12]
 8008d8c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008d8e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a39      	ldr	r2, [pc, #228]	; (8008e7c <DMA_SetConfig+0x21c>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d04a      	beq.n	8008e30 <DMA_SetConfig+0x1d0>
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a38      	ldr	r2, [pc, #224]	; (8008e80 <DMA_SetConfig+0x220>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d045      	beq.n	8008e30 <DMA_SetConfig+0x1d0>
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a36      	ldr	r2, [pc, #216]	; (8008e84 <DMA_SetConfig+0x224>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d040      	beq.n	8008e30 <DMA_SetConfig+0x1d0>
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a35      	ldr	r2, [pc, #212]	; (8008e88 <DMA_SetConfig+0x228>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d03b      	beq.n	8008e30 <DMA_SetConfig+0x1d0>
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a33      	ldr	r2, [pc, #204]	; (8008e8c <DMA_SetConfig+0x22c>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d036      	beq.n	8008e30 <DMA_SetConfig+0x1d0>
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a32      	ldr	r2, [pc, #200]	; (8008e90 <DMA_SetConfig+0x230>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d031      	beq.n	8008e30 <DMA_SetConfig+0x1d0>
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a30      	ldr	r2, [pc, #192]	; (8008e94 <DMA_SetConfig+0x234>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d02c      	beq.n	8008e30 <DMA_SetConfig+0x1d0>
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a2f      	ldr	r2, [pc, #188]	; (8008e98 <DMA_SetConfig+0x238>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d027      	beq.n	8008e30 <DMA_SetConfig+0x1d0>
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a2d      	ldr	r2, [pc, #180]	; (8008e9c <DMA_SetConfig+0x23c>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d022      	beq.n	8008e30 <DMA_SetConfig+0x1d0>
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a2c      	ldr	r2, [pc, #176]	; (8008ea0 <DMA_SetConfig+0x240>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d01d      	beq.n	8008e30 <DMA_SetConfig+0x1d0>
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4a2a      	ldr	r2, [pc, #168]	; (8008ea4 <DMA_SetConfig+0x244>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d018      	beq.n	8008e30 <DMA_SetConfig+0x1d0>
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4a29      	ldr	r2, [pc, #164]	; (8008ea8 <DMA_SetConfig+0x248>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d013      	beq.n	8008e30 <DMA_SetConfig+0x1d0>
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a27      	ldr	r2, [pc, #156]	; (8008eac <DMA_SetConfig+0x24c>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d00e      	beq.n	8008e30 <DMA_SetConfig+0x1d0>
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4a26      	ldr	r2, [pc, #152]	; (8008eb0 <DMA_SetConfig+0x250>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d009      	beq.n	8008e30 <DMA_SetConfig+0x1d0>
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a24      	ldr	r2, [pc, #144]	; (8008eb4 <DMA_SetConfig+0x254>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d004      	beq.n	8008e30 <DMA_SetConfig+0x1d0>
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4a23      	ldr	r2, [pc, #140]	; (8008eb8 <DMA_SetConfig+0x258>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d101      	bne.n	8008e34 <DMA_SetConfig+0x1d4>
 8008e30:	2301      	movs	r3, #1
 8008e32:	e000      	b.n	8008e36 <DMA_SetConfig+0x1d6>
 8008e34:	2300      	movs	r3, #0
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d059      	beq.n	8008eee <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e3e:	f003 031f 	and.w	r3, r3, #31
 8008e42:	223f      	movs	r2, #63	; 0x3f
 8008e44:	409a      	lsls	r2, r3
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008e58:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	683a      	ldr	r2, [r7, #0]
 8008e60:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	689b      	ldr	r3, [r3, #8]
 8008e66:	2b40      	cmp	r3, #64	; 0x40
 8008e68:	d138      	bne.n	8008edc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	68ba      	ldr	r2, [r7, #8]
 8008e78:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008e7a:	e086      	b.n	8008f8a <DMA_SetConfig+0x32a>
 8008e7c:	40020010 	.word	0x40020010
 8008e80:	40020028 	.word	0x40020028
 8008e84:	40020040 	.word	0x40020040
 8008e88:	40020058 	.word	0x40020058
 8008e8c:	40020070 	.word	0x40020070
 8008e90:	40020088 	.word	0x40020088
 8008e94:	400200a0 	.word	0x400200a0
 8008e98:	400200b8 	.word	0x400200b8
 8008e9c:	40020410 	.word	0x40020410
 8008ea0:	40020428 	.word	0x40020428
 8008ea4:	40020440 	.word	0x40020440
 8008ea8:	40020458 	.word	0x40020458
 8008eac:	40020470 	.word	0x40020470
 8008eb0:	40020488 	.word	0x40020488
 8008eb4:	400204a0 	.word	0x400204a0
 8008eb8:	400204b8 	.word	0x400204b8
 8008ebc:	58025408 	.word	0x58025408
 8008ec0:	5802541c 	.word	0x5802541c
 8008ec4:	58025430 	.word	0x58025430
 8008ec8:	58025444 	.word	0x58025444
 8008ecc:	58025458 	.word	0x58025458
 8008ed0:	5802546c 	.word	0x5802546c
 8008ed4:	58025480 	.word	0x58025480
 8008ed8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	68ba      	ldr	r2, [r7, #8]
 8008ee2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	60da      	str	r2, [r3, #12]
}
 8008eec:	e04d      	b.n	8008f8a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4a29      	ldr	r2, [pc, #164]	; (8008f98 <DMA_SetConfig+0x338>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d022      	beq.n	8008f3e <DMA_SetConfig+0x2de>
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a27      	ldr	r2, [pc, #156]	; (8008f9c <DMA_SetConfig+0x33c>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d01d      	beq.n	8008f3e <DMA_SetConfig+0x2de>
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a26      	ldr	r2, [pc, #152]	; (8008fa0 <DMA_SetConfig+0x340>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d018      	beq.n	8008f3e <DMA_SetConfig+0x2de>
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a24      	ldr	r2, [pc, #144]	; (8008fa4 <DMA_SetConfig+0x344>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d013      	beq.n	8008f3e <DMA_SetConfig+0x2de>
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a23      	ldr	r2, [pc, #140]	; (8008fa8 <DMA_SetConfig+0x348>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d00e      	beq.n	8008f3e <DMA_SetConfig+0x2de>
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a21      	ldr	r2, [pc, #132]	; (8008fac <DMA_SetConfig+0x34c>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d009      	beq.n	8008f3e <DMA_SetConfig+0x2de>
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a20      	ldr	r2, [pc, #128]	; (8008fb0 <DMA_SetConfig+0x350>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d004      	beq.n	8008f3e <DMA_SetConfig+0x2de>
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a1e      	ldr	r2, [pc, #120]	; (8008fb4 <DMA_SetConfig+0x354>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d101      	bne.n	8008f42 <DMA_SetConfig+0x2e2>
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e000      	b.n	8008f44 <DMA_SetConfig+0x2e4>
 8008f42:	2300      	movs	r3, #0
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d020      	beq.n	8008f8a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f4c:	f003 031f 	and.w	r3, r3, #31
 8008f50:	2201      	movs	r2, #1
 8008f52:	409a      	lsls	r2, r3
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	683a      	ldr	r2, [r7, #0]
 8008f5e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	2b40      	cmp	r3, #64	; 0x40
 8008f66:	d108      	bne.n	8008f7a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	687a      	ldr	r2, [r7, #4]
 8008f6e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	68ba      	ldr	r2, [r7, #8]
 8008f76:	60da      	str	r2, [r3, #12]
}
 8008f78:	e007      	b.n	8008f8a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	68ba      	ldr	r2, [r7, #8]
 8008f80:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	60da      	str	r2, [r3, #12]
}
 8008f8a:	bf00      	nop
 8008f8c:	371c      	adds	r7, #28
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr
 8008f96:	bf00      	nop
 8008f98:	58025408 	.word	0x58025408
 8008f9c:	5802541c 	.word	0x5802541c
 8008fa0:	58025430 	.word	0x58025430
 8008fa4:	58025444 	.word	0x58025444
 8008fa8:	58025458 	.word	0x58025458
 8008fac:	5802546c 	.word	0x5802546c
 8008fb0:	58025480 	.word	0x58025480
 8008fb4:	58025494 	.word	0x58025494

08008fb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b085      	sub	sp, #20
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a42      	ldr	r2, [pc, #264]	; (80090d0 <DMA_CalcBaseAndBitshift+0x118>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d04a      	beq.n	8009060 <DMA_CalcBaseAndBitshift+0xa8>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a41      	ldr	r2, [pc, #260]	; (80090d4 <DMA_CalcBaseAndBitshift+0x11c>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d045      	beq.n	8009060 <DMA_CalcBaseAndBitshift+0xa8>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a3f      	ldr	r2, [pc, #252]	; (80090d8 <DMA_CalcBaseAndBitshift+0x120>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d040      	beq.n	8009060 <DMA_CalcBaseAndBitshift+0xa8>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a3e      	ldr	r2, [pc, #248]	; (80090dc <DMA_CalcBaseAndBitshift+0x124>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d03b      	beq.n	8009060 <DMA_CalcBaseAndBitshift+0xa8>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a3c      	ldr	r2, [pc, #240]	; (80090e0 <DMA_CalcBaseAndBitshift+0x128>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d036      	beq.n	8009060 <DMA_CalcBaseAndBitshift+0xa8>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a3b      	ldr	r2, [pc, #236]	; (80090e4 <DMA_CalcBaseAndBitshift+0x12c>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d031      	beq.n	8009060 <DMA_CalcBaseAndBitshift+0xa8>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a39      	ldr	r2, [pc, #228]	; (80090e8 <DMA_CalcBaseAndBitshift+0x130>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d02c      	beq.n	8009060 <DMA_CalcBaseAndBitshift+0xa8>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a38      	ldr	r2, [pc, #224]	; (80090ec <DMA_CalcBaseAndBitshift+0x134>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d027      	beq.n	8009060 <DMA_CalcBaseAndBitshift+0xa8>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a36      	ldr	r2, [pc, #216]	; (80090f0 <DMA_CalcBaseAndBitshift+0x138>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d022      	beq.n	8009060 <DMA_CalcBaseAndBitshift+0xa8>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a35      	ldr	r2, [pc, #212]	; (80090f4 <DMA_CalcBaseAndBitshift+0x13c>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d01d      	beq.n	8009060 <DMA_CalcBaseAndBitshift+0xa8>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a33      	ldr	r2, [pc, #204]	; (80090f8 <DMA_CalcBaseAndBitshift+0x140>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d018      	beq.n	8009060 <DMA_CalcBaseAndBitshift+0xa8>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a32      	ldr	r2, [pc, #200]	; (80090fc <DMA_CalcBaseAndBitshift+0x144>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d013      	beq.n	8009060 <DMA_CalcBaseAndBitshift+0xa8>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a30      	ldr	r2, [pc, #192]	; (8009100 <DMA_CalcBaseAndBitshift+0x148>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d00e      	beq.n	8009060 <DMA_CalcBaseAndBitshift+0xa8>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a2f      	ldr	r2, [pc, #188]	; (8009104 <DMA_CalcBaseAndBitshift+0x14c>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d009      	beq.n	8009060 <DMA_CalcBaseAndBitshift+0xa8>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a2d      	ldr	r2, [pc, #180]	; (8009108 <DMA_CalcBaseAndBitshift+0x150>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d004      	beq.n	8009060 <DMA_CalcBaseAndBitshift+0xa8>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a2c      	ldr	r2, [pc, #176]	; (800910c <DMA_CalcBaseAndBitshift+0x154>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d101      	bne.n	8009064 <DMA_CalcBaseAndBitshift+0xac>
 8009060:	2301      	movs	r3, #1
 8009062:	e000      	b.n	8009066 <DMA_CalcBaseAndBitshift+0xae>
 8009064:	2300      	movs	r3, #0
 8009066:	2b00      	cmp	r3, #0
 8009068:	d024      	beq.n	80090b4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	b2db      	uxtb	r3, r3
 8009070:	3b10      	subs	r3, #16
 8009072:	4a27      	ldr	r2, [pc, #156]	; (8009110 <DMA_CalcBaseAndBitshift+0x158>)
 8009074:	fba2 2303 	umull	r2, r3, r2, r3
 8009078:	091b      	lsrs	r3, r3, #4
 800907a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f003 0307 	and.w	r3, r3, #7
 8009082:	4a24      	ldr	r2, [pc, #144]	; (8009114 <DMA_CalcBaseAndBitshift+0x15c>)
 8009084:	5cd3      	ldrb	r3, [r2, r3]
 8009086:	461a      	mov	r2, r3
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2b03      	cmp	r3, #3
 8009090:	d908      	bls.n	80090a4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	461a      	mov	r2, r3
 8009098:	4b1f      	ldr	r3, [pc, #124]	; (8009118 <DMA_CalcBaseAndBitshift+0x160>)
 800909a:	4013      	ands	r3, r2
 800909c:	1d1a      	adds	r2, r3, #4
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	659a      	str	r2, [r3, #88]	; 0x58
 80090a2:	e00d      	b.n	80090c0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	461a      	mov	r2, r3
 80090aa:	4b1b      	ldr	r3, [pc, #108]	; (8009118 <DMA_CalcBaseAndBitshift+0x160>)
 80090ac:	4013      	ands	r3, r2
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	6593      	str	r3, [r2, #88]	; 0x58
 80090b2:	e005      	b.n	80090c0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3714      	adds	r7, #20
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr
 80090d0:	40020010 	.word	0x40020010
 80090d4:	40020028 	.word	0x40020028
 80090d8:	40020040 	.word	0x40020040
 80090dc:	40020058 	.word	0x40020058
 80090e0:	40020070 	.word	0x40020070
 80090e4:	40020088 	.word	0x40020088
 80090e8:	400200a0 	.word	0x400200a0
 80090ec:	400200b8 	.word	0x400200b8
 80090f0:	40020410 	.word	0x40020410
 80090f4:	40020428 	.word	0x40020428
 80090f8:	40020440 	.word	0x40020440
 80090fc:	40020458 	.word	0x40020458
 8009100:	40020470 	.word	0x40020470
 8009104:	40020488 	.word	0x40020488
 8009108:	400204a0 	.word	0x400204a0
 800910c:	400204b8 	.word	0x400204b8
 8009110:	aaaaaaab 	.word	0xaaaaaaab
 8009114:	080107dc 	.word	0x080107dc
 8009118:	fffffc00 	.word	0xfffffc00

0800911c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800911c:	b480      	push	{r7}
 800911e:	b085      	sub	sp, #20
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009124:	2300      	movs	r3, #0
 8009126:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	699b      	ldr	r3, [r3, #24]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d120      	bne.n	8009172 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009134:	2b03      	cmp	r3, #3
 8009136:	d858      	bhi.n	80091ea <DMA_CheckFifoParam+0xce>
 8009138:	a201      	add	r2, pc, #4	; (adr r2, 8009140 <DMA_CheckFifoParam+0x24>)
 800913a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800913e:	bf00      	nop
 8009140:	08009151 	.word	0x08009151
 8009144:	08009163 	.word	0x08009163
 8009148:	08009151 	.word	0x08009151
 800914c:	080091eb 	.word	0x080091eb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009154:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009158:	2b00      	cmp	r3, #0
 800915a:	d048      	beq.n	80091ee <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800915c:	2301      	movs	r3, #1
 800915e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009160:	e045      	b.n	80091ee <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009166:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800916a:	d142      	bne.n	80091f2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800916c:	2301      	movs	r3, #1
 800916e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009170:	e03f      	b.n	80091f2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	699b      	ldr	r3, [r3, #24]
 8009176:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800917a:	d123      	bne.n	80091c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009180:	2b03      	cmp	r3, #3
 8009182:	d838      	bhi.n	80091f6 <DMA_CheckFifoParam+0xda>
 8009184:	a201      	add	r2, pc, #4	; (adr r2, 800918c <DMA_CheckFifoParam+0x70>)
 8009186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800918a:	bf00      	nop
 800918c:	0800919d 	.word	0x0800919d
 8009190:	080091a3 	.word	0x080091a3
 8009194:	0800919d 	.word	0x0800919d
 8009198:	080091b5 	.word	0x080091b5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800919c:	2301      	movs	r3, #1
 800919e:	73fb      	strb	r3, [r7, #15]
        break;
 80091a0:	e030      	b.n	8009204 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d025      	beq.n	80091fa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80091ae:	2301      	movs	r3, #1
 80091b0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80091b2:	e022      	b.n	80091fa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80091bc:	d11f      	bne.n	80091fe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80091be:	2301      	movs	r3, #1
 80091c0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80091c2:	e01c      	b.n	80091fe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c8:	2b02      	cmp	r3, #2
 80091ca:	d902      	bls.n	80091d2 <DMA_CheckFifoParam+0xb6>
 80091cc:	2b03      	cmp	r3, #3
 80091ce:	d003      	beq.n	80091d8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80091d0:	e018      	b.n	8009204 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80091d2:	2301      	movs	r3, #1
 80091d4:	73fb      	strb	r3, [r7, #15]
        break;
 80091d6:	e015      	b.n	8009204 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d00e      	beq.n	8009202 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80091e4:	2301      	movs	r3, #1
 80091e6:	73fb      	strb	r3, [r7, #15]
    break;
 80091e8:	e00b      	b.n	8009202 <DMA_CheckFifoParam+0xe6>
        break;
 80091ea:	bf00      	nop
 80091ec:	e00a      	b.n	8009204 <DMA_CheckFifoParam+0xe8>
        break;
 80091ee:	bf00      	nop
 80091f0:	e008      	b.n	8009204 <DMA_CheckFifoParam+0xe8>
        break;
 80091f2:	bf00      	nop
 80091f4:	e006      	b.n	8009204 <DMA_CheckFifoParam+0xe8>
        break;
 80091f6:	bf00      	nop
 80091f8:	e004      	b.n	8009204 <DMA_CheckFifoParam+0xe8>
        break;
 80091fa:	bf00      	nop
 80091fc:	e002      	b.n	8009204 <DMA_CheckFifoParam+0xe8>
        break;
 80091fe:	bf00      	nop
 8009200:	e000      	b.n	8009204 <DMA_CheckFifoParam+0xe8>
    break;
 8009202:	bf00      	nop
    }
  }

  return status;
 8009204:	7bfb      	ldrb	r3, [r7, #15]
}
 8009206:	4618      	mov	r0, r3
 8009208:	3714      	adds	r7, #20
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr
 8009212:	bf00      	nop

08009214 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009214:	b480      	push	{r7}
 8009216:	b085      	sub	sp, #20
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a38      	ldr	r2, [pc, #224]	; (8009308 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d022      	beq.n	8009272 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a36      	ldr	r2, [pc, #216]	; (800930c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d01d      	beq.n	8009272 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a35      	ldr	r2, [pc, #212]	; (8009310 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d018      	beq.n	8009272 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a33      	ldr	r2, [pc, #204]	; (8009314 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d013      	beq.n	8009272 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4a32      	ldr	r2, [pc, #200]	; (8009318 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d00e      	beq.n	8009272 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a30      	ldr	r2, [pc, #192]	; (800931c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d009      	beq.n	8009272 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a2f      	ldr	r2, [pc, #188]	; (8009320 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d004      	beq.n	8009272 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a2d      	ldr	r2, [pc, #180]	; (8009324 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d101      	bne.n	8009276 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009272:	2301      	movs	r3, #1
 8009274:	e000      	b.n	8009278 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009276:	2300      	movs	r3, #0
 8009278:	2b00      	cmp	r3, #0
 800927a:	d01a      	beq.n	80092b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	b2db      	uxtb	r3, r3
 8009282:	3b08      	subs	r3, #8
 8009284:	4a28      	ldr	r2, [pc, #160]	; (8009328 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009286:	fba2 2303 	umull	r2, r3, r2, r3
 800928a:	091b      	lsrs	r3, r3, #4
 800928c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800928e:	68fa      	ldr	r2, [r7, #12]
 8009290:	4b26      	ldr	r3, [pc, #152]	; (800932c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009292:	4413      	add	r3, r2
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	461a      	mov	r2, r3
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	4a24      	ldr	r2, [pc, #144]	; (8009330 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80092a0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f003 031f 	and.w	r3, r3, #31
 80092a8:	2201      	movs	r2, #1
 80092aa:	409a      	lsls	r2, r3
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80092b0:	e024      	b.n	80092fc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	b2db      	uxtb	r3, r3
 80092b8:	3b10      	subs	r3, #16
 80092ba:	4a1e      	ldr	r2, [pc, #120]	; (8009334 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80092bc:	fba2 2303 	umull	r2, r3, r2, r3
 80092c0:	091b      	lsrs	r3, r3, #4
 80092c2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	4a1c      	ldr	r2, [pc, #112]	; (8009338 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d806      	bhi.n	80092da <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	4a1b      	ldr	r2, [pc, #108]	; (800933c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d902      	bls.n	80092da <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	3308      	adds	r3, #8
 80092d8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80092da:	68fa      	ldr	r2, [r7, #12]
 80092dc:	4b18      	ldr	r3, [pc, #96]	; (8009340 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80092de:	4413      	add	r3, r2
 80092e0:	009b      	lsls	r3, r3, #2
 80092e2:	461a      	mov	r2, r3
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	4a16      	ldr	r2, [pc, #88]	; (8009344 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80092ec:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f003 031f 	and.w	r3, r3, #31
 80092f4:	2201      	movs	r2, #1
 80092f6:	409a      	lsls	r2, r3
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	669a      	str	r2, [r3, #104]	; 0x68
}
 80092fc:	bf00      	nop
 80092fe:	3714      	adds	r7, #20
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr
 8009308:	58025408 	.word	0x58025408
 800930c:	5802541c 	.word	0x5802541c
 8009310:	58025430 	.word	0x58025430
 8009314:	58025444 	.word	0x58025444
 8009318:	58025458 	.word	0x58025458
 800931c:	5802546c 	.word	0x5802546c
 8009320:	58025480 	.word	0x58025480
 8009324:	58025494 	.word	0x58025494
 8009328:	cccccccd 	.word	0xcccccccd
 800932c:	16009600 	.word	0x16009600
 8009330:	58025880 	.word	0x58025880
 8009334:	aaaaaaab 	.word	0xaaaaaaab
 8009338:	400204b8 	.word	0x400204b8
 800933c:	4002040f 	.word	0x4002040f
 8009340:	10008200 	.word	0x10008200
 8009344:	40020880 	.word	0x40020880

08009348 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009348:	b480      	push	{r7}
 800934a:	b085      	sub	sp, #20
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	b2db      	uxtb	r3, r3
 8009356:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d04a      	beq.n	80093f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2b08      	cmp	r3, #8
 8009362:	d847      	bhi.n	80093f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a25      	ldr	r2, [pc, #148]	; (8009400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d022      	beq.n	80093b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a24      	ldr	r2, [pc, #144]	; (8009404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d01d      	beq.n	80093b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a22      	ldr	r2, [pc, #136]	; (8009408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d018      	beq.n	80093b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a21      	ldr	r2, [pc, #132]	; (800940c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d013      	beq.n	80093b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a1f      	ldr	r2, [pc, #124]	; (8009410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d00e      	beq.n	80093b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a1e      	ldr	r2, [pc, #120]	; (8009414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d009      	beq.n	80093b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a1c      	ldr	r2, [pc, #112]	; (8009418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d004      	beq.n	80093b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4a1b      	ldr	r2, [pc, #108]	; (800941c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d101      	bne.n	80093b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80093b4:	2301      	movs	r3, #1
 80093b6:	e000      	b.n	80093ba <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80093b8:	2300      	movs	r3, #0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d00a      	beq.n	80093d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80093be:	68fa      	ldr	r2, [r7, #12]
 80093c0:	4b17      	ldr	r3, [pc, #92]	; (8009420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80093c2:	4413      	add	r3, r2
 80093c4:	009b      	lsls	r3, r3, #2
 80093c6:	461a      	mov	r2, r3
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	4a15      	ldr	r2, [pc, #84]	; (8009424 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80093d0:	671a      	str	r2, [r3, #112]	; 0x70
 80093d2:	e009      	b.n	80093e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80093d4:	68fa      	ldr	r2, [r7, #12]
 80093d6:	4b14      	ldr	r3, [pc, #80]	; (8009428 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80093d8:	4413      	add	r3, r2
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	461a      	mov	r2, r3
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	4a11      	ldr	r2, [pc, #68]	; (800942c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80093e6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	3b01      	subs	r3, #1
 80093ec:	2201      	movs	r2, #1
 80093ee:	409a      	lsls	r2, r3
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80093f4:	bf00      	nop
 80093f6:	3714      	adds	r7, #20
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr
 8009400:	58025408 	.word	0x58025408
 8009404:	5802541c 	.word	0x5802541c
 8009408:	58025430 	.word	0x58025430
 800940c:	58025444 	.word	0x58025444
 8009410:	58025458 	.word	0x58025458
 8009414:	5802546c 	.word	0x5802546c
 8009418:	58025480 	.word	0x58025480
 800941c:	58025494 	.word	0x58025494
 8009420:	1600963f 	.word	0x1600963f
 8009424:	58025940 	.word	0x58025940
 8009428:	1000823f 	.word	0x1000823f
 800942c:	40020940 	.word	0x40020940

08009430 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009430:	b480      	push	{r7}
 8009432:	b089      	sub	sp, #36	; 0x24
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800943a:	2300      	movs	r3, #0
 800943c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800943e:	4b86      	ldr	r3, [pc, #536]	; (8009658 <HAL_GPIO_Init+0x228>)
 8009440:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009442:	e18c      	b.n	800975e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	2101      	movs	r1, #1
 800944a:	69fb      	ldr	r3, [r7, #28]
 800944c:	fa01 f303 	lsl.w	r3, r1, r3
 8009450:	4013      	ands	r3, r2
 8009452:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	2b00      	cmp	r3, #0
 8009458:	f000 817e 	beq.w	8009758 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	f003 0303 	and.w	r3, r3, #3
 8009464:	2b01      	cmp	r3, #1
 8009466:	d005      	beq.n	8009474 <HAL_GPIO_Init+0x44>
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	f003 0303 	and.w	r3, r3, #3
 8009470:	2b02      	cmp	r3, #2
 8009472:	d130      	bne.n	80094d6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800947a:	69fb      	ldr	r3, [r7, #28]
 800947c:	005b      	lsls	r3, r3, #1
 800947e:	2203      	movs	r2, #3
 8009480:	fa02 f303 	lsl.w	r3, r2, r3
 8009484:	43db      	mvns	r3, r3
 8009486:	69ba      	ldr	r2, [r7, #24]
 8009488:	4013      	ands	r3, r2
 800948a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	68da      	ldr	r2, [r3, #12]
 8009490:	69fb      	ldr	r3, [r7, #28]
 8009492:	005b      	lsls	r3, r3, #1
 8009494:	fa02 f303 	lsl.w	r3, r2, r3
 8009498:	69ba      	ldr	r2, [r7, #24]
 800949a:	4313      	orrs	r3, r2
 800949c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	69ba      	ldr	r2, [r7, #24]
 80094a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80094aa:	2201      	movs	r2, #1
 80094ac:	69fb      	ldr	r3, [r7, #28]
 80094ae:	fa02 f303 	lsl.w	r3, r2, r3
 80094b2:	43db      	mvns	r3, r3
 80094b4:	69ba      	ldr	r2, [r7, #24]
 80094b6:	4013      	ands	r3, r2
 80094b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	091b      	lsrs	r3, r3, #4
 80094c0:	f003 0201 	and.w	r2, r3, #1
 80094c4:	69fb      	ldr	r3, [r7, #28]
 80094c6:	fa02 f303 	lsl.w	r3, r2, r3
 80094ca:	69ba      	ldr	r2, [r7, #24]
 80094cc:	4313      	orrs	r3, r2
 80094ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	69ba      	ldr	r2, [r7, #24]
 80094d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	f003 0303 	and.w	r3, r3, #3
 80094de:	2b03      	cmp	r3, #3
 80094e0:	d017      	beq.n	8009512 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	68db      	ldr	r3, [r3, #12]
 80094e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80094e8:	69fb      	ldr	r3, [r7, #28]
 80094ea:	005b      	lsls	r3, r3, #1
 80094ec:	2203      	movs	r2, #3
 80094ee:	fa02 f303 	lsl.w	r3, r2, r3
 80094f2:	43db      	mvns	r3, r3
 80094f4:	69ba      	ldr	r2, [r7, #24]
 80094f6:	4013      	ands	r3, r2
 80094f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	689a      	ldr	r2, [r3, #8]
 80094fe:	69fb      	ldr	r3, [r7, #28]
 8009500:	005b      	lsls	r3, r3, #1
 8009502:	fa02 f303 	lsl.w	r3, r2, r3
 8009506:	69ba      	ldr	r2, [r7, #24]
 8009508:	4313      	orrs	r3, r2
 800950a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	69ba      	ldr	r2, [r7, #24]
 8009510:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	f003 0303 	and.w	r3, r3, #3
 800951a:	2b02      	cmp	r3, #2
 800951c:	d123      	bne.n	8009566 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800951e:	69fb      	ldr	r3, [r7, #28]
 8009520:	08da      	lsrs	r2, r3, #3
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	3208      	adds	r2, #8
 8009526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800952a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800952c:	69fb      	ldr	r3, [r7, #28]
 800952e:	f003 0307 	and.w	r3, r3, #7
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	220f      	movs	r2, #15
 8009536:	fa02 f303 	lsl.w	r3, r2, r3
 800953a:	43db      	mvns	r3, r3
 800953c:	69ba      	ldr	r2, [r7, #24]
 800953e:	4013      	ands	r3, r2
 8009540:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	691a      	ldr	r2, [r3, #16]
 8009546:	69fb      	ldr	r3, [r7, #28]
 8009548:	f003 0307 	and.w	r3, r3, #7
 800954c:	009b      	lsls	r3, r3, #2
 800954e:	fa02 f303 	lsl.w	r3, r2, r3
 8009552:	69ba      	ldr	r2, [r7, #24]
 8009554:	4313      	orrs	r3, r2
 8009556:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009558:	69fb      	ldr	r3, [r7, #28]
 800955a:	08da      	lsrs	r2, r3, #3
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	3208      	adds	r2, #8
 8009560:	69b9      	ldr	r1, [r7, #24]
 8009562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800956c:	69fb      	ldr	r3, [r7, #28]
 800956e:	005b      	lsls	r3, r3, #1
 8009570:	2203      	movs	r2, #3
 8009572:	fa02 f303 	lsl.w	r3, r2, r3
 8009576:	43db      	mvns	r3, r3
 8009578:	69ba      	ldr	r2, [r7, #24]
 800957a:	4013      	ands	r3, r2
 800957c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	f003 0203 	and.w	r2, r3, #3
 8009586:	69fb      	ldr	r3, [r7, #28]
 8009588:	005b      	lsls	r3, r3, #1
 800958a:	fa02 f303 	lsl.w	r3, r2, r3
 800958e:	69ba      	ldr	r2, [r7, #24]
 8009590:	4313      	orrs	r3, r2
 8009592:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	69ba      	ldr	r2, [r7, #24]
 8009598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f000 80d8 	beq.w	8009758 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80095a8:	4b2c      	ldr	r3, [pc, #176]	; (800965c <HAL_GPIO_Init+0x22c>)
 80095aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80095ae:	4a2b      	ldr	r2, [pc, #172]	; (800965c <HAL_GPIO_Init+0x22c>)
 80095b0:	f043 0302 	orr.w	r3, r3, #2
 80095b4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80095b8:	4b28      	ldr	r3, [pc, #160]	; (800965c <HAL_GPIO_Init+0x22c>)
 80095ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80095be:	f003 0302 	and.w	r3, r3, #2
 80095c2:	60fb      	str	r3, [r7, #12]
 80095c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80095c6:	4a26      	ldr	r2, [pc, #152]	; (8009660 <HAL_GPIO_Init+0x230>)
 80095c8:	69fb      	ldr	r3, [r7, #28]
 80095ca:	089b      	lsrs	r3, r3, #2
 80095cc:	3302      	adds	r3, #2
 80095ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80095d4:	69fb      	ldr	r3, [r7, #28]
 80095d6:	f003 0303 	and.w	r3, r3, #3
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	220f      	movs	r2, #15
 80095de:	fa02 f303 	lsl.w	r3, r2, r3
 80095e2:	43db      	mvns	r3, r3
 80095e4:	69ba      	ldr	r2, [r7, #24]
 80095e6:	4013      	ands	r3, r2
 80095e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	4a1d      	ldr	r2, [pc, #116]	; (8009664 <HAL_GPIO_Init+0x234>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d04a      	beq.n	8009688 <HAL_GPIO_Init+0x258>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	4a1c      	ldr	r2, [pc, #112]	; (8009668 <HAL_GPIO_Init+0x238>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d02b      	beq.n	8009652 <HAL_GPIO_Init+0x222>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	4a1b      	ldr	r2, [pc, #108]	; (800966c <HAL_GPIO_Init+0x23c>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d025      	beq.n	800964e <HAL_GPIO_Init+0x21e>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	4a1a      	ldr	r2, [pc, #104]	; (8009670 <HAL_GPIO_Init+0x240>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d01f      	beq.n	800964a <HAL_GPIO_Init+0x21a>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	4a19      	ldr	r2, [pc, #100]	; (8009674 <HAL_GPIO_Init+0x244>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d019      	beq.n	8009646 <HAL_GPIO_Init+0x216>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	4a18      	ldr	r2, [pc, #96]	; (8009678 <HAL_GPIO_Init+0x248>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d013      	beq.n	8009642 <HAL_GPIO_Init+0x212>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	4a17      	ldr	r2, [pc, #92]	; (800967c <HAL_GPIO_Init+0x24c>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d00d      	beq.n	800963e <HAL_GPIO_Init+0x20e>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	4a16      	ldr	r2, [pc, #88]	; (8009680 <HAL_GPIO_Init+0x250>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d007      	beq.n	800963a <HAL_GPIO_Init+0x20a>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	4a15      	ldr	r2, [pc, #84]	; (8009684 <HAL_GPIO_Init+0x254>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d101      	bne.n	8009636 <HAL_GPIO_Init+0x206>
 8009632:	2309      	movs	r3, #9
 8009634:	e029      	b.n	800968a <HAL_GPIO_Init+0x25a>
 8009636:	230a      	movs	r3, #10
 8009638:	e027      	b.n	800968a <HAL_GPIO_Init+0x25a>
 800963a:	2307      	movs	r3, #7
 800963c:	e025      	b.n	800968a <HAL_GPIO_Init+0x25a>
 800963e:	2306      	movs	r3, #6
 8009640:	e023      	b.n	800968a <HAL_GPIO_Init+0x25a>
 8009642:	2305      	movs	r3, #5
 8009644:	e021      	b.n	800968a <HAL_GPIO_Init+0x25a>
 8009646:	2304      	movs	r3, #4
 8009648:	e01f      	b.n	800968a <HAL_GPIO_Init+0x25a>
 800964a:	2303      	movs	r3, #3
 800964c:	e01d      	b.n	800968a <HAL_GPIO_Init+0x25a>
 800964e:	2302      	movs	r3, #2
 8009650:	e01b      	b.n	800968a <HAL_GPIO_Init+0x25a>
 8009652:	2301      	movs	r3, #1
 8009654:	e019      	b.n	800968a <HAL_GPIO_Init+0x25a>
 8009656:	bf00      	nop
 8009658:	58000080 	.word	0x58000080
 800965c:	58024400 	.word	0x58024400
 8009660:	58000400 	.word	0x58000400
 8009664:	58020000 	.word	0x58020000
 8009668:	58020400 	.word	0x58020400
 800966c:	58020800 	.word	0x58020800
 8009670:	58020c00 	.word	0x58020c00
 8009674:	58021000 	.word	0x58021000
 8009678:	58021400 	.word	0x58021400
 800967c:	58021800 	.word	0x58021800
 8009680:	58021c00 	.word	0x58021c00
 8009684:	58022400 	.word	0x58022400
 8009688:	2300      	movs	r3, #0
 800968a:	69fa      	ldr	r2, [r7, #28]
 800968c:	f002 0203 	and.w	r2, r2, #3
 8009690:	0092      	lsls	r2, r2, #2
 8009692:	4093      	lsls	r3, r2
 8009694:	69ba      	ldr	r2, [r7, #24]
 8009696:	4313      	orrs	r3, r2
 8009698:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800969a:	4938      	ldr	r1, [pc, #224]	; (800977c <HAL_GPIO_Init+0x34c>)
 800969c:	69fb      	ldr	r3, [r7, #28]
 800969e:	089b      	lsrs	r3, r3, #2
 80096a0:	3302      	adds	r3, #2
 80096a2:	69ba      	ldr	r2, [r7, #24]
 80096a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80096a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	43db      	mvns	r3, r3
 80096b4:	69ba      	ldr	r2, [r7, #24]
 80096b6:	4013      	ands	r3, r2
 80096b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d003      	beq.n	80096ce <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80096c6:	69ba      	ldr	r2, [r7, #24]
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	4313      	orrs	r3, r2
 80096cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80096ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80096d2:	69bb      	ldr	r3, [r7, #24]
 80096d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80096d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	43db      	mvns	r3, r3
 80096e2:	69ba      	ldr	r2, [r7, #24]
 80096e4:	4013      	ands	r3, r2
 80096e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d003      	beq.n	80096fc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80096f4:	69ba      	ldr	r2, [r7, #24]
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	4313      	orrs	r3, r2
 80096fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80096fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009700:	69bb      	ldr	r3, [r7, #24]
 8009702:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	43db      	mvns	r3, r3
 800970e:	69ba      	ldr	r2, [r7, #24]
 8009710:	4013      	ands	r3, r2
 8009712:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800971c:	2b00      	cmp	r3, #0
 800971e:	d003      	beq.n	8009728 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8009720:	69ba      	ldr	r2, [r7, #24]
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	4313      	orrs	r3, r2
 8009726:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	69ba      	ldr	r2, [r7, #24]
 800972c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	43db      	mvns	r3, r3
 8009738:	69ba      	ldr	r2, [r7, #24]
 800973a:	4013      	ands	r3, r2
 800973c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009746:	2b00      	cmp	r3, #0
 8009748:	d003      	beq.n	8009752 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800974a:	69ba      	ldr	r2, [r7, #24]
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	4313      	orrs	r3, r2
 8009750:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	69ba      	ldr	r2, [r7, #24]
 8009756:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	3301      	adds	r3, #1
 800975c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	69fb      	ldr	r3, [r7, #28]
 8009764:	fa22 f303 	lsr.w	r3, r2, r3
 8009768:	2b00      	cmp	r3, #0
 800976a:	f47f ae6b 	bne.w	8009444 <HAL_GPIO_Init+0x14>
  }
}
 800976e:	bf00      	nop
 8009770:	bf00      	nop
 8009772:	3724      	adds	r7, #36	; 0x24
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr
 800977c:	58000400 	.word	0x58000400

08009780 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009780:	b480      	push	{r7}
 8009782:	b087      	sub	sp, #28
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800978a:	2300      	movs	r3, #0
 800978c:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800978e:	4b72      	ldr	r3, [pc, #456]	; (8009958 <HAL_GPIO_DeInit+0x1d8>)
 8009790:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8009792:	e0d3      	b.n	800993c <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8009794:	2201      	movs	r2, #1
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	fa02 f303 	lsl.w	r3, r2, r3
 800979c:	683a      	ldr	r2, [r7, #0]
 800979e:	4013      	ands	r3, r2
 80097a0:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	f000 80c6 	beq.w	8009936 <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 80097aa:	4a6c      	ldr	r2, [pc, #432]	; (800995c <HAL_GPIO_DeInit+0x1dc>)
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	089b      	lsrs	r3, r3, #2
 80097b0:	3302      	adds	r3, #2
 80097b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097b6:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	f003 0303 	and.w	r3, r3, #3
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	220f      	movs	r2, #15
 80097c2:	fa02 f303 	lsl.w	r3, r2, r3
 80097c6:	68ba      	ldr	r2, [r7, #8]
 80097c8:	4013      	ands	r3, r2
 80097ca:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	4a64      	ldr	r2, [pc, #400]	; (8009960 <HAL_GPIO_DeInit+0x1e0>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d031      	beq.n	8009838 <HAL_GPIO_DeInit+0xb8>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	4a63      	ldr	r2, [pc, #396]	; (8009964 <HAL_GPIO_DeInit+0x1e4>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d02b      	beq.n	8009834 <HAL_GPIO_DeInit+0xb4>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	4a62      	ldr	r2, [pc, #392]	; (8009968 <HAL_GPIO_DeInit+0x1e8>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d025      	beq.n	8009830 <HAL_GPIO_DeInit+0xb0>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	4a61      	ldr	r2, [pc, #388]	; (800996c <HAL_GPIO_DeInit+0x1ec>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d01f      	beq.n	800982c <HAL_GPIO_DeInit+0xac>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	4a60      	ldr	r2, [pc, #384]	; (8009970 <HAL_GPIO_DeInit+0x1f0>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d019      	beq.n	8009828 <HAL_GPIO_DeInit+0xa8>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	4a5f      	ldr	r2, [pc, #380]	; (8009974 <HAL_GPIO_DeInit+0x1f4>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d013      	beq.n	8009824 <HAL_GPIO_DeInit+0xa4>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	4a5e      	ldr	r2, [pc, #376]	; (8009978 <HAL_GPIO_DeInit+0x1f8>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d00d      	beq.n	8009820 <HAL_GPIO_DeInit+0xa0>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	4a5d      	ldr	r2, [pc, #372]	; (800997c <HAL_GPIO_DeInit+0x1fc>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d007      	beq.n	800981c <HAL_GPIO_DeInit+0x9c>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	4a5c      	ldr	r2, [pc, #368]	; (8009980 <HAL_GPIO_DeInit+0x200>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d101      	bne.n	8009818 <HAL_GPIO_DeInit+0x98>
 8009814:	2309      	movs	r3, #9
 8009816:	e010      	b.n	800983a <HAL_GPIO_DeInit+0xba>
 8009818:	230a      	movs	r3, #10
 800981a:	e00e      	b.n	800983a <HAL_GPIO_DeInit+0xba>
 800981c:	2307      	movs	r3, #7
 800981e:	e00c      	b.n	800983a <HAL_GPIO_DeInit+0xba>
 8009820:	2306      	movs	r3, #6
 8009822:	e00a      	b.n	800983a <HAL_GPIO_DeInit+0xba>
 8009824:	2305      	movs	r3, #5
 8009826:	e008      	b.n	800983a <HAL_GPIO_DeInit+0xba>
 8009828:	2304      	movs	r3, #4
 800982a:	e006      	b.n	800983a <HAL_GPIO_DeInit+0xba>
 800982c:	2303      	movs	r3, #3
 800982e:	e004      	b.n	800983a <HAL_GPIO_DeInit+0xba>
 8009830:	2302      	movs	r3, #2
 8009832:	e002      	b.n	800983a <HAL_GPIO_DeInit+0xba>
 8009834:	2301      	movs	r3, #1
 8009836:	e000      	b.n	800983a <HAL_GPIO_DeInit+0xba>
 8009838:	2300      	movs	r3, #0
 800983a:	697a      	ldr	r2, [r7, #20]
 800983c:	f002 0203 	and.w	r2, r2, #3
 8009840:	0092      	lsls	r2, r2, #2
 8009842:	4093      	lsls	r3, r2
 8009844:	68ba      	ldr	r2, [r7, #8]
 8009846:	429a      	cmp	r2, r3
 8009848:	d136      	bne.n	80098b8 <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	43db      	mvns	r3, r3
 8009852:	401a      	ands	r2, r3
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	685a      	ldr	r2, [r3, #4]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	43db      	mvns	r3, r3
 8009860:	401a      	ands	r2, r3
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8009866:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800986a:	685a      	ldr	r2, [r3, #4]
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	43db      	mvns	r3, r3
 8009870:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009874:	4013      	ands	r3, r2
 8009876:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8009878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800987c:	681a      	ldr	r2, [r3, #0]
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	43db      	mvns	r3, r3
 8009882:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009886:	4013      	ands	r3, r2
 8009888:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	f003 0303 	and.w	r3, r3, #3
 8009890:	009b      	lsls	r3, r3, #2
 8009892:	220f      	movs	r2, #15
 8009894:	fa02 f303 	lsl.w	r3, r2, r3
 8009898:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800989a:	4a30      	ldr	r2, [pc, #192]	; (800995c <HAL_GPIO_DeInit+0x1dc>)
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	089b      	lsrs	r3, r3, #2
 80098a0:	3302      	adds	r3, #2
 80098a2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	43da      	mvns	r2, r3
 80098aa:	482c      	ldr	r0, [pc, #176]	; (800995c <HAL_GPIO_DeInit+0x1dc>)
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	089b      	lsrs	r3, r3, #2
 80098b0:	400a      	ands	r2, r1
 80098b2:	3302      	adds	r3, #2
 80098b4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	005b      	lsls	r3, r3, #1
 80098c0:	2103      	movs	r1, #3
 80098c2:	fa01 f303 	lsl.w	r3, r1, r3
 80098c6:	431a      	orrs	r2, r3
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	08da      	lsrs	r2, r3, #3
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	3208      	adds	r2, #8
 80098d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	f003 0307 	and.w	r3, r3, #7
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	220f      	movs	r2, #15
 80098e2:	fa02 f303 	lsl.w	r3, r2, r3
 80098e6:	43db      	mvns	r3, r3
 80098e8:	697a      	ldr	r2, [r7, #20]
 80098ea:	08d2      	lsrs	r2, r2, #3
 80098ec:	4019      	ands	r1, r3
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	3208      	adds	r2, #8
 80098f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	68da      	ldr	r2, [r3, #12]
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	005b      	lsls	r3, r3, #1
 80098fe:	2103      	movs	r1, #3
 8009900:	fa01 f303 	lsl.w	r3, r1, r3
 8009904:	43db      	mvns	r3, r3
 8009906:	401a      	ands	r2, r3
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	685a      	ldr	r2, [r3, #4]
 8009910:	2101      	movs	r1, #1
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	fa01 f303 	lsl.w	r3, r1, r3
 8009918:	43db      	mvns	r3, r3
 800991a:	401a      	ands	r2, r3
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	689a      	ldr	r2, [r3, #8]
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	005b      	lsls	r3, r3, #1
 8009928:	2103      	movs	r1, #3
 800992a:	fa01 f303 	lsl.w	r3, r1, r3
 800992e:	43db      	mvns	r3, r3
 8009930:	401a      	ands	r2, r3
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	609a      	str	r2, [r3, #8]
    }

    position++;
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	3301      	adds	r3, #1
 800993a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800993c:	683a      	ldr	r2, [r7, #0]
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	fa22 f303 	lsr.w	r3, r2, r3
 8009944:	2b00      	cmp	r3, #0
 8009946:	f47f af25 	bne.w	8009794 <HAL_GPIO_DeInit+0x14>
  }
}
 800994a:	bf00      	nop
 800994c:	bf00      	nop
 800994e:	371c      	adds	r7, #28
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr
 8009958:	58000080 	.word	0x58000080
 800995c:	58000400 	.word	0x58000400
 8009960:	58020000 	.word	0x58020000
 8009964:	58020400 	.word	0x58020400
 8009968:	58020800 	.word	0x58020800
 800996c:	58020c00 	.word	0x58020c00
 8009970:	58021000 	.word	0x58021000
 8009974:	58021400 	.word	0x58021400
 8009978:	58021800 	.word	0x58021800
 800997c:	58021c00 	.word	0x58021c00
 8009980:	58022400 	.word	0x58022400

08009984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009984:	b480      	push	{r7}
 8009986:	b083      	sub	sp, #12
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	460b      	mov	r3, r1
 800998e:	807b      	strh	r3, [r7, #2]
 8009990:	4613      	mov	r3, r2
 8009992:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009994:	787b      	ldrb	r3, [r7, #1]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d003      	beq.n	80099a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800999a:	887a      	ldrh	r2, [r7, #2]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80099a0:	e003      	b.n	80099aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80099a2:	887b      	ldrh	r3, [r7, #2]
 80099a4:	041a      	lsls	r2, r3, #16
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	619a      	str	r2, [r3, #24]
}
 80099aa:	bf00      	nop
 80099ac:	370c      	adds	r7, #12
 80099ae:	46bd      	mov	sp, r7
 80099b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b4:	4770      	bx	lr
	...

080099b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b084      	sub	sp, #16
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80099c0:	4b19      	ldr	r3, [pc, #100]	; (8009a28 <HAL_PWREx_ConfigSupply+0x70>)
 80099c2:	68db      	ldr	r3, [r3, #12]
 80099c4:	f003 0304 	and.w	r3, r3, #4
 80099c8:	2b04      	cmp	r3, #4
 80099ca:	d00a      	beq.n	80099e2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80099cc:	4b16      	ldr	r3, [pc, #88]	; (8009a28 <HAL_PWREx_ConfigSupply+0x70>)
 80099ce:	68db      	ldr	r3, [r3, #12]
 80099d0:	f003 0307 	and.w	r3, r3, #7
 80099d4:	687a      	ldr	r2, [r7, #4]
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d001      	beq.n	80099de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80099da:	2301      	movs	r3, #1
 80099dc:	e01f      	b.n	8009a1e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80099de:	2300      	movs	r3, #0
 80099e0:	e01d      	b.n	8009a1e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80099e2:	4b11      	ldr	r3, [pc, #68]	; (8009a28 <HAL_PWREx_ConfigSupply+0x70>)
 80099e4:	68db      	ldr	r3, [r3, #12]
 80099e6:	f023 0207 	bic.w	r2, r3, #7
 80099ea:	490f      	ldr	r1, [pc, #60]	; (8009a28 <HAL_PWREx_ConfigSupply+0x70>)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	4313      	orrs	r3, r2
 80099f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80099f2:	f7fc fbe1 	bl	80061b8 <HAL_GetTick>
 80099f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80099f8:	e009      	b.n	8009a0e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80099fa:	f7fc fbdd 	bl	80061b8 <HAL_GetTick>
 80099fe:	4602      	mov	r2, r0
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	1ad3      	subs	r3, r2, r3
 8009a04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a08:	d901      	bls.n	8009a0e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	e007      	b.n	8009a1e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009a0e:	4b06      	ldr	r3, [pc, #24]	; (8009a28 <HAL_PWREx_ConfigSupply+0x70>)
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a1a:	d1ee      	bne.n	80099fa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009a1c:	2300      	movs	r3, #0
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3710      	adds	r7, #16
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	bf00      	nop
 8009a28:	58024800 	.word	0x58024800

08009a2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b08c      	sub	sp, #48	; 0x30
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d101      	bne.n	8009a3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	e3c8      	b.n	800a1d0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f003 0301 	and.w	r3, r3, #1
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	f000 8087 	beq.w	8009b5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a4c:	4b88      	ldr	r3, [pc, #544]	; (8009c70 <HAL_RCC_OscConfig+0x244>)
 8009a4e:	691b      	ldr	r3, [r3, #16]
 8009a50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a54:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009a56:	4b86      	ldr	r3, [pc, #536]	; (8009c70 <HAL_RCC_OscConfig+0x244>)
 8009a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a5a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a5e:	2b10      	cmp	r3, #16
 8009a60:	d007      	beq.n	8009a72 <HAL_RCC_OscConfig+0x46>
 8009a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a64:	2b18      	cmp	r3, #24
 8009a66:	d110      	bne.n	8009a8a <HAL_RCC_OscConfig+0x5e>
 8009a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a6a:	f003 0303 	and.w	r3, r3, #3
 8009a6e:	2b02      	cmp	r3, #2
 8009a70:	d10b      	bne.n	8009a8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a72:	4b7f      	ldr	r3, [pc, #508]	; (8009c70 <HAL_RCC_OscConfig+0x244>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d06c      	beq.n	8009b58 <HAL_RCC_OscConfig+0x12c>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d168      	bne.n	8009b58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009a86:	2301      	movs	r3, #1
 8009a88:	e3a2      	b.n	800a1d0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a92:	d106      	bne.n	8009aa2 <HAL_RCC_OscConfig+0x76>
 8009a94:	4b76      	ldr	r3, [pc, #472]	; (8009c70 <HAL_RCC_OscConfig+0x244>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a75      	ldr	r2, [pc, #468]	; (8009c70 <HAL_RCC_OscConfig+0x244>)
 8009a9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a9e:	6013      	str	r3, [r2, #0]
 8009aa0:	e02e      	b.n	8009b00 <HAL_RCC_OscConfig+0xd4>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	685b      	ldr	r3, [r3, #4]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d10c      	bne.n	8009ac4 <HAL_RCC_OscConfig+0x98>
 8009aaa:	4b71      	ldr	r3, [pc, #452]	; (8009c70 <HAL_RCC_OscConfig+0x244>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a70      	ldr	r2, [pc, #448]	; (8009c70 <HAL_RCC_OscConfig+0x244>)
 8009ab0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ab4:	6013      	str	r3, [r2, #0]
 8009ab6:	4b6e      	ldr	r3, [pc, #440]	; (8009c70 <HAL_RCC_OscConfig+0x244>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4a6d      	ldr	r2, [pc, #436]	; (8009c70 <HAL_RCC_OscConfig+0x244>)
 8009abc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009ac0:	6013      	str	r3, [r2, #0]
 8009ac2:	e01d      	b.n	8009b00 <HAL_RCC_OscConfig+0xd4>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009acc:	d10c      	bne.n	8009ae8 <HAL_RCC_OscConfig+0xbc>
 8009ace:	4b68      	ldr	r3, [pc, #416]	; (8009c70 <HAL_RCC_OscConfig+0x244>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4a67      	ldr	r2, [pc, #412]	; (8009c70 <HAL_RCC_OscConfig+0x244>)
 8009ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009ad8:	6013      	str	r3, [r2, #0]
 8009ada:	4b65      	ldr	r3, [pc, #404]	; (8009c70 <HAL_RCC_OscConfig+0x244>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4a64      	ldr	r2, [pc, #400]	; (8009c70 <HAL_RCC_OscConfig+0x244>)
 8009ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ae4:	6013      	str	r3, [r2, #0]
 8009ae6:	e00b      	b.n	8009b00 <HAL_RCC_OscConfig+0xd4>
 8009ae8:	4b61      	ldr	r3, [pc, #388]	; (8009c70 <HAL_RCC_OscConfig+0x244>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4a60      	ldr	r2, [pc, #384]	; (8009c70 <HAL_RCC_OscConfig+0x244>)
 8009aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009af2:	6013      	str	r3, [r2, #0]
 8009af4:	4b5e      	ldr	r3, [pc, #376]	; (8009c70 <HAL_RCC_OscConfig+0x244>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a5d      	ldr	r2, [pc, #372]	; (8009c70 <HAL_RCC_OscConfig+0x244>)
 8009afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009afe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d013      	beq.n	8009b30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b08:	f7fc fb56 	bl	80061b8 <HAL_GetTick>
 8009b0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009b0e:	e008      	b.n	8009b22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009b10:	f7fc fb52 	bl	80061b8 <HAL_GetTick>
 8009b14:	4602      	mov	r2, r0
 8009b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b18:	1ad3      	subs	r3, r2, r3
 8009b1a:	2b64      	cmp	r3, #100	; 0x64
 8009b1c:	d901      	bls.n	8009b22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009b1e:	2303      	movs	r3, #3
 8009b20:	e356      	b.n	800a1d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009b22:	4b53      	ldr	r3, [pc, #332]	; (8009c70 <HAL_RCC_OscConfig+0x244>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d0f0      	beq.n	8009b10 <HAL_RCC_OscConfig+0xe4>
 8009b2e:	e014      	b.n	8009b5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b30:	f7fc fb42 	bl	80061b8 <HAL_GetTick>
 8009b34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009b36:	e008      	b.n	8009b4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009b38:	f7fc fb3e 	bl	80061b8 <HAL_GetTick>
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b40:	1ad3      	subs	r3, r2, r3
 8009b42:	2b64      	cmp	r3, #100	; 0x64
 8009b44:	d901      	bls.n	8009b4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009b46:	2303      	movs	r3, #3
 8009b48:	e342      	b.n	800a1d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009b4a:	4b49      	ldr	r3, [pc, #292]	; (8009c70 <HAL_RCC_OscConfig+0x244>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d1f0      	bne.n	8009b38 <HAL_RCC_OscConfig+0x10c>
 8009b56:	e000      	b.n	8009b5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f003 0302 	and.w	r3, r3, #2
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	f000 808c 	beq.w	8009c80 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009b68:	4b41      	ldr	r3, [pc, #260]	; (8009c70 <HAL_RCC_OscConfig+0x244>)
 8009b6a:	691b      	ldr	r3, [r3, #16]
 8009b6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b70:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009b72:	4b3f      	ldr	r3, [pc, #252]	; (8009c70 <HAL_RCC_OscConfig+0x244>)
 8009b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b76:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009b78:	6a3b      	ldr	r3, [r7, #32]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d007      	beq.n	8009b8e <HAL_RCC_OscConfig+0x162>
 8009b7e:	6a3b      	ldr	r3, [r7, #32]
 8009b80:	2b18      	cmp	r3, #24
 8009b82:	d137      	bne.n	8009bf4 <HAL_RCC_OscConfig+0x1c8>
 8009b84:	69fb      	ldr	r3, [r7, #28]
 8009b86:	f003 0303 	and.w	r3, r3, #3
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d132      	bne.n	8009bf4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009b8e:	4b38      	ldr	r3, [pc, #224]	; (8009c70 <HAL_RCC_OscConfig+0x244>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f003 0304 	and.w	r3, r3, #4
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d005      	beq.n	8009ba6 <HAL_RCC_OscConfig+0x17a>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	68db      	ldr	r3, [r3, #12]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d101      	bne.n	8009ba6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e314      	b.n	800a1d0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009ba6:	4b32      	ldr	r3, [pc, #200]	; (8009c70 <HAL_RCC_OscConfig+0x244>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f023 0219 	bic.w	r2, r3, #25
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	68db      	ldr	r3, [r3, #12]
 8009bb2:	492f      	ldr	r1, [pc, #188]	; (8009c70 <HAL_RCC_OscConfig+0x244>)
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bb8:	f7fc fafe 	bl	80061b8 <HAL_GetTick>
 8009bbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009bbe:	e008      	b.n	8009bd2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009bc0:	f7fc fafa 	bl	80061b8 <HAL_GetTick>
 8009bc4:	4602      	mov	r2, r0
 8009bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc8:	1ad3      	subs	r3, r2, r3
 8009bca:	2b02      	cmp	r3, #2
 8009bcc:	d901      	bls.n	8009bd2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8009bce:	2303      	movs	r3, #3
 8009bd0:	e2fe      	b.n	800a1d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009bd2:	4b27      	ldr	r3, [pc, #156]	; (8009c70 <HAL_RCC_OscConfig+0x244>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f003 0304 	and.w	r3, r3, #4
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d0f0      	beq.n	8009bc0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009bde:	4b24      	ldr	r3, [pc, #144]	; (8009c70 <HAL_RCC_OscConfig+0x244>)
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	691b      	ldr	r3, [r3, #16]
 8009bea:	061b      	lsls	r3, r3, #24
 8009bec:	4920      	ldr	r1, [pc, #128]	; (8009c70 <HAL_RCC_OscConfig+0x244>)
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009bf2:	e045      	b.n	8009c80 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d026      	beq.n	8009c4a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009bfc:	4b1c      	ldr	r3, [pc, #112]	; (8009c70 <HAL_RCC_OscConfig+0x244>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f023 0219 	bic.w	r2, r3, #25
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	68db      	ldr	r3, [r3, #12]
 8009c08:	4919      	ldr	r1, [pc, #100]	; (8009c70 <HAL_RCC_OscConfig+0x244>)
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c0e:	f7fc fad3 	bl	80061b8 <HAL_GetTick>
 8009c12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c14:	e008      	b.n	8009c28 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009c16:	f7fc facf 	bl	80061b8 <HAL_GetTick>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1e:	1ad3      	subs	r3, r2, r3
 8009c20:	2b02      	cmp	r3, #2
 8009c22:	d901      	bls.n	8009c28 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009c24:	2303      	movs	r3, #3
 8009c26:	e2d3      	b.n	800a1d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c28:	4b11      	ldr	r3, [pc, #68]	; (8009c70 <HAL_RCC_OscConfig+0x244>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f003 0304 	and.w	r3, r3, #4
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d0f0      	beq.n	8009c16 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c34:	4b0e      	ldr	r3, [pc, #56]	; (8009c70 <HAL_RCC_OscConfig+0x244>)
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	691b      	ldr	r3, [r3, #16]
 8009c40:	061b      	lsls	r3, r3, #24
 8009c42:	490b      	ldr	r1, [pc, #44]	; (8009c70 <HAL_RCC_OscConfig+0x244>)
 8009c44:	4313      	orrs	r3, r2
 8009c46:	604b      	str	r3, [r1, #4]
 8009c48:	e01a      	b.n	8009c80 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009c4a:	4b09      	ldr	r3, [pc, #36]	; (8009c70 <HAL_RCC_OscConfig+0x244>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	4a08      	ldr	r2, [pc, #32]	; (8009c70 <HAL_RCC_OscConfig+0x244>)
 8009c50:	f023 0301 	bic.w	r3, r3, #1
 8009c54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c56:	f7fc faaf 	bl	80061b8 <HAL_GetTick>
 8009c5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009c5c:	e00a      	b.n	8009c74 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009c5e:	f7fc faab 	bl	80061b8 <HAL_GetTick>
 8009c62:	4602      	mov	r2, r0
 8009c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c66:	1ad3      	subs	r3, r2, r3
 8009c68:	2b02      	cmp	r3, #2
 8009c6a:	d903      	bls.n	8009c74 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009c6c:	2303      	movs	r3, #3
 8009c6e:	e2af      	b.n	800a1d0 <HAL_RCC_OscConfig+0x7a4>
 8009c70:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009c74:	4b96      	ldr	r3, [pc, #600]	; (8009ed0 <HAL_RCC_OscConfig+0x4a4>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f003 0304 	and.w	r3, r3, #4
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d1ee      	bne.n	8009c5e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f003 0310 	and.w	r3, r3, #16
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d06a      	beq.n	8009d62 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009c8c:	4b90      	ldr	r3, [pc, #576]	; (8009ed0 <HAL_RCC_OscConfig+0x4a4>)
 8009c8e:	691b      	ldr	r3, [r3, #16]
 8009c90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c94:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009c96:	4b8e      	ldr	r3, [pc, #568]	; (8009ed0 <HAL_RCC_OscConfig+0x4a4>)
 8009c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c9a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009c9c:	69bb      	ldr	r3, [r7, #24]
 8009c9e:	2b08      	cmp	r3, #8
 8009ca0:	d007      	beq.n	8009cb2 <HAL_RCC_OscConfig+0x286>
 8009ca2:	69bb      	ldr	r3, [r7, #24]
 8009ca4:	2b18      	cmp	r3, #24
 8009ca6:	d11b      	bne.n	8009ce0 <HAL_RCC_OscConfig+0x2b4>
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	f003 0303 	and.w	r3, r3, #3
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	d116      	bne.n	8009ce0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009cb2:	4b87      	ldr	r3, [pc, #540]	; (8009ed0 <HAL_RCC_OscConfig+0x4a4>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d005      	beq.n	8009cca <HAL_RCC_OscConfig+0x29e>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	69db      	ldr	r3, [r3, #28]
 8009cc2:	2b80      	cmp	r3, #128	; 0x80
 8009cc4:	d001      	beq.n	8009cca <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	e282      	b.n	800a1d0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009cca:	4b81      	ldr	r3, [pc, #516]	; (8009ed0 <HAL_RCC_OscConfig+0x4a4>)
 8009ccc:	68db      	ldr	r3, [r3, #12]
 8009cce:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6a1b      	ldr	r3, [r3, #32]
 8009cd6:	061b      	lsls	r3, r3, #24
 8009cd8:	497d      	ldr	r1, [pc, #500]	; (8009ed0 <HAL_RCC_OscConfig+0x4a4>)
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009cde:	e040      	b.n	8009d62 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	69db      	ldr	r3, [r3, #28]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d023      	beq.n	8009d30 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009ce8:	4b79      	ldr	r3, [pc, #484]	; (8009ed0 <HAL_RCC_OscConfig+0x4a4>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a78      	ldr	r2, [pc, #480]	; (8009ed0 <HAL_RCC_OscConfig+0x4a4>)
 8009cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cf4:	f7fc fa60 	bl	80061b8 <HAL_GetTick>
 8009cf8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009cfa:	e008      	b.n	8009d0e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009cfc:	f7fc fa5c 	bl	80061b8 <HAL_GetTick>
 8009d00:	4602      	mov	r2, r0
 8009d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d04:	1ad3      	subs	r3, r2, r3
 8009d06:	2b02      	cmp	r3, #2
 8009d08:	d901      	bls.n	8009d0e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009d0a:	2303      	movs	r3, #3
 8009d0c:	e260      	b.n	800a1d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009d0e:	4b70      	ldr	r3, [pc, #448]	; (8009ed0 <HAL_RCC_OscConfig+0x4a4>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d0f0      	beq.n	8009cfc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009d1a:	4b6d      	ldr	r3, [pc, #436]	; (8009ed0 <HAL_RCC_OscConfig+0x4a4>)
 8009d1c:	68db      	ldr	r3, [r3, #12]
 8009d1e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6a1b      	ldr	r3, [r3, #32]
 8009d26:	061b      	lsls	r3, r3, #24
 8009d28:	4969      	ldr	r1, [pc, #420]	; (8009ed0 <HAL_RCC_OscConfig+0x4a4>)
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	60cb      	str	r3, [r1, #12]
 8009d2e:	e018      	b.n	8009d62 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009d30:	4b67      	ldr	r3, [pc, #412]	; (8009ed0 <HAL_RCC_OscConfig+0x4a4>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4a66      	ldr	r2, [pc, #408]	; (8009ed0 <HAL_RCC_OscConfig+0x4a4>)
 8009d36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d3c:	f7fc fa3c 	bl	80061b8 <HAL_GetTick>
 8009d40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009d42:	e008      	b.n	8009d56 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009d44:	f7fc fa38 	bl	80061b8 <HAL_GetTick>
 8009d48:	4602      	mov	r2, r0
 8009d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4c:	1ad3      	subs	r3, r2, r3
 8009d4e:	2b02      	cmp	r3, #2
 8009d50:	d901      	bls.n	8009d56 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009d52:	2303      	movs	r3, #3
 8009d54:	e23c      	b.n	800a1d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009d56:	4b5e      	ldr	r3, [pc, #376]	; (8009ed0 <HAL_RCC_OscConfig+0x4a4>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d1f0      	bne.n	8009d44 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f003 0308 	and.w	r3, r3, #8
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d036      	beq.n	8009ddc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	695b      	ldr	r3, [r3, #20]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d019      	beq.n	8009daa <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009d76:	4b56      	ldr	r3, [pc, #344]	; (8009ed0 <HAL_RCC_OscConfig+0x4a4>)
 8009d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d7a:	4a55      	ldr	r2, [pc, #340]	; (8009ed0 <HAL_RCC_OscConfig+0x4a4>)
 8009d7c:	f043 0301 	orr.w	r3, r3, #1
 8009d80:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d82:	f7fc fa19 	bl	80061b8 <HAL_GetTick>
 8009d86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009d88:	e008      	b.n	8009d9c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009d8a:	f7fc fa15 	bl	80061b8 <HAL_GetTick>
 8009d8e:	4602      	mov	r2, r0
 8009d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d92:	1ad3      	subs	r3, r2, r3
 8009d94:	2b02      	cmp	r3, #2
 8009d96:	d901      	bls.n	8009d9c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009d98:	2303      	movs	r3, #3
 8009d9a:	e219      	b.n	800a1d0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009d9c:	4b4c      	ldr	r3, [pc, #304]	; (8009ed0 <HAL_RCC_OscConfig+0x4a4>)
 8009d9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009da0:	f003 0302 	and.w	r3, r3, #2
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d0f0      	beq.n	8009d8a <HAL_RCC_OscConfig+0x35e>
 8009da8:	e018      	b.n	8009ddc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009daa:	4b49      	ldr	r3, [pc, #292]	; (8009ed0 <HAL_RCC_OscConfig+0x4a4>)
 8009dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dae:	4a48      	ldr	r2, [pc, #288]	; (8009ed0 <HAL_RCC_OscConfig+0x4a4>)
 8009db0:	f023 0301 	bic.w	r3, r3, #1
 8009db4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009db6:	f7fc f9ff 	bl	80061b8 <HAL_GetTick>
 8009dba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009dbc:	e008      	b.n	8009dd0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009dbe:	f7fc f9fb 	bl	80061b8 <HAL_GetTick>
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc6:	1ad3      	subs	r3, r2, r3
 8009dc8:	2b02      	cmp	r3, #2
 8009dca:	d901      	bls.n	8009dd0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009dcc:	2303      	movs	r3, #3
 8009dce:	e1ff      	b.n	800a1d0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009dd0:	4b3f      	ldr	r3, [pc, #252]	; (8009ed0 <HAL_RCC_OscConfig+0x4a4>)
 8009dd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dd4:	f003 0302 	and.w	r3, r3, #2
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d1f0      	bne.n	8009dbe <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f003 0320 	and.w	r3, r3, #32
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d036      	beq.n	8009e56 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	699b      	ldr	r3, [r3, #24]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d019      	beq.n	8009e24 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009df0:	4b37      	ldr	r3, [pc, #220]	; (8009ed0 <HAL_RCC_OscConfig+0x4a4>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4a36      	ldr	r2, [pc, #216]	; (8009ed0 <HAL_RCC_OscConfig+0x4a4>)
 8009df6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009dfa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009dfc:	f7fc f9dc 	bl	80061b8 <HAL_GetTick>
 8009e00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009e02:	e008      	b.n	8009e16 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009e04:	f7fc f9d8 	bl	80061b8 <HAL_GetTick>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0c:	1ad3      	subs	r3, r2, r3
 8009e0e:	2b02      	cmp	r3, #2
 8009e10:	d901      	bls.n	8009e16 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009e12:	2303      	movs	r3, #3
 8009e14:	e1dc      	b.n	800a1d0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009e16:	4b2e      	ldr	r3, [pc, #184]	; (8009ed0 <HAL_RCC_OscConfig+0x4a4>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d0f0      	beq.n	8009e04 <HAL_RCC_OscConfig+0x3d8>
 8009e22:	e018      	b.n	8009e56 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009e24:	4b2a      	ldr	r3, [pc, #168]	; (8009ed0 <HAL_RCC_OscConfig+0x4a4>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4a29      	ldr	r2, [pc, #164]	; (8009ed0 <HAL_RCC_OscConfig+0x4a4>)
 8009e2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e2e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009e30:	f7fc f9c2 	bl	80061b8 <HAL_GetTick>
 8009e34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009e36:	e008      	b.n	8009e4a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009e38:	f7fc f9be 	bl	80061b8 <HAL_GetTick>
 8009e3c:	4602      	mov	r2, r0
 8009e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e40:	1ad3      	subs	r3, r2, r3
 8009e42:	2b02      	cmp	r3, #2
 8009e44:	d901      	bls.n	8009e4a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009e46:	2303      	movs	r3, #3
 8009e48:	e1c2      	b.n	800a1d0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009e4a:	4b21      	ldr	r3, [pc, #132]	; (8009ed0 <HAL_RCC_OscConfig+0x4a4>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d1f0      	bne.n	8009e38 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f003 0304 	and.w	r3, r3, #4
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	f000 8086 	beq.w	8009f70 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009e64:	4b1b      	ldr	r3, [pc, #108]	; (8009ed4 <HAL_RCC_OscConfig+0x4a8>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4a1a      	ldr	r2, [pc, #104]	; (8009ed4 <HAL_RCC_OscConfig+0x4a8>)
 8009e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009e70:	f7fc f9a2 	bl	80061b8 <HAL_GetTick>
 8009e74:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009e76:	e008      	b.n	8009e8a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e78:	f7fc f99e 	bl	80061b8 <HAL_GetTick>
 8009e7c:	4602      	mov	r2, r0
 8009e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e80:	1ad3      	subs	r3, r2, r3
 8009e82:	2b64      	cmp	r3, #100	; 0x64
 8009e84:	d901      	bls.n	8009e8a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8009e86:	2303      	movs	r3, #3
 8009e88:	e1a2      	b.n	800a1d0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009e8a:	4b12      	ldr	r3, [pc, #72]	; (8009ed4 <HAL_RCC_OscConfig+0x4a8>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d0f0      	beq.n	8009e78 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	689b      	ldr	r3, [r3, #8]
 8009e9a:	2b01      	cmp	r3, #1
 8009e9c:	d106      	bne.n	8009eac <HAL_RCC_OscConfig+0x480>
 8009e9e:	4b0c      	ldr	r3, [pc, #48]	; (8009ed0 <HAL_RCC_OscConfig+0x4a4>)
 8009ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ea2:	4a0b      	ldr	r2, [pc, #44]	; (8009ed0 <HAL_RCC_OscConfig+0x4a4>)
 8009ea4:	f043 0301 	orr.w	r3, r3, #1
 8009ea8:	6713      	str	r3, [r2, #112]	; 0x70
 8009eaa:	e032      	b.n	8009f12 <HAL_RCC_OscConfig+0x4e6>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	689b      	ldr	r3, [r3, #8]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d111      	bne.n	8009ed8 <HAL_RCC_OscConfig+0x4ac>
 8009eb4:	4b06      	ldr	r3, [pc, #24]	; (8009ed0 <HAL_RCC_OscConfig+0x4a4>)
 8009eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eb8:	4a05      	ldr	r2, [pc, #20]	; (8009ed0 <HAL_RCC_OscConfig+0x4a4>)
 8009eba:	f023 0301 	bic.w	r3, r3, #1
 8009ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8009ec0:	4b03      	ldr	r3, [pc, #12]	; (8009ed0 <HAL_RCC_OscConfig+0x4a4>)
 8009ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ec4:	4a02      	ldr	r2, [pc, #8]	; (8009ed0 <HAL_RCC_OscConfig+0x4a4>)
 8009ec6:	f023 0304 	bic.w	r3, r3, #4
 8009eca:	6713      	str	r3, [r2, #112]	; 0x70
 8009ecc:	e021      	b.n	8009f12 <HAL_RCC_OscConfig+0x4e6>
 8009ece:	bf00      	nop
 8009ed0:	58024400 	.word	0x58024400
 8009ed4:	58024800 	.word	0x58024800
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	689b      	ldr	r3, [r3, #8]
 8009edc:	2b05      	cmp	r3, #5
 8009ede:	d10c      	bne.n	8009efa <HAL_RCC_OscConfig+0x4ce>
 8009ee0:	4b83      	ldr	r3, [pc, #524]	; (800a0f0 <HAL_RCC_OscConfig+0x6c4>)
 8009ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ee4:	4a82      	ldr	r2, [pc, #520]	; (800a0f0 <HAL_RCC_OscConfig+0x6c4>)
 8009ee6:	f043 0304 	orr.w	r3, r3, #4
 8009eea:	6713      	str	r3, [r2, #112]	; 0x70
 8009eec:	4b80      	ldr	r3, [pc, #512]	; (800a0f0 <HAL_RCC_OscConfig+0x6c4>)
 8009eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ef0:	4a7f      	ldr	r2, [pc, #508]	; (800a0f0 <HAL_RCC_OscConfig+0x6c4>)
 8009ef2:	f043 0301 	orr.w	r3, r3, #1
 8009ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8009ef8:	e00b      	b.n	8009f12 <HAL_RCC_OscConfig+0x4e6>
 8009efa:	4b7d      	ldr	r3, [pc, #500]	; (800a0f0 <HAL_RCC_OscConfig+0x6c4>)
 8009efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009efe:	4a7c      	ldr	r2, [pc, #496]	; (800a0f0 <HAL_RCC_OscConfig+0x6c4>)
 8009f00:	f023 0301 	bic.w	r3, r3, #1
 8009f04:	6713      	str	r3, [r2, #112]	; 0x70
 8009f06:	4b7a      	ldr	r3, [pc, #488]	; (800a0f0 <HAL_RCC_OscConfig+0x6c4>)
 8009f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f0a:	4a79      	ldr	r2, [pc, #484]	; (800a0f0 <HAL_RCC_OscConfig+0x6c4>)
 8009f0c:	f023 0304 	bic.w	r3, r3, #4
 8009f10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	689b      	ldr	r3, [r3, #8]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d015      	beq.n	8009f46 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f1a:	f7fc f94d 	bl	80061b8 <HAL_GetTick>
 8009f1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009f20:	e00a      	b.n	8009f38 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f22:	f7fc f949 	bl	80061b8 <HAL_GetTick>
 8009f26:	4602      	mov	r2, r0
 8009f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2a:	1ad3      	subs	r3, r2, r3
 8009f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d901      	bls.n	8009f38 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009f34:	2303      	movs	r3, #3
 8009f36:	e14b      	b.n	800a1d0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009f38:	4b6d      	ldr	r3, [pc, #436]	; (800a0f0 <HAL_RCC_OscConfig+0x6c4>)
 8009f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f3c:	f003 0302 	and.w	r3, r3, #2
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d0ee      	beq.n	8009f22 <HAL_RCC_OscConfig+0x4f6>
 8009f44:	e014      	b.n	8009f70 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f46:	f7fc f937 	bl	80061b8 <HAL_GetTick>
 8009f4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009f4c:	e00a      	b.n	8009f64 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f4e:	f7fc f933 	bl	80061b8 <HAL_GetTick>
 8009f52:	4602      	mov	r2, r0
 8009f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f56:	1ad3      	subs	r3, r2, r3
 8009f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d901      	bls.n	8009f64 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009f60:	2303      	movs	r3, #3
 8009f62:	e135      	b.n	800a1d0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009f64:	4b62      	ldr	r3, [pc, #392]	; (800a0f0 <HAL_RCC_OscConfig+0x6c4>)
 8009f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f68:	f003 0302 	and.w	r3, r3, #2
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d1ee      	bne.n	8009f4e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	f000 812a 	beq.w	800a1ce <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009f7a:	4b5d      	ldr	r3, [pc, #372]	; (800a0f0 <HAL_RCC_OscConfig+0x6c4>)
 8009f7c:	691b      	ldr	r3, [r3, #16]
 8009f7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f82:	2b18      	cmp	r3, #24
 8009f84:	f000 80ba 	beq.w	800a0fc <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f8c:	2b02      	cmp	r3, #2
 8009f8e:	f040 8095 	bne.w	800a0bc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f92:	4b57      	ldr	r3, [pc, #348]	; (800a0f0 <HAL_RCC_OscConfig+0x6c4>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4a56      	ldr	r2, [pc, #344]	; (800a0f0 <HAL_RCC_OscConfig+0x6c4>)
 8009f98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f9e:	f7fc f90b 	bl	80061b8 <HAL_GetTick>
 8009fa2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009fa4:	e008      	b.n	8009fb8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009fa6:	f7fc f907 	bl	80061b8 <HAL_GetTick>
 8009faa:	4602      	mov	r2, r0
 8009fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fae:	1ad3      	subs	r3, r2, r3
 8009fb0:	2b02      	cmp	r3, #2
 8009fb2:	d901      	bls.n	8009fb8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009fb4:	2303      	movs	r3, #3
 8009fb6:	e10b      	b.n	800a1d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009fb8:	4b4d      	ldr	r3, [pc, #308]	; (800a0f0 <HAL_RCC_OscConfig+0x6c4>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d1f0      	bne.n	8009fa6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009fc4:	4b4a      	ldr	r3, [pc, #296]	; (800a0f0 <HAL_RCC_OscConfig+0x6c4>)
 8009fc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009fc8:	4b4a      	ldr	r3, [pc, #296]	; (800a0f4 <HAL_RCC_OscConfig+0x6c8>)
 8009fca:	4013      	ands	r3, r2
 8009fcc:	687a      	ldr	r2, [r7, #4]
 8009fce:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009fd4:	0112      	lsls	r2, r2, #4
 8009fd6:	430a      	orrs	r2, r1
 8009fd8:	4945      	ldr	r1, [pc, #276]	; (800a0f0 <HAL_RCC_OscConfig+0x6c4>)
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	628b      	str	r3, [r1, #40]	; 0x28
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fe2:	3b01      	subs	r3, #1
 8009fe4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fec:	3b01      	subs	r3, #1
 8009fee:	025b      	lsls	r3, r3, #9
 8009ff0:	b29b      	uxth	r3, r3
 8009ff2:	431a      	orrs	r2, r3
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ff8:	3b01      	subs	r3, #1
 8009ffa:	041b      	lsls	r3, r3, #16
 8009ffc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a000:	431a      	orrs	r2, r3
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a006:	3b01      	subs	r3, #1
 800a008:	061b      	lsls	r3, r3, #24
 800a00a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a00e:	4938      	ldr	r1, [pc, #224]	; (800a0f0 <HAL_RCC_OscConfig+0x6c4>)
 800a010:	4313      	orrs	r3, r2
 800a012:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a014:	4b36      	ldr	r3, [pc, #216]	; (800a0f0 <HAL_RCC_OscConfig+0x6c4>)
 800a016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a018:	4a35      	ldr	r2, [pc, #212]	; (800a0f0 <HAL_RCC_OscConfig+0x6c4>)
 800a01a:	f023 0301 	bic.w	r3, r3, #1
 800a01e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a020:	4b33      	ldr	r3, [pc, #204]	; (800a0f0 <HAL_RCC_OscConfig+0x6c4>)
 800a022:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a024:	4b34      	ldr	r3, [pc, #208]	; (800a0f8 <HAL_RCC_OscConfig+0x6cc>)
 800a026:	4013      	ands	r3, r2
 800a028:	687a      	ldr	r2, [r7, #4]
 800a02a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a02c:	00d2      	lsls	r2, r2, #3
 800a02e:	4930      	ldr	r1, [pc, #192]	; (800a0f0 <HAL_RCC_OscConfig+0x6c4>)
 800a030:	4313      	orrs	r3, r2
 800a032:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a034:	4b2e      	ldr	r3, [pc, #184]	; (800a0f0 <HAL_RCC_OscConfig+0x6c4>)
 800a036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a038:	f023 020c 	bic.w	r2, r3, #12
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a040:	492b      	ldr	r1, [pc, #172]	; (800a0f0 <HAL_RCC_OscConfig+0x6c4>)
 800a042:	4313      	orrs	r3, r2
 800a044:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a046:	4b2a      	ldr	r3, [pc, #168]	; (800a0f0 <HAL_RCC_OscConfig+0x6c4>)
 800a048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a04a:	f023 0202 	bic.w	r2, r3, #2
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a052:	4927      	ldr	r1, [pc, #156]	; (800a0f0 <HAL_RCC_OscConfig+0x6c4>)
 800a054:	4313      	orrs	r3, r2
 800a056:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a058:	4b25      	ldr	r3, [pc, #148]	; (800a0f0 <HAL_RCC_OscConfig+0x6c4>)
 800a05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a05c:	4a24      	ldr	r2, [pc, #144]	; (800a0f0 <HAL_RCC_OscConfig+0x6c4>)
 800a05e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a062:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a064:	4b22      	ldr	r3, [pc, #136]	; (800a0f0 <HAL_RCC_OscConfig+0x6c4>)
 800a066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a068:	4a21      	ldr	r2, [pc, #132]	; (800a0f0 <HAL_RCC_OscConfig+0x6c4>)
 800a06a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a06e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a070:	4b1f      	ldr	r3, [pc, #124]	; (800a0f0 <HAL_RCC_OscConfig+0x6c4>)
 800a072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a074:	4a1e      	ldr	r2, [pc, #120]	; (800a0f0 <HAL_RCC_OscConfig+0x6c4>)
 800a076:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a07a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a07c:	4b1c      	ldr	r3, [pc, #112]	; (800a0f0 <HAL_RCC_OscConfig+0x6c4>)
 800a07e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a080:	4a1b      	ldr	r2, [pc, #108]	; (800a0f0 <HAL_RCC_OscConfig+0x6c4>)
 800a082:	f043 0301 	orr.w	r3, r3, #1
 800a086:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a088:	4b19      	ldr	r3, [pc, #100]	; (800a0f0 <HAL_RCC_OscConfig+0x6c4>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4a18      	ldr	r2, [pc, #96]	; (800a0f0 <HAL_RCC_OscConfig+0x6c4>)
 800a08e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a092:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a094:	f7fc f890 	bl	80061b8 <HAL_GetTick>
 800a098:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a09a:	e008      	b.n	800a0ae <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a09c:	f7fc f88c 	bl	80061b8 <HAL_GetTick>
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a4:	1ad3      	subs	r3, r2, r3
 800a0a6:	2b02      	cmp	r3, #2
 800a0a8:	d901      	bls.n	800a0ae <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800a0aa:	2303      	movs	r3, #3
 800a0ac:	e090      	b.n	800a1d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a0ae:	4b10      	ldr	r3, [pc, #64]	; (800a0f0 <HAL_RCC_OscConfig+0x6c4>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d0f0      	beq.n	800a09c <HAL_RCC_OscConfig+0x670>
 800a0ba:	e088      	b.n	800a1ce <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a0bc:	4b0c      	ldr	r3, [pc, #48]	; (800a0f0 <HAL_RCC_OscConfig+0x6c4>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4a0b      	ldr	r2, [pc, #44]	; (800a0f0 <HAL_RCC_OscConfig+0x6c4>)
 800a0c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a0c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0c8:	f7fc f876 	bl	80061b8 <HAL_GetTick>
 800a0cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a0ce:	e008      	b.n	800a0e2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a0d0:	f7fc f872 	bl	80061b8 <HAL_GetTick>
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d8:	1ad3      	subs	r3, r2, r3
 800a0da:	2b02      	cmp	r3, #2
 800a0dc:	d901      	bls.n	800a0e2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800a0de:	2303      	movs	r3, #3
 800a0e0:	e076      	b.n	800a1d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a0e2:	4b03      	ldr	r3, [pc, #12]	; (800a0f0 <HAL_RCC_OscConfig+0x6c4>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d1f0      	bne.n	800a0d0 <HAL_RCC_OscConfig+0x6a4>
 800a0ee:	e06e      	b.n	800a1ce <HAL_RCC_OscConfig+0x7a2>
 800a0f0:	58024400 	.word	0x58024400
 800a0f4:	fffffc0c 	.word	0xfffffc0c
 800a0f8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a0fc:	4b36      	ldr	r3, [pc, #216]	; (800a1d8 <HAL_RCC_OscConfig+0x7ac>)
 800a0fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a100:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a102:	4b35      	ldr	r3, [pc, #212]	; (800a1d8 <HAL_RCC_OscConfig+0x7ac>)
 800a104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a106:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d031      	beq.n	800a174 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	f003 0203 	and.w	r2, r3, #3
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d12a      	bne.n	800a174 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	091b      	lsrs	r3, r3, #4
 800a122:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d122      	bne.n	800a174 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a138:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d11a      	bne.n	800a174 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	0a5b      	lsrs	r3, r3, #9
 800a142:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a14a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d111      	bne.n	800a174 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	0c1b      	lsrs	r3, r3, #16
 800a154:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a15c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a15e:	429a      	cmp	r2, r3
 800a160:	d108      	bne.n	800a174 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	0e1b      	lsrs	r3, r3, #24
 800a166:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a16e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a170:	429a      	cmp	r2, r3
 800a172:	d001      	beq.n	800a178 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800a174:	2301      	movs	r3, #1
 800a176:	e02b      	b.n	800a1d0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a178:	4b17      	ldr	r3, [pc, #92]	; (800a1d8 <HAL_RCC_OscConfig+0x7ac>)
 800a17a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a17c:	08db      	lsrs	r3, r3, #3
 800a17e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a182:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a188:	693a      	ldr	r2, [r7, #16]
 800a18a:	429a      	cmp	r2, r3
 800a18c:	d01f      	beq.n	800a1ce <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a18e:	4b12      	ldr	r3, [pc, #72]	; (800a1d8 <HAL_RCC_OscConfig+0x7ac>)
 800a190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a192:	4a11      	ldr	r2, [pc, #68]	; (800a1d8 <HAL_RCC_OscConfig+0x7ac>)
 800a194:	f023 0301 	bic.w	r3, r3, #1
 800a198:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a19a:	f7fc f80d 	bl	80061b8 <HAL_GetTick>
 800a19e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a1a0:	bf00      	nop
 800a1a2:	f7fc f809 	bl	80061b8 <HAL_GetTick>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d0f9      	beq.n	800a1a2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a1ae:	4b0a      	ldr	r3, [pc, #40]	; (800a1d8 <HAL_RCC_OscConfig+0x7ac>)
 800a1b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1b2:	4b0a      	ldr	r3, [pc, #40]	; (800a1dc <HAL_RCC_OscConfig+0x7b0>)
 800a1b4:	4013      	ands	r3, r2
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a1ba:	00d2      	lsls	r2, r2, #3
 800a1bc:	4906      	ldr	r1, [pc, #24]	; (800a1d8 <HAL_RCC_OscConfig+0x7ac>)
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a1c2:	4b05      	ldr	r3, [pc, #20]	; (800a1d8 <HAL_RCC_OscConfig+0x7ac>)
 800a1c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1c6:	4a04      	ldr	r2, [pc, #16]	; (800a1d8 <HAL_RCC_OscConfig+0x7ac>)
 800a1c8:	f043 0301 	orr.w	r3, r3, #1
 800a1cc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a1ce:	2300      	movs	r3, #0
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3730      	adds	r7, #48	; 0x30
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	58024400 	.word	0x58024400
 800a1dc:	ffff0007 	.word	0xffff0007

0800a1e0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b086      	sub	sp, #24
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d101      	bne.n	800a1f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	e19c      	b.n	800a52e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a1f4:	4b8a      	ldr	r3, [pc, #552]	; (800a420 <HAL_RCC_ClockConfig+0x240>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f003 030f 	and.w	r3, r3, #15
 800a1fc:	683a      	ldr	r2, [r7, #0]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d910      	bls.n	800a224 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a202:	4b87      	ldr	r3, [pc, #540]	; (800a420 <HAL_RCC_ClockConfig+0x240>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f023 020f 	bic.w	r2, r3, #15
 800a20a:	4985      	ldr	r1, [pc, #532]	; (800a420 <HAL_RCC_ClockConfig+0x240>)
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	4313      	orrs	r3, r2
 800a210:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a212:	4b83      	ldr	r3, [pc, #524]	; (800a420 <HAL_RCC_ClockConfig+0x240>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f003 030f 	and.w	r3, r3, #15
 800a21a:	683a      	ldr	r2, [r7, #0]
 800a21c:	429a      	cmp	r2, r3
 800a21e:	d001      	beq.n	800a224 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a220:	2301      	movs	r3, #1
 800a222:	e184      	b.n	800a52e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f003 0304 	and.w	r3, r3, #4
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d010      	beq.n	800a252 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	691a      	ldr	r2, [r3, #16]
 800a234:	4b7b      	ldr	r3, [pc, #492]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a236:	699b      	ldr	r3, [r3, #24]
 800a238:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d908      	bls.n	800a252 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a240:	4b78      	ldr	r3, [pc, #480]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a242:	699b      	ldr	r3, [r3, #24]
 800a244:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	691b      	ldr	r3, [r3, #16]
 800a24c:	4975      	ldr	r1, [pc, #468]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a24e:	4313      	orrs	r3, r2
 800a250:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f003 0308 	and.w	r3, r3, #8
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d010      	beq.n	800a280 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	695a      	ldr	r2, [r3, #20]
 800a262:	4b70      	ldr	r3, [pc, #448]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a264:	69db      	ldr	r3, [r3, #28]
 800a266:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d908      	bls.n	800a280 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a26e:	4b6d      	ldr	r3, [pc, #436]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a270:	69db      	ldr	r3, [r3, #28]
 800a272:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	695b      	ldr	r3, [r3, #20]
 800a27a:	496a      	ldr	r1, [pc, #424]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a27c:	4313      	orrs	r3, r2
 800a27e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f003 0310 	and.w	r3, r3, #16
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d010      	beq.n	800a2ae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	699a      	ldr	r2, [r3, #24]
 800a290:	4b64      	ldr	r3, [pc, #400]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a292:	69db      	ldr	r3, [r3, #28]
 800a294:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a298:	429a      	cmp	r2, r3
 800a29a:	d908      	bls.n	800a2ae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a29c:	4b61      	ldr	r3, [pc, #388]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a29e:	69db      	ldr	r3, [r3, #28]
 800a2a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	699b      	ldr	r3, [r3, #24]
 800a2a8:	495e      	ldr	r1, [pc, #376]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f003 0320 	and.w	r3, r3, #32
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d010      	beq.n	800a2dc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	69da      	ldr	r2, [r3, #28]
 800a2be:	4b59      	ldr	r3, [pc, #356]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a2c0:	6a1b      	ldr	r3, [r3, #32]
 800a2c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d908      	bls.n	800a2dc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a2ca:	4b56      	ldr	r3, [pc, #344]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a2cc:	6a1b      	ldr	r3, [r3, #32]
 800a2ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	69db      	ldr	r3, [r3, #28]
 800a2d6:	4953      	ldr	r1, [pc, #332]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a2d8:	4313      	orrs	r3, r2
 800a2da:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f003 0302 	and.w	r3, r3, #2
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d010      	beq.n	800a30a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	68da      	ldr	r2, [r3, #12]
 800a2ec:	4b4d      	ldr	r3, [pc, #308]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a2ee:	699b      	ldr	r3, [r3, #24]
 800a2f0:	f003 030f 	and.w	r3, r3, #15
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d908      	bls.n	800a30a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a2f8:	4b4a      	ldr	r3, [pc, #296]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a2fa:	699b      	ldr	r3, [r3, #24]
 800a2fc:	f023 020f 	bic.w	r2, r3, #15
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	68db      	ldr	r3, [r3, #12]
 800a304:	4947      	ldr	r1, [pc, #284]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a306:	4313      	orrs	r3, r2
 800a308:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f003 0301 	and.w	r3, r3, #1
 800a312:	2b00      	cmp	r3, #0
 800a314:	d055      	beq.n	800a3c2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a316:	4b43      	ldr	r3, [pc, #268]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a318:	699b      	ldr	r3, [r3, #24]
 800a31a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	689b      	ldr	r3, [r3, #8]
 800a322:	4940      	ldr	r1, [pc, #256]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a324:	4313      	orrs	r3, r2
 800a326:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	2b02      	cmp	r3, #2
 800a32e:	d107      	bne.n	800a340 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a330:	4b3c      	ldr	r3, [pc, #240]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d121      	bne.n	800a380 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a33c:	2301      	movs	r3, #1
 800a33e:	e0f6      	b.n	800a52e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	2b03      	cmp	r3, #3
 800a346:	d107      	bne.n	800a358 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a348:	4b36      	ldr	r3, [pc, #216]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a350:	2b00      	cmp	r3, #0
 800a352:	d115      	bne.n	800a380 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a354:	2301      	movs	r3, #1
 800a356:	e0ea      	b.n	800a52e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	d107      	bne.n	800a370 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a360:	4b30      	ldr	r3, [pc, #192]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d109      	bne.n	800a380 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a36c:	2301      	movs	r3, #1
 800a36e:	e0de      	b.n	800a52e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a370:	4b2c      	ldr	r3, [pc, #176]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f003 0304 	and.w	r3, r3, #4
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d101      	bne.n	800a380 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a37c:	2301      	movs	r3, #1
 800a37e:	e0d6      	b.n	800a52e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a380:	4b28      	ldr	r3, [pc, #160]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a382:	691b      	ldr	r3, [r3, #16]
 800a384:	f023 0207 	bic.w	r2, r3, #7
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	4925      	ldr	r1, [pc, #148]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a38e:	4313      	orrs	r3, r2
 800a390:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a392:	f7fb ff11 	bl	80061b8 <HAL_GetTick>
 800a396:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a398:	e00a      	b.n	800a3b0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a39a:	f7fb ff0d 	bl	80061b8 <HAL_GetTick>
 800a39e:	4602      	mov	r2, r0
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	1ad3      	subs	r3, r2, r3
 800a3a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d901      	bls.n	800a3b0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a3ac:	2303      	movs	r3, #3
 800a3ae:	e0be      	b.n	800a52e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a3b0:	4b1c      	ldr	r3, [pc, #112]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a3b2:	691b      	ldr	r3, [r3, #16]
 800a3b4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	685b      	ldr	r3, [r3, #4]
 800a3bc:	00db      	lsls	r3, r3, #3
 800a3be:	429a      	cmp	r2, r3
 800a3c0:	d1eb      	bne.n	800a39a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f003 0302 	and.w	r3, r3, #2
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d010      	beq.n	800a3f0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	68da      	ldr	r2, [r3, #12]
 800a3d2:	4b14      	ldr	r3, [pc, #80]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a3d4:	699b      	ldr	r3, [r3, #24]
 800a3d6:	f003 030f 	and.w	r3, r3, #15
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d208      	bcs.n	800a3f0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a3de:	4b11      	ldr	r3, [pc, #68]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a3e0:	699b      	ldr	r3, [r3, #24]
 800a3e2:	f023 020f 	bic.w	r2, r3, #15
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	68db      	ldr	r3, [r3, #12]
 800a3ea:	490e      	ldr	r1, [pc, #56]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a3f0:	4b0b      	ldr	r3, [pc, #44]	; (800a420 <HAL_RCC_ClockConfig+0x240>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f003 030f 	and.w	r3, r3, #15
 800a3f8:	683a      	ldr	r2, [r7, #0]
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d214      	bcs.n	800a428 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a3fe:	4b08      	ldr	r3, [pc, #32]	; (800a420 <HAL_RCC_ClockConfig+0x240>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f023 020f 	bic.w	r2, r3, #15
 800a406:	4906      	ldr	r1, [pc, #24]	; (800a420 <HAL_RCC_ClockConfig+0x240>)
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	4313      	orrs	r3, r2
 800a40c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a40e:	4b04      	ldr	r3, [pc, #16]	; (800a420 <HAL_RCC_ClockConfig+0x240>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f003 030f 	and.w	r3, r3, #15
 800a416:	683a      	ldr	r2, [r7, #0]
 800a418:	429a      	cmp	r2, r3
 800a41a:	d005      	beq.n	800a428 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a41c:	2301      	movs	r3, #1
 800a41e:	e086      	b.n	800a52e <HAL_RCC_ClockConfig+0x34e>
 800a420:	52002000 	.word	0x52002000
 800a424:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f003 0304 	and.w	r3, r3, #4
 800a430:	2b00      	cmp	r3, #0
 800a432:	d010      	beq.n	800a456 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	691a      	ldr	r2, [r3, #16]
 800a438:	4b3f      	ldr	r3, [pc, #252]	; (800a538 <HAL_RCC_ClockConfig+0x358>)
 800a43a:	699b      	ldr	r3, [r3, #24]
 800a43c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a440:	429a      	cmp	r2, r3
 800a442:	d208      	bcs.n	800a456 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a444:	4b3c      	ldr	r3, [pc, #240]	; (800a538 <HAL_RCC_ClockConfig+0x358>)
 800a446:	699b      	ldr	r3, [r3, #24]
 800a448:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	691b      	ldr	r3, [r3, #16]
 800a450:	4939      	ldr	r1, [pc, #228]	; (800a538 <HAL_RCC_ClockConfig+0x358>)
 800a452:	4313      	orrs	r3, r2
 800a454:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f003 0308 	and.w	r3, r3, #8
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d010      	beq.n	800a484 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	695a      	ldr	r2, [r3, #20]
 800a466:	4b34      	ldr	r3, [pc, #208]	; (800a538 <HAL_RCC_ClockConfig+0x358>)
 800a468:	69db      	ldr	r3, [r3, #28]
 800a46a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a46e:	429a      	cmp	r2, r3
 800a470:	d208      	bcs.n	800a484 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a472:	4b31      	ldr	r3, [pc, #196]	; (800a538 <HAL_RCC_ClockConfig+0x358>)
 800a474:	69db      	ldr	r3, [r3, #28]
 800a476:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	695b      	ldr	r3, [r3, #20]
 800a47e:	492e      	ldr	r1, [pc, #184]	; (800a538 <HAL_RCC_ClockConfig+0x358>)
 800a480:	4313      	orrs	r3, r2
 800a482:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f003 0310 	and.w	r3, r3, #16
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d010      	beq.n	800a4b2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	699a      	ldr	r2, [r3, #24]
 800a494:	4b28      	ldr	r3, [pc, #160]	; (800a538 <HAL_RCC_ClockConfig+0x358>)
 800a496:	69db      	ldr	r3, [r3, #28]
 800a498:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d208      	bcs.n	800a4b2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a4a0:	4b25      	ldr	r3, [pc, #148]	; (800a538 <HAL_RCC_ClockConfig+0x358>)
 800a4a2:	69db      	ldr	r3, [r3, #28]
 800a4a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	699b      	ldr	r3, [r3, #24]
 800a4ac:	4922      	ldr	r1, [pc, #136]	; (800a538 <HAL_RCC_ClockConfig+0x358>)
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f003 0320 	and.w	r3, r3, #32
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d010      	beq.n	800a4e0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	69da      	ldr	r2, [r3, #28]
 800a4c2:	4b1d      	ldr	r3, [pc, #116]	; (800a538 <HAL_RCC_ClockConfig+0x358>)
 800a4c4:	6a1b      	ldr	r3, [r3, #32]
 800a4c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d208      	bcs.n	800a4e0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a4ce:	4b1a      	ldr	r3, [pc, #104]	; (800a538 <HAL_RCC_ClockConfig+0x358>)
 800a4d0:	6a1b      	ldr	r3, [r3, #32]
 800a4d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	69db      	ldr	r3, [r3, #28]
 800a4da:	4917      	ldr	r1, [pc, #92]	; (800a538 <HAL_RCC_ClockConfig+0x358>)
 800a4dc:	4313      	orrs	r3, r2
 800a4de:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a4e0:	f000 f834 	bl	800a54c <HAL_RCC_GetSysClockFreq>
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	4b14      	ldr	r3, [pc, #80]	; (800a538 <HAL_RCC_ClockConfig+0x358>)
 800a4e8:	699b      	ldr	r3, [r3, #24]
 800a4ea:	0a1b      	lsrs	r3, r3, #8
 800a4ec:	f003 030f 	and.w	r3, r3, #15
 800a4f0:	4912      	ldr	r1, [pc, #72]	; (800a53c <HAL_RCC_ClockConfig+0x35c>)
 800a4f2:	5ccb      	ldrb	r3, [r1, r3]
 800a4f4:	f003 031f 	and.w	r3, r3, #31
 800a4f8:	fa22 f303 	lsr.w	r3, r2, r3
 800a4fc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a4fe:	4b0e      	ldr	r3, [pc, #56]	; (800a538 <HAL_RCC_ClockConfig+0x358>)
 800a500:	699b      	ldr	r3, [r3, #24]
 800a502:	f003 030f 	and.w	r3, r3, #15
 800a506:	4a0d      	ldr	r2, [pc, #52]	; (800a53c <HAL_RCC_ClockConfig+0x35c>)
 800a508:	5cd3      	ldrb	r3, [r2, r3]
 800a50a:	f003 031f 	and.w	r3, r3, #31
 800a50e:	693a      	ldr	r2, [r7, #16]
 800a510:	fa22 f303 	lsr.w	r3, r2, r3
 800a514:	4a0a      	ldr	r2, [pc, #40]	; (800a540 <HAL_RCC_ClockConfig+0x360>)
 800a516:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a518:	4a0a      	ldr	r2, [pc, #40]	; (800a544 <HAL_RCC_ClockConfig+0x364>)
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a51e:	4b0a      	ldr	r3, [pc, #40]	; (800a548 <HAL_RCC_ClockConfig+0x368>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	4618      	mov	r0, r3
 800a524:	f7fb fdfe 	bl	8006124 <HAL_InitTick>
 800a528:	4603      	mov	r3, r0
 800a52a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a52c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3718      	adds	r7, #24
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
 800a536:	bf00      	nop
 800a538:	58024400 	.word	0x58024400
 800a53c:	080107cc 	.word	0x080107cc
 800a540:	24000058 	.word	0x24000058
 800a544:	24000054 	.word	0x24000054
 800a548:	2400005c 	.word	0x2400005c

0800a54c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b089      	sub	sp, #36	; 0x24
 800a550:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a552:	4bb3      	ldr	r3, [pc, #716]	; (800a820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a554:	691b      	ldr	r3, [r3, #16]
 800a556:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a55a:	2b18      	cmp	r3, #24
 800a55c:	f200 8155 	bhi.w	800a80a <HAL_RCC_GetSysClockFreq+0x2be>
 800a560:	a201      	add	r2, pc, #4	; (adr r2, 800a568 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a566:	bf00      	nop
 800a568:	0800a5cd 	.word	0x0800a5cd
 800a56c:	0800a80b 	.word	0x0800a80b
 800a570:	0800a80b 	.word	0x0800a80b
 800a574:	0800a80b 	.word	0x0800a80b
 800a578:	0800a80b 	.word	0x0800a80b
 800a57c:	0800a80b 	.word	0x0800a80b
 800a580:	0800a80b 	.word	0x0800a80b
 800a584:	0800a80b 	.word	0x0800a80b
 800a588:	0800a5f3 	.word	0x0800a5f3
 800a58c:	0800a80b 	.word	0x0800a80b
 800a590:	0800a80b 	.word	0x0800a80b
 800a594:	0800a80b 	.word	0x0800a80b
 800a598:	0800a80b 	.word	0x0800a80b
 800a59c:	0800a80b 	.word	0x0800a80b
 800a5a0:	0800a80b 	.word	0x0800a80b
 800a5a4:	0800a80b 	.word	0x0800a80b
 800a5a8:	0800a5f9 	.word	0x0800a5f9
 800a5ac:	0800a80b 	.word	0x0800a80b
 800a5b0:	0800a80b 	.word	0x0800a80b
 800a5b4:	0800a80b 	.word	0x0800a80b
 800a5b8:	0800a80b 	.word	0x0800a80b
 800a5bc:	0800a80b 	.word	0x0800a80b
 800a5c0:	0800a80b 	.word	0x0800a80b
 800a5c4:	0800a80b 	.word	0x0800a80b
 800a5c8:	0800a5ff 	.word	0x0800a5ff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a5cc:	4b94      	ldr	r3, [pc, #592]	; (800a820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f003 0320 	and.w	r3, r3, #32
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d009      	beq.n	800a5ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5d8:	4b91      	ldr	r3, [pc, #580]	; (800a820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	08db      	lsrs	r3, r3, #3
 800a5de:	f003 0303 	and.w	r3, r3, #3
 800a5e2:	4a90      	ldr	r2, [pc, #576]	; (800a824 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a5e4:	fa22 f303 	lsr.w	r3, r2, r3
 800a5e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a5ea:	e111      	b.n	800a810 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a5ec:	4b8d      	ldr	r3, [pc, #564]	; (800a824 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a5ee:	61bb      	str	r3, [r7, #24]
      break;
 800a5f0:	e10e      	b.n	800a810 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a5f2:	4b8d      	ldr	r3, [pc, #564]	; (800a828 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a5f4:	61bb      	str	r3, [r7, #24]
      break;
 800a5f6:	e10b      	b.n	800a810 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a5f8:	4b8c      	ldr	r3, [pc, #560]	; (800a82c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a5fa:	61bb      	str	r3, [r7, #24]
      break;
 800a5fc:	e108      	b.n	800a810 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a5fe:	4b88      	ldr	r3, [pc, #544]	; (800a820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a602:	f003 0303 	and.w	r3, r3, #3
 800a606:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a608:	4b85      	ldr	r3, [pc, #532]	; (800a820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a60a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a60c:	091b      	lsrs	r3, r3, #4
 800a60e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a612:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a614:	4b82      	ldr	r3, [pc, #520]	; (800a820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a618:	f003 0301 	and.w	r3, r3, #1
 800a61c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a61e:	4b80      	ldr	r3, [pc, #512]	; (800a820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a622:	08db      	lsrs	r3, r3, #3
 800a624:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a628:	68fa      	ldr	r2, [r7, #12]
 800a62a:	fb02 f303 	mul.w	r3, r2, r3
 800a62e:	ee07 3a90 	vmov	s15, r3
 800a632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a636:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	f000 80e1 	beq.w	800a804 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	2b02      	cmp	r3, #2
 800a646:	f000 8083 	beq.w	800a750 <HAL_RCC_GetSysClockFreq+0x204>
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	2b02      	cmp	r3, #2
 800a64e:	f200 80a1 	bhi.w	800a794 <HAL_RCC_GetSysClockFreq+0x248>
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d003      	beq.n	800a660 <HAL_RCC_GetSysClockFreq+0x114>
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	2b01      	cmp	r3, #1
 800a65c:	d056      	beq.n	800a70c <HAL_RCC_GetSysClockFreq+0x1c0>
 800a65e:	e099      	b.n	800a794 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a660:	4b6f      	ldr	r3, [pc, #444]	; (800a820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f003 0320 	and.w	r3, r3, #32
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d02d      	beq.n	800a6c8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a66c:	4b6c      	ldr	r3, [pc, #432]	; (800a820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	08db      	lsrs	r3, r3, #3
 800a672:	f003 0303 	and.w	r3, r3, #3
 800a676:	4a6b      	ldr	r2, [pc, #428]	; (800a824 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a678:	fa22 f303 	lsr.w	r3, r2, r3
 800a67c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	ee07 3a90 	vmov	s15, r3
 800a684:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	ee07 3a90 	vmov	s15, r3
 800a68e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a696:	4b62      	ldr	r3, [pc, #392]	; (800a820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a69a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a69e:	ee07 3a90 	vmov	s15, r3
 800a6a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6a6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a6aa:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a830 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a6ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6c2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a6c6:	e087      	b.n	800a7d8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	ee07 3a90 	vmov	s15, r3
 800a6ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6d2:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a834 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a6d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6da:	4b51      	ldr	r3, [pc, #324]	; (800a820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6e2:	ee07 3a90 	vmov	s15, r3
 800a6e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6ea:	ed97 6a02 	vldr	s12, [r7, #8]
 800a6ee:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a830 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a6f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a702:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a706:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a70a:	e065      	b.n	800a7d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	ee07 3a90 	vmov	s15, r3
 800a712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a716:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a838 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a71a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a71e:	4b40      	ldr	r3, [pc, #256]	; (800a820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a726:	ee07 3a90 	vmov	s15, r3
 800a72a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a72e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a732:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a830 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a73a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a73e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a74a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a74e:	e043      	b.n	800a7d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	ee07 3a90 	vmov	s15, r3
 800a756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a75a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a83c <HAL_RCC_GetSysClockFreq+0x2f0>
 800a75e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a762:	4b2f      	ldr	r3, [pc, #188]	; (800a820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a76a:	ee07 3a90 	vmov	s15, r3
 800a76e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a772:	ed97 6a02 	vldr	s12, [r7, #8]
 800a776:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a830 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a77a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a77e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a782:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a78a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a78e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a792:	e021      	b.n	800a7d8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	ee07 3a90 	vmov	s15, r3
 800a79a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a79e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a838 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a7a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7a6:	4b1e      	ldr	r3, [pc, #120]	; (800a820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7ae:	ee07 3a90 	vmov	s15, r3
 800a7b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7b6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a7ba:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a830 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a7be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a7d6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a7d8:	4b11      	ldr	r3, [pc, #68]	; (800a820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7dc:	0a5b      	lsrs	r3, r3, #9
 800a7de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7e2:	3301      	adds	r3, #1
 800a7e4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	ee07 3a90 	vmov	s15, r3
 800a7ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a7f0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a7f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7fc:	ee17 3a90 	vmov	r3, s15
 800a800:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a802:	e005      	b.n	800a810 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a804:	2300      	movs	r3, #0
 800a806:	61bb      	str	r3, [r7, #24]
      break;
 800a808:	e002      	b.n	800a810 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a80a:	4b07      	ldr	r3, [pc, #28]	; (800a828 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a80c:	61bb      	str	r3, [r7, #24]
      break;
 800a80e:	bf00      	nop
  }

  return sysclockfreq;
 800a810:	69bb      	ldr	r3, [r7, #24]
}
 800a812:	4618      	mov	r0, r3
 800a814:	3724      	adds	r7, #36	; 0x24
 800a816:	46bd      	mov	sp, r7
 800a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81c:	4770      	bx	lr
 800a81e:	bf00      	nop
 800a820:	58024400 	.word	0x58024400
 800a824:	03d09000 	.word	0x03d09000
 800a828:	003d0900 	.word	0x003d0900
 800a82c:	007a1200 	.word	0x007a1200
 800a830:	46000000 	.word	0x46000000
 800a834:	4c742400 	.word	0x4c742400
 800a838:	4a742400 	.word	0x4a742400
 800a83c:	4af42400 	.word	0x4af42400

0800a840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b082      	sub	sp, #8
 800a844:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a846:	f7ff fe81 	bl	800a54c <HAL_RCC_GetSysClockFreq>
 800a84a:	4602      	mov	r2, r0
 800a84c:	4b10      	ldr	r3, [pc, #64]	; (800a890 <HAL_RCC_GetHCLKFreq+0x50>)
 800a84e:	699b      	ldr	r3, [r3, #24]
 800a850:	0a1b      	lsrs	r3, r3, #8
 800a852:	f003 030f 	and.w	r3, r3, #15
 800a856:	490f      	ldr	r1, [pc, #60]	; (800a894 <HAL_RCC_GetHCLKFreq+0x54>)
 800a858:	5ccb      	ldrb	r3, [r1, r3]
 800a85a:	f003 031f 	and.w	r3, r3, #31
 800a85e:	fa22 f303 	lsr.w	r3, r2, r3
 800a862:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a864:	4b0a      	ldr	r3, [pc, #40]	; (800a890 <HAL_RCC_GetHCLKFreq+0x50>)
 800a866:	699b      	ldr	r3, [r3, #24]
 800a868:	f003 030f 	and.w	r3, r3, #15
 800a86c:	4a09      	ldr	r2, [pc, #36]	; (800a894 <HAL_RCC_GetHCLKFreq+0x54>)
 800a86e:	5cd3      	ldrb	r3, [r2, r3]
 800a870:	f003 031f 	and.w	r3, r3, #31
 800a874:	687a      	ldr	r2, [r7, #4]
 800a876:	fa22 f303 	lsr.w	r3, r2, r3
 800a87a:	4a07      	ldr	r2, [pc, #28]	; (800a898 <HAL_RCC_GetHCLKFreq+0x58>)
 800a87c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a87e:	4a07      	ldr	r2, [pc, #28]	; (800a89c <HAL_RCC_GetHCLKFreq+0x5c>)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a884:	4b04      	ldr	r3, [pc, #16]	; (800a898 <HAL_RCC_GetHCLKFreq+0x58>)
 800a886:	681b      	ldr	r3, [r3, #0]
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3708      	adds	r7, #8
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	58024400 	.word	0x58024400
 800a894:	080107cc 	.word	0x080107cc
 800a898:	24000058 	.word	0x24000058
 800a89c:	24000054 	.word	0x24000054

0800a8a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a8a4:	f7ff ffcc 	bl	800a840 <HAL_RCC_GetHCLKFreq>
 800a8a8:	4602      	mov	r2, r0
 800a8aa:	4b06      	ldr	r3, [pc, #24]	; (800a8c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a8ac:	69db      	ldr	r3, [r3, #28]
 800a8ae:	091b      	lsrs	r3, r3, #4
 800a8b0:	f003 0307 	and.w	r3, r3, #7
 800a8b4:	4904      	ldr	r1, [pc, #16]	; (800a8c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a8b6:	5ccb      	ldrb	r3, [r1, r3]
 800a8b8:	f003 031f 	and.w	r3, r3, #31
 800a8bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	bd80      	pop	{r7, pc}
 800a8c4:	58024400 	.word	0x58024400
 800a8c8:	080107cc 	.word	0x080107cc

0800a8cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a8d0:	f7ff ffb6 	bl	800a840 <HAL_RCC_GetHCLKFreq>
 800a8d4:	4602      	mov	r2, r0
 800a8d6:	4b06      	ldr	r3, [pc, #24]	; (800a8f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a8d8:	69db      	ldr	r3, [r3, #28]
 800a8da:	0a1b      	lsrs	r3, r3, #8
 800a8dc:	f003 0307 	and.w	r3, r3, #7
 800a8e0:	4904      	ldr	r1, [pc, #16]	; (800a8f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a8e2:	5ccb      	ldrb	r3, [r1, r3]
 800a8e4:	f003 031f 	and.w	r3, r3, #31
 800a8e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	bd80      	pop	{r7, pc}
 800a8f0:	58024400 	.word	0x58024400
 800a8f4:	080107cc 	.word	0x080107cc

0800a8f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a8f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a8fc:	b0c6      	sub	sp, #280	; 0x118
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a904:	2300      	movs	r3, #0
 800a906:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a90a:	2300      	movs	r3, #0
 800a90c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a910:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a918:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a91c:	2500      	movs	r5, #0
 800a91e:	ea54 0305 	orrs.w	r3, r4, r5
 800a922:	d049      	beq.n	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a924:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a928:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a92a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a92e:	d02f      	beq.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a930:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a934:	d828      	bhi.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a936:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a93a:	d01a      	beq.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a93c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a940:	d822      	bhi.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a942:	2b00      	cmp	r3, #0
 800a944:	d003      	beq.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a946:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a94a:	d007      	beq.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a94c:	e01c      	b.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a94e:	4bab      	ldr	r3, [pc, #684]	; (800abfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a952:	4aaa      	ldr	r2, [pc, #680]	; (800abfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a958:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a95a:	e01a      	b.n	800a992 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a95c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a960:	3308      	adds	r3, #8
 800a962:	2102      	movs	r1, #2
 800a964:	4618      	mov	r0, r3
 800a966:	f001 fc25 	bl	800c1b4 <RCCEx_PLL2_Config>
 800a96a:	4603      	mov	r3, r0
 800a96c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a970:	e00f      	b.n	800a992 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a976:	3328      	adds	r3, #40	; 0x28
 800a978:	2102      	movs	r1, #2
 800a97a:	4618      	mov	r0, r3
 800a97c:	f001 fccc 	bl	800c318 <RCCEx_PLL3_Config>
 800a980:	4603      	mov	r3, r0
 800a982:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a986:	e004      	b.n	800a992 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a988:	2301      	movs	r3, #1
 800a98a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a98e:	e000      	b.n	800a992 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a990:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a992:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a996:	2b00      	cmp	r3, #0
 800a998:	d10a      	bne.n	800a9b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a99a:	4b98      	ldr	r3, [pc, #608]	; (800abfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a99c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a99e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a9a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9a8:	4a94      	ldr	r2, [pc, #592]	; (800abfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a9aa:	430b      	orrs	r3, r1
 800a9ac:	6513      	str	r3, [r2, #80]	; 0x50
 800a9ae:	e003      	b.n	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a9b4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a9b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800a9c4:	f04f 0900 	mov.w	r9, #0
 800a9c8:	ea58 0309 	orrs.w	r3, r8, r9
 800a9cc:	d047      	beq.n	800aa5e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a9ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9d4:	2b04      	cmp	r3, #4
 800a9d6:	d82a      	bhi.n	800aa2e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a9d8:	a201      	add	r2, pc, #4	; (adr r2, 800a9e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a9da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9de:	bf00      	nop
 800a9e0:	0800a9f5 	.word	0x0800a9f5
 800a9e4:	0800aa03 	.word	0x0800aa03
 800a9e8:	0800aa19 	.word	0x0800aa19
 800a9ec:	0800aa37 	.word	0x0800aa37
 800a9f0:	0800aa37 	.word	0x0800aa37
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9f4:	4b81      	ldr	r3, [pc, #516]	; (800abfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f8:	4a80      	ldr	r2, [pc, #512]	; (800abfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a9fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa00:	e01a      	b.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa06:	3308      	adds	r3, #8
 800aa08:	2100      	movs	r1, #0
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f001 fbd2 	bl	800c1b4 <RCCEx_PLL2_Config>
 800aa10:	4603      	mov	r3, r0
 800aa12:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa16:	e00f      	b.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa1c:	3328      	adds	r3, #40	; 0x28
 800aa1e:	2100      	movs	r1, #0
 800aa20:	4618      	mov	r0, r3
 800aa22:	f001 fc79 	bl	800c318 <RCCEx_PLL3_Config>
 800aa26:	4603      	mov	r3, r0
 800aa28:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa2c:	e004      	b.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa2e:	2301      	movs	r3, #1
 800aa30:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aa34:	e000      	b.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800aa36:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa38:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d10a      	bne.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800aa40:	4b6e      	ldr	r3, [pc, #440]	; (800abfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa44:	f023 0107 	bic.w	r1, r3, #7
 800aa48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa4e:	4a6b      	ldr	r2, [pc, #428]	; (800abfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa50:	430b      	orrs	r3, r1
 800aa52:	6513      	str	r3, [r2, #80]	; 0x50
 800aa54:	e003      	b.n	800aa5e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa56:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa5a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800aa5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa66:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800aa6a:	f04f 0b00 	mov.w	fp, #0
 800aa6e:	ea5a 030b 	orrs.w	r3, sl, fp
 800aa72:	d05b      	beq.n	800ab2c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800aa74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aa7c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800aa80:	d03b      	beq.n	800aafa <HAL_RCCEx_PeriphCLKConfig+0x202>
 800aa82:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800aa86:	d834      	bhi.n	800aaf2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800aa88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aa8c:	d037      	beq.n	800aafe <HAL_RCCEx_PeriphCLKConfig+0x206>
 800aa8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aa92:	d82e      	bhi.n	800aaf2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800aa94:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aa98:	d033      	beq.n	800ab02 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800aa9a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aa9e:	d828      	bhi.n	800aaf2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800aaa0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aaa4:	d01a      	beq.n	800aadc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800aaa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aaaa:	d822      	bhi.n	800aaf2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d003      	beq.n	800aab8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800aab0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aab4:	d007      	beq.n	800aac6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800aab6:	e01c      	b.n	800aaf2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aab8:	4b50      	ldr	r3, [pc, #320]	; (800abfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aaba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aabc:	4a4f      	ldr	r2, [pc, #316]	; (800abfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aabe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aac2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aac4:	e01e      	b.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaca:	3308      	adds	r3, #8
 800aacc:	2100      	movs	r1, #0
 800aace:	4618      	mov	r0, r3
 800aad0:	f001 fb70 	bl	800c1b4 <RCCEx_PLL2_Config>
 800aad4:	4603      	mov	r3, r0
 800aad6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800aada:	e013      	b.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aadc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aae0:	3328      	adds	r3, #40	; 0x28
 800aae2:	2100      	movs	r1, #0
 800aae4:	4618      	mov	r0, r3
 800aae6:	f001 fc17 	bl	800c318 <RCCEx_PLL3_Config>
 800aaea:	4603      	mov	r3, r0
 800aaec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aaf0:	e008      	b.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aaf8:	e004      	b.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800aafa:	bf00      	nop
 800aafc:	e002      	b.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800aafe:	bf00      	nop
 800ab00:	e000      	b.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ab02:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d10b      	bne.n	800ab24 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ab0c:	4b3b      	ldr	r3, [pc, #236]	; (800abfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ab0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab10:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800ab14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ab1c:	4a37      	ldr	r2, [pc, #220]	; (800abfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ab1e:	430b      	orrs	r3, r1
 800ab20:	6593      	str	r3, [r2, #88]	; 0x58
 800ab22:	e003      	b.n	800ab2c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab24:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab28:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ab2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab34:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800ab38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ab42:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800ab46:	460b      	mov	r3, r1
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	d05d      	beq.n	800ac08 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800ab4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab50:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ab54:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800ab58:	d03b      	beq.n	800abd2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800ab5a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800ab5e:	d834      	bhi.n	800abca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ab60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ab64:	d037      	beq.n	800abd6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800ab66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ab6a:	d82e      	bhi.n	800abca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ab6c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ab70:	d033      	beq.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800ab72:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ab76:	d828      	bhi.n	800abca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ab78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab7c:	d01a      	beq.n	800abb4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800ab7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab82:	d822      	bhi.n	800abca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d003      	beq.n	800ab90 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800ab88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ab8c:	d007      	beq.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800ab8e:	e01c      	b.n	800abca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab90:	4b1a      	ldr	r3, [pc, #104]	; (800abfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ab92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab94:	4a19      	ldr	r2, [pc, #100]	; (800abfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ab96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ab9c:	e01e      	b.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aba2:	3308      	adds	r3, #8
 800aba4:	2100      	movs	r1, #0
 800aba6:	4618      	mov	r0, r3
 800aba8:	f001 fb04 	bl	800c1b4 <RCCEx_PLL2_Config>
 800abac:	4603      	mov	r3, r0
 800abae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800abb2:	e013      	b.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800abb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abb8:	3328      	adds	r3, #40	; 0x28
 800abba:	2100      	movs	r1, #0
 800abbc:	4618      	mov	r0, r3
 800abbe:	f001 fbab 	bl	800c318 <RCCEx_PLL3_Config>
 800abc2:	4603      	mov	r3, r0
 800abc4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800abc8:	e008      	b.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800abca:	2301      	movs	r3, #1
 800abcc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800abd0:	e004      	b.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800abd2:	bf00      	nop
 800abd4:	e002      	b.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800abd6:	bf00      	nop
 800abd8:	e000      	b.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800abda:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abdc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d10d      	bne.n	800ac00 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800abe4:	4b05      	ldr	r3, [pc, #20]	; (800abfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800abe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abe8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800abec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abf0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800abf4:	4a01      	ldr	r2, [pc, #4]	; (800abfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800abf6:	430b      	orrs	r3, r1
 800abf8:	6593      	str	r3, [r2, #88]	; 0x58
 800abfa:	e005      	b.n	800ac08 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800abfc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac04:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800ac08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac10:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800ac14:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ac18:	2300      	movs	r3, #0
 800ac1a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ac1e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800ac22:	460b      	mov	r3, r1
 800ac24:	4313      	orrs	r3, r2
 800ac26:	d03a      	beq.n	800ac9e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800ac28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac2e:	2b30      	cmp	r3, #48	; 0x30
 800ac30:	d01f      	beq.n	800ac72 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800ac32:	2b30      	cmp	r3, #48	; 0x30
 800ac34:	d819      	bhi.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800ac36:	2b20      	cmp	r3, #32
 800ac38:	d00c      	beq.n	800ac54 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800ac3a:	2b20      	cmp	r3, #32
 800ac3c:	d815      	bhi.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d019      	beq.n	800ac76 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800ac42:	2b10      	cmp	r3, #16
 800ac44:	d111      	bne.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac46:	4baa      	ldr	r3, [pc, #680]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac4a:	4aa9      	ldr	r2, [pc, #676]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800ac52:	e011      	b.n	800ac78 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ac54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac58:	3308      	adds	r3, #8
 800ac5a:	2102      	movs	r1, #2
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f001 faa9 	bl	800c1b4 <RCCEx_PLL2_Config>
 800ac62:	4603      	mov	r3, r0
 800ac64:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800ac68:	e006      	b.n	800ac78 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ac70:	e002      	b.n	800ac78 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800ac72:	bf00      	nop
 800ac74:	e000      	b.n	800ac78 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800ac76:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac78:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d10a      	bne.n	800ac96 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800ac80:	4b9b      	ldr	r3, [pc, #620]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac84:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800ac88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac8e:	4a98      	ldr	r2, [pc, #608]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac90:	430b      	orrs	r3, r1
 800ac92:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ac94:	e003      	b.n	800ac9e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac96:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac9a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ac9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800acaa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800acae:	2300      	movs	r3, #0
 800acb0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800acb4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800acb8:	460b      	mov	r3, r1
 800acba:	4313      	orrs	r3, r2
 800acbc:	d051      	beq.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800acbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800acc8:	d035      	beq.n	800ad36 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800acca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800acce:	d82e      	bhi.n	800ad2e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800acd0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800acd4:	d031      	beq.n	800ad3a <HAL_RCCEx_PeriphCLKConfig+0x442>
 800acd6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800acda:	d828      	bhi.n	800ad2e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800acdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ace0:	d01a      	beq.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800ace2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ace6:	d822      	bhi.n	800ad2e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d003      	beq.n	800acf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800acec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acf0:	d007      	beq.n	800ad02 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800acf2:	e01c      	b.n	800ad2e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acf4:	4b7e      	ldr	r3, [pc, #504]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800acf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acf8:	4a7d      	ldr	r2, [pc, #500]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800acfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ad00:	e01c      	b.n	800ad3c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ad02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad06:	3308      	adds	r3, #8
 800ad08:	2100      	movs	r1, #0
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f001 fa52 	bl	800c1b4 <RCCEx_PLL2_Config>
 800ad10:	4603      	mov	r3, r0
 800ad12:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ad16:	e011      	b.n	800ad3c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ad18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad1c:	3328      	adds	r3, #40	; 0x28
 800ad1e:	2100      	movs	r1, #0
 800ad20:	4618      	mov	r0, r3
 800ad22:	f001 faf9 	bl	800c318 <RCCEx_PLL3_Config>
 800ad26:	4603      	mov	r3, r0
 800ad28:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ad2c:	e006      	b.n	800ad3c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad2e:	2301      	movs	r3, #1
 800ad30:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ad34:	e002      	b.n	800ad3c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800ad36:	bf00      	nop
 800ad38:	e000      	b.n	800ad3c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800ad3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d10a      	bne.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ad44:	4b6a      	ldr	r3, [pc, #424]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ad46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad48:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800ad4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad52:	4a67      	ldr	r2, [pc, #412]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ad54:	430b      	orrs	r3, r1
 800ad56:	6513      	str	r3, [r2, #80]	; 0x50
 800ad58:	e003      	b.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad5a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad5e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ad62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad6a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800ad6e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ad72:	2300      	movs	r3, #0
 800ad74:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ad78:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800ad7c:	460b      	mov	r3, r1
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	d053      	beq.n	800ae2a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ad82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ad8c:	d033      	beq.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800ad8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ad92:	d82c      	bhi.n	800adee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ad94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ad98:	d02f      	beq.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0x502>
 800ad9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ad9e:	d826      	bhi.n	800adee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ada0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ada4:	d02b      	beq.n	800adfe <HAL_RCCEx_PeriphCLKConfig+0x506>
 800ada6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800adaa:	d820      	bhi.n	800adee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800adac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800adb0:	d012      	beq.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800adb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800adb6:	d81a      	bhi.n	800adee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d022      	beq.n	800ae02 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800adbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adc0:	d115      	bne.n	800adee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800adc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adc6:	3308      	adds	r3, #8
 800adc8:	2101      	movs	r1, #1
 800adca:	4618      	mov	r0, r3
 800adcc:	f001 f9f2 	bl	800c1b4 <RCCEx_PLL2_Config>
 800add0:	4603      	mov	r3, r0
 800add2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800add6:	e015      	b.n	800ae04 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800add8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800addc:	3328      	adds	r3, #40	; 0x28
 800adde:	2101      	movs	r1, #1
 800ade0:	4618      	mov	r0, r3
 800ade2:	f001 fa99 	bl	800c318 <RCCEx_PLL3_Config>
 800ade6:	4603      	mov	r3, r0
 800ade8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800adec:	e00a      	b.n	800ae04 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800adee:	2301      	movs	r3, #1
 800adf0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800adf4:	e006      	b.n	800ae04 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800adf6:	bf00      	nop
 800adf8:	e004      	b.n	800ae04 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800adfa:	bf00      	nop
 800adfc:	e002      	b.n	800ae04 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800adfe:	bf00      	nop
 800ae00:	e000      	b.n	800ae04 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ae02:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d10a      	bne.n	800ae22 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ae0c:	4b38      	ldr	r3, [pc, #224]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ae0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae10:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800ae14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae1a:	4a35      	ldr	r2, [pc, #212]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ae1c:	430b      	orrs	r3, r1
 800ae1e:	6513      	str	r3, [r2, #80]	; 0x50
 800ae20:	e003      	b.n	800ae2a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae22:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae26:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ae2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae32:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800ae36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ae40:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ae44:	460b      	mov	r3, r1
 800ae46:	4313      	orrs	r3, r2
 800ae48:	d058      	beq.n	800aefc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800ae4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ae52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ae56:	d033      	beq.n	800aec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800ae58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ae5c:	d82c      	bhi.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ae5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae62:	d02f      	beq.n	800aec4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800ae64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae68:	d826      	bhi.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ae6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ae6e:	d02b      	beq.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800ae70:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ae74:	d820      	bhi.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ae76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae7a:	d012      	beq.n	800aea2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800ae7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae80:	d81a      	bhi.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d022      	beq.n	800aecc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800ae86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae8a:	d115      	bne.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae90:	3308      	adds	r3, #8
 800ae92:	2101      	movs	r1, #1
 800ae94:	4618      	mov	r0, r3
 800ae96:	f001 f98d 	bl	800c1b4 <RCCEx_PLL2_Config>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800aea0:	e015      	b.n	800aece <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aea6:	3328      	adds	r3, #40	; 0x28
 800aea8:	2101      	movs	r1, #1
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f001 fa34 	bl	800c318 <RCCEx_PLL3_Config>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800aeb6:	e00a      	b.n	800aece <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800aeb8:	2301      	movs	r3, #1
 800aeba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aebe:	e006      	b.n	800aece <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800aec0:	bf00      	nop
 800aec2:	e004      	b.n	800aece <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800aec4:	bf00      	nop
 800aec6:	e002      	b.n	800aece <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800aec8:	bf00      	nop
 800aeca:	e000      	b.n	800aece <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800aecc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aece:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d10e      	bne.n	800aef4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800aed6:	4b06      	ldr	r3, [pc, #24]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aeda:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800aede:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aee2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800aee6:	4a02      	ldr	r2, [pc, #8]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aee8:	430b      	orrs	r3, r1
 800aeea:	6593      	str	r3, [r2, #88]	; 0x58
 800aeec:	e006      	b.n	800aefc <HAL_RCCEx_PeriphCLKConfig+0x604>
 800aeee:	bf00      	nop
 800aef0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aef4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aef8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800aefc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af04:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800af08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800af0c:	2300      	movs	r3, #0
 800af0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800af12:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800af16:	460b      	mov	r3, r1
 800af18:	4313      	orrs	r3, r2
 800af1a:	d037      	beq.n	800af8c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800af1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af26:	d00e      	beq.n	800af46 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800af28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af2c:	d816      	bhi.n	800af5c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d018      	beq.n	800af64 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800af32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af36:	d111      	bne.n	800af5c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af38:	4bc4      	ldr	r3, [pc, #784]	; (800b24c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af3c:	4ac3      	ldr	r2, [pc, #780]	; (800b24c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800af44:	e00f      	b.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800af46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af4a:	3308      	adds	r3, #8
 800af4c:	2101      	movs	r1, #1
 800af4e:	4618      	mov	r0, r3
 800af50:	f001 f930 	bl	800c1b4 <RCCEx_PLL2_Config>
 800af54:	4603      	mov	r3, r0
 800af56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800af5a:	e004      	b.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af5c:	2301      	movs	r3, #1
 800af5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800af62:	e000      	b.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800af64:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af66:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d10a      	bne.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800af6e:	4bb7      	ldr	r3, [pc, #732]	; (800b24c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af72:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800af76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af7c:	4ab3      	ldr	r2, [pc, #716]	; (800b24c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af7e:	430b      	orrs	r3, r1
 800af80:	6513      	str	r3, [r2, #80]	; 0x50
 800af82:	e003      	b.n	800af8c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af88:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800af8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af94:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800af98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800af9c:	2300      	movs	r3, #0
 800af9e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800afa2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800afa6:	460b      	mov	r3, r1
 800afa8:	4313      	orrs	r3, r2
 800afaa:	d039      	beq.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800afac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afb2:	2b03      	cmp	r3, #3
 800afb4:	d81c      	bhi.n	800aff0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800afb6:	a201      	add	r2, pc, #4	; (adr r2, 800afbc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800afb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afbc:	0800aff9 	.word	0x0800aff9
 800afc0:	0800afcd 	.word	0x0800afcd
 800afc4:	0800afdb 	.word	0x0800afdb
 800afc8:	0800aff9 	.word	0x0800aff9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afcc:	4b9f      	ldr	r3, [pc, #636]	; (800b24c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afd0:	4a9e      	ldr	r2, [pc, #632]	; (800b24c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800afd8:	e00f      	b.n	800affa <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800afda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afde:	3308      	adds	r3, #8
 800afe0:	2102      	movs	r1, #2
 800afe2:	4618      	mov	r0, r3
 800afe4:	f001 f8e6 	bl	800c1b4 <RCCEx_PLL2_Config>
 800afe8:	4603      	mov	r3, r0
 800afea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800afee:	e004      	b.n	800affa <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800aff0:	2301      	movs	r3, #1
 800aff2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aff6:	e000      	b.n	800affa <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800aff8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800affa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800affe:	2b00      	cmp	r3, #0
 800b000:	d10a      	bne.n	800b018 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b002:	4b92      	ldr	r3, [pc, #584]	; (800b24c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b006:	f023 0103 	bic.w	r1, r3, #3
 800b00a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b00e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b010:	4a8e      	ldr	r2, [pc, #568]	; (800b24c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b012:	430b      	orrs	r3, r1
 800b014:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b016:	e003      	b.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b018:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b01c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b020:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b028:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b02c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b030:	2300      	movs	r3, #0
 800b032:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b036:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b03a:	460b      	mov	r3, r1
 800b03c:	4313      	orrs	r3, r2
 800b03e:	f000 8099 	beq.w	800b174 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b042:	4b83      	ldr	r3, [pc, #524]	; (800b250 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4a82      	ldr	r2, [pc, #520]	; (800b250 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b04c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b04e:	f7fb f8b3 	bl	80061b8 <HAL_GetTick>
 800b052:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b056:	e00b      	b.n	800b070 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b058:	f7fb f8ae 	bl	80061b8 <HAL_GetTick>
 800b05c:	4602      	mov	r2, r0
 800b05e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b062:	1ad3      	subs	r3, r2, r3
 800b064:	2b64      	cmp	r3, #100	; 0x64
 800b066:	d903      	bls.n	800b070 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800b068:	2303      	movs	r3, #3
 800b06a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b06e:	e005      	b.n	800b07c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b070:	4b77      	ldr	r3, [pc, #476]	; (800b250 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d0ed      	beq.n	800b058 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800b07c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b080:	2b00      	cmp	r3, #0
 800b082:	d173      	bne.n	800b16c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b084:	4b71      	ldr	r3, [pc, #452]	; (800b24c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b086:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b088:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b08c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b090:	4053      	eors	r3, r2
 800b092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b096:	2b00      	cmp	r3, #0
 800b098:	d015      	beq.n	800b0c6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b09a:	4b6c      	ldr	r3, [pc, #432]	; (800b24c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b09c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b09e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b0a2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b0a6:	4b69      	ldr	r3, [pc, #420]	; (800b24c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0aa:	4a68      	ldr	r2, [pc, #416]	; (800b24c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b0b0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b0b2:	4b66      	ldr	r3, [pc, #408]	; (800b24c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0b6:	4a65      	ldr	r2, [pc, #404]	; (800b24c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b0bc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b0be:	4a63      	ldr	r2, [pc, #396]	; (800b24c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b0c4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b0c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b0ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0d2:	d118      	bne.n	800b106 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0d4:	f7fb f870 	bl	80061b8 <HAL_GetTick>
 800b0d8:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b0dc:	e00d      	b.n	800b0fa <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b0de:	f7fb f86b 	bl	80061b8 <HAL_GetTick>
 800b0e2:	4602      	mov	r2, r0
 800b0e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b0e8:	1ad2      	subs	r2, r2, r3
 800b0ea:	f241 3388 	movw	r3, #5000	; 0x1388
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d903      	bls.n	800b0fa <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800b0f2:	2303      	movs	r3, #3
 800b0f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800b0f8:	e005      	b.n	800b106 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b0fa:	4b54      	ldr	r3, [pc, #336]	; (800b24c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0fe:	f003 0302 	and.w	r3, r3, #2
 800b102:	2b00      	cmp	r3, #0
 800b104:	d0eb      	beq.n	800b0de <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800b106:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d129      	bne.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b10e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b112:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b11a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b11e:	d10e      	bne.n	800b13e <HAL_RCCEx_PeriphCLKConfig+0x846>
 800b120:	4b4a      	ldr	r3, [pc, #296]	; (800b24c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b122:	691b      	ldr	r3, [r3, #16]
 800b124:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b128:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b12c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b130:	091a      	lsrs	r2, r3, #4
 800b132:	4b48      	ldr	r3, [pc, #288]	; (800b254 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800b134:	4013      	ands	r3, r2
 800b136:	4a45      	ldr	r2, [pc, #276]	; (800b24c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b138:	430b      	orrs	r3, r1
 800b13a:	6113      	str	r3, [r2, #16]
 800b13c:	e005      	b.n	800b14a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800b13e:	4b43      	ldr	r3, [pc, #268]	; (800b24c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b140:	691b      	ldr	r3, [r3, #16]
 800b142:	4a42      	ldr	r2, [pc, #264]	; (800b24c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b144:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b148:	6113      	str	r3, [r2, #16]
 800b14a:	4b40      	ldr	r3, [pc, #256]	; (800b24c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b14c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b14e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b152:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b156:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b15a:	4a3c      	ldr	r2, [pc, #240]	; (800b24c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b15c:	430b      	orrs	r3, r1
 800b15e:	6713      	str	r3, [r2, #112]	; 0x70
 800b160:	e008      	b.n	800b174 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b162:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b166:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800b16a:	e003      	b.n	800b174 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b16c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b170:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b174:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b17c:	f002 0301 	and.w	r3, r2, #1
 800b180:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b184:	2300      	movs	r3, #0
 800b186:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b18a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b18e:	460b      	mov	r3, r1
 800b190:	4313      	orrs	r3, r2
 800b192:	f000 808f 	beq.w	800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b196:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b19a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b19c:	2b28      	cmp	r3, #40	; 0x28
 800b19e:	d871      	bhi.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800b1a0:	a201      	add	r2, pc, #4	; (adr r2, 800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800b1a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1a6:	bf00      	nop
 800b1a8:	0800b28d 	.word	0x0800b28d
 800b1ac:	0800b285 	.word	0x0800b285
 800b1b0:	0800b285 	.word	0x0800b285
 800b1b4:	0800b285 	.word	0x0800b285
 800b1b8:	0800b285 	.word	0x0800b285
 800b1bc:	0800b285 	.word	0x0800b285
 800b1c0:	0800b285 	.word	0x0800b285
 800b1c4:	0800b285 	.word	0x0800b285
 800b1c8:	0800b259 	.word	0x0800b259
 800b1cc:	0800b285 	.word	0x0800b285
 800b1d0:	0800b285 	.word	0x0800b285
 800b1d4:	0800b285 	.word	0x0800b285
 800b1d8:	0800b285 	.word	0x0800b285
 800b1dc:	0800b285 	.word	0x0800b285
 800b1e0:	0800b285 	.word	0x0800b285
 800b1e4:	0800b285 	.word	0x0800b285
 800b1e8:	0800b26f 	.word	0x0800b26f
 800b1ec:	0800b285 	.word	0x0800b285
 800b1f0:	0800b285 	.word	0x0800b285
 800b1f4:	0800b285 	.word	0x0800b285
 800b1f8:	0800b285 	.word	0x0800b285
 800b1fc:	0800b285 	.word	0x0800b285
 800b200:	0800b285 	.word	0x0800b285
 800b204:	0800b285 	.word	0x0800b285
 800b208:	0800b28d 	.word	0x0800b28d
 800b20c:	0800b285 	.word	0x0800b285
 800b210:	0800b285 	.word	0x0800b285
 800b214:	0800b285 	.word	0x0800b285
 800b218:	0800b285 	.word	0x0800b285
 800b21c:	0800b285 	.word	0x0800b285
 800b220:	0800b285 	.word	0x0800b285
 800b224:	0800b285 	.word	0x0800b285
 800b228:	0800b28d 	.word	0x0800b28d
 800b22c:	0800b285 	.word	0x0800b285
 800b230:	0800b285 	.word	0x0800b285
 800b234:	0800b285 	.word	0x0800b285
 800b238:	0800b285 	.word	0x0800b285
 800b23c:	0800b285 	.word	0x0800b285
 800b240:	0800b285 	.word	0x0800b285
 800b244:	0800b285 	.word	0x0800b285
 800b248:	0800b28d 	.word	0x0800b28d
 800b24c:	58024400 	.word	0x58024400
 800b250:	58024800 	.word	0x58024800
 800b254:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b258:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b25c:	3308      	adds	r3, #8
 800b25e:	2101      	movs	r1, #1
 800b260:	4618      	mov	r0, r3
 800b262:	f000 ffa7 	bl	800c1b4 <RCCEx_PLL2_Config>
 800b266:	4603      	mov	r3, r0
 800b268:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b26c:	e00f      	b.n	800b28e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b26e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b272:	3328      	adds	r3, #40	; 0x28
 800b274:	2101      	movs	r1, #1
 800b276:	4618      	mov	r0, r3
 800b278:	f001 f84e 	bl	800c318 <RCCEx_PLL3_Config>
 800b27c:	4603      	mov	r3, r0
 800b27e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b282:	e004      	b.n	800b28e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b284:	2301      	movs	r3, #1
 800b286:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b28a:	e000      	b.n	800b28e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800b28c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b28e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b292:	2b00      	cmp	r3, #0
 800b294:	d10a      	bne.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b296:	4bbf      	ldr	r3, [pc, #764]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b29a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b29e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b2a4:	4abb      	ldr	r2, [pc, #748]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b2a6:	430b      	orrs	r3, r1
 800b2a8:	6553      	str	r3, [r2, #84]	; 0x54
 800b2aa:	e003      	b.n	800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b2b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2bc:	f002 0302 	and.w	r3, r2, #2
 800b2c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b2ca:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b2ce:	460b      	mov	r3, r1
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	d041      	beq.n	800b358 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b2d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2da:	2b05      	cmp	r3, #5
 800b2dc:	d824      	bhi.n	800b328 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800b2de:	a201      	add	r2, pc, #4	; (adr r2, 800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800b2e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2e4:	0800b331 	.word	0x0800b331
 800b2e8:	0800b2fd 	.word	0x0800b2fd
 800b2ec:	0800b313 	.word	0x0800b313
 800b2f0:	0800b331 	.word	0x0800b331
 800b2f4:	0800b331 	.word	0x0800b331
 800b2f8:	0800b331 	.word	0x0800b331
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b2fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b300:	3308      	adds	r3, #8
 800b302:	2101      	movs	r1, #1
 800b304:	4618      	mov	r0, r3
 800b306:	f000 ff55 	bl	800c1b4 <RCCEx_PLL2_Config>
 800b30a:	4603      	mov	r3, r0
 800b30c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b310:	e00f      	b.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b312:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b316:	3328      	adds	r3, #40	; 0x28
 800b318:	2101      	movs	r1, #1
 800b31a:	4618      	mov	r0, r3
 800b31c:	f000 fffc 	bl	800c318 <RCCEx_PLL3_Config>
 800b320:	4603      	mov	r3, r0
 800b322:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b326:	e004      	b.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b328:	2301      	movs	r3, #1
 800b32a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b32e:	e000      	b.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800b330:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b332:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b336:	2b00      	cmp	r3, #0
 800b338:	d10a      	bne.n	800b350 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b33a:	4b96      	ldr	r3, [pc, #600]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b33c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b33e:	f023 0107 	bic.w	r1, r3, #7
 800b342:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b348:	4a92      	ldr	r2, [pc, #584]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b34a:	430b      	orrs	r3, r1
 800b34c:	6553      	str	r3, [r2, #84]	; 0x54
 800b34e:	e003      	b.n	800b358 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b350:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b354:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b358:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b360:	f002 0304 	and.w	r3, r2, #4
 800b364:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b368:	2300      	movs	r3, #0
 800b36a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b36e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b372:	460b      	mov	r3, r1
 800b374:	4313      	orrs	r3, r2
 800b376:	d044      	beq.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b378:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b37c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b380:	2b05      	cmp	r3, #5
 800b382:	d825      	bhi.n	800b3d0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800b384:	a201      	add	r2, pc, #4	; (adr r2, 800b38c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800b386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b38a:	bf00      	nop
 800b38c:	0800b3d9 	.word	0x0800b3d9
 800b390:	0800b3a5 	.word	0x0800b3a5
 800b394:	0800b3bb 	.word	0x0800b3bb
 800b398:	0800b3d9 	.word	0x0800b3d9
 800b39c:	0800b3d9 	.word	0x0800b3d9
 800b3a0:	0800b3d9 	.word	0x0800b3d9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b3a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3a8:	3308      	adds	r3, #8
 800b3aa:	2101      	movs	r1, #1
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	f000 ff01 	bl	800c1b4 <RCCEx_PLL2_Config>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b3b8:	e00f      	b.n	800b3da <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b3ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3be:	3328      	adds	r3, #40	; 0x28
 800b3c0:	2101      	movs	r1, #1
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f000 ffa8 	bl	800c318 <RCCEx_PLL3_Config>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b3ce:	e004      	b.n	800b3da <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b3d6:	e000      	b.n	800b3da <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800b3d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3da:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d10b      	bne.n	800b3fa <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b3e2:	4b6c      	ldr	r3, [pc, #432]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b3e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3e6:	f023 0107 	bic.w	r1, r3, #7
 800b3ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3f2:	4a68      	ldr	r2, [pc, #416]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b3f4:	430b      	orrs	r3, r1
 800b3f6:	6593      	str	r3, [r2, #88]	; 0x58
 800b3f8:	e003      	b.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3fa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b3fe:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b402:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b40a:	f002 0320 	and.w	r3, r2, #32
 800b40e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b412:	2300      	movs	r3, #0
 800b414:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b418:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b41c:	460b      	mov	r3, r1
 800b41e:	4313      	orrs	r3, r2
 800b420:	d055      	beq.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b426:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b42a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b42e:	d033      	beq.n	800b498 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800b430:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b434:	d82c      	bhi.n	800b490 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b43a:	d02f      	beq.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b43c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b440:	d826      	bhi.n	800b490 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b442:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b446:	d02b      	beq.n	800b4a0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b448:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b44c:	d820      	bhi.n	800b490 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b44e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b452:	d012      	beq.n	800b47a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800b454:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b458:	d81a      	bhi.n	800b490 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d022      	beq.n	800b4a4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b45e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b462:	d115      	bne.n	800b490 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b464:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b468:	3308      	adds	r3, #8
 800b46a:	2100      	movs	r1, #0
 800b46c:	4618      	mov	r0, r3
 800b46e:	f000 fea1 	bl	800c1b4 <RCCEx_PLL2_Config>
 800b472:	4603      	mov	r3, r0
 800b474:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b478:	e015      	b.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b47a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b47e:	3328      	adds	r3, #40	; 0x28
 800b480:	2102      	movs	r1, #2
 800b482:	4618      	mov	r0, r3
 800b484:	f000 ff48 	bl	800c318 <RCCEx_PLL3_Config>
 800b488:	4603      	mov	r3, r0
 800b48a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b48e:	e00a      	b.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b490:	2301      	movs	r3, #1
 800b492:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b496:	e006      	b.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b498:	bf00      	nop
 800b49a:	e004      	b.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b49c:	bf00      	nop
 800b49e:	e002      	b.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b4a0:	bf00      	nop
 800b4a2:	e000      	b.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b4a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d10b      	bne.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b4ae:	4b39      	ldr	r3, [pc, #228]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b4b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4b2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b4b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b4be:	4a35      	ldr	r2, [pc, #212]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b4c0:	430b      	orrs	r3, r1
 800b4c2:	6553      	str	r3, [r2, #84]	; 0x54
 800b4c4:	e003      	b.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4ca:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b4ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b4da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b4de:	2300      	movs	r3, #0
 800b4e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b4e4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b4e8:	460b      	mov	r3, r1
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	d058      	beq.n	800b5a0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b4ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b4f6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b4fa:	d033      	beq.n	800b564 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800b4fc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b500:	d82c      	bhi.n	800b55c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b506:	d02f      	beq.n	800b568 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b50c:	d826      	bhi.n	800b55c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b50e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b512:	d02b      	beq.n	800b56c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b514:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b518:	d820      	bhi.n	800b55c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b51a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b51e:	d012      	beq.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800b520:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b524:	d81a      	bhi.n	800b55c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b526:	2b00      	cmp	r3, #0
 800b528:	d022      	beq.n	800b570 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b52a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b52e:	d115      	bne.n	800b55c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b530:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b534:	3308      	adds	r3, #8
 800b536:	2100      	movs	r1, #0
 800b538:	4618      	mov	r0, r3
 800b53a:	f000 fe3b 	bl	800c1b4 <RCCEx_PLL2_Config>
 800b53e:	4603      	mov	r3, r0
 800b540:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b544:	e015      	b.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b546:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b54a:	3328      	adds	r3, #40	; 0x28
 800b54c:	2102      	movs	r1, #2
 800b54e:	4618      	mov	r0, r3
 800b550:	f000 fee2 	bl	800c318 <RCCEx_PLL3_Config>
 800b554:	4603      	mov	r3, r0
 800b556:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b55a:	e00a      	b.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b55c:	2301      	movs	r3, #1
 800b55e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b562:	e006      	b.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b564:	bf00      	nop
 800b566:	e004      	b.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b568:	bf00      	nop
 800b56a:	e002      	b.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b56c:	bf00      	nop
 800b56e:	e000      	b.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b570:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b572:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b576:	2b00      	cmp	r3, #0
 800b578:	d10e      	bne.n	800b598 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b57a:	4b06      	ldr	r3, [pc, #24]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b57c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b57e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b582:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b586:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b58a:	4a02      	ldr	r2, [pc, #8]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b58c:	430b      	orrs	r3, r1
 800b58e:	6593      	str	r3, [r2, #88]	; 0x58
 800b590:	e006      	b.n	800b5a0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800b592:	bf00      	nop
 800b594:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b598:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b59c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b5a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b5ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b5b6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b5ba:	460b      	mov	r3, r1
 800b5bc:	4313      	orrs	r3, r2
 800b5be:	d055      	beq.n	800b66c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b5c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b5c8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b5cc:	d033      	beq.n	800b636 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800b5ce:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b5d2:	d82c      	bhi.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b5d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5d8:	d02f      	beq.n	800b63a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b5da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5de:	d826      	bhi.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b5e0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b5e4:	d02b      	beq.n	800b63e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b5e6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b5ea:	d820      	bhi.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b5ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b5f0:	d012      	beq.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800b5f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b5f6:	d81a      	bhi.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d022      	beq.n	800b642 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b5fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b600:	d115      	bne.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b602:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b606:	3308      	adds	r3, #8
 800b608:	2100      	movs	r1, #0
 800b60a:	4618      	mov	r0, r3
 800b60c:	f000 fdd2 	bl	800c1b4 <RCCEx_PLL2_Config>
 800b610:	4603      	mov	r3, r0
 800b612:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b616:	e015      	b.n	800b644 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b618:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b61c:	3328      	adds	r3, #40	; 0x28
 800b61e:	2102      	movs	r1, #2
 800b620:	4618      	mov	r0, r3
 800b622:	f000 fe79 	bl	800c318 <RCCEx_PLL3_Config>
 800b626:	4603      	mov	r3, r0
 800b628:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b62c:	e00a      	b.n	800b644 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b62e:	2301      	movs	r3, #1
 800b630:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b634:	e006      	b.n	800b644 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b636:	bf00      	nop
 800b638:	e004      	b.n	800b644 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b63a:	bf00      	nop
 800b63c:	e002      	b.n	800b644 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b63e:	bf00      	nop
 800b640:	e000      	b.n	800b644 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b642:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b644:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d10b      	bne.n	800b664 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b64c:	4ba0      	ldr	r3, [pc, #640]	; (800b8d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b64e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b650:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b654:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b658:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b65c:	4a9c      	ldr	r2, [pc, #624]	; (800b8d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b65e:	430b      	orrs	r3, r1
 800b660:	6593      	str	r3, [r2, #88]	; 0x58
 800b662:	e003      	b.n	800b66c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b664:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b668:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b66c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b674:	f002 0308 	and.w	r3, r2, #8
 800b678:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b67c:	2300      	movs	r3, #0
 800b67e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b682:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b686:	460b      	mov	r3, r1
 800b688:	4313      	orrs	r3, r2
 800b68a:	d01e      	beq.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800b68c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b690:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b698:	d10c      	bne.n	800b6b4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b69a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b69e:	3328      	adds	r3, #40	; 0x28
 800b6a0:	2102      	movs	r1, #2
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f000 fe38 	bl	800c318 <RCCEx_PLL3_Config>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d002      	beq.n	800b6b4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b6b4:	4b86      	ldr	r3, [pc, #536]	; (800b8d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b6b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6b8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b6bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6c4:	4a82      	ldr	r2, [pc, #520]	; (800b8d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b6c6:	430b      	orrs	r3, r1
 800b6c8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b6ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d2:	f002 0310 	and.w	r3, r2, #16
 800b6d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b6da:	2300      	movs	r3, #0
 800b6dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b6e0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b6e4:	460b      	mov	r3, r1
 800b6e6:	4313      	orrs	r3, r2
 800b6e8:	d01e      	beq.n	800b728 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b6ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b6f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6f6:	d10c      	bne.n	800b712 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b6f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6fc:	3328      	adds	r3, #40	; 0x28
 800b6fe:	2102      	movs	r1, #2
 800b700:	4618      	mov	r0, r3
 800b702:	f000 fe09 	bl	800c318 <RCCEx_PLL3_Config>
 800b706:	4603      	mov	r3, r0
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d002      	beq.n	800b712 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800b70c:	2301      	movs	r3, #1
 800b70e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b712:	4b6f      	ldr	r3, [pc, #444]	; (800b8d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b716:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b71a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b71e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b722:	4a6b      	ldr	r2, [pc, #428]	; (800b8d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b724:	430b      	orrs	r3, r1
 800b726:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b728:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b730:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b734:	67bb      	str	r3, [r7, #120]	; 0x78
 800b736:	2300      	movs	r3, #0
 800b738:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b73a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b73e:	460b      	mov	r3, r1
 800b740:	4313      	orrs	r3, r2
 800b742:	d03e      	beq.n	800b7c2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b744:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b748:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b74c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b750:	d022      	beq.n	800b798 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b752:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b756:	d81b      	bhi.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d003      	beq.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800b75c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b760:	d00b      	beq.n	800b77a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800b762:	e015      	b.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b764:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b768:	3308      	adds	r3, #8
 800b76a:	2100      	movs	r1, #0
 800b76c:	4618      	mov	r0, r3
 800b76e:	f000 fd21 	bl	800c1b4 <RCCEx_PLL2_Config>
 800b772:	4603      	mov	r3, r0
 800b774:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b778:	e00f      	b.n	800b79a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b77a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b77e:	3328      	adds	r3, #40	; 0x28
 800b780:	2102      	movs	r1, #2
 800b782:	4618      	mov	r0, r3
 800b784:	f000 fdc8 	bl	800c318 <RCCEx_PLL3_Config>
 800b788:	4603      	mov	r3, r0
 800b78a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b78e:	e004      	b.n	800b79a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b790:	2301      	movs	r3, #1
 800b792:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b796:	e000      	b.n	800b79a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800b798:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b79a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d10b      	bne.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b7a2:	4b4b      	ldr	r3, [pc, #300]	; (800b8d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b7a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7a6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b7aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b7b2:	4a47      	ldr	r2, [pc, #284]	; (800b8d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b7b4:	430b      	orrs	r3, r1
 800b7b6:	6593      	str	r3, [r2, #88]	; 0x58
 800b7b8:	e003      	b.n	800b7c2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7be:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b7c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ca:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b7ce:	673b      	str	r3, [r7, #112]	; 0x70
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	677b      	str	r3, [r7, #116]	; 0x74
 800b7d4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b7d8:	460b      	mov	r3, r1
 800b7da:	4313      	orrs	r3, r2
 800b7dc:	d03b      	beq.n	800b856 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b7de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b7ea:	d01f      	beq.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b7ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b7f0:	d818      	bhi.n	800b824 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800b7f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b7f6:	d003      	beq.n	800b800 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800b7f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b7fc:	d007      	beq.n	800b80e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800b7fe:	e011      	b.n	800b824 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b800:	4b33      	ldr	r3, [pc, #204]	; (800b8d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b804:	4a32      	ldr	r2, [pc, #200]	; (800b8d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b806:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b80a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b80c:	e00f      	b.n	800b82e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b80e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b812:	3328      	adds	r3, #40	; 0x28
 800b814:	2101      	movs	r1, #1
 800b816:	4618      	mov	r0, r3
 800b818:	f000 fd7e 	bl	800c318 <RCCEx_PLL3_Config>
 800b81c:	4603      	mov	r3, r0
 800b81e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800b822:	e004      	b.n	800b82e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b824:	2301      	movs	r3, #1
 800b826:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b82a:	e000      	b.n	800b82e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800b82c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b82e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b832:	2b00      	cmp	r3, #0
 800b834:	d10b      	bne.n	800b84e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b836:	4b26      	ldr	r3, [pc, #152]	; (800b8d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b83a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b83e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b842:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b846:	4a22      	ldr	r2, [pc, #136]	; (800b8d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b848:	430b      	orrs	r3, r1
 800b84a:	6553      	str	r3, [r2, #84]	; 0x54
 800b84c:	e003      	b.n	800b856 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b84e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b852:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b856:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b85e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b862:	66bb      	str	r3, [r7, #104]	; 0x68
 800b864:	2300      	movs	r3, #0
 800b866:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b868:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b86c:	460b      	mov	r3, r1
 800b86e:	4313      	orrs	r3, r2
 800b870:	d034      	beq.n	800b8dc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d003      	beq.n	800b884 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800b87c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b880:	d007      	beq.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800b882:	e011      	b.n	800b8a8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b884:	4b12      	ldr	r3, [pc, #72]	; (800b8d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b888:	4a11      	ldr	r2, [pc, #68]	; (800b8d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b88a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b88e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b890:	e00e      	b.n	800b8b0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b896:	3308      	adds	r3, #8
 800b898:	2102      	movs	r1, #2
 800b89a:	4618      	mov	r0, r3
 800b89c:	f000 fc8a 	bl	800c1b4 <RCCEx_PLL2_Config>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b8a6:	e003      	b.n	800b8b0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b8ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d10d      	bne.n	800b8d4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b8b8:	4b05      	ldr	r3, [pc, #20]	; (800b8d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b8ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b8c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8c6:	4a02      	ldr	r2, [pc, #8]	; (800b8d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b8c8:	430b      	orrs	r3, r1
 800b8ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b8cc:	e006      	b.n	800b8dc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800b8ce:	bf00      	nop
 800b8d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8d8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b8dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800b8e8:	663b      	str	r3, [r7, #96]	; 0x60
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	667b      	str	r3, [r7, #100]	; 0x64
 800b8ee:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b8f2:	460b      	mov	r3, r1
 800b8f4:	4313      	orrs	r3, r2
 800b8f6:	d00c      	beq.n	800b912 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b8f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8fc:	3328      	adds	r3, #40	; 0x28
 800b8fe:	2102      	movs	r1, #2
 800b900:	4618      	mov	r0, r3
 800b902:	f000 fd09 	bl	800c318 <RCCEx_PLL3_Config>
 800b906:	4603      	mov	r3, r0
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d002      	beq.n	800b912 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800b90c:	2301      	movs	r3, #1
 800b90e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b912:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b91a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b91e:	65bb      	str	r3, [r7, #88]	; 0x58
 800b920:	2300      	movs	r3, #0
 800b922:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b924:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800b928:	460b      	mov	r3, r1
 800b92a:	4313      	orrs	r3, r2
 800b92c:	d036      	beq.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b92e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b932:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b934:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b938:	d018      	beq.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800b93a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b93e:	d811      	bhi.n	800b964 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b944:	d014      	beq.n	800b970 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800b946:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b94a:	d80b      	bhi.n	800b964 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d011      	beq.n	800b974 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800b950:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b954:	d106      	bne.n	800b964 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b956:	4bb7      	ldr	r3, [pc, #732]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b95a:	4ab6      	ldr	r2, [pc, #728]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b95c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b960:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b962:	e008      	b.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b964:	2301      	movs	r3, #1
 800b966:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b96a:	e004      	b.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b96c:	bf00      	nop
 800b96e:	e002      	b.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b970:	bf00      	nop
 800b972:	e000      	b.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b974:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b976:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d10a      	bne.n	800b994 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b97e:	4bad      	ldr	r3, [pc, #692]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b982:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b986:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b98a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b98c:	4aa9      	ldr	r2, [pc, #676]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b98e:	430b      	orrs	r3, r1
 800b990:	6553      	str	r3, [r2, #84]	; 0x54
 800b992:	e003      	b.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b994:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b998:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b99c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800b9a8:	653b      	str	r3, [r7, #80]	; 0x50
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	657b      	str	r3, [r7, #84]	; 0x54
 800b9ae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800b9b2:	460b      	mov	r3, r1
 800b9b4:	4313      	orrs	r3, r2
 800b9b6:	d009      	beq.n	800b9cc <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b9b8:	4b9e      	ldr	r3, [pc, #632]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9bc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b9c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9c6:	4a9b      	ldr	r2, [pc, #620]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9c8:	430b      	orrs	r3, r1
 800b9ca:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b9cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d4:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800b9d8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b9da:	2300      	movs	r3, #0
 800b9dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b9de:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800b9e2:	460b      	mov	r3, r1
 800b9e4:	4313      	orrs	r3, r2
 800b9e6:	d009      	beq.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b9e8:	4b92      	ldr	r3, [pc, #584]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9ec:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800b9f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b9f6:	4a8f      	ldr	r2, [pc, #572]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9f8:	430b      	orrs	r3, r1
 800b9fa:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b9fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba04:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800ba08:	643b      	str	r3, [r7, #64]	; 0x40
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	647b      	str	r3, [r7, #68]	; 0x44
 800ba0e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800ba12:	460b      	mov	r3, r1
 800ba14:	4313      	orrs	r3, r2
 800ba16:	d00e      	beq.n	800ba36 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ba18:	4b86      	ldr	r3, [pc, #536]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ba1a:	691b      	ldr	r3, [r3, #16]
 800ba1c:	4a85      	ldr	r2, [pc, #532]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ba1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ba22:	6113      	str	r3, [r2, #16]
 800ba24:	4b83      	ldr	r3, [pc, #524]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ba26:	6919      	ldr	r1, [r3, #16]
 800ba28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba2c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ba30:	4a80      	ldr	r2, [pc, #512]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ba32:	430b      	orrs	r3, r1
 800ba34:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ba36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba3e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800ba42:	63bb      	str	r3, [r7, #56]	; 0x38
 800ba44:	2300      	movs	r3, #0
 800ba46:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba48:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800ba4c:	460b      	mov	r3, r1
 800ba4e:	4313      	orrs	r3, r2
 800ba50:	d009      	beq.n	800ba66 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ba52:	4b78      	ldr	r3, [pc, #480]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ba54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba56:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800ba5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba60:	4a74      	ldr	r2, [pc, #464]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ba62:	430b      	orrs	r3, r1
 800ba64:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ba66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800ba72:	633b      	str	r3, [r7, #48]	; 0x30
 800ba74:	2300      	movs	r3, #0
 800ba76:	637b      	str	r3, [r7, #52]	; 0x34
 800ba78:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800ba7c:	460b      	mov	r3, r1
 800ba7e:	4313      	orrs	r3, r2
 800ba80:	d00a      	beq.n	800ba98 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ba82:	4b6c      	ldr	r3, [pc, #432]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ba84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba86:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800ba8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba92:	4a68      	ldr	r2, [pc, #416]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ba94:	430b      	orrs	r3, r1
 800ba96:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ba98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa0:	2100      	movs	r1, #0
 800baa2:	62b9      	str	r1, [r7, #40]	; 0x28
 800baa4:	f003 0301 	and.w	r3, r3, #1
 800baa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800baaa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800baae:	460b      	mov	r3, r1
 800bab0:	4313      	orrs	r3, r2
 800bab2:	d011      	beq.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bab8:	3308      	adds	r3, #8
 800baba:	2100      	movs	r1, #0
 800babc:	4618      	mov	r0, r3
 800babe:	f000 fb79 	bl	800c1b4 <RCCEx_PLL2_Config>
 800bac2:	4603      	mov	r3, r0
 800bac4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bac8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d003      	beq.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bad0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bad4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800bad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800badc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae0:	2100      	movs	r1, #0
 800bae2:	6239      	str	r1, [r7, #32]
 800bae4:	f003 0302 	and.w	r3, r3, #2
 800bae8:	627b      	str	r3, [r7, #36]	; 0x24
 800baea:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800baee:	460b      	mov	r3, r1
 800baf0:	4313      	orrs	r3, r2
 800baf2:	d011      	beq.n	800bb18 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800baf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baf8:	3308      	adds	r3, #8
 800bafa:	2101      	movs	r1, #1
 800bafc:	4618      	mov	r0, r3
 800bafe:	f000 fb59 	bl	800c1b4 <RCCEx_PLL2_Config>
 800bb02:	4603      	mov	r3, r0
 800bb04:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bb08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d003      	beq.n	800bb18 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb10:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb14:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bb18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb20:	2100      	movs	r1, #0
 800bb22:	61b9      	str	r1, [r7, #24]
 800bb24:	f003 0304 	and.w	r3, r3, #4
 800bb28:	61fb      	str	r3, [r7, #28]
 800bb2a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bb2e:	460b      	mov	r3, r1
 800bb30:	4313      	orrs	r3, r2
 800bb32:	d011      	beq.n	800bb58 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bb34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb38:	3308      	adds	r3, #8
 800bb3a:	2102      	movs	r1, #2
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f000 fb39 	bl	800c1b4 <RCCEx_PLL2_Config>
 800bb42:	4603      	mov	r3, r0
 800bb44:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bb48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d003      	beq.n	800bb58 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb54:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bb58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb60:	2100      	movs	r1, #0
 800bb62:	6139      	str	r1, [r7, #16]
 800bb64:	f003 0308 	and.w	r3, r3, #8
 800bb68:	617b      	str	r3, [r7, #20]
 800bb6a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bb6e:	460b      	mov	r3, r1
 800bb70:	4313      	orrs	r3, r2
 800bb72:	d011      	beq.n	800bb98 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bb74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb78:	3328      	adds	r3, #40	; 0x28
 800bb7a:	2100      	movs	r1, #0
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f000 fbcb 	bl	800c318 <RCCEx_PLL3_Config>
 800bb82:	4603      	mov	r3, r0
 800bb84:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800bb88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d003      	beq.n	800bb98 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb94:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bb98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba0:	2100      	movs	r1, #0
 800bba2:	60b9      	str	r1, [r7, #8]
 800bba4:	f003 0310 	and.w	r3, r3, #16
 800bba8:	60fb      	str	r3, [r7, #12]
 800bbaa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bbae:	460b      	mov	r3, r1
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	d011      	beq.n	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bbb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbb8:	3328      	adds	r3, #40	; 0x28
 800bbba:	2101      	movs	r1, #1
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f000 fbab 	bl	800c318 <RCCEx_PLL3_Config>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bbc8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d003      	beq.n	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbd0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbd4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bbd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe0:	2100      	movs	r1, #0
 800bbe2:	6039      	str	r1, [r7, #0]
 800bbe4:	f003 0320 	and.w	r3, r3, #32
 800bbe8:	607b      	str	r3, [r7, #4]
 800bbea:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bbee:	460b      	mov	r3, r1
 800bbf0:	4313      	orrs	r3, r2
 800bbf2:	d011      	beq.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bbf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbf8:	3328      	adds	r3, #40	; 0x28
 800bbfa:	2102      	movs	r1, #2
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f000 fb8b 	bl	800c318 <RCCEx_PLL3_Config>
 800bc02:	4603      	mov	r3, r0
 800bc04:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bc08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d003      	beq.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc10:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc14:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800bc18:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d101      	bne.n	800bc24 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800bc20:	2300      	movs	r3, #0
 800bc22:	e000      	b.n	800bc26 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800bc24:	2301      	movs	r3, #1
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bc32:	bf00      	nop
 800bc34:	58024400 	.word	0x58024400

0800bc38 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bc3c:	f7fe fe00 	bl	800a840 <HAL_RCC_GetHCLKFreq>
 800bc40:	4602      	mov	r2, r0
 800bc42:	4b06      	ldr	r3, [pc, #24]	; (800bc5c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bc44:	6a1b      	ldr	r3, [r3, #32]
 800bc46:	091b      	lsrs	r3, r3, #4
 800bc48:	f003 0307 	and.w	r3, r3, #7
 800bc4c:	4904      	ldr	r1, [pc, #16]	; (800bc60 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bc4e:	5ccb      	ldrb	r3, [r1, r3]
 800bc50:	f003 031f 	and.w	r3, r3, #31
 800bc54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	bd80      	pop	{r7, pc}
 800bc5c:	58024400 	.word	0x58024400
 800bc60:	080107cc 	.word	0x080107cc

0800bc64 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bc64:	b480      	push	{r7}
 800bc66:	b089      	sub	sp, #36	; 0x24
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bc6c:	4ba1      	ldr	r3, [pc, #644]	; (800bef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc70:	f003 0303 	and.w	r3, r3, #3
 800bc74:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800bc76:	4b9f      	ldr	r3, [pc, #636]	; (800bef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc7a:	0b1b      	lsrs	r3, r3, #12
 800bc7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc80:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bc82:	4b9c      	ldr	r3, [pc, #624]	; (800bef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc86:	091b      	lsrs	r3, r3, #4
 800bc88:	f003 0301 	and.w	r3, r3, #1
 800bc8c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800bc8e:	4b99      	ldr	r3, [pc, #612]	; (800bef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc92:	08db      	lsrs	r3, r3, #3
 800bc94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bc98:	693a      	ldr	r2, [r7, #16]
 800bc9a:	fb02 f303 	mul.w	r3, r2, r3
 800bc9e:	ee07 3a90 	vmov	s15, r3
 800bca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bca6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	f000 8111 	beq.w	800bed4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bcb2:	69bb      	ldr	r3, [r7, #24]
 800bcb4:	2b02      	cmp	r3, #2
 800bcb6:	f000 8083 	beq.w	800bdc0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bcba:	69bb      	ldr	r3, [r7, #24]
 800bcbc:	2b02      	cmp	r3, #2
 800bcbe:	f200 80a1 	bhi.w	800be04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bcc2:	69bb      	ldr	r3, [r7, #24]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d003      	beq.n	800bcd0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bcc8:	69bb      	ldr	r3, [r7, #24]
 800bcca:	2b01      	cmp	r3, #1
 800bccc:	d056      	beq.n	800bd7c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bcce:	e099      	b.n	800be04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bcd0:	4b88      	ldr	r3, [pc, #544]	; (800bef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	f003 0320 	and.w	r3, r3, #32
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d02d      	beq.n	800bd38 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bcdc:	4b85      	ldr	r3, [pc, #532]	; (800bef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	08db      	lsrs	r3, r3, #3
 800bce2:	f003 0303 	and.w	r3, r3, #3
 800bce6:	4a84      	ldr	r2, [pc, #528]	; (800bef8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bce8:	fa22 f303 	lsr.w	r3, r2, r3
 800bcec:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	ee07 3a90 	vmov	s15, r3
 800bcf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	ee07 3a90 	vmov	s15, r3
 800bcfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd06:	4b7b      	ldr	r3, [pc, #492]	; (800bef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd0e:	ee07 3a90 	vmov	s15, r3
 800bd12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd16:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd1a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800befc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd32:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bd36:	e087      	b.n	800be48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	ee07 3a90 	vmov	s15, r3
 800bd3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd42:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bf00 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bd46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd4a:	4b6a      	ldr	r3, [pc, #424]	; (800bef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd52:	ee07 3a90 	vmov	s15, r3
 800bd56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd5e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800befc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd7a:	e065      	b.n	800be48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bd7c:	697b      	ldr	r3, [r7, #20]
 800bd7e:	ee07 3a90 	vmov	s15, r3
 800bd82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd86:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bf04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bd8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd8e:	4b59      	ldr	r3, [pc, #356]	; (800bef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd96:	ee07 3a90 	vmov	s15, r3
 800bd9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bda2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800befc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bda6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bdb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bdbe:	e043      	b.n	800be48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	ee07 3a90 	vmov	s15, r3
 800bdc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bf08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bdce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdd2:	4b48      	ldr	r3, [pc, #288]	; (800bef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdda:	ee07 3a90 	vmov	s15, r3
 800bdde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bde2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bde6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800befc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bdea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bdf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be02:	e021      	b.n	800be48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800be04:	697b      	ldr	r3, [r7, #20]
 800be06:	ee07 3a90 	vmov	s15, r3
 800be0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be0e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bf04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800be12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be16:	4b37      	ldr	r3, [pc, #220]	; (800bef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be1e:	ee07 3a90 	vmov	s15, r3
 800be22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be26:	ed97 6a03 	vldr	s12, [r7, #12]
 800be2a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800befc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800be2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be46:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800be48:	4b2a      	ldr	r3, [pc, #168]	; (800bef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be4c:	0a5b      	lsrs	r3, r3, #9
 800be4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be52:	ee07 3a90 	vmov	s15, r3
 800be56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be62:	edd7 6a07 	vldr	s13, [r7, #28]
 800be66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be6e:	ee17 2a90 	vmov	r2, s15
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800be76:	4b1f      	ldr	r3, [pc, #124]	; (800bef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be7a:	0c1b      	lsrs	r3, r3, #16
 800be7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be80:	ee07 3a90 	vmov	s15, r3
 800be84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be90:	edd7 6a07 	vldr	s13, [r7, #28]
 800be94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be9c:	ee17 2a90 	vmov	r2, s15
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800bea4:	4b13      	ldr	r3, [pc, #76]	; (800bef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bea8:	0e1b      	lsrs	r3, r3, #24
 800beaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800beae:	ee07 3a90 	vmov	s15, r3
 800beb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800beba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bebe:	edd7 6a07 	vldr	s13, [r7, #28]
 800bec2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bec6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800beca:	ee17 2a90 	vmov	r2, s15
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bed2:	e008      	b.n	800bee6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2200      	movs	r2, #0
 800bed8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2200      	movs	r2, #0
 800bede:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2200      	movs	r2, #0
 800bee4:	609a      	str	r2, [r3, #8]
}
 800bee6:	bf00      	nop
 800bee8:	3724      	adds	r7, #36	; 0x24
 800beea:	46bd      	mov	sp, r7
 800beec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef0:	4770      	bx	lr
 800bef2:	bf00      	nop
 800bef4:	58024400 	.word	0x58024400
 800bef8:	03d09000 	.word	0x03d09000
 800befc:	46000000 	.word	0x46000000
 800bf00:	4c742400 	.word	0x4c742400
 800bf04:	4a742400 	.word	0x4a742400
 800bf08:	4af42400 	.word	0x4af42400

0800bf0c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b089      	sub	sp, #36	; 0x24
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bf14:	4ba1      	ldr	r3, [pc, #644]	; (800c19c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf18:	f003 0303 	and.w	r3, r3, #3
 800bf1c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800bf1e:	4b9f      	ldr	r3, [pc, #636]	; (800c19c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf22:	0d1b      	lsrs	r3, r3, #20
 800bf24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf28:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bf2a:	4b9c      	ldr	r3, [pc, #624]	; (800c19c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf2e:	0a1b      	lsrs	r3, r3, #8
 800bf30:	f003 0301 	and.w	r3, r3, #1
 800bf34:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bf36:	4b99      	ldr	r3, [pc, #612]	; (800c19c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf3a:	08db      	lsrs	r3, r3, #3
 800bf3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bf40:	693a      	ldr	r2, [r7, #16]
 800bf42:	fb02 f303 	mul.w	r3, r2, r3
 800bf46:	ee07 3a90 	vmov	s15, r3
 800bf4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	f000 8111 	beq.w	800c17c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bf5a:	69bb      	ldr	r3, [r7, #24]
 800bf5c:	2b02      	cmp	r3, #2
 800bf5e:	f000 8083 	beq.w	800c068 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bf62:	69bb      	ldr	r3, [r7, #24]
 800bf64:	2b02      	cmp	r3, #2
 800bf66:	f200 80a1 	bhi.w	800c0ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bf6a:	69bb      	ldr	r3, [r7, #24]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d003      	beq.n	800bf78 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bf70:	69bb      	ldr	r3, [r7, #24]
 800bf72:	2b01      	cmp	r3, #1
 800bf74:	d056      	beq.n	800c024 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bf76:	e099      	b.n	800c0ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf78:	4b88      	ldr	r3, [pc, #544]	; (800c19c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f003 0320 	and.w	r3, r3, #32
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d02d      	beq.n	800bfe0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf84:	4b85      	ldr	r3, [pc, #532]	; (800c19c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	08db      	lsrs	r3, r3, #3
 800bf8a:	f003 0303 	and.w	r3, r3, #3
 800bf8e:	4a84      	ldr	r2, [pc, #528]	; (800c1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bf90:	fa22 f303 	lsr.w	r3, r2, r3
 800bf94:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	ee07 3a90 	vmov	s15, r3
 800bf9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	ee07 3a90 	vmov	s15, r3
 800bfa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfae:	4b7b      	ldr	r3, [pc, #492]	; (800c19c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfb6:	ee07 3a90 	vmov	s15, r3
 800bfba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfbe:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfc2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bfc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfda:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bfde:	e087      	b.n	800c0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	ee07 3a90 	vmov	s15, r3
 800bfe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c1a8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bfee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bff2:	4b6a      	ldr	r3, [pc, #424]	; (800c19c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bffa:	ee07 3a90 	vmov	s15, r3
 800bffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c002:	ed97 6a03 	vldr	s12, [r7, #12]
 800c006:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c00a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c00e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c012:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c01a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c01e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c022:	e065      	b.n	800c0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c024:	697b      	ldr	r3, [r7, #20]
 800c026:	ee07 3a90 	vmov	s15, r3
 800c02a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c02e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c1ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c036:	4b59      	ldr	r3, [pc, #356]	; (800c19c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c03a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c03e:	ee07 3a90 	vmov	s15, r3
 800c042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c046:	ed97 6a03 	vldr	s12, [r7, #12]
 800c04a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c04e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c056:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c05a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c05e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c062:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c066:	e043      	b.n	800c0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	ee07 3a90 	vmov	s15, r3
 800c06e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c072:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c07a:	4b48      	ldr	r3, [pc, #288]	; (800c19c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c07c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c07e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c082:	ee07 3a90 	vmov	s15, r3
 800c086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c08a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c08e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c09a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c09e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c0aa:	e021      	b.n	800c0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c0ac:	697b      	ldr	r3, [r7, #20]
 800c0ae:	ee07 3a90 	vmov	s15, r3
 800c0b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0b6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c1ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c0ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0be:	4b37      	ldr	r3, [pc, #220]	; (800c19c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0c6:	ee07 3a90 	vmov	s15, r3
 800c0ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0d2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c0d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c0e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c0ee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c0f0:	4b2a      	ldr	r3, [pc, #168]	; (800c19c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0f4:	0a5b      	lsrs	r3, r3, #9
 800c0f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0fa:	ee07 3a90 	vmov	s15, r3
 800c0fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c102:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c106:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c10a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c10e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c112:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c116:	ee17 2a90 	vmov	r2, s15
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c11e:	4b1f      	ldr	r3, [pc, #124]	; (800c19c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c122:	0c1b      	lsrs	r3, r3, #16
 800c124:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c128:	ee07 3a90 	vmov	s15, r3
 800c12c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c130:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c134:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c138:	edd7 6a07 	vldr	s13, [r7, #28]
 800c13c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c140:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c144:	ee17 2a90 	vmov	r2, s15
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c14c:	4b13      	ldr	r3, [pc, #76]	; (800c19c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c14e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c150:	0e1b      	lsrs	r3, r3, #24
 800c152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c156:	ee07 3a90 	vmov	s15, r3
 800c15a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c15e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c162:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c166:	edd7 6a07 	vldr	s13, [r7, #28]
 800c16a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c16e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c172:	ee17 2a90 	vmov	r2, s15
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c17a:	e008      	b.n	800c18e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2200      	movs	r2, #0
 800c180:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2200      	movs	r2, #0
 800c186:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2200      	movs	r2, #0
 800c18c:	609a      	str	r2, [r3, #8]
}
 800c18e:	bf00      	nop
 800c190:	3724      	adds	r7, #36	; 0x24
 800c192:	46bd      	mov	sp, r7
 800c194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c198:	4770      	bx	lr
 800c19a:	bf00      	nop
 800c19c:	58024400 	.word	0x58024400
 800c1a0:	03d09000 	.word	0x03d09000
 800c1a4:	46000000 	.word	0x46000000
 800c1a8:	4c742400 	.word	0x4c742400
 800c1ac:	4a742400 	.word	0x4a742400
 800c1b0:	4af42400 	.word	0x4af42400

0800c1b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b084      	sub	sp, #16
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
 800c1bc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c1c2:	4b53      	ldr	r3, [pc, #332]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c1c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1c6:	f003 0303 	and.w	r3, r3, #3
 800c1ca:	2b03      	cmp	r3, #3
 800c1cc:	d101      	bne.n	800c1d2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	e099      	b.n	800c306 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c1d2:	4b4f      	ldr	r3, [pc, #316]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	4a4e      	ldr	r2, [pc, #312]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c1d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c1dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c1de:	f7f9 ffeb 	bl	80061b8 <HAL_GetTick>
 800c1e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c1e4:	e008      	b.n	800c1f8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c1e6:	f7f9 ffe7 	bl	80061b8 <HAL_GetTick>
 800c1ea:	4602      	mov	r2, r0
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	1ad3      	subs	r3, r2, r3
 800c1f0:	2b02      	cmp	r3, #2
 800c1f2:	d901      	bls.n	800c1f8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c1f4:	2303      	movs	r3, #3
 800c1f6:	e086      	b.n	800c306 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c1f8:	4b45      	ldr	r3, [pc, #276]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c200:	2b00      	cmp	r3, #0
 800c202:	d1f0      	bne.n	800c1e6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c204:	4b42      	ldr	r3, [pc, #264]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c208:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	031b      	lsls	r3, r3, #12
 800c212:	493f      	ldr	r1, [pc, #252]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c214:	4313      	orrs	r3, r2
 800c216:	628b      	str	r3, [r1, #40]	; 0x28
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	685b      	ldr	r3, [r3, #4]
 800c21c:	3b01      	subs	r3, #1
 800c21e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	689b      	ldr	r3, [r3, #8]
 800c226:	3b01      	subs	r3, #1
 800c228:	025b      	lsls	r3, r3, #9
 800c22a:	b29b      	uxth	r3, r3
 800c22c:	431a      	orrs	r2, r3
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	68db      	ldr	r3, [r3, #12]
 800c232:	3b01      	subs	r3, #1
 800c234:	041b      	lsls	r3, r3, #16
 800c236:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c23a:	431a      	orrs	r2, r3
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	691b      	ldr	r3, [r3, #16]
 800c240:	3b01      	subs	r3, #1
 800c242:	061b      	lsls	r3, r3, #24
 800c244:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c248:	4931      	ldr	r1, [pc, #196]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c24a:	4313      	orrs	r3, r2
 800c24c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c24e:	4b30      	ldr	r3, [pc, #192]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c252:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	695b      	ldr	r3, [r3, #20]
 800c25a:	492d      	ldr	r1, [pc, #180]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c25c:	4313      	orrs	r3, r2
 800c25e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c260:	4b2b      	ldr	r3, [pc, #172]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c264:	f023 0220 	bic.w	r2, r3, #32
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	699b      	ldr	r3, [r3, #24]
 800c26c:	4928      	ldr	r1, [pc, #160]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c26e:	4313      	orrs	r3, r2
 800c270:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c272:	4b27      	ldr	r3, [pc, #156]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c276:	4a26      	ldr	r2, [pc, #152]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c278:	f023 0310 	bic.w	r3, r3, #16
 800c27c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c27e:	4b24      	ldr	r3, [pc, #144]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c280:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c282:	4b24      	ldr	r3, [pc, #144]	; (800c314 <RCCEx_PLL2_Config+0x160>)
 800c284:	4013      	ands	r3, r2
 800c286:	687a      	ldr	r2, [r7, #4]
 800c288:	69d2      	ldr	r2, [r2, #28]
 800c28a:	00d2      	lsls	r2, r2, #3
 800c28c:	4920      	ldr	r1, [pc, #128]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c28e:	4313      	orrs	r3, r2
 800c290:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c292:	4b1f      	ldr	r3, [pc, #124]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c296:	4a1e      	ldr	r2, [pc, #120]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c298:	f043 0310 	orr.w	r3, r3, #16
 800c29c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d106      	bne.n	800c2b2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c2a4:	4b1a      	ldr	r3, [pc, #104]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c2a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2a8:	4a19      	ldr	r2, [pc, #100]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c2aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c2ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c2b0:	e00f      	b.n	800c2d2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	2b01      	cmp	r3, #1
 800c2b6:	d106      	bne.n	800c2c6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c2b8:	4b15      	ldr	r3, [pc, #84]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2bc:	4a14      	ldr	r2, [pc, #80]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c2be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c2c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c2c4:	e005      	b.n	800c2d2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c2c6:	4b12      	ldr	r3, [pc, #72]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c2c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2ca:	4a11      	ldr	r2, [pc, #68]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c2cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c2d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c2d2:	4b0f      	ldr	r3, [pc, #60]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	4a0e      	ldr	r2, [pc, #56]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c2d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c2dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c2de:	f7f9 ff6b 	bl	80061b8 <HAL_GetTick>
 800c2e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c2e4:	e008      	b.n	800c2f8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c2e6:	f7f9 ff67 	bl	80061b8 <HAL_GetTick>
 800c2ea:	4602      	mov	r2, r0
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	1ad3      	subs	r3, r2, r3
 800c2f0:	2b02      	cmp	r3, #2
 800c2f2:	d901      	bls.n	800c2f8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c2f4:	2303      	movs	r3, #3
 800c2f6:	e006      	b.n	800c306 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c2f8:	4b05      	ldr	r3, [pc, #20]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c300:	2b00      	cmp	r3, #0
 800c302:	d0f0      	beq.n	800c2e6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c304:	7bfb      	ldrb	r3, [r7, #15]
}
 800c306:	4618      	mov	r0, r3
 800c308:	3710      	adds	r7, #16
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}
 800c30e:	bf00      	nop
 800c310:	58024400 	.word	0x58024400
 800c314:	ffff0007 	.word	0xffff0007

0800c318 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b084      	sub	sp, #16
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
 800c320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c322:	2300      	movs	r3, #0
 800c324:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c326:	4b53      	ldr	r3, [pc, #332]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c32a:	f003 0303 	and.w	r3, r3, #3
 800c32e:	2b03      	cmp	r3, #3
 800c330:	d101      	bne.n	800c336 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c332:	2301      	movs	r3, #1
 800c334:	e099      	b.n	800c46a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c336:	4b4f      	ldr	r3, [pc, #316]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	4a4e      	ldr	r2, [pc, #312]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c33c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c340:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c342:	f7f9 ff39 	bl	80061b8 <HAL_GetTick>
 800c346:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c348:	e008      	b.n	800c35c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c34a:	f7f9 ff35 	bl	80061b8 <HAL_GetTick>
 800c34e:	4602      	mov	r2, r0
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	1ad3      	subs	r3, r2, r3
 800c354:	2b02      	cmp	r3, #2
 800c356:	d901      	bls.n	800c35c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c358:	2303      	movs	r3, #3
 800c35a:	e086      	b.n	800c46a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c35c:	4b45      	ldr	r3, [pc, #276]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c364:	2b00      	cmp	r3, #0
 800c366:	d1f0      	bne.n	800c34a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c368:	4b42      	ldr	r3, [pc, #264]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c36a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c36c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	051b      	lsls	r3, r3, #20
 800c376:	493f      	ldr	r1, [pc, #252]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c378:	4313      	orrs	r3, r2
 800c37a:	628b      	str	r3, [r1, #40]	; 0x28
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	685b      	ldr	r3, [r3, #4]
 800c380:	3b01      	subs	r3, #1
 800c382:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	689b      	ldr	r3, [r3, #8]
 800c38a:	3b01      	subs	r3, #1
 800c38c:	025b      	lsls	r3, r3, #9
 800c38e:	b29b      	uxth	r3, r3
 800c390:	431a      	orrs	r2, r3
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	68db      	ldr	r3, [r3, #12]
 800c396:	3b01      	subs	r3, #1
 800c398:	041b      	lsls	r3, r3, #16
 800c39a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c39e:	431a      	orrs	r2, r3
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	691b      	ldr	r3, [r3, #16]
 800c3a4:	3b01      	subs	r3, #1
 800c3a6:	061b      	lsls	r3, r3, #24
 800c3a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c3ac:	4931      	ldr	r1, [pc, #196]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c3ae:	4313      	orrs	r3, r2
 800c3b0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c3b2:	4b30      	ldr	r3, [pc, #192]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c3b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	695b      	ldr	r3, [r3, #20]
 800c3be:	492d      	ldr	r1, [pc, #180]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c3c0:	4313      	orrs	r3, r2
 800c3c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c3c4:	4b2b      	ldr	r3, [pc, #172]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3c8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	699b      	ldr	r3, [r3, #24]
 800c3d0:	4928      	ldr	r1, [pc, #160]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c3d2:	4313      	orrs	r3, r2
 800c3d4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c3d6:	4b27      	ldr	r3, [pc, #156]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c3d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3da:	4a26      	ldr	r2, [pc, #152]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c3dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c3e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c3e2:	4b24      	ldr	r3, [pc, #144]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c3e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c3e6:	4b24      	ldr	r3, [pc, #144]	; (800c478 <RCCEx_PLL3_Config+0x160>)
 800c3e8:	4013      	ands	r3, r2
 800c3ea:	687a      	ldr	r2, [r7, #4]
 800c3ec:	69d2      	ldr	r2, [r2, #28]
 800c3ee:	00d2      	lsls	r2, r2, #3
 800c3f0:	4920      	ldr	r1, [pc, #128]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c3f2:	4313      	orrs	r3, r2
 800c3f4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c3f6:	4b1f      	ldr	r3, [pc, #124]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c3f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3fa:	4a1e      	ldr	r2, [pc, #120]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c3fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c400:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d106      	bne.n	800c416 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c408:	4b1a      	ldr	r3, [pc, #104]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c40c:	4a19      	ldr	r2, [pc, #100]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c40e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c412:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c414:	e00f      	b.n	800c436 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	2b01      	cmp	r3, #1
 800c41a:	d106      	bne.n	800c42a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c41c:	4b15      	ldr	r3, [pc, #84]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c41e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c420:	4a14      	ldr	r2, [pc, #80]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c422:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c426:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c428:	e005      	b.n	800c436 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c42a:	4b12      	ldr	r3, [pc, #72]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c42c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c42e:	4a11      	ldr	r2, [pc, #68]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c430:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c434:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c436:	4b0f      	ldr	r3, [pc, #60]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	4a0e      	ldr	r2, [pc, #56]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c43c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c440:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c442:	f7f9 feb9 	bl	80061b8 <HAL_GetTick>
 800c446:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c448:	e008      	b.n	800c45c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c44a:	f7f9 feb5 	bl	80061b8 <HAL_GetTick>
 800c44e:	4602      	mov	r2, r0
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	1ad3      	subs	r3, r2, r3
 800c454:	2b02      	cmp	r3, #2
 800c456:	d901      	bls.n	800c45c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c458:	2303      	movs	r3, #3
 800c45a:	e006      	b.n	800c46a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c45c:	4b05      	ldr	r3, [pc, #20]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c464:	2b00      	cmp	r3, #0
 800c466:	d0f0      	beq.n	800c44a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c468:	7bfb      	ldrb	r3, [r7, #15]
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3710      	adds	r7, #16
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
 800c472:	bf00      	nop
 800c474:	58024400 	.word	0x58024400
 800c478:	ffff0007 	.word	0xffff0007

0800c47c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b082      	sub	sp, #8
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d101      	bne.n	800c48e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c48a:	2301      	movs	r3, #1
 800c48c:	e049      	b.n	800c522 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c494:	b2db      	uxtb	r3, r3
 800c496:	2b00      	cmp	r3, #0
 800c498:	d106      	bne.n	800c4a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2200      	movs	r2, #0
 800c49e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f7f9 f88a 	bl	80055bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2202      	movs	r2, #2
 800c4ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681a      	ldr	r2, [r3, #0]
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	3304      	adds	r3, #4
 800c4b8:	4619      	mov	r1, r3
 800c4ba:	4610      	mov	r0, r2
 800c4bc:	f000 fed8 	bl	800d270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2201      	movs	r2, #1
 800c4c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2201      	movs	r2, #1
 800c4cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2201      	movs	r2, #1
 800c4d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2201      	movs	r2, #1
 800c4dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2201      	movs	r2, #1
 800c4e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2201      	movs	r2, #1
 800c4ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2201      	movs	r2, #1
 800c4f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2201      	movs	r2, #1
 800c4fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2201      	movs	r2, #1
 800c504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2201      	movs	r2, #1
 800c50c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2201      	movs	r2, #1
 800c514:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2201      	movs	r2, #1
 800c51c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c520:	2300      	movs	r3, #0
}
 800c522:	4618      	mov	r0, r3
 800c524:	3708      	adds	r7, #8
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
	...

0800c52c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c52c:	b480      	push	{r7}
 800c52e:	b085      	sub	sp, #20
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c53a:	b2db      	uxtb	r3, r3
 800c53c:	2b01      	cmp	r3, #1
 800c53e:	d001      	beq.n	800c544 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c540:	2301      	movs	r3, #1
 800c542:	e05e      	b.n	800c602 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2202      	movs	r2, #2
 800c548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	68da      	ldr	r2, [r3, #12]
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	f042 0201 	orr.w	r2, r2, #1
 800c55a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	4a2b      	ldr	r2, [pc, #172]	; (800c610 <HAL_TIM_Base_Start_IT+0xe4>)
 800c562:	4293      	cmp	r3, r2
 800c564:	d02c      	beq.n	800c5c0 <HAL_TIM_Base_Start_IT+0x94>
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c56e:	d027      	beq.n	800c5c0 <HAL_TIM_Base_Start_IT+0x94>
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	4a27      	ldr	r2, [pc, #156]	; (800c614 <HAL_TIM_Base_Start_IT+0xe8>)
 800c576:	4293      	cmp	r3, r2
 800c578:	d022      	beq.n	800c5c0 <HAL_TIM_Base_Start_IT+0x94>
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	4a26      	ldr	r2, [pc, #152]	; (800c618 <HAL_TIM_Base_Start_IT+0xec>)
 800c580:	4293      	cmp	r3, r2
 800c582:	d01d      	beq.n	800c5c0 <HAL_TIM_Base_Start_IT+0x94>
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	4a24      	ldr	r2, [pc, #144]	; (800c61c <HAL_TIM_Base_Start_IT+0xf0>)
 800c58a:	4293      	cmp	r3, r2
 800c58c:	d018      	beq.n	800c5c0 <HAL_TIM_Base_Start_IT+0x94>
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	4a23      	ldr	r2, [pc, #140]	; (800c620 <HAL_TIM_Base_Start_IT+0xf4>)
 800c594:	4293      	cmp	r3, r2
 800c596:	d013      	beq.n	800c5c0 <HAL_TIM_Base_Start_IT+0x94>
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	4a21      	ldr	r2, [pc, #132]	; (800c624 <HAL_TIM_Base_Start_IT+0xf8>)
 800c59e:	4293      	cmp	r3, r2
 800c5a0:	d00e      	beq.n	800c5c0 <HAL_TIM_Base_Start_IT+0x94>
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	4a20      	ldr	r2, [pc, #128]	; (800c628 <HAL_TIM_Base_Start_IT+0xfc>)
 800c5a8:	4293      	cmp	r3, r2
 800c5aa:	d009      	beq.n	800c5c0 <HAL_TIM_Base_Start_IT+0x94>
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	4a1e      	ldr	r2, [pc, #120]	; (800c62c <HAL_TIM_Base_Start_IT+0x100>)
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	d004      	beq.n	800c5c0 <HAL_TIM_Base_Start_IT+0x94>
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	4a1d      	ldr	r2, [pc, #116]	; (800c630 <HAL_TIM_Base_Start_IT+0x104>)
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d115      	bne.n	800c5ec <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	689a      	ldr	r2, [r3, #8]
 800c5c6:	4b1b      	ldr	r3, [pc, #108]	; (800c634 <HAL_TIM_Base_Start_IT+0x108>)
 800c5c8:	4013      	ands	r3, r2
 800c5ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	2b06      	cmp	r3, #6
 800c5d0:	d015      	beq.n	800c5fe <HAL_TIM_Base_Start_IT+0xd2>
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5d8:	d011      	beq.n	800c5fe <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	681a      	ldr	r2, [r3, #0]
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	f042 0201 	orr.w	r2, r2, #1
 800c5e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c5ea:	e008      	b.n	800c5fe <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	681a      	ldr	r2, [r3, #0]
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f042 0201 	orr.w	r2, r2, #1
 800c5fa:	601a      	str	r2, [r3, #0]
 800c5fc:	e000      	b.n	800c600 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c5fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c600:	2300      	movs	r3, #0
}
 800c602:	4618      	mov	r0, r3
 800c604:	3714      	adds	r7, #20
 800c606:	46bd      	mov	sp, r7
 800c608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60c:	4770      	bx	lr
 800c60e:	bf00      	nop
 800c610:	40010000 	.word	0x40010000
 800c614:	40000400 	.word	0x40000400
 800c618:	40000800 	.word	0x40000800
 800c61c:	40000c00 	.word	0x40000c00
 800c620:	40010400 	.word	0x40010400
 800c624:	40001800 	.word	0x40001800
 800c628:	40014000 	.word	0x40014000
 800c62c:	4000e000 	.word	0x4000e000
 800c630:	4000e400 	.word	0x4000e400
 800c634:	00010007 	.word	0x00010007

0800c638 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b082      	sub	sp, #8
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d101      	bne.n	800c64a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c646:	2301      	movs	r3, #1
 800c648:	e049      	b.n	800c6de <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c650:	b2db      	uxtb	r3, r3
 800c652:	2b00      	cmp	r3, #0
 800c654:	d106      	bne.n	800c664 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2200      	movs	r2, #0
 800c65a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f7f9 f950 	bl	8005904 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2202      	movs	r2, #2
 800c668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681a      	ldr	r2, [r3, #0]
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	3304      	adds	r3, #4
 800c674:	4619      	mov	r1, r3
 800c676:	4610      	mov	r0, r2
 800c678:	f000 fdfa 	bl	800d270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2201      	movs	r2, #1
 800c680:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2201      	movs	r2, #1
 800c688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2201      	movs	r2, #1
 800c690:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2201      	movs	r2, #1
 800c698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2201      	movs	r2, #1
 800c6a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2201      	movs	r2, #1
 800c6a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2201      	movs	r2, #1
 800c6b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2201      	movs	r2, #1
 800c6c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2201      	movs	r2, #1
 800c6c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2201      	movs	r2, #1
 800c6d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c6dc:	2300      	movs	r3, #0
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3708      	adds	r7, #8
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}
	...

0800c6e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b084      	sub	sp, #16
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
 800c6f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d109      	bne.n	800c70c <HAL_TIM_PWM_Start+0x24>
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c6fe:	b2db      	uxtb	r3, r3
 800c700:	2b01      	cmp	r3, #1
 800c702:	bf14      	ite	ne
 800c704:	2301      	movne	r3, #1
 800c706:	2300      	moveq	r3, #0
 800c708:	b2db      	uxtb	r3, r3
 800c70a:	e03c      	b.n	800c786 <HAL_TIM_PWM_Start+0x9e>
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	2b04      	cmp	r3, #4
 800c710:	d109      	bne.n	800c726 <HAL_TIM_PWM_Start+0x3e>
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c718:	b2db      	uxtb	r3, r3
 800c71a:	2b01      	cmp	r3, #1
 800c71c:	bf14      	ite	ne
 800c71e:	2301      	movne	r3, #1
 800c720:	2300      	moveq	r3, #0
 800c722:	b2db      	uxtb	r3, r3
 800c724:	e02f      	b.n	800c786 <HAL_TIM_PWM_Start+0x9e>
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	2b08      	cmp	r3, #8
 800c72a:	d109      	bne.n	800c740 <HAL_TIM_PWM_Start+0x58>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c732:	b2db      	uxtb	r3, r3
 800c734:	2b01      	cmp	r3, #1
 800c736:	bf14      	ite	ne
 800c738:	2301      	movne	r3, #1
 800c73a:	2300      	moveq	r3, #0
 800c73c:	b2db      	uxtb	r3, r3
 800c73e:	e022      	b.n	800c786 <HAL_TIM_PWM_Start+0x9e>
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	2b0c      	cmp	r3, #12
 800c744:	d109      	bne.n	800c75a <HAL_TIM_PWM_Start+0x72>
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c74c:	b2db      	uxtb	r3, r3
 800c74e:	2b01      	cmp	r3, #1
 800c750:	bf14      	ite	ne
 800c752:	2301      	movne	r3, #1
 800c754:	2300      	moveq	r3, #0
 800c756:	b2db      	uxtb	r3, r3
 800c758:	e015      	b.n	800c786 <HAL_TIM_PWM_Start+0x9e>
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	2b10      	cmp	r3, #16
 800c75e:	d109      	bne.n	800c774 <HAL_TIM_PWM_Start+0x8c>
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c766:	b2db      	uxtb	r3, r3
 800c768:	2b01      	cmp	r3, #1
 800c76a:	bf14      	ite	ne
 800c76c:	2301      	movne	r3, #1
 800c76e:	2300      	moveq	r3, #0
 800c770:	b2db      	uxtb	r3, r3
 800c772:	e008      	b.n	800c786 <HAL_TIM_PWM_Start+0x9e>
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c77a:	b2db      	uxtb	r3, r3
 800c77c:	2b01      	cmp	r3, #1
 800c77e:	bf14      	ite	ne
 800c780:	2301      	movne	r3, #1
 800c782:	2300      	moveq	r3, #0
 800c784:	b2db      	uxtb	r3, r3
 800c786:	2b00      	cmp	r3, #0
 800c788:	d001      	beq.n	800c78e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c78a:	2301      	movs	r3, #1
 800c78c:	e0ab      	b.n	800c8e6 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d104      	bne.n	800c79e <HAL_TIM_PWM_Start+0xb6>
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2202      	movs	r2, #2
 800c798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c79c:	e023      	b.n	800c7e6 <HAL_TIM_PWM_Start+0xfe>
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	2b04      	cmp	r3, #4
 800c7a2:	d104      	bne.n	800c7ae <HAL_TIM_PWM_Start+0xc6>
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2202      	movs	r2, #2
 800c7a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c7ac:	e01b      	b.n	800c7e6 <HAL_TIM_PWM_Start+0xfe>
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	2b08      	cmp	r3, #8
 800c7b2:	d104      	bne.n	800c7be <HAL_TIM_PWM_Start+0xd6>
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2202      	movs	r2, #2
 800c7b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c7bc:	e013      	b.n	800c7e6 <HAL_TIM_PWM_Start+0xfe>
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	2b0c      	cmp	r3, #12
 800c7c2:	d104      	bne.n	800c7ce <HAL_TIM_PWM_Start+0xe6>
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2202      	movs	r2, #2
 800c7c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c7cc:	e00b      	b.n	800c7e6 <HAL_TIM_PWM_Start+0xfe>
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	2b10      	cmp	r3, #16
 800c7d2:	d104      	bne.n	800c7de <HAL_TIM_PWM_Start+0xf6>
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2202      	movs	r2, #2
 800c7d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c7dc:	e003      	b.n	800c7e6 <HAL_TIM_PWM_Start+0xfe>
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2202      	movs	r2, #2
 800c7e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	2201      	movs	r2, #1
 800c7ec:	6839      	ldr	r1, [r7, #0]
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f001 f958 	bl	800daa4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	4a3d      	ldr	r2, [pc, #244]	; (800c8f0 <HAL_TIM_PWM_Start+0x208>)
 800c7fa:	4293      	cmp	r3, r2
 800c7fc:	d013      	beq.n	800c826 <HAL_TIM_PWM_Start+0x13e>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	4a3c      	ldr	r2, [pc, #240]	; (800c8f4 <HAL_TIM_PWM_Start+0x20c>)
 800c804:	4293      	cmp	r3, r2
 800c806:	d00e      	beq.n	800c826 <HAL_TIM_PWM_Start+0x13e>
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	4a3a      	ldr	r2, [pc, #232]	; (800c8f8 <HAL_TIM_PWM_Start+0x210>)
 800c80e:	4293      	cmp	r3, r2
 800c810:	d009      	beq.n	800c826 <HAL_TIM_PWM_Start+0x13e>
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	4a39      	ldr	r2, [pc, #228]	; (800c8fc <HAL_TIM_PWM_Start+0x214>)
 800c818:	4293      	cmp	r3, r2
 800c81a:	d004      	beq.n	800c826 <HAL_TIM_PWM_Start+0x13e>
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	4a37      	ldr	r2, [pc, #220]	; (800c900 <HAL_TIM_PWM_Start+0x218>)
 800c822:	4293      	cmp	r3, r2
 800c824:	d101      	bne.n	800c82a <HAL_TIM_PWM_Start+0x142>
 800c826:	2301      	movs	r3, #1
 800c828:	e000      	b.n	800c82c <HAL_TIM_PWM_Start+0x144>
 800c82a:	2300      	movs	r3, #0
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d007      	beq.n	800c840 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c83e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	4a2a      	ldr	r2, [pc, #168]	; (800c8f0 <HAL_TIM_PWM_Start+0x208>)
 800c846:	4293      	cmp	r3, r2
 800c848:	d02c      	beq.n	800c8a4 <HAL_TIM_PWM_Start+0x1bc>
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c852:	d027      	beq.n	800c8a4 <HAL_TIM_PWM_Start+0x1bc>
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	4a2a      	ldr	r2, [pc, #168]	; (800c904 <HAL_TIM_PWM_Start+0x21c>)
 800c85a:	4293      	cmp	r3, r2
 800c85c:	d022      	beq.n	800c8a4 <HAL_TIM_PWM_Start+0x1bc>
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	4a29      	ldr	r2, [pc, #164]	; (800c908 <HAL_TIM_PWM_Start+0x220>)
 800c864:	4293      	cmp	r3, r2
 800c866:	d01d      	beq.n	800c8a4 <HAL_TIM_PWM_Start+0x1bc>
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	4a27      	ldr	r2, [pc, #156]	; (800c90c <HAL_TIM_PWM_Start+0x224>)
 800c86e:	4293      	cmp	r3, r2
 800c870:	d018      	beq.n	800c8a4 <HAL_TIM_PWM_Start+0x1bc>
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	4a1f      	ldr	r2, [pc, #124]	; (800c8f4 <HAL_TIM_PWM_Start+0x20c>)
 800c878:	4293      	cmp	r3, r2
 800c87a:	d013      	beq.n	800c8a4 <HAL_TIM_PWM_Start+0x1bc>
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	4a23      	ldr	r2, [pc, #140]	; (800c910 <HAL_TIM_PWM_Start+0x228>)
 800c882:	4293      	cmp	r3, r2
 800c884:	d00e      	beq.n	800c8a4 <HAL_TIM_PWM_Start+0x1bc>
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	4a1b      	ldr	r2, [pc, #108]	; (800c8f8 <HAL_TIM_PWM_Start+0x210>)
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d009      	beq.n	800c8a4 <HAL_TIM_PWM_Start+0x1bc>
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	4a1f      	ldr	r2, [pc, #124]	; (800c914 <HAL_TIM_PWM_Start+0x22c>)
 800c896:	4293      	cmp	r3, r2
 800c898:	d004      	beq.n	800c8a4 <HAL_TIM_PWM_Start+0x1bc>
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	4a1e      	ldr	r2, [pc, #120]	; (800c918 <HAL_TIM_PWM_Start+0x230>)
 800c8a0:	4293      	cmp	r3, r2
 800c8a2:	d115      	bne.n	800c8d0 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	689a      	ldr	r2, [r3, #8]
 800c8aa:	4b1c      	ldr	r3, [pc, #112]	; (800c91c <HAL_TIM_PWM_Start+0x234>)
 800c8ac:	4013      	ands	r3, r2
 800c8ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	2b06      	cmp	r3, #6
 800c8b4:	d015      	beq.n	800c8e2 <HAL_TIM_PWM_Start+0x1fa>
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8bc:	d011      	beq.n	800c8e2 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	681a      	ldr	r2, [r3, #0]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	f042 0201 	orr.w	r2, r2, #1
 800c8cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c8ce:	e008      	b.n	800c8e2 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	681a      	ldr	r2, [r3, #0]
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	f042 0201 	orr.w	r2, r2, #1
 800c8de:	601a      	str	r2, [r3, #0]
 800c8e0:	e000      	b.n	800c8e4 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c8e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c8e4:	2300      	movs	r3, #0
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3710      	adds	r7, #16
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}
 800c8ee:	bf00      	nop
 800c8f0:	40010000 	.word	0x40010000
 800c8f4:	40010400 	.word	0x40010400
 800c8f8:	40014000 	.word	0x40014000
 800c8fc:	40014400 	.word	0x40014400
 800c900:	40014800 	.word	0x40014800
 800c904:	40000400 	.word	0x40000400
 800c908:	40000800 	.word	0x40000800
 800c90c:	40000c00 	.word	0x40000c00
 800c910:	40001800 	.word	0x40001800
 800c914:	4000e000 	.word	0x4000e000
 800c918:	4000e400 	.word	0x4000e400
 800c91c:	00010007 	.word	0x00010007

0800c920 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b086      	sub	sp, #24
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
 800c928:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d101      	bne.n	800c934 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c930:	2301      	movs	r3, #1
 800c932:	e08f      	b.n	800ca54 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c93a:	b2db      	uxtb	r3, r3
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d106      	bne.n	800c94e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2200      	movs	r2, #0
 800c944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f7f8 fecd 	bl	80056e8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2202      	movs	r2, #2
 800c952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	6899      	ldr	r1, [r3, #8]
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681a      	ldr	r2, [r3, #0]
 800c960:	4b3e      	ldr	r3, [pc, #248]	; (800ca5c <HAL_TIM_Encoder_Init+0x13c>)
 800c962:	400b      	ands	r3, r1
 800c964:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681a      	ldr	r2, [r3, #0]
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	3304      	adds	r3, #4
 800c96e:	4619      	mov	r1, r3
 800c970:	4610      	mov	r0, r2
 800c972:	f000 fc7d 	bl	800d270 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	689b      	ldr	r3, [r3, #8]
 800c97c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	699b      	ldr	r3, [r3, #24]
 800c984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	6a1b      	ldr	r3, [r3, #32]
 800c98c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	697a      	ldr	r2, [r7, #20]
 800c994:	4313      	orrs	r3, r2
 800c996:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c998:	693a      	ldr	r2, [r7, #16]
 800c99a:	4b31      	ldr	r3, [pc, #196]	; (800ca60 <HAL_TIM_Encoder_Init+0x140>)
 800c99c:	4013      	ands	r3, r2
 800c99e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	689a      	ldr	r2, [r3, #8]
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	699b      	ldr	r3, [r3, #24]
 800c9a8:	021b      	lsls	r3, r3, #8
 800c9aa:	4313      	orrs	r3, r2
 800c9ac:	693a      	ldr	r2, [r7, #16]
 800c9ae:	4313      	orrs	r3, r2
 800c9b0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c9b2:	693a      	ldr	r2, [r7, #16]
 800c9b4:	4b2b      	ldr	r3, [pc, #172]	; (800ca64 <HAL_TIM_Encoder_Init+0x144>)
 800c9b6:	4013      	ands	r3, r2
 800c9b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c9ba:	693a      	ldr	r2, [r7, #16]
 800c9bc:	4b2a      	ldr	r3, [pc, #168]	; (800ca68 <HAL_TIM_Encoder_Init+0x148>)
 800c9be:	4013      	ands	r3, r2
 800c9c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	68da      	ldr	r2, [r3, #12]
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	69db      	ldr	r3, [r3, #28]
 800c9ca:	021b      	lsls	r3, r3, #8
 800c9cc:	4313      	orrs	r3, r2
 800c9ce:	693a      	ldr	r2, [r7, #16]
 800c9d0:	4313      	orrs	r3, r2
 800c9d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	691b      	ldr	r3, [r3, #16]
 800c9d8:	011a      	lsls	r2, r3, #4
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	6a1b      	ldr	r3, [r3, #32]
 800c9de:	031b      	lsls	r3, r3, #12
 800c9e0:	4313      	orrs	r3, r2
 800c9e2:	693a      	ldr	r2, [r7, #16]
 800c9e4:	4313      	orrs	r3, r2
 800c9e6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c9ee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c9f6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	685a      	ldr	r2, [r3, #4]
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	695b      	ldr	r3, [r3, #20]
 800ca00:	011b      	lsls	r3, r3, #4
 800ca02:	4313      	orrs	r3, r2
 800ca04:	68fa      	ldr	r2, [r7, #12]
 800ca06:	4313      	orrs	r3, r2
 800ca08:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	697a      	ldr	r2, [r7, #20]
 800ca10:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	693a      	ldr	r2, [r7, #16]
 800ca18:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	68fa      	ldr	r2, [r7, #12]
 800ca20:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2201      	movs	r2, #1
 800ca26:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2201      	movs	r2, #1
 800ca2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2201      	movs	r2, #1
 800ca36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2201      	movs	r2, #1
 800ca3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2201      	movs	r2, #1
 800ca46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2201      	movs	r2, #1
 800ca4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ca52:	2300      	movs	r3, #0
}
 800ca54:	4618      	mov	r0, r3
 800ca56:	3718      	adds	r7, #24
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}
 800ca5c:	fffebff8 	.word	0xfffebff8
 800ca60:	fffffcfc 	.word	0xfffffcfc
 800ca64:	fffff3f3 	.word	0xfffff3f3
 800ca68:	ffff0f0f 	.word	0xffff0f0f

0800ca6c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b084      	sub	sp, #16
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
 800ca74:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ca7c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ca84:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca8c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca94:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d110      	bne.n	800cabe <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ca9c:	7bfb      	ldrb	r3, [r7, #15]
 800ca9e:	2b01      	cmp	r3, #1
 800caa0:	d102      	bne.n	800caa8 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800caa2:	7b7b      	ldrb	r3, [r7, #13]
 800caa4:	2b01      	cmp	r3, #1
 800caa6:	d001      	beq.n	800caac <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800caa8:	2301      	movs	r3, #1
 800caaa:	e089      	b.n	800cbc0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2202      	movs	r2, #2
 800cab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2202      	movs	r2, #2
 800cab8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cabc:	e031      	b.n	800cb22 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	2b04      	cmp	r3, #4
 800cac2:	d110      	bne.n	800cae6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800cac4:	7bbb      	ldrb	r3, [r7, #14]
 800cac6:	2b01      	cmp	r3, #1
 800cac8:	d102      	bne.n	800cad0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800caca:	7b3b      	ldrb	r3, [r7, #12]
 800cacc:	2b01      	cmp	r3, #1
 800cace:	d001      	beq.n	800cad4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800cad0:	2301      	movs	r3, #1
 800cad2:	e075      	b.n	800cbc0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2202      	movs	r2, #2
 800cad8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2202      	movs	r2, #2
 800cae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cae4:	e01d      	b.n	800cb22 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800cae6:	7bfb      	ldrb	r3, [r7, #15]
 800cae8:	2b01      	cmp	r3, #1
 800caea:	d108      	bne.n	800cafe <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800caec:	7bbb      	ldrb	r3, [r7, #14]
 800caee:	2b01      	cmp	r3, #1
 800caf0:	d105      	bne.n	800cafe <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800caf2:	7b7b      	ldrb	r3, [r7, #13]
 800caf4:	2b01      	cmp	r3, #1
 800caf6:	d102      	bne.n	800cafe <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800caf8:	7b3b      	ldrb	r3, [r7, #12]
 800cafa:	2b01      	cmp	r3, #1
 800cafc:	d001      	beq.n	800cb02 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800cafe:	2301      	movs	r3, #1
 800cb00:	e05e      	b.n	800cbc0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	2202      	movs	r2, #2
 800cb06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	2202      	movs	r2, #2
 800cb0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2202      	movs	r2, #2
 800cb16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2202      	movs	r2, #2
 800cb1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d003      	beq.n	800cb30 <HAL_TIM_Encoder_Start_IT+0xc4>
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	2b04      	cmp	r3, #4
 800cb2c:	d010      	beq.n	800cb50 <HAL_TIM_Encoder_Start_IT+0xe4>
 800cb2e:	e01f      	b.n	800cb70 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	2201      	movs	r2, #1
 800cb36:	2100      	movs	r1, #0
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f000 ffb3 	bl	800daa4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	68da      	ldr	r2, [r3, #12]
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	f042 0202 	orr.w	r2, r2, #2
 800cb4c:	60da      	str	r2, [r3, #12]
      break;
 800cb4e:	e02e      	b.n	800cbae <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	2201      	movs	r2, #1
 800cb56:	2104      	movs	r1, #4
 800cb58:	4618      	mov	r0, r3
 800cb5a:	f000 ffa3 	bl	800daa4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	68da      	ldr	r2, [r3, #12]
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f042 0204 	orr.w	r2, r2, #4
 800cb6c:	60da      	str	r2, [r3, #12]
      break;
 800cb6e:	e01e      	b.n	800cbae <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	2201      	movs	r2, #1
 800cb76:	2100      	movs	r1, #0
 800cb78:	4618      	mov	r0, r3
 800cb7a:	f000 ff93 	bl	800daa4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	2201      	movs	r2, #1
 800cb84:	2104      	movs	r1, #4
 800cb86:	4618      	mov	r0, r3
 800cb88:	f000 ff8c 	bl	800daa4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	68da      	ldr	r2, [r3, #12]
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	f042 0202 	orr.w	r2, r2, #2
 800cb9a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	68da      	ldr	r2, [r3, #12]
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	f042 0204 	orr.w	r2, r2, #4
 800cbaa:	60da      	str	r2, [r3, #12]
      break;
 800cbac:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	681a      	ldr	r2, [r3, #0]
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f042 0201 	orr.w	r2, r2, #1
 800cbbc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800cbbe:	2300      	movs	r3, #0
}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	3710      	adds	r7, #16
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}

0800cbc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b082      	sub	sp, #8
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	691b      	ldr	r3, [r3, #16]
 800cbd6:	f003 0302 	and.w	r3, r3, #2
 800cbda:	2b02      	cmp	r3, #2
 800cbdc:	d122      	bne.n	800cc24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	68db      	ldr	r3, [r3, #12]
 800cbe4:	f003 0302 	and.w	r3, r3, #2
 800cbe8:	2b02      	cmp	r3, #2
 800cbea:	d11b      	bne.n	800cc24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	f06f 0202 	mvn.w	r2, #2
 800cbf4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	2201      	movs	r2, #1
 800cbfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	699b      	ldr	r3, [r3, #24]
 800cc02:	f003 0303 	and.w	r3, r3, #3
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d003      	beq.n	800cc12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	f000 fb12 	bl	800d234 <HAL_TIM_IC_CaptureCallback>
 800cc10:	e005      	b.n	800cc1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc12:	6878      	ldr	r0, [r7, #4]
 800cc14:	f000 fb04 	bl	800d220 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f000 fb15 	bl	800d248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2200      	movs	r2, #0
 800cc22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	691b      	ldr	r3, [r3, #16]
 800cc2a:	f003 0304 	and.w	r3, r3, #4
 800cc2e:	2b04      	cmp	r3, #4
 800cc30:	d122      	bne.n	800cc78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	68db      	ldr	r3, [r3, #12]
 800cc38:	f003 0304 	and.w	r3, r3, #4
 800cc3c:	2b04      	cmp	r3, #4
 800cc3e:	d11b      	bne.n	800cc78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	f06f 0204 	mvn.w	r2, #4
 800cc48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	2202      	movs	r2, #2
 800cc4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	699b      	ldr	r3, [r3, #24]
 800cc56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d003      	beq.n	800cc66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc5e:	6878      	ldr	r0, [r7, #4]
 800cc60:	f000 fae8 	bl	800d234 <HAL_TIM_IC_CaptureCallback>
 800cc64:	e005      	b.n	800cc72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f000 fada 	bl	800d220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc6c:	6878      	ldr	r0, [r7, #4]
 800cc6e:	f000 faeb 	bl	800d248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2200      	movs	r2, #0
 800cc76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	691b      	ldr	r3, [r3, #16]
 800cc7e:	f003 0308 	and.w	r3, r3, #8
 800cc82:	2b08      	cmp	r3, #8
 800cc84:	d122      	bne.n	800cccc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	68db      	ldr	r3, [r3, #12]
 800cc8c:	f003 0308 	and.w	r3, r3, #8
 800cc90:	2b08      	cmp	r3, #8
 800cc92:	d11b      	bne.n	800cccc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	f06f 0208 	mvn.w	r2, #8
 800cc9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	2204      	movs	r2, #4
 800cca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	69db      	ldr	r3, [r3, #28]
 800ccaa:	f003 0303 	and.w	r3, r3, #3
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d003      	beq.n	800ccba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f000 fabe 	bl	800d234 <HAL_TIM_IC_CaptureCallback>
 800ccb8:	e005      	b.n	800ccc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f000 fab0 	bl	800d220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f000 fac1 	bl	800d248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2200      	movs	r2, #0
 800ccca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	691b      	ldr	r3, [r3, #16]
 800ccd2:	f003 0310 	and.w	r3, r3, #16
 800ccd6:	2b10      	cmp	r3, #16
 800ccd8:	d122      	bne.n	800cd20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	68db      	ldr	r3, [r3, #12]
 800cce0:	f003 0310 	and.w	r3, r3, #16
 800cce4:	2b10      	cmp	r3, #16
 800cce6:	d11b      	bne.n	800cd20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f06f 0210 	mvn.w	r2, #16
 800ccf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	2208      	movs	r2, #8
 800ccf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	69db      	ldr	r3, [r3, #28]
 800ccfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d003      	beq.n	800cd0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	f000 fa94 	bl	800d234 <HAL_TIM_IC_CaptureCallback>
 800cd0c:	e005      	b.n	800cd1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f000 fa86 	bl	800d220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd14:	6878      	ldr	r0, [r7, #4]
 800cd16:	f000 fa97 	bl	800d248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	691b      	ldr	r3, [r3, #16]
 800cd26:	f003 0301 	and.w	r3, r3, #1
 800cd2a:	2b01      	cmp	r3, #1
 800cd2c:	d10e      	bne.n	800cd4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	68db      	ldr	r3, [r3, #12]
 800cd34:	f003 0301 	and.w	r3, r3, #1
 800cd38:	2b01      	cmp	r3, #1
 800cd3a:	d107      	bne.n	800cd4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f06f 0201 	mvn.w	r2, #1
 800cd44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cd46:	6878      	ldr	r0, [r7, #4]
 800cd48:	f7f3 fe9e 	bl	8000a88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	691b      	ldr	r3, [r3, #16]
 800cd52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd56:	2b80      	cmp	r3, #128	; 0x80
 800cd58:	d10e      	bne.n	800cd78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	68db      	ldr	r3, [r3, #12]
 800cd60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd64:	2b80      	cmp	r3, #128	; 0x80
 800cd66:	d107      	bne.n	800cd78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cd70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f001 f802 	bl	800dd7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	691b      	ldr	r3, [r3, #16]
 800cd7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd86:	d10e      	bne.n	800cda6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	68db      	ldr	r3, [r3, #12]
 800cd8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd92:	2b80      	cmp	r3, #128	; 0x80
 800cd94:	d107      	bne.n	800cda6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cd9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f000 fff5 	bl	800dd90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	691b      	ldr	r3, [r3, #16]
 800cdac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdb0:	2b40      	cmp	r3, #64	; 0x40
 800cdb2:	d10e      	bne.n	800cdd2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	68db      	ldr	r3, [r3, #12]
 800cdba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdbe:	2b40      	cmp	r3, #64	; 0x40
 800cdc0:	d107      	bne.n	800cdd2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cdca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f000 fa45 	bl	800d25c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	691b      	ldr	r3, [r3, #16]
 800cdd8:	f003 0320 	and.w	r3, r3, #32
 800cddc:	2b20      	cmp	r3, #32
 800cdde:	d10e      	bne.n	800cdfe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	68db      	ldr	r3, [r3, #12]
 800cde6:	f003 0320 	and.w	r3, r3, #32
 800cdea:	2b20      	cmp	r3, #32
 800cdec:	d107      	bne.n	800cdfe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	f06f 0220 	mvn.w	r2, #32
 800cdf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	f000 ffb5 	bl	800dd68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cdfe:	bf00      	nop
 800ce00:	3708      	adds	r7, #8
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd80      	pop	{r7, pc}
	...

0800ce08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b086      	sub	sp, #24
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	60f8      	str	r0, [r7, #12]
 800ce10:	60b9      	str	r1, [r7, #8]
 800ce12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ce14:	2300      	movs	r3, #0
 800ce16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce1e:	2b01      	cmp	r3, #1
 800ce20:	d101      	bne.n	800ce26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ce22:	2302      	movs	r3, #2
 800ce24:	e0ff      	b.n	800d026 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	2201      	movs	r2, #1
 800ce2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2b14      	cmp	r3, #20
 800ce32:	f200 80f0 	bhi.w	800d016 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ce36:	a201      	add	r2, pc, #4	; (adr r2, 800ce3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ce38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce3c:	0800ce91 	.word	0x0800ce91
 800ce40:	0800d017 	.word	0x0800d017
 800ce44:	0800d017 	.word	0x0800d017
 800ce48:	0800d017 	.word	0x0800d017
 800ce4c:	0800ced1 	.word	0x0800ced1
 800ce50:	0800d017 	.word	0x0800d017
 800ce54:	0800d017 	.word	0x0800d017
 800ce58:	0800d017 	.word	0x0800d017
 800ce5c:	0800cf13 	.word	0x0800cf13
 800ce60:	0800d017 	.word	0x0800d017
 800ce64:	0800d017 	.word	0x0800d017
 800ce68:	0800d017 	.word	0x0800d017
 800ce6c:	0800cf53 	.word	0x0800cf53
 800ce70:	0800d017 	.word	0x0800d017
 800ce74:	0800d017 	.word	0x0800d017
 800ce78:	0800d017 	.word	0x0800d017
 800ce7c:	0800cf95 	.word	0x0800cf95
 800ce80:	0800d017 	.word	0x0800d017
 800ce84:	0800d017 	.word	0x0800d017
 800ce88:	0800d017 	.word	0x0800d017
 800ce8c:	0800cfd5 	.word	0x0800cfd5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	68b9      	ldr	r1, [r7, #8]
 800ce96:	4618      	mov	r0, r3
 800ce98:	f000 fa90 	bl	800d3bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	699a      	ldr	r2, [r3, #24]
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	f042 0208 	orr.w	r2, r2, #8
 800ceaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	699a      	ldr	r2, [r3, #24]
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f022 0204 	bic.w	r2, r2, #4
 800ceba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	6999      	ldr	r1, [r3, #24]
 800cec2:	68bb      	ldr	r3, [r7, #8]
 800cec4:	691a      	ldr	r2, [r3, #16]
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	430a      	orrs	r2, r1
 800cecc:	619a      	str	r2, [r3, #24]
      break;
 800cece:	e0a5      	b.n	800d01c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	68b9      	ldr	r1, [r7, #8]
 800ced6:	4618      	mov	r0, r3
 800ced8:	f000 fb00 	bl	800d4dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	699a      	ldr	r2, [r3, #24]
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ceea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	699a      	ldr	r2, [r3, #24]
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cefa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	6999      	ldr	r1, [r3, #24]
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	691b      	ldr	r3, [r3, #16]
 800cf06:	021a      	lsls	r2, r3, #8
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	430a      	orrs	r2, r1
 800cf0e:	619a      	str	r2, [r3, #24]
      break;
 800cf10:	e084      	b.n	800d01c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	68b9      	ldr	r1, [r7, #8]
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f000 fb69 	bl	800d5f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	69da      	ldr	r2, [r3, #28]
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	f042 0208 	orr.w	r2, r2, #8
 800cf2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	69da      	ldr	r2, [r3, #28]
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	f022 0204 	bic.w	r2, r2, #4
 800cf3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	69d9      	ldr	r1, [r3, #28]
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	691a      	ldr	r2, [r3, #16]
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	430a      	orrs	r2, r1
 800cf4e:	61da      	str	r2, [r3, #28]
      break;
 800cf50:	e064      	b.n	800d01c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	68b9      	ldr	r1, [r7, #8]
 800cf58:	4618      	mov	r0, r3
 800cf5a:	f000 fbd1 	bl	800d700 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	69da      	ldr	r2, [r3, #28]
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cf6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	69da      	ldr	r2, [r3, #28]
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cf7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	69d9      	ldr	r1, [r3, #28]
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	691b      	ldr	r3, [r3, #16]
 800cf88:	021a      	lsls	r2, r3, #8
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	430a      	orrs	r2, r1
 800cf90:	61da      	str	r2, [r3, #28]
      break;
 800cf92:	e043      	b.n	800d01c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	68b9      	ldr	r1, [r7, #8]
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f000 fc1a 	bl	800d7d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	f042 0208 	orr.w	r2, r2, #8
 800cfae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	f022 0204 	bic.w	r2, r2, #4
 800cfbe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cfc6:	68bb      	ldr	r3, [r7, #8]
 800cfc8:	691a      	ldr	r2, [r3, #16]
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	430a      	orrs	r2, r1
 800cfd0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cfd2:	e023      	b.n	800d01c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	68b9      	ldr	r1, [r7, #8]
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f000 fc5e 	bl	800d89c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cfee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cffe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	691b      	ldr	r3, [r3, #16]
 800d00a:	021a      	lsls	r2, r3, #8
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	430a      	orrs	r2, r1
 800d012:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d014:	e002      	b.n	800d01c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d016:	2301      	movs	r3, #1
 800d018:	75fb      	strb	r3, [r7, #23]
      break;
 800d01a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	2200      	movs	r2, #0
 800d020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d024:	7dfb      	ldrb	r3, [r7, #23]
}
 800d026:	4618      	mov	r0, r3
 800d028:	3718      	adds	r7, #24
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}
 800d02e:	bf00      	nop

0800d030 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b084      	sub	sp, #16
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
 800d038:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d03a:	2300      	movs	r3, #0
 800d03c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d044:	2b01      	cmp	r3, #1
 800d046:	d101      	bne.n	800d04c <HAL_TIM_ConfigClockSource+0x1c>
 800d048:	2302      	movs	r3, #2
 800d04a:	e0dc      	b.n	800d206 <HAL_TIM_ConfigClockSource+0x1d6>
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2201      	movs	r2, #1
 800d050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2202      	movs	r2, #2
 800d058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	689b      	ldr	r3, [r3, #8]
 800d062:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d064:	68ba      	ldr	r2, [r7, #8]
 800d066:	4b6a      	ldr	r3, [pc, #424]	; (800d210 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d068:	4013      	ands	r3, r2
 800d06a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d072:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	68ba      	ldr	r2, [r7, #8]
 800d07a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	4a64      	ldr	r2, [pc, #400]	; (800d214 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d082:	4293      	cmp	r3, r2
 800d084:	f000 80a9 	beq.w	800d1da <HAL_TIM_ConfigClockSource+0x1aa>
 800d088:	4a62      	ldr	r2, [pc, #392]	; (800d214 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d08a:	4293      	cmp	r3, r2
 800d08c:	f200 80ae 	bhi.w	800d1ec <HAL_TIM_ConfigClockSource+0x1bc>
 800d090:	4a61      	ldr	r2, [pc, #388]	; (800d218 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d092:	4293      	cmp	r3, r2
 800d094:	f000 80a1 	beq.w	800d1da <HAL_TIM_ConfigClockSource+0x1aa>
 800d098:	4a5f      	ldr	r2, [pc, #380]	; (800d218 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d09a:	4293      	cmp	r3, r2
 800d09c:	f200 80a6 	bhi.w	800d1ec <HAL_TIM_ConfigClockSource+0x1bc>
 800d0a0:	4a5e      	ldr	r2, [pc, #376]	; (800d21c <HAL_TIM_ConfigClockSource+0x1ec>)
 800d0a2:	4293      	cmp	r3, r2
 800d0a4:	f000 8099 	beq.w	800d1da <HAL_TIM_ConfigClockSource+0x1aa>
 800d0a8:	4a5c      	ldr	r2, [pc, #368]	; (800d21c <HAL_TIM_ConfigClockSource+0x1ec>)
 800d0aa:	4293      	cmp	r3, r2
 800d0ac:	f200 809e 	bhi.w	800d1ec <HAL_TIM_ConfigClockSource+0x1bc>
 800d0b0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d0b4:	f000 8091 	beq.w	800d1da <HAL_TIM_ConfigClockSource+0x1aa>
 800d0b8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d0bc:	f200 8096 	bhi.w	800d1ec <HAL_TIM_ConfigClockSource+0x1bc>
 800d0c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d0c4:	f000 8089 	beq.w	800d1da <HAL_TIM_ConfigClockSource+0x1aa>
 800d0c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d0cc:	f200 808e 	bhi.w	800d1ec <HAL_TIM_ConfigClockSource+0x1bc>
 800d0d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d0d4:	d03e      	beq.n	800d154 <HAL_TIM_ConfigClockSource+0x124>
 800d0d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d0da:	f200 8087 	bhi.w	800d1ec <HAL_TIM_ConfigClockSource+0x1bc>
 800d0de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d0e2:	f000 8086 	beq.w	800d1f2 <HAL_TIM_ConfigClockSource+0x1c2>
 800d0e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d0ea:	d87f      	bhi.n	800d1ec <HAL_TIM_ConfigClockSource+0x1bc>
 800d0ec:	2b70      	cmp	r3, #112	; 0x70
 800d0ee:	d01a      	beq.n	800d126 <HAL_TIM_ConfigClockSource+0xf6>
 800d0f0:	2b70      	cmp	r3, #112	; 0x70
 800d0f2:	d87b      	bhi.n	800d1ec <HAL_TIM_ConfigClockSource+0x1bc>
 800d0f4:	2b60      	cmp	r3, #96	; 0x60
 800d0f6:	d050      	beq.n	800d19a <HAL_TIM_ConfigClockSource+0x16a>
 800d0f8:	2b60      	cmp	r3, #96	; 0x60
 800d0fa:	d877      	bhi.n	800d1ec <HAL_TIM_ConfigClockSource+0x1bc>
 800d0fc:	2b50      	cmp	r3, #80	; 0x50
 800d0fe:	d03c      	beq.n	800d17a <HAL_TIM_ConfigClockSource+0x14a>
 800d100:	2b50      	cmp	r3, #80	; 0x50
 800d102:	d873      	bhi.n	800d1ec <HAL_TIM_ConfigClockSource+0x1bc>
 800d104:	2b40      	cmp	r3, #64	; 0x40
 800d106:	d058      	beq.n	800d1ba <HAL_TIM_ConfigClockSource+0x18a>
 800d108:	2b40      	cmp	r3, #64	; 0x40
 800d10a:	d86f      	bhi.n	800d1ec <HAL_TIM_ConfigClockSource+0x1bc>
 800d10c:	2b30      	cmp	r3, #48	; 0x30
 800d10e:	d064      	beq.n	800d1da <HAL_TIM_ConfigClockSource+0x1aa>
 800d110:	2b30      	cmp	r3, #48	; 0x30
 800d112:	d86b      	bhi.n	800d1ec <HAL_TIM_ConfigClockSource+0x1bc>
 800d114:	2b20      	cmp	r3, #32
 800d116:	d060      	beq.n	800d1da <HAL_TIM_ConfigClockSource+0x1aa>
 800d118:	2b20      	cmp	r3, #32
 800d11a:	d867      	bhi.n	800d1ec <HAL_TIM_ConfigClockSource+0x1bc>
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d05c      	beq.n	800d1da <HAL_TIM_ConfigClockSource+0x1aa>
 800d120:	2b10      	cmp	r3, #16
 800d122:	d05a      	beq.n	800d1da <HAL_TIM_ConfigClockSource+0x1aa>
 800d124:	e062      	b.n	800d1ec <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d136:	f000 fc95 	bl	800da64 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	689b      	ldr	r3, [r3, #8]
 800d140:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d142:	68bb      	ldr	r3, [r7, #8]
 800d144:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d148:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	68ba      	ldr	r2, [r7, #8]
 800d150:	609a      	str	r2, [r3, #8]
      break;
 800d152:	e04f      	b.n	800d1f4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d164:	f000 fc7e 	bl	800da64 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	689a      	ldr	r2, [r3, #8]
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d176:	609a      	str	r2, [r3, #8]
      break;
 800d178:	e03c      	b.n	800d1f4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d186:	461a      	mov	r2, r3
 800d188:	f000 fbee 	bl	800d968 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	2150      	movs	r1, #80	; 0x50
 800d192:	4618      	mov	r0, r3
 800d194:	f000 fc48 	bl	800da28 <TIM_ITRx_SetConfig>
      break;
 800d198:	e02c      	b.n	800d1f4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d1a6:	461a      	mov	r2, r3
 800d1a8:	f000 fc0d 	bl	800d9c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	2160      	movs	r1, #96	; 0x60
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f000 fc38 	bl	800da28 <TIM_ITRx_SetConfig>
      break;
 800d1b8:	e01c      	b.n	800d1f4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d1c6:	461a      	mov	r2, r3
 800d1c8:	f000 fbce 	bl	800d968 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	2140      	movs	r1, #64	; 0x40
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f000 fc28 	bl	800da28 <TIM_ITRx_SetConfig>
      break;
 800d1d8:	e00c      	b.n	800d1f4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681a      	ldr	r2, [r3, #0]
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	4619      	mov	r1, r3
 800d1e4:	4610      	mov	r0, r2
 800d1e6:	f000 fc1f 	bl	800da28 <TIM_ITRx_SetConfig>
      break;
 800d1ea:	e003      	b.n	800d1f4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d1ec:	2301      	movs	r3, #1
 800d1ee:	73fb      	strb	r3, [r7, #15]
      break;
 800d1f0:	e000      	b.n	800d1f4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d1f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2201      	movs	r2, #1
 800d1f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2200      	movs	r2, #0
 800d200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d204:	7bfb      	ldrb	r3, [r7, #15]
}
 800d206:	4618      	mov	r0, r3
 800d208:	3710      	adds	r7, #16
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}
 800d20e:	bf00      	nop
 800d210:	ffceff88 	.word	0xffceff88
 800d214:	00100040 	.word	0x00100040
 800d218:	00100030 	.word	0x00100030
 800d21c:	00100020 	.word	0x00100020

0800d220 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d220:	b480      	push	{r7}
 800d222:	b083      	sub	sp, #12
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d228:	bf00      	nop
 800d22a:	370c      	adds	r7, #12
 800d22c:	46bd      	mov	sp, r7
 800d22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d232:	4770      	bx	lr

0800d234 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d234:	b480      	push	{r7}
 800d236:	b083      	sub	sp, #12
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d23c:	bf00      	nop
 800d23e:	370c      	adds	r7, #12
 800d240:	46bd      	mov	sp, r7
 800d242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d246:	4770      	bx	lr

0800d248 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d248:	b480      	push	{r7}
 800d24a:	b083      	sub	sp, #12
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d250:	bf00      	nop
 800d252:	370c      	adds	r7, #12
 800d254:	46bd      	mov	sp, r7
 800d256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25a:	4770      	bx	lr

0800d25c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d25c:	b480      	push	{r7}
 800d25e:	b083      	sub	sp, #12
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d264:	bf00      	nop
 800d266:	370c      	adds	r7, #12
 800d268:	46bd      	mov	sp, r7
 800d26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26e:	4770      	bx	lr

0800d270 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d270:	b480      	push	{r7}
 800d272:	b085      	sub	sp, #20
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
 800d278:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	4a44      	ldr	r2, [pc, #272]	; (800d394 <TIM_Base_SetConfig+0x124>)
 800d284:	4293      	cmp	r3, r2
 800d286:	d013      	beq.n	800d2b0 <TIM_Base_SetConfig+0x40>
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d28e:	d00f      	beq.n	800d2b0 <TIM_Base_SetConfig+0x40>
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	4a41      	ldr	r2, [pc, #260]	; (800d398 <TIM_Base_SetConfig+0x128>)
 800d294:	4293      	cmp	r3, r2
 800d296:	d00b      	beq.n	800d2b0 <TIM_Base_SetConfig+0x40>
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	4a40      	ldr	r2, [pc, #256]	; (800d39c <TIM_Base_SetConfig+0x12c>)
 800d29c:	4293      	cmp	r3, r2
 800d29e:	d007      	beq.n	800d2b0 <TIM_Base_SetConfig+0x40>
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	4a3f      	ldr	r2, [pc, #252]	; (800d3a0 <TIM_Base_SetConfig+0x130>)
 800d2a4:	4293      	cmp	r3, r2
 800d2a6:	d003      	beq.n	800d2b0 <TIM_Base_SetConfig+0x40>
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	4a3e      	ldr	r2, [pc, #248]	; (800d3a4 <TIM_Base_SetConfig+0x134>)
 800d2ac:	4293      	cmp	r3, r2
 800d2ae:	d108      	bne.n	800d2c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	685b      	ldr	r3, [r3, #4]
 800d2bc:	68fa      	ldr	r2, [r7, #12]
 800d2be:	4313      	orrs	r3, r2
 800d2c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	4a33      	ldr	r2, [pc, #204]	; (800d394 <TIM_Base_SetConfig+0x124>)
 800d2c6:	4293      	cmp	r3, r2
 800d2c8:	d027      	beq.n	800d31a <TIM_Base_SetConfig+0xaa>
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d2d0:	d023      	beq.n	800d31a <TIM_Base_SetConfig+0xaa>
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	4a30      	ldr	r2, [pc, #192]	; (800d398 <TIM_Base_SetConfig+0x128>)
 800d2d6:	4293      	cmp	r3, r2
 800d2d8:	d01f      	beq.n	800d31a <TIM_Base_SetConfig+0xaa>
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	4a2f      	ldr	r2, [pc, #188]	; (800d39c <TIM_Base_SetConfig+0x12c>)
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	d01b      	beq.n	800d31a <TIM_Base_SetConfig+0xaa>
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	4a2e      	ldr	r2, [pc, #184]	; (800d3a0 <TIM_Base_SetConfig+0x130>)
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	d017      	beq.n	800d31a <TIM_Base_SetConfig+0xaa>
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	4a2d      	ldr	r2, [pc, #180]	; (800d3a4 <TIM_Base_SetConfig+0x134>)
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	d013      	beq.n	800d31a <TIM_Base_SetConfig+0xaa>
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	4a2c      	ldr	r2, [pc, #176]	; (800d3a8 <TIM_Base_SetConfig+0x138>)
 800d2f6:	4293      	cmp	r3, r2
 800d2f8:	d00f      	beq.n	800d31a <TIM_Base_SetConfig+0xaa>
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	4a2b      	ldr	r2, [pc, #172]	; (800d3ac <TIM_Base_SetConfig+0x13c>)
 800d2fe:	4293      	cmp	r3, r2
 800d300:	d00b      	beq.n	800d31a <TIM_Base_SetConfig+0xaa>
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	4a2a      	ldr	r2, [pc, #168]	; (800d3b0 <TIM_Base_SetConfig+0x140>)
 800d306:	4293      	cmp	r3, r2
 800d308:	d007      	beq.n	800d31a <TIM_Base_SetConfig+0xaa>
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	4a29      	ldr	r2, [pc, #164]	; (800d3b4 <TIM_Base_SetConfig+0x144>)
 800d30e:	4293      	cmp	r3, r2
 800d310:	d003      	beq.n	800d31a <TIM_Base_SetConfig+0xaa>
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	4a28      	ldr	r2, [pc, #160]	; (800d3b8 <TIM_Base_SetConfig+0x148>)
 800d316:	4293      	cmp	r3, r2
 800d318:	d108      	bne.n	800d32c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d320:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	68db      	ldr	r3, [r3, #12]
 800d326:	68fa      	ldr	r2, [r7, #12]
 800d328:	4313      	orrs	r3, r2
 800d32a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	695b      	ldr	r3, [r3, #20]
 800d336:	4313      	orrs	r3, r2
 800d338:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	68fa      	ldr	r2, [r7, #12]
 800d33e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	689a      	ldr	r2, [r3, #8]
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	681a      	ldr	r2, [r3, #0]
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	4a10      	ldr	r2, [pc, #64]	; (800d394 <TIM_Base_SetConfig+0x124>)
 800d354:	4293      	cmp	r3, r2
 800d356:	d00f      	beq.n	800d378 <TIM_Base_SetConfig+0x108>
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	4a12      	ldr	r2, [pc, #72]	; (800d3a4 <TIM_Base_SetConfig+0x134>)
 800d35c:	4293      	cmp	r3, r2
 800d35e:	d00b      	beq.n	800d378 <TIM_Base_SetConfig+0x108>
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	4a11      	ldr	r2, [pc, #68]	; (800d3a8 <TIM_Base_SetConfig+0x138>)
 800d364:	4293      	cmp	r3, r2
 800d366:	d007      	beq.n	800d378 <TIM_Base_SetConfig+0x108>
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	4a10      	ldr	r2, [pc, #64]	; (800d3ac <TIM_Base_SetConfig+0x13c>)
 800d36c:	4293      	cmp	r3, r2
 800d36e:	d003      	beq.n	800d378 <TIM_Base_SetConfig+0x108>
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	4a0f      	ldr	r2, [pc, #60]	; (800d3b0 <TIM_Base_SetConfig+0x140>)
 800d374:	4293      	cmp	r3, r2
 800d376:	d103      	bne.n	800d380 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	691a      	ldr	r2, [r3, #16]
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2201      	movs	r2, #1
 800d384:	615a      	str	r2, [r3, #20]
}
 800d386:	bf00      	nop
 800d388:	3714      	adds	r7, #20
 800d38a:	46bd      	mov	sp, r7
 800d38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d390:	4770      	bx	lr
 800d392:	bf00      	nop
 800d394:	40010000 	.word	0x40010000
 800d398:	40000400 	.word	0x40000400
 800d39c:	40000800 	.word	0x40000800
 800d3a0:	40000c00 	.word	0x40000c00
 800d3a4:	40010400 	.word	0x40010400
 800d3a8:	40014000 	.word	0x40014000
 800d3ac:	40014400 	.word	0x40014400
 800d3b0:	40014800 	.word	0x40014800
 800d3b4:	4000e000 	.word	0x4000e000
 800d3b8:	4000e400 	.word	0x4000e400

0800d3bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d3bc:	b480      	push	{r7}
 800d3be:	b087      	sub	sp, #28
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
 800d3c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	6a1b      	ldr	r3, [r3, #32]
 800d3ca:	f023 0201 	bic.w	r2, r3, #1
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	6a1b      	ldr	r3, [r3, #32]
 800d3d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	685b      	ldr	r3, [r3, #4]
 800d3dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	699b      	ldr	r3, [r3, #24]
 800d3e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d3e4:	68fa      	ldr	r2, [r7, #12]
 800d3e6:	4b37      	ldr	r3, [pc, #220]	; (800d4c4 <TIM_OC1_SetConfig+0x108>)
 800d3e8:	4013      	ands	r3, r2
 800d3ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	f023 0303 	bic.w	r3, r3, #3
 800d3f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	68fa      	ldr	r2, [r7, #12]
 800d3fa:	4313      	orrs	r3, r2
 800d3fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d3fe:	697b      	ldr	r3, [r7, #20]
 800d400:	f023 0302 	bic.w	r3, r3, #2
 800d404:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	689b      	ldr	r3, [r3, #8]
 800d40a:	697a      	ldr	r2, [r7, #20]
 800d40c:	4313      	orrs	r3, r2
 800d40e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	4a2d      	ldr	r2, [pc, #180]	; (800d4c8 <TIM_OC1_SetConfig+0x10c>)
 800d414:	4293      	cmp	r3, r2
 800d416:	d00f      	beq.n	800d438 <TIM_OC1_SetConfig+0x7c>
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	4a2c      	ldr	r2, [pc, #176]	; (800d4cc <TIM_OC1_SetConfig+0x110>)
 800d41c:	4293      	cmp	r3, r2
 800d41e:	d00b      	beq.n	800d438 <TIM_OC1_SetConfig+0x7c>
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	4a2b      	ldr	r2, [pc, #172]	; (800d4d0 <TIM_OC1_SetConfig+0x114>)
 800d424:	4293      	cmp	r3, r2
 800d426:	d007      	beq.n	800d438 <TIM_OC1_SetConfig+0x7c>
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	4a2a      	ldr	r2, [pc, #168]	; (800d4d4 <TIM_OC1_SetConfig+0x118>)
 800d42c:	4293      	cmp	r3, r2
 800d42e:	d003      	beq.n	800d438 <TIM_OC1_SetConfig+0x7c>
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	4a29      	ldr	r2, [pc, #164]	; (800d4d8 <TIM_OC1_SetConfig+0x11c>)
 800d434:	4293      	cmp	r3, r2
 800d436:	d10c      	bne.n	800d452 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d438:	697b      	ldr	r3, [r7, #20]
 800d43a:	f023 0308 	bic.w	r3, r3, #8
 800d43e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	68db      	ldr	r3, [r3, #12]
 800d444:	697a      	ldr	r2, [r7, #20]
 800d446:	4313      	orrs	r3, r2
 800d448:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d44a:	697b      	ldr	r3, [r7, #20]
 800d44c:	f023 0304 	bic.w	r3, r3, #4
 800d450:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	4a1c      	ldr	r2, [pc, #112]	; (800d4c8 <TIM_OC1_SetConfig+0x10c>)
 800d456:	4293      	cmp	r3, r2
 800d458:	d00f      	beq.n	800d47a <TIM_OC1_SetConfig+0xbe>
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	4a1b      	ldr	r2, [pc, #108]	; (800d4cc <TIM_OC1_SetConfig+0x110>)
 800d45e:	4293      	cmp	r3, r2
 800d460:	d00b      	beq.n	800d47a <TIM_OC1_SetConfig+0xbe>
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	4a1a      	ldr	r2, [pc, #104]	; (800d4d0 <TIM_OC1_SetConfig+0x114>)
 800d466:	4293      	cmp	r3, r2
 800d468:	d007      	beq.n	800d47a <TIM_OC1_SetConfig+0xbe>
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	4a19      	ldr	r2, [pc, #100]	; (800d4d4 <TIM_OC1_SetConfig+0x118>)
 800d46e:	4293      	cmp	r3, r2
 800d470:	d003      	beq.n	800d47a <TIM_OC1_SetConfig+0xbe>
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	4a18      	ldr	r2, [pc, #96]	; (800d4d8 <TIM_OC1_SetConfig+0x11c>)
 800d476:	4293      	cmp	r3, r2
 800d478:	d111      	bne.n	800d49e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d47a:	693b      	ldr	r3, [r7, #16]
 800d47c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d480:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d482:	693b      	ldr	r3, [r7, #16]
 800d484:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d488:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	695b      	ldr	r3, [r3, #20]
 800d48e:	693a      	ldr	r2, [r7, #16]
 800d490:	4313      	orrs	r3, r2
 800d492:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	699b      	ldr	r3, [r3, #24]
 800d498:	693a      	ldr	r2, [r7, #16]
 800d49a:	4313      	orrs	r3, r2
 800d49c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	693a      	ldr	r2, [r7, #16]
 800d4a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	68fa      	ldr	r2, [r7, #12]
 800d4a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	685a      	ldr	r2, [r3, #4]
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	697a      	ldr	r2, [r7, #20]
 800d4b6:	621a      	str	r2, [r3, #32]
}
 800d4b8:	bf00      	nop
 800d4ba:	371c      	adds	r7, #28
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c2:	4770      	bx	lr
 800d4c4:	fffeff8f 	.word	0xfffeff8f
 800d4c8:	40010000 	.word	0x40010000
 800d4cc:	40010400 	.word	0x40010400
 800d4d0:	40014000 	.word	0x40014000
 800d4d4:	40014400 	.word	0x40014400
 800d4d8:	40014800 	.word	0x40014800

0800d4dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d4dc:	b480      	push	{r7}
 800d4de:	b087      	sub	sp, #28
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
 800d4e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6a1b      	ldr	r3, [r3, #32]
 800d4ea:	f023 0210 	bic.w	r2, r3, #16
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6a1b      	ldr	r3, [r3, #32]
 800d4f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	685b      	ldr	r3, [r3, #4]
 800d4fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	699b      	ldr	r3, [r3, #24]
 800d502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d504:	68fa      	ldr	r2, [r7, #12]
 800d506:	4b34      	ldr	r3, [pc, #208]	; (800d5d8 <TIM_OC2_SetConfig+0xfc>)
 800d508:	4013      	ands	r3, r2
 800d50a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d512:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	021b      	lsls	r3, r3, #8
 800d51a:	68fa      	ldr	r2, [r7, #12]
 800d51c:	4313      	orrs	r3, r2
 800d51e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d520:	697b      	ldr	r3, [r7, #20]
 800d522:	f023 0320 	bic.w	r3, r3, #32
 800d526:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	689b      	ldr	r3, [r3, #8]
 800d52c:	011b      	lsls	r3, r3, #4
 800d52e:	697a      	ldr	r2, [r7, #20]
 800d530:	4313      	orrs	r3, r2
 800d532:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	4a29      	ldr	r2, [pc, #164]	; (800d5dc <TIM_OC2_SetConfig+0x100>)
 800d538:	4293      	cmp	r3, r2
 800d53a:	d003      	beq.n	800d544 <TIM_OC2_SetConfig+0x68>
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	4a28      	ldr	r2, [pc, #160]	; (800d5e0 <TIM_OC2_SetConfig+0x104>)
 800d540:	4293      	cmp	r3, r2
 800d542:	d10d      	bne.n	800d560 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d544:	697b      	ldr	r3, [r7, #20]
 800d546:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d54a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	68db      	ldr	r3, [r3, #12]
 800d550:	011b      	lsls	r3, r3, #4
 800d552:	697a      	ldr	r2, [r7, #20]
 800d554:	4313      	orrs	r3, r2
 800d556:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d558:	697b      	ldr	r3, [r7, #20]
 800d55a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d55e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	4a1e      	ldr	r2, [pc, #120]	; (800d5dc <TIM_OC2_SetConfig+0x100>)
 800d564:	4293      	cmp	r3, r2
 800d566:	d00f      	beq.n	800d588 <TIM_OC2_SetConfig+0xac>
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	4a1d      	ldr	r2, [pc, #116]	; (800d5e0 <TIM_OC2_SetConfig+0x104>)
 800d56c:	4293      	cmp	r3, r2
 800d56e:	d00b      	beq.n	800d588 <TIM_OC2_SetConfig+0xac>
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	4a1c      	ldr	r2, [pc, #112]	; (800d5e4 <TIM_OC2_SetConfig+0x108>)
 800d574:	4293      	cmp	r3, r2
 800d576:	d007      	beq.n	800d588 <TIM_OC2_SetConfig+0xac>
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	4a1b      	ldr	r2, [pc, #108]	; (800d5e8 <TIM_OC2_SetConfig+0x10c>)
 800d57c:	4293      	cmp	r3, r2
 800d57e:	d003      	beq.n	800d588 <TIM_OC2_SetConfig+0xac>
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	4a1a      	ldr	r2, [pc, #104]	; (800d5ec <TIM_OC2_SetConfig+0x110>)
 800d584:	4293      	cmp	r3, r2
 800d586:	d113      	bne.n	800d5b0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d588:	693b      	ldr	r3, [r7, #16]
 800d58a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d58e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d590:	693b      	ldr	r3, [r7, #16]
 800d592:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d596:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	695b      	ldr	r3, [r3, #20]
 800d59c:	009b      	lsls	r3, r3, #2
 800d59e:	693a      	ldr	r2, [r7, #16]
 800d5a0:	4313      	orrs	r3, r2
 800d5a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	699b      	ldr	r3, [r3, #24]
 800d5a8:	009b      	lsls	r3, r3, #2
 800d5aa:	693a      	ldr	r2, [r7, #16]
 800d5ac:	4313      	orrs	r3, r2
 800d5ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	693a      	ldr	r2, [r7, #16]
 800d5b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	68fa      	ldr	r2, [r7, #12]
 800d5ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	685a      	ldr	r2, [r3, #4]
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	697a      	ldr	r2, [r7, #20]
 800d5c8:	621a      	str	r2, [r3, #32]
}
 800d5ca:	bf00      	nop
 800d5cc:	371c      	adds	r7, #28
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d4:	4770      	bx	lr
 800d5d6:	bf00      	nop
 800d5d8:	feff8fff 	.word	0xfeff8fff
 800d5dc:	40010000 	.word	0x40010000
 800d5e0:	40010400 	.word	0x40010400
 800d5e4:	40014000 	.word	0x40014000
 800d5e8:	40014400 	.word	0x40014400
 800d5ec:	40014800 	.word	0x40014800

0800d5f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d5f0:	b480      	push	{r7}
 800d5f2:	b087      	sub	sp, #28
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	6a1b      	ldr	r3, [r3, #32]
 800d5fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6a1b      	ldr	r3, [r3, #32]
 800d60a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	685b      	ldr	r3, [r3, #4]
 800d610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	69db      	ldr	r3, [r3, #28]
 800d616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d618:	68fa      	ldr	r2, [r7, #12]
 800d61a:	4b33      	ldr	r3, [pc, #204]	; (800d6e8 <TIM_OC3_SetConfig+0xf8>)
 800d61c:	4013      	ands	r3, r2
 800d61e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	f023 0303 	bic.w	r3, r3, #3
 800d626:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	68fa      	ldr	r2, [r7, #12]
 800d62e:	4313      	orrs	r3, r2
 800d630:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d638:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	689b      	ldr	r3, [r3, #8]
 800d63e:	021b      	lsls	r3, r3, #8
 800d640:	697a      	ldr	r2, [r7, #20]
 800d642:	4313      	orrs	r3, r2
 800d644:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	4a28      	ldr	r2, [pc, #160]	; (800d6ec <TIM_OC3_SetConfig+0xfc>)
 800d64a:	4293      	cmp	r3, r2
 800d64c:	d003      	beq.n	800d656 <TIM_OC3_SetConfig+0x66>
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	4a27      	ldr	r2, [pc, #156]	; (800d6f0 <TIM_OC3_SetConfig+0x100>)
 800d652:	4293      	cmp	r3, r2
 800d654:	d10d      	bne.n	800d672 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d65c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	68db      	ldr	r3, [r3, #12]
 800d662:	021b      	lsls	r3, r3, #8
 800d664:	697a      	ldr	r2, [r7, #20]
 800d666:	4313      	orrs	r3, r2
 800d668:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d670:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	4a1d      	ldr	r2, [pc, #116]	; (800d6ec <TIM_OC3_SetConfig+0xfc>)
 800d676:	4293      	cmp	r3, r2
 800d678:	d00f      	beq.n	800d69a <TIM_OC3_SetConfig+0xaa>
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	4a1c      	ldr	r2, [pc, #112]	; (800d6f0 <TIM_OC3_SetConfig+0x100>)
 800d67e:	4293      	cmp	r3, r2
 800d680:	d00b      	beq.n	800d69a <TIM_OC3_SetConfig+0xaa>
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	4a1b      	ldr	r2, [pc, #108]	; (800d6f4 <TIM_OC3_SetConfig+0x104>)
 800d686:	4293      	cmp	r3, r2
 800d688:	d007      	beq.n	800d69a <TIM_OC3_SetConfig+0xaa>
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	4a1a      	ldr	r2, [pc, #104]	; (800d6f8 <TIM_OC3_SetConfig+0x108>)
 800d68e:	4293      	cmp	r3, r2
 800d690:	d003      	beq.n	800d69a <TIM_OC3_SetConfig+0xaa>
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	4a19      	ldr	r2, [pc, #100]	; (800d6fc <TIM_OC3_SetConfig+0x10c>)
 800d696:	4293      	cmp	r3, r2
 800d698:	d113      	bne.n	800d6c2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d69a:	693b      	ldr	r3, [r7, #16]
 800d69c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d6a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d6a2:	693b      	ldr	r3, [r7, #16]
 800d6a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d6a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	695b      	ldr	r3, [r3, #20]
 800d6ae:	011b      	lsls	r3, r3, #4
 800d6b0:	693a      	ldr	r2, [r7, #16]
 800d6b2:	4313      	orrs	r3, r2
 800d6b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	699b      	ldr	r3, [r3, #24]
 800d6ba:	011b      	lsls	r3, r3, #4
 800d6bc:	693a      	ldr	r2, [r7, #16]
 800d6be:	4313      	orrs	r3, r2
 800d6c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	693a      	ldr	r2, [r7, #16]
 800d6c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	68fa      	ldr	r2, [r7, #12]
 800d6cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	685a      	ldr	r2, [r3, #4]
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	697a      	ldr	r2, [r7, #20]
 800d6da:	621a      	str	r2, [r3, #32]
}
 800d6dc:	bf00      	nop
 800d6de:	371c      	adds	r7, #28
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e6:	4770      	bx	lr
 800d6e8:	fffeff8f 	.word	0xfffeff8f
 800d6ec:	40010000 	.word	0x40010000
 800d6f0:	40010400 	.word	0x40010400
 800d6f4:	40014000 	.word	0x40014000
 800d6f8:	40014400 	.word	0x40014400
 800d6fc:	40014800 	.word	0x40014800

0800d700 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d700:	b480      	push	{r7}
 800d702:	b087      	sub	sp, #28
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
 800d708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	6a1b      	ldr	r3, [r3, #32]
 800d70e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	6a1b      	ldr	r3, [r3, #32]
 800d71a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	685b      	ldr	r3, [r3, #4]
 800d720:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	69db      	ldr	r3, [r3, #28]
 800d726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d728:	68fa      	ldr	r2, [r7, #12]
 800d72a:	4b24      	ldr	r3, [pc, #144]	; (800d7bc <TIM_OC4_SetConfig+0xbc>)
 800d72c:	4013      	ands	r3, r2
 800d72e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d736:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	021b      	lsls	r3, r3, #8
 800d73e:	68fa      	ldr	r2, [r7, #12]
 800d740:	4313      	orrs	r3, r2
 800d742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d744:	693b      	ldr	r3, [r7, #16]
 800d746:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d74a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	689b      	ldr	r3, [r3, #8]
 800d750:	031b      	lsls	r3, r3, #12
 800d752:	693a      	ldr	r2, [r7, #16]
 800d754:	4313      	orrs	r3, r2
 800d756:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	4a19      	ldr	r2, [pc, #100]	; (800d7c0 <TIM_OC4_SetConfig+0xc0>)
 800d75c:	4293      	cmp	r3, r2
 800d75e:	d00f      	beq.n	800d780 <TIM_OC4_SetConfig+0x80>
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	4a18      	ldr	r2, [pc, #96]	; (800d7c4 <TIM_OC4_SetConfig+0xc4>)
 800d764:	4293      	cmp	r3, r2
 800d766:	d00b      	beq.n	800d780 <TIM_OC4_SetConfig+0x80>
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	4a17      	ldr	r2, [pc, #92]	; (800d7c8 <TIM_OC4_SetConfig+0xc8>)
 800d76c:	4293      	cmp	r3, r2
 800d76e:	d007      	beq.n	800d780 <TIM_OC4_SetConfig+0x80>
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	4a16      	ldr	r2, [pc, #88]	; (800d7cc <TIM_OC4_SetConfig+0xcc>)
 800d774:	4293      	cmp	r3, r2
 800d776:	d003      	beq.n	800d780 <TIM_OC4_SetConfig+0x80>
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	4a15      	ldr	r2, [pc, #84]	; (800d7d0 <TIM_OC4_SetConfig+0xd0>)
 800d77c:	4293      	cmp	r3, r2
 800d77e:	d109      	bne.n	800d794 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d780:	697b      	ldr	r3, [r7, #20]
 800d782:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d786:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	695b      	ldr	r3, [r3, #20]
 800d78c:	019b      	lsls	r3, r3, #6
 800d78e:	697a      	ldr	r2, [r7, #20]
 800d790:	4313      	orrs	r3, r2
 800d792:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	697a      	ldr	r2, [r7, #20]
 800d798:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	68fa      	ldr	r2, [r7, #12]
 800d79e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	685a      	ldr	r2, [r3, #4]
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	693a      	ldr	r2, [r7, #16]
 800d7ac:	621a      	str	r2, [r3, #32]
}
 800d7ae:	bf00      	nop
 800d7b0:	371c      	adds	r7, #28
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b8:	4770      	bx	lr
 800d7ba:	bf00      	nop
 800d7bc:	feff8fff 	.word	0xfeff8fff
 800d7c0:	40010000 	.word	0x40010000
 800d7c4:	40010400 	.word	0x40010400
 800d7c8:	40014000 	.word	0x40014000
 800d7cc:	40014400 	.word	0x40014400
 800d7d0:	40014800 	.word	0x40014800

0800d7d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d7d4:	b480      	push	{r7}
 800d7d6:	b087      	sub	sp, #28
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
 800d7dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	6a1b      	ldr	r3, [r3, #32]
 800d7e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	6a1b      	ldr	r3, [r3, #32]
 800d7ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	685b      	ldr	r3, [r3, #4]
 800d7f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d7fc:	68fa      	ldr	r2, [r7, #12]
 800d7fe:	4b21      	ldr	r3, [pc, #132]	; (800d884 <TIM_OC5_SetConfig+0xb0>)
 800d800:	4013      	ands	r3, r2
 800d802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	68fa      	ldr	r2, [r7, #12]
 800d80a:	4313      	orrs	r3, r2
 800d80c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d80e:	693b      	ldr	r3, [r7, #16]
 800d810:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d814:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	689b      	ldr	r3, [r3, #8]
 800d81a:	041b      	lsls	r3, r3, #16
 800d81c:	693a      	ldr	r2, [r7, #16]
 800d81e:	4313      	orrs	r3, r2
 800d820:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	4a18      	ldr	r2, [pc, #96]	; (800d888 <TIM_OC5_SetConfig+0xb4>)
 800d826:	4293      	cmp	r3, r2
 800d828:	d00f      	beq.n	800d84a <TIM_OC5_SetConfig+0x76>
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	4a17      	ldr	r2, [pc, #92]	; (800d88c <TIM_OC5_SetConfig+0xb8>)
 800d82e:	4293      	cmp	r3, r2
 800d830:	d00b      	beq.n	800d84a <TIM_OC5_SetConfig+0x76>
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	4a16      	ldr	r2, [pc, #88]	; (800d890 <TIM_OC5_SetConfig+0xbc>)
 800d836:	4293      	cmp	r3, r2
 800d838:	d007      	beq.n	800d84a <TIM_OC5_SetConfig+0x76>
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	4a15      	ldr	r2, [pc, #84]	; (800d894 <TIM_OC5_SetConfig+0xc0>)
 800d83e:	4293      	cmp	r3, r2
 800d840:	d003      	beq.n	800d84a <TIM_OC5_SetConfig+0x76>
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	4a14      	ldr	r2, [pc, #80]	; (800d898 <TIM_OC5_SetConfig+0xc4>)
 800d846:	4293      	cmp	r3, r2
 800d848:	d109      	bne.n	800d85e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d84a:	697b      	ldr	r3, [r7, #20]
 800d84c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d850:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	695b      	ldr	r3, [r3, #20]
 800d856:	021b      	lsls	r3, r3, #8
 800d858:	697a      	ldr	r2, [r7, #20]
 800d85a:	4313      	orrs	r3, r2
 800d85c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	697a      	ldr	r2, [r7, #20]
 800d862:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	68fa      	ldr	r2, [r7, #12]
 800d868:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	685a      	ldr	r2, [r3, #4]
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	693a      	ldr	r2, [r7, #16]
 800d876:	621a      	str	r2, [r3, #32]
}
 800d878:	bf00      	nop
 800d87a:	371c      	adds	r7, #28
 800d87c:	46bd      	mov	sp, r7
 800d87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d882:	4770      	bx	lr
 800d884:	fffeff8f 	.word	0xfffeff8f
 800d888:	40010000 	.word	0x40010000
 800d88c:	40010400 	.word	0x40010400
 800d890:	40014000 	.word	0x40014000
 800d894:	40014400 	.word	0x40014400
 800d898:	40014800 	.word	0x40014800

0800d89c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d89c:	b480      	push	{r7}
 800d89e:	b087      	sub	sp, #28
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
 800d8a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	6a1b      	ldr	r3, [r3, #32]
 800d8aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	6a1b      	ldr	r3, [r3, #32]
 800d8b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	685b      	ldr	r3, [r3, #4]
 800d8bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d8c4:	68fa      	ldr	r2, [r7, #12]
 800d8c6:	4b22      	ldr	r3, [pc, #136]	; (800d950 <TIM_OC6_SetConfig+0xb4>)
 800d8c8:	4013      	ands	r3, r2
 800d8ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	021b      	lsls	r3, r3, #8
 800d8d2:	68fa      	ldr	r2, [r7, #12]
 800d8d4:	4313      	orrs	r3, r2
 800d8d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d8d8:	693b      	ldr	r3, [r7, #16]
 800d8da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d8de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	689b      	ldr	r3, [r3, #8]
 800d8e4:	051b      	lsls	r3, r3, #20
 800d8e6:	693a      	ldr	r2, [r7, #16]
 800d8e8:	4313      	orrs	r3, r2
 800d8ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	4a19      	ldr	r2, [pc, #100]	; (800d954 <TIM_OC6_SetConfig+0xb8>)
 800d8f0:	4293      	cmp	r3, r2
 800d8f2:	d00f      	beq.n	800d914 <TIM_OC6_SetConfig+0x78>
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	4a18      	ldr	r2, [pc, #96]	; (800d958 <TIM_OC6_SetConfig+0xbc>)
 800d8f8:	4293      	cmp	r3, r2
 800d8fa:	d00b      	beq.n	800d914 <TIM_OC6_SetConfig+0x78>
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	4a17      	ldr	r2, [pc, #92]	; (800d95c <TIM_OC6_SetConfig+0xc0>)
 800d900:	4293      	cmp	r3, r2
 800d902:	d007      	beq.n	800d914 <TIM_OC6_SetConfig+0x78>
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	4a16      	ldr	r2, [pc, #88]	; (800d960 <TIM_OC6_SetConfig+0xc4>)
 800d908:	4293      	cmp	r3, r2
 800d90a:	d003      	beq.n	800d914 <TIM_OC6_SetConfig+0x78>
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	4a15      	ldr	r2, [pc, #84]	; (800d964 <TIM_OC6_SetConfig+0xc8>)
 800d910:	4293      	cmp	r3, r2
 800d912:	d109      	bne.n	800d928 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d914:	697b      	ldr	r3, [r7, #20]
 800d916:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d91a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	695b      	ldr	r3, [r3, #20]
 800d920:	029b      	lsls	r3, r3, #10
 800d922:	697a      	ldr	r2, [r7, #20]
 800d924:	4313      	orrs	r3, r2
 800d926:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	697a      	ldr	r2, [r7, #20]
 800d92c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	68fa      	ldr	r2, [r7, #12]
 800d932:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	685a      	ldr	r2, [r3, #4]
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	693a      	ldr	r2, [r7, #16]
 800d940:	621a      	str	r2, [r3, #32]
}
 800d942:	bf00      	nop
 800d944:	371c      	adds	r7, #28
 800d946:	46bd      	mov	sp, r7
 800d948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94c:	4770      	bx	lr
 800d94e:	bf00      	nop
 800d950:	feff8fff 	.word	0xfeff8fff
 800d954:	40010000 	.word	0x40010000
 800d958:	40010400 	.word	0x40010400
 800d95c:	40014000 	.word	0x40014000
 800d960:	40014400 	.word	0x40014400
 800d964:	40014800 	.word	0x40014800

0800d968 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d968:	b480      	push	{r7}
 800d96a:	b087      	sub	sp, #28
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	60f8      	str	r0, [r7, #12]
 800d970:	60b9      	str	r1, [r7, #8]
 800d972:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	6a1b      	ldr	r3, [r3, #32]
 800d978:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	6a1b      	ldr	r3, [r3, #32]
 800d97e:	f023 0201 	bic.w	r2, r3, #1
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	699b      	ldr	r3, [r3, #24]
 800d98a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d98c:	693b      	ldr	r3, [r7, #16]
 800d98e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d992:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	011b      	lsls	r3, r3, #4
 800d998:	693a      	ldr	r2, [r7, #16]
 800d99a:	4313      	orrs	r3, r2
 800d99c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d99e:	697b      	ldr	r3, [r7, #20]
 800d9a0:	f023 030a 	bic.w	r3, r3, #10
 800d9a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d9a6:	697a      	ldr	r2, [r7, #20]
 800d9a8:	68bb      	ldr	r3, [r7, #8]
 800d9aa:	4313      	orrs	r3, r2
 800d9ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	693a      	ldr	r2, [r7, #16]
 800d9b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	697a      	ldr	r2, [r7, #20]
 800d9b8:	621a      	str	r2, [r3, #32]
}
 800d9ba:	bf00      	nop
 800d9bc:	371c      	adds	r7, #28
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c4:	4770      	bx	lr

0800d9c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d9c6:	b480      	push	{r7}
 800d9c8:	b087      	sub	sp, #28
 800d9ca:	af00      	add	r7, sp, #0
 800d9cc:	60f8      	str	r0, [r7, #12]
 800d9ce:	60b9      	str	r1, [r7, #8]
 800d9d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	6a1b      	ldr	r3, [r3, #32]
 800d9d6:	f023 0210 	bic.w	r2, r3, #16
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	699b      	ldr	r3, [r3, #24]
 800d9e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	6a1b      	ldr	r3, [r3, #32]
 800d9e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d9ea:	697b      	ldr	r3, [r7, #20]
 800d9ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d9f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	031b      	lsls	r3, r3, #12
 800d9f6:	697a      	ldr	r2, [r7, #20]
 800d9f8:	4313      	orrs	r3, r2
 800d9fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d9fc:	693b      	ldr	r3, [r7, #16]
 800d9fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800da02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800da04:	68bb      	ldr	r3, [r7, #8]
 800da06:	011b      	lsls	r3, r3, #4
 800da08:	693a      	ldr	r2, [r7, #16]
 800da0a:	4313      	orrs	r3, r2
 800da0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	697a      	ldr	r2, [r7, #20]
 800da12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	693a      	ldr	r2, [r7, #16]
 800da18:	621a      	str	r2, [r3, #32]
}
 800da1a:	bf00      	nop
 800da1c:	371c      	adds	r7, #28
 800da1e:	46bd      	mov	sp, r7
 800da20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da24:	4770      	bx	lr
	...

0800da28 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800da28:	b480      	push	{r7}
 800da2a:	b085      	sub	sp, #20
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
 800da30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	689b      	ldr	r3, [r3, #8]
 800da36:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800da38:	68fa      	ldr	r2, [r7, #12]
 800da3a:	4b09      	ldr	r3, [pc, #36]	; (800da60 <TIM_ITRx_SetConfig+0x38>)
 800da3c:	4013      	ands	r3, r2
 800da3e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800da40:	683a      	ldr	r2, [r7, #0]
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	4313      	orrs	r3, r2
 800da46:	f043 0307 	orr.w	r3, r3, #7
 800da4a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	68fa      	ldr	r2, [r7, #12]
 800da50:	609a      	str	r2, [r3, #8]
}
 800da52:	bf00      	nop
 800da54:	3714      	adds	r7, #20
 800da56:	46bd      	mov	sp, r7
 800da58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5c:	4770      	bx	lr
 800da5e:	bf00      	nop
 800da60:	ffcfff8f 	.word	0xffcfff8f

0800da64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800da64:	b480      	push	{r7}
 800da66:	b087      	sub	sp, #28
 800da68:	af00      	add	r7, sp, #0
 800da6a:	60f8      	str	r0, [r7, #12]
 800da6c:	60b9      	str	r1, [r7, #8]
 800da6e:	607a      	str	r2, [r7, #4]
 800da70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	689b      	ldr	r3, [r3, #8]
 800da76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800da78:	697b      	ldr	r3, [r7, #20]
 800da7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800da7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	021a      	lsls	r2, r3, #8
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	431a      	orrs	r2, r3
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	4313      	orrs	r3, r2
 800da8c:	697a      	ldr	r2, [r7, #20]
 800da8e:	4313      	orrs	r3, r2
 800da90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	697a      	ldr	r2, [r7, #20]
 800da96:	609a      	str	r2, [r3, #8]
}
 800da98:	bf00      	nop
 800da9a:	371c      	adds	r7, #28
 800da9c:	46bd      	mov	sp, r7
 800da9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa2:	4770      	bx	lr

0800daa4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800daa4:	b480      	push	{r7}
 800daa6:	b087      	sub	sp, #28
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	60f8      	str	r0, [r7, #12]
 800daac:	60b9      	str	r1, [r7, #8]
 800daae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dab0:	68bb      	ldr	r3, [r7, #8]
 800dab2:	f003 031f 	and.w	r3, r3, #31
 800dab6:	2201      	movs	r2, #1
 800dab8:	fa02 f303 	lsl.w	r3, r2, r3
 800dabc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	6a1a      	ldr	r2, [r3, #32]
 800dac2:	697b      	ldr	r3, [r7, #20]
 800dac4:	43db      	mvns	r3, r3
 800dac6:	401a      	ands	r2, r3
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	6a1a      	ldr	r2, [r3, #32]
 800dad0:	68bb      	ldr	r3, [r7, #8]
 800dad2:	f003 031f 	and.w	r3, r3, #31
 800dad6:	6879      	ldr	r1, [r7, #4]
 800dad8:	fa01 f303 	lsl.w	r3, r1, r3
 800dadc:	431a      	orrs	r2, r3
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	621a      	str	r2, [r3, #32]
}
 800dae2:	bf00      	nop
 800dae4:	371c      	adds	r7, #28
 800dae6:	46bd      	mov	sp, r7
 800dae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daec:	4770      	bx	lr
	...

0800daf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800daf0:	b480      	push	{r7}
 800daf2:	b085      	sub	sp, #20
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
 800daf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800db00:	2b01      	cmp	r3, #1
 800db02:	d101      	bne.n	800db08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800db04:	2302      	movs	r3, #2
 800db06:	e077      	b.n	800dbf8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2201      	movs	r2, #1
 800db0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	2202      	movs	r2, #2
 800db14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	685b      	ldr	r3, [r3, #4]
 800db1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	689b      	ldr	r3, [r3, #8]
 800db26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	4a35      	ldr	r2, [pc, #212]	; (800dc04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800db2e:	4293      	cmp	r3, r2
 800db30:	d004      	beq.n	800db3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	4a34      	ldr	r2, [pc, #208]	; (800dc08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800db38:	4293      	cmp	r3, r2
 800db3a:	d108      	bne.n	800db4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800db42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	685b      	ldr	r3, [r3, #4]
 800db48:	68fa      	ldr	r2, [r7, #12]
 800db4a:	4313      	orrs	r3, r2
 800db4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	68fa      	ldr	r2, [r7, #12]
 800db5c:	4313      	orrs	r3, r2
 800db5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	68fa      	ldr	r2, [r7, #12]
 800db66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	4a25      	ldr	r2, [pc, #148]	; (800dc04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800db6e:	4293      	cmp	r3, r2
 800db70:	d02c      	beq.n	800dbcc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db7a:	d027      	beq.n	800dbcc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	4a22      	ldr	r2, [pc, #136]	; (800dc0c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800db82:	4293      	cmp	r3, r2
 800db84:	d022      	beq.n	800dbcc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	4a21      	ldr	r2, [pc, #132]	; (800dc10 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800db8c:	4293      	cmp	r3, r2
 800db8e:	d01d      	beq.n	800dbcc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	4a1f      	ldr	r2, [pc, #124]	; (800dc14 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800db96:	4293      	cmp	r3, r2
 800db98:	d018      	beq.n	800dbcc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	4a1a      	ldr	r2, [pc, #104]	; (800dc08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dba0:	4293      	cmp	r3, r2
 800dba2:	d013      	beq.n	800dbcc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	4a1b      	ldr	r2, [pc, #108]	; (800dc18 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800dbaa:	4293      	cmp	r3, r2
 800dbac:	d00e      	beq.n	800dbcc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	4a1a      	ldr	r2, [pc, #104]	; (800dc1c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800dbb4:	4293      	cmp	r3, r2
 800dbb6:	d009      	beq.n	800dbcc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	4a18      	ldr	r2, [pc, #96]	; (800dc20 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800dbbe:	4293      	cmp	r3, r2
 800dbc0:	d004      	beq.n	800dbcc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	4a17      	ldr	r2, [pc, #92]	; (800dc24 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800dbc8:	4293      	cmp	r3, r2
 800dbca:	d10c      	bne.n	800dbe6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dbcc:	68bb      	ldr	r3, [r7, #8]
 800dbce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dbd2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	689b      	ldr	r3, [r3, #8]
 800dbd8:	68ba      	ldr	r2, [r7, #8]
 800dbda:	4313      	orrs	r3, r2
 800dbdc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	68ba      	ldr	r2, [r7, #8]
 800dbe4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	2201      	movs	r2, #1
 800dbea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dbf6:	2300      	movs	r3, #0
}
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	3714      	adds	r7, #20
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc02:	4770      	bx	lr
 800dc04:	40010000 	.word	0x40010000
 800dc08:	40010400 	.word	0x40010400
 800dc0c:	40000400 	.word	0x40000400
 800dc10:	40000800 	.word	0x40000800
 800dc14:	40000c00 	.word	0x40000c00
 800dc18:	40001800 	.word	0x40001800
 800dc1c:	40014000 	.word	0x40014000
 800dc20:	4000e000 	.word	0x4000e000
 800dc24:	4000e400 	.word	0x4000e400

0800dc28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800dc28:	b480      	push	{r7}
 800dc2a:	b085      	sub	sp, #20
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
 800dc30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800dc32:	2300      	movs	r3, #0
 800dc34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc3c:	2b01      	cmp	r3, #1
 800dc3e:	d101      	bne.n	800dc44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800dc40:	2302      	movs	r3, #2
 800dc42:	e087      	b.n	800dd54 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2201      	movs	r2, #1
 800dc48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	68db      	ldr	r3, [r3, #12]
 800dc56:	4313      	orrs	r3, r2
 800dc58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	689b      	ldr	r3, [r3, #8]
 800dc64:	4313      	orrs	r3, r2
 800dc66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800dc6e:	683b      	ldr	r3, [r7, #0]
 800dc70:	685b      	ldr	r3, [r3, #4]
 800dc72:	4313      	orrs	r3, r2
 800dc74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800dc7c:	683b      	ldr	r3, [r7, #0]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	4313      	orrs	r3, r2
 800dc82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	691b      	ldr	r3, [r3, #16]
 800dc8e:	4313      	orrs	r3, r2
 800dc90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800dc98:	683b      	ldr	r3, [r7, #0]
 800dc9a:	695b      	ldr	r3, [r3, #20]
 800dc9c:	4313      	orrs	r3, r2
 800dc9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800dca6:	683b      	ldr	r3, [r7, #0]
 800dca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcaa:	4313      	orrs	r3, r2
 800dcac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800dcb4:	683b      	ldr	r3, [r7, #0]
 800dcb6:	699b      	ldr	r3, [r3, #24]
 800dcb8:	041b      	lsls	r3, r3, #16
 800dcba:	4313      	orrs	r3, r2
 800dcbc:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	4a27      	ldr	r2, [pc, #156]	; (800dd60 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800dcc4:	4293      	cmp	r3, r2
 800dcc6:	d004      	beq.n	800dcd2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	4a25      	ldr	r2, [pc, #148]	; (800dd64 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800dcce:	4293      	cmp	r3, r2
 800dcd0:	d106      	bne.n	800dce0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	69db      	ldr	r3, [r3, #28]
 800dcdc:	4313      	orrs	r3, r2
 800dcde:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	4a1e      	ldr	r2, [pc, #120]	; (800dd60 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800dce6:	4293      	cmp	r3, r2
 800dce8:	d004      	beq.n	800dcf4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	4a1d      	ldr	r2, [pc, #116]	; (800dd64 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800dcf0:	4293      	cmp	r3, r2
 800dcf2:	d126      	bne.n	800dd42 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcfe:	051b      	lsls	r3, r3, #20
 800dd00:	4313      	orrs	r3, r2
 800dd02:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	6a1b      	ldr	r3, [r3, #32]
 800dd0e:	4313      	orrs	r3, r2
 800dd10:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd1c:	4313      	orrs	r3, r2
 800dd1e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	4a0e      	ldr	r2, [pc, #56]	; (800dd60 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800dd26:	4293      	cmp	r3, r2
 800dd28:	d004      	beq.n	800dd34 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	4a0d      	ldr	r2, [pc, #52]	; (800dd64 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800dd30:	4293      	cmp	r3, r2
 800dd32:	d106      	bne.n	800dd42 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd3e:	4313      	orrs	r3, r2
 800dd40:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	68fa      	ldr	r2, [r7, #12]
 800dd48:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dd52:	2300      	movs	r3, #0
}
 800dd54:	4618      	mov	r0, r3
 800dd56:	3714      	adds	r7, #20
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5e:	4770      	bx	lr
 800dd60:	40010000 	.word	0x40010000
 800dd64:	40010400 	.word	0x40010400

0800dd68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dd68:	b480      	push	{r7}
 800dd6a:	b083      	sub	sp, #12
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dd70:	bf00      	nop
 800dd72:	370c      	adds	r7, #12
 800dd74:	46bd      	mov	sp, r7
 800dd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7a:	4770      	bx	lr

0800dd7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dd7c:	b480      	push	{r7}
 800dd7e:	b083      	sub	sp, #12
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dd84:	bf00      	nop
 800dd86:	370c      	adds	r7, #12
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8e:	4770      	bx	lr

0800dd90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dd90:	b480      	push	{r7}
 800dd92:	b083      	sub	sp, #12
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dd98:	bf00      	nop
 800dd9a:	370c      	adds	r7, #12
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda2:	4770      	bx	lr

0800dda4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b082      	sub	sp, #8
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d101      	bne.n	800ddb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ddb2:	2301      	movs	r3, #1
 800ddb4:	e042      	b.n	800de3c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d106      	bne.n	800ddce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ddc8:	6878      	ldr	r0, [r7, #4]
 800ddca:	f7f7 fe3f 	bl	8005a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	2224      	movs	r2, #36	; 0x24
 800ddd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	681a      	ldr	r2, [r3, #0]
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	f022 0201 	bic.w	r2, r2, #1
 800dde4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	f000 fdaa 	bl	800e940 <UART_SetConfig>
 800ddec:	4603      	mov	r3, r0
 800ddee:	2b01      	cmp	r3, #1
 800ddf0:	d101      	bne.n	800ddf6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	e022      	b.n	800de3c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d002      	beq.n	800de04 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f001 fc0a 	bl	800f618 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	685a      	ldr	r2, [r3, #4]
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800de12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	689a      	ldr	r2, [r3, #8]
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800de22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	681a      	ldr	r2, [r3, #0]
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	f042 0201 	orr.w	r2, r2, #1
 800de32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800de34:	6878      	ldr	r0, [r7, #4]
 800de36:	f001 fc91 	bl	800f75c <UART_CheckIdleState>
 800de3a:	4603      	mov	r3, r0
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	3708      	adds	r7, #8
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}

0800de44 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b082      	sub	sp, #8
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d101      	bne.n	800de56 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800de52:	2301      	movs	r3, #1
 800de54:	e031      	b.n	800deba <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2224      	movs	r2, #36	; 0x24
 800de5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	681a      	ldr	r2, [r3, #0]
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	f022 0201 	bic.w	r2, r2, #1
 800de6c:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	2200      	movs	r2, #0
 800de74:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	2200      	movs	r2, #0
 800de7c:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	2200      	movs	r2, #0
 800de84:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800de86:	6878      	ldr	r0, [r7, #4]
 800de88:	f7f7 ff38 	bl	8005cfc <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	2200      	movs	r2, #0
 800de90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->gState = HAL_UART_STATE_RESET;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2200      	movs	r2, #0
 800de98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	2200      	movs	r2, #0
 800dea0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2200      	movs	r2, #0
 800dea8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	2200      	movs	r2, #0
 800deae:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2200      	movs	r2, #0
 800deb4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800deb8:	2300      	movs	r3, #0
}
 800deba:	4618      	mov	r0, r3
 800debc:	3708      	adds	r7, #8
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}

0800dec2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dec2:	b580      	push	{r7, lr}
 800dec4:	b08a      	sub	sp, #40	; 0x28
 800dec6:	af02      	add	r7, sp, #8
 800dec8:	60f8      	str	r0, [r7, #12]
 800deca:	60b9      	str	r1, [r7, #8]
 800decc:	603b      	str	r3, [r7, #0]
 800dece:	4613      	mov	r3, r2
 800ded0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ded8:	2b20      	cmp	r3, #32
 800deda:	d17b      	bne.n	800dfd4 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800dedc:	68bb      	ldr	r3, [r7, #8]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d002      	beq.n	800dee8 <HAL_UART_Transmit+0x26>
 800dee2:	88fb      	ldrh	r3, [r7, #6]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d101      	bne.n	800deec <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800dee8:	2301      	movs	r3, #1
 800deea:	e074      	b.n	800dfd6 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	2200      	movs	r2, #0
 800def0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	2221      	movs	r2, #33	; 0x21
 800def8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800defc:	f7f8 f95c 	bl	80061b8 <HAL_GetTick>
 800df00:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	88fa      	ldrh	r2, [r7, #6]
 800df06:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	88fa      	ldrh	r2, [r7, #6]
 800df0e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	689b      	ldr	r3, [r3, #8]
 800df16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df1a:	d108      	bne.n	800df2e <HAL_UART_Transmit+0x6c>
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	691b      	ldr	r3, [r3, #16]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d104      	bne.n	800df2e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800df24:	2300      	movs	r3, #0
 800df26:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800df28:	68bb      	ldr	r3, [r7, #8]
 800df2a:	61bb      	str	r3, [r7, #24]
 800df2c:	e003      	b.n	800df36 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800df2e:	68bb      	ldr	r3, [r7, #8]
 800df30:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800df32:	2300      	movs	r3, #0
 800df34:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800df36:	e030      	b.n	800df9a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	9300      	str	r3, [sp, #0]
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	2200      	movs	r2, #0
 800df40:	2180      	movs	r1, #128	; 0x80
 800df42:	68f8      	ldr	r0, [r7, #12]
 800df44:	f001 fcb4 	bl	800f8b0 <UART_WaitOnFlagUntilTimeout>
 800df48:	4603      	mov	r3, r0
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d005      	beq.n	800df5a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	2220      	movs	r2, #32
 800df52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800df56:	2303      	movs	r3, #3
 800df58:	e03d      	b.n	800dfd6 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800df5a:	69fb      	ldr	r3, [r7, #28]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d10b      	bne.n	800df78 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800df60:	69bb      	ldr	r3, [r7, #24]
 800df62:	881b      	ldrh	r3, [r3, #0]
 800df64:	461a      	mov	r2, r3
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800df6e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800df70:	69bb      	ldr	r3, [r7, #24]
 800df72:	3302      	adds	r3, #2
 800df74:	61bb      	str	r3, [r7, #24]
 800df76:	e007      	b.n	800df88 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800df78:	69fb      	ldr	r3, [r7, #28]
 800df7a:	781a      	ldrb	r2, [r3, #0]
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800df82:	69fb      	ldr	r3, [r7, #28]
 800df84:	3301      	adds	r3, #1
 800df86:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800df8e:	b29b      	uxth	r3, r3
 800df90:	3b01      	subs	r3, #1
 800df92:	b29a      	uxth	r2, r3
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dfa0:	b29b      	uxth	r3, r3
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d1c8      	bne.n	800df38 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800dfa6:	683b      	ldr	r3, [r7, #0]
 800dfa8:	9300      	str	r3, [sp, #0]
 800dfaa:	697b      	ldr	r3, [r7, #20]
 800dfac:	2200      	movs	r2, #0
 800dfae:	2140      	movs	r1, #64	; 0x40
 800dfb0:	68f8      	ldr	r0, [r7, #12]
 800dfb2:	f001 fc7d 	bl	800f8b0 <UART_WaitOnFlagUntilTimeout>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d005      	beq.n	800dfc8 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	2220      	movs	r2, #32
 800dfc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800dfc4:	2303      	movs	r3, #3
 800dfc6:	e006      	b.n	800dfd6 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	2220      	movs	r2, #32
 800dfcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	e000      	b.n	800dfd6 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800dfd4:	2302      	movs	r3, #2
  }
}
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	3720      	adds	r7, #32
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	bd80      	pop	{r7, pc}
	...

0800dfe0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b08a      	sub	sp, #40	; 0x28
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	60f8      	str	r0, [r7, #12]
 800dfe8:	60b9      	str	r1, [r7, #8]
 800dfea:	4613      	mov	r3, r2
 800dfec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dff4:	2b20      	cmp	r3, #32
 800dff6:	d167      	bne.n	800e0c8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800dff8:	68bb      	ldr	r3, [r7, #8]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d002      	beq.n	800e004 <HAL_UART_Transmit_DMA+0x24>
 800dffe:	88fb      	ldrh	r3, [r7, #6]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d101      	bne.n	800e008 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800e004:	2301      	movs	r3, #1
 800e006:	e060      	b.n	800e0ca <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	68ba      	ldr	r2, [r7, #8]
 800e00c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	88fa      	ldrh	r2, [r7, #6]
 800e012:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	88fa      	ldrh	r2, [r7, #6]
 800e01a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	2200      	movs	r2, #0
 800e022:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	2221      	movs	r2, #33	; 0x21
 800e02a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e032:	2b00      	cmp	r3, #0
 800e034:	d028      	beq.n	800e088 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e03a:	4a26      	ldr	r2, [pc, #152]	; (800e0d4 <HAL_UART_Transmit_DMA+0xf4>)
 800e03c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e042:	4a25      	ldr	r2, [pc, #148]	; (800e0d8 <HAL_UART_Transmit_DMA+0xf8>)
 800e044:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e04a:	4a24      	ldr	r2, [pc, #144]	; (800e0dc <HAL_UART_Transmit_DMA+0xfc>)
 800e04c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e052:	2200      	movs	r2, #0
 800e054:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e05e:	4619      	mov	r1, r3
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	3328      	adds	r3, #40	; 0x28
 800e066:	461a      	mov	r2, r3
 800e068:	88fb      	ldrh	r3, [r7, #6]
 800e06a:	f7f8 ff01 	bl	8006e70 <HAL_DMA_Start_IT>
 800e06e:	4603      	mov	r3, r0
 800e070:	2b00      	cmp	r3, #0
 800e072:	d009      	beq.n	800e088 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	2210      	movs	r2, #16
 800e078:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	2220      	movs	r2, #32
 800e080:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800e084:	2301      	movs	r3, #1
 800e086:	e020      	b.n	800e0ca <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	2240      	movs	r2, #64	; 0x40
 800e08e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	3308      	adds	r3, #8
 800e096:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e098:	697b      	ldr	r3, [r7, #20]
 800e09a:	e853 3f00 	ldrex	r3, [r3]
 800e09e:	613b      	str	r3, [r7, #16]
   return(result);
 800e0a0:	693b      	ldr	r3, [r7, #16]
 800e0a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e0a6:	627b      	str	r3, [r7, #36]	; 0x24
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	3308      	adds	r3, #8
 800e0ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0b0:	623a      	str	r2, [r7, #32]
 800e0b2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0b4:	69f9      	ldr	r1, [r7, #28]
 800e0b6:	6a3a      	ldr	r2, [r7, #32]
 800e0b8:	e841 2300 	strex	r3, r2, [r1]
 800e0bc:	61bb      	str	r3, [r7, #24]
   return(result);
 800e0be:	69bb      	ldr	r3, [r7, #24]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d1e5      	bne.n	800e090 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	e000      	b.n	800e0ca <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800e0c8:	2302      	movs	r3, #2
  }
}
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	3728      	adds	r7, #40	; 0x28
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd80      	pop	{r7, pc}
 800e0d2:	bf00      	nop
 800e0d4:	0800fc1d 	.word	0x0800fc1d
 800e0d8:	0800fcb3 	.word	0x0800fcb3
 800e0dc:	0800fe35 	.word	0x0800fe35

0800e0e0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b08a      	sub	sp, #40	; 0x28
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	60f8      	str	r0, [r7, #12]
 800e0e8:	60b9      	str	r1, [r7, #8]
 800e0ea:	4613      	mov	r3, r2
 800e0ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0f4:	2b20      	cmp	r3, #32
 800e0f6:	d137      	bne.n	800e168 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800e0f8:	68bb      	ldr	r3, [r7, #8]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d002      	beq.n	800e104 <HAL_UART_Receive_DMA+0x24>
 800e0fe:	88fb      	ldrh	r3, [r7, #6]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d101      	bne.n	800e108 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800e104:	2301      	movs	r3, #1
 800e106:	e030      	b.n	800e16a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	2200      	movs	r2, #0
 800e10c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	4a18      	ldr	r2, [pc, #96]	; (800e174 <HAL_UART_Receive_DMA+0x94>)
 800e114:	4293      	cmp	r3, r2
 800e116:	d01f      	beq.n	800e158 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	685b      	ldr	r3, [r3, #4]
 800e11e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e122:	2b00      	cmp	r3, #0
 800e124:	d018      	beq.n	800e158 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e12c:	697b      	ldr	r3, [r7, #20]
 800e12e:	e853 3f00 	ldrex	r3, [r3]
 800e132:	613b      	str	r3, [r7, #16]
   return(result);
 800e134:	693b      	ldr	r3, [r7, #16]
 800e136:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e13a:	627b      	str	r3, [r7, #36]	; 0x24
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	461a      	mov	r2, r3
 800e142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e144:	623b      	str	r3, [r7, #32]
 800e146:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e148:	69f9      	ldr	r1, [r7, #28]
 800e14a:	6a3a      	ldr	r2, [r7, #32]
 800e14c:	e841 2300 	strex	r3, r2, [r1]
 800e150:	61bb      	str	r3, [r7, #24]
   return(result);
 800e152:	69bb      	ldr	r3, [r7, #24]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d1e6      	bne.n	800e126 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e158:	88fb      	ldrh	r3, [r7, #6]
 800e15a:	461a      	mov	r2, r3
 800e15c:	68b9      	ldr	r1, [r7, #8]
 800e15e:	68f8      	ldr	r0, [r7, #12]
 800e160:	f001 fc0e 	bl	800f980 <UART_Start_Receive_DMA>
 800e164:	4603      	mov	r3, r0
 800e166:	e000      	b.n	800e16a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e168:	2302      	movs	r3, #2
  }
}
 800e16a:	4618      	mov	r0, r3
 800e16c:	3728      	adds	r7, #40	; 0x28
 800e16e:	46bd      	mov	sp, r7
 800e170:	bd80      	pop	{r7, pc}
 800e172:	bf00      	nop
 800e174:	58000c00 	.word	0x58000c00

0800e178 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b0ba      	sub	sp, #232	; 0xe8
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	69db      	ldr	r3, [r3, #28]
 800e186:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	689b      	ldr	r3, [r3, #8]
 800e19a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e19e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e1a2:	f640 030f 	movw	r3, #2063	; 0x80f
 800e1a6:	4013      	ands	r3, r2
 800e1a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e1ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d11b      	bne.n	800e1ec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e1b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e1b8:	f003 0320 	and.w	r3, r3, #32
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d015      	beq.n	800e1ec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e1c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e1c4:	f003 0320 	and.w	r3, r3, #32
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d105      	bne.n	800e1d8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e1cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e1d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d009      	beq.n	800e1ec <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	f000 8377 	beq.w	800e8d0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1e6:	6878      	ldr	r0, [r7, #4]
 800e1e8:	4798      	blx	r3
      }
      return;
 800e1ea:	e371      	b.n	800e8d0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e1ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	f000 8123 	beq.w	800e43c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e1f6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e1fa:	4b8d      	ldr	r3, [pc, #564]	; (800e430 <HAL_UART_IRQHandler+0x2b8>)
 800e1fc:	4013      	ands	r3, r2
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d106      	bne.n	800e210 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e202:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e206:	4b8b      	ldr	r3, [pc, #556]	; (800e434 <HAL_UART_IRQHandler+0x2bc>)
 800e208:	4013      	ands	r3, r2
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	f000 8116 	beq.w	800e43c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e214:	f003 0301 	and.w	r3, r3, #1
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d011      	beq.n	800e240 <HAL_UART_IRQHandler+0xc8>
 800e21c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e224:	2b00      	cmp	r3, #0
 800e226:	d00b      	beq.n	800e240 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	2201      	movs	r2, #1
 800e22e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e236:	f043 0201 	orr.w	r2, r3, #1
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e244:	f003 0302 	and.w	r3, r3, #2
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d011      	beq.n	800e270 <HAL_UART_IRQHandler+0xf8>
 800e24c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e250:	f003 0301 	and.w	r3, r3, #1
 800e254:	2b00      	cmp	r3, #0
 800e256:	d00b      	beq.n	800e270 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	2202      	movs	r2, #2
 800e25e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e266:	f043 0204 	orr.w	r2, r3, #4
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e274:	f003 0304 	and.w	r3, r3, #4
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d011      	beq.n	800e2a0 <HAL_UART_IRQHandler+0x128>
 800e27c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e280:	f003 0301 	and.w	r3, r3, #1
 800e284:	2b00      	cmp	r3, #0
 800e286:	d00b      	beq.n	800e2a0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	2204      	movs	r2, #4
 800e28e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e296:	f043 0202 	orr.w	r2, r3, #2
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e2a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2a4:	f003 0308 	and.w	r3, r3, #8
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d017      	beq.n	800e2dc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e2ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2b0:	f003 0320 	and.w	r3, r3, #32
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d105      	bne.n	800e2c4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e2b8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e2bc:	4b5c      	ldr	r3, [pc, #368]	; (800e430 <HAL_UART_IRQHandler+0x2b8>)
 800e2be:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d00b      	beq.n	800e2dc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	2208      	movs	r2, #8
 800e2ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2d2:	f043 0208 	orr.w	r2, r3, #8
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e2dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d012      	beq.n	800e30e <HAL_UART_IRQHandler+0x196>
 800e2e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d00c      	beq.n	800e30e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e2fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e304:	f043 0220 	orr.w	r2, r3, #32
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e314:	2b00      	cmp	r3, #0
 800e316:	f000 82dd 	beq.w	800e8d4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e31a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e31e:	f003 0320 	and.w	r3, r3, #32
 800e322:	2b00      	cmp	r3, #0
 800e324:	d013      	beq.n	800e34e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e32a:	f003 0320 	and.w	r3, r3, #32
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d105      	bne.n	800e33e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e332:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d007      	beq.n	800e34e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e342:	2b00      	cmp	r3, #0
 800e344:	d003      	beq.n	800e34e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e354:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	689b      	ldr	r3, [r3, #8]
 800e35e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e362:	2b40      	cmp	r3, #64	; 0x40
 800e364:	d005      	beq.n	800e372 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e366:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e36a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d054      	beq.n	800e41c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	f001 fbec 	bl	800fb50 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	689b      	ldr	r3, [r3, #8]
 800e37e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e382:	2b40      	cmp	r3, #64	; 0x40
 800e384:	d146      	bne.n	800e414 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	3308      	adds	r3, #8
 800e38c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e390:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e394:	e853 3f00 	ldrex	r3, [r3]
 800e398:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e39c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e3a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e3a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	3308      	adds	r3, #8
 800e3ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e3b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e3b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e3be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e3c2:	e841 2300 	strex	r3, r2, [r1]
 800e3c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e3ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d1d9      	bne.n	800e386 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d017      	beq.n	800e40c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e3e2:	4a15      	ldr	r2, [pc, #84]	; (800e438 <HAL_UART_IRQHandler+0x2c0>)
 800e3e4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	f7f9 fac7 	bl	8007980 <HAL_DMA_Abort_IT>
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d019      	beq.n	800e42c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e3fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e400:	687a      	ldr	r2, [r7, #4]
 800e402:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800e406:	4610      	mov	r0, r2
 800e408:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e40a:	e00f      	b.n	800e42c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e40c:	6878      	ldr	r0, [r7, #4]
 800e40e:	f7f5 fe5f 	bl	80040d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e412:	e00b      	b.n	800e42c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e414:	6878      	ldr	r0, [r7, #4]
 800e416:	f7f5 fe5b 	bl	80040d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e41a:	e007      	b.n	800e42c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e41c:	6878      	ldr	r0, [r7, #4]
 800e41e:	f7f5 fe57 	bl	80040d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	2200      	movs	r2, #0
 800e426:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800e42a:	e253      	b.n	800e8d4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e42c:	bf00      	nop
    return;
 800e42e:	e251      	b.n	800e8d4 <HAL_UART_IRQHandler+0x75c>
 800e430:	10000001 	.word	0x10000001
 800e434:	04000120 	.word	0x04000120
 800e438:	0800feb5 	.word	0x0800feb5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e440:	2b01      	cmp	r3, #1
 800e442:	f040 81e7 	bne.w	800e814 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e44a:	f003 0310 	and.w	r3, r3, #16
 800e44e:	2b00      	cmp	r3, #0
 800e450:	f000 81e0 	beq.w	800e814 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e458:	f003 0310 	and.w	r3, r3, #16
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	f000 81d9 	beq.w	800e814 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	2210      	movs	r2, #16
 800e468:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	689b      	ldr	r3, [r3, #8]
 800e470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e474:	2b40      	cmp	r3, #64	; 0x40
 800e476:	f040 8151 	bne.w	800e71c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	4a96      	ldr	r2, [pc, #600]	; (800e6dc <HAL_UART_IRQHandler+0x564>)
 800e484:	4293      	cmp	r3, r2
 800e486:	d068      	beq.n	800e55a <HAL_UART_IRQHandler+0x3e2>
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	4a93      	ldr	r2, [pc, #588]	; (800e6e0 <HAL_UART_IRQHandler+0x568>)
 800e492:	4293      	cmp	r3, r2
 800e494:	d061      	beq.n	800e55a <HAL_UART_IRQHandler+0x3e2>
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	4a91      	ldr	r2, [pc, #580]	; (800e6e4 <HAL_UART_IRQHandler+0x56c>)
 800e4a0:	4293      	cmp	r3, r2
 800e4a2:	d05a      	beq.n	800e55a <HAL_UART_IRQHandler+0x3e2>
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	4a8e      	ldr	r2, [pc, #568]	; (800e6e8 <HAL_UART_IRQHandler+0x570>)
 800e4ae:	4293      	cmp	r3, r2
 800e4b0:	d053      	beq.n	800e55a <HAL_UART_IRQHandler+0x3e2>
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	4a8c      	ldr	r2, [pc, #560]	; (800e6ec <HAL_UART_IRQHandler+0x574>)
 800e4bc:	4293      	cmp	r3, r2
 800e4be:	d04c      	beq.n	800e55a <HAL_UART_IRQHandler+0x3e2>
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	4a89      	ldr	r2, [pc, #548]	; (800e6f0 <HAL_UART_IRQHandler+0x578>)
 800e4ca:	4293      	cmp	r3, r2
 800e4cc:	d045      	beq.n	800e55a <HAL_UART_IRQHandler+0x3e2>
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	4a87      	ldr	r2, [pc, #540]	; (800e6f4 <HAL_UART_IRQHandler+0x57c>)
 800e4d8:	4293      	cmp	r3, r2
 800e4da:	d03e      	beq.n	800e55a <HAL_UART_IRQHandler+0x3e2>
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	4a84      	ldr	r2, [pc, #528]	; (800e6f8 <HAL_UART_IRQHandler+0x580>)
 800e4e6:	4293      	cmp	r3, r2
 800e4e8:	d037      	beq.n	800e55a <HAL_UART_IRQHandler+0x3e2>
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	4a82      	ldr	r2, [pc, #520]	; (800e6fc <HAL_UART_IRQHandler+0x584>)
 800e4f4:	4293      	cmp	r3, r2
 800e4f6:	d030      	beq.n	800e55a <HAL_UART_IRQHandler+0x3e2>
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	4a7f      	ldr	r2, [pc, #508]	; (800e700 <HAL_UART_IRQHandler+0x588>)
 800e502:	4293      	cmp	r3, r2
 800e504:	d029      	beq.n	800e55a <HAL_UART_IRQHandler+0x3e2>
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	4a7d      	ldr	r2, [pc, #500]	; (800e704 <HAL_UART_IRQHandler+0x58c>)
 800e510:	4293      	cmp	r3, r2
 800e512:	d022      	beq.n	800e55a <HAL_UART_IRQHandler+0x3e2>
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	4a7a      	ldr	r2, [pc, #488]	; (800e708 <HAL_UART_IRQHandler+0x590>)
 800e51e:	4293      	cmp	r3, r2
 800e520:	d01b      	beq.n	800e55a <HAL_UART_IRQHandler+0x3e2>
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	4a78      	ldr	r2, [pc, #480]	; (800e70c <HAL_UART_IRQHandler+0x594>)
 800e52c:	4293      	cmp	r3, r2
 800e52e:	d014      	beq.n	800e55a <HAL_UART_IRQHandler+0x3e2>
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	4a75      	ldr	r2, [pc, #468]	; (800e710 <HAL_UART_IRQHandler+0x598>)
 800e53a:	4293      	cmp	r3, r2
 800e53c:	d00d      	beq.n	800e55a <HAL_UART_IRQHandler+0x3e2>
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	4a73      	ldr	r2, [pc, #460]	; (800e714 <HAL_UART_IRQHandler+0x59c>)
 800e548:	4293      	cmp	r3, r2
 800e54a:	d006      	beq.n	800e55a <HAL_UART_IRQHandler+0x3e2>
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	4a70      	ldr	r2, [pc, #448]	; (800e718 <HAL_UART_IRQHandler+0x5a0>)
 800e556:	4293      	cmp	r3, r2
 800e558:	d106      	bne.n	800e568 <HAL_UART_IRQHandler+0x3f0>
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	685b      	ldr	r3, [r3, #4]
 800e564:	b29b      	uxth	r3, r3
 800e566:	e005      	b.n	800e574 <HAL_UART_IRQHandler+0x3fc>
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	685b      	ldr	r3, [r3, #4]
 800e572:	b29b      	uxth	r3, r3
 800e574:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e578:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	f000 81ab 	beq.w	800e8d8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e588:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e58c:	429a      	cmp	r2, r3
 800e58e:	f080 81a3 	bcs.w	800e8d8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e598:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e5a2:	69db      	ldr	r3, [r3, #28]
 800e5a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e5a8:	f000 8087 	beq.w	800e6ba <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e5b8:	e853 3f00 	ldrex	r3, [r3]
 800e5bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e5c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e5c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e5c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	461a      	mov	r2, r3
 800e5d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e5d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e5da:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e5e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e5e6:	e841 2300 	strex	r3, r2, [r1]
 800e5ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e5ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d1da      	bne.n	800e5ac <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	3308      	adds	r3, #8
 800e5fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e600:	e853 3f00 	ldrex	r3, [r3]
 800e604:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e606:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e608:	f023 0301 	bic.w	r3, r3, #1
 800e60c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	3308      	adds	r3, #8
 800e616:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e61a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e61e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e620:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e622:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e626:	e841 2300 	strex	r3, r2, [r1]
 800e62a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e62c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d1e1      	bne.n	800e5f6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	3308      	adds	r3, #8
 800e638:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e63a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e63c:	e853 3f00 	ldrex	r3, [r3]
 800e640:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e642:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e644:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e648:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	3308      	adds	r3, #8
 800e652:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e656:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e658:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e65a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e65c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e65e:	e841 2300 	strex	r3, r2, [r1]
 800e662:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e664:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e666:	2b00      	cmp	r3, #0
 800e668:	d1e3      	bne.n	800e632 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	2220      	movs	r2, #32
 800e66e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	2200      	movs	r2, #0
 800e676:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e67e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e680:	e853 3f00 	ldrex	r3, [r3]
 800e684:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e686:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e688:	f023 0310 	bic.w	r3, r3, #16
 800e68c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	461a      	mov	r2, r3
 800e696:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e69a:	65bb      	str	r3, [r7, #88]	; 0x58
 800e69c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e69e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e6a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e6a2:	e841 2300 	strex	r3, r2, [r1]
 800e6a6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e6a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d1e4      	bne.n	800e678 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f7f8 fe45 	bl	8007344 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	2202      	movs	r2, #2
 800e6be:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e6cc:	b29b      	uxth	r3, r3
 800e6ce:	1ad3      	subs	r3, r2, r3
 800e6d0:	b29b      	uxth	r3, r3
 800e6d2:	4619      	mov	r1, r3
 800e6d4:	6878      	ldr	r0, [r7, #4]
 800e6d6:	f000 f927 	bl	800e928 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e6da:	e0fd      	b.n	800e8d8 <HAL_UART_IRQHandler+0x760>
 800e6dc:	40020010 	.word	0x40020010
 800e6e0:	40020028 	.word	0x40020028
 800e6e4:	40020040 	.word	0x40020040
 800e6e8:	40020058 	.word	0x40020058
 800e6ec:	40020070 	.word	0x40020070
 800e6f0:	40020088 	.word	0x40020088
 800e6f4:	400200a0 	.word	0x400200a0
 800e6f8:	400200b8 	.word	0x400200b8
 800e6fc:	40020410 	.word	0x40020410
 800e700:	40020428 	.word	0x40020428
 800e704:	40020440 	.word	0x40020440
 800e708:	40020458 	.word	0x40020458
 800e70c:	40020470 	.word	0x40020470
 800e710:	40020488 	.word	0x40020488
 800e714:	400204a0 	.word	0x400204a0
 800e718:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e728:	b29b      	uxth	r3, r3
 800e72a:	1ad3      	subs	r3, r2, r3
 800e72c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e736:	b29b      	uxth	r3, r3
 800e738:	2b00      	cmp	r3, #0
 800e73a:	f000 80cf 	beq.w	800e8dc <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800e73e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e742:	2b00      	cmp	r3, #0
 800e744:	f000 80ca 	beq.w	800e8dc <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e750:	e853 3f00 	ldrex	r3, [r3]
 800e754:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e758:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e75c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	461a      	mov	r2, r3
 800e766:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e76a:	647b      	str	r3, [r7, #68]	; 0x44
 800e76c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e76e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e770:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e772:	e841 2300 	strex	r3, r2, [r1]
 800e776:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d1e4      	bne.n	800e748 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	3308      	adds	r3, #8
 800e784:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e788:	e853 3f00 	ldrex	r3, [r3]
 800e78c:	623b      	str	r3, [r7, #32]
   return(result);
 800e78e:	6a3a      	ldr	r2, [r7, #32]
 800e790:	4b55      	ldr	r3, [pc, #340]	; (800e8e8 <HAL_UART_IRQHandler+0x770>)
 800e792:	4013      	ands	r3, r2
 800e794:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	3308      	adds	r3, #8
 800e79e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e7a2:	633a      	str	r2, [r7, #48]	; 0x30
 800e7a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e7a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7aa:	e841 2300 	strex	r3, r2, [r1]
 800e7ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d1e3      	bne.n	800e77e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2220      	movs	r2, #32
 800e7ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7d0:	693b      	ldr	r3, [r7, #16]
 800e7d2:	e853 3f00 	ldrex	r3, [r3]
 800e7d6:	60fb      	str	r3, [r7, #12]
   return(result);
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	f023 0310 	bic.w	r3, r3, #16
 800e7de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	461a      	mov	r2, r3
 800e7e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e7ec:	61fb      	str	r3, [r7, #28]
 800e7ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7f0:	69b9      	ldr	r1, [r7, #24]
 800e7f2:	69fa      	ldr	r2, [r7, #28]
 800e7f4:	e841 2300 	strex	r3, r2, [r1]
 800e7f8:	617b      	str	r3, [r7, #20]
   return(result);
 800e7fa:	697b      	ldr	r3, [r7, #20]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d1e4      	bne.n	800e7ca <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2202      	movs	r2, #2
 800e804:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e806:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e80a:	4619      	mov	r1, r3
 800e80c:	6878      	ldr	r0, [r7, #4]
 800e80e:	f000 f88b 	bl	800e928 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e812:	e063      	b.n	800e8dc <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e818:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d00e      	beq.n	800e83e <HAL_UART_IRQHandler+0x6c6>
 800e820:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e824:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d008      	beq.n	800e83e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e834:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e836:	6878      	ldr	r0, [r7, #4]
 800e838:	f001 fb7d 	bl	800ff36 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e83c:	e051      	b.n	800e8e2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e83e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e846:	2b00      	cmp	r3, #0
 800e848:	d014      	beq.n	800e874 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e84a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e84e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e852:	2b00      	cmp	r3, #0
 800e854:	d105      	bne.n	800e862 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e856:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e85a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d008      	beq.n	800e874 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e866:	2b00      	cmp	r3, #0
 800e868:	d03a      	beq.n	800e8e0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e86e:	6878      	ldr	r0, [r7, #4]
 800e870:	4798      	blx	r3
    }
    return;
 800e872:	e035      	b.n	800e8e0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d009      	beq.n	800e894 <HAL_UART_IRQHandler+0x71c>
 800e880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d003      	beq.n	800e894 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800e88c:	6878      	ldr	r0, [r7, #4]
 800e88e:	f001 fb27 	bl	800fee0 <UART_EndTransmit_IT>
    return;
 800e892:	e026      	b.n	800e8e2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e898:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d009      	beq.n	800e8b4 <HAL_UART_IRQHandler+0x73c>
 800e8a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e8a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d003      	beq.n	800e8b4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e8ac:	6878      	ldr	r0, [r7, #4]
 800e8ae:	f001 fb56 	bl	800ff5e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e8b2:	e016      	b.n	800e8e2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e8b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e8b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d010      	beq.n	800e8e2 <HAL_UART_IRQHandler+0x76a>
 800e8c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	da0c      	bge.n	800e8e2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e8c8:	6878      	ldr	r0, [r7, #4]
 800e8ca:	f001 fb3e 	bl	800ff4a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e8ce:	e008      	b.n	800e8e2 <HAL_UART_IRQHandler+0x76a>
      return;
 800e8d0:	bf00      	nop
 800e8d2:	e006      	b.n	800e8e2 <HAL_UART_IRQHandler+0x76a>
    return;
 800e8d4:	bf00      	nop
 800e8d6:	e004      	b.n	800e8e2 <HAL_UART_IRQHandler+0x76a>
      return;
 800e8d8:	bf00      	nop
 800e8da:	e002      	b.n	800e8e2 <HAL_UART_IRQHandler+0x76a>
      return;
 800e8dc:	bf00      	nop
 800e8de:	e000      	b.n	800e8e2 <HAL_UART_IRQHandler+0x76a>
    return;
 800e8e0:	bf00      	nop
  }
}
 800e8e2:	37e8      	adds	r7, #232	; 0xe8
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	bd80      	pop	{r7, pc}
 800e8e8:	effffffe 	.word	0xeffffffe

0800e8ec <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e8ec:	b480      	push	{r7}
 800e8ee:	b083      	sub	sp, #12
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800e8f4:	bf00      	nop
 800e8f6:	370c      	adds	r7, #12
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fe:	4770      	bx	lr

0800e900 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e900:	b480      	push	{r7}
 800e902:	b083      	sub	sp, #12
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800e908:	bf00      	nop
 800e90a:	370c      	adds	r7, #12
 800e90c:	46bd      	mov	sp, r7
 800e90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e912:	4770      	bx	lr

0800e914 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e914:	b480      	push	{r7}
 800e916:	b083      	sub	sp, #12
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e91c:	bf00      	nop
 800e91e:	370c      	adds	r7, #12
 800e920:	46bd      	mov	sp, r7
 800e922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e926:	4770      	bx	lr

0800e928 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e928:	b480      	push	{r7}
 800e92a:	b083      	sub	sp, #12
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]
 800e930:	460b      	mov	r3, r1
 800e932:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e934:	bf00      	nop
 800e936:	370c      	adds	r7, #12
 800e938:	46bd      	mov	sp, r7
 800e93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93e:	4770      	bx	lr

0800e940 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e944:	b092      	sub	sp, #72	; 0x48
 800e946:	af00      	add	r7, sp, #0
 800e948:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e94a:	2300      	movs	r3, #0
 800e94c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e950:	697b      	ldr	r3, [r7, #20]
 800e952:	689a      	ldr	r2, [r3, #8]
 800e954:	697b      	ldr	r3, [r7, #20]
 800e956:	691b      	ldr	r3, [r3, #16]
 800e958:	431a      	orrs	r2, r3
 800e95a:	697b      	ldr	r3, [r7, #20]
 800e95c:	695b      	ldr	r3, [r3, #20]
 800e95e:	431a      	orrs	r2, r3
 800e960:	697b      	ldr	r3, [r7, #20]
 800e962:	69db      	ldr	r3, [r3, #28]
 800e964:	4313      	orrs	r3, r2
 800e966:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e968:	697b      	ldr	r3, [r7, #20]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	681a      	ldr	r2, [r3, #0]
 800e96e:	4bbe      	ldr	r3, [pc, #760]	; (800ec68 <UART_SetConfig+0x328>)
 800e970:	4013      	ands	r3, r2
 800e972:	697a      	ldr	r2, [r7, #20]
 800e974:	6812      	ldr	r2, [r2, #0]
 800e976:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e978:	430b      	orrs	r3, r1
 800e97a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e97c:	697b      	ldr	r3, [r7, #20]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	685b      	ldr	r3, [r3, #4]
 800e982:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e986:	697b      	ldr	r3, [r7, #20]
 800e988:	68da      	ldr	r2, [r3, #12]
 800e98a:	697b      	ldr	r3, [r7, #20]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	430a      	orrs	r2, r1
 800e990:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e992:	697b      	ldr	r3, [r7, #20]
 800e994:	699b      	ldr	r3, [r3, #24]
 800e996:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e998:	697b      	ldr	r3, [r7, #20]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	4ab3      	ldr	r2, [pc, #716]	; (800ec6c <UART_SetConfig+0x32c>)
 800e99e:	4293      	cmp	r3, r2
 800e9a0:	d004      	beq.n	800e9ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e9a2:	697b      	ldr	r3, [r7, #20]
 800e9a4:	6a1b      	ldr	r3, [r3, #32]
 800e9a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e9a8:	4313      	orrs	r3, r2
 800e9aa:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e9ac:	697b      	ldr	r3, [r7, #20]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	689a      	ldr	r2, [r3, #8]
 800e9b2:	4baf      	ldr	r3, [pc, #700]	; (800ec70 <UART_SetConfig+0x330>)
 800e9b4:	4013      	ands	r3, r2
 800e9b6:	697a      	ldr	r2, [r7, #20]
 800e9b8:	6812      	ldr	r2, [r2, #0]
 800e9ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e9bc:	430b      	orrs	r3, r1
 800e9be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e9c0:	697b      	ldr	r3, [r7, #20]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9c6:	f023 010f 	bic.w	r1, r3, #15
 800e9ca:	697b      	ldr	r3, [r7, #20]
 800e9cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e9ce:	697b      	ldr	r3, [r7, #20]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	430a      	orrs	r2, r1
 800e9d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e9d6:	697b      	ldr	r3, [r7, #20]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	4aa6      	ldr	r2, [pc, #664]	; (800ec74 <UART_SetConfig+0x334>)
 800e9dc:	4293      	cmp	r3, r2
 800e9de:	d177      	bne.n	800ead0 <UART_SetConfig+0x190>
 800e9e0:	4ba5      	ldr	r3, [pc, #660]	; (800ec78 <UART_SetConfig+0x338>)
 800e9e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e9e8:	2b28      	cmp	r3, #40	; 0x28
 800e9ea:	d86d      	bhi.n	800eac8 <UART_SetConfig+0x188>
 800e9ec:	a201      	add	r2, pc, #4	; (adr r2, 800e9f4 <UART_SetConfig+0xb4>)
 800e9ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9f2:	bf00      	nop
 800e9f4:	0800ea99 	.word	0x0800ea99
 800e9f8:	0800eac9 	.word	0x0800eac9
 800e9fc:	0800eac9 	.word	0x0800eac9
 800ea00:	0800eac9 	.word	0x0800eac9
 800ea04:	0800eac9 	.word	0x0800eac9
 800ea08:	0800eac9 	.word	0x0800eac9
 800ea0c:	0800eac9 	.word	0x0800eac9
 800ea10:	0800eac9 	.word	0x0800eac9
 800ea14:	0800eaa1 	.word	0x0800eaa1
 800ea18:	0800eac9 	.word	0x0800eac9
 800ea1c:	0800eac9 	.word	0x0800eac9
 800ea20:	0800eac9 	.word	0x0800eac9
 800ea24:	0800eac9 	.word	0x0800eac9
 800ea28:	0800eac9 	.word	0x0800eac9
 800ea2c:	0800eac9 	.word	0x0800eac9
 800ea30:	0800eac9 	.word	0x0800eac9
 800ea34:	0800eaa9 	.word	0x0800eaa9
 800ea38:	0800eac9 	.word	0x0800eac9
 800ea3c:	0800eac9 	.word	0x0800eac9
 800ea40:	0800eac9 	.word	0x0800eac9
 800ea44:	0800eac9 	.word	0x0800eac9
 800ea48:	0800eac9 	.word	0x0800eac9
 800ea4c:	0800eac9 	.word	0x0800eac9
 800ea50:	0800eac9 	.word	0x0800eac9
 800ea54:	0800eab1 	.word	0x0800eab1
 800ea58:	0800eac9 	.word	0x0800eac9
 800ea5c:	0800eac9 	.word	0x0800eac9
 800ea60:	0800eac9 	.word	0x0800eac9
 800ea64:	0800eac9 	.word	0x0800eac9
 800ea68:	0800eac9 	.word	0x0800eac9
 800ea6c:	0800eac9 	.word	0x0800eac9
 800ea70:	0800eac9 	.word	0x0800eac9
 800ea74:	0800eab9 	.word	0x0800eab9
 800ea78:	0800eac9 	.word	0x0800eac9
 800ea7c:	0800eac9 	.word	0x0800eac9
 800ea80:	0800eac9 	.word	0x0800eac9
 800ea84:	0800eac9 	.word	0x0800eac9
 800ea88:	0800eac9 	.word	0x0800eac9
 800ea8c:	0800eac9 	.word	0x0800eac9
 800ea90:	0800eac9 	.word	0x0800eac9
 800ea94:	0800eac1 	.word	0x0800eac1
 800ea98:	2301      	movs	r3, #1
 800ea9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea9e:	e326      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800eaa0:	2304      	movs	r3, #4
 800eaa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaa6:	e322      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800eaa8:	2308      	movs	r3, #8
 800eaaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaae:	e31e      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800eab0:	2310      	movs	r3, #16
 800eab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eab6:	e31a      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800eab8:	2320      	movs	r3, #32
 800eaba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eabe:	e316      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800eac0:	2340      	movs	r3, #64	; 0x40
 800eac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eac6:	e312      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800eac8:	2380      	movs	r3, #128	; 0x80
 800eaca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eace:	e30e      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800ead0:	697b      	ldr	r3, [r7, #20]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	4a69      	ldr	r2, [pc, #420]	; (800ec7c <UART_SetConfig+0x33c>)
 800ead6:	4293      	cmp	r3, r2
 800ead8:	d130      	bne.n	800eb3c <UART_SetConfig+0x1fc>
 800eada:	4b67      	ldr	r3, [pc, #412]	; (800ec78 <UART_SetConfig+0x338>)
 800eadc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eade:	f003 0307 	and.w	r3, r3, #7
 800eae2:	2b05      	cmp	r3, #5
 800eae4:	d826      	bhi.n	800eb34 <UART_SetConfig+0x1f4>
 800eae6:	a201      	add	r2, pc, #4	; (adr r2, 800eaec <UART_SetConfig+0x1ac>)
 800eae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaec:	0800eb05 	.word	0x0800eb05
 800eaf0:	0800eb0d 	.word	0x0800eb0d
 800eaf4:	0800eb15 	.word	0x0800eb15
 800eaf8:	0800eb1d 	.word	0x0800eb1d
 800eafc:	0800eb25 	.word	0x0800eb25
 800eb00:	0800eb2d 	.word	0x0800eb2d
 800eb04:	2300      	movs	r3, #0
 800eb06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb0a:	e2f0      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800eb0c:	2304      	movs	r3, #4
 800eb0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb12:	e2ec      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800eb14:	2308      	movs	r3, #8
 800eb16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb1a:	e2e8      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800eb1c:	2310      	movs	r3, #16
 800eb1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb22:	e2e4      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800eb24:	2320      	movs	r3, #32
 800eb26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb2a:	e2e0      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800eb2c:	2340      	movs	r3, #64	; 0x40
 800eb2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb32:	e2dc      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800eb34:	2380      	movs	r3, #128	; 0x80
 800eb36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb3a:	e2d8      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800eb3c:	697b      	ldr	r3, [r7, #20]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	4a4f      	ldr	r2, [pc, #316]	; (800ec80 <UART_SetConfig+0x340>)
 800eb42:	4293      	cmp	r3, r2
 800eb44:	d130      	bne.n	800eba8 <UART_SetConfig+0x268>
 800eb46:	4b4c      	ldr	r3, [pc, #304]	; (800ec78 <UART_SetConfig+0x338>)
 800eb48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb4a:	f003 0307 	and.w	r3, r3, #7
 800eb4e:	2b05      	cmp	r3, #5
 800eb50:	d826      	bhi.n	800eba0 <UART_SetConfig+0x260>
 800eb52:	a201      	add	r2, pc, #4	; (adr r2, 800eb58 <UART_SetConfig+0x218>)
 800eb54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb58:	0800eb71 	.word	0x0800eb71
 800eb5c:	0800eb79 	.word	0x0800eb79
 800eb60:	0800eb81 	.word	0x0800eb81
 800eb64:	0800eb89 	.word	0x0800eb89
 800eb68:	0800eb91 	.word	0x0800eb91
 800eb6c:	0800eb99 	.word	0x0800eb99
 800eb70:	2300      	movs	r3, #0
 800eb72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb76:	e2ba      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800eb78:	2304      	movs	r3, #4
 800eb7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb7e:	e2b6      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800eb80:	2308      	movs	r3, #8
 800eb82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb86:	e2b2      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800eb88:	2310      	movs	r3, #16
 800eb8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb8e:	e2ae      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800eb90:	2320      	movs	r3, #32
 800eb92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb96:	e2aa      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800eb98:	2340      	movs	r3, #64	; 0x40
 800eb9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb9e:	e2a6      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800eba0:	2380      	movs	r3, #128	; 0x80
 800eba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eba6:	e2a2      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800eba8:	697b      	ldr	r3, [r7, #20]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	4a35      	ldr	r2, [pc, #212]	; (800ec84 <UART_SetConfig+0x344>)
 800ebae:	4293      	cmp	r3, r2
 800ebb0:	d130      	bne.n	800ec14 <UART_SetConfig+0x2d4>
 800ebb2:	4b31      	ldr	r3, [pc, #196]	; (800ec78 <UART_SetConfig+0x338>)
 800ebb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebb6:	f003 0307 	and.w	r3, r3, #7
 800ebba:	2b05      	cmp	r3, #5
 800ebbc:	d826      	bhi.n	800ec0c <UART_SetConfig+0x2cc>
 800ebbe:	a201      	add	r2, pc, #4	; (adr r2, 800ebc4 <UART_SetConfig+0x284>)
 800ebc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebc4:	0800ebdd 	.word	0x0800ebdd
 800ebc8:	0800ebe5 	.word	0x0800ebe5
 800ebcc:	0800ebed 	.word	0x0800ebed
 800ebd0:	0800ebf5 	.word	0x0800ebf5
 800ebd4:	0800ebfd 	.word	0x0800ebfd
 800ebd8:	0800ec05 	.word	0x0800ec05
 800ebdc:	2300      	movs	r3, #0
 800ebde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebe2:	e284      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800ebe4:	2304      	movs	r3, #4
 800ebe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebea:	e280      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800ebec:	2308      	movs	r3, #8
 800ebee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebf2:	e27c      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800ebf4:	2310      	movs	r3, #16
 800ebf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebfa:	e278      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800ebfc:	2320      	movs	r3, #32
 800ebfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec02:	e274      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800ec04:	2340      	movs	r3, #64	; 0x40
 800ec06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec0a:	e270      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800ec0c:	2380      	movs	r3, #128	; 0x80
 800ec0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec12:	e26c      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800ec14:	697b      	ldr	r3, [r7, #20]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	4a1b      	ldr	r2, [pc, #108]	; (800ec88 <UART_SetConfig+0x348>)
 800ec1a:	4293      	cmp	r3, r2
 800ec1c:	d142      	bne.n	800eca4 <UART_SetConfig+0x364>
 800ec1e:	4b16      	ldr	r3, [pc, #88]	; (800ec78 <UART_SetConfig+0x338>)
 800ec20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec22:	f003 0307 	and.w	r3, r3, #7
 800ec26:	2b05      	cmp	r3, #5
 800ec28:	d838      	bhi.n	800ec9c <UART_SetConfig+0x35c>
 800ec2a:	a201      	add	r2, pc, #4	; (adr r2, 800ec30 <UART_SetConfig+0x2f0>)
 800ec2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec30:	0800ec49 	.word	0x0800ec49
 800ec34:	0800ec51 	.word	0x0800ec51
 800ec38:	0800ec59 	.word	0x0800ec59
 800ec3c:	0800ec61 	.word	0x0800ec61
 800ec40:	0800ec8d 	.word	0x0800ec8d
 800ec44:	0800ec95 	.word	0x0800ec95
 800ec48:	2300      	movs	r3, #0
 800ec4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec4e:	e24e      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800ec50:	2304      	movs	r3, #4
 800ec52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec56:	e24a      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800ec58:	2308      	movs	r3, #8
 800ec5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec5e:	e246      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800ec60:	2310      	movs	r3, #16
 800ec62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec66:	e242      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800ec68:	cfff69f3 	.word	0xcfff69f3
 800ec6c:	58000c00 	.word	0x58000c00
 800ec70:	11fff4ff 	.word	0x11fff4ff
 800ec74:	40011000 	.word	0x40011000
 800ec78:	58024400 	.word	0x58024400
 800ec7c:	40004400 	.word	0x40004400
 800ec80:	40004800 	.word	0x40004800
 800ec84:	40004c00 	.word	0x40004c00
 800ec88:	40005000 	.word	0x40005000
 800ec8c:	2320      	movs	r3, #32
 800ec8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec92:	e22c      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800ec94:	2340      	movs	r3, #64	; 0x40
 800ec96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec9a:	e228      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800ec9c:	2380      	movs	r3, #128	; 0x80
 800ec9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eca2:	e224      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800eca4:	697b      	ldr	r3, [r7, #20]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	4ab1      	ldr	r2, [pc, #708]	; (800ef70 <UART_SetConfig+0x630>)
 800ecaa:	4293      	cmp	r3, r2
 800ecac:	d176      	bne.n	800ed9c <UART_SetConfig+0x45c>
 800ecae:	4bb1      	ldr	r3, [pc, #708]	; (800ef74 <UART_SetConfig+0x634>)
 800ecb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ecb6:	2b28      	cmp	r3, #40	; 0x28
 800ecb8:	d86c      	bhi.n	800ed94 <UART_SetConfig+0x454>
 800ecba:	a201      	add	r2, pc, #4	; (adr r2, 800ecc0 <UART_SetConfig+0x380>)
 800ecbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecc0:	0800ed65 	.word	0x0800ed65
 800ecc4:	0800ed95 	.word	0x0800ed95
 800ecc8:	0800ed95 	.word	0x0800ed95
 800eccc:	0800ed95 	.word	0x0800ed95
 800ecd0:	0800ed95 	.word	0x0800ed95
 800ecd4:	0800ed95 	.word	0x0800ed95
 800ecd8:	0800ed95 	.word	0x0800ed95
 800ecdc:	0800ed95 	.word	0x0800ed95
 800ece0:	0800ed6d 	.word	0x0800ed6d
 800ece4:	0800ed95 	.word	0x0800ed95
 800ece8:	0800ed95 	.word	0x0800ed95
 800ecec:	0800ed95 	.word	0x0800ed95
 800ecf0:	0800ed95 	.word	0x0800ed95
 800ecf4:	0800ed95 	.word	0x0800ed95
 800ecf8:	0800ed95 	.word	0x0800ed95
 800ecfc:	0800ed95 	.word	0x0800ed95
 800ed00:	0800ed75 	.word	0x0800ed75
 800ed04:	0800ed95 	.word	0x0800ed95
 800ed08:	0800ed95 	.word	0x0800ed95
 800ed0c:	0800ed95 	.word	0x0800ed95
 800ed10:	0800ed95 	.word	0x0800ed95
 800ed14:	0800ed95 	.word	0x0800ed95
 800ed18:	0800ed95 	.word	0x0800ed95
 800ed1c:	0800ed95 	.word	0x0800ed95
 800ed20:	0800ed7d 	.word	0x0800ed7d
 800ed24:	0800ed95 	.word	0x0800ed95
 800ed28:	0800ed95 	.word	0x0800ed95
 800ed2c:	0800ed95 	.word	0x0800ed95
 800ed30:	0800ed95 	.word	0x0800ed95
 800ed34:	0800ed95 	.word	0x0800ed95
 800ed38:	0800ed95 	.word	0x0800ed95
 800ed3c:	0800ed95 	.word	0x0800ed95
 800ed40:	0800ed85 	.word	0x0800ed85
 800ed44:	0800ed95 	.word	0x0800ed95
 800ed48:	0800ed95 	.word	0x0800ed95
 800ed4c:	0800ed95 	.word	0x0800ed95
 800ed50:	0800ed95 	.word	0x0800ed95
 800ed54:	0800ed95 	.word	0x0800ed95
 800ed58:	0800ed95 	.word	0x0800ed95
 800ed5c:	0800ed95 	.word	0x0800ed95
 800ed60:	0800ed8d 	.word	0x0800ed8d
 800ed64:	2301      	movs	r3, #1
 800ed66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed6a:	e1c0      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800ed6c:	2304      	movs	r3, #4
 800ed6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed72:	e1bc      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800ed74:	2308      	movs	r3, #8
 800ed76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed7a:	e1b8      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800ed7c:	2310      	movs	r3, #16
 800ed7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed82:	e1b4      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800ed84:	2320      	movs	r3, #32
 800ed86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed8a:	e1b0      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800ed8c:	2340      	movs	r3, #64	; 0x40
 800ed8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed92:	e1ac      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800ed94:	2380      	movs	r3, #128	; 0x80
 800ed96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed9a:	e1a8      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800ed9c:	697b      	ldr	r3, [r7, #20]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	4a75      	ldr	r2, [pc, #468]	; (800ef78 <UART_SetConfig+0x638>)
 800eda2:	4293      	cmp	r3, r2
 800eda4:	d130      	bne.n	800ee08 <UART_SetConfig+0x4c8>
 800eda6:	4b73      	ldr	r3, [pc, #460]	; (800ef74 <UART_SetConfig+0x634>)
 800eda8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edaa:	f003 0307 	and.w	r3, r3, #7
 800edae:	2b05      	cmp	r3, #5
 800edb0:	d826      	bhi.n	800ee00 <UART_SetConfig+0x4c0>
 800edb2:	a201      	add	r2, pc, #4	; (adr r2, 800edb8 <UART_SetConfig+0x478>)
 800edb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edb8:	0800edd1 	.word	0x0800edd1
 800edbc:	0800edd9 	.word	0x0800edd9
 800edc0:	0800ede1 	.word	0x0800ede1
 800edc4:	0800ede9 	.word	0x0800ede9
 800edc8:	0800edf1 	.word	0x0800edf1
 800edcc:	0800edf9 	.word	0x0800edf9
 800edd0:	2300      	movs	r3, #0
 800edd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edd6:	e18a      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800edd8:	2304      	movs	r3, #4
 800edda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edde:	e186      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800ede0:	2308      	movs	r3, #8
 800ede2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ede6:	e182      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800ede8:	2310      	movs	r3, #16
 800edea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edee:	e17e      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800edf0:	2320      	movs	r3, #32
 800edf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edf6:	e17a      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800edf8:	2340      	movs	r3, #64	; 0x40
 800edfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edfe:	e176      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800ee00:	2380      	movs	r3, #128	; 0x80
 800ee02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee06:	e172      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800ee08:	697b      	ldr	r3, [r7, #20]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	4a5b      	ldr	r2, [pc, #364]	; (800ef7c <UART_SetConfig+0x63c>)
 800ee0e:	4293      	cmp	r3, r2
 800ee10:	d130      	bne.n	800ee74 <UART_SetConfig+0x534>
 800ee12:	4b58      	ldr	r3, [pc, #352]	; (800ef74 <UART_SetConfig+0x634>)
 800ee14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee16:	f003 0307 	and.w	r3, r3, #7
 800ee1a:	2b05      	cmp	r3, #5
 800ee1c:	d826      	bhi.n	800ee6c <UART_SetConfig+0x52c>
 800ee1e:	a201      	add	r2, pc, #4	; (adr r2, 800ee24 <UART_SetConfig+0x4e4>)
 800ee20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee24:	0800ee3d 	.word	0x0800ee3d
 800ee28:	0800ee45 	.word	0x0800ee45
 800ee2c:	0800ee4d 	.word	0x0800ee4d
 800ee30:	0800ee55 	.word	0x0800ee55
 800ee34:	0800ee5d 	.word	0x0800ee5d
 800ee38:	0800ee65 	.word	0x0800ee65
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee42:	e154      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800ee44:	2304      	movs	r3, #4
 800ee46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee4a:	e150      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800ee4c:	2308      	movs	r3, #8
 800ee4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee52:	e14c      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800ee54:	2310      	movs	r3, #16
 800ee56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee5a:	e148      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800ee5c:	2320      	movs	r3, #32
 800ee5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee62:	e144      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800ee64:	2340      	movs	r3, #64	; 0x40
 800ee66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee6a:	e140      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800ee6c:	2380      	movs	r3, #128	; 0x80
 800ee6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee72:	e13c      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800ee74:	697b      	ldr	r3, [r7, #20]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	4a41      	ldr	r2, [pc, #260]	; (800ef80 <UART_SetConfig+0x640>)
 800ee7a:	4293      	cmp	r3, r2
 800ee7c:	f040 8082 	bne.w	800ef84 <UART_SetConfig+0x644>
 800ee80:	4b3c      	ldr	r3, [pc, #240]	; (800ef74 <UART_SetConfig+0x634>)
 800ee82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ee88:	2b28      	cmp	r3, #40	; 0x28
 800ee8a:	d86d      	bhi.n	800ef68 <UART_SetConfig+0x628>
 800ee8c:	a201      	add	r2, pc, #4	; (adr r2, 800ee94 <UART_SetConfig+0x554>)
 800ee8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee92:	bf00      	nop
 800ee94:	0800ef39 	.word	0x0800ef39
 800ee98:	0800ef69 	.word	0x0800ef69
 800ee9c:	0800ef69 	.word	0x0800ef69
 800eea0:	0800ef69 	.word	0x0800ef69
 800eea4:	0800ef69 	.word	0x0800ef69
 800eea8:	0800ef69 	.word	0x0800ef69
 800eeac:	0800ef69 	.word	0x0800ef69
 800eeb0:	0800ef69 	.word	0x0800ef69
 800eeb4:	0800ef41 	.word	0x0800ef41
 800eeb8:	0800ef69 	.word	0x0800ef69
 800eebc:	0800ef69 	.word	0x0800ef69
 800eec0:	0800ef69 	.word	0x0800ef69
 800eec4:	0800ef69 	.word	0x0800ef69
 800eec8:	0800ef69 	.word	0x0800ef69
 800eecc:	0800ef69 	.word	0x0800ef69
 800eed0:	0800ef69 	.word	0x0800ef69
 800eed4:	0800ef49 	.word	0x0800ef49
 800eed8:	0800ef69 	.word	0x0800ef69
 800eedc:	0800ef69 	.word	0x0800ef69
 800eee0:	0800ef69 	.word	0x0800ef69
 800eee4:	0800ef69 	.word	0x0800ef69
 800eee8:	0800ef69 	.word	0x0800ef69
 800eeec:	0800ef69 	.word	0x0800ef69
 800eef0:	0800ef69 	.word	0x0800ef69
 800eef4:	0800ef51 	.word	0x0800ef51
 800eef8:	0800ef69 	.word	0x0800ef69
 800eefc:	0800ef69 	.word	0x0800ef69
 800ef00:	0800ef69 	.word	0x0800ef69
 800ef04:	0800ef69 	.word	0x0800ef69
 800ef08:	0800ef69 	.word	0x0800ef69
 800ef0c:	0800ef69 	.word	0x0800ef69
 800ef10:	0800ef69 	.word	0x0800ef69
 800ef14:	0800ef59 	.word	0x0800ef59
 800ef18:	0800ef69 	.word	0x0800ef69
 800ef1c:	0800ef69 	.word	0x0800ef69
 800ef20:	0800ef69 	.word	0x0800ef69
 800ef24:	0800ef69 	.word	0x0800ef69
 800ef28:	0800ef69 	.word	0x0800ef69
 800ef2c:	0800ef69 	.word	0x0800ef69
 800ef30:	0800ef69 	.word	0x0800ef69
 800ef34:	0800ef61 	.word	0x0800ef61
 800ef38:	2301      	movs	r3, #1
 800ef3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef3e:	e0d6      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800ef40:	2304      	movs	r3, #4
 800ef42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef46:	e0d2      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800ef48:	2308      	movs	r3, #8
 800ef4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef4e:	e0ce      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800ef50:	2310      	movs	r3, #16
 800ef52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef56:	e0ca      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800ef58:	2320      	movs	r3, #32
 800ef5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef5e:	e0c6      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800ef60:	2340      	movs	r3, #64	; 0x40
 800ef62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef66:	e0c2      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800ef68:	2380      	movs	r3, #128	; 0x80
 800ef6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef6e:	e0be      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800ef70:	40011400 	.word	0x40011400
 800ef74:	58024400 	.word	0x58024400
 800ef78:	40007800 	.word	0x40007800
 800ef7c:	40007c00 	.word	0x40007c00
 800ef80:	40011800 	.word	0x40011800
 800ef84:	697b      	ldr	r3, [r7, #20]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	4aad      	ldr	r2, [pc, #692]	; (800f240 <UART_SetConfig+0x900>)
 800ef8a:	4293      	cmp	r3, r2
 800ef8c:	d176      	bne.n	800f07c <UART_SetConfig+0x73c>
 800ef8e:	4bad      	ldr	r3, [pc, #692]	; (800f244 <UART_SetConfig+0x904>)
 800ef90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ef96:	2b28      	cmp	r3, #40	; 0x28
 800ef98:	d86c      	bhi.n	800f074 <UART_SetConfig+0x734>
 800ef9a:	a201      	add	r2, pc, #4	; (adr r2, 800efa0 <UART_SetConfig+0x660>)
 800ef9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efa0:	0800f045 	.word	0x0800f045
 800efa4:	0800f075 	.word	0x0800f075
 800efa8:	0800f075 	.word	0x0800f075
 800efac:	0800f075 	.word	0x0800f075
 800efb0:	0800f075 	.word	0x0800f075
 800efb4:	0800f075 	.word	0x0800f075
 800efb8:	0800f075 	.word	0x0800f075
 800efbc:	0800f075 	.word	0x0800f075
 800efc0:	0800f04d 	.word	0x0800f04d
 800efc4:	0800f075 	.word	0x0800f075
 800efc8:	0800f075 	.word	0x0800f075
 800efcc:	0800f075 	.word	0x0800f075
 800efd0:	0800f075 	.word	0x0800f075
 800efd4:	0800f075 	.word	0x0800f075
 800efd8:	0800f075 	.word	0x0800f075
 800efdc:	0800f075 	.word	0x0800f075
 800efe0:	0800f055 	.word	0x0800f055
 800efe4:	0800f075 	.word	0x0800f075
 800efe8:	0800f075 	.word	0x0800f075
 800efec:	0800f075 	.word	0x0800f075
 800eff0:	0800f075 	.word	0x0800f075
 800eff4:	0800f075 	.word	0x0800f075
 800eff8:	0800f075 	.word	0x0800f075
 800effc:	0800f075 	.word	0x0800f075
 800f000:	0800f05d 	.word	0x0800f05d
 800f004:	0800f075 	.word	0x0800f075
 800f008:	0800f075 	.word	0x0800f075
 800f00c:	0800f075 	.word	0x0800f075
 800f010:	0800f075 	.word	0x0800f075
 800f014:	0800f075 	.word	0x0800f075
 800f018:	0800f075 	.word	0x0800f075
 800f01c:	0800f075 	.word	0x0800f075
 800f020:	0800f065 	.word	0x0800f065
 800f024:	0800f075 	.word	0x0800f075
 800f028:	0800f075 	.word	0x0800f075
 800f02c:	0800f075 	.word	0x0800f075
 800f030:	0800f075 	.word	0x0800f075
 800f034:	0800f075 	.word	0x0800f075
 800f038:	0800f075 	.word	0x0800f075
 800f03c:	0800f075 	.word	0x0800f075
 800f040:	0800f06d 	.word	0x0800f06d
 800f044:	2301      	movs	r3, #1
 800f046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f04a:	e050      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800f04c:	2304      	movs	r3, #4
 800f04e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f052:	e04c      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800f054:	2308      	movs	r3, #8
 800f056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f05a:	e048      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800f05c:	2310      	movs	r3, #16
 800f05e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f062:	e044      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800f064:	2320      	movs	r3, #32
 800f066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f06a:	e040      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800f06c:	2340      	movs	r3, #64	; 0x40
 800f06e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f072:	e03c      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800f074:	2380      	movs	r3, #128	; 0x80
 800f076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f07a:	e038      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800f07c:	697b      	ldr	r3, [r7, #20]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	4a71      	ldr	r2, [pc, #452]	; (800f248 <UART_SetConfig+0x908>)
 800f082:	4293      	cmp	r3, r2
 800f084:	d130      	bne.n	800f0e8 <UART_SetConfig+0x7a8>
 800f086:	4b6f      	ldr	r3, [pc, #444]	; (800f244 <UART_SetConfig+0x904>)
 800f088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f08a:	f003 0307 	and.w	r3, r3, #7
 800f08e:	2b05      	cmp	r3, #5
 800f090:	d826      	bhi.n	800f0e0 <UART_SetConfig+0x7a0>
 800f092:	a201      	add	r2, pc, #4	; (adr r2, 800f098 <UART_SetConfig+0x758>)
 800f094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f098:	0800f0b1 	.word	0x0800f0b1
 800f09c:	0800f0b9 	.word	0x0800f0b9
 800f0a0:	0800f0c1 	.word	0x0800f0c1
 800f0a4:	0800f0c9 	.word	0x0800f0c9
 800f0a8:	0800f0d1 	.word	0x0800f0d1
 800f0ac:	0800f0d9 	.word	0x0800f0d9
 800f0b0:	2302      	movs	r3, #2
 800f0b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0b6:	e01a      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800f0b8:	2304      	movs	r3, #4
 800f0ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0be:	e016      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800f0c0:	2308      	movs	r3, #8
 800f0c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0c6:	e012      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800f0c8:	2310      	movs	r3, #16
 800f0ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0ce:	e00e      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800f0d0:	2320      	movs	r3, #32
 800f0d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0d6:	e00a      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800f0d8:	2340      	movs	r3, #64	; 0x40
 800f0da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0de:	e006      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800f0e0:	2380      	movs	r3, #128	; 0x80
 800f0e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0e6:	e002      	b.n	800f0ee <UART_SetConfig+0x7ae>
 800f0e8:	2380      	movs	r3, #128	; 0x80
 800f0ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f0ee:	697b      	ldr	r3, [r7, #20]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	4a55      	ldr	r2, [pc, #340]	; (800f248 <UART_SetConfig+0x908>)
 800f0f4:	4293      	cmp	r3, r2
 800f0f6:	f040 80f8 	bne.w	800f2ea <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f0fa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f0fe:	2b20      	cmp	r3, #32
 800f100:	dc46      	bgt.n	800f190 <UART_SetConfig+0x850>
 800f102:	2b02      	cmp	r3, #2
 800f104:	db75      	blt.n	800f1f2 <UART_SetConfig+0x8b2>
 800f106:	3b02      	subs	r3, #2
 800f108:	2b1e      	cmp	r3, #30
 800f10a:	d872      	bhi.n	800f1f2 <UART_SetConfig+0x8b2>
 800f10c:	a201      	add	r2, pc, #4	; (adr r2, 800f114 <UART_SetConfig+0x7d4>)
 800f10e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f112:	bf00      	nop
 800f114:	0800f197 	.word	0x0800f197
 800f118:	0800f1f3 	.word	0x0800f1f3
 800f11c:	0800f19f 	.word	0x0800f19f
 800f120:	0800f1f3 	.word	0x0800f1f3
 800f124:	0800f1f3 	.word	0x0800f1f3
 800f128:	0800f1f3 	.word	0x0800f1f3
 800f12c:	0800f1af 	.word	0x0800f1af
 800f130:	0800f1f3 	.word	0x0800f1f3
 800f134:	0800f1f3 	.word	0x0800f1f3
 800f138:	0800f1f3 	.word	0x0800f1f3
 800f13c:	0800f1f3 	.word	0x0800f1f3
 800f140:	0800f1f3 	.word	0x0800f1f3
 800f144:	0800f1f3 	.word	0x0800f1f3
 800f148:	0800f1f3 	.word	0x0800f1f3
 800f14c:	0800f1bf 	.word	0x0800f1bf
 800f150:	0800f1f3 	.word	0x0800f1f3
 800f154:	0800f1f3 	.word	0x0800f1f3
 800f158:	0800f1f3 	.word	0x0800f1f3
 800f15c:	0800f1f3 	.word	0x0800f1f3
 800f160:	0800f1f3 	.word	0x0800f1f3
 800f164:	0800f1f3 	.word	0x0800f1f3
 800f168:	0800f1f3 	.word	0x0800f1f3
 800f16c:	0800f1f3 	.word	0x0800f1f3
 800f170:	0800f1f3 	.word	0x0800f1f3
 800f174:	0800f1f3 	.word	0x0800f1f3
 800f178:	0800f1f3 	.word	0x0800f1f3
 800f17c:	0800f1f3 	.word	0x0800f1f3
 800f180:	0800f1f3 	.word	0x0800f1f3
 800f184:	0800f1f3 	.word	0x0800f1f3
 800f188:	0800f1f3 	.word	0x0800f1f3
 800f18c:	0800f1e5 	.word	0x0800f1e5
 800f190:	2b40      	cmp	r3, #64	; 0x40
 800f192:	d02a      	beq.n	800f1ea <UART_SetConfig+0x8aa>
 800f194:	e02d      	b.n	800f1f2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f196:	f7fc fd4f 	bl	800bc38 <HAL_RCCEx_GetD3PCLK1Freq>
 800f19a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f19c:	e02f      	b.n	800f1fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f19e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	f7fc fd5e 	bl	800bc64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1ac:	e027      	b.n	800f1fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f1ae:	f107 0318 	add.w	r3, r7, #24
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	f7fc feaa 	bl	800bf0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f1b8:	69fb      	ldr	r3, [r7, #28]
 800f1ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1bc:	e01f      	b.n	800f1fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f1be:	4b21      	ldr	r3, [pc, #132]	; (800f244 <UART_SetConfig+0x904>)
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	f003 0320 	and.w	r3, r3, #32
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d009      	beq.n	800f1de <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f1ca:	4b1e      	ldr	r3, [pc, #120]	; (800f244 <UART_SetConfig+0x904>)
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	08db      	lsrs	r3, r3, #3
 800f1d0:	f003 0303 	and.w	r3, r3, #3
 800f1d4:	4a1d      	ldr	r2, [pc, #116]	; (800f24c <UART_SetConfig+0x90c>)
 800f1d6:	fa22 f303 	lsr.w	r3, r2, r3
 800f1da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f1dc:	e00f      	b.n	800f1fe <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f1de:	4b1b      	ldr	r3, [pc, #108]	; (800f24c <UART_SetConfig+0x90c>)
 800f1e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1e2:	e00c      	b.n	800f1fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f1e4:	4b1a      	ldr	r3, [pc, #104]	; (800f250 <UART_SetConfig+0x910>)
 800f1e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1e8:	e009      	b.n	800f1fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f1ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f1ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1f0:	e005      	b.n	800f1fe <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f1f6:	2301      	movs	r3, #1
 800f1f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f1fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f1fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f200:	2b00      	cmp	r3, #0
 800f202:	f000 81ee 	beq.w	800f5e2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f206:	697b      	ldr	r3, [r7, #20]
 800f208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f20a:	4a12      	ldr	r2, [pc, #72]	; (800f254 <UART_SetConfig+0x914>)
 800f20c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f210:	461a      	mov	r2, r3
 800f212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f214:	fbb3 f3f2 	udiv	r3, r3, r2
 800f218:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f21a:	697b      	ldr	r3, [r7, #20]
 800f21c:	685a      	ldr	r2, [r3, #4]
 800f21e:	4613      	mov	r3, r2
 800f220:	005b      	lsls	r3, r3, #1
 800f222:	4413      	add	r3, r2
 800f224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f226:	429a      	cmp	r2, r3
 800f228:	d305      	bcc.n	800f236 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f22a:	697b      	ldr	r3, [r7, #20]
 800f22c:	685b      	ldr	r3, [r3, #4]
 800f22e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f232:	429a      	cmp	r2, r3
 800f234:	d910      	bls.n	800f258 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800f236:	2301      	movs	r3, #1
 800f238:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f23c:	e1d1      	b.n	800f5e2 <UART_SetConfig+0xca2>
 800f23e:	bf00      	nop
 800f240:	40011c00 	.word	0x40011c00
 800f244:	58024400 	.word	0x58024400
 800f248:	58000c00 	.word	0x58000c00
 800f24c:	03d09000 	.word	0x03d09000
 800f250:	003d0900 	.word	0x003d0900
 800f254:	080107e4 	.word	0x080107e4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f25a:	2200      	movs	r2, #0
 800f25c:	60bb      	str	r3, [r7, #8]
 800f25e:	60fa      	str	r2, [r7, #12]
 800f260:	697b      	ldr	r3, [r7, #20]
 800f262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f264:	4ac0      	ldr	r2, [pc, #768]	; (800f568 <UART_SetConfig+0xc28>)
 800f266:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f26a:	b29b      	uxth	r3, r3
 800f26c:	2200      	movs	r2, #0
 800f26e:	603b      	str	r3, [r7, #0]
 800f270:	607a      	str	r2, [r7, #4]
 800f272:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f276:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f27a:	f7f1 f851 	bl	8000320 <__aeabi_uldivmod>
 800f27e:	4602      	mov	r2, r0
 800f280:	460b      	mov	r3, r1
 800f282:	4610      	mov	r0, r2
 800f284:	4619      	mov	r1, r3
 800f286:	f04f 0200 	mov.w	r2, #0
 800f28a:	f04f 0300 	mov.w	r3, #0
 800f28e:	020b      	lsls	r3, r1, #8
 800f290:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f294:	0202      	lsls	r2, r0, #8
 800f296:	6979      	ldr	r1, [r7, #20]
 800f298:	6849      	ldr	r1, [r1, #4]
 800f29a:	0849      	lsrs	r1, r1, #1
 800f29c:	2000      	movs	r0, #0
 800f29e:	460c      	mov	r4, r1
 800f2a0:	4605      	mov	r5, r0
 800f2a2:	eb12 0804 	adds.w	r8, r2, r4
 800f2a6:	eb43 0905 	adc.w	r9, r3, r5
 800f2aa:	697b      	ldr	r3, [r7, #20]
 800f2ac:	685b      	ldr	r3, [r3, #4]
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	469a      	mov	sl, r3
 800f2b2:	4693      	mov	fp, r2
 800f2b4:	4652      	mov	r2, sl
 800f2b6:	465b      	mov	r3, fp
 800f2b8:	4640      	mov	r0, r8
 800f2ba:	4649      	mov	r1, r9
 800f2bc:	f7f1 f830 	bl	8000320 <__aeabi_uldivmod>
 800f2c0:	4602      	mov	r2, r0
 800f2c2:	460b      	mov	r3, r1
 800f2c4:	4613      	mov	r3, r2
 800f2c6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f2ce:	d308      	bcc.n	800f2e2 <UART_SetConfig+0x9a2>
 800f2d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f2d6:	d204      	bcs.n	800f2e2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800f2d8:	697b      	ldr	r3, [r7, #20]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f2de:	60da      	str	r2, [r3, #12]
 800f2e0:	e17f      	b.n	800f5e2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800f2e2:	2301      	movs	r3, #1
 800f2e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f2e8:	e17b      	b.n	800f5e2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f2ea:	697b      	ldr	r3, [r7, #20]
 800f2ec:	69db      	ldr	r3, [r3, #28]
 800f2ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f2f2:	f040 80bd 	bne.w	800f470 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800f2f6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f2fa:	2b20      	cmp	r3, #32
 800f2fc:	dc48      	bgt.n	800f390 <UART_SetConfig+0xa50>
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	db7b      	blt.n	800f3fa <UART_SetConfig+0xaba>
 800f302:	2b20      	cmp	r3, #32
 800f304:	d879      	bhi.n	800f3fa <UART_SetConfig+0xaba>
 800f306:	a201      	add	r2, pc, #4	; (adr r2, 800f30c <UART_SetConfig+0x9cc>)
 800f308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f30c:	0800f397 	.word	0x0800f397
 800f310:	0800f39f 	.word	0x0800f39f
 800f314:	0800f3fb 	.word	0x0800f3fb
 800f318:	0800f3fb 	.word	0x0800f3fb
 800f31c:	0800f3a7 	.word	0x0800f3a7
 800f320:	0800f3fb 	.word	0x0800f3fb
 800f324:	0800f3fb 	.word	0x0800f3fb
 800f328:	0800f3fb 	.word	0x0800f3fb
 800f32c:	0800f3b7 	.word	0x0800f3b7
 800f330:	0800f3fb 	.word	0x0800f3fb
 800f334:	0800f3fb 	.word	0x0800f3fb
 800f338:	0800f3fb 	.word	0x0800f3fb
 800f33c:	0800f3fb 	.word	0x0800f3fb
 800f340:	0800f3fb 	.word	0x0800f3fb
 800f344:	0800f3fb 	.word	0x0800f3fb
 800f348:	0800f3fb 	.word	0x0800f3fb
 800f34c:	0800f3c7 	.word	0x0800f3c7
 800f350:	0800f3fb 	.word	0x0800f3fb
 800f354:	0800f3fb 	.word	0x0800f3fb
 800f358:	0800f3fb 	.word	0x0800f3fb
 800f35c:	0800f3fb 	.word	0x0800f3fb
 800f360:	0800f3fb 	.word	0x0800f3fb
 800f364:	0800f3fb 	.word	0x0800f3fb
 800f368:	0800f3fb 	.word	0x0800f3fb
 800f36c:	0800f3fb 	.word	0x0800f3fb
 800f370:	0800f3fb 	.word	0x0800f3fb
 800f374:	0800f3fb 	.word	0x0800f3fb
 800f378:	0800f3fb 	.word	0x0800f3fb
 800f37c:	0800f3fb 	.word	0x0800f3fb
 800f380:	0800f3fb 	.word	0x0800f3fb
 800f384:	0800f3fb 	.word	0x0800f3fb
 800f388:	0800f3fb 	.word	0x0800f3fb
 800f38c:	0800f3ed 	.word	0x0800f3ed
 800f390:	2b40      	cmp	r3, #64	; 0x40
 800f392:	d02e      	beq.n	800f3f2 <UART_SetConfig+0xab2>
 800f394:	e031      	b.n	800f3fa <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f396:	f7fb fa83 	bl	800a8a0 <HAL_RCC_GetPCLK1Freq>
 800f39a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f39c:	e033      	b.n	800f406 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f39e:	f7fb fa95 	bl	800a8cc <HAL_RCC_GetPCLK2Freq>
 800f3a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f3a4:	e02f      	b.n	800f406 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f3a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	f7fc fc5a 	bl	800bc64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3b4:	e027      	b.n	800f406 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f3b6:	f107 0318 	add.w	r3, r7, #24
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	f7fc fda6 	bl	800bf0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f3c0:	69fb      	ldr	r3, [r7, #28]
 800f3c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3c4:	e01f      	b.n	800f406 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f3c6:	4b69      	ldr	r3, [pc, #420]	; (800f56c <UART_SetConfig+0xc2c>)
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	f003 0320 	and.w	r3, r3, #32
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d009      	beq.n	800f3e6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f3d2:	4b66      	ldr	r3, [pc, #408]	; (800f56c <UART_SetConfig+0xc2c>)
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	08db      	lsrs	r3, r3, #3
 800f3d8:	f003 0303 	and.w	r3, r3, #3
 800f3dc:	4a64      	ldr	r2, [pc, #400]	; (800f570 <UART_SetConfig+0xc30>)
 800f3de:	fa22 f303 	lsr.w	r3, r2, r3
 800f3e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f3e4:	e00f      	b.n	800f406 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800f3e6:	4b62      	ldr	r3, [pc, #392]	; (800f570 <UART_SetConfig+0xc30>)
 800f3e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3ea:	e00c      	b.n	800f406 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f3ec:	4b61      	ldr	r3, [pc, #388]	; (800f574 <UART_SetConfig+0xc34>)
 800f3ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3f0:	e009      	b.n	800f406 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f3f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f3f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3f8:	e005      	b.n	800f406 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f3fe:	2301      	movs	r3, #1
 800f400:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f404:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f408:	2b00      	cmp	r3, #0
 800f40a:	f000 80ea 	beq.w	800f5e2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f40e:	697b      	ldr	r3, [r7, #20]
 800f410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f412:	4a55      	ldr	r2, [pc, #340]	; (800f568 <UART_SetConfig+0xc28>)
 800f414:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f418:	461a      	mov	r2, r3
 800f41a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f41c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f420:	005a      	lsls	r2, r3, #1
 800f422:	697b      	ldr	r3, [r7, #20]
 800f424:	685b      	ldr	r3, [r3, #4]
 800f426:	085b      	lsrs	r3, r3, #1
 800f428:	441a      	add	r2, r3
 800f42a:	697b      	ldr	r3, [r7, #20]
 800f42c:	685b      	ldr	r3, [r3, #4]
 800f42e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f432:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f436:	2b0f      	cmp	r3, #15
 800f438:	d916      	bls.n	800f468 <UART_SetConfig+0xb28>
 800f43a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f43c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f440:	d212      	bcs.n	800f468 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f444:	b29b      	uxth	r3, r3
 800f446:	f023 030f 	bic.w	r3, r3, #15
 800f44a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f44e:	085b      	lsrs	r3, r3, #1
 800f450:	b29b      	uxth	r3, r3
 800f452:	f003 0307 	and.w	r3, r3, #7
 800f456:	b29a      	uxth	r2, r3
 800f458:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f45a:	4313      	orrs	r3, r2
 800f45c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f45e:	697b      	ldr	r3, [r7, #20]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f464:	60da      	str	r2, [r3, #12]
 800f466:	e0bc      	b.n	800f5e2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f468:	2301      	movs	r3, #1
 800f46a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f46e:	e0b8      	b.n	800f5e2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f470:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f474:	2b20      	cmp	r3, #32
 800f476:	dc4b      	bgt.n	800f510 <UART_SetConfig+0xbd0>
 800f478:	2b00      	cmp	r3, #0
 800f47a:	f2c0 8087 	blt.w	800f58c <UART_SetConfig+0xc4c>
 800f47e:	2b20      	cmp	r3, #32
 800f480:	f200 8084 	bhi.w	800f58c <UART_SetConfig+0xc4c>
 800f484:	a201      	add	r2, pc, #4	; (adr r2, 800f48c <UART_SetConfig+0xb4c>)
 800f486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f48a:	bf00      	nop
 800f48c:	0800f517 	.word	0x0800f517
 800f490:	0800f51f 	.word	0x0800f51f
 800f494:	0800f58d 	.word	0x0800f58d
 800f498:	0800f58d 	.word	0x0800f58d
 800f49c:	0800f527 	.word	0x0800f527
 800f4a0:	0800f58d 	.word	0x0800f58d
 800f4a4:	0800f58d 	.word	0x0800f58d
 800f4a8:	0800f58d 	.word	0x0800f58d
 800f4ac:	0800f537 	.word	0x0800f537
 800f4b0:	0800f58d 	.word	0x0800f58d
 800f4b4:	0800f58d 	.word	0x0800f58d
 800f4b8:	0800f58d 	.word	0x0800f58d
 800f4bc:	0800f58d 	.word	0x0800f58d
 800f4c0:	0800f58d 	.word	0x0800f58d
 800f4c4:	0800f58d 	.word	0x0800f58d
 800f4c8:	0800f58d 	.word	0x0800f58d
 800f4cc:	0800f547 	.word	0x0800f547
 800f4d0:	0800f58d 	.word	0x0800f58d
 800f4d4:	0800f58d 	.word	0x0800f58d
 800f4d8:	0800f58d 	.word	0x0800f58d
 800f4dc:	0800f58d 	.word	0x0800f58d
 800f4e0:	0800f58d 	.word	0x0800f58d
 800f4e4:	0800f58d 	.word	0x0800f58d
 800f4e8:	0800f58d 	.word	0x0800f58d
 800f4ec:	0800f58d 	.word	0x0800f58d
 800f4f0:	0800f58d 	.word	0x0800f58d
 800f4f4:	0800f58d 	.word	0x0800f58d
 800f4f8:	0800f58d 	.word	0x0800f58d
 800f4fc:	0800f58d 	.word	0x0800f58d
 800f500:	0800f58d 	.word	0x0800f58d
 800f504:	0800f58d 	.word	0x0800f58d
 800f508:	0800f58d 	.word	0x0800f58d
 800f50c:	0800f57f 	.word	0x0800f57f
 800f510:	2b40      	cmp	r3, #64	; 0x40
 800f512:	d037      	beq.n	800f584 <UART_SetConfig+0xc44>
 800f514:	e03a      	b.n	800f58c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f516:	f7fb f9c3 	bl	800a8a0 <HAL_RCC_GetPCLK1Freq>
 800f51a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f51c:	e03c      	b.n	800f598 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f51e:	f7fb f9d5 	bl	800a8cc <HAL_RCC_GetPCLK2Freq>
 800f522:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f524:	e038      	b.n	800f598 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f52a:	4618      	mov	r0, r3
 800f52c:	f7fc fb9a 	bl	800bc64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f532:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f534:	e030      	b.n	800f598 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f536:	f107 0318 	add.w	r3, r7, #24
 800f53a:	4618      	mov	r0, r3
 800f53c:	f7fc fce6 	bl	800bf0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f540:	69fb      	ldr	r3, [r7, #28]
 800f542:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f544:	e028      	b.n	800f598 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f546:	4b09      	ldr	r3, [pc, #36]	; (800f56c <UART_SetConfig+0xc2c>)
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	f003 0320 	and.w	r3, r3, #32
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d012      	beq.n	800f578 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f552:	4b06      	ldr	r3, [pc, #24]	; (800f56c <UART_SetConfig+0xc2c>)
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	08db      	lsrs	r3, r3, #3
 800f558:	f003 0303 	and.w	r3, r3, #3
 800f55c:	4a04      	ldr	r2, [pc, #16]	; (800f570 <UART_SetConfig+0xc30>)
 800f55e:	fa22 f303 	lsr.w	r3, r2, r3
 800f562:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f564:	e018      	b.n	800f598 <UART_SetConfig+0xc58>
 800f566:	bf00      	nop
 800f568:	080107e4 	.word	0x080107e4
 800f56c:	58024400 	.word	0x58024400
 800f570:	03d09000 	.word	0x03d09000
 800f574:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800f578:	4b24      	ldr	r3, [pc, #144]	; (800f60c <UART_SetConfig+0xccc>)
 800f57a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f57c:	e00c      	b.n	800f598 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f57e:	4b24      	ldr	r3, [pc, #144]	; (800f610 <UART_SetConfig+0xcd0>)
 800f580:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f582:	e009      	b.n	800f598 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f584:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f588:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f58a:	e005      	b.n	800f598 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800f58c:	2300      	movs	r3, #0
 800f58e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f590:	2301      	movs	r3, #1
 800f592:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f596:	bf00      	nop
    }

    if (pclk != 0U)
 800f598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d021      	beq.n	800f5e2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f59e:	697b      	ldr	r3, [r7, #20]
 800f5a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5a2:	4a1c      	ldr	r2, [pc, #112]	; (800f614 <UART_SetConfig+0xcd4>)
 800f5a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f5a8:	461a      	mov	r2, r3
 800f5aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5ac:	fbb3 f2f2 	udiv	r2, r3, r2
 800f5b0:	697b      	ldr	r3, [r7, #20]
 800f5b2:	685b      	ldr	r3, [r3, #4]
 800f5b4:	085b      	lsrs	r3, r3, #1
 800f5b6:	441a      	add	r2, r3
 800f5b8:	697b      	ldr	r3, [r7, #20]
 800f5ba:	685b      	ldr	r3, [r3, #4]
 800f5bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800f5c0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5c4:	2b0f      	cmp	r3, #15
 800f5c6:	d909      	bls.n	800f5dc <UART_SetConfig+0xc9c>
 800f5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f5ce:	d205      	bcs.n	800f5dc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5d2:	b29a      	uxth	r2, r3
 800f5d4:	697b      	ldr	r3, [r7, #20]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	60da      	str	r2, [r3, #12]
 800f5da:	e002      	b.n	800f5e2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f5dc:	2301      	movs	r3, #1
 800f5de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f5e2:	697b      	ldr	r3, [r7, #20]
 800f5e4:	2201      	movs	r2, #1
 800f5e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f5ea:	697b      	ldr	r3, [r7, #20]
 800f5ec:	2201      	movs	r2, #1
 800f5ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f5f2:	697b      	ldr	r3, [r7, #20]
 800f5f4:	2200      	movs	r2, #0
 800f5f6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800f5f8:	697b      	ldr	r3, [r7, #20]
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800f5fe:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f602:	4618      	mov	r0, r3
 800f604:	3748      	adds	r7, #72	; 0x48
 800f606:	46bd      	mov	sp, r7
 800f608:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f60c:	03d09000 	.word	0x03d09000
 800f610:	003d0900 	.word	0x003d0900
 800f614:	080107e4 	.word	0x080107e4

0800f618 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f618:	b480      	push	{r7}
 800f61a:	b083      	sub	sp, #12
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f624:	f003 0301 	and.w	r3, r3, #1
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d00a      	beq.n	800f642 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	685b      	ldr	r3, [r3, #4]
 800f632:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	430a      	orrs	r2, r1
 800f640:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f646:	f003 0302 	and.w	r3, r3, #2
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d00a      	beq.n	800f664 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	685b      	ldr	r3, [r3, #4]
 800f654:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	430a      	orrs	r2, r1
 800f662:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f668:	f003 0304 	and.w	r3, r3, #4
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d00a      	beq.n	800f686 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	685b      	ldr	r3, [r3, #4]
 800f676:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	430a      	orrs	r2, r1
 800f684:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f68a:	f003 0308 	and.w	r3, r3, #8
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d00a      	beq.n	800f6a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	685b      	ldr	r3, [r3, #4]
 800f698:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	430a      	orrs	r2, r1
 800f6a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6ac:	f003 0310 	and.w	r3, r3, #16
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d00a      	beq.n	800f6ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	689b      	ldr	r3, [r3, #8]
 800f6ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	430a      	orrs	r2, r1
 800f6c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6ce:	f003 0320 	and.w	r3, r3, #32
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d00a      	beq.n	800f6ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	689b      	ldr	r3, [r3, #8]
 800f6dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	430a      	orrs	r2, r1
 800f6ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d01a      	beq.n	800f72e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	685b      	ldr	r3, [r3, #4]
 800f6fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	430a      	orrs	r2, r1
 800f70c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f712:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f716:	d10a      	bne.n	800f72e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	685b      	ldr	r3, [r3, #4]
 800f71e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	430a      	orrs	r2, r1
 800f72c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f736:	2b00      	cmp	r3, #0
 800f738:	d00a      	beq.n	800f750 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	685b      	ldr	r3, [r3, #4]
 800f740:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	430a      	orrs	r2, r1
 800f74e:	605a      	str	r2, [r3, #4]
  }
}
 800f750:	bf00      	nop
 800f752:	370c      	adds	r7, #12
 800f754:	46bd      	mov	sp, r7
 800f756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75a:	4770      	bx	lr

0800f75c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b098      	sub	sp, #96	; 0x60
 800f760:	af02      	add	r7, sp, #8
 800f762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	2200      	movs	r2, #0
 800f768:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f76c:	f7f6 fd24 	bl	80061b8 <HAL_GetTick>
 800f770:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	f003 0308 	and.w	r3, r3, #8
 800f77c:	2b08      	cmp	r3, #8
 800f77e:	d12f      	bne.n	800f7e0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f780:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f784:	9300      	str	r3, [sp, #0]
 800f786:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f788:	2200      	movs	r2, #0
 800f78a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f78e:	6878      	ldr	r0, [r7, #4]
 800f790:	f000 f88e 	bl	800f8b0 <UART_WaitOnFlagUntilTimeout>
 800f794:	4603      	mov	r3, r0
 800f796:	2b00      	cmp	r3, #0
 800f798:	d022      	beq.n	800f7e0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7a2:	e853 3f00 	ldrex	r3, [r3]
 800f7a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f7a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f7ae:	653b      	str	r3, [r7, #80]	; 0x50
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	461a      	mov	r2, r3
 800f7b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7b8:	647b      	str	r3, [r7, #68]	; 0x44
 800f7ba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f7be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f7c0:	e841 2300 	strex	r3, r2, [r1]
 800f7c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f7c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d1e6      	bne.n	800f79a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2220      	movs	r2, #32
 800f7d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f7dc:	2303      	movs	r3, #3
 800f7de:	e063      	b.n	800f8a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	f003 0304 	and.w	r3, r3, #4
 800f7ea:	2b04      	cmp	r3, #4
 800f7ec:	d149      	bne.n	800f882 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f7ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f7f2:	9300      	str	r3, [sp, #0]
 800f7f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f7fc:	6878      	ldr	r0, [r7, #4]
 800f7fe:	f000 f857 	bl	800f8b0 <UART_WaitOnFlagUntilTimeout>
 800f802:	4603      	mov	r3, r0
 800f804:	2b00      	cmp	r3, #0
 800f806:	d03c      	beq.n	800f882 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f810:	e853 3f00 	ldrex	r3, [r3]
 800f814:	623b      	str	r3, [r7, #32]
   return(result);
 800f816:	6a3b      	ldr	r3, [r7, #32]
 800f818:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f81c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	461a      	mov	r2, r3
 800f824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f826:	633b      	str	r3, [r7, #48]	; 0x30
 800f828:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f82a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f82c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f82e:	e841 2300 	strex	r3, r2, [r1]
 800f832:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f836:	2b00      	cmp	r3, #0
 800f838:	d1e6      	bne.n	800f808 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	3308      	adds	r3, #8
 800f840:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f842:	693b      	ldr	r3, [r7, #16]
 800f844:	e853 3f00 	ldrex	r3, [r3]
 800f848:	60fb      	str	r3, [r7, #12]
   return(result);
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	f023 0301 	bic.w	r3, r3, #1
 800f850:	64bb      	str	r3, [r7, #72]	; 0x48
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	3308      	adds	r3, #8
 800f858:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f85a:	61fa      	str	r2, [r7, #28]
 800f85c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f85e:	69b9      	ldr	r1, [r7, #24]
 800f860:	69fa      	ldr	r2, [r7, #28]
 800f862:	e841 2300 	strex	r3, r2, [r1]
 800f866:	617b      	str	r3, [r7, #20]
   return(result);
 800f868:	697b      	ldr	r3, [r7, #20]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d1e5      	bne.n	800f83a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	2220      	movs	r2, #32
 800f872:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	2200      	movs	r2, #0
 800f87a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f87e:	2303      	movs	r3, #3
 800f880:	e012      	b.n	800f8a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	2220      	movs	r2, #32
 800f886:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	2220      	movs	r2, #32
 800f88e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	2200      	movs	r2, #0
 800f896:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	2200      	movs	r2, #0
 800f89c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	2200      	movs	r2, #0
 800f8a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f8a6:	2300      	movs	r3, #0
}
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	3758      	adds	r7, #88	; 0x58
 800f8ac:	46bd      	mov	sp, r7
 800f8ae:	bd80      	pop	{r7, pc}

0800f8b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b084      	sub	sp, #16
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	60f8      	str	r0, [r7, #12]
 800f8b8:	60b9      	str	r1, [r7, #8]
 800f8ba:	603b      	str	r3, [r7, #0]
 800f8bc:	4613      	mov	r3, r2
 800f8be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f8c0:	e049      	b.n	800f956 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f8c2:	69bb      	ldr	r3, [r7, #24]
 800f8c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8c8:	d045      	beq.n	800f956 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f8ca:	f7f6 fc75 	bl	80061b8 <HAL_GetTick>
 800f8ce:	4602      	mov	r2, r0
 800f8d0:	683b      	ldr	r3, [r7, #0]
 800f8d2:	1ad3      	subs	r3, r2, r3
 800f8d4:	69ba      	ldr	r2, [r7, #24]
 800f8d6:	429a      	cmp	r2, r3
 800f8d8:	d302      	bcc.n	800f8e0 <UART_WaitOnFlagUntilTimeout+0x30>
 800f8da:	69bb      	ldr	r3, [r7, #24]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d101      	bne.n	800f8e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f8e0:	2303      	movs	r3, #3
 800f8e2:	e048      	b.n	800f976 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	f003 0304 	and.w	r3, r3, #4
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d031      	beq.n	800f956 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	69db      	ldr	r3, [r3, #28]
 800f8f8:	f003 0308 	and.w	r3, r3, #8
 800f8fc:	2b08      	cmp	r3, #8
 800f8fe:	d110      	bne.n	800f922 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	2208      	movs	r2, #8
 800f906:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800f908:	68f8      	ldr	r0, [r7, #12]
 800f90a:	f000 f921 	bl	800fb50 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	2208      	movs	r2, #8
 800f912:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	2200      	movs	r2, #0
 800f91a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800f91e:	2301      	movs	r3, #1
 800f920:	e029      	b.n	800f976 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	69db      	ldr	r3, [r3, #28]
 800f928:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f92c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f930:	d111      	bne.n	800f956 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f93a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f93c:	68f8      	ldr	r0, [r7, #12]
 800f93e:	f000 f907 	bl	800fb50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	2220      	movs	r2, #32
 800f946:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	2200      	movs	r2, #0
 800f94e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f952:	2303      	movs	r3, #3
 800f954:	e00f      	b.n	800f976 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	69da      	ldr	r2, [r3, #28]
 800f95c:	68bb      	ldr	r3, [r7, #8]
 800f95e:	4013      	ands	r3, r2
 800f960:	68ba      	ldr	r2, [r7, #8]
 800f962:	429a      	cmp	r2, r3
 800f964:	bf0c      	ite	eq
 800f966:	2301      	moveq	r3, #1
 800f968:	2300      	movne	r3, #0
 800f96a:	b2db      	uxtb	r3, r3
 800f96c:	461a      	mov	r2, r3
 800f96e:	79fb      	ldrb	r3, [r7, #7]
 800f970:	429a      	cmp	r2, r3
 800f972:	d0a6      	beq.n	800f8c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f974:	2300      	movs	r3, #0
}
 800f976:	4618      	mov	r0, r3
 800f978:	3710      	adds	r7, #16
 800f97a:	46bd      	mov	sp, r7
 800f97c:	bd80      	pop	{r7, pc}
	...

0800f980 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f980:	b580      	push	{r7, lr}
 800f982:	b096      	sub	sp, #88	; 0x58
 800f984:	af00      	add	r7, sp, #0
 800f986:	60f8      	str	r0, [r7, #12]
 800f988:	60b9      	str	r1, [r7, #8]
 800f98a:	4613      	mov	r3, r2
 800f98c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	68ba      	ldr	r2, [r7, #8]
 800f992:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	88fa      	ldrh	r2, [r7, #6]
 800f998:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	2200      	movs	r2, #0
 800f9a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	2222      	movs	r2, #34	; 0x22
 800f9a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d02d      	beq.n	800fa12 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f9bc:	4a40      	ldr	r2, [pc, #256]	; (800fac0 <UART_Start_Receive_DMA+0x140>)
 800f9be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f9c6:	4a3f      	ldr	r2, [pc, #252]	; (800fac4 <UART_Start_Receive_DMA+0x144>)
 800f9c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f9d0:	4a3d      	ldr	r2, [pc, #244]	; (800fac8 <UART_Start_Receive_DMA+0x148>)
 800f9d2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f9da:	2200      	movs	r2, #0
 800f9dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	3324      	adds	r3, #36	; 0x24
 800f9ea:	4619      	mov	r1, r3
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9f0:	461a      	mov	r2, r3
 800f9f2:	88fb      	ldrh	r3, [r7, #6]
 800f9f4:	f7f7 fa3c 	bl	8006e70 <HAL_DMA_Start_IT>
 800f9f8:	4603      	mov	r3, r0
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d009      	beq.n	800fa12 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	2210      	movs	r2, #16
 800fa02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	2220      	movs	r2, #32
 800fa0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800fa0e:	2301      	movs	r3, #1
 800fa10:	e051      	b.n	800fab6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	691b      	ldr	r3, [r3, #16]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d018      	beq.n	800fa4c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa22:	e853 3f00 	ldrex	r3, [r3]
 800fa26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fa28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fa2e:	657b      	str	r3, [r7, #84]	; 0x54
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	461a      	mov	r2, r3
 800fa36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa38:	64bb      	str	r3, [r7, #72]	; 0x48
 800fa3a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa3c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fa3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fa40:	e841 2300 	strex	r3, r2, [r1]
 800fa44:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800fa46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d1e6      	bne.n	800fa1a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	3308      	adds	r3, #8
 800fa52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa56:	e853 3f00 	ldrex	r3, [r3]
 800fa5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fa5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa5e:	f043 0301 	orr.w	r3, r3, #1
 800fa62:	653b      	str	r3, [r7, #80]	; 0x50
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	3308      	adds	r3, #8
 800fa6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fa6c:	637a      	str	r2, [r7, #52]	; 0x34
 800fa6e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fa72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fa74:	e841 2300 	strex	r3, r2, [r1]
 800fa78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800fa7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d1e5      	bne.n	800fa4c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	3308      	adds	r3, #8
 800fa86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa88:	697b      	ldr	r3, [r7, #20]
 800fa8a:	e853 3f00 	ldrex	r3, [r3]
 800fa8e:	613b      	str	r3, [r7, #16]
   return(result);
 800fa90:	693b      	ldr	r3, [r7, #16]
 800fa92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa96:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	3308      	adds	r3, #8
 800fa9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800faa0:	623a      	str	r2, [r7, #32]
 800faa2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faa4:	69f9      	ldr	r1, [r7, #28]
 800faa6:	6a3a      	ldr	r2, [r7, #32]
 800faa8:	e841 2300 	strex	r3, r2, [r1]
 800faac:	61bb      	str	r3, [r7, #24]
   return(result);
 800faae:	69bb      	ldr	r3, [r7, #24]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d1e5      	bne.n	800fa80 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800fab4:	2300      	movs	r3, #0
}
 800fab6:	4618      	mov	r0, r3
 800fab8:	3758      	adds	r7, #88	; 0x58
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}
 800fabe:	bf00      	nop
 800fac0:	0800fccf 	.word	0x0800fccf
 800fac4:	0800fdf7 	.word	0x0800fdf7
 800fac8:	0800fe35 	.word	0x0800fe35

0800facc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800facc:	b480      	push	{r7}
 800face:	b08f      	sub	sp, #60	; 0x3c
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fada:	6a3b      	ldr	r3, [r7, #32]
 800fadc:	e853 3f00 	ldrex	r3, [r3]
 800fae0:	61fb      	str	r3, [r7, #28]
   return(result);
 800fae2:	69fb      	ldr	r3, [r7, #28]
 800fae4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800fae8:	637b      	str	r3, [r7, #52]	; 0x34
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	461a      	mov	r2, r3
 800faf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800faf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800faf4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800faf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fafa:	e841 2300 	strex	r3, r2, [r1]
 800fafe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d1e6      	bne.n	800fad4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	3308      	adds	r3, #8
 800fb0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	e853 3f00 	ldrex	r3, [r3]
 800fb14:	60bb      	str	r3, [r7, #8]
   return(result);
 800fb16:	68bb      	ldr	r3, [r7, #8]
 800fb18:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800fb1c:	633b      	str	r3, [r7, #48]	; 0x30
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	3308      	adds	r3, #8
 800fb24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb26:	61ba      	str	r2, [r7, #24]
 800fb28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb2a:	6979      	ldr	r1, [r7, #20]
 800fb2c:	69ba      	ldr	r2, [r7, #24]
 800fb2e:	e841 2300 	strex	r3, r2, [r1]
 800fb32:	613b      	str	r3, [r7, #16]
   return(result);
 800fb34:	693b      	ldr	r3, [r7, #16]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d1e5      	bne.n	800fb06 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	2220      	movs	r2, #32
 800fb3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800fb42:	bf00      	nop
 800fb44:	373c      	adds	r7, #60	; 0x3c
 800fb46:	46bd      	mov	sp, r7
 800fb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4c:	4770      	bx	lr
	...

0800fb50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fb50:	b480      	push	{r7}
 800fb52:	b095      	sub	sp, #84	; 0x54
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb60:	e853 3f00 	ldrex	r3, [r3]
 800fb64:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fb66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fb6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	461a      	mov	r2, r3
 800fb74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb76:	643b      	str	r3, [r7, #64]	; 0x40
 800fb78:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fb7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fb7e:	e841 2300 	strex	r3, r2, [r1]
 800fb82:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fb84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d1e6      	bne.n	800fb58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	3308      	adds	r3, #8
 800fb90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb92:	6a3b      	ldr	r3, [r7, #32]
 800fb94:	e853 3f00 	ldrex	r3, [r3]
 800fb98:	61fb      	str	r3, [r7, #28]
   return(result);
 800fb9a:	69fa      	ldr	r2, [r7, #28]
 800fb9c:	4b1e      	ldr	r3, [pc, #120]	; (800fc18 <UART_EndRxTransfer+0xc8>)
 800fb9e:	4013      	ands	r3, r2
 800fba0:	64bb      	str	r3, [r7, #72]	; 0x48
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	3308      	adds	r3, #8
 800fba8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fbaa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fbac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fbb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fbb2:	e841 2300 	strex	r3, r2, [r1]
 800fbb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d1e5      	bne.n	800fb8a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fbc2:	2b01      	cmp	r3, #1
 800fbc4:	d118      	bne.n	800fbf8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	e853 3f00 	ldrex	r3, [r3]
 800fbd2:	60bb      	str	r3, [r7, #8]
   return(result);
 800fbd4:	68bb      	ldr	r3, [r7, #8]
 800fbd6:	f023 0310 	bic.w	r3, r3, #16
 800fbda:	647b      	str	r3, [r7, #68]	; 0x44
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	461a      	mov	r2, r3
 800fbe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbe4:	61bb      	str	r3, [r7, #24]
 800fbe6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbe8:	6979      	ldr	r1, [r7, #20]
 800fbea:	69ba      	ldr	r2, [r7, #24]
 800fbec:	e841 2300 	strex	r3, r2, [r1]
 800fbf0:	613b      	str	r3, [r7, #16]
   return(result);
 800fbf2:	693b      	ldr	r3, [r7, #16]
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d1e6      	bne.n	800fbc6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	2220      	movs	r2, #32
 800fbfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	2200      	movs	r2, #0
 800fc04:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	2200      	movs	r2, #0
 800fc0a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800fc0c:	bf00      	nop
 800fc0e:	3754      	adds	r7, #84	; 0x54
 800fc10:	46bd      	mov	sp, r7
 800fc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc16:	4770      	bx	lr
 800fc18:	effffffe 	.word	0xeffffffe

0800fc1c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b090      	sub	sp, #64	; 0x40
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc28:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	69db      	ldr	r3, [r3, #28]
 800fc2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fc32:	d037      	beq.n	800fca4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800fc34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc36:	2200      	movs	r2, #0
 800fc38:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fc3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	3308      	adds	r3, #8
 800fc42:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc46:	e853 3f00 	ldrex	r3, [r3]
 800fc4a:	623b      	str	r3, [r7, #32]
   return(result);
 800fc4c:	6a3b      	ldr	r3, [r7, #32]
 800fc4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fc52:	63bb      	str	r3, [r7, #56]	; 0x38
 800fc54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	3308      	adds	r3, #8
 800fc5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fc5c:	633a      	str	r2, [r7, #48]	; 0x30
 800fc5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fc62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc64:	e841 2300 	strex	r3, r2, [r1]
 800fc68:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fc6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d1e5      	bne.n	800fc3c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fc70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc76:	693b      	ldr	r3, [r7, #16]
 800fc78:	e853 3f00 	ldrex	r3, [r3]
 800fc7c:	60fb      	str	r3, [r7, #12]
   return(result);
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc84:	637b      	str	r3, [r7, #52]	; 0x34
 800fc86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	461a      	mov	r2, r3
 800fc8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc8e:	61fb      	str	r3, [r7, #28]
 800fc90:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc92:	69b9      	ldr	r1, [r7, #24]
 800fc94:	69fa      	ldr	r2, [r7, #28]
 800fc96:	e841 2300 	strex	r3, r2, [r1]
 800fc9a:	617b      	str	r3, [r7, #20]
   return(result);
 800fc9c:	697b      	ldr	r3, [r7, #20]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d1e6      	bne.n	800fc70 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fca2:	e002      	b.n	800fcaa <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800fca4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fca6:	f7f4 fa2f 	bl	8004108 <HAL_UART_TxCpltCallback>
}
 800fcaa:	bf00      	nop
 800fcac:	3740      	adds	r7, #64	; 0x40
 800fcae:	46bd      	mov	sp, r7
 800fcb0:	bd80      	pop	{r7, pc}

0800fcb2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fcb2:	b580      	push	{r7, lr}
 800fcb4:	b084      	sub	sp, #16
 800fcb6:	af00      	add	r7, sp, #0
 800fcb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcbe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800fcc0:	68f8      	ldr	r0, [r7, #12]
 800fcc2:	f7fe fe13 	bl	800e8ec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fcc6:	bf00      	nop
 800fcc8:	3710      	adds	r7, #16
 800fcca:	46bd      	mov	sp, r7
 800fccc:	bd80      	pop	{r7, pc}

0800fcce <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fcce:	b580      	push	{r7, lr}
 800fcd0:	b09c      	sub	sp, #112	; 0x70
 800fcd2:	af00      	add	r7, sp, #0
 800fcd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcda:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	69db      	ldr	r3, [r3, #28]
 800fce0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fce4:	d071      	beq.n	800fdca <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800fce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fce8:	2200      	movs	r2, #0
 800fcea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fcee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcf6:	e853 3f00 	ldrex	r3, [r3]
 800fcfa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fcfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fd02:	66bb      	str	r3, [r7, #104]	; 0x68
 800fd04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	461a      	mov	r2, r3
 800fd0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd0c:	65bb      	str	r3, [r7, #88]	; 0x58
 800fd0e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fd12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fd14:	e841 2300 	strex	r3, r2, [r1]
 800fd18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fd1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d1e6      	bne.n	800fcee <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fd20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	3308      	adds	r3, #8
 800fd26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd2a:	e853 3f00 	ldrex	r3, [r3]
 800fd2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fd30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd32:	f023 0301 	bic.w	r3, r3, #1
 800fd36:	667b      	str	r3, [r7, #100]	; 0x64
 800fd38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	3308      	adds	r3, #8
 800fd3e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fd40:	647a      	str	r2, [r7, #68]	; 0x44
 800fd42:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fd46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fd48:	e841 2300 	strex	r3, r2, [r1]
 800fd4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fd4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d1e5      	bne.n	800fd20 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fd54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	3308      	adds	r3, #8
 800fd5a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd5e:	e853 3f00 	ldrex	r3, [r3]
 800fd62:	623b      	str	r3, [r7, #32]
   return(result);
 800fd64:	6a3b      	ldr	r3, [r7, #32]
 800fd66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fd6a:	663b      	str	r3, [r7, #96]	; 0x60
 800fd6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	3308      	adds	r3, #8
 800fd72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fd74:	633a      	str	r2, [r7, #48]	; 0x30
 800fd76:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fd7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd7c:	e841 2300 	strex	r3, r2, [r1]
 800fd80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fd82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d1e5      	bne.n	800fd54 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fd88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd8a:	2220      	movs	r2, #32
 800fd8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fd90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd94:	2b01      	cmp	r3, #1
 800fd96:	d118      	bne.n	800fdca <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fd98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd9e:	693b      	ldr	r3, [r7, #16]
 800fda0:	e853 3f00 	ldrex	r3, [r3]
 800fda4:	60fb      	str	r3, [r7, #12]
   return(result);
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	f023 0310 	bic.w	r3, r3, #16
 800fdac:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fdae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	461a      	mov	r2, r3
 800fdb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fdb6:	61fb      	str	r3, [r7, #28]
 800fdb8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdba:	69b9      	ldr	r1, [r7, #24]
 800fdbc:	69fa      	ldr	r2, [r7, #28]
 800fdbe:	e841 2300 	strex	r3, r2, [r1]
 800fdc2:	617b      	str	r3, [r7, #20]
   return(result);
 800fdc4:	697b      	ldr	r3, [r7, #20]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d1e6      	bne.n	800fd98 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fdca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fdcc:	2200      	movs	r2, #0
 800fdce:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fdd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fdd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fdd4:	2b01      	cmp	r3, #1
 800fdd6:	d107      	bne.n	800fde8 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fdd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fdda:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fdde:	4619      	mov	r1, r3
 800fde0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fde2:	f7fe fda1 	bl	800e928 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fde6:	e002      	b.n	800fdee <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800fde8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fdea:	f7fe fd89 	bl	800e900 <HAL_UART_RxCpltCallback>
}
 800fdee:	bf00      	nop
 800fdf0:	3770      	adds	r7, #112	; 0x70
 800fdf2:	46bd      	mov	sp, r7
 800fdf4:	bd80      	pop	{r7, pc}

0800fdf6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fdf6:	b580      	push	{r7, lr}
 800fdf8:	b084      	sub	sp, #16
 800fdfa:	af00      	add	r7, sp, #0
 800fdfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe02:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	2201      	movs	r2, #1
 800fe08:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe0e:	2b01      	cmp	r3, #1
 800fe10:	d109      	bne.n	800fe26 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fe18:	085b      	lsrs	r3, r3, #1
 800fe1a:	b29b      	uxth	r3, r3
 800fe1c:	4619      	mov	r1, r3
 800fe1e:	68f8      	ldr	r0, [r7, #12]
 800fe20:	f7fe fd82 	bl	800e928 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fe24:	e002      	b.n	800fe2c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800fe26:	68f8      	ldr	r0, [r7, #12]
 800fe28:	f7fe fd74 	bl	800e914 <HAL_UART_RxHalfCpltCallback>
}
 800fe2c:	bf00      	nop
 800fe2e:	3710      	adds	r7, #16
 800fe30:	46bd      	mov	sp, r7
 800fe32:	bd80      	pop	{r7, pc}

0800fe34 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b086      	sub	sp, #24
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe40:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800fe42:	697b      	ldr	r3, [r7, #20]
 800fe44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fe48:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800fe4a:	697b      	ldr	r3, [r7, #20]
 800fe4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe50:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800fe52:	697b      	ldr	r3, [r7, #20]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	689b      	ldr	r3, [r3, #8]
 800fe58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe5c:	2b80      	cmp	r3, #128	; 0x80
 800fe5e:	d109      	bne.n	800fe74 <UART_DMAError+0x40>
 800fe60:	693b      	ldr	r3, [r7, #16]
 800fe62:	2b21      	cmp	r3, #33	; 0x21
 800fe64:	d106      	bne.n	800fe74 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800fe66:	697b      	ldr	r3, [r7, #20]
 800fe68:	2200      	movs	r2, #0
 800fe6a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800fe6e:	6978      	ldr	r0, [r7, #20]
 800fe70:	f7ff fe2c 	bl	800facc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800fe74:	697b      	ldr	r3, [r7, #20]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	689b      	ldr	r3, [r3, #8]
 800fe7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe7e:	2b40      	cmp	r3, #64	; 0x40
 800fe80:	d109      	bne.n	800fe96 <UART_DMAError+0x62>
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	2b22      	cmp	r3, #34	; 0x22
 800fe86:	d106      	bne.n	800fe96 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800fe88:	697b      	ldr	r3, [r7, #20]
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800fe90:	6978      	ldr	r0, [r7, #20]
 800fe92:	f7ff fe5d 	bl	800fb50 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fe96:	697b      	ldr	r3, [r7, #20]
 800fe98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fe9c:	f043 0210 	orr.w	r2, r3, #16
 800fea0:	697b      	ldr	r3, [r7, #20]
 800fea2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fea6:	6978      	ldr	r0, [r7, #20]
 800fea8:	f7f4 f912 	bl	80040d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800feac:	bf00      	nop
 800feae:	3718      	adds	r7, #24
 800feb0:	46bd      	mov	sp, r7
 800feb2:	bd80      	pop	{r7, pc}

0800feb4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b084      	sub	sp, #16
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fec0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	2200      	movs	r2, #0
 800fec6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	2200      	movs	r2, #0
 800fece:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fed2:	68f8      	ldr	r0, [r7, #12]
 800fed4:	f7f4 f8fc 	bl	80040d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fed8:	bf00      	nop
 800feda:	3710      	adds	r7, #16
 800fedc:	46bd      	mov	sp, r7
 800fede:	bd80      	pop	{r7, pc}

0800fee0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b088      	sub	sp, #32
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	e853 3f00 	ldrex	r3, [r3]
 800fef4:	60bb      	str	r3, [r7, #8]
   return(result);
 800fef6:	68bb      	ldr	r3, [r7, #8]
 800fef8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fefc:	61fb      	str	r3, [r7, #28]
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	461a      	mov	r2, r3
 800ff04:	69fb      	ldr	r3, [r7, #28]
 800ff06:	61bb      	str	r3, [r7, #24]
 800ff08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff0a:	6979      	ldr	r1, [r7, #20]
 800ff0c:	69ba      	ldr	r2, [r7, #24]
 800ff0e:	e841 2300 	strex	r3, r2, [r1]
 800ff12:	613b      	str	r3, [r7, #16]
   return(result);
 800ff14:	693b      	ldr	r3, [r7, #16]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d1e6      	bne.n	800fee8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	2220      	movs	r2, #32
 800ff1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	2200      	movs	r2, #0
 800ff26:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ff28:	6878      	ldr	r0, [r7, #4]
 800ff2a:	f7f4 f8ed 	bl	8004108 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ff2e:	bf00      	nop
 800ff30:	3720      	adds	r7, #32
 800ff32:	46bd      	mov	sp, r7
 800ff34:	bd80      	pop	{r7, pc}

0800ff36 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ff36:	b480      	push	{r7}
 800ff38:	b083      	sub	sp, #12
 800ff3a:	af00      	add	r7, sp, #0
 800ff3c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ff3e:	bf00      	nop
 800ff40:	370c      	adds	r7, #12
 800ff42:	46bd      	mov	sp, r7
 800ff44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff48:	4770      	bx	lr

0800ff4a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ff4a:	b480      	push	{r7}
 800ff4c:	b083      	sub	sp, #12
 800ff4e:	af00      	add	r7, sp, #0
 800ff50:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ff52:	bf00      	nop
 800ff54:	370c      	adds	r7, #12
 800ff56:	46bd      	mov	sp, r7
 800ff58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5c:	4770      	bx	lr

0800ff5e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ff5e:	b480      	push	{r7}
 800ff60:	b083      	sub	sp, #12
 800ff62:	af00      	add	r7, sp, #0
 800ff64:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ff66:	bf00      	nop
 800ff68:	370c      	adds	r7, #12
 800ff6a:	46bd      	mov	sp, r7
 800ff6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff70:	4770      	bx	lr

0800ff72 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ff72:	b480      	push	{r7}
 800ff74:	b085      	sub	sp, #20
 800ff76:	af00      	add	r7, sp, #0
 800ff78:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ff80:	2b01      	cmp	r3, #1
 800ff82:	d101      	bne.n	800ff88 <HAL_UARTEx_DisableFifoMode+0x16>
 800ff84:	2302      	movs	r3, #2
 800ff86:	e027      	b.n	800ffd8 <HAL_UARTEx_DisableFifoMode+0x66>
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	2201      	movs	r2, #1
 800ff8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	2224      	movs	r2, #36	; 0x24
 800ff94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	681a      	ldr	r2, [r3, #0]
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	f022 0201 	bic.w	r2, r2, #1
 800ffae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ffb6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	2200      	movs	r2, #0
 800ffbc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	68fa      	ldr	r2, [r7, #12]
 800ffc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	2220      	movs	r2, #32
 800ffca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ffd6:	2300      	movs	r3, #0
}
 800ffd8:	4618      	mov	r0, r3
 800ffda:	3714      	adds	r7, #20
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe2:	4770      	bx	lr

0800ffe4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b084      	sub	sp, #16
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
 800ffec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fff4:	2b01      	cmp	r3, #1
 800fff6:	d101      	bne.n	800fffc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fff8:	2302      	movs	r3, #2
 800fffa:	e02d      	b.n	8010058 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	2201      	movs	r2, #1
 8010000:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	2224      	movs	r2, #36	; 0x24
 8010008:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	681a      	ldr	r2, [r3, #0]
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	f022 0201 	bic.w	r2, r2, #1
 8010022:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	689b      	ldr	r3, [r3, #8]
 801002a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	683a      	ldr	r2, [r7, #0]
 8010034:	430a      	orrs	r2, r1
 8010036:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010038:	6878      	ldr	r0, [r7, #4]
 801003a:	f000 f84f 	bl	80100dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	68fa      	ldr	r2, [r7, #12]
 8010044:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	2220      	movs	r2, #32
 801004a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	2200      	movs	r2, #0
 8010052:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010056:	2300      	movs	r3, #0
}
 8010058:	4618      	mov	r0, r3
 801005a:	3710      	adds	r7, #16
 801005c:	46bd      	mov	sp, r7
 801005e:	bd80      	pop	{r7, pc}

08010060 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010060:	b580      	push	{r7, lr}
 8010062:	b084      	sub	sp, #16
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
 8010068:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010070:	2b01      	cmp	r3, #1
 8010072:	d101      	bne.n	8010078 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010074:	2302      	movs	r3, #2
 8010076:	e02d      	b.n	80100d4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	2201      	movs	r2, #1
 801007c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	2224      	movs	r2, #36	; 0x24
 8010084:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	681a      	ldr	r2, [r3, #0]
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	f022 0201 	bic.w	r2, r2, #1
 801009e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	689b      	ldr	r3, [r3, #8]
 80100a6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	683a      	ldr	r2, [r7, #0]
 80100b0:	430a      	orrs	r2, r1
 80100b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80100b4:	6878      	ldr	r0, [r7, #4]
 80100b6:	f000 f811 	bl	80100dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	68fa      	ldr	r2, [r7, #12]
 80100c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	2220      	movs	r2, #32
 80100c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	2200      	movs	r2, #0
 80100ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80100d2:	2300      	movs	r3, #0
}
 80100d4:	4618      	mov	r0, r3
 80100d6:	3710      	adds	r7, #16
 80100d8:	46bd      	mov	sp, r7
 80100da:	bd80      	pop	{r7, pc}

080100dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80100dc:	b480      	push	{r7}
 80100de:	b085      	sub	sp, #20
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d108      	bne.n	80100fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	2201      	movs	r2, #1
 80100f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	2201      	movs	r2, #1
 80100f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80100fc:	e031      	b.n	8010162 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80100fe:	2310      	movs	r3, #16
 8010100:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010102:	2310      	movs	r3, #16
 8010104:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	689b      	ldr	r3, [r3, #8]
 801010c:	0e5b      	lsrs	r3, r3, #25
 801010e:	b2db      	uxtb	r3, r3
 8010110:	f003 0307 	and.w	r3, r3, #7
 8010114:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	689b      	ldr	r3, [r3, #8]
 801011c:	0f5b      	lsrs	r3, r3, #29
 801011e:	b2db      	uxtb	r3, r3
 8010120:	f003 0307 	and.w	r3, r3, #7
 8010124:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010126:	7bbb      	ldrb	r3, [r7, #14]
 8010128:	7b3a      	ldrb	r2, [r7, #12]
 801012a:	4911      	ldr	r1, [pc, #68]	; (8010170 <UARTEx_SetNbDataToProcess+0x94>)
 801012c:	5c8a      	ldrb	r2, [r1, r2]
 801012e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010132:	7b3a      	ldrb	r2, [r7, #12]
 8010134:	490f      	ldr	r1, [pc, #60]	; (8010174 <UARTEx_SetNbDataToProcess+0x98>)
 8010136:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010138:	fb93 f3f2 	sdiv	r3, r3, r2
 801013c:	b29a      	uxth	r2, r3
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010144:	7bfb      	ldrb	r3, [r7, #15]
 8010146:	7b7a      	ldrb	r2, [r7, #13]
 8010148:	4909      	ldr	r1, [pc, #36]	; (8010170 <UARTEx_SetNbDataToProcess+0x94>)
 801014a:	5c8a      	ldrb	r2, [r1, r2]
 801014c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010150:	7b7a      	ldrb	r2, [r7, #13]
 8010152:	4908      	ldr	r1, [pc, #32]	; (8010174 <UARTEx_SetNbDataToProcess+0x98>)
 8010154:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010156:	fb93 f3f2 	sdiv	r3, r3, r2
 801015a:	b29a      	uxth	r2, r3
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010162:	bf00      	nop
 8010164:	3714      	adds	r7, #20
 8010166:	46bd      	mov	sp, r7
 8010168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016c:	4770      	bx	lr
 801016e:	bf00      	nop
 8010170:	080107fc 	.word	0x080107fc
 8010174:	08010804 	.word	0x08010804

08010178 <realloc>:
 8010178:	4b02      	ldr	r3, [pc, #8]	; (8010184 <realloc+0xc>)
 801017a:	460a      	mov	r2, r1
 801017c:	4601      	mov	r1, r0
 801017e:	6818      	ldr	r0, [r3, #0]
 8010180:	f000 b802 	b.w	8010188 <_realloc_r>
 8010184:	240000b0 	.word	0x240000b0

08010188 <_realloc_r>:
 8010188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801018c:	4680      	mov	r8, r0
 801018e:	4614      	mov	r4, r2
 8010190:	460e      	mov	r6, r1
 8010192:	b921      	cbnz	r1, 801019e <_realloc_r+0x16>
 8010194:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010198:	4611      	mov	r1, r2
 801019a:	f000 b8d3 	b.w	8010344 <_malloc_r>
 801019e:	b92a      	cbnz	r2, 80101ac <_realloc_r+0x24>
 80101a0:	f000 f864 	bl	801026c <_free_r>
 80101a4:	4625      	mov	r5, r4
 80101a6:	4628      	mov	r0, r5
 80101a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101ac:	f000 f956 	bl	801045c <_malloc_usable_size_r>
 80101b0:	4284      	cmp	r4, r0
 80101b2:	4607      	mov	r7, r0
 80101b4:	d802      	bhi.n	80101bc <_realloc_r+0x34>
 80101b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80101ba:	d812      	bhi.n	80101e2 <_realloc_r+0x5a>
 80101bc:	4621      	mov	r1, r4
 80101be:	4640      	mov	r0, r8
 80101c0:	f000 f8c0 	bl	8010344 <_malloc_r>
 80101c4:	4605      	mov	r5, r0
 80101c6:	2800      	cmp	r0, #0
 80101c8:	d0ed      	beq.n	80101a6 <_realloc_r+0x1e>
 80101ca:	42bc      	cmp	r4, r7
 80101cc:	4622      	mov	r2, r4
 80101ce:	4631      	mov	r1, r6
 80101d0:	bf28      	it	cs
 80101d2:	463a      	movcs	r2, r7
 80101d4:	f000 f83c 	bl	8010250 <memcpy>
 80101d8:	4631      	mov	r1, r6
 80101da:	4640      	mov	r0, r8
 80101dc:	f000 f846 	bl	801026c <_free_r>
 80101e0:	e7e1      	b.n	80101a6 <_realloc_r+0x1e>
 80101e2:	4635      	mov	r5, r6
 80101e4:	e7df      	b.n	80101a6 <_realloc_r+0x1e>

080101e6 <memset>:
 80101e6:	4402      	add	r2, r0
 80101e8:	4603      	mov	r3, r0
 80101ea:	4293      	cmp	r3, r2
 80101ec:	d100      	bne.n	80101f0 <memset+0xa>
 80101ee:	4770      	bx	lr
 80101f0:	f803 1b01 	strb.w	r1, [r3], #1
 80101f4:	e7f9      	b.n	80101ea <memset+0x4>
	...

080101f8 <__errno>:
 80101f8:	4b01      	ldr	r3, [pc, #4]	; (8010200 <__errno+0x8>)
 80101fa:	6818      	ldr	r0, [r3, #0]
 80101fc:	4770      	bx	lr
 80101fe:	bf00      	nop
 8010200:	240000b0 	.word	0x240000b0

08010204 <__libc_init_array>:
 8010204:	b570      	push	{r4, r5, r6, lr}
 8010206:	4d0d      	ldr	r5, [pc, #52]	; (801023c <__libc_init_array+0x38>)
 8010208:	4c0d      	ldr	r4, [pc, #52]	; (8010240 <__libc_init_array+0x3c>)
 801020a:	1b64      	subs	r4, r4, r5
 801020c:	10a4      	asrs	r4, r4, #2
 801020e:	2600      	movs	r6, #0
 8010210:	42a6      	cmp	r6, r4
 8010212:	d109      	bne.n	8010228 <__libc_init_array+0x24>
 8010214:	4d0b      	ldr	r5, [pc, #44]	; (8010244 <__libc_init_array+0x40>)
 8010216:	4c0c      	ldr	r4, [pc, #48]	; (8010248 <__libc_init_array+0x44>)
 8010218:	f000 f938 	bl	801048c <_init>
 801021c:	1b64      	subs	r4, r4, r5
 801021e:	10a4      	asrs	r4, r4, #2
 8010220:	2600      	movs	r6, #0
 8010222:	42a6      	cmp	r6, r4
 8010224:	d105      	bne.n	8010232 <__libc_init_array+0x2e>
 8010226:	bd70      	pop	{r4, r5, r6, pc}
 8010228:	f855 3b04 	ldr.w	r3, [r5], #4
 801022c:	4798      	blx	r3
 801022e:	3601      	adds	r6, #1
 8010230:	e7ee      	b.n	8010210 <__libc_init_array+0xc>
 8010232:	f855 3b04 	ldr.w	r3, [r5], #4
 8010236:	4798      	blx	r3
 8010238:	3601      	adds	r6, #1
 801023a:	e7f2      	b.n	8010222 <__libc_init_array+0x1e>
 801023c:	08010814 	.word	0x08010814
 8010240:	08010814 	.word	0x08010814
 8010244:	08010814 	.word	0x08010814
 8010248:	08010828 	.word	0x08010828

0801024c <__retarget_lock_acquire_recursive>:
 801024c:	4770      	bx	lr

0801024e <__retarget_lock_release_recursive>:
 801024e:	4770      	bx	lr

08010250 <memcpy>:
 8010250:	440a      	add	r2, r1
 8010252:	4291      	cmp	r1, r2
 8010254:	f100 33ff 	add.w	r3, r0, #4294967295
 8010258:	d100      	bne.n	801025c <memcpy+0xc>
 801025a:	4770      	bx	lr
 801025c:	b510      	push	{r4, lr}
 801025e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010262:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010266:	4291      	cmp	r1, r2
 8010268:	d1f9      	bne.n	801025e <memcpy+0xe>
 801026a:	bd10      	pop	{r4, pc}

0801026c <_free_r>:
 801026c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801026e:	2900      	cmp	r1, #0
 8010270:	d044      	beq.n	80102fc <_free_r+0x90>
 8010272:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010276:	9001      	str	r0, [sp, #4]
 8010278:	2b00      	cmp	r3, #0
 801027a:	f1a1 0404 	sub.w	r4, r1, #4
 801027e:	bfb8      	it	lt
 8010280:	18e4      	addlt	r4, r4, r3
 8010282:	f000 f8df 	bl	8010444 <__malloc_lock>
 8010286:	4a1e      	ldr	r2, [pc, #120]	; (8010300 <_free_r+0x94>)
 8010288:	9801      	ldr	r0, [sp, #4]
 801028a:	6813      	ldr	r3, [r2, #0]
 801028c:	b933      	cbnz	r3, 801029c <_free_r+0x30>
 801028e:	6063      	str	r3, [r4, #4]
 8010290:	6014      	str	r4, [r2, #0]
 8010292:	b003      	add	sp, #12
 8010294:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010298:	f000 b8da 	b.w	8010450 <__malloc_unlock>
 801029c:	42a3      	cmp	r3, r4
 801029e:	d908      	bls.n	80102b2 <_free_r+0x46>
 80102a0:	6825      	ldr	r5, [r4, #0]
 80102a2:	1961      	adds	r1, r4, r5
 80102a4:	428b      	cmp	r3, r1
 80102a6:	bf01      	itttt	eq
 80102a8:	6819      	ldreq	r1, [r3, #0]
 80102aa:	685b      	ldreq	r3, [r3, #4]
 80102ac:	1949      	addeq	r1, r1, r5
 80102ae:	6021      	streq	r1, [r4, #0]
 80102b0:	e7ed      	b.n	801028e <_free_r+0x22>
 80102b2:	461a      	mov	r2, r3
 80102b4:	685b      	ldr	r3, [r3, #4]
 80102b6:	b10b      	cbz	r3, 80102bc <_free_r+0x50>
 80102b8:	42a3      	cmp	r3, r4
 80102ba:	d9fa      	bls.n	80102b2 <_free_r+0x46>
 80102bc:	6811      	ldr	r1, [r2, #0]
 80102be:	1855      	adds	r5, r2, r1
 80102c0:	42a5      	cmp	r5, r4
 80102c2:	d10b      	bne.n	80102dc <_free_r+0x70>
 80102c4:	6824      	ldr	r4, [r4, #0]
 80102c6:	4421      	add	r1, r4
 80102c8:	1854      	adds	r4, r2, r1
 80102ca:	42a3      	cmp	r3, r4
 80102cc:	6011      	str	r1, [r2, #0]
 80102ce:	d1e0      	bne.n	8010292 <_free_r+0x26>
 80102d0:	681c      	ldr	r4, [r3, #0]
 80102d2:	685b      	ldr	r3, [r3, #4]
 80102d4:	6053      	str	r3, [r2, #4]
 80102d6:	440c      	add	r4, r1
 80102d8:	6014      	str	r4, [r2, #0]
 80102da:	e7da      	b.n	8010292 <_free_r+0x26>
 80102dc:	d902      	bls.n	80102e4 <_free_r+0x78>
 80102de:	230c      	movs	r3, #12
 80102e0:	6003      	str	r3, [r0, #0]
 80102e2:	e7d6      	b.n	8010292 <_free_r+0x26>
 80102e4:	6825      	ldr	r5, [r4, #0]
 80102e6:	1961      	adds	r1, r4, r5
 80102e8:	428b      	cmp	r3, r1
 80102ea:	bf04      	itt	eq
 80102ec:	6819      	ldreq	r1, [r3, #0]
 80102ee:	685b      	ldreq	r3, [r3, #4]
 80102f0:	6063      	str	r3, [r4, #4]
 80102f2:	bf04      	itt	eq
 80102f4:	1949      	addeq	r1, r1, r5
 80102f6:	6021      	streq	r1, [r4, #0]
 80102f8:	6054      	str	r4, [r2, #4]
 80102fa:	e7ca      	b.n	8010292 <_free_r+0x26>
 80102fc:	b003      	add	sp, #12
 80102fe:	bd30      	pop	{r4, r5, pc}
 8010300:	2400217c 	.word	0x2400217c

08010304 <sbrk_aligned>:
 8010304:	b570      	push	{r4, r5, r6, lr}
 8010306:	4e0e      	ldr	r6, [pc, #56]	; (8010340 <sbrk_aligned+0x3c>)
 8010308:	460c      	mov	r4, r1
 801030a:	6831      	ldr	r1, [r6, #0]
 801030c:	4605      	mov	r5, r0
 801030e:	b911      	cbnz	r1, 8010316 <sbrk_aligned+0x12>
 8010310:	f000 f8ac 	bl	801046c <_sbrk_r>
 8010314:	6030      	str	r0, [r6, #0]
 8010316:	4621      	mov	r1, r4
 8010318:	4628      	mov	r0, r5
 801031a:	f000 f8a7 	bl	801046c <_sbrk_r>
 801031e:	1c43      	adds	r3, r0, #1
 8010320:	d00a      	beq.n	8010338 <sbrk_aligned+0x34>
 8010322:	1cc4      	adds	r4, r0, #3
 8010324:	f024 0403 	bic.w	r4, r4, #3
 8010328:	42a0      	cmp	r0, r4
 801032a:	d007      	beq.n	801033c <sbrk_aligned+0x38>
 801032c:	1a21      	subs	r1, r4, r0
 801032e:	4628      	mov	r0, r5
 8010330:	f000 f89c 	bl	801046c <_sbrk_r>
 8010334:	3001      	adds	r0, #1
 8010336:	d101      	bne.n	801033c <sbrk_aligned+0x38>
 8010338:	f04f 34ff 	mov.w	r4, #4294967295
 801033c:	4620      	mov	r0, r4
 801033e:	bd70      	pop	{r4, r5, r6, pc}
 8010340:	24002180 	.word	0x24002180

08010344 <_malloc_r>:
 8010344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010348:	1ccd      	adds	r5, r1, #3
 801034a:	f025 0503 	bic.w	r5, r5, #3
 801034e:	3508      	adds	r5, #8
 8010350:	2d0c      	cmp	r5, #12
 8010352:	bf38      	it	cc
 8010354:	250c      	movcc	r5, #12
 8010356:	2d00      	cmp	r5, #0
 8010358:	4607      	mov	r7, r0
 801035a:	db01      	blt.n	8010360 <_malloc_r+0x1c>
 801035c:	42a9      	cmp	r1, r5
 801035e:	d905      	bls.n	801036c <_malloc_r+0x28>
 8010360:	230c      	movs	r3, #12
 8010362:	603b      	str	r3, [r7, #0]
 8010364:	2600      	movs	r6, #0
 8010366:	4630      	mov	r0, r6
 8010368:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801036c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010440 <_malloc_r+0xfc>
 8010370:	f000 f868 	bl	8010444 <__malloc_lock>
 8010374:	f8d8 3000 	ldr.w	r3, [r8]
 8010378:	461c      	mov	r4, r3
 801037a:	bb5c      	cbnz	r4, 80103d4 <_malloc_r+0x90>
 801037c:	4629      	mov	r1, r5
 801037e:	4638      	mov	r0, r7
 8010380:	f7ff ffc0 	bl	8010304 <sbrk_aligned>
 8010384:	1c43      	adds	r3, r0, #1
 8010386:	4604      	mov	r4, r0
 8010388:	d155      	bne.n	8010436 <_malloc_r+0xf2>
 801038a:	f8d8 4000 	ldr.w	r4, [r8]
 801038e:	4626      	mov	r6, r4
 8010390:	2e00      	cmp	r6, #0
 8010392:	d145      	bne.n	8010420 <_malloc_r+0xdc>
 8010394:	2c00      	cmp	r4, #0
 8010396:	d048      	beq.n	801042a <_malloc_r+0xe6>
 8010398:	6823      	ldr	r3, [r4, #0]
 801039a:	4631      	mov	r1, r6
 801039c:	4638      	mov	r0, r7
 801039e:	eb04 0903 	add.w	r9, r4, r3
 80103a2:	f000 f863 	bl	801046c <_sbrk_r>
 80103a6:	4581      	cmp	r9, r0
 80103a8:	d13f      	bne.n	801042a <_malloc_r+0xe6>
 80103aa:	6821      	ldr	r1, [r4, #0]
 80103ac:	1a6d      	subs	r5, r5, r1
 80103ae:	4629      	mov	r1, r5
 80103b0:	4638      	mov	r0, r7
 80103b2:	f7ff ffa7 	bl	8010304 <sbrk_aligned>
 80103b6:	3001      	adds	r0, #1
 80103b8:	d037      	beq.n	801042a <_malloc_r+0xe6>
 80103ba:	6823      	ldr	r3, [r4, #0]
 80103bc:	442b      	add	r3, r5
 80103be:	6023      	str	r3, [r4, #0]
 80103c0:	f8d8 3000 	ldr.w	r3, [r8]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d038      	beq.n	801043a <_malloc_r+0xf6>
 80103c8:	685a      	ldr	r2, [r3, #4]
 80103ca:	42a2      	cmp	r2, r4
 80103cc:	d12b      	bne.n	8010426 <_malloc_r+0xe2>
 80103ce:	2200      	movs	r2, #0
 80103d0:	605a      	str	r2, [r3, #4]
 80103d2:	e00f      	b.n	80103f4 <_malloc_r+0xb0>
 80103d4:	6822      	ldr	r2, [r4, #0]
 80103d6:	1b52      	subs	r2, r2, r5
 80103d8:	d41f      	bmi.n	801041a <_malloc_r+0xd6>
 80103da:	2a0b      	cmp	r2, #11
 80103dc:	d917      	bls.n	801040e <_malloc_r+0xca>
 80103de:	1961      	adds	r1, r4, r5
 80103e0:	42a3      	cmp	r3, r4
 80103e2:	6025      	str	r5, [r4, #0]
 80103e4:	bf18      	it	ne
 80103e6:	6059      	strne	r1, [r3, #4]
 80103e8:	6863      	ldr	r3, [r4, #4]
 80103ea:	bf08      	it	eq
 80103ec:	f8c8 1000 	streq.w	r1, [r8]
 80103f0:	5162      	str	r2, [r4, r5]
 80103f2:	604b      	str	r3, [r1, #4]
 80103f4:	4638      	mov	r0, r7
 80103f6:	f104 060b 	add.w	r6, r4, #11
 80103fa:	f000 f829 	bl	8010450 <__malloc_unlock>
 80103fe:	f026 0607 	bic.w	r6, r6, #7
 8010402:	1d23      	adds	r3, r4, #4
 8010404:	1af2      	subs	r2, r6, r3
 8010406:	d0ae      	beq.n	8010366 <_malloc_r+0x22>
 8010408:	1b9b      	subs	r3, r3, r6
 801040a:	50a3      	str	r3, [r4, r2]
 801040c:	e7ab      	b.n	8010366 <_malloc_r+0x22>
 801040e:	42a3      	cmp	r3, r4
 8010410:	6862      	ldr	r2, [r4, #4]
 8010412:	d1dd      	bne.n	80103d0 <_malloc_r+0x8c>
 8010414:	f8c8 2000 	str.w	r2, [r8]
 8010418:	e7ec      	b.n	80103f4 <_malloc_r+0xb0>
 801041a:	4623      	mov	r3, r4
 801041c:	6864      	ldr	r4, [r4, #4]
 801041e:	e7ac      	b.n	801037a <_malloc_r+0x36>
 8010420:	4634      	mov	r4, r6
 8010422:	6876      	ldr	r6, [r6, #4]
 8010424:	e7b4      	b.n	8010390 <_malloc_r+0x4c>
 8010426:	4613      	mov	r3, r2
 8010428:	e7cc      	b.n	80103c4 <_malloc_r+0x80>
 801042a:	230c      	movs	r3, #12
 801042c:	603b      	str	r3, [r7, #0]
 801042e:	4638      	mov	r0, r7
 8010430:	f000 f80e 	bl	8010450 <__malloc_unlock>
 8010434:	e797      	b.n	8010366 <_malloc_r+0x22>
 8010436:	6025      	str	r5, [r4, #0]
 8010438:	e7dc      	b.n	80103f4 <_malloc_r+0xb0>
 801043a:	605b      	str	r3, [r3, #4]
 801043c:	deff      	udf	#255	; 0xff
 801043e:	bf00      	nop
 8010440:	2400217c 	.word	0x2400217c

08010444 <__malloc_lock>:
 8010444:	4801      	ldr	r0, [pc, #4]	; (801044c <__malloc_lock+0x8>)
 8010446:	f7ff bf01 	b.w	801024c <__retarget_lock_acquire_recursive>
 801044a:	bf00      	nop
 801044c:	24002178 	.word	0x24002178

08010450 <__malloc_unlock>:
 8010450:	4801      	ldr	r0, [pc, #4]	; (8010458 <__malloc_unlock+0x8>)
 8010452:	f7ff befc 	b.w	801024e <__retarget_lock_release_recursive>
 8010456:	bf00      	nop
 8010458:	24002178 	.word	0x24002178

0801045c <_malloc_usable_size_r>:
 801045c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010460:	1f18      	subs	r0, r3, #4
 8010462:	2b00      	cmp	r3, #0
 8010464:	bfbc      	itt	lt
 8010466:	580b      	ldrlt	r3, [r1, r0]
 8010468:	18c0      	addlt	r0, r0, r3
 801046a:	4770      	bx	lr

0801046c <_sbrk_r>:
 801046c:	b538      	push	{r3, r4, r5, lr}
 801046e:	4d06      	ldr	r5, [pc, #24]	; (8010488 <_sbrk_r+0x1c>)
 8010470:	2300      	movs	r3, #0
 8010472:	4604      	mov	r4, r0
 8010474:	4608      	mov	r0, r1
 8010476:	602b      	str	r3, [r5, #0]
 8010478:	f7f5 fd40 	bl	8005efc <_sbrk>
 801047c:	1c43      	adds	r3, r0, #1
 801047e:	d102      	bne.n	8010486 <_sbrk_r+0x1a>
 8010480:	682b      	ldr	r3, [r5, #0]
 8010482:	b103      	cbz	r3, 8010486 <_sbrk_r+0x1a>
 8010484:	6023      	str	r3, [r4, #0]
 8010486:	bd38      	pop	{r3, r4, r5, pc}
 8010488:	24002174 	.word	0x24002174

0801048c <_init>:
 801048c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801048e:	bf00      	nop
 8010490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010492:	bc08      	pop	{r3}
 8010494:	469e      	mov	lr, r3
 8010496:	4770      	bx	lr

08010498 <_fini>:
 8010498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801049a:	bf00      	nop
 801049c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801049e:	bc08      	pop	{r3}
 80104a0:	469e      	mov	lr, r3
 80104a2:	4770      	bx	lr
