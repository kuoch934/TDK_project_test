
TDK_project_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001021c  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  080104ec  080104ec  000204ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010854  08010854  00020854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000014  0801085c  0801085c  0002085c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010870  08010870  00020870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000b4  24000000  08010874  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000020cc  240000b8  08010928  000300b8  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24002184  08010928  00032184  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000300e2  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002bbcc  00000000  00000000  00030125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004b58  00000000  00000000  0005bcf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000015c8  00000000  00000000  00060850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000010f8  00000000  00000000  00061e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00035cac  00000000  00000000  00062f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002178a  00000000  00000000  00098bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001525f4  00000000  00000000  000ba346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00005eb4  00000000  00000000  0020c93c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006c  00000000  00000000  002127f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240000b8 	.word	0x240000b8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080104d4 	.word	0x080104d4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240000bc 	.word	0x240000bc
 800030c:	080104d4 	.word	0x080104d4

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b970 	b.w	8000618 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9e08      	ldr	r6, [sp, #32]
 8000356:	460d      	mov	r5, r1
 8000358:	4604      	mov	r4, r0
 800035a:	460f      	mov	r7, r1
 800035c:	2b00      	cmp	r3, #0
 800035e:	d14a      	bne.n	80003f6 <__udivmoddi4+0xa6>
 8000360:	428a      	cmp	r2, r1
 8000362:	4694      	mov	ip, r2
 8000364:	d965      	bls.n	8000432 <__udivmoddi4+0xe2>
 8000366:	fab2 f382 	clz	r3, r2
 800036a:	b143      	cbz	r3, 800037e <__udivmoddi4+0x2e>
 800036c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000370:	f1c3 0220 	rsb	r2, r3, #32
 8000374:	409f      	lsls	r7, r3
 8000376:	fa20 f202 	lsr.w	r2, r0, r2
 800037a:	4317      	orrs	r7, r2
 800037c:	409c      	lsls	r4, r3
 800037e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000382:	fa1f f58c 	uxth.w	r5, ip
 8000386:	fbb7 f1fe 	udiv	r1, r7, lr
 800038a:	0c22      	lsrs	r2, r4, #16
 800038c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000390:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000394:	fb01 f005 	mul.w	r0, r1, r5
 8000398:	4290      	cmp	r0, r2
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x62>
 800039c:	eb1c 0202 	adds.w	r2, ip, r2
 80003a0:	f101 37ff 	add.w	r7, r1, #4294967295
 80003a4:	f080 811c 	bcs.w	80005e0 <__udivmoddi4+0x290>
 80003a8:	4290      	cmp	r0, r2
 80003aa:	f240 8119 	bls.w	80005e0 <__udivmoddi4+0x290>
 80003ae:	3902      	subs	r1, #2
 80003b0:	4462      	add	r2, ip
 80003b2:	1a12      	subs	r2, r2, r0
 80003b4:	b2a4      	uxth	r4, r4
 80003b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80003be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003c2:	fb00 f505 	mul.w	r5, r0, r5
 80003c6:	42a5      	cmp	r5, r4
 80003c8:	d90a      	bls.n	80003e0 <__udivmoddi4+0x90>
 80003ca:	eb1c 0404 	adds.w	r4, ip, r4
 80003ce:	f100 32ff 	add.w	r2, r0, #4294967295
 80003d2:	f080 8107 	bcs.w	80005e4 <__udivmoddi4+0x294>
 80003d6:	42a5      	cmp	r5, r4
 80003d8:	f240 8104 	bls.w	80005e4 <__udivmoddi4+0x294>
 80003dc:	4464      	add	r4, ip
 80003de:	3802      	subs	r0, #2
 80003e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	2100      	movs	r1, #0
 80003e8:	b11e      	cbz	r6, 80003f2 <__udivmoddi4+0xa2>
 80003ea:	40dc      	lsrs	r4, r3
 80003ec:	2300      	movs	r3, #0
 80003ee:	e9c6 4300 	strd	r4, r3, [r6]
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0xbc>
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	f000 80ed 	beq.w	80005da <__udivmoddi4+0x28a>
 8000400:	2100      	movs	r1, #0
 8000402:	e9c6 0500 	strd	r0, r5, [r6]
 8000406:	4608      	mov	r0, r1
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	fab3 f183 	clz	r1, r3
 8000410:	2900      	cmp	r1, #0
 8000412:	d149      	bne.n	80004a8 <__udivmoddi4+0x158>
 8000414:	42ab      	cmp	r3, r5
 8000416:	d302      	bcc.n	800041e <__udivmoddi4+0xce>
 8000418:	4282      	cmp	r2, r0
 800041a:	f200 80f8 	bhi.w	800060e <__udivmoddi4+0x2be>
 800041e:	1a84      	subs	r4, r0, r2
 8000420:	eb65 0203 	sbc.w	r2, r5, r3
 8000424:	2001      	movs	r0, #1
 8000426:	4617      	mov	r7, r2
 8000428:	2e00      	cmp	r6, #0
 800042a:	d0e2      	beq.n	80003f2 <__udivmoddi4+0xa2>
 800042c:	e9c6 4700 	strd	r4, r7, [r6]
 8000430:	e7df      	b.n	80003f2 <__udivmoddi4+0xa2>
 8000432:	b902      	cbnz	r2, 8000436 <__udivmoddi4+0xe6>
 8000434:	deff      	udf	#255	; 0xff
 8000436:	fab2 f382 	clz	r3, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	f040 8090 	bne.w	8000560 <__udivmoddi4+0x210>
 8000440:	1a8a      	subs	r2, r1, r2
 8000442:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000446:	fa1f fe8c 	uxth.w	lr, ip
 800044a:	2101      	movs	r1, #1
 800044c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000450:	fb07 2015 	mls	r0, r7, r5, r2
 8000454:	0c22      	lsrs	r2, r4, #16
 8000456:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800045a:	fb0e f005 	mul.w	r0, lr, r5
 800045e:	4290      	cmp	r0, r2
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x124>
 8000462:	eb1c 0202 	adds.w	r2, ip, r2
 8000466:	f105 38ff 	add.w	r8, r5, #4294967295
 800046a:	d202      	bcs.n	8000472 <__udivmoddi4+0x122>
 800046c:	4290      	cmp	r0, r2
 800046e:	f200 80cb 	bhi.w	8000608 <__udivmoddi4+0x2b8>
 8000472:	4645      	mov	r5, r8
 8000474:	1a12      	subs	r2, r2, r0
 8000476:	b2a4      	uxth	r4, r4
 8000478:	fbb2 f0f7 	udiv	r0, r2, r7
 800047c:	fb07 2210 	mls	r2, r7, r0, r2
 8000480:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000484:	fb0e fe00 	mul.w	lr, lr, r0
 8000488:	45a6      	cmp	lr, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x14e>
 800048c:	eb1c 0404 	adds.w	r4, ip, r4
 8000490:	f100 32ff 	add.w	r2, r0, #4294967295
 8000494:	d202      	bcs.n	800049c <__udivmoddi4+0x14c>
 8000496:	45a6      	cmp	lr, r4
 8000498:	f200 80bb 	bhi.w	8000612 <__udivmoddi4+0x2c2>
 800049c:	4610      	mov	r0, r2
 800049e:	eba4 040e 	sub.w	r4, r4, lr
 80004a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004a6:	e79f      	b.n	80003e8 <__udivmoddi4+0x98>
 80004a8:	f1c1 0720 	rsb	r7, r1, #32
 80004ac:	408b      	lsls	r3, r1
 80004ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80004b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004b6:	fa05 f401 	lsl.w	r4, r5, r1
 80004ba:	fa20 f307 	lsr.w	r3, r0, r7
 80004be:	40fd      	lsrs	r5, r7
 80004c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004c4:	4323      	orrs	r3, r4
 80004c6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004ca:	fa1f fe8c 	uxth.w	lr, ip
 80004ce:	fb09 5518 	mls	r5, r9, r8, r5
 80004d2:	0c1c      	lsrs	r4, r3, #16
 80004d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004d8:	fb08 f50e 	mul.w	r5, r8, lr
 80004dc:	42a5      	cmp	r5, r4
 80004de:	fa02 f201 	lsl.w	r2, r2, r1
 80004e2:	fa00 f001 	lsl.w	r0, r0, r1
 80004e6:	d90b      	bls.n	8000500 <__udivmoddi4+0x1b0>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f0:	f080 8088 	bcs.w	8000604 <__udivmoddi4+0x2b4>
 80004f4:	42a5      	cmp	r5, r4
 80004f6:	f240 8085 	bls.w	8000604 <__udivmoddi4+0x2b4>
 80004fa:	f1a8 0802 	sub.w	r8, r8, #2
 80004fe:	4464      	add	r4, ip
 8000500:	1b64      	subs	r4, r4, r5
 8000502:	b29d      	uxth	r5, r3
 8000504:	fbb4 f3f9 	udiv	r3, r4, r9
 8000508:	fb09 4413 	mls	r4, r9, r3, r4
 800050c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000510:	fb03 fe0e 	mul.w	lr, r3, lr
 8000514:	45a6      	cmp	lr, r4
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x1da>
 8000518:	eb1c 0404 	adds.w	r4, ip, r4
 800051c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000520:	d26c      	bcs.n	80005fc <__udivmoddi4+0x2ac>
 8000522:	45a6      	cmp	lr, r4
 8000524:	d96a      	bls.n	80005fc <__udivmoddi4+0x2ac>
 8000526:	3b02      	subs	r3, #2
 8000528:	4464      	add	r4, ip
 800052a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800052e:	fba3 9502 	umull	r9, r5, r3, r2
 8000532:	eba4 040e 	sub.w	r4, r4, lr
 8000536:	42ac      	cmp	r4, r5
 8000538:	46c8      	mov	r8, r9
 800053a:	46ae      	mov	lr, r5
 800053c:	d356      	bcc.n	80005ec <__udivmoddi4+0x29c>
 800053e:	d053      	beq.n	80005e8 <__udivmoddi4+0x298>
 8000540:	b156      	cbz	r6, 8000558 <__udivmoddi4+0x208>
 8000542:	ebb0 0208 	subs.w	r2, r0, r8
 8000546:	eb64 040e 	sbc.w	r4, r4, lr
 800054a:	fa04 f707 	lsl.w	r7, r4, r7
 800054e:	40ca      	lsrs	r2, r1
 8000550:	40cc      	lsrs	r4, r1
 8000552:	4317      	orrs	r7, r2
 8000554:	e9c6 7400 	strd	r7, r4, [r6]
 8000558:	4618      	mov	r0, r3
 800055a:	2100      	movs	r1, #0
 800055c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000560:	f1c3 0120 	rsb	r1, r3, #32
 8000564:	fa02 fc03 	lsl.w	ip, r2, r3
 8000568:	fa20 f201 	lsr.w	r2, r0, r1
 800056c:	fa25 f101 	lsr.w	r1, r5, r1
 8000570:	409d      	lsls	r5, r3
 8000572:	432a      	orrs	r2, r5
 8000574:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000578:	fa1f fe8c 	uxth.w	lr, ip
 800057c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000580:	fb07 1510 	mls	r5, r7, r0, r1
 8000584:	0c11      	lsrs	r1, r2, #16
 8000586:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800058a:	fb00 f50e 	mul.w	r5, r0, lr
 800058e:	428d      	cmp	r5, r1
 8000590:	fa04 f403 	lsl.w	r4, r4, r3
 8000594:	d908      	bls.n	80005a8 <__udivmoddi4+0x258>
 8000596:	eb1c 0101 	adds.w	r1, ip, r1
 800059a:	f100 38ff 	add.w	r8, r0, #4294967295
 800059e:	d22f      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005a0:	428d      	cmp	r5, r1
 80005a2:	d92d      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005a4:	3802      	subs	r0, #2
 80005a6:	4461      	add	r1, ip
 80005a8:	1b49      	subs	r1, r1, r5
 80005aa:	b292      	uxth	r2, r2
 80005ac:	fbb1 f5f7 	udiv	r5, r1, r7
 80005b0:	fb07 1115 	mls	r1, r7, r5, r1
 80005b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005b8:	fb05 f10e 	mul.w	r1, r5, lr
 80005bc:	4291      	cmp	r1, r2
 80005be:	d908      	bls.n	80005d2 <__udivmoddi4+0x282>
 80005c0:	eb1c 0202 	adds.w	r2, ip, r2
 80005c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005c8:	d216      	bcs.n	80005f8 <__udivmoddi4+0x2a8>
 80005ca:	4291      	cmp	r1, r2
 80005cc:	d914      	bls.n	80005f8 <__udivmoddi4+0x2a8>
 80005ce:	3d02      	subs	r5, #2
 80005d0:	4462      	add	r2, ip
 80005d2:	1a52      	subs	r2, r2, r1
 80005d4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005d8:	e738      	b.n	800044c <__udivmoddi4+0xfc>
 80005da:	4631      	mov	r1, r6
 80005dc:	4630      	mov	r0, r6
 80005de:	e708      	b.n	80003f2 <__udivmoddi4+0xa2>
 80005e0:	4639      	mov	r1, r7
 80005e2:	e6e6      	b.n	80003b2 <__udivmoddi4+0x62>
 80005e4:	4610      	mov	r0, r2
 80005e6:	e6fb      	b.n	80003e0 <__udivmoddi4+0x90>
 80005e8:	4548      	cmp	r0, r9
 80005ea:	d2a9      	bcs.n	8000540 <__udivmoddi4+0x1f0>
 80005ec:	ebb9 0802 	subs.w	r8, r9, r2
 80005f0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005f4:	3b01      	subs	r3, #1
 80005f6:	e7a3      	b.n	8000540 <__udivmoddi4+0x1f0>
 80005f8:	4645      	mov	r5, r8
 80005fa:	e7ea      	b.n	80005d2 <__udivmoddi4+0x282>
 80005fc:	462b      	mov	r3, r5
 80005fe:	e794      	b.n	800052a <__udivmoddi4+0x1da>
 8000600:	4640      	mov	r0, r8
 8000602:	e7d1      	b.n	80005a8 <__udivmoddi4+0x258>
 8000604:	46d0      	mov	r8, sl
 8000606:	e77b      	b.n	8000500 <__udivmoddi4+0x1b0>
 8000608:	3d02      	subs	r5, #2
 800060a:	4462      	add	r2, ip
 800060c:	e732      	b.n	8000474 <__udivmoddi4+0x124>
 800060e:	4608      	mov	r0, r1
 8000610:	e70a      	b.n	8000428 <__udivmoddi4+0xd8>
 8000612:	4464      	add	r4, ip
 8000614:	3802      	subs	r0, #2
 8000616:	e742      	b.n	800049e <__udivmoddi4+0x14e>

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	0a5a      	lsrs	r2, r3, #9
 800062c:	490f      	ldr	r1, [pc, #60]	; (800066c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800062e:	fba1 1202 	umull	r1, r2, r1, r2
 8000632:	09d2      	lsrs	r2, r2, #7
 8000634:	490e      	ldr	r1, [pc, #56]	; (8000670 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000636:	fb01 f202 	mul.w	r2, r1, r2
 800063a:	1a9b      	subs	r3, r3, r2
 800063c:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	0a5b      	lsrs	r3, r3, #9
 8000644:	4a09      	ldr	r2, [pc, #36]	; (800066c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000646:	fba2 2303 	umull	r2, r3, r2, r3
 800064a:	09db      	lsrs	r3, r3, #7
 800064c:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	441a      	add	r2, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	68fa      	ldr	r2, [r7, #12]
 800065e:	601a      	str	r2, [r3, #0]
}
 8000660:	bf00      	nop
 8000662:	3714      	adds	r7, #20
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	00044b83 	.word	0x00044b83
 8000670:	3b9aca00 	.word	0x3b9aca00
 8000674:	00000000 	.word	0x00000000

08000678 <pidCtrl>:
    {Kp[1], Ki[1], Kd[1], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
    {Kp[2], Ki[2], Kd[2], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
    {Kp[3], Ki[3], Kd[3], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0}
};

void pidCtrl(int i){
 8000678:	b490      	push	{r4, r7}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	Kpid[i].insVel = (double) Kpid[i].enc * PI * Dwheel
 8000680:	49c7      	ldr	r1, [pc, #796]	; (80009a0 <pidCtrl+0x328>)
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	4613      	mov	r3, r2
 8000686:	00db      	lsls	r3, r3, #3
 8000688:	1a9b      	subs	r3, r3, r2
 800068a:	011b      	lsls	r3, r3, #4
 800068c:	440b      	add	r3, r1
 800068e:	3318      	adds	r3, #24
 8000690:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000694:	ee07 3a90 	vmov	s15, r3
 8000698:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800069c:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8000978 <pidCtrl+0x300>
 80006a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006a4:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8000980 <pidCtrl+0x308>
 80006a8:	ee27 6b06 	vmul.f64	d6, d7, d6
			/ (4 * resolution * reduction_ratio * belt_ratio) * frequency;
 80006ac:	ed9f 5bb6 	vldr	d5, [pc, #728]	; 8000988 <pidCtrl+0x310>
 80006b0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80006b4:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8000990 <pidCtrl+0x318>
 80006b8:	ee27 7b06 	vmul.f64	d7, d7, d6
	Kpid[i].insVel = (double) Kpid[i].enc * PI * Dwheel
 80006bc:	49b8      	ldr	r1, [pc, #736]	; (80009a0 <pidCtrl+0x328>)
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	4613      	mov	r3, r2
 80006c2:	00db      	lsls	r3, r3, #3
 80006c4:	1a9b      	subs	r3, r3, r2
 80006c6:	011b      	lsls	r3, r3, #4
 80006c8:	440b      	add	r3, r1
 80006ca:	3328      	adds	r3, #40	; 0x28
 80006cc:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].error = Kpid[i].goalVel - Kpid[i].insVel;
 80006d0:	49b3      	ldr	r1, [pc, #716]	; (80009a0 <pidCtrl+0x328>)
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	4613      	mov	r3, r2
 80006d6:	00db      	lsls	r3, r3, #3
 80006d8:	1a9b      	subs	r3, r3, r2
 80006da:	011b      	lsls	r3, r3, #4
 80006dc:	440b      	add	r3, r1
 80006de:	3320      	adds	r3, #32
 80006e0:	ed93 6b00 	vldr	d6, [r3]
 80006e4:	49ae      	ldr	r1, [pc, #696]	; (80009a0 <pidCtrl+0x328>)
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	4613      	mov	r3, r2
 80006ea:	00db      	lsls	r3, r3, #3
 80006ec:	1a9b      	subs	r3, r3, r2
 80006ee:	011b      	lsls	r3, r3, #4
 80006f0:	440b      	add	r3, r1
 80006f2:	3328      	adds	r3, #40	; 0x28
 80006f4:	ed93 7b00 	vldr	d7, [r3]
 80006f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80006fc:	49a8      	ldr	r1, [pc, #672]	; (80009a0 <pidCtrl+0x328>)
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	4613      	mov	r3, r2
 8000702:	00db      	lsls	r3, r3, #3
 8000704:	1a9b      	subs	r3, r3, r2
 8000706:	011b      	lsls	r3, r3, #4
 8000708:	440b      	add	r3, r1
 800070a:	3330      	adds	r3, #48	; 0x30
 800070c:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].up = Kpid[i].Kp * Kpid[i].error;
 8000710:	49a3      	ldr	r1, [pc, #652]	; (80009a0 <pidCtrl+0x328>)
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	4613      	mov	r3, r2
 8000716:	00db      	lsls	r3, r3, #3
 8000718:	1a9b      	subs	r3, r3, r2
 800071a:	011b      	lsls	r3, r3, #4
 800071c:	440b      	add	r3, r1
 800071e:	ed93 6b00 	vldr	d6, [r3]
 8000722:	499f      	ldr	r1, [pc, #636]	; (80009a0 <pidCtrl+0x328>)
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	4613      	mov	r3, r2
 8000728:	00db      	lsls	r3, r3, #3
 800072a:	1a9b      	subs	r3, r3, r2
 800072c:	011b      	lsls	r3, r3, #4
 800072e:	440b      	add	r3, r1
 8000730:	3330      	adds	r3, #48	; 0x30
 8000732:	ed93 7b00 	vldr	d7, [r3]
 8000736:	ee26 7b07 	vmul.f64	d7, d6, d7
 800073a:	4999      	ldr	r1, [pc, #612]	; (80009a0 <pidCtrl+0x328>)
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	4613      	mov	r3, r2
 8000740:	00db      	lsls	r3, r3, #3
 8000742:	1a9b      	subs	r3, r3, r2
 8000744:	011b      	lsls	r3, r3, #4
 8000746:	440b      	add	r3, r1
 8000748:	3348      	adds	r3, #72	; 0x48
 800074a:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].ui += Kpid[i].Ki * Kpid[i].last_error / frequency;
 800074e:	4994      	ldr	r1, [pc, #592]	; (80009a0 <pidCtrl+0x328>)
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	4613      	mov	r3, r2
 8000754:	00db      	lsls	r3, r3, #3
 8000756:	1a9b      	subs	r3, r3, r2
 8000758:	011b      	lsls	r3, r3, #4
 800075a:	440b      	add	r3, r1
 800075c:	3350      	adds	r3, #80	; 0x50
 800075e:	ed93 6b00 	vldr	d6, [r3]
 8000762:	498f      	ldr	r1, [pc, #572]	; (80009a0 <pidCtrl+0x328>)
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	4613      	mov	r3, r2
 8000768:	00db      	lsls	r3, r3, #3
 800076a:	1a9b      	subs	r3, r3, r2
 800076c:	011b      	lsls	r3, r3, #4
 800076e:	440b      	add	r3, r1
 8000770:	3308      	adds	r3, #8
 8000772:	ed93 5b00 	vldr	d5, [r3]
 8000776:	498a      	ldr	r1, [pc, #552]	; (80009a0 <pidCtrl+0x328>)
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	4613      	mov	r3, r2
 800077c:	00db      	lsls	r3, r3, #3
 800077e:	1a9b      	subs	r3, r3, r2
 8000780:	011b      	lsls	r3, r3, #4
 8000782:	440b      	add	r3, r1
 8000784:	3338      	adds	r3, #56	; 0x38
 8000786:	ed93 7b00 	vldr	d7, [r3]
 800078a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800078e:	ed9f 4b80 	vldr	d4, [pc, #512]	; 8000990 <pidCtrl+0x318>
 8000792:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000796:	ee36 7b07 	vadd.f64	d7, d6, d7
 800079a:	4981      	ldr	r1, [pc, #516]	; (80009a0 <pidCtrl+0x328>)
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	4613      	mov	r3, r2
 80007a0:	00db      	lsls	r3, r3, #3
 80007a2:	1a9b      	subs	r3, r3, r2
 80007a4:	011b      	lsls	r3, r3, #4
 80007a6:	440b      	add	r3, r1
 80007a8:	3350      	adds	r3, #80	; 0x50
 80007aa:	ed83 7b00 	vstr	d7, [r3]
//	Kpid[i].ui = 0;
	Kpid[i].ud = Kpid[i].Kd * (Kpid[i].error - Kpid[i].last_error) * frequency;
 80007ae:	497c      	ldr	r1, [pc, #496]	; (80009a0 <pidCtrl+0x328>)
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	4613      	mov	r3, r2
 80007b4:	00db      	lsls	r3, r3, #3
 80007b6:	1a9b      	subs	r3, r3, r2
 80007b8:	011b      	lsls	r3, r3, #4
 80007ba:	440b      	add	r3, r1
 80007bc:	3310      	adds	r3, #16
 80007be:	ed93 6b00 	vldr	d6, [r3]
 80007c2:	4977      	ldr	r1, [pc, #476]	; (80009a0 <pidCtrl+0x328>)
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	4613      	mov	r3, r2
 80007c8:	00db      	lsls	r3, r3, #3
 80007ca:	1a9b      	subs	r3, r3, r2
 80007cc:	011b      	lsls	r3, r3, #4
 80007ce:	440b      	add	r3, r1
 80007d0:	3330      	adds	r3, #48	; 0x30
 80007d2:	ed93 5b00 	vldr	d5, [r3]
 80007d6:	4972      	ldr	r1, [pc, #456]	; (80009a0 <pidCtrl+0x328>)
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	4613      	mov	r3, r2
 80007dc:	00db      	lsls	r3, r3, #3
 80007de:	1a9b      	subs	r3, r3, r2
 80007e0:	011b      	lsls	r3, r3, #4
 80007e2:	440b      	add	r3, r1
 80007e4:	3338      	adds	r3, #56	; 0x38
 80007e6:	ed93 7b00 	vldr	d7, [r3]
 80007ea:	ee35 7b47 	vsub.f64	d7, d5, d7
 80007ee:	ee26 7b07 	vmul.f64	d7, d6, d7
 80007f2:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8000990 <pidCtrl+0x318>
 80007f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80007fa:	4969      	ldr	r1, [pc, #420]	; (80009a0 <pidCtrl+0x328>)
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	4613      	mov	r3, r2
 8000800:	00db      	lsls	r3, r3, #3
 8000802:	1a9b      	subs	r3, r3, r2
 8000804:	011b      	lsls	r3, r3, #4
 8000806:	440b      	add	r3, r1
 8000808:	3358      	adds	r3, #88	; 0x58
 800080a:	ed83 7b00 	vstr	d7, [r3]
	if( fabs(Kpid[i].ui) >= max_ui )
 800080e:	4964      	ldr	r1, [pc, #400]	; (80009a0 <pidCtrl+0x328>)
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	4613      	mov	r3, r2
 8000814:	00db      	lsls	r3, r3, #3
 8000816:	1a9b      	subs	r3, r3, r2
 8000818:	011b      	lsls	r3, r3, #4
 800081a:	440b      	add	r3, r1
 800081c:	3350      	adds	r3, #80	; 0x50
 800081e:	ed93 7b00 	vldr	d7, [r3]
 8000822:	eeb0 7bc7 	vabs.f64	d7, d7
 8000826:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800082a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800082e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000832:	db1f      	blt.n	8000874 <pidCtrl+0x1fc>
		Kpid[i].ui = (Kpid[i].ui >= 0)? max_ui: -1*max_ui;
 8000834:	495a      	ldr	r1, [pc, #360]	; (80009a0 <pidCtrl+0x328>)
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	4613      	mov	r3, r2
 800083a:	00db      	lsls	r3, r3, #3
 800083c:	1a9b      	subs	r3, r3, r2
 800083e:	011b      	lsls	r3, r3, #4
 8000840:	440b      	add	r3, r1
 8000842:	3350      	adds	r3, #80	; 0x50
 8000844:	ed93 7b00 	vldr	d7, [r3]
 8000848:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800084c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000850:	db03      	blt.n	800085a <pidCtrl+0x1e2>
 8000852:	f04f 0000 	mov.w	r0, #0
 8000856:	4953      	ldr	r1, [pc, #332]	; (80009a4 <pidCtrl+0x32c>)
 8000858:	e002      	b.n	8000860 <pidCtrl+0x1e8>
 800085a:	f04f 0000 	mov.w	r0, #0
 800085e:	4952      	ldr	r1, [pc, #328]	; (80009a8 <pidCtrl+0x330>)
 8000860:	4c4f      	ldr	r4, [pc, #316]	; (80009a0 <pidCtrl+0x328>)
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	4613      	mov	r3, r2
 8000866:	00db      	lsls	r3, r3, #3
 8000868:	1a9b      	subs	r3, r3, r2
 800086a:	011b      	lsls	r3, r3, #4
 800086c:	4423      	add	r3, r4
 800086e:	3350      	adds	r3, #80	; 0x50
 8000870:	e9c3 0100 	strd	r0, r1, [r3]
	Kpid[i].u = Kpid[i].up + Kpid[i].ui + Kpid[i].ud;
 8000874:	494a      	ldr	r1, [pc, #296]	; (80009a0 <pidCtrl+0x328>)
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	4613      	mov	r3, r2
 800087a:	00db      	lsls	r3, r3, #3
 800087c:	1a9b      	subs	r3, r3, r2
 800087e:	011b      	lsls	r3, r3, #4
 8000880:	440b      	add	r3, r1
 8000882:	3348      	adds	r3, #72	; 0x48
 8000884:	ed93 6b00 	vldr	d6, [r3]
 8000888:	4945      	ldr	r1, [pc, #276]	; (80009a0 <pidCtrl+0x328>)
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	4613      	mov	r3, r2
 800088e:	00db      	lsls	r3, r3, #3
 8000890:	1a9b      	subs	r3, r3, r2
 8000892:	011b      	lsls	r3, r3, #4
 8000894:	440b      	add	r3, r1
 8000896:	3350      	adds	r3, #80	; 0x50
 8000898:	ed93 7b00 	vldr	d7, [r3]
 800089c:	ee36 6b07 	vadd.f64	d6, d6, d7
 80008a0:	493f      	ldr	r1, [pc, #252]	; (80009a0 <pidCtrl+0x328>)
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	4613      	mov	r3, r2
 80008a6:	00db      	lsls	r3, r3, #3
 80008a8:	1a9b      	subs	r3, r3, r2
 80008aa:	011b      	lsls	r3, r3, #4
 80008ac:	440b      	add	r3, r1
 80008ae:	3358      	adds	r3, #88	; 0x58
 80008b0:	ed93 7b00 	vldr	d7, [r3]
 80008b4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80008b8:	4939      	ldr	r1, [pc, #228]	; (80009a0 <pidCtrl+0x328>)
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	4613      	mov	r3, r2
 80008be:	00db      	lsls	r3, r3, #3
 80008c0:	1a9b      	subs	r3, r3, r2
 80008c2:	011b      	lsls	r3, r3, #4
 80008c4:	440b      	add	r3, r1
 80008c6:	3340      	adds	r3, #64	; 0x40
 80008c8:	ed83 7b00 	vstr	d7, [r3]

	Kpid[i].last_error = Kpid[i].error;
 80008cc:	4934      	ldr	r1, [pc, #208]	; (80009a0 <pidCtrl+0x328>)
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	4613      	mov	r3, r2
 80008d2:	00db      	lsls	r3, r3, #3
 80008d4:	1a9b      	subs	r3, r3, r2
 80008d6:	011b      	lsls	r3, r3, #4
 80008d8:	440b      	add	r3, r1
 80008da:	3330      	adds	r3, #48	; 0x30
 80008dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80008e0:	4c2f      	ldr	r4, [pc, #188]	; (80009a0 <pidCtrl+0x328>)
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	4613      	mov	r3, r2
 80008e6:	00db      	lsls	r3, r3, #3
 80008e8:	1a9b      	subs	r3, r3, r2
 80008ea:	011b      	lsls	r3, r3, #4
 80008ec:	4423      	add	r3, r4
 80008ee:	3338      	adds	r3, #56	; 0x38
 80008f0:	e9c3 0100 	strd	r0, r1, [r3]

	Kpid[i].pulse = fabs(Kpid[i].u) * PWM_ARR;
 80008f4:	492a      	ldr	r1, [pc, #168]	; (80009a0 <pidCtrl+0x328>)
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	4613      	mov	r3, r2
 80008fa:	00db      	lsls	r3, r3, #3
 80008fc:	1a9b      	subs	r3, r3, r2
 80008fe:	011b      	lsls	r3, r3, #4
 8000900:	440b      	add	r3, r1
 8000902:	3340      	adds	r3, #64	; 0x40
 8000904:	ed93 7b00 	vldr	d7, [r3]
 8000908:	eeb0 7bc7 	vabs.f64	d7, d7
 800090c:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8000998 <pidCtrl+0x320>
 8000910:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000914:	4922      	ldr	r1, [pc, #136]	; (80009a0 <pidCtrl+0x328>)
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	4613      	mov	r3, r2
 800091a:	00db      	lsls	r3, r3, #3
 800091c:	1a9b      	subs	r3, r3, r2
 800091e:	011b      	lsls	r3, r3, #4
 8000920:	440b      	add	r3, r1
 8000922:	3360      	adds	r3, #96	; 0x60
 8000924:	ed83 7b00 	vstr	d7, [r3]
	if(Kpid[i].pulse >= PWM_ARR)	Kpid[i].pulse = PWM_ARR;
 8000928:	491d      	ldr	r1, [pc, #116]	; (80009a0 <pidCtrl+0x328>)
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	4613      	mov	r3, r2
 800092e:	00db      	lsls	r3, r3, #3
 8000930:	1a9b      	subs	r3, r3, r2
 8000932:	011b      	lsls	r3, r3, #4
 8000934:	440b      	add	r3, r1
 8000936:	3360      	adds	r3, #96	; 0x60
 8000938:	ed93 7b00 	vldr	d7, [r3]
 800093c:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8000998 <pidCtrl+0x320>
 8000940:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000948:	da00      	bge.n	800094c <pidCtrl+0x2d4>
}
 800094a:	e00d      	b.n	8000968 <pidCtrl+0x2f0>
	if(Kpid[i].pulse >= PWM_ARR)	Kpid[i].pulse = PWM_ARR;
 800094c:	4914      	ldr	r1, [pc, #80]	; (80009a0 <pidCtrl+0x328>)
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	4613      	mov	r3, r2
 8000952:	00db      	lsls	r3, r3, #3
 8000954:	1a9b      	subs	r3, r3, r2
 8000956:	011b      	lsls	r3, r3, #4
 8000958:	440b      	add	r3, r1
 800095a:	f103 0160 	add.w	r1, r3, #96	; 0x60
 800095e:	a30e      	add	r3, pc, #56	; (adr r3, 8000998 <pidCtrl+0x320>)
 8000960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000964:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bc90      	pop	{r4, r7}
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	f3af 8000 	nop.w
 8000978:	54cadf99 	.word	0x54cadf99
 800097c:	400921fb 	.word	0x400921fb
 8000980:	cccccccd 	.word	0xcccccccd
 8000984:	4029cccc 	.word	0x4029cccc
 8000988:	00000000 	.word	0x00000000
 800098c:	410b0000 	.word	0x410b0000
 8000990:	00000000 	.word	0x00000000
 8000994:	406f4000 	.word	0x406f4000
 8000998:	00000000 	.word	0x00000000
 800099c:	408f3800 	.word	0x408f3800
 80009a0:	240000f8 	.word	0x240000f8
 80009a4:	3ff00000 	.word	0x3ff00000
 80009a8:	bff00000 	.word	0xbff00000

080009ac <_Z41__static_initialization_and_destruction_0ii>:
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	6039      	str	r1, [r7, #0]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d14c      	bne.n	8000a56 <_Z41__static_initialization_and_destruction_0ii+0xaa>
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d147      	bne.n	8000a56 <_Z41__static_initialization_and_destruction_0ii+0xaa>
    {Kp[0], Ki[0], Kd[0], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 80009c6:	4b27      	ldr	r3, [pc, #156]	; (8000a64 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80009c8:	e9d3 2300 	ldrd	r2, r3, [r3]
};
 80009cc:	4926      	ldr	r1, [pc, #152]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80009ce:	e9c1 2300 	strd	r2, r3, [r1]
    {Kp[0], Ki[0], Kd[0], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 80009d2:	4b26      	ldr	r3, [pc, #152]	; (8000a6c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80009d4:	e9d3 2300 	ldrd	r2, r3, [r3]
};
 80009d8:	4923      	ldr	r1, [pc, #140]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80009da:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {Kp[0], Ki[0], Kd[0], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 80009de:	4b24      	ldr	r3, [pc, #144]	; (8000a70 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80009e0:	e9d3 2300 	ldrd	r2, r3, [r3]
};
 80009e4:	4920      	ldr	r1, [pc, #128]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80009e6:	e9c1 2304 	strd	r2, r3, [r1, #16]
    {Kp[1], Ki[1], Kd[1], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 80009ea:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80009ec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
};
 80009f0:	491d      	ldr	r1, [pc, #116]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80009f2:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
    {Kp[1], Ki[1], Kd[1], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 80009f6:	4b1d      	ldr	r3, [pc, #116]	; (8000a6c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80009f8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
};
 80009fc:	491a      	ldr	r1, [pc, #104]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80009fe:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
    {Kp[1], Ki[1], Kd[1], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 8000a02:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8000a04:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
};
 8000a08:	4917      	ldr	r1, [pc, #92]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000a0a:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
    {Kp[2], Ki[2], Kd[2], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 8000a0e:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8000a10:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
};
 8000a14:	4914      	ldr	r1, [pc, #80]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000a16:	e9c1 2338 	strd	r2, r3, [r1, #224]	; 0xe0
    {Kp[2], Ki[2], Kd[2], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 8000a1a:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8000a1c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
};
 8000a20:	4911      	ldr	r1, [pc, #68]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000a22:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
    {Kp[2], Ki[2], Kd[2], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 8000a26:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8000a28:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
};
 8000a2c:	490e      	ldr	r1, [pc, #56]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000a2e:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
    {Kp[3], Ki[3], Kd[3], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0}
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8000a34:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8000a38:	490b      	ldr	r1, [pc, #44]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000a3a:	e9c1 2354 	strd	r2, r3, [r1, #336]	; 0x150
    {Kp[3], Ki[3], Kd[3], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0}
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8000a40:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8000a44:	4908      	ldr	r1, [pc, #32]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000a46:	e9c1 2356 	strd	r2, r3, [r1, #344]	; 0x158
    {Kp[3], Ki[3], Kd[3], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0}
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8000a4c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8000a50:	4905      	ldr	r1, [pc, #20]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000a52:	e9c1 2358 	strd	r2, r3, [r1, #352]	; 0x160
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	24000000 	.word	0x24000000
 8000a68:	240000f8 	.word	0x240000f8
 8000a6c:	24000020 	.word	0x24000020
 8000a70:	240000d8 	.word	0x240000d8

08000a74 <_GLOBAL__sub_I_Kp>:
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	f7ff ff95 	bl	80009ac <_Z41__static_initialization_and_destruction_0ii>
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	0000      	movs	r0, r0
	...

08000a88 <HAL_TIM_PeriodElapsedCallback>:
double corr_vy = (double)100/94;
int t = 0;
int delay_start_resetFIRST = 1;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4abe      	ldr	r2, [pc, #760]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	f040 81ef 	bne.w	8000e7a <HAL_TIM_PeriodElapsedCallback+0x3f2>

		Kpid[0].goalVel = Vx + Vy * corr_vy + (W * coeffab);
 8000a9c:	4bbd      	ldr	r3, [pc, #756]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000a9e:	ed93 6b00 	vldr	d6, [r3]
 8000aa2:	4bbd      	ldr	r3, [pc, #756]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000aa4:	ed93 7b00 	vldr	d7, [r3]
 8000aa8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000aac:	4bbb      	ldr	r3, [pc, #748]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8000aae:	ed93 7b00 	vldr	d7, [r3]
 8000ab2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000ab6:	4bba      	ldr	r3, [pc, #744]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8000ab8:	ed93 5b00 	vldr	d5, [r3]
 8000abc:	4bb9      	ldr	r3, [pc, #740]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8000abe:	ed93 7b00 	vldr	d7, [r3]
 8000ac2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000ac6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000aca:	4bb7      	ldr	r3, [pc, #732]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000acc:	ed83 7b08 	vstr	d7, [r3, #32]
		Kpid[1].goalVel = Vx - Vy * corr_vy - (W * coeffab);
 8000ad0:	4bb2      	ldr	r3, [pc, #712]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8000ad2:	ed93 6b00 	vldr	d6, [r3]
 8000ad6:	4baf      	ldr	r3, [pc, #700]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000ad8:	ed93 5b00 	vldr	d5, [r3]
 8000adc:	4bae      	ldr	r3, [pc, #696]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000ade:	ed93 7b00 	vldr	d7, [r3]
 8000ae2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000ae6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000aea:	4bad      	ldr	r3, [pc, #692]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8000aec:	ed93 5b00 	vldr	d5, [r3]
 8000af0:	4bac      	ldr	r3, [pc, #688]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8000af2:	ed93 7b00 	vldr	d7, [r3]
 8000af6:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000afa:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000afe:	4baa      	ldr	r3, [pc, #680]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000b00:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
		Kpid[2].goalVel = Vx + Vy * corr_vy - (W * coeffab);
 8000b04:	4ba3      	ldr	r3, [pc, #652]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000b06:	ed93 6b00 	vldr	d6, [r3]
 8000b0a:	4ba3      	ldr	r3, [pc, #652]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000b0c:	ed93 7b00 	vldr	d7, [r3]
 8000b10:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000b14:	4ba1      	ldr	r3, [pc, #644]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8000b16:	ed93 7b00 	vldr	d7, [r3]
 8000b1a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000b1e:	4ba0      	ldr	r3, [pc, #640]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8000b20:	ed93 5b00 	vldr	d5, [r3]
 8000b24:	4b9f      	ldr	r3, [pc, #636]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8000b26:	ed93 7b00 	vldr	d7, [r3]
 8000b2a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000b2e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000b32:	4b9d      	ldr	r3, [pc, #628]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000b34:	ed83 7b40 	vstr	d7, [r3, #256]	; 0x100
		Kpid[3].goalVel = Vx - Vy * corr_vy + (W * coeffab);
 8000b38:	4b98      	ldr	r3, [pc, #608]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8000b3a:	ed93 6b00 	vldr	d6, [r3]
 8000b3e:	4b95      	ldr	r3, [pc, #596]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000b40:	ed93 5b00 	vldr	d5, [r3]
 8000b44:	4b94      	ldr	r3, [pc, #592]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000b46:	ed93 7b00 	vldr	d7, [r3]
 8000b4a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000b4e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000b52:	4b93      	ldr	r3, [pc, #588]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8000b54:	ed93 5b00 	vldr	d5, [r3]
 8000b58:	4b92      	ldr	r3, [pc, #584]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8000b5a:	ed93 7b00 	vldr	d7, [r3]
 8000b5e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000b62:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b66:	4b90      	ldr	r3, [pc, #576]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000b68:	ed83 7b5c 	vstr	d7, [r3, #368]	; 0x170

		Kpid[0].enc = __HAL_TIM_GetCounter(FR_ENC);
 8000b6c:	4b8f      	ldr	r3, [pc, #572]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b72:	b21a      	sxth	r2, r3
 8000b74:	4b8c      	ldr	r3, [pc, #560]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000b76:	831a      	strh	r2, [r3, #24]
		Kpid[1].enc = __HAL_TIM_GetCounter(FL_ENC);
 8000b78:	4b8d      	ldr	r3, [pc, #564]	; (8000db0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b7e:	b21a      	sxth	r2, r3
 8000b80:	4b89      	ldr	r3, [pc, #548]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000b82:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
		Kpid[2].enc = __HAL_TIM_GetCounter(BL_ENC) * -1;
 8000b86:	4b8b      	ldr	r3, [pc, #556]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	425b      	negs	r3, r3
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	b21a      	sxth	r2, r3
 8000b94:	4b84      	ldr	r3, [pc, #528]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000b96:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
		Kpid[3].enc = __HAL_TIM_GetCounter(BR_ENC) * -1;
 8000b9a:	4b87      	ldr	r3, [pc, #540]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	425b      	negs	r3, r3
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	b21a      	sxth	r2, r3
 8000ba8:	4b7f      	ldr	r3, [pc, #508]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000baa:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
		__HAL_TIM_SetCounter(FR_ENC, 0);
 8000bae:	4b7f      	ldr	r3, [pc, #508]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(FL_ENC, 0);
 8000bb6:	4b7e      	ldr	r3, [pc, #504]	; (8000db0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(BL_ENC, 0);
 8000bbe:	4b7d      	ldr	r3, [pc, #500]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(BR_ENC, 0);
 8000bc6:	4b7c      	ldr	r3, [pc, #496]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	625a      	str	r2, [r3, #36]	; 0x24





		for( int i = 0; i < 4; i ++){
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	e005      	b.n	8000be0 <HAL_TIM_PeriodElapsedCallback+0x158>
			pidCtrl(i);
 8000bd4:	68f8      	ldr	r0, [r7, #12]
 8000bd6:	f7ff fd4f 	bl	8000678 <pidCtrl>
		for( int i = 0; i < 4; i ++){
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	2b03      	cmp	r3, #3
 8000be4:	ddf6      	ble.n	8000bd4 <HAL_TIM_PeriodElapsedCallback+0x14c>
		}

		rVx= (Kpid[0].insVel+Kpid[1].insVel+Kpid[2].insVel+Kpid[3].insVel)/4;
 8000be6:	4b70      	ldr	r3, [pc, #448]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000be8:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8000bec:	4b6e      	ldr	r3, [pc, #440]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000bee:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 8000bf2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000bf6:	4b6c      	ldr	r3, [pc, #432]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000bf8:	ed93 7b42 	vldr	d7, [r3, #264]	; 0x108
 8000bfc:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000c00:	4b69      	ldr	r3, [pc, #420]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000c02:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 8000c06:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000c0a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000c0e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c12:	4b6a      	ldr	r3, [pc, #424]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000c14:	ed83 7b00 	vstr	d7, [r3]
		rVy= (Kpid[0].insVel-Kpid[1].insVel+Kpid[2].insVel-Kpid[3].insVel)/4;
 8000c18:	4b63      	ldr	r3, [pc, #396]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000c1a:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8000c1e:	4b62      	ldr	r3, [pc, #392]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000c20:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 8000c24:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000c28:	4b5f      	ldr	r3, [pc, #380]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000c2a:	ed93 7b42 	vldr	d7, [r3, #264]	; 0x108
 8000c2e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000c32:	4b5d      	ldr	r3, [pc, #372]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000c34:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 8000c38:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000c3c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000c40:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c44:	4b5e      	ldr	r3, [pc, #376]	; (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000c46:	ed83 7b00 	vstr	d7, [r3]
		rW= (-Kpid[0].insVel+Kpid[1].insVel+Kpid[2].insVel-Kpid[3].insVel)/(4*(car_len-width))/(2*PI);
 8000c4a:	4b57      	ldr	r3, [pc, #348]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000c4c:	ed93 6b26 	vldr	d6, [r3, #152]	; 0x98
 8000c50:	4b55      	ldr	r3, [pc, #340]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000c52:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8000c56:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000c5a:	4b53      	ldr	r3, [pc, #332]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000c5c:	ed93 7b42 	vldr	d7, [r3, #264]	; 0x108
 8000c60:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000c64:	4b50      	ldr	r3, [pc, #320]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000c66:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 8000c6a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000c6e:	eebb 5b0a 	vmov.f64	d5, #186	; 0xc1d00000 -26.0
 8000c72:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000c76:	ed9f 5b44 	vldr	d5, [pc, #272]	; 8000d88 <HAL_TIM_PeriodElapsedCallback+0x300>
 8000c7a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c7e:	4b51      	ldr	r3, [pc, #324]	; (8000dc4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8000c80:	ed83 7b00 	vstr	d7, [r3]

		__HAL_TIM_SET_COMPARE(FR_PWM_TIMMER, FR_PWM_CHANNEL, Kpid[0].pulse);
 8000c84:	4b48      	ldr	r3, [pc, #288]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000c86:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8000c8a:	4b4f      	ldr	r3, [pc, #316]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c92:	ee17 2a90 	vmov	r2, s15
 8000c96:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(FL_PWM_TIMMER, FL_PWM_CHANNEL, Kpid[1].pulse);
 8000c98:	4b43      	ldr	r3, [pc, #268]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000c9a:	ed93 7b34 	vldr	d7, [r3, #208]	; 0xd0
 8000c9e:	4b4a      	ldr	r3, [pc, #296]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ca6:	ee17 2a90 	vmov	r2, s15
 8000caa:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(BL_PWM_TIMMER, BL_PWM_CHANNEL, Kpid[2].pulse);
 8000cac:	4b3e      	ldr	r3, [pc, #248]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000cae:	ed93 7b50 	vldr	d7, [r3, #320]	; 0x140
 8000cb2:	4b46      	ldr	r3, [pc, #280]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x344>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000cba:	ee17 2a90 	vmov	r2, s15
 8000cbe:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(BR_PWM_TIMMER, BR_PWM_CHANNEL, Kpid[3].pulse);
 8000cc0:	4b39      	ldr	r3, [pc, #228]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000cc2:	ed93 7b6c 	vldr	d7, [r3, #432]	; 0x1b0
 8000cc6:	4b41      	ldr	r3, [pc, #260]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x344>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000cce:	ee17 2a90 	vmov	r2, s15
 8000cd2:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(FR_INA_PORT, FR_INA_PIN, GPIO_PIN_RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cda:	483d      	ldr	r0, [pc, #244]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000cdc:	f008 fe76 	bl	80099cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FR_INB_PORT, FR_INB_PIN, GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ce6:	483a      	ldr	r0, [pc, #232]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000ce8:	f008 fe70 	bl	80099cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FL_INA_PORT, FL_INA_PIN, GPIO_PIN_RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cf2:	4838      	ldr	r0, [pc, #224]	; (8000dd4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8000cf4:	f008 fe6a 	bl	80099cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FL_INB_PORT, FL_INB_PIN, GPIO_PIN_RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cfe:	4835      	ldr	r0, [pc, #212]	; (8000dd4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8000d00:	f008 fe64 	bl	80099cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BL_INA_PORT, BL_INA_PIN, GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2104      	movs	r1, #4
 8000d08:	4833      	ldr	r0, [pc, #204]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8000d0a:	f008 fe5f 	bl	80099cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BL_INB_PORT, BL_INB_PIN, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2108      	movs	r1, #8
 8000d12:	4831      	ldr	r0, [pc, #196]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8000d14:	f008 fe5a 	bl	80099cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BR_INA_PORT, BR_INA_PIN, GPIO_PIN_RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d1e:	482f      	ldr	r0, [pc, #188]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x354>)
 8000d20:	f008 fe54 	bl	80099cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BR_INB_PORT, BR_INB_PIN, GPIO_PIN_RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2110      	movs	r1, #16
 8000d28:	482b      	ldr	r0, [pc, #172]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8000d2a:	f008 fe4f 	bl	80099cc <HAL_GPIO_WritePin>
		if (Kpid[0].u >= 0)HAL_GPIO_WritePin(FR_INA_PORT, FR_INA_PIN, GPIO_PIN_SET);
 8000d2e:	4b1e      	ldr	r3, [pc, #120]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000d30:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8000d34:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d3c:	db06      	blt.n	8000d4c <HAL_TIM_PeriodElapsedCallback+0x2c4>
 8000d3e:	2201      	movs	r2, #1
 8000d40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d44:	4822      	ldr	r0, [pc, #136]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000d46:	f008 fe41 	bl	80099cc <HAL_GPIO_WritePin>
 8000d4a:	e00d      	b.n	8000d68 <HAL_TIM_PeriodElapsedCallback+0x2e0>
		else if (Kpid[0].u < 0)HAL_GPIO_WritePin(FR_INB_PORT, FR_INB_PIN, GPIO_PIN_SET);
 8000d4c:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000d4e:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8000d52:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d5a:	d505      	bpl.n	8000d68 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d62:	481b      	ldr	r0, [pc, #108]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000d64:	f008 fe32 	bl	80099cc <HAL_GPIO_WritePin>
		if (Kpid[1].u >= 0)HAL_GPIO_WritePin(FL_INA_PORT, FL_INA_PIN, GPIO_PIN_SET);
 8000d68:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000d6a:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8000d6e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d76:	db33      	blt.n	8000de0 <HAL_TIM_PeriodElapsedCallback+0x358>
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d7e:	4815      	ldr	r0, [pc, #84]	; (8000dd4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8000d80:	f008 fe24 	bl	80099cc <HAL_GPIO_WritePin>
 8000d84:	e03a      	b.n	8000dfc <HAL_TIM_PeriodElapsedCallback+0x374>
 8000d86:	bf00      	nop
 8000d88:	54cadf99 	.word	0x54cadf99
 8000d8c:	401921fb 	.word	0x401921fb
 8000d90:	40010000 	.word	0x40010000
 8000d94:	24000990 	.word	0x24000990
 8000d98:	24000048 	.word	0x24000048
 8000d9c:	24000988 	.word	0x24000988
 8000da0:	24000998 	.word	0x24000998
 8000da4:	24000040 	.word	0x24000040
 8000da8:	240000f8 	.word	0x240000f8
 8000dac:	24000504 	.word	0x24000504
 8000db0:	240005e8 	.word	0x240005e8
 8000db4:	24000550 	.word	0x24000550
 8000db8:	2400059c 	.word	0x2400059c
 8000dbc:	240009a0 	.word	0x240009a0
 8000dc0:	240009a8 	.word	0x240009a8
 8000dc4:	240009b0 	.word	0x240009b0
 8000dc8:	24000680 	.word	0x24000680
 8000dcc:	240006cc 	.word	0x240006cc
 8000dd0:	58020c00 	.word	0x58020c00
 8000dd4:	58020400 	.word	0x58020400
 8000dd8:	58021000 	.word	0x58021000
 8000ddc:	58020800 	.word	0x58020800
		else if (Kpid[1].u < 0)HAL_GPIO_WritePin(FL_INB_PORT, FL_INB_PIN, GPIO_PIN_SET);
 8000de0:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8000de2:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8000de6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dee:	d505      	bpl.n	8000dfc <HAL_TIM_PeriodElapsedCallback+0x374>
 8000df0:	2201      	movs	r2, #1
 8000df2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000df6:	4817      	ldr	r0, [pc, #92]	; (8000e54 <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8000df8:	f008 fde8 	bl	80099cc <HAL_GPIO_WritePin>
		if (Kpid[2].u >= 0)HAL_GPIO_WritePin(BL_INA_PORT, BL_INA_PIN, GPIO_PIN_SET);
 8000dfc:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8000dfe:	ed93 7b48 	vldr	d7, [r3, #288]	; 0x120
 8000e02:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e0a:	db05      	blt.n	8000e18 <HAL_TIM_PeriodElapsedCallback+0x390>
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	2104      	movs	r1, #4
 8000e10:	4811      	ldr	r0, [pc, #68]	; (8000e58 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 8000e12:	f008 fddb 	bl	80099cc <HAL_GPIO_WritePin>
 8000e16:	e00c      	b.n	8000e32 <HAL_TIM_PeriodElapsedCallback+0x3aa>
		else if (Kpid[2].u < 0)HAL_GPIO_WritePin(BL_INB_PORT, BL_INB_PIN, GPIO_PIN_SET);
 8000e18:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8000e1a:	ed93 7b48 	vldr	d7, [r3, #288]	; 0x120
 8000e1e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e26:	d504      	bpl.n	8000e32 <HAL_TIM_PeriodElapsedCallback+0x3aa>
 8000e28:	2201      	movs	r2, #1
 8000e2a:	2108      	movs	r1, #8
 8000e2c:	480a      	ldr	r0, [pc, #40]	; (8000e58 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 8000e2e:	f008 fdcd 	bl	80099cc <HAL_GPIO_WritePin>
		if (Kpid[3].u >= 0)HAL_GPIO_WritePin(BR_INA_PORT, BR_INA_PIN, GPIO_PIN_SET);
 8000e32:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8000e34:	ed93 7b64 	vldr	d7, [r3, #400]	; 0x190
 8000e38:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e40:	db0e      	blt.n	8000e60 <HAL_TIM_PeriodElapsedCallback+0x3d8>
 8000e42:	2201      	movs	r2, #1
 8000e44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e48:	4804      	ldr	r0, [pc, #16]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 8000e4a:	f008 fdbf 	bl	80099cc <HAL_GPIO_WritePin>
 8000e4e:	e014      	b.n	8000e7a <HAL_TIM_PeriodElapsedCallback+0x3f2>
 8000e50:	240000f8 	.word	0x240000f8
 8000e54:	58020400 	.word	0x58020400
 8000e58:	58021000 	.word	0x58021000
 8000e5c:	58020800 	.word	0x58020800
		else if (Kpid[3].u < 0)HAL_GPIO_WritePin(BR_INB_PORT, BR_INB_PIN, GPIO_PIN_SET);
 8000e60:	4bb3      	ldr	r3, [pc, #716]	; (8001130 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8000e62:	ed93 7b64 	vldr	d7, [r3, #400]	; 0x190
 8000e66:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e6e:	d504      	bpl.n	8000e7a <HAL_TIM_PeriodElapsedCallback+0x3f2>
 8000e70:	2201      	movs	r2, #1
 8000e72:	2110      	movs	r1, #16
 8000e74:	48af      	ldr	r0, [pc, #700]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8000e76:	f008 fda9 	bl	80099cc <HAL_GPIO_WritePin>
	}

	if(htim->Instance == TIM8){
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4aae      	ldr	r2, [pc, #696]	; (8001138 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	f040 8137 	bne.w	80010f4 <HAL_TIM_PeriodElapsedCallback+0x66c>
		t++;
 8000e86:	4bad      	ldr	r3, [pc, #692]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	4aab      	ldr	r2, [pc, #684]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8000e8e:	6013      	str	r3, [r2, #0]
		if(t%100 == 19){
 8000e90:	4baa      	ldr	r3, [pc, #680]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4baa      	ldr	r3, [pc, #680]	; (8001140 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8000e96:	fb83 1302 	smull	r1, r3, r3, r2
 8000e9a:	1159      	asrs	r1, r3, #5
 8000e9c:	17d3      	asrs	r3, r2, #31
 8000e9e:	1acb      	subs	r3, r1, r3
 8000ea0:	2164      	movs	r1, #100	; 0x64
 8000ea2:	fb01 f303 	mul.w	r3, r1, r3
 8000ea6:	1ad3      	subs	r3, r2, r3
 8000ea8:	2b13      	cmp	r3, #19
 8000eaa:	d101      	bne.n	8000eb0 <HAL_TIM_PeriodElapsedCallback+0x428>
			pub();
 8000eac:	f003 f83e 	bl	8003f2c <_Z3pubv>
		}
		/*pusher down*/
		pusher_A.distence();
 8000eb0:	48a4      	ldr	r0, [pc, #656]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8000eb2:	f001 f937 	bl	8002124 <_ZN6PUSHER8distenceEv>
		pusher_B.distence();
 8000eb6:	48a4      	ldr	r0, [pc, #656]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8000eb8:	f001 f934 	bl	8002124 <_ZN6PUSHER8distenceEv>
		if(pusher_A.d > 0){
 8000ebc:	4ba1      	ldr	r3, [pc, #644]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8000ebe:	ed93 7b04 	vldr	d7, [r3, #16]
 8000ec2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eca:	dd2f      	ble.n	8000f2c <HAL_TIM_PeriodElapsedCallback+0x4a4>
			pusher_A.count++;
 8000ecc:	4b9d      	ldr	r3, [pc, #628]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	4a9c      	ldr	r2, [pc, #624]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8000ed4:	6193      	str	r3, [r2, #24]
			HAL_GPIO_WritePin(PUSHER_A_IN1_PORT, PUSHER_A_IN1_PIN, GPIO_PIN_SET);
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000edc:	4895      	ldr	r0, [pc, #596]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8000ede:	f008 fd75 	bl	80099cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUSHER_A_IN2_PORT, PUSHER_A_IN2_PIN, GPIO_PIN_RESET);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ee8:	4892      	ldr	r0, [pc, #584]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8000eea:	f008 fd6f 	bl	80099cc <HAL_GPIO_WritePin>
			if(pusher_A.count > pusher_A.d*1000/PUSHER_SPEED){
 8000eee:	4b95      	ldr	r3, [pc, #596]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8000ef0:	699b      	ldr	r3, [r3, #24]
 8000ef2:	ee07 3a90 	vmov	s15, r3
 8000ef6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000efa:	4b92      	ldr	r3, [pc, #584]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8000efc:	ed93 7b04 	vldr	d7, [r3, #16]
 8000f00:	ed9f 5b87 	vldr	d5, [pc, #540]	; 8001120 <HAL_TIM_PeriodElapsedCallback+0x698>
 8000f04:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000f08:	ed9f 4b87 	vldr	d4, [pc, #540]	; 8001128 <HAL_TIM_PeriodElapsedCallback+0x6a0>
 8000f0c:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000f10:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f18:	dd08      	ble.n	8000f2c <HAL_TIM_PeriodElapsedCallback+0x4a4>
				pusher_A.p_state = pusher_A.state;
 8000f1a:	4b8a      	ldr	r3, [pc, #552]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8000f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f20:	4988      	ldr	r1, [pc, #544]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8000f22:	e9c1 2302 	strd	r2, r3, [r1, #8]
				pusher_A.count = 0;
 8000f26:	4b87      	ldr	r3, [pc, #540]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
			}
		}
		if(pusher_B.d > 0){
 8000f2c:	4b86      	ldr	r3, [pc, #536]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8000f2e:	ed93 7b04 	vldr	d7, [r3, #16]
 8000f32:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f3a:	dd3f      	ble.n	8000fbc <HAL_TIM_PeriodElapsedCallback+0x534>
			pusher_B.count++;
 8000f3c:	4b82      	ldr	r3, [pc, #520]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	3301      	adds	r3, #1
 8000f42:	4a81      	ldr	r2, [pc, #516]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8000f44:	6193      	str	r3, [r2, #24]
			HAL_GPIO_WritePin(PUSHER_B_IN1_PORT, PUSHER_B_IN1_PIN, GPIO_PIN_SET);
 8000f46:	2201      	movs	r2, #1
 8000f48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f4c:	4879      	ldr	r0, [pc, #484]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8000f4e:	f008 fd3d 	bl	80099cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUSHER_B_IN2_PORT, PUSHER_B_IN2_PIN, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f58:	4876      	ldr	r0, [pc, #472]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8000f5a:	f008 fd37 	bl	80099cc <HAL_GPIO_WritePin>
			if(pusher_B.count > pusher_B.d*1000/PUSHER_SPEED){
 8000f5e:	4b7a      	ldr	r3, [pc, #488]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	ee07 3a90 	vmov	s15, r3
 8000f66:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000f6a:	4b77      	ldr	r3, [pc, #476]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8000f6c:	ed93 7b04 	vldr	d7, [r3, #16]
 8000f70:	ed9f 5b6b 	vldr	d5, [pc, #428]	; 8001120 <HAL_TIM_PeriodElapsedCallback+0x698>
 8000f74:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000f78:	ed9f 4b6b 	vldr	d4, [pc, #428]	; 8001128 <HAL_TIM_PeriodElapsedCallback+0x6a0>
 8000f7c:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000f80:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f88:	dd18      	ble.n	8000fbc <HAL_TIM_PeriodElapsedCallback+0x534>
				pusher_B.p_state = pusher_B.state;
 8000f8a:	4b6f      	ldr	r3, [pc, #444]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8000f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f90:	496d      	ldr	r1, [pc, #436]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8000f92:	e9c1 2302 	strd	r2, r3, [r1, #8]
				pusher_B.count = 0;
 8000f96:	4b6c      	ldr	r3, [pc, #432]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
				if(delay_start_resetFIRST == 1){
 8000f9c:	4b6b      	ldr	r3, [pc, #428]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d10b      	bne.n	8000fbc <HAL_TIM_PeriodElapsedCallback+0x534>
					delay_start_reset = 1;
 8000fa4:	4b6a      	ldr	r3, [pc, #424]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	601a      	str	r2, [r3, #0]
					delay_start_resetFIRST = 0;
 8000faa:	4b68      	ldr	r3, [pc, #416]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
					pusher_B.state = 15;
 8000fb0:	4965      	ldr	r1, [pc, #404]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	4b67      	ldr	r3, [pc, #412]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8000fb8:	e9c1 2300 	strd	r2, r3, [r1]
//				pusher_D.p_state = pusher_D.state;
//				pusher_D.count = 0;
//			}
//		}
		/*pusher up*/
		if(pusher_A.d < 0){
 8000fbc:	4b61      	ldr	r3, [pc, #388]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8000fbe:	ed93 7b04 	vldr	d7, [r3, #16]
 8000fc2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fca:	d531      	bpl.n	8001030 <HAL_TIM_PeriodElapsedCallback+0x5a8>
			pusher_A.count++;
 8000fcc:	4b5d      	ldr	r3, [pc, #372]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	4a5c      	ldr	r2, [pc, #368]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8000fd4:	6193      	str	r3, [r2, #24]
			HAL_GPIO_WritePin(PUSHER_A_IN1_PORT, PUSHER_A_IN1_PIN, GPIO_PIN_RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fdc:	4855      	ldr	r0, [pc, #340]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8000fde:	f008 fcf5 	bl	80099cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUSHER_A_IN2_PORT, PUSHER_A_IN2_PIN, GPIO_PIN_SET);
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fe8:	4852      	ldr	r0, [pc, #328]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8000fea:	f008 fcef 	bl	80099cc <HAL_GPIO_WritePin>
			if(pusher_A.count > -pusher_A.d*1000/PUSHER_SPEED){
 8000fee:	4b55      	ldr	r3, [pc, #340]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	ee07 3a90 	vmov	s15, r3
 8000ff6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000ffa:	4b52      	ldr	r3, [pc, #328]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8000ffc:	ed93 7b04 	vldr	d7, [r3, #16]
 8001000:	eeb1 7b47 	vneg.f64	d7, d7
 8001004:	ed9f 5b46 	vldr	d5, [pc, #280]	; 8001120 <HAL_TIM_PeriodElapsedCallback+0x698>
 8001008:	ee27 5b05 	vmul.f64	d5, d7, d5
 800100c:	ed9f 4b46 	vldr	d4, [pc, #280]	; 8001128 <HAL_TIM_PeriodElapsedCallback+0x6a0>
 8001010:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8001014:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800101c:	dd08      	ble.n	8001030 <HAL_TIM_PeriodElapsedCallback+0x5a8>
				pusher_A.p_state = pusher_A.state;
 800101e:	4b49      	ldr	r3, [pc, #292]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8001020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001024:	4947      	ldr	r1, [pc, #284]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8001026:	e9c1 2302 	strd	r2, r3, [r1, #8]
				pusher_A.count = 0;
 800102a:	4b46      	ldr	r3, [pc, #280]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]
			}
		}
		if(pusher_B.d < 0){
 8001030:	4b45      	ldr	r3, [pc, #276]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8001032:	ed93 7b04 	vldr	d7, [r3, #16]
 8001036:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800103a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800103e:	d531      	bpl.n	80010a4 <HAL_TIM_PeriodElapsedCallback+0x61c>
			pusher_B.count++;
 8001040:	4b41      	ldr	r3, [pc, #260]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	3301      	adds	r3, #1
 8001046:	4a40      	ldr	r2, [pc, #256]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8001048:	6193      	str	r3, [r2, #24]
			HAL_GPIO_WritePin(PUSHER_B_IN1_PORT, PUSHER_B_IN1_PIN, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001050:	4838      	ldr	r0, [pc, #224]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8001052:	f008 fcbb 	bl	80099cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUSHER_B_IN2_PORT, PUSHER_B_IN2_PIN, GPIO_PIN_SET);
 8001056:	2201      	movs	r2, #1
 8001058:	f44f 7180 	mov.w	r1, #256	; 0x100
 800105c:	4835      	ldr	r0, [pc, #212]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 800105e:	f008 fcb5 	bl	80099cc <HAL_GPIO_WritePin>
			if(pusher_B.count > -pusher_B.d*1000/PUSHER_SPEED){
 8001062:	4b39      	ldr	r3, [pc, #228]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	ee07 3a90 	vmov	s15, r3
 800106a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800106e:	4b36      	ldr	r3, [pc, #216]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8001070:	ed93 7b04 	vldr	d7, [r3, #16]
 8001074:	eeb1 7b47 	vneg.f64	d7, d7
 8001078:	ed9f 5b29 	vldr	d5, [pc, #164]	; 8001120 <HAL_TIM_PeriodElapsedCallback+0x698>
 800107c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001080:	ed9f 4b29 	vldr	d4, [pc, #164]	; 8001128 <HAL_TIM_PeriodElapsedCallback+0x6a0>
 8001084:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8001088:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800108c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001090:	dd08      	ble.n	80010a4 <HAL_TIM_PeriodElapsedCallback+0x61c>
				pusher_B.p_state = pusher_B.state;
 8001092:	4b2d      	ldr	r3, [pc, #180]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8001094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001098:	492b      	ldr	r1, [pc, #172]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 800109a:	e9c1 2302 	strd	r2, r3, [r1, #8]
				pusher_B.count = 0;
 800109e:	4b2a      	ldr	r3, [pc, #168]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
//				pusher_D.p_state = pusher_D.state;
//				pusher_D.count = 0;
//			}
//		}
		/*pusher stop*/
		if(pusher_A.d == 0){
 80010a4:	4b27      	ldr	r3, [pc, #156]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 80010a6:	ed93 7b04 	vldr	d7, [r3, #16]
 80010aa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80010ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b2:	d10b      	bne.n	80010cc <HAL_TIM_PeriodElapsedCallback+0x644>
			HAL_GPIO_WritePin(PUSHER_A_IN1_PORT, PUSHER_A_IN1_PIN, GPIO_PIN_RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ba:	481e      	ldr	r0, [pc, #120]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 80010bc:	f008 fc86 	bl	80099cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUSHER_A_IN2_PORT, PUSHER_A_IN2_PIN, GPIO_PIN_RESET);
 80010c0:	2200      	movs	r2, #0
 80010c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010c6:	481b      	ldr	r0, [pc, #108]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 80010c8:	f008 fc80 	bl	80099cc <HAL_GPIO_WritePin>
		}
		if(pusher_B.d == 0){
 80010cc:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 80010ce:	ed93 7b04 	vldr	d7, [r3, #16]
 80010d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80010d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010da:	d10b      	bne.n	80010f4 <HAL_TIM_PeriodElapsedCallback+0x66c>
			HAL_GPIO_WritePin(PUSHER_B_IN1_PORT, PUSHER_B_IN1_PIN, GPIO_PIN_RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010e2:	4814      	ldr	r0, [pc, #80]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 80010e4:	f008 fc72 	bl	80099cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUSHER_B_IN2_PORT, PUSHER_B_IN2_PIN, GPIO_PIN_RESET);
 80010e8:	2200      	movs	r2, #0
 80010ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ee:	4811      	ldr	r0, [pc, #68]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 80010f0:	f008 fc6c 	bl	80099cc <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(PUSHER_D_IN1_PORT, PUSHER_D_IN1_PIN, GPIO_PIN_RESET);
//			HAL_GPIO_WritePin(PUSHER_D_IN2_PORT, PUSHER_D_IN2_PIN, GPIO_PIN_RESET);
//		}
//
	}
	if(htim->Instance == TIM23){/*for script*/
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a17      	ldr	r2, [pc, #92]	; (8001158 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d17b      	bne.n	80011f6 <HAL_TIM_PeriodElapsedCallback+0x76e>
		if(delay_start!=0){
 80010fe:	4b17      	ldr	r3, [pc, #92]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d004      	beq.n	8001110 <HAL_TIM_PeriodElapsedCallback+0x688>
			delay++;
 8001106:	4b16      	ldr	r3, [pc, #88]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	3301      	adds	r3, #1
 800110c:	4a14      	ldr	r2, [pc, #80]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 800110e:	6013      	str	r3, [r2, #0]
		}
		if(delay_start_2!=0){
 8001110:	4b14      	ldr	r3, [pc, #80]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d02c      	beq.n	8001172 <HAL_TIM_PeriodElapsedCallback+0x6ea>
			delay_2++;
 8001118:	4b13      	ldr	r3, [pc, #76]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	e026      	b.n	800116c <HAL_TIM_PeriodElapsedCallback+0x6e4>
 800111e:	bf00      	nop
 8001120:	00000000 	.word	0x00000000
 8001124:	408f4000 	.word	0x408f4000
 8001128:	cccccccd 	.word	0xcccccccd
 800112c:	4040cccc 	.word	0x4040cccc
 8001130:	240000f8 	.word	0x240000f8
 8001134:	58021000 	.word	0x58021000
 8001138:	40010400 	.word	0x40010400
 800113c:	240002d0 	.word	0x240002d0
 8001140:	51eb851f 	.word	0x51eb851f
 8001144:	240009c0 	.word	0x240009c0
 8001148:	240009e0 	.word	0x240009e0
 800114c:	24000050 	.word	0x24000050
 8001150:	240002c8 	.word	0x240002c8
 8001154:	402e0000 	.word	0x402e0000
 8001158:	4000e000 	.word	0x4000e000
 800115c:	240002b8 	.word	0x240002b8
 8001160:	240002bc 	.word	0x240002bc
 8001164:	240002c0 	.word	0x240002c0
 8001168:	240002c4 	.word	0x240002c4
 800116c:	3301      	adds	r3, #1
 800116e:	4a24      	ldr	r2, [pc, #144]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x778>)
 8001170:	6013      	str	r3, [r2, #0]
		}
		if(delay_start_reset!=0){
 8001172:	4b24      	ldr	r3, [pc, #144]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x77c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d004      	beq.n	8001184 <HAL_TIM_PeriodElapsedCallback+0x6fc>
			delay_reset++;
 800117a:	4b23      	ldr	r3, [pc, #140]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x780>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	3301      	adds	r3, #1
 8001180:	4a21      	ldr	r2, [pc, #132]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x780>)
 8001182:	6013      	str	r3, [r2, #0]
		}


		if(delay_start_reset ==1 && delay_reset > 0){
 8001184:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x77c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d10c      	bne.n	80011a6 <HAL_TIM_PeriodElapsedCallback+0x71e>
 800118c:	4b1e      	ldr	r3, [pc, #120]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x780>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	dd08      	ble.n	80011a6 <HAL_TIM_PeriodElapsedCallback+0x71e>
			script_pusher(-14,15);
 8001194:	eeb2 1b0e 	vmov.f64	d1, #46	; 0x41700000  15.0
 8001198:	eeba 0b0c 	vmov.f64	d0, #172	; 0xc1600000 -14.0
 800119c:	f000 ffa6 	bl	80020ec <_Z13script_pusherdd>
			delay_start_reset =2;
 80011a0:	4b18      	ldr	r3, [pc, #96]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x77c>)
 80011a2:	2202      	movs	r2, #2
 80011a4:	601a      	str	r2, [r3, #0]
		}
		if(delay_start_reset == 2 && delay_reset == 200){
 80011a6:	4b17      	ldr	r3, [pc, #92]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x77c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d123      	bne.n	80011f6 <HAL_TIM_PeriodElapsedCallback+0x76e>
 80011ae:	4b16      	ldr	r3, [pc, #88]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x780>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2bc8      	cmp	r3, #200	; 0xc8
 80011b4:	d11f      	bne.n	80011f6 <HAL_TIM_PeriodElapsedCallback+0x76e>
			pusher_A.state = 0;
 80011b6:	4915      	ldr	r1, [pc, #84]	; (800120c <HAL_TIM_PeriodElapsedCallback+0x784>)
 80011b8:	f04f 0200 	mov.w	r2, #0
 80011bc:	f04f 0300 	mov.w	r3, #0
 80011c0:	e9c1 2300 	strd	r2, r3, [r1]
			pusher_A.p_state = 0;
 80011c4:	4911      	ldr	r1, [pc, #68]	; (800120c <HAL_TIM_PeriodElapsedCallback+0x784>)
 80011c6:	f04f 0200 	mov.w	r2, #0
 80011ca:	f04f 0300 	mov.w	r3, #0
 80011ce:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pusher_B.state = 12 ;
 80011d2:	490f      	ldr	r1, [pc, #60]	; (8001210 <HAL_TIM_PeriodElapsedCallback+0x788>)
 80011d4:	f04f 0200 	mov.w	r2, #0
 80011d8:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <HAL_TIM_PeriodElapsedCallback+0x78c>)
 80011da:	e9c1 2300 	strd	r2, r3, [r1]
			pusher_B.p_state = 12;
 80011de:	490c      	ldr	r1, [pc, #48]	; (8001210 <HAL_TIM_PeriodElapsedCallback+0x788>)
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <HAL_TIM_PeriodElapsedCallback+0x78c>)
 80011e6:	e9c1 2302 	strd	r2, r3, [r1, #8]
			delay_start_reset = 0;
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x77c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
			delay_reset = 0;
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x780>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
//			script_wheel(0,0,0);
//			script_pusher(0,10,0,0);
//		}

	}
}
 80011f6:	bf00      	nop
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	240002c4 	.word	0x240002c4
 8001204:	240002c8 	.word	0x240002c8
 8001208:	240002cc 	.word	0x240002cc
 800120c:	240009c0 	.word	0x240009c0
 8001210:	240009e0 	.word	0x240009e0
 8001214:	40280000 	.word	0x40280000

08001218 <_Z13DC_motor_initv>:
DC_motor FL(15.96559764,31.71747647,0,216,512,1000);//motor_1
DC_motor BL(24.18280423,91.68881006,0,216,512,1000);//motor_2
DC_motor BR(21.19552541,50.08697147,0,216,512,1000);//motor_3
DC_motor FR(32.6189283,77.45068509,0,216,512,1000);//motor_4

void DC_motor_init(){
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
	//enc_1
	HAL_TIM_Encoder_Start_IT(&htim2,TIM_CHANNEL_1);
 800121c:	2100      	movs	r1, #0
 800121e:	4818      	ldr	r0, [pc, #96]	; (8001280 <_Z13DC_motor_initv+0x68>)
 8001220:	f00b fc48 	bl	800cab4 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim2,TIM_CHANNEL_2);
 8001224:	2104      	movs	r1, #4
 8001226:	4816      	ldr	r0, [pc, #88]	; (8001280 <_Z13DC_motor_initv+0x68>)
 8001228:	f00b fc44 	bl	800cab4 <HAL_TIM_Encoder_Start_IT>
 	HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_2);//VNH5019_1_PWM
 800122c:	2104      	movs	r1, #4
 800122e:	4815      	ldr	r0, [pc, #84]	; (8001284 <_Z13DC_motor_initv+0x6c>)
 8001230:	f00b fa7e 	bl	800c730 <HAL_TIM_PWM_Start>
 	//enc_2
 	HAL_TIM_Encoder_Start_IT(&htim5,TIM_CHANNEL_1);
 8001234:	2100      	movs	r1, #0
 8001236:	4814      	ldr	r0, [pc, #80]	; (8001288 <_Z13DC_motor_initv+0x70>)
 8001238:	f00b fc3c 	bl	800cab4 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim5,TIM_CHANNEL_2);
 800123c:	2104      	movs	r1, #4
 800123e:	4812      	ldr	r0, [pc, #72]	; (8001288 <_Z13DC_motor_initv+0x70>)
 8001240:	f00b fc38 	bl	800cab4 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_1);//VNH5019_2_PWM
 8001244:	2100      	movs	r1, #0
 8001246:	480f      	ldr	r0, [pc, #60]	; (8001284 <_Z13DC_motor_initv+0x6c>)
 8001248:	f00b fa72 	bl	800c730 <HAL_TIM_PWM_Start>
	//enc_3
	HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_1);
 800124c:	2100      	movs	r1, #0
 800124e:	480f      	ldr	r0, [pc, #60]	; (800128c <_Z13DC_motor_initv+0x74>)
 8001250:	f00b fc30 	bl	800cab4 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_2);
 8001254:	2104      	movs	r1, #4
 8001256:	480d      	ldr	r0, [pc, #52]	; (800128c <_Z13DC_motor_initv+0x74>)
 8001258:	f00b fc2c 	bl	800cab4 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(&htim15,TIM_CHANNEL_1);//VNH5019_3_PWM
 800125c:	2100      	movs	r1, #0
 800125e:	480c      	ldr	r0, [pc, #48]	; (8001290 <_Z13DC_motor_initv+0x78>)
 8001260:	f00b fa66 	bl	800c730 <HAL_TIM_PWM_Start>
	//enc_4
	HAL_TIM_Encoder_Start_IT(&htim4,TIM_CHANNEL_1);
 8001264:	2100      	movs	r1, #0
 8001266:	480b      	ldr	r0, [pc, #44]	; (8001294 <_Z13DC_motor_initv+0x7c>)
 8001268:	f00b fc24 	bl	800cab4 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim4,TIM_CHANNEL_2);
 800126c:	2104      	movs	r1, #4
 800126e:	4809      	ldr	r0, [pc, #36]	; (8001294 <_Z13DC_motor_initv+0x7c>)
 8001270:	f00b fc20 	bl	800cab4 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(&htim15,TIM_CHANNEL_2);//VNH5019_4_PWM
 8001274:	2104      	movs	r1, #4
 8001276:	4806      	ldr	r0, [pc, #24]	; (8001290 <_Z13DC_motor_initv+0x78>)
 8001278:	f00b fa5a 	bl	800c730 <HAL_TIM_PWM_Start>
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	24000504 	.word	0x24000504
 8001284:	24000680 	.word	0x24000680
 8001288:	240005e8 	.word	0x240005e8
 800128c:	24000550 	.word	0x24000550
 8001290:	240006cc 	.word	0x240006cc
 8001294:	2400059c 	.word	0x2400059c

08001298 <_ZN8DC_motorC1Edddddd>:

//motor Instance
DC_motor::DC_motor(double p, double i, double d, double ratio, double res, double PWM_span){
 8001298:	b480      	push	{r7}
 800129a:	b08f      	sub	sp, #60	; 0x3c
 800129c:	af00      	add	r7, sp, #0
 800129e:	6378      	str	r0, [r7, #52]	; 0x34
 80012a0:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 80012a4:	ed87 1b08 	vstr	d1, [r7, #32]
 80012a8:	ed87 2b06 	vstr	d2, [r7, #24]
 80012ac:	ed87 3b04 	vstr	d3, [r7, #16]
 80012b0:	ed87 4b02 	vstr	d4, [r7, #8]
 80012b4:	ed87 5b00 	vstr	d5, [r7]
 80012b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80012ba:	f04f 0200 	mov.w	r2, #0
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80012c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	f04f 0300 	mov.w	r3, #0
 80012d0:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80012d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80012d6:	f04f 0200 	mov.w	r2, #0
 80012da:	f04f 0300 	mov.w	r3, #0
 80012de:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 80012e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80012e4:	f04f 0200 	mov.w	r2, #0
 80012e8:	f04f 0300 	mov.w	r3, #0
 80012ec:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	this->kp = p;
 80012f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80012f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80012f6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	this->ki = i;
 80012fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80012fc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001300:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	this->kd = d;
 8001304:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001306:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800130a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	this->reduction_ratio = ratio;
 800130e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001310:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001314:	e9c1 2302 	strd	r2, r3, [r1, #8]
	this->resolution = res;
 8001318:	ed97 7b02 	vldr	d7, [r7, #8]
 800131c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001320:	ee17 2a90 	vmov	r2, s15
 8001324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001326:	601a      	str	r2, [r3, #0]
	this->ARR = PWM_span;
 8001328:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800132a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800132e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8001332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001334:	4618      	mov	r0, r3
 8001336:	373c      	adds	r7, #60	; 0x3c
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <_Z41__static_initialization_and_destruction_0ii>:
	u = kp * error + ki * integral + kd * differential;
	if (u > 1) u = 1;
	else if (u < -1) u = -1;

	return (int) u*ARR;
}
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d140      	bne.n	80013d2 <_Z41__static_initialization_and_destruction_0ii+0x92>
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001356:	4293      	cmp	r3, r2
 8001358:	d13b      	bne.n	80013d2 <_Z41__static_initialization_and_destruction_0ii+0x92>
DC_motor FL(15.96559764,31.71747647,0,216,512,1000);//motor_1
 800135a:	ed9f 5b21 	vldr	d5, [pc, #132]	; 80013e0 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 800135e:	ed9f 4b22 	vldr	d4, [pc, #136]	; 80013e8 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 8001362:	ed9f 3b23 	vldr	d3, [pc, #140]	; 80013f0 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 8001366:	ed9f 2b24 	vldr	d2, [pc, #144]	; 80013f8 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 800136a:	ed9f 1b25 	vldr	d1, [pc, #148]	; 8001400 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 800136e:	ed9f 0b26 	vldr	d0, [pc, #152]	; 8001408 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 8001372:	4833      	ldr	r0, [pc, #204]	; (8001440 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8001374:	f7ff ff90 	bl	8001298 <_ZN8DC_motorC1Edddddd>
DC_motor BL(24.18280423,91.68881006,0,216,512,1000);//motor_2
 8001378:	ed9f 5b19 	vldr	d5, [pc, #100]	; 80013e0 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 800137c:	ed9f 4b1a 	vldr	d4, [pc, #104]	; 80013e8 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 8001380:	ed9f 3b1b 	vldr	d3, [pc, #108]	; 80013f0 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 8001384:	ed9f 2b1c 	vldr	d2, [pc, #112]	; 80013f8 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 8001388:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8001410 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 800138c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8001418 <_Z41__static_initialization_and_destruction_0ii+0xd8>
 8001390:	482c      	ldr	r0, [pc, #176]	; (8001444 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8001392:	f7ff ff81 	bl	8001298 <_ZN8DC_motorC1Edddddd>
DC_motor BR(21.19552541,50.08697147,0,216,512,1000);//motor_3
 8001396:	ed9f 5b12 	vldr	d5, [pc, #72]	; 80013e0 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 800139a:	ed9f 4b13 	vldr	d4, [pc, #76]	; 80013e8 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 800139e:	ed9f 3b14 	vldr	d3, [pc, #80]	; 80013f0 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 80013a2:	ed9f 2b15 	vldr	d2, [pc, #84]	; 80013f8 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 80013a6:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 8001420 <_Z41__static_initialization_and_destruction_0ii+0xe0>
 80013aa:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8001428 <_Z41__static_initialization_and_destruction_0ii+0xe8>
 80013ae:	4826      	ldr	r0, [pc, #152]	; (8001448 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 80013b0:	f7ff ff72 	bl	8001298 <_ZN8DC_motorC1Edddddd>
DC_motor FR(32.6189283,77.45068509,0,216,512,1000);//motor_4
 80013b4:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 80013e0 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 80013b8:	ed9f 4b0b 	vldr	d4, [pc, #44]	; 80013e8 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 80013bc:	ed9f 3b0c 	vldr	d3, [pc, #48]	; 80013f0 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 80013c0:	ed9f 2b0d 	vldr	d2, [pc, #52]	; 80013f8 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 80013c4:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8001430 <_Z41__static_initialization_and_destruction_0ii+0xf0>
 80013c8:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8001438 <_Z41__static_initialization_and_destruction_0ii+0xf8>
 80013cc:	481f      	ldr	r0, [pc, #124]	; (800144c <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 80013ce:	f7ff ff63 	bl	8001298 <_ZN8DC_motorC1Edddddd>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	f3af 8000 	nop.w
 80013e0:	00000000 	.word	0x00000000
 80013e4:	408f4000 	.word	0x408f4000
 80013e8:	00000000 	.word	0x00000000
 80013ec:	40800000 	.word	0x40800000
 80013f0:	00000000 	.word	0x00000000
 80013f4:	406b0000 	.word	0x406b0000
	...
 8001400:	89b64cae 	.word	0x89b64cae
 8001404:	403fb7ac 	.word	0x403fb7ac
 8001408:	d059ca21 	.word	0xd059ca21
 800140c:	402fee62 	.word	0x402fee62
 8001410:	76ca36c5 	.word	0x76ca36c5
 8001414:	4056ec15 	.word	0x4056ec15
 8001418:	420d6ba3 	.word	0x420d6ba3
 800141c:	40382ecc 	.word	0x40382ecc
 8001420:	e191aae3 	.word	0xe191aae3
 8001424:	40490b21 	.word	0x40490b21
 8001428:	f4097cab 	.word	0xf4097cab
 800142c:	4035320d 	.word	0x4035320d
 8001430:	06469611 	.word	0x06469611
 8001434:	40535cd8 	.word	0x40535cd8
 8001438:	0ae388d1 	.word	0x0ae388d1
 800143c:	40404f39 	.word	0x40404f39
 8001440:	240002d8 	.word	0x240002d8
 8001444:	24000350 	.word	0x24000350
 8001448:	240003c8 	.word	0x240003c8
 800144c:	24000440 	.word	0x24000440

08001450 <_GLOBAL__sub_I_FL>:
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
 8001454:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001458:	2001      	movs	r0, #1
 800145a:	f7ff ff71 	bl	8001340 <_Z41__static_initialization_and_destruction_0ii>
 800145e:	bd80      	pop	{r7, pc}

08001460 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001464:	f004 fe46 	bl	80060f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001468:	f000 f81e 	bl	80014a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800146c:	f000 fc92 	bl	8001d94 <MX_GPIO_Init>
  MX_DMA_Init();
 8001470:	f000 fc68 	bl	8001d44 <MX_DMA_Init>
  MX_TIM3_Init();
 8001474:	f000 f930 	bl	80016d8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001478:	f000 f984 	bl	8001784 <MX_TIM4_Init>
  MX_TIM5_Init();
 800147c:	f000 f9d8 	bl	8001830 <MX_TIM5_Init>
  MX_TIM12_Init();
 8001480:	f000 fa80 	bl	8001984 <MX_TIM12_Init>
  MX_TIM15_Init();
 8001484:	f000 fae4 	bl	8001a50 <MX_TIM15_Init>
  MX_TIM1_Init();
 8001488:	f000 f87e 	bl	8001588 <MX_TIM1_Init>
  MX_TIM8_Init();
 800148c:	f000 fa26 	bl	80018dc <MX_TIM8_Init>
  MX_TIM23_Init();
 8001490:	f000 fb70 	bl	8001b74 <MX_TIM23_Init>
  MX_USART1_UART_Init();
 8001494:	f000 fbbc 	bl	8001c10 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001498:	f000 f8ca 	bl	8001630 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 800149c:	f000 fc04 	bl	8001ca8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 80014a0:	f000 fdb2 	bl	8002008 <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014a4:	e7fe      	b.n	80014a4 <main+0x44>
	...

080014a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b09c      	sub	sp, #112	; 0x70
 80014ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b2:	224c      	movs	r2, #76	; 0x4c
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f00e feb9 	bl	801022e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	2220      	movs	r2, #32
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f00e feb3 	bl	801022e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80014c8:	2002      	movs	r0, #2
 80014ca:	f008 fa99 	bl	8009a00 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80014ce:	2300      	movs	r3, #0
 80014d0:	603b      	str	r3, [r7, #0]
 80014d2:	4b2c      	ldr	r3, [pc, #176]	; (8001584 <SystemClock_Config+0xdc>)
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014da:	4a2a      	ldr	r2, [pc, #168]	; (8001584 <SystemClock_Config+0xdc>)
 80014dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e0:	6193      	str	r3, [r2, #24]
 80014e2:	4b28      	ldr	r3, [pc, #160]	; (8001584 <SystemClock_Config+0xdc>)
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80014ee:	bf00      	nop
 80014f0:	4b24      	ldr	r3, [pc, #144]	; (8001584 <SystemClock_Config+0xdc>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014fc:	d1f8      	bne.n	80014f0 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014fe:	2301      	movs	r3, #1
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001502:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001506:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001508:	2302      	movs	r3, #2
 800150a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800150c:	2302      	movs	r3, #2
 800150e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001510:	2301      	movs	r3, #1
 8001512:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 42;
 8001514:	232a      	movs	r3, #42	; 0x2a
 8001516:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001518:	2302      	movs	r3, #2
 800151a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800151c:	2302      	movs	r3, #2
 800151e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001520:	2302      	movs	r3, #2
 8001522:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001524:	230c      	movs	r3, #12
 8001526:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001528:	2300      	movs	r3, #0
 800152a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001534:	4618      	mov	r0, r3
 8001536:	f008 fa9d 	bl	8009a74 <HAL_RCC_OscConfig>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001540:	f000 fd3a 	bl	8001fb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001544:	233f      	movs	r3, #63	; 0x3f
 8001546:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001548:	2303      	movs	r3, #3
 800154a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001550:	2308      	movs	r3, #8
 8001552:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001554:	2340      	movs	r3, #64	; 0x40
 8001556:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001558:	2340      	movs	r3, #64	; 0x40
 800155a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800155c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001560:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001562:	2340      	movs	r3, #64	; 0x40
 8001564:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001566:	1d3b      	adds	r3, r7, #4
 8001568:	2102      	movs	r1, #2
 800156a:	4618      	mov	r0, r3
 800156c:	f008 fe5c 	bl	800a228 <HAL_RCC_ClockConfig>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001576:	f000 fd1f 	bl	8001fb8 <Error_Handler>
  }
}
 800157a:	bf00      	nop
 800157c:	3770      	adds	r7, #112	; 0x70
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	58024800 	.word	0x58024800

08001588 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b088      	sub	sp, #32
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800158e:	f107 0310 	add.w	r3, r7, #16
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015a6:	4b20      	ldr	r3, [pc, #128]	; (8001628 <MX_TIM1_Init+0xa0>)
 80015a8:	4a20      	ldr	r2, [pc, #128]	; (800162c <MX_TIM1_Init+0xa4>)
 80015aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 80015ac:	4b1e      	ldr	r3, [pc, #120]	; (8001628 <MX_TIM1_Init+0xa0>)
 80015ae:	2253      	movs	r2, #83	; 0x53
 80015b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b2:	4b1d      	ldr	r3, [pc, #116]	; (8001628 <MX_TIM1_Init+0xa0>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3999;
 80015b8:	4b1b      	ldr	r3, [pc, #108]	; (8001628 <MX_TIM1_Init+0xa0>)
 80015ba:	f640 729f 	movw	r2, #3999	; 0xf9f
 80015be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c0:	4b19      	ldr	r3, [pc, #100]	; (8001628 <MX_TIM1_Init+0xa0>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015c6:	4b18      	ldr	r3, [pc, #96]	; (8001628 <MX_TIM1_Init+0xa0>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015cc:	4b16      	ldr	r3, [pc, #88]	; (8001628 <MX_TIM1_Init+0xa0>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015d2:	4815      	ldr	r0, [pc, #84]	; (8001628 <MX_TIM1_Init+0xa0>)
 80015d4:	f00a ff76 	bl	800c4c4 <HAL_TIM_Base_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80015de:	f000 fceb 	bl	8001fb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015e8:	f107 0310 	add.w	r3, r7, #16
 80015ec:	4619      	mov	r1, r3
 80015ee:	480e      	ldr	r0, [pc, #56]	; (8001628 <MX_TIM1_Init+0xa0>)
 80015f0:	f00b fd42 	bl	800d078 <HAL_TIM_ConfigClockSource>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80015fa:	f000 fcdd 	bl	8001fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015fe:	2300      	movs	r3, #0
 8001600:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	4619      	mov	r1, r3
 800160e:	4806      	ldr	r0, [pc, #24]	; (8001628 <MX_TIM1_Init+0xa0>)
 8001610:	f00c fa92 	bl	800db38 <HAL_TIMEx_MasterConfigSynchronization>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800161a:	f000 fccd 	bl	8001fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800161e:	bf00      	nop
 8001620:	3720      	adds	r7, #32
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	240004b8 	.word	0x240004b8
 800162c:	40010000 	.word	0x40010000

08001630 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08c      	sub	sp, #48	; 0x30
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001636:	f107 030c 	add.w	r3, r7, #12
 800163a:	2224      	movs	r2, #36	; 0x24
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f00e fdf5 	bl	801022e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001644:	463b      	mov	r3, r7
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800164e:	4b21      	ldr	r3, [pc, #132]	; (80016d4 <MX_TIM2_Init+0xa4>)
 8001650:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001654:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001656:	4b1f      	ldr	r3, [pc, #124]	; (80016d4 <MX_TIM2_Init+0xa4>)
 8001658:	2200      	movs	r2, #0
 800165a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800165c:	4b1d      	ldr	r3, [pc, #116]	; (80016d4 <MX_TIM2_Init+0xa4>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001662:	4b1c      	ldr	r3, [pc, #112]	; (80016d4 <MX_TIM2_Init+0xa4>)
 8001664:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001668:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800166a:	4b1a      	ldr	r3, [pc, #104]	; (80016d4 <MX_TIM2_Init+0xa4>)
 800166c:	2200      	movs	r2, #0
 800166e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001670:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <MX_TIM2_Init+0xa4>)
 8001672:	2200      	movs	r2, #0
 8001674:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001676:	2303      	movs	r3, #3
 8001678:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800167e:	2301      	movs	r3, #1
 8001680:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001682:	2300      	movs	r3, #0
 8001684:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800168a:	2300      	movs	r3, #0
 800168c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800168e:	2301      	movs	r3, #1
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001692:	2300      	movs	r3, #0
 8001694:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800169a:	f107 030c 	add.w	r3, r7, #12
 800169e:	4619      	mov	r1, r3
 80016a0:	480c      	ldr	r0, [pc, #48]	; (80016d4 <MX_TIM2_Init+0xa4>)
 80016a2:	f00b f961 	bl	800c968 <HAL_TIM_Encoder_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80016ac:	f000 fc84 	bl	8001fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b0:	2300      	movs	r3, #0
 80016b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016b8:	463b      	mov	r3, r7
 80016ba:	4619      	mov	r1, r3
 80016bc:	4805      	ldr	r0, [pc, #20]	; (80016d4 <MX_TIM2_Init+0xa4>)
 80016be:	f00c fa3b 	bl	800db38 <HAL_TIMEx_MasterConfigSynchronization>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80016c8:	f000 fc76 	bl	8001fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016cc:	bf00      	nop
 80016ce:	3730      	adds	r7, #48	; 0x30
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	24000504 	.word	0x24000504

080016d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08c      	sub	sp, #48	; 0x30
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016de:	f107 030c 	add.w	r3, r7, #12
 80016e2:	2224      	movs	r2, #36	; 0x24
 80016e4:	2100      	movs	r1, #0
 80016e6:	4618      	mov	r0, r3
 80016e8:	f00e fda1 	bl	801022e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ec:	463b      	mov	r3, r7
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016f6:	4b21      	ldr	r3, [pc, #132]	; (800177c <MX_TIM3_Init+0xa4>)
 80016f8:	4a21      	ldr	r2, [pc, #132]	; (8001780 <MX_TIM3_Init+0xa8>)
 80016fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016fc:	4b1f      	ldr	r3, [pc, #124]	; (800177c <MX_TIM3_Init+0xa4>)
 80016fe:	2200      	movs	r2, #0
 8001700:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001702:	4b1e      	ldr	r3, [pc, #120]	; (800177c <MX_TIM3_Init+0xa4>)
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001708:	4b1c      	ldr	r3, [pc, #112]	; (800177c <MX_TIM3_Init+0xa4>)
 800170a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800170e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001710:	4b1a      	ldr	r3, [pc, #104]	; (800177c <MX_TIM3_Init+0xa4>)
 8001712:	2200      	movs	r2, #0
 8001714:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001716:	4b19      	ldr	r3, [pc, #100]	; (800177c <MX_TIM3_Init+0xa4>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800171c:	2303      	movs	r3, #3
 800171e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001720:	2300      	movs	r3, #0
 8001722:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001724:	2301      	movs	r3, #1
 8001726:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001728:	2300      	movs	r3, #0
 800172a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001730:	2300      	movs	r3, #0
 8001732:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001734:	2301      	movs	r3, #1
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001738:	2300      	movs	r3, #0
 800173a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001740:	f107 030c 	add.w	r3, r7, #12
 8001744:	4619      	mov	r1, r3
 8001746:	480d      	ldr	r0, [pc, #52]	; (800177c <MX_TIM3_Init+0xa4>)
 8001748:	f00b f90e 	bl	800c968 <HAL_TIM_Encoder_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001752:	f000 fc31 	bl	8001fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001756:	2300      	movs	r3, #0
 8001758:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800175a:	2300      	movs	r3, #0
 800175c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800175e:	463b      	mov	r3, r7
 8001760:	4619      	mov	r1, r3
 8001762:	4806      	ldr	r0, [pc, #24]	; (800177c <MX_TIM3_Init+0xa4>)
 8001764:	f00c f9e8 	bl	800db38 <HAL_TIMEx_MasterConfigSynchronization>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800176e:	f000 fc23 	bl	8001fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001772:	bf00      	nop
 8001774:	3730      	adds	r7, #48	; 0x30
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	24000550 	.word	0x24000550
 8001780:	40000400 	.word	0x40000400

08001784 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08c      	sub	sp, #48	; 0x30
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800178a:	f107 030c 	add.w	r3, r7, #12
 800178e:	2224      	movs	r2, #36	; 0x24
 8001790:	2100      	movs	r1, #0
 8001792:	4618      	mov	r0, r3
 8001794:	f00e fd4b 	bl	801022e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001798:	463b      	mov	r3, r7
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017a2:	4b21      	ldr	r3, [pc, #132]	; (8001828 <MX_TIM4_Init+0xa4>)
 80017a4:	4a21      	ldr	r2, [pc, #132]	; (800182c <MX_TIM4_Init+0xa8>)
 80017a6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80017a8:	4b1f      	ldr	r3, [pc, #124]	; (8001828 <MX_TIM4_Init+0xa4>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ae:	4b1e      	ldr	r3, [pc, #120]	; (8001828 <MX_TIM4_Init+0xa4>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80017b4:	4b1c      	ldr	r3, [pc, #112]	; (8001828 <MX_TIM4_Init+0xa4>)
 80017b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017ba:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017bc:	4b1a      	ldr	r3, [pc, #104]	; (8001828 <MX_TIM4_Init+0xa4>)
 80017be:	2200      	movs	r2, #0
 80017c0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c2:	4b19      	ldr	r3, [pc, #100]	; (8001828 <MX_TIM4_Init+0xa4>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80017c8:	2303      	movs	r3, #3
 80017ca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017cc:	2300      	movs	r3, #0
 80017ce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017d0:	2301      	movs	r3, #1
 80017d2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017dc:	2300      	movs	r3, #0
 80017de:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017e0:	2301      	movs	r3, #1
 80017e2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017e4:	2300      	movs	r3, #0
 80017e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80017ec:	f107 030c 	add.w	r3, r7, #12
 80017f0:	4619      	mov	r1, r3
 80017f2:	480d      	ldr	r0, [pc, #52]	; (8001828 <MX_TIM4_Init+0xa4>)
 80017f4:	f00b f8b8 	bl	800c968 <HAL_TIM_Encoder_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80017fe:	f000 fbdb 	bl	8001fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001802:	2300      	movs	r3, #0
 8001804:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800180a:	463b      	mov	r3, r7
 800180c:	4619      	mov	r1, r3
 800180e:	4806      	ldr	r0, [pc, #24]	; (8001828 <MX_TIM4_Init+0xa4>)
 8001810:	f00c f992 	bl	800db38 <HAL_TIMEx_MasterConfigSynchronization>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800181a:	f000 fbcd 	bl	8001fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800181e:	bf00      	nop
 8001820:	3730      	adds	r7, #48	; 0x30
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	2400059c 	.word	0x2400059c
 800182c:	40000800 	.word	0x40000800

08001830 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08c      	sub	sp, #48	; 0x30
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001836:	f107 030c 	add.w	r3, r7, #12
 800183a:	2224      	movs	r2, #36	; 0x24
 800183c:	2100      	movs	r1, #0
 800183e:	4618      	mov	r0, r3
 8001840:	f00e fcf5 	bl	801022e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001844:	463b      	mov	r3, r7
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800184e:	4b21      	ldr	r3, [pc, #132]	; (80018d4 <MX_TIM5_Init+0xa4>)
 8001850:	4a21      	ldr	r2, [pc, #132]	; (80018d8 <MX_TIM5_Init+0xa8>)
 8001852:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001854:	4b1f      	ldr	r3, [pc, #124]	; (80018d4 <MX_TIM5_Init+0xa4>)
 8001856:	2200      	movs	r2, #0
 8001858:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185a:	4b1e      	ldr	r3, [pc, #120]	; (80018d4 <MX_TIM5_Init+0xa4>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001860:	4b1c      	ldr	r3, [pc, #112]	; (80018d4 <MX_TIM5_Init+0xa4>)
 8001862:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001866:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001868:	4b1a      	ldr	r3, [pc, #104]	; (80018d4 <MX_TIM5_Init+0xa4>)
 800186a:	2200      	movs	r2, #0
 800186c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186e:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <MX_TIM5_Init+0xa4>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001874:	2303      	movs	r3, #3
 8001876:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001878:	2300      	movs	r3, #0
 800187a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800187c:	2301      	movs	r3, #1
 800187e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001880:	2300      	movs	r3, #0
 8001882:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001888:	2300      	movs	r3, #0
 800188a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800188c:	2301      	movs	r3, #1
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001890:	2300      	movs	r3, #0
 8001892:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001898:	f107 030c 	add.w	r3, r7, #12
 800189c:	4619      	mov	r1, r3
 800189e:	480d      	ldr	r0, [pc, #52]	; (80018d4 <MX_TIM5_Init+0xa4>)
 80018a0:	f00b f862 	bl	800c968 <HAL_TIM_Encoder_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 80018aa:	f000 fb85 	bl	8001fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ae:	2300      	movs	r3, #0
 80018b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80018b6:	463b      	mov	r3, r7
 80018b8:	4619      	mov	r1, r3
 80018ba:	4806      	ldr	r0, [pc, #24]	; (80018d4 <MX_TIM5_Init+0xa4>)
 80018bc:	f00c f93c 	bl	800db38 <HAL_TIMEx_MasterConfigSynchronization>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80018c6:	f000 fb77 	bl	8001fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80018ca:	bf00      	nop
 80018cc:	3730      	adds	r7, #48	; 0x30
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	240005e8 	.word	0x240005e8
 80018d8:	40000c00 	.word	0x40000c00

080018dc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b088      	sub	sp, #32
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018e2:	f107 0310 	add.w	r3, r7, #16
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80018fa:	4b20      	ldr	r3, [pc, #128]	; (800197c <MX_TIM8_Init+0xa0>)
 80018fc:	4a20      	ldr	r2, [pc, #128]	; (8001980 <MX_TIM8_Init+0xa4>)
 80018fe:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 8001900:	4b1e      	ldr	r3, [pc, #120]	; (800197c <MX_TIM8_Init+0xa0>)
 8001902:	2253      	movs	r2, #83	; 0x53
 8001904:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001906:	4b1d      	ldr	r3, [pc, #116]	; (800197c <MX_TIM8_Init+0xa0>)
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 800190c:	4b1b      	ldr	r3, [pc, #108]	; (800197c <MX_TIM8_Init+0xa0>)
 800190e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001912:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001914:	4b19      	ldr	r3, [pc, #100]	; (800197c <MX_TIM8_Init+0xa0>)
 8001916:	2200      	movs	r2, #0
 8001918:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800191a:	4b18      	ldr	r3, [pc, #96]	; (800197c <MX_TIM8_Init+0xa0>)
 800191c:	2200      	movs	r2, #0
 800191e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001920:	4b16      	ldr	r3, [pc, #88]	; (800197c <MX_TIM8_Init+0xa0>)
 8001922:	2200      	movs	r2, #0
 8001924:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001926:	4815      	ldr	r0, [pc, #84]	; (800197c <MX_TIM8_Init+0xa0>)
 8001928:	f00a fdcc 	bl	800c4c4 <HAL_TIM_Base_Init>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001932:	f000 fb41 	bl	8001fb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001936:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800193a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800193c:	f107 0310 	add.w	r3, r7, #16
 8001940:	4619      	mov	r1, r3
 8001942:	480e      	ldr	r0, [pc, #56]	; (800197c <MX_TIM8_Init+0xa0>)
 8001944:	f00b fb98 	bl	800d078 <HAL_TIM_ConfigClockSource>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800194e:	f000 fb33 	bl	8001fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001952:	2300      	movs	r3, #0
 8001954:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001956:	2300      	movs	r3, #0
 8001958:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	4619      	mov	r1, r3
 8001962:	4806      	ldr	r0, [pc, #24]	; (800197c <MX_TIM8_Init+0xa0>)
 8001964:	f00c f8e8 	bl	800db38 <HAL_TIMEx_MasterConfigSynchronization>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800196e:	f000 fb23 	bl	8001fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001972:	bf00      	nop
 8001974:	3720      	adds	r7, #32
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	24000634 	.word	0x24000634
 8001980:	40010400 	.word	0x40010400

08001984 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08a      	sub	sp, #40	; 0x28
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800198a:	f107 031c 	add.w	r3, r7, #28
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]
 8001994:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001996:	463b      	mov	r3, r7
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]
 80019a4:	615a      	str	r2, [r3, #20]
 80019a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80019a8:	4b27      	ldr	r3, [pc, #156]	; (8001a48 <MX_TIM12_Init+0xc4>)
 80019aa:	4a28      	ldr	r2, [pc, #160]	; (8001a4c <MX_TIM12_Init+0xc8>)
 80019ac:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80019ae:	4b26      	ldr	r3, [pc, #152]	; (8001a48 <MX_TIM12_Init+0xc4>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b4:	4b24      	ldr	r3, [pc, #144]	; (8001a48 <MX_TIM12_Init+0xc4>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 80019ba:	4b23      	ldr	r3, [pc, #140]	; (8001a48 <MX_TIM12_Init+0xc4>)
 80019bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019c0:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c2:	4b21      	ldr	r3, [pc, #132]	; (8001a48 <MX_TIM12_Init+0xc4>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c8:	4b1f      	ldr	r3, [pc, #124]	; (8001a48 <MX_TIM12_Init+0xc4>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80019ce:	481e      	ldr	r0, [pc, #120]	; (8001a48 <MX_TIM12_Init+0xc4>)
 80019d0:	f00a fe56 	bl	800c680 <HAL_TIM_PWM_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 80019da:	f000 faed 	bl	8001fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 80019e6:	f107 031c 	add.w	r3, r7, #28
 80019ea:	4619      	mov	r1, r3
 80019ec:	4816      	ldr	r0, [pc, #88]	; (8001a48 <MX_TIM12_Init+0xc4>)
 80019ee:	f00c f8a3 	bl	800db38 <HAL_TIMEx_MasterConfigSynchronization>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 80019f8:	f000 fade 	bl	8001fb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019fc:	2360      	movs	r3, #96	; 0x60
 80019fe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a0c:	463b      	mov	r3, r7
 8001a0e:	2200      	movs	r2, #0
 8001a10:	4619      	mov	r1, r3
 8001a12:	480d      	ldr	r0, [pc, #52]	; (8001a48 <MX_TIM12_Init+0xc4>)
 8001a14:	f00b fa1c 	bl	800ce50 <HAL_TIM_PWM_ConfigChannel>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_TIM12_Init+0x9e>
  {
    Error_Handler();
 8001a1e:	f000 facb 	bl	8001fb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a22:	463b      	mov	r3, r7
 8001a24:	2204      	movs	r2, #4
 8001a26:	4619      	mov	r1, r3
 8001a28:	4807      	ldr	r0, [pc, #28]	; (8001a48 <MX_TIM12_Init+0xc4>)
 8001a2a:	f00b fa11 	bl	800ce50 <HAL_TIM_PWM_ConfigChannel>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM12_Init+0xb4>
  {
    Error_Handler();
 8001a34:	f000 fac0 	bl	8001fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001a38:	4803      	ldr	r0, [pc, #12]	; (8001a48 <MX_TIM12_Init+0xc4>)
 8001a3a:	f003 ffc7 	bl	80059cc <HAL_TIM_MspPostInit>

}
 8001a3e:	bf00      	nop
 8001a40:	3728      	adds	r7, #40	; 0x28
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	24000680 	.word	0x24000680
 8001a4c:	40001800 	.word	0x40001800

08001a50 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b098      	sub	sp, #96	; 0x60
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a56:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a62:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	60da      	str	r2, [r3, #12]
 8001a70:	611a      	str	r2, [r3, #16]
 8001a72:	615a      	str	r2, [r3, #20]
 8001a74:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a76:	1d3b      	adds	r3, r7, #4
 8001a78:	2234      	movs	r2, #52	; 0x34
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f00e fbd6 	bl	801022e <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001a82:	4b3a      	ldr	r3, [pc, #232]	; (8001b6c <MX_TIM15_Init+0x11c>)
 8001a84:	4a3a      	ldr	r2, [pc, #232]	; (8001b70 <MX_TIM15_Init+0x120>)
 8001a86:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001a88:	4b38      	ldr	r3, [pc, #224]	; (8001b6c <MX_TIM15_Init+0x11c>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a8e:	4b37      	ldr	r3, [pc, #220]	; (8001b6c <MX_TIM15_Init+0x11c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8001a94:	4b35      	ldr	r3, [pc, #212]	; (8001b6c <MX_TIM15_Init+0x11c>)
 8001a96:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a9a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a9c:	4b33      	ldr	r3, [pc, #204]	; (8001b6c <MX_TIM15_Init+0x11c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001aa2:	4b32      	ldr	r3, [pc, #200]	; (8001b6c <MX_TIM15_Init+0x11c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa8:	4b30      	ldr	r3, [pc, #192]	; (8001b6c <MX_TIM15_Init+0x11c>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001aae:	482f      	ldr	r0, [pc, #188]	; (8001b6c <MX_TIM15_Init+0x11c>)
 8001ab0:	f00a fde6 	bl	800c680 <HAL_TIM_PWM_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001aba:	f000 fa7d 	bl	8001fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001ac6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001aca:	4619      	mov	r1, r3
 8001acc:	4827      	ldr	r0, [pc, #156]	; (8001b6c <MX_TIM15_Init+0x11c>)
 8001ace:	f00c f833 	bl	800db38 <HAL_TIMEx_MasterConfigSynchronization>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001ad8:	f000 fa6e 	bl	8001fb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001adc:	2360      	movs	r3, #96	; 0x60
 8001ade:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aec:	2300      	movs	r3, #0
 8001aee:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001af0:	2300      	movs	r3, #0
 8001af2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001af4:	2300      	movs	r3, #0
 8001af6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001af8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001afc:	2200      	movs	r2, #0
 8001afe:	4619      	mov	r1, r3
 8001b00:	481a      	ldr	r0, [pc, #104]	; (8001b6c <MX_TIM15_Init+0x11c>)
 8001b02:	f00b f9a5 	bl	800ce50 <HAL_TIM_PWM_ConfigChannel>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001b0c:	f000 fa54 	bl	8001fb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b10:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b14:	2204      	movs	r2, #4
 8001b16:	4619      	mov	r1, r3
 8001b18:	4814      	ldr	r0, [pc, #80]	; (8001b6c <MX_TIM15_Init+0x11c>)
 8001b1a:	f00b f999 	bl	800ce50 <HAL_TIM_PWM_ConfigChannel>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8001b24:	f000 fa48 	bl	8001fb8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b40:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b46:	2300      	movs	r3, #0
 8001b48:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001b4a:	1d3b      	adds	r3, r7, #4
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4807      	ldr	r0, [pc, #28]	; (8001b6c <MX_TIM15_Init+0x11c>)
 8001b50:	f00c f88e 	bl	800dc70 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8001b5a:	f000 fa2d 	bl	8001fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001b5e:	4803      	ldr	r0, [pc, #12]	; (8001b6c <MX_TIM15_Init+0x11c>)
 8001b60:	f003 ff34 	bl	80059cc <HAL_TIM_MspPostInit>

}
 8001b64:	bf00      	nop
 8001b66:	3760      	adds	r7, #96	; 0x60
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	240006cc 	.word	0x240006cc
 8001b70:	40014000 	.word	0x40014000

08001b74 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b088      	sub	sp, #32
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b7a:	f107 0310 	add.w	r3, r7, #16
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b88:	1d3b      	adds	r3, r7, #4
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]
 8001b90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8001b92:	4b1d      	ldr	r3, [pc, #116]	; (8001c08 <MX_TIM23_Init+0x94>)
 8001b94:	4a1d      	ldr	r2, [pc, #116]	; (8001c0c <MX_TIM23_Init+0x98>)
 8001b96:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 83;
 8001b98:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <MX_TIM23_Init+0x94>)
 8001b9a:	2253      	movs	r2, #83	; 0x53
 8001b9c:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b9e:	4b1a      	ldr	r3, [pc, #104]	; (8001c08 <MX_TIM23_Init+0x94>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 9999;
 8001ba4:	4b18      	ldr	r3, [pc, #96]	; (8001c08 <MX_TIM23_Init+0x94>)
 8001ba6:	f242 720f 	movw	r2, #9999	; 0x270f
 8001baa:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bac:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <MX_TIM23_Init+0x94>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb2:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <MX_TIM23_Init+0x94>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 8001bb8:	4813      	ldr	r0, [pc, #76]	; (8001c08 <MX_TIM23_Init+0x94>)
 8001bba:	f00a fc83 	bl	800c4c4 <HAL_TIM_Base_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM23_Init+0x54>
  {
    Error_Handler();
 8001bc4:	f000 f9f8 	bl	8001fb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bcc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 8001bce:	f107 0310 	add.w	r3, r7, #16
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	480c      	ldr	r0, [pc, #48]	; (8001c08 <MX_TIM23_Init+0x94>)
 8001bd6:	f00b fa4f 	bl	800d078 <HAL_TIM_ConfigClockSource>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_TIM23_Init+0x70>
  {
    Error_Handler();
 8001be0:	f000 f9ea 	bl	8001fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be4:	2300      	movs	r3, #0
 8001be6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8001bec:	1d3b      	adds	r3, r7, #4
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4805      	ldr	r0, [pc, #20]	; (8001c08 <MX_TIM23_Init+0x94>)
 8001bf2:	f00b ffa1 	bl	800db38 <HAL_TIMEx_MasterConfigSynchronization>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM23_Init+0x8c>
  {
    Error_Handler();
 8001bfc:	f000 f9dc 	bl	8001fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8001c00:	bf00      	nop
 8001c02:	3720      	adds	r7, #32
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	24000718 	.word	0x24000718
 8001c0c:	4000e000 	.word	0x4000e000

08001c10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c14:	4b22      	ldr	r3, [pc, #136]	; (8001ca0 <MX_USART1_UART_Init+0x90>)
 8001c16:	4a23      	ldr	r2, [pc, #140]	; (8001ca4 <MX_USART1_UART_Init+0x94>)
 8001c18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001c1a:	4b21      	ldr	r3, [pc, #132]	; (8001ca0 <MX_USART1_UART_Init+0x90>)
 8001c1c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001c20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c22:	4b1f      	ldr	r3, [pc, #124]	; (8001ca0 <MX_USART1_UART_Init+0x90>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c28:	4b1d      	ldr	r3, [pc, #116]	; (8001ca0 <MX_USART1_UART_Init+0x90>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ca0 <MX_USART1_UART_Init+0x90>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c34:	4b1a      	ldr	r3, [pc, #104]	; (8001ca0 <MX_USART1_UART_Init+0x90>)
 8001c36:	220c      	movs	r2, #12
 8001c38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c3a:	4b19      	ldr	r3, [pc, #100]	; (8001ca0 <MX_USART1_UART_Init+0x90>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c40:	4b17      	ldr	r3, [pc, #92]	; (8001ca0 <MX_USART1_UART_Init+0x90>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c46:	4b16      	ldr	r3, [pc, #88]	; (8001ca0 <MX_USART1_UART_Init+0x90>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c4c:	4b14      	ldr	r3, [pc, #80]	; (8001ca0 <MX_USART1_UART_Init+0x90>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c52:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <MX_USART1_UART_Init+0x90>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c58:	4811      	ldr	r0, [pc, #68]	; (8001ca0 <MX_USART1_UART_Init+0x90>)
 8001c5a:	f00c f8c7 	bl	800ddec <HAL_UART_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001c64:	f000 f9a8 	bl	8001fb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c68:	2100      	movs	r1, #0
 8001c6a:	480d      	ldr	r0, [pc, #52]	; (8001ca0 <MX_USART1_UART_Init+0x90>)
 8001c6c:	f00e f9de 	bl	801002c <HAL_UARTEx_SetTxFifoThreshold>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001c76:	f000 f99f 	bl	8001fb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	4808      	ldr	r0, [pc, #32]	; (8001ca0 <MX_USART1_UART_Init+0x90>)
 8001c7e:	f00e fa13 	bl	80100a8 <HAL_UARTEx_SetRxFifoThreshold>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001c88:	f000 f996 	bl	8001fb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001c8c:	4804      	ldr	r0, [pc, #16]	; (8001ca0 <MX_USART1_UART_Init+0x90>)
 8001c8e:	f00e f994 	bl	800ffba <HAL_UARTEx_DisableFifoMode>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001c98:	f000 f98e 	bl	8001fb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	24000764 	.word	0x24000764
 8001ca4:	40011000 	.word	0x40011000

08001ca8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001cac:	4b22      	ldr	r3, [pc, #136]	; (8001d38 <MX_USART3_UART_Init+0x90>)
 8001cae:	4a23      	ldr	r2, [pc, #140]	; (8001d3c <MX_USART3_UART_Init+0x94>)
 8001cb0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 500000;
 8001cb2:	4b21      	ldr	r3, [pc, #132]	; (8001d38 <MX_USART3_UART_Init+0x90>)
 8001cb4:	4a22      	ldr	r2, [pc, #136]	; (8001d40 <MX_USART3_UART_Init+0x98>)
 8001cb6:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001cb8:	4b1f      	ldr	r3, [pc, #124]	; (8001d38 <MX_USART3_UART_Init+0x90>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001cbe:	4b1e      	ldr	r3, [pc, #120]	; (8001d38 <MX_USART3_UART_Init+0x90>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cc4:	4b1c      	ldr	r3, [pc, #112]	; (8001d38 <MX_USART3_UART_Init+0x90>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001cca:	4b1b      	ldr	r3, [pc, #108]	; (8001d38 <MX_USART3_UART_Init+0x90>)
 8001ccc:	220c      	movs	r2, #12
 8001cce:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cd0:	4b19      	ldr	r3, [pc, #100]	; (8001d38 <MX_USART3_UART_Init+0x90>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cd6:	4b18      	ldr	r3, [pc, #96]	; (8001d38 <MX_USART3_UART_Init+0x90>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cdc:	4b16      	ldr	r3, [pc, #88]	; (8001d38 <MX_USART3_UART_Init+0x90>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ce2:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <MX_USART3_UART_Init+0x90>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ce8:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <MX_USART3_UART_Init+0x90>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001cee:	4812      	ldr	r0, [pc, #72]	; (8001d38 <MX_USART3_UART_Init+0x90>)
 8001cf0:	f00c f87c 	bl	800ddec <HAL_UART_Init>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8001cfa:	f000 f95d 	bl	8001fb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cfe:	2100      	movs	r1, #0
 8001d00:	480d      	ldr	r0, [pc, #52]	; (8001d38 <MX_USART3_UART_Init+0x90>)
 8001d02:	f00e f993 	bl	801002c <HAL_UARTEx_SetTxFifoThreshold>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8001d0c:	f000 f954 	bl	8001fb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d10:	2100      	movs	r1, #0
 8001d12:	4809      	ldr	r0, [pc, #36]	; (8001d38 <MX_USART3_UART_Init+0x90>)
 8001d14:	f00e f9c8 	bl	80100a8 <HAL_UARTEx_SetRxFifoThreshold>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8001d1e:	f000 f94b 	bl	8001fb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001d22:	4805      	ldr	r0, [pc, #20]	; (8001d38 <MX_USART3_UART_Init+0x90>)
 8001d24:	f00e f949 	bl	800ffba <HAL_UARTEx_DisableFifoMode>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8001d2e:	f000 f943 	bl	8001fb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	240007f8 	.word	0x240007f8
 8001d3c:	40004800 	.word	0x40004800
 8001d40:	0007a120 	.word	0x0007a120

08001d44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d4a:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <MX_DMA_Init+0x4c>)
 8001d4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d50:	4a0f      	ldr	r2, [pc, #60]	; (8001d90 <MX_DMA_Init+0x4c>)
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d5a:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <MX_DMA_Init+0x4c>)
 8001d5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	607b      	str	r3, [r7, #4]
 8001d66:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	200b      	movs	r0, #11
 8001d6e:	f004 fb52 	bl	8006416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001d72:	200b      	movs	r0, #11
 8001d74:	f004 fb69 	bl	800644a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	200c      	movs	r0, #12
 8001d7e:	f004 fb4a 	bl	8006416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001d82:	200c      	movs	r0, #12
 8001d84:	f004 fb61 	bl	800644a <HAL_NVIC_EnableIRQ>

}
 8001d88:	bf00      	nop
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	58024400 	.word	0x58024400

08001d94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08e      	sub	sp, #56	; 0x38
 8001d98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	605a      	str	r2, [r3, #4]
 8001da4:	609a      	str	r2, [r3, #8]
 8001da6:	60da      	str	r2, [r3, #12]
 8001da8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001daa:	4b7c      	ldr	r3, [pc, #496]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db0:	4a7a      	ldr	r2, [pc, #488]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001db2:	f043 0310 	orr.w	r3, r3, #16
 8001db6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dba:	4b78      	ldr	r3, [pc, #480]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc0:	f003 0310 	and.w	r3, r3, #16
 8001dc4:	623b      	str	r3, [r7, #32]
 8001dc6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc8:	4b74      	ldr	r3, [pc, #464]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dce:	4a73      	ldr	r2, [pc, #460]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001dd0:	f043 0304 	orr.w	r3, r3, #4
 8001dd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dd8:	4b70      	ldr	r3, [pc, #448]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	61fb      	str	r3, [r7, #28]
 8001de4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001de6:	4b6d      	ldr	r3, [pc, #436]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dec:	4a6b      	ldr	r2, [pc, #428]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001df2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001df6:	4b69      	ldr	r3, [pc, #420]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e00:	61bb      	str	r3, [r7, #24]
 8001e02:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e04:	4b65      	ldr	r3, [pc, #404]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e0a:	4a64      	ldr	r2, [pc, #400]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e14:	4b61      	ldr	r3, [pc, #388]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	617b      	str	r3, [r7, #20]
 8001e20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e22:	4b5e      	ldr	r3, [pc, #376]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e28:	4a5c      	ldr	r2, [pc, #368]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001e2a:	f043 0320 	orr.w	r3, r3, #32
 8001e2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e32:	4b5a      	ldr	r3, [pc, #360]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e38:	f003 0320 	and.w	r3, r3, #32
 8001e3c:	613b      	str	r3, [r7, #16]
 8001e3e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e40:	4b56      	ldr	r3, [pc, #344]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e46:	4a55      	ldr	r2, [pc, #340]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001e48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e50:	4b52      	ldr	r3, [pc, #328]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5e:	4b4f      	ldr	r3, [pc, #316]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e64:	4a4d      	ldr	r2, [pc, #308]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001e66:	f043 0302 	orr.w	r3, r3, #2
 8001e6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e6e:	4b4b      	ldr	r3, [pc, #300]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e7c:	4b47      	ldr	r3, [pc, #284]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e82:	4a46      	ldr	r2, [pc, #280]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001e84:	f043 0308 	orr.w	r3, r3, #8
 8001e88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e8c:	4b43      	ldr	r3, [pc, #268]	; (8001f9c <MX_GPIO_Init+0x208>)
 8001e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	607b      	str	r3, [r7, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f248 711c 	movw	r1, #34588	; 0x871c
 8001ea0:	483f      	ldr	r0, [pc, #252]	; (8001fa0 <MX_GPIO_Init+0x20c>)
 8001ea2:	f007 fd93 	bl	80099cc <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001eac:	483d      	ldr	r0, [pc, #244]	; (8001fa4 <MX_GPIO_Init+0x210>)
 8001eae:	f007 fd8d 	bl	80099cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001eb8:	483b      	ldr	r0, [pc, #236]	; (8001fa8 <MX_GPIO_Init+0x214>)
 8001eba:	f007 fd87 	bl	80099cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	483a      	ldr	r0, [pc, #232]	; (8001fac <MX_GPIO_Init+0x218>)
 8001ec4:	f007 fd82 	bl	80099cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f44f 5143 	mov.w	r1, #12480	; 0x30c0
 8001ece:	4838      	ldr	r0, [pc, #224]	; (8001fb0 <MX_GPIO_Init+0x21c>)
 8001ed0:	f007 fd7c 	bl	80099cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_14, GPIO_PIN_RESET);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f44f 4182 	mov.w	r1, #16640	; 0x4100
 8001eda:	4836      	ldr	r0, [pc, #216]	; (8001fb4 <MX_GPIO_Init+0x220>)
 8001edc:	f007 fd76 	bl	80099cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE8
                           PE9 PE10 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8
 8001ee0:	f248 731c 	movw	r3, #34588	; 0x871c
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ef2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4829      	ldr	r0, [pc, #164]	; (8001fa0 <MX_GPIO_Init+0x20c>)
 8001efa:	f007 fabd 	bl	8009478 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001efe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f04:	2301      	movs	r3, #1
 8001f06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f14:	4619      	mov	r1, r3
 8001f16:	4823      	ldr	r0, [pc, #140]	; (8001fa4 <MX_GPIO_Init+0x210>)
 8001f18:	f007 faae 	bl	8009478 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001f1c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f22:	2301      	movs	r3, #1
 8001f24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f32:	4619      	mov	r1, r3
 8001f34:	481c      	ldr	r0, [pc, #112]	; (8001fa8 <MX_GPIO_Init+0x214>)
 8001f36:	f007 fa9f 	bl	8009478 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f46:	2300      	movs	r3, #0
 8001f48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4816      	ldr	r0, [pc, #88]	; (8001fac <MX_GPIO_Init+0x218>)
 8001f52:	f007 fa91 	bl	8009478 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7;
 8001f56:	f44f 5343 	mov.w	r3, #12480	; 0x30c0
 8001f5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f64:	2300      	movs	r3, #0
 8001f66:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4810      	ldr	r0, [pc, #64]	; (8001fb0 <MX_GPIO_Init+0x21c>)
 8001f70:	f007 fa82 	bl	8009478 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_14;
 8001f74:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f82:	2300      	movs	r3, #0
 8001f84:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4809      	ldr	r0, [pc, #36]	; (8001fb4 <MX_GPIO_Init+0x220>)
 8001f8e:	f007 fa73 	bl	8009478 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f92:	bf00      	nop
 8001f94:	3738      	adds	r7, #56	; 0x38
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	58024400 	.word	0x58024400
 8001fa0:	58021000 	.word	0x58021000
 8001fa4:	58020800 	.word	0x58020800
 8001fa8:	58021400 	.word	0x58021400
 8001fac:	58021800 	.word	0x58021800
 8001fb0:	58020400 	.word	0x58020400
 8001fb4:	58020c00 	.word	0x58020c00

08001fb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fbc:	b672      	cpsid	i
}
 8001fbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fc0:	e7fe      	b.n	8001fc0 <Error_Handler+0x8>

08001fc2 <_ZN6PUSHERC1Ev>:

#define PUSHER_SPEED 33.6

void pusher_reset();

class PUSHER{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	f04f 0200 	mov.w	r2, #0
 8001fd0:	f04f 0300 	mov.w	r3, #0
 8001fd4:	e9c1 2300 	strd	r2, r3, [r1]
 8001fd8:	6879      	ldr	r1, [r7, #4]
 8001fda:	f04f 0200 	mov.w	r2, #0
 8001fde:	f04f 0300 	mov.w	r3, #0
 8001fe2:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	f04f 0200 	mov.w	r2, #0
 8001fec:	f04f 0300 	mov.w	r3, #0
 8001ff0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	619a      	str	r2, [r3, #24]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <main_function>:
int flag = 0;
double Vx = 0, Vy = 0, W, rVx, rVy, rW;
int script_state = 0;
int pusher_reset_state = 0;

void main_function(){
 8002008:	b580      	push	{r7, lr}
 800200a:	b090      	sub	sp, #64	; 0x40
 800200c:	af00      	add	r7, sp, #0
	PUSHER pusher_A;
 800200e:	f107 0320 	add.w	r3, r7, #32
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff ffd5 	bl	8001fc2 <_ZN6PUSHERC1Ev>
	PUSHER pusher_B;
 8002018:	463b      	mov	r3, r7
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff ffd1 	bl	8001fc2 <_ZN6PUSHERC1Ev>
//	PUSHER pusher_C;
//	PUSHER pusher_D;
//	SCRIPT script_a;
	ros_setup();
 8002020:	f001 ffcc 	bl	8003fbc <_Z9ros_setupv>
	stm_setup();
 8002024:	f000 f84c 	bl	80020c0 <stm_setup>
	pusher_reset();
 8002028:	f000 f8a8 	bl	800217c <_Z12pusher_resetv>
	script_a.scriptrun = 0;
 800202c:	4b1e      	ldr	r3, [pc, #120]	; (80020a8 <main_function+0xa0>)
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
	script_b.scriptrun = 0;
 8002032:	4b1e      	ldr	r3, [pc, #120]	; (80020ac <main_function+0xa4>)
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
	pusher_reset();
 8002038:	f000 f8a0 	bl	800217c <_Z12pusher_resetv>
	while(1){
		a++;
 800203c:	4b1c      	ldr	r3, [pc, #112]	; (80020b0 <main_function+0xa8>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	3301      	adds	r3, #1
 8002042:	4a1b      	ldr	r2, [pc, #108]	; (80020b0 <main_function+0xa8>)
 8002044:	6013      	str	r3, [r2, #0]
		ros_loop();
 8002046:	f001 ffd5 	bl	8003ff4 <_Z8ros_loopv>
		if(flag == 6 ){
 800204a:	4b1a      	ldr	r3, [pc, #104]	; (80020b4 <main_function+0xac>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2b06      	cmp	r3, #6
 8002050:	d105      	bne.n	800205e <main_function+0x56>
			script_a.scriptrun = 1;
 8002052:	4b15      	ldr	r3, [pc, #84]	; (80020a8 <main_function+0xa0>)
 8002054:	2201      	movs	r2, #1
 8002056:	601a      	str	r2, [r3, #0]
			flag = 0;
 8002058:	4b16      	ldr	r3, [pc, #88]	; (80020b4 <main_function+0xac>)
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]
		}
		if(flag == 7){
 800205e:	4b15      	ldr	r3, [pc, #84]	; (80020b4 <main_function+0xac>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2b07      	cmp	r3, #7
 8002064:	d116      	bne.n	8002094 <main_function+0x8c>
			script_b.scriptrun = 1;
 8002066:	4b11      	ldr	r3, [pc, #68]	; (80020ac <main_function+0xa4>)
 8002068:	2201      	movs	r2, #1
 800206a:	601a      	str	r2, [r3, #0]
			flag = 0;
 800206c:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <main_function+0xac>)
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
		}
		while(script_a.scriptrun == 1 || script_b.scriptrun == 1){
 8002072:	e00f      	b.n	8002094 <main_function+0x8c>
			if(everRun == 1 || everRun2 == 1){
 8002074:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <main_function+0xb0>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d003      	beq.n	8002084 <main_function+0x7c>
 800207c:	4b0f      	ldr	r3, [pc, #60]	; (80020bc <main_function+0xb4>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d105      	bne.n	8002090 <main_function+0x88>
				script_a.scriptrun = 0;
 8002084:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <main_function+0xa0>)
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
				script_b.scriptrun = 0;
 800208a:	4b08      	ldr	r3, [pc, #32]	; (80020ac <main_function+0xa4>)
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
			}
			script();
 8002090:	f003 f802 	bl	8005098 <_Z6scriptv>
		while(script_a.scriptrun == 1 || script_b.scriptrun == 1){
 8002094:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <main_function+0xa0>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d0eb      	beq.n	8002074 <main_function+0x6c>
 800209c:	4b03      	ldr	r3, [pc, #12]	; (80020ac <main_function+0xa4>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d0e7      	beq.n	8002074 <main_function+0x6c>
		a++;
 80020a4:	e7ca      	b.n	800203c <main_function+0x34>
 80020a6:	bf00      	nop
 80020a8:	24002020 	.word	0x24002020
 80020ac:	24002024 	.word	0x24002024
 80020b0:	2400097c 	.word	0x2400097c
 80020b4:	24000980 	.word	0x24000980
 80020b8:	24002028 	.word	0x24002028
 80020bc:	2400202c 	.word	0x2400202c

080020c0 <stm_setup>:
		}

	}
}
void stm_setup(void){
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim1);
 80020c4:	4806      	ldr	r0, [pc, #24]	; (80020e0 <stm_setup+0x20>)
 80020c6:	f00a fa55 	bl	800c574 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 80020ca:	4806      	ldr	r0, [pc, #24]	; (80020e4 <stm_setup+0x24>)
 80020cc:	f00a fa52 	bl	800c574 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim23);//main Timer
 80020d0:	4805      	ldr	r0, [pc, #20]	; (80020e8 <stm_setup+0x28>)
 80020d2:	f00a fa4f 	bl	800c574 <HAL_TIM_Base_Start_IT>
	DC_motor_init();
 80020d6:	f7ff f89f 	bl	8001218 <_Z13DC_motor_initv>
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	240004b8 	.word	0x240004b8
 80020e4:	24000634 	.word	0x24000634
 80020e8:	24000718 	.word	0x24000718

080020ec <_Z13script_pusherdd>:
extern int delay_start_reset;
extern int delay_reset;
extern int pusher_reset_state;


void script_pusher(double hight_a,double hight_b){
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	ed87 0b02 	vstr	d0, [r7, #8]
 80020f6:	ed87 1b00 	vstr	d1, [r7]
	pusher_A.state = hight_a;
 80020fa:	4908      	ldr	r1, [pc, #32]	; (800211c <_Z13script_pusherdd+0x30>)
 80020fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002100:	e9c1 2300 	strd	r2, r3, [r1]
	pusher_B.state = hight_b;
 8002104:	4906      	ldr	r1, [pc, #24]	; (8002120 <_Z13script_pusherdd+0x34>)
 8002106:	e9d7 2300 	ldrd	r2, r3, [r7]
 800210a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800210e:	bf00      	nop
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	240009c0 	.word	0x240009c0
 8002120:	240009e0 	.word	0x240009e0

08002124 <_ZN6PUSHER8distenceEv>:

void PUSHER::distence(){
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]

	pusher_A.d = (pusher_A.state - pusher_A.p_state)*10;
 800212c:	4b11      	ldr	r3, [pc, #68]	; (8002174 <_ZN6PUSHER8distenceEv+0x50>)
 800212e:	ed93 6b00 	vldr	d6, [r3]
 8002132:	4b10      	ldr	r3, [pc, #64]	; (8002174 <_ZN6PUSHER8distenceEv+0x50>)
 8002134:	ed93 7b02 	vldr	d7, [r3, #8]
 8002138:	ee36 7b47 	vsub.f64	d7, d6, d7
 800213c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8002140:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002144:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <_ZN6PUSHER8distenceEv+0x50>)
 8002146:	ed83 7b04 	vstr	d7, [r3, #16]
	pusher_B.d = (pusher_B.state - pusher_B.p_state)*10;
 800214a:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <_ZN6PUSHER8distenceEv+0x54>)
 800214c:	ed93 6b00 	vldr	d6, [r3]
 8002150:	4b09      	ldr	r3, [pc, #36]	; (8002178 <_ZN6PUSHER8distenceEv+0x54>)
 8002152:	ed93 7b02 	vldr	d7, [r3, #8]
 8002156:	ee36 7b47 	vsub.f64	d7, d6, d7
 800215a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800215e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002162:	4b05      	ldr	r3, [pc, #20]	; (8002178 <_ZN6PUSHER8distenceEv+0x54>)
 8002164:	ed83 7b04 	vstr	d7, [r3, #16]
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	240009c0 	.word	0x240009c0
 8002178:	240009e0 	.word	0x240009e0

0800217c <_Z12pusher_resetv>:
void pusher_reset(){
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
//	while(pusher_reset_state == 0){
	if(pusher_reset_state == 0){
 8002180:	4b07      	ldr	r3, [pc, #28]	; (80021a0 <_Z12pusher_resetv+0x24>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d108      	bne.n	800219a <_Z12pusher_resetv+0x1e>
		script_pusher(-14,15);
 8002188:	eeb2 1b0e 	vmov.f64	d1, #46	; 0x41700000  15.0
 800218c:	eeba 0b0c 	vmov.f64	d0, #172	; 0xc1600000 -14.0
 8002190:	f7ff ffac 	bl	80020ec <_Z13script_pusherdd>
		pusher_reset_state =1;
 8002194:	4b02      	ldr	r3, [pc, #8]	; (80021a0 <_Z12pusher_resetv+0x24>)
 8002196:	2201      	movs	r2, #1
 8002198:	601a      	str	r2, [r3, #0]
//			delay_start_reset = 0;
//			delay_reset = 0;
//			pusher_reset_state =1;
//		}
	}
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	240009b8 	.word	0x240009b8

080021a4 <_Z41__static_initialization_and_destruction_0ii>:
//	if(pusher_D.d ==0){
//		HAL_GPIO_WritePin(PUSHER_D_IN1_PORT, PUSHER_D_IN1_PIN, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(PUSHER_D_IN2_PORT, PUSHER_D_IN2_PIN, GPIO_PIN_RESET);
//
//	}
}
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d10a      	bne.n	80021ca <_Z41__static_initialization_and_destruction_0ii+0x26>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d105      	bne.n	80021ca <_Z41__static_initialization_and_destruction_0ii+0x26>
PUSHER pusher_A;
 80021be:	4805      	ldr	r0, [pc, #20]	; (80021d4 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80021c0:	f7ff feff 	bl	8001fc2 <_ZN6PUSHERC1Ev>
PUSHER pusher_B;
 80021c4:	4804      	ldr	r0, [pc, #16]	; (80021d8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80021c6:	f7ff fefc 	bl	8001fc2 <_ZN6PUSHERC1Ev>
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	240009c0 	.word	0x240009c0
 80021d8:	240009e0 	.word	0x240009e0

080021dc <_GLOBAL__sub_I_pusher_A>:
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
 80021e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80021e4:	2001      	movs	r0, #1
 80021e6:	f7ff ffdd 	bl	80021a4 <_Z41__static_initialization_and_destruction_0ii>
 80021ea:	bd80      	pop	{r7, pc}

080021ec <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	605a      	str	r2, [r3, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4618      	mov	r0, r3
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
	...

08002210 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	4a04      	ldr	r2, [pc, #16]	; (800222c <_ZN3ros3MsgC1Ev+0x1c>)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4618      	mov	r0, r3
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	08010804 	.word	0x08010804

08002230 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
      data()
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff ffe8 	bl	8002210 <_ZN3ros3MsgC1Ev>
 8002240:	4a06      	ldr	r2, [pc, #24]	; (800225c <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	3304      	adds	r3, #4
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff ffce 	bl	80021ec <_ZN3ros4TimeC1Ev>
    {
    }
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	080107ec 	.word	0x080107ec

08002260 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6859      	ldr	r1, [r3, #4]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	4413      	add	r3, r2
 8002278:	b2ca      	uxtb	r2, r1
 800227a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	0a19      	lsrs	r1, r3, #8
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	3301      	adds	r3, #1
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	4413      	add	r3, r2
 800228a:	b2ca      	uxtb	r2, r1
 800228c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	0c19      	lsrs	r1, r3, #16
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	3302      	adds	r3, #2
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	4413      	add	r3, r2
 800229c:	b2ca      	uxtb	r2, r1
 800229e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	0e19      	lsrs	r1, r3, #24
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	3303      	adds	r3, #3
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	4413      	add	r3, r2
 80022ae:	b2ca      	uxtb	r2, r1
 80022b0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	3304      	adds	r3, #4
 80022b6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6899      	ldr	r1, [r3, #8]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	4413      	add	r3, r2
 80022c2:	b2ca      	uxtb	r2, r1
 80022c4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	0a19      	lsrs	r1, r3, #8
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	3301      	adds	r3, #1
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	4413      	add	r3, r2
 80022d4:	b2ca      	uxtb	r2, r1
 80022d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	0c19      	lsrs	r1, r3, #16
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	3302      	adds	r3, #2
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	4413      	add	r3, r2
 80022e6:	b2ca      	uxtb	r2, r1
 80022e8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	0e19      	lsrs	r1, r3, #24
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	3303      	adds	r3, #3
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	4413      	add	r3, r2
 80022f8:	b2ca      	uxtb	r2, r1
 80022fa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	3304      	adds	r3, #4
 8002300:	60fb      	str	r3, [r7, #12]
      return offset;
 8002302:	68fb      	ldr	r3, [r7, #12]
    }
 8002304:	4618      	mov	r0, r3
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800231a:	2300      	movs	r3, #0
 800231c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	4413      	add	r3, r2
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	461a      	mov	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	3301      	adds	r3, #1
 8002334:	6839      	ldr	r1, [r7, #0]
 8002336:	440b      	add	r3, r1
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	021b      	lsls	r3, r3, #8
 800233c:	431a      	orrs	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	3302      	adds	r3, #2
 800234a:	6839      	ldr	r1, [r7, #0]
 800234c:	440b      	add	r3, r1
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	041b      	lsls	r3, r3, #16
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	3303      	adds	r3, #3
 8002360:	6839      	ldr	r1, [r7, #0]
 8002362:	440b      	add	r3, r1
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	061b      	lsls	r3, r3, #24
 8002368:	431a      	orrs	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	3304      	adds	r3, #4
 8002372:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	4413      	add	r3, r2
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	461a      	mov	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	3301      	adds	r3, #1
 800238a:	6839      	ldr	r1, [r7, #0]
 800238c:	440b      	add	r3, r1
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	021b      	lsls	r3, r3, #8
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	3302      	adds	r3, #2
 80023a0:	6839      	ldr	r1, [r7, #0]
 80023a2:	440b      	add	r3, r1
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	041b      	lsls	r3, r3, #16
 80023a8:	431a      	orrs	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689a      	ldr	r2, [r3, #8]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	3303      	adds	r3, #3
 80023b6:	6839      	ldr	r1, [r7, #0]
 80023b8:	440b      	add	r3, r1
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	061b      	lsls	r3, r3, #24
 80023be:	431a      	orrs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	3304      	adds	r3, #4
 80023c8:	60fb      	str	r3, [r7, #12]
     return offset;
 80023ca:	68fb      	ldr	r3, [r7, #12]
    }
 80023cc:	4618      	mov	r0, r3
 80023ce:	3714      	adds	r7, #20
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	4b03      	ldr	r3, [pc, #12]	; (80023f0 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80023e2:	4618      	mov	r0, r3
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	080104ec 	.word	0x080104ec

080023f4 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	4b03      	ldr	r3, [pc, #12]	; (800240c <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80023fe:	4618      	mov	r0, r3
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	080104fc 	.word	0x080104fc

08002410 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff fef8 	bl	8002210 <_ZN3ros3MsgC1Ev>
 8002420:	4a0b      	ldr	r2, [pc, #44]	; (8002450 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a09      	ldr	r2, [pc, #36]	; (8002454 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002430:	609a      	str	r2, [r3, #8]
      message_type(""),
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a07      	ldr	r2, [pc, #28]	; (8002454 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002436:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a06      	ldr	r2, [pc, #24]	; (8002454 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800243c:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	615a      	str	r2, [r3, #20]
    {
    }
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4618      	mov	r0, r3
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	080107d4 	.word	0x080107d4
 8002454:	08010520 	.word	0x08010520

08002458 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002458:	b580      	push	{r7, lr}
 800245a:	b088      	sub	sp, #32
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	8899      	ldrh	r1, [r3, #4]
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	4413      	add	r3, r2
 8002470:	b2ca      	uxtb	r2, r1
 8002472:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	889b      	ldrh	r3, [r3, #4]
 8002478:	0a1b      	lsrs	r3, r3, #8
 800247a:	b299      	uxth	r1, r3
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	3301      	adds	r3, #1
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	4413      	add	r3, r2
 8002484:	b2ca      	uxtb	r2, r1
 8002486:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	3302      	adds	r3, #2
 800248c:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	4618      	mov	r0, r3
 8002494:	f7fd ff3c 	bl	8000310 <strlen>
 8002498:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	4413      	add	r3, r2
 80024a0:	69b9      	ldr	r1, [r7, #24]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f001 fe44 	bl	8004130 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	3304      	adds	r3, #4
 80024ac:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	18d0      	adds	r0, r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4619      	mov	r1, r3
 80024bc:	f00d feec 	bl	8010298 <memcpy>
      offset += length_topic_name;
 80024c0:	69fa      	ldr	r2, [r7, #28]
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	4413      	add	r3, r2
 80024c6:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fd ff1f 	bl	8000310 <strlen>
 80024d2:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	4413      	add	r3, r2
 80024da:	6979      	ldr	r1, [r7, #20]
 80024dc:	4618      	mov	r0, r3
 80024de:	f001 fe27 	bl	8004130 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	3304      	adds	r3, #4
 80024e6:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	18d0      	adds	r0, r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	4619      	mov	r1, r3
 80024f6:	f00d fecf 	bl	8010298 <memcpy>
      offset += length_message_type;
 80024fa:	69fa      	ldr	r2, [r7, #28]
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	4413      	add	r3, r2
 8002500:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	4618      	mov	r0, r3
 8002508:	f7fd ff02 	bl	8000310 <strlen>
 800250c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	4413      	add	r3, r2
 8002514:	6939      	ldr	r1, [r7, #16]
 8002516:	4618      	mov	r0, r3
 8002518:	f001 fe0a 	bl	8004130 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	3304      	adds	r3, #4
 8002520:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	18d0      	adds	r0, r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	4619      	mov	r1, r3
 8002530:	f00d feb2 	bl	8010298 <memcpy>
      offset += length_md5sum;
 8002534:	69fa      	ldr	r2, [r7, #28]
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	4413      	add	r3, r2
 800253a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8002542:	68f9      	ldr	r1, [r7, #12]
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	4413      	add	r3, r2
 800254a:	b2ca      	uxtb	r2, r1
 800254c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	0a19      	lsrs	r1, r3, #8
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	3301      	adds	r3, #1
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	4413      	add	r3, r2
 800255a:	b2ca      	uxtb	r2, r1
 800255c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	0c19      	lsrs	r1, r3, #16
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	3302      	adds	r3, #2
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	4413      	add	r3, r2
 800256a:	b2ca      	uxtb	r2, r1
 800256c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	0e19      	lsrs	r1, r3, #24
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	3303      	adds	r3, #3
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	4413      	add	r3, r2
 800257a:	b2ca      	uxtb	r2, r1
 800257c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	3304      	adds	r3, #4
 8002582:	61fb      	str	r3, [r7, #28]
      return offset;
 8002584:	69fb      	ldr	r3, [r7, #28]
    }
 8002586:	4618      	mov	r0, r3
 8002588:	3720      	adds	r7, #32
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800258e:	b580      	push	{r7, lr}
 8002590:	b08a      	sub	sp, #40	; 0x28
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
 8002596:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002598:	2300      	movs	r3, #0
 800259a:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	4413      	add	r3, r2
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	889b      	ldrh	r3, [r3, #4]
 80025ae:	b21a      	sxth	r2, r3
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	3301      	adds	r3, #1
 80025b4:	6839      	ldr	r1, [r7, #0]
 80025b6:	440b      	add	r3, r1
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	021b      	lsls	r3, r3, #8
 80025bc:	b21b      	sxth	r3, r3
 80025be:	4313      	orrs	r3, r2
 80025c0:	b21b      	sxth	r3, r3
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	3302      	adds	r3, #2
 80025cc:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	441a      	add	r2, r3
 80025d4:	f107 0314 	add.w	r3, r7, #20
 80025d8:	4611      	mov	r1, r2
 80025da:	4618      	mov	r0, r3
 80025dc:	f001 fdc7 	bl	800416e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	3304      	adds	r3, #4
 80025e4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
 80025ea:	e00b      	b.n	8002604 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	441a      	add	r2, r3
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	3b01      	subs	r3, #1
 80025f6:	6839      	ldr	r1, [r7, #0]
 80025f8:	440b      	add	r3, r1
 80025fa:	7812      	ldrb	r2, [r2, #0]
 80025fc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	3301      	adds	r3, #1
 8002602:	627b      	str	r3, [r7, #36]	; 0x24
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	4413      	add	r3, r2
 800260a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800260c:	429a      	cmp	r2, r3
 800260e:	d3ed      	bcc.n	80025ec <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	4413      	add	r3, r2
 8002616:	3b01      	subs	r3, #1
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	4413      	add	r3, r2
 800261c:	2200      	movs	r2, #0
 800261e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	3b01      	subs	r3, #1
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	441a      	add	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	4413      	add	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	441a      	add	r2, r3
 800263a:	f107 0310 	add.w	r3, r7, #16
 800263e:	4611      	mov	r1, r2
 8002640:	4618      	mov	r0, r3
 8002642:	f001 fd94 	bl	800416e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	3304      	adds	r3, #4
 800264a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	623b      	str	r3, [r7, #32]
 8002650:	e00b      	b.n	800266a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	6a3b      	ldr	r3, [r7, #32]
 8002656:	441a      	add	r2, r3
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	3b01      	subs	r3, #1
 800265c:	6839      	ldr	r1, [r7, #0]
 800265e:	440b      	add	r3, r1
 8002660:	7812      	ldrb	r2, [r2, #0]
 8002662:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002664:	6a3b      	ldr	r3, [r7, #32]
 8002666:	3301      	adds	r3, #1
 8002668:	623b      	str	r3, [r7, #32]
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4413      	add	r3, r2
 8002670:	6a3a      	ldr	r2, [r7, #32]
 8002672:	429a      	cmp	r2, r3
 8002674:	d3ed      	bcc.n	8002652 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	4413      	add	r3, r2
 800267c:	3b01      	subs	r3, #1
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	4413      	add	r3, r2
 8002682:	2200      	movs	r2, #0
 8002684:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	3b01      	subs	r3, #1
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	441a      	add	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	4413      	add	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	441a      	add	r2, r3
 80026a0:	f107 030c 	add.w	r3, r7, #12
 80026a4:	4611      	mov	r1, r2
 80026a6:	4618      	mov	r0, r3
 80026a8:	f001 fd61 	bl	800416e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	3304      	adds	r3, #4
 80026b0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	61fb      	str	r3, [r7, #28]
 80026b6:	e00b      	b.n	80026d0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	441a      	add	r2, r3
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	3b01      	subs	r3, #1
 80026c2:	6839      	ldr	r1, [r7, #0]
 80026c4:	440b      	add	r3, r1
 80026c6:	7812      	ldrb	r2, [r2, #0]
 80026c8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	3301      	adds	r3, #1
 80026ce:	61fb      	str	r3, [r7, #28]
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	4413      	add	r3, r2
 80026d6:	69fa      	ldr	r2, [r7, #28]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d3ed      	bcc.n	80026b8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	4413      	add	r3, r2
 80026e2:	3b01      	subs	r3, #1
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	4413      	add	r3, r2
 80026e8:	2200      	movs	r2, #0
 80026ea:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	441a      	add	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	4413      	add	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002700:	2300      	movs	r3, #0
 8002702:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	6839      	ldr	r1, [r7, #0]
 800270a:	440a      	add	r2, r1
 800270c:	7812      	ldrb	r2, [r2, #0]
 800270e:	4313      	orrs	r3, r2
 8002710:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	3301      	adds	r3, #1
 8002718:	6839      	ldr	r1, [r7, #0]
 800271a:	440b      	add	r3, r1
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	021b      	lsls	r3, r3, #8
 8002720:	4313      	orrs	r3, r2
 8002722:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	3302      	adds	r3, #2
 800272a:	6839      	ldr	r1, [r7, #0]
 800272c:	440b      	add	r3, r1
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	041b      	lsls	r3, r3, #16
 8002732:	4313      	orrs	r3, r2
 8002734:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	3303      	adds	r3, #3
 800273c:	6839      	ldr	r1, [r7, #0]
 800273e:	440b      	add	r3, r1
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	061b      	lsls	r3, r3, #24
 8002744:	4313      	orrs	r3, r2
 8002746:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002748:	68ba      	ldr	r2, [r7, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	3304      	adds	r3, #4
 8002752:	61bb      	str	r3, [r7, #24]
     return offset;
 8002754:	69bb      	ldr	r3, [r7, #24]
    }
 8002756:	4618      	mov	r0, r3
 8002758:	3728      	adds	r7, #40	; 0x28
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
	...

08002760 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	4b03      	ldr	r3, [pc, #12]	; (8002778 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800276a:	4618      	mov	r0, r3
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	08010524 	.word	0x08010524

0800277c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	4b03      	ldr	r3, [pc, #12]	; (8002794 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8002786:	4618      	mov	r0, r3
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	08010540 	.word	0x08010540

08002798 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff fd34 	bl	8002210 <_ZN3ros3MsgC1Ev>
 80027a8:	4a06      	ldr	r2, [pc, #24]	; (80027c4 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	601a      	str	r2, [r3, #0]
      level(0),
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	711a      	strb	r2, [r3, #4]
      msg("")
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a04      	ldr	r2, [pc, #16]	; (80027c8 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80027b8:	609a      	str	r2, [r3, #8]
    {
    }
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4618      	mov	r0, r3
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	080107bc 	.word	0x080107bc
 80027c8:	08010520 	.word	0x08010520

080027cc <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	4413      	add	r3, r2
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	7912      	ldrb	r2, [r2, #4]
 80027e4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	3301      	adds	r3, #1
 80027ea:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fd fd8d 	bl	8000310 <strlen>
 80027f6:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	4413      	add	r3, r2
 80027fe:	68b9      	ldr	r1, [r7, #8]
 8002800:	4618      	mov	r0, r3
 8002802:	f001 fc95 	bl	8004130 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	3304      	adds	r3, #4
 800280a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	18d0      	adds	r0, r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	4619      	mov	r1, r3
 800281a:	f00d fd3d 	bl	8010298 <memcpy>
      offset += length_msg;
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	4413      	add	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]
      return offset;
 8002826:	68fb      	ldr	r3, [r7, #12]
    }
 8002828:	4618      	mov	r0, r3
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800283a:	2300      	movs	r3, #0
 800283c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	4413      	add	r3, r2
 8002844:	781a      	ldrb	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	3301      	adds	r3, #1
 800284e:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	441a      	add	r2, r3
 8002856:	f107 030c 	add.w	r3, r7, #12
 800285a:	4611      	mov	r1, r2
 800285c:	4618      	mov	r0, r3
 800285e:	f001 fc86 	bl	800416e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	3304      	adds	r3, #4
 8002866:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	617b      	str	r3, [r7, #20]
 800286c:	e00b      	b.n	8002886 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	441a      	add	r2, r3
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	3b01      	subs	r3, #1
 8002878:	6839      	ldr	r1, [r7, #0]
 800287a:	440b      	add	r3, r1
 800287c:	7812      	ldrb	r2, [r2, #0]
 800287e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	3301      	adds	r3, #1
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4413      	add	r3, r2
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	429a      	cmp	r2, r3
 8002890:	d3ed      	bcc.n	800286e <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4413      	add	r3, r2
 8002898:	3b01      	subs	r3, #1
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	4413      	add	r3, r2
 800289e:	2200      	movs	r2, #0
 80028a0:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	3b01      	subs	r3, #1
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	441a      	add	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4413      	add	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
     return offset;
 80028b6:	693b      	ldr	r3, [r7, #16]
    }
 80028b8:	4618      	mov	r0, r3
 80028ba:	3718      	adds	r7, #24
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	4b03      	ldr	r3, [pc, #12]	; (80028d8 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80028ca:	4618      	mov	r0, r3
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	08010564 	.word	0x08010564

080028dc <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	4b03      	ldr	r3, [pc, #12]	; (80028f4 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80028e6:	4618      	mov	r0, r3
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	08010578 	.word	0x08010578

080028f8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff fc84 	bl	8002210 <_ZN3ros3MsgC1Ev>
 8002908:	4a0c      	ldr	r2, [pc, #48]	; (800293c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	601a      	str	r2, [r3, #0]
      ints_length(0), ints(NULL),
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	605a      	str	r2, [r3, #4]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	60da      	str	r2, [r3, #12]
      floats_length(0), floats(NULL),
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	611a      	str	r2, [r3, #16]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	619a      	str	r2, [r3, #24]
      strings_length(0), strings(NULL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	61da      	str	r2, [r3, #28]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4618      	mov	r0, r3
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	080107a4 	.word	0x080107a4

08002940 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002940:	b580      	push	{r7, lr}
 8002942:	b08a      	sub	sp, #40	; 0x28
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800294a:	2300      	movs	r3, #0
 800294c:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6859      	ldr	r1, [r3, #4]
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	4413      	add	r3, r2
 8002958:	b2ca      	uxtb	r2, r1
 800295a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	0a19      	lsrs	r1, r3, #8
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	3301      	adds	r3, #1
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	4413      	add	r3, r2
 800296a:	b2ca      	uxtb	r2, r1
 800296c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	0c19      	lsrs	r1, r3, #16
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	3302      	adds	r3, #2
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	4413      	add	r3, r2
 800297c:	b2ca      	uxtb	r2, r1
 800297e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	0e19      	lsrs	r1, r3, #24
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	3303      	adds	r3, #3
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	4413      	add	r3, r2
 800298e:	b2ca      	uxtb	r2, r1
 8002990:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	3304      	adds	r3, #4
 8002996:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002998:	2300      	movs	r3, #0
 800299a:	623b      	str	r3, [r7, #32]
 800299c:	e02a      	b.n	80029f4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68da      	ldr	r2, [r3, #12]
 80029a2:	6a3b      	ldr	r3, [r7, #32]
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80029ac:	6939      	ldr	r1, [r7, #16]
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	4413      	add	r3, r2
 80029b4:	b2ca      	uxtb	r2, r1
 80029b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	0a19      	lsrs	r1, r3, #8
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	3301      	adds	r3, #1
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	4413      	add	r3, r2
 80029c4:	b2ca      	uxtb	r2, r1
 80029c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	0c19      	lsrs	r1, r3, #16
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	3302      	adds	r3, #2
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	4413      	add	r3, r2
 80029d4:	b2ca      	uxtb	r2, r1
 80029d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	0e19      	lsrs	r1, r3, #24
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	3303      	adds	r3, #3
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	4413      	add	r3, r2
 80029e4:	b2ca      	uxtb	r2, r1
 80029e6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	3304      	adds	r3, #4
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80029ee:	6a3b      	ldr	r3, [r7, #32]
 80029f0:	3301      	adds	r3, #1
 80029f2:	623b      	str	r3, [r7, #32]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	6a3a      	ldr	r2, [r7, #32]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d3cf      	bcc.n	800299e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6919      	ldr	r1, [r3, #16]
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	4413      	add	r3, r2
 8002a08:	b2ca      	uxtb	r2, r1
 8002a0a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	0a19      	lsrs	r1, r3, #8
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	3301      	adds	r3, #1
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	4413      	add	r3, r2
 8002a1a:	b2ca      	uxtb	r2, r1
 8002a1c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	0c19      	lsrs	r1, r3, #16
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	3302      	adds	r3, #2
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	b2ca      	uxtb	r2, r1
 8002a2e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	0e19      	lsrs	r1, r3, #24
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	3303      	adds	r3, #3
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	b2ca      	uxtb	r2, r1
 8002a40:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	3304      	adds	r3, #4
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002a48:	2300      	movs	r3, #0
 8002a4a:	61fb      	str	r3, [r7, #28]
 8002a4c:	e02a      	b.n	8002aa4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	699a      	ldr	r2, [r3, #24]
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002a5c:	68f9      	ldr	r1, [r7, #12]
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	4413      	add	r3, r2
 8002a64:	b2ca      	uxtb	r2, r1
 8002a66:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	0a19      	lsrs	r1, r3, #8
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	3301      	adds	r3, #1
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	4413      	add	r3, r2
 8002a74:	b2ca      	uxtb	r2, r1
 8002a76:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	0c19      	lsrs	r1, r3, #16
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	3302      	adds	r3, #2
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	4413      	add	r3, r2
 8002a84:	b2ca      	uxtb	r2, r1
 8002a86:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	0e19      	lsrs	r1, r3, #24
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8e:	3303      	adds	r3, #3
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	4413      	add	r3, r2
 8002a94:	b2ca      	uxtb	r2, r1
 8002a96:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	3304      	adds	r3, #4
 8002a9c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	61fb      	str	r3, [r7, #28]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	69fa      	ldr	r2, [r7, #28]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d3cf      	bcc.n	8002a4e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69d9      	ldr	r1, [r3, #28]
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	b2ca      	uxtb	r2, r1
 8002aba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	0a19      	lsrs	r1, r3, #8
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	4413      	add	r3, r2
 8002aca:	b2ca      	uxtb	r2, r1
 8002acc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	0c19      	lsrs	r1, r3, #16
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	3302      	adds	r3, #2
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	4413      	add	r3, r2
 8002adc:	b2ca      	uxtb	r2, r1
 8002ade:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	0e19      	lsrs	r1, r3, #24
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	3303      	adds	r3, #3
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	4413      	add	r3, r2
 8002aee:	b2ca      	uxtb	r2, r1
 8002af0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	3304      	adds	r3, #4
 8002af6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002af8:	2300      	movs	r3, #0
 8002afa:	61bb      	str	r3, [r7, #24]
 8002afc:	e027      	b.n	8002b4e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fd fc00 	bl	8000310 <strlen>
 8002b10:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	4413      	add	r3, r2
 8002b18:	6979      	ldr	r1, [r7, #20]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f001 fb08 	bl	8004130 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b22:	3304      	adds	r3, #4
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	18d0      	adds	r0, r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	f00d fbac 	bl	8010298 <memcpy>
      offset += length_stringsi;
 8002b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	4413      	add	r3, r2
 8002b46:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	61bb      	str	r3, [r7, #24]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d3d2      	bcc.n	8002afe <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3728      	adds	r7, #40	; 0x28
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b08e      	sub	sp, #56	; 0x38
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
 8002b6a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	4413      	add	r3, r2
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	4413      	add	r3, r2
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	021b      	lsls	r3, r3, #8
 8002b86:	6a3a      	ldr	r2, [r7, #32]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b8e:	3302      	adds	r3, #2
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	4413      	add	r3, r2
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	041b      	lsls	r3, r3, #16
 8002b98:	6a3a      	ldr	r2, [r7, #32]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ba0:	3303      	adds	r3, #3
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	061b      	lsls	r3, r3, #24
 8002baa:	6a3a      	ldr	r2, [r7, #32]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb2:	3304      	adds	r3, #4
 8002bb4:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	6a3a      	ldr	r2, [r7, #32]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d90a      	bls.n	8002bd6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68da      	ldr	r2, [r3, #12]
 8002bc4:	6a3b      	ldr	r3, [r7, #32]
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4619      	mov	r1, r3
 8002bca:	4610      	mov	r0, r2
 8002bcc:	f00d faf8 	bl	80101c0 <realloc>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a3a      	ldr	r2, [r7, #32]
 8002bda:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002bdc:	2300      	movs	r3, #0
 8002bde:	633b      	str	r3, [r7, #48]	; 0x30
 8002be0:	e035      	b.n	8002c4e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bea:	6839      	ldr	r1, [r7, #0]
 8002bec:	440a      	add	r2, r1
 8002bee:	7812      	ldrb	r2, [r2, #0]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	6839      	ldr	r1, [r7, #0]
 8002bfc:	440b      	add	r3, r1
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	021b      	lsls	r3, r3, #8
 8002c02:	4313      	orrs	r3, r2
 8002c04:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c0a:	3302      	adds	r3, #2
 8002c0c:	6839      	ldr	r1, [r7, #0]
 8002c0e:	440b      	add	r3, r1
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	041b      	lsls	r3, r3, #16
 8002c14:	4313      	orrs	r3, r2
 8002c16:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c1c:	3303      	adds	r3, #3
 8002c1e:	6839      	ldr	r1, [r7, #0]
 8002c20:	440b      	add	r3, r1
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	061b      	lsls	r3, r3, #24
 8002c26:	4313      	orrs	r3, r2
 8002c28:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c32:	3304      	adds	r3, #4
 8002c34:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68da      	ldr	r2, [r3, #12]
 8002c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	3208      	adds	r2, #8
 8002c44:	6812      	ldr	r2, [r2, #0]
 8002c46:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	633b      	str	r3, [r7, #48]	; 0x30
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d3c4      	bcc.n	8002be2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c64:	3301      	adds	r3, #1
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	4413      	add	r3, r2
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	021b      	lsls	r3, r3, #8
 8002c6e:	69fa      	ldr	r2, [r7, #28]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c76:	3302      	adds	r3, #2
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	041b      	lsls	r3, r3, #16
 8002c80:	69fa      	ldr	r2, [r7, #28]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c88:	3303      	adds	r3, #3
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	061b      	lsls	r3, r3, #24
 8002c92:	69fa      	ldr	r2, [r7, #28]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	69fa      	ldr	r2, [r7, #28]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d90a      	bls.n	8002cbe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	699a      	ldr	r2, [r3, #24]
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4610      	mov	r0, r2
 8002cb4:	f00d fa84 	bl	80101c0 <realloc>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	69fa      	ldr	r2, [r7, #28]
 8002cc2:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cc8:	e035      	b.n	8002d36 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cd2:	6839      	ldr	r1, [r7, #0]
 8002cd4:	440a      	add	r2, r1
 8002cd6:	7812      	ldrb	r2, [r2, #0]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	6839      	ldr	r1, [r7, #0]
 8002ce4:	440b      	add	r3, r1
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	021b      	lsls	r3, r3, #8
 8002cea:	4313      	orrs	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cf2:	3302      	adds	r3, #2
 8002cf4:	6839      	ldr	r1, [r7, #0]
 8002cf6:	440b      	add	r3, r1
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	041b      	lsls	r3, r3, #16
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d04:	3303      	adds	r3, #3
 8002d06:	6839      	ldr	r1, [r7, #0]
 8002d08:	440b      	add	r3, r1
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	061b      	lsls	r3, r3, #24
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d1a:	3304      	adds	r3, #4
 8002d1c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	699a      	ldr	r2, [r3, #24]
 8002d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	3214      	adds	r2, #20
 8002d2c:	6812      	ldr	r2, [r2, #0]
 8002d2e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d32:	3301      	adds	r3, #1
 8002d34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d3c4      	bcc.n	8002cca <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	4413      	add	r3, r2
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	4413      	add	r3, r2
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	021b      	lsls	r3, r3, #8
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d5e:	3302      	adds	r3, #2
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	4413      	add	r3, r2
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	041b      	lsls	r3, r3, #16
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d70:	3303      	adds	r3, #3
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	4413      	add	r3, r2
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	061b      	lsls	r3, r3, #24
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d82:	3304      	adds	r3, #4
 8002d84:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d90a      	bls.n	8002da6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4610      	mov	r0, r2
 8002d9c:	f00d fa10 	bl	80101c0 <realloc>
 8002da0:	4602      	mov	r2, r0
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002dac:	2300      	movs	r3, #0
 8002dae:	62bb      	str	r3, [r7, #40]	; 0x28
 8002db0:	e03e      	b.n	8002e30 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	441a      	add	r2, r3
 8002db8:	f107 030c 	add.w	r3, r7, #12
 8002dbc:	4611      	mov	r1, r2
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f001 f9d5 	bl	800416e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dc6:	3304      	adds	r3, #4
 8002dc8:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dce:	e00b      	b.n	8002de8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	441a      	add	r2, r3
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	6839      	ldr	r1, [r7, #0]
 8002ddc:	440b      	add	r3, r1
 8002dde:	7812      	ldrb	r2, [r2, #0]
 8002de0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	3301      	adds	r3, #1
 8002de6:	627b      	str	r3, [r7, #36]	; 0x24
 8002de8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	4413      	add	r3, r2
 8002dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d3ed      	bcc.n	8002dd0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002df4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4413      	add	r3, r2
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	4413      	add	r3, r2
 8002e00:	2200      	movs	r2, #0
 8002e02:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e06:	3b01      	subs	r3, #1
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	441a      	add	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002e10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	4413      	add	r3, r2
 8002e16:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	3220      	adds	r2, #32
 8002e26:	6812      	ldr	r2, [r2, #0]
 8002e28:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d3bb      	bcc.n	8002db2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8002e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3738      	adds	r7, #56	; 0x38
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	4b03      	ldr	r3, [pc, #12]	; (8002e5c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002e4e:	4618      	mov	r0, r3
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	080106c8 	.word	0x080106c8

08002e60 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	4b03      	ldr	r3, [pc, #12]	; (8002e78 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	0801059c 	.word	0x0801059c

08002e7c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
 8002e88:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	611a      	str	r2, [r3, #16]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b082      	sub	sp, #8
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
 8002eb2:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68d8      	ldr	r0, [r3, #12]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6891      	ldr	r1, [r2, #8]
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	4798      	blx	r3
 8002ec8:	4603      	mov	r3, r0
  };
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691b      	ldr	r3, [r3, #16]
  }
 8002ede:	4618      	mov	r0, r3
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
	...

08002eec <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 2048;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a4b      	ldr	r2, [pc, #300]	; (800302c <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d077      	beq.n	8002ff4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a48      	ldr	r2, [pc, #288]	; (8003030 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d06f      	beq.n	8002ff4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a45      	ldr	r2, [pc, #276]	; (8003034 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d067      	beq.n	8002ff4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a42      	ldr	r2, [pc, #264]	; (8003038 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d05f      	beq.n	8002ff4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a3f      	ldr	r2, [pc, #252]	; (800303c <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d057      	beq.n	8002ff4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a3c      	ldr	r2, [pc, #240]	; (8003040 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d04f      	beq.n	8002ff4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a39      	ldr	r2, [pc, #228]	; (8003044 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d047      	beq.n	8002ff4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a36      	ldr	r2, [pc, #216]	; (8003048 <_ZN13STM32Hardware10getRdmaIndEv+0x15c>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d03f      	beq.n	8002ff4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a33      	ldr	r2, [pc, #204]	; (800304c <_ZN13STM32Hardware10getRdmaIndEv+0x160>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d037      	beq.n	8002ff4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a30      	ldr	r2, [pc, #192]	; (8003050 <_ZN13STM32Hardware10getRdmaIndEv+0x164>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d02f      	beq.n	8002ff4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a2d      	ldr	r2, [pc, #180]	; (8003054 <_ZN13STM32Hardware10getRdmaIndEv+0x168>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d027      	beq.n	8002ff4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a2a      	ldr	r2, [pc, #168]	; (8003058 <_ZN13STM32Hardware10getRdmaIndEv+0x16c>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d01f      	beq.n	8002ff4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a27      	ldr	r2, [pc, #156]	; (800305c <_ZN13STM32Hardware10getRdmaIndEv+0x170>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d017      	beq.n	8002ff4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a24      	ldr	r2, [pc, #144]	; (8003060 <_ZN13STM32Hardware10getRdmaIndEv+0x174>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d00f      	beq.n	8002ff4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a21      	ldr	r2, [pc, #132]	; (8003064 <_ZN13STM32Hardware10getRdmaIndEv+0x178>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d007      	beq.n	8002ff4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a1e      	ldr	r2, [pc, #120]	; (8003068 <_ZN13STM32Hardware10getRdmaIndEv+0x17c>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d10a      	bne.n	800300a <_ZN13STM32Hardware10getRdmaIndEv+0x11e>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8003004:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003008:	e009      	b.n	800301e <_ZN13STM32Hardware10getRdmaIndEv+0x132>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800301a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800301e:	4618      	mov	r0, r3
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	40020010 	.word	0x40020010
 8003030:	40020028 	.word	0x40020028
 8003034:	40020040 	.word	0x40020040
 8003038:	40020058 	.word	0x40020058
 800303c:	40020070 	.word	0x40020070
 8003040:	40020088 	.word	0x40020088
 8003044:	400200a0 	.word	0x400200a0
 8003048:	400200b8 	.word	0x400200b8
 800304c:	40020410 	.word	0x40020410
 8003050:	40020428 	.word	0x40020428
 8003054:	40020440 	.word	0x40020440
 8003058:	40020458 	.word	0x40020458
 800305c:	40020470 	.word	0x40020470
 8003060:	40020488 	.word	0x40020488
 8003064:	400204a0 	.word	0x400204a0
 8003068:	400204b8 	.word	0x400204b8

0800306c <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a0c      	ldr	r2, [pc, #48]	; (80030a8 <_ZN13STM32HardwareC1Ev+0x3c>)
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003088:	461a      	mov	r2, r3
 800308a:	2300      	movs	r3, #0
 800308c:	6093      	str	r3, [r2, #8]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003094:	461a      	mov	r2, r3
 8003096:	2300      	movs	r3, #0
 8003098:	60d3      	str	r3, [r2, #12]
    }
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4618      	mov	r0, r3
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	24000764 	.word	0x24000764

080030ac <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 f804 	bl	80030c2 <_ZN13STM32Hardware10reset_rbufEv>
    }
 80030ba:	bf00      	nop
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b082      	sub	sp, #8
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6818      	ldr	r0, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	3304      	adds	r3, #4
 80030d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030d6:	4619      	mov	r1, r3
 80030d8:	f00b f826 	bl	800e128 <HAL_UART_Receive_DMA>
    }
 80030dc:	bf00      	nop
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <_ZN13STM32Hardware4readEv>:

    int read(){
 80030e4:	b590      	push	{r4, r7, lr}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
      int c = -1;
 80030ec:	f04f 33ff 	mov.w	r3, #4294967295
 80030f0:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f7ff fef7 	bl	8002eec <_ZN13STM32Hardware10getRdmaIndEv>
 80030fe:	4603      	mov	r3, r0
 8003100:	429c      	cmp	r4, r3
 8003102:	bf14      	ite	ne
 8003104:	2301      	movne	r3, #1
 8003106:	2300      	moveq	r3, #0
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d012      	beq.n	8003134 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8003114:	1c59      	adds	r1, r3, #1
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	f8c2 1804 	str.w	r1, [r2, #2052]	; 0x804
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	4413      	add	r3, r2
 8003120:	791b      	ldrb	r3, [r3, #4]
 8003122:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800312a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      }
      return c;
 8003134:	68fb      	ldr	r3, [r7, #12]
    }
 8003136:	4618      	mov	r0, r3
 8003138:	3714      	adds	r7, #20
 800313a:	46bd      	mov	sp, r7
 800313c:	bd90      	pop	{r4, r7, pc}
	...

08003140 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003150:	2b20      	cmp	r3, #32
 8003152:	d108      	bne.n	8003166 <_ZN13STM32Hardware5flushEv+0x26>
 8003154:	4b2c      	ldr	r3, [pc, #176]	; (8003208 <_ZN13STM32Hardware5flushEv+0xc8>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	f083 0301 	eor.w	r3, r3, #1
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <_ZN13STM32Hardware5flushEv+0x26>
 8003162:	2301      	movs	r3, #1
 8003164:	e000      	b.n	8003168 <_ZN13STM32Hardware5flushEv+0x28>
 8003166:	2300      	movs	r3, #0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d049      	beq.n	8003200 <_ZN13STM32Hardware5flushEv+0xc0>
        mutex = true;
 800316c:	4b26      	ldr	r3, [pc, #152]	; (8003208 <_ZN13STM32Hardware5flushEv+0xc8>)
 800316e:	2201      	movs	r2, #1
 8003170:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	429a      	cmp	r2, r3
 8003184:	d039      	beq.n	80031fa <_ZN13STM32Hardware5flushEv+0xba>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800318c:	68da      	ldr	r2, [r3, #12]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	429a      	cmp	r2, r3
 8003198:	d20c      	bcs.n	80031b4 <_ZN13STM32Hardware5flushEv+0x74>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	e007      	b.n	80031c4 <_ZN13STM32Hardware5flushEv+0x84>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	b29b      	uxth	r3, r3
 80031be:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6818      	ldr	r0, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f603 0308 	addw	r3, r3, #2056	; 0x808
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	4413      	add	r3, r2
 80031da:	89fa      	ldrh	r2, [r7, #14]
 80031dc:	4619      	mov	r1, r3
 80031de:	f00a ff23 	bl	800e028 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031e8:	68da      	ldr	r2, [r3, #12]
 80031ea:	89fb      	ldrh	r3, [r7, #14]
 80031ec:	4413      	add	r3, r2
 80031ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80031f8:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 80031fa:	4b03      	ldr	r3, [pc, #12]	; (8003208 <_ZN13STM32Hardware5flushEv+0xc8>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	701a      	strb	r2, [r3, #0]
      }
    }
 8003200:	bf00      	nop
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	24000a00 	.word	0x24000a00

0800320c <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
      int n = length;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003222:	bfa8      	it	ge
 8003224:	f44f 6300 	movge.w	r3, #2048	; 0x800
 8003228:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	4293      	cmp	r3, r2
 800323a:	bf28      	it	cs
 800323c:	4613      	movcs	r3, r2
 800323e:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f603 0308 	addw	r3, r3, #2056	; 0x808
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	4413      	add	r3, r2
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	68b9      	ldr	r1, [r7, #8]
 8003254:	4618      	mov	r0, r3
 8003256:	f00d f81f 	bl	8010298 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003260:	689a      	ldr	r2, [r3, #8]
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	4413      	add	r3, r2
 8003266:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003270:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	429a      	cmp	r2, r3
 8003278:	d00b      	beq.n	8003292 <_ZN13STM32Hardware5writeEPhi+0x86>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f603 0008 	addw	r0, r3, #2056	; 0x808
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	18d1      	adds	r1, r2, r3
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	461a      	mov	r2, r3
 800328e:	f00d f803 	bl	8010298 <memcpy>
      }

      flush();
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f7ff ff54 	bl	8003140 <_ZN13STM32Hardware5flushEv>
    }
 8003298:	bf00      	nop
 800329a:	3718      	adds	r7, #24
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	f002 ffaa 	bl	8006200 <HAL_GetTick>
 80032ac:	4603      	mov	r3, r0
 80032ae:	4618      	mov	r0, r3
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
	...

080032b8 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fe ffa4 	bl	8002210 <_ZN3ros3MsgC1Ev>
 80032c8:	4a0e      	ldr	r2, [pc, #56]	; (8003304 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	601a      	str	r2, [r3, #0]
      x(0),
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	f04f 0200 	mov.w	r2, #0
 80032d4:	f04f 0300 	mov.w	r3, #0
 80032d8:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	f04f 0200 	mov.w	r2, #0
 80032e2:	f04f 0300 	mov.w	r3, #0
 80032e6:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0)
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	f04f 0200 	mov.w	r2, #0
 80032f0:	f04f 0300 	mov.w	r3, #0
 80032f4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4618      	mov	r0, r3
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	08010760 	.word	0x08010760

08003308 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003308:	b480      	push	{r7}
 800330a:	b08b      	sub	sp, #44	; 0x2c
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003312:	2300      	movs	r3, #0
 8003314:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800331c:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8003320:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003324:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003326:	6838      	ldr	r0, [r7, #0]
 8003328:	4401      	add	r1, r0
 800332a:	b2d3      	uxtb	r3, r2
 800332c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800332e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	0a02      	lsrs	r2, r0, #8
 800333c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003340:	0a0b      	lsrs	r3, r1, #8
 8003342:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003344:	3101      	adds	r1, #1
 8003346:	6838      	ldr	r0, [r7, #0]
 8003348:	4401      	add	r1, r0
 800334a:	b2d3      	uxtb	r3, r2
 800334c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800334e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003352:	f04f 0200 	mov.w	r2, #0
 8003356:	f04f 0300 	mov.w	r3, #0
 800335a:	0c02      	lsrs	r2, r0, #16
 800335c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003360:	0c0b      	lsrs	r3, r1, #16
 8003362:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003364:	3102      	adds	r1, #2
 8003366:	6838      	ldr	r0, [r7, #0]
 8003368:	4401      	add	r1, r0
 800336a:	b2d3      	uxtb	r3, r2
 800336c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800336e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003372:	f04f 0200 	mov.w	r2, #0
 8003376:	f04f 0300 	mov.w	r3, #0
 800337a:	0e02      	lsrs	r2, r0, #24
 800337c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003380:	0e0b      	lsrs	r3, r1, #24
 8003382:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003384:	3103      	adds	r1, #3
 8003386:	6838      	ldr	r0, [r7, #0]
 8003388:	4401      	add	r1, r0
 800338a:	b2d3      	uxtb	r3, r2
 800338c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800338e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	f04f 0300 	mov.w	r3, #0
 800339a:	000a      	movs	r2, r1
 800339c:	2300      	movs	r3, #0
 800339e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033a0:	3104      	adds	r1, #4
 80033a2:	6838      	ldr	r0, [r7, #0]
 80033a4:	4401      	add	r1, r0
 80033a6:	b2d3      	uxtb	r3, r2
 80033a8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80033aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80033ae:	f04f 0200 	mov.w	r2, #0
 80033b2:	f04f 0300 	mov.w	r3, #0
 80033b6:	0a0a      	lsrs	r2, r1, #8
 80033b8:	2300      	movs	r3, #0
 80033ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033bc:	3105      	adds	r1, #5
 80033be:	6838      	ldr	r0, [r7, #0]
 80033c0:	4401      	add	r1, r0
 80033c2:	b2d3      	uxtb	r3, r2
 80033c4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80033c6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80033ca:	f04f 0200 	mov.w	r2, #0
 80033ce:	f04f 0300 	mov.w	r3, #0
 80033d2:	0c0a      	lsrs	r2, r1, #16
 80033d4:	2300      	movs	r3, #0
 80033d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033d8:	3106      	adds	r1, #6
 80033da:	6838      	ldr	r0, [r7, #0]
 80033dc:	4401      	add	r1, r0
 80033de:	b2d3      	uxtb	r3, r2
 80033e0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80033e2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80033e6:	f04f 0200 	mov.w	r2, #0
 80033ea:	f04f 0300 	mov.w	r3, #0
 80033ee:	0e0a      	lsrs	r2, r1, #24
 80033f0:	2300      	movs	r3, #0
 80033f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033f4:	3107      	adds	r1, #7
 80033f6:	6838      	ldr	r0, [r7, #0]
 80033f8:	4401      	add	r1, r0
 80033fa:	b2d3      	uxtb	r3, r2
 80033fc:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80033fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003400:	3308      	adds	r3, #8
 8003402:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800340a:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800340e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003412:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003414:	6838      	ldr	r0, [r7, #0]
 8003416:	4401      	add	r1, r0
 8003418:	b2d3      	uxtb	r3, r2
 800341a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 800341c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003420:	f04f 0200 	mov.w	r2, #0
 8003424:	f04f 0300 	mov.w	r3, #0
 8003428:	0a02      	lsrs	r2, r0, #8
 800342a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800342e:	0a0b      	lsrs	r3, r1, #8
 8003430:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003432:	3101      	adds	r1, #1
 8003434:	6838      	ldr	r0, [r7, #0]
 8003436:	4401      	add	r1, r0
 8003438:	b2d3      	uxtb	r3, r2
 800343a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 800343c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003440:	f04f 0200 	mov.w	r2, #0
 8003444:	f04f 0300 	mov.w	r3, #0
 8003448:	0c02      	lsrs	r2, r0, #16
 800344a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800344e:	0c0b      	lsrs	r3, r1, #16
 8003450:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003452:	3102      	adds	r1, #2
 8003454:	6838      	ldr	r0, [r7, #0]
 8003456:	4401      	add	r1, r0
 8003458:	b2d3      	uxtb	r3, r2
 800345a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 800345c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003460:	f04f 0200 	mov.w	r2, #0
 8003464:	f04f 0300 	mov.w	r3, #0
 8003468:	0e02      	lsrs	r2, r0, #24
 800346a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800346e:	0e0b      	lsrs	r3, r1, #24
 8003470:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003472:	3103      	adds	r1, #3
 8003474:	6838      	ldr	r0, [r7, #0]
 8003476:	4401      	add	r1, r0
 8003478:	b2d3      	uxtb	r3, r2
 800347a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 800347c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003480:	f04f 0200 	mov.w	r2, #0
 8003484:	f04f 0300 	mov.w	r3, #0
 8003488:	000a      	movs	r2, r1
 800348a:	2300      	movs	r3, #0
 800348c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800348e:	3104      	adds	r1, #4
 8003490:	6838      	ldr	r0, [r7, #0]
 8003492:	4401      	add	r1, r0
 8003494:	b2d3      	uxtb	r3, r2
 8003496:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8003498:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800349c:	f04f 0200 	mov.w	r2, #0
 80034a0:	f04f 0300 	mov.w	r3, #0
 80034a4:	0a0a      	lsrs	r2, r1, #8
 80034a6:	2300      	movs	r3, #0
 80034a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034aa:	3105      	adds	r1, #5
 80034ac:	6838      	ldr	r0, [r7, #0]
 80034ae:	4401      	add	r1, r0
 80034b0:	b2d3      	uxtb	r3, r2
 80034b2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80034b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80034b8:	f04f 0200 	mov.w	r2, #0
 80034bc:	f04f 0300 	mov.w	r3, #0
 80034c0:	0c0a      	lsrs	r2, r1, #16
 80034c2:	2300      	movs	r3, #0
 80034c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034c6:	3106      	adds	r1, #6
 80034c8:	6838      	ldr	r0, [r7, #0]
 80034ca:	4401      	add	r1, r0
 80034cc:	b2d3      	uxtb	r3, r2
 80034ce:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80034d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80034d4:	f04f 0200 	mov.w	r2, #0
 80034d8:	f04f 0300 	mov.w	r3, #0
 80034dc:	0e0a      	lsrs	r2, r1, #24
 80034de:	2300      	movs	r3, #0
 80034e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034e2:	3107      	adds	r1, #7
 80034e4:	6838      	ldr	r0, [r7, #0]
 80034e6:	4401      	add	r1, r0
 80034e8:	b2d3      	uxtb	r3, r2
 80034ea:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	3308      	adds	r3, #8
 80034f0:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80034f8:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80034fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003500:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003502:	6838      	ldr	r0, [r7, #0]
 8003504:	4401      	add	r1, r0
 8003506:	b2d3      	uxtb	r3, r2
 8003508:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 800350a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800350e:	f04f 0200 	mov.w	r2, #0
 8003512:	f04f 0300 	mov.w	r3, #0
 8003516:	0a02      	lsrs	r2, r0, #8
 8003518:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800351c:	0a0b      	lsrs	r3, r1, #8
 800351e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003520:	3101      	adds	r1, #1
 8003522:	6838      	ldr	r0, [r7, #0]
 8003524:	4401      	add	r1, r0
 8003526:	b2d3      	uxtb	r3, r2
 8003528:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 800352a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800352e:	f04f 0200 	mov.w	r2, #0
 8003532:	f04f 0300 	mov.w	r3, #0
 8003536:	0c02      	lsrs	r2, r0, #16
 8003538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800353c:	0c0b      	lsrs	r3, r1, #16
 800353e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003540:	3102      	adds	r1, #2
 8003542:	6838      	ldr	r0, [r7, #0]
 8003544:	4401      	add	r1, r0
 8003546:	b2d3      	uxtb	r3, r2
 8003548:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 800354a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800354e:	f04f 0200 	mov.w	r2, #0
 8003552:	f04f 0300 	mov.w	r3, #0
 8003556:	0e02      	lsrs	r2, r0, #24
 8003558:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800355c:	0e0b      	lsrs	r3, r1, #24
 800355e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003560:	3103      	adds	r1, #3
 8003562:	6838      	ldr	r0, [r7, #0]
 8003564:	4401      	add	r1, r0
 8003566:	b2d3      	uxtb	r3, r2
 8003568:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 800356a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800356e:	f04f 0200 	mov.w	r2, #0
 8003572:	f04f 0300 	mov.w	r3, #0
 8003576:	000a      	movs	r2, r1
 8003578:	2300      	movs	r3, #0
 800357a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800357c:	3104      	adds	r1, #4
 800357e:	6838      	ldr	r0, [r7, #0]
 8003580:	4401      	add	r1, r0
 8003582:	b2d3      	uxtb	r3, r2
 8003584:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8003586:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800358a:	f04f 0200 	mov.w	r2, #0
 800358e:	f04f 0300 	mov.w	r3, #0
 8003592:	0a0a      	lsrs	r2, r1, #8
 8003594:	2300      	movs	r3, #0
 8003596:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003598:	3105      	adds	r1, #5
 800359a:	6838      	ldr	r0, [r7, #0]
 800359c:	4401      	add	r1, r0
 800359e:	b2d3      	uxtb	r3, r2
 80035a0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80035a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035a6:	f04f 0200 	mov.w	r2, #0
 80035aa:	f04f 0300 	mov.w	r3, #0
 80035ae:	0c0a      	lsrs	r2, r1, #16
 80035b0:	2300      	movs	r3, #0
 80035b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035b4:	3106      	adds	r1, #6
 80035b6:	6838      	ldr	r0, [r7, #0]
 80035b8:	4401      	add	r1, r0
 80035ba:	b2d3      	uxtb	r3, r2
 80035bc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80035be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035c2:	f04f 0200 	mov.w	r2, #0
 80035c6:	f04f 0300 	mov.w	r3, #0
 80035ca:	0e0a      	lsrs	r2, r1, #24
 80035cc:	2300      	movs	r3, #0
 80035ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035d0:	3107      	adds	r1, #7
 80035d2:	6838      	ldr	r0, [r7, #0]
 80035d4:	4401      	add	r1, r0
 80035d6:	b2d3      	uxtb	r3, r2
 80035d8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	3308      	adds	r3, #8
 80035de:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 80035e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80035e2:	4618      	mov	r0, r3
 80035e4:	372c      	adds	r7, #44	; 0x2c
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80035ee:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80035f2:	b0eb      	sub	sp, #428	; 0x1ac
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 80035fa:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 80035fe:	2300      	movs	r3, #0
 8003600:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8003604:	f04f 0200 	mov.w	r2, #0
 8003608:	f04f 0300 	mov.w	r3, #0
 800360c:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003610:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003614:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003618:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800361c:	4413      	add	r3, r2
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2200      	movs	r2, #0
 8003624:	461c      	mov	r4, r3
 8003626:	4615      	mov	r5, r2
 8003628:	ea40 0804 	orr.w	r8, r0, r4
 800362c:	ea41 0905 	orr.w	r9, r1, r5
 8003630:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003634:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003638:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800363c:	1c5a      	adds	r2, r3, #1
 800363e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003642:	4413      	add	r3, r2
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2200      	movs	r2, #0
 800364a:	469a      	mov	sl, r3
 800364c:	4693      	mov	fp, r2
 800364e:	f04f 0200 	mov.w	r2, #0
 8003652:	f04f 0300 	mov.w	r3, #0
 8003656:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800365a:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800365e:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8003662:	ea40 0402 	orr.w	r4, r0, r2
 8003666:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 800366a:	430b      	orrs	r3, r1
 800366c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003670:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8003674:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003678:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800367c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003680:	1c9a      	adds	r2, r3, #2
 8003682:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003686:	4413      	add	r3, r2
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2200      	movs	r2, #0
 800368e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8003692:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8003696:	f04f 0200 	mov.w	r2, #0
 800369a:	f04f 0300 	mov.w	r3, #0
 800369e:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 80036a2:	464c      	mov	r4, r9
 80036a4:	0423      	lsls	r3, r4, #16
 80036a6:	4644      	mov	r4, r8
 80036a8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80036ac:	4644      	mov	r4, r8
 80036ae:	0422      	lsls	r2, r4, #16
 80036b0:	ea40 0402 	orr.w	r4, r0, r2
 80036b4:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 80036b8:	430b      	orrs	r3, r1
 80036ba:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80036be:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 80036c2:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80036c6:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80036ca:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80036ce:	1cda      	adds	r2, r3, #3
 80036d0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80036d4:	4413      	add	r3, r2
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2200      	movs	r2, #0
 80036dc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80036e0:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80036e4:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80036e8:	4623      	mov	r3, r4
 80036ea:	0a1b      	lsrs	r3, r3, #8
 80036ec:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80036f0:	4623      	mov	r3, r4
 80036f2:	061b      	lsls	r3, r3, #24
 80036f4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80036f8:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 80036fc:	4623      	mov	r3, r4
 80036fe:	4303      	orrs	r3, r0
 8003700:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003704:	462b      	mov	r3, r5
 8003706:	430b      	orrs	r3, r1
 8003708:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800370c:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8003710:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003714:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003718:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800371c:	1d1a      	adds	r2, r3, #4
 800371e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003722:	4413      	add	r3, r2
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2200      	movs	r2, #0
 800372a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800372e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003732:	f04f 0200 	mov.w	r2, #0
 8003736:	f04f 0300 	mov.w	r3, #0
 800373a:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 800373e:	0023      	movs	r3, r4
 8003740:	2200      	movs	r2, #0
 8003742:	ea40 0402 	orr.w	r4, r0, r2
 8003746:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800374a:	430b      	orrs	r3, r1
 800374c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003750:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003754:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003758:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800375c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003760:	1d5a      	adds	r2, r3, #5
 8003762:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003766:	4413      	add	r3, r2
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2200      	movs	r2, #0
 800376e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003772:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8003776:	f04f 0200 	mov.w	r2, #0
 800377a:	f04f 0300 	mov.w	r3, #0
 800377e:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8003782:	0223      	lsls	r3, r4, #8
 8003784:	2200      	movs	r2, #0
 8003786:	ea40 0402 	orr.w	r4, r0, r2
 800378a:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800378e:	430b      	orrs	r3, r1
 8003790:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8003794:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8003798:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800379c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80037a0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80037a4:	1d9a      	adds	r2, r3, #6
 80037a6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80037aa:	4413      	add	r3, r2
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2200      	movs	r2, #0
 80037b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80037b6:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80037ba:	f04f 0200 	mov.w	r2, #0
 80037be:	f04f 0300 	mov.w	r3, #0
 80037c2:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 80037c6:	0423      	lsls	r3, r4, #16
 80037c8:	2200      	movs	r2, #0
 80037ca:	ea40 0402 	orr.w	r4, r0, r2
 80037ce:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 80037d2:	430b      	orrs	r3, r1
 80037d4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80037d8:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 80037dc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80037e0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80037e4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80037e8:	1dda      	adds	r2, r3, #7
 80037ea:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80037ee:	4413      	add	r3, r2
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2200      	movs	r2, #0
 80037f6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80037fa:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80037fe:	f04f 0200 	mov.w	r2, #0
 8003802:	f04f 0300 	mov.w	r3, #0
 8003806:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 800380a:	0623      	lsls	r3, r4, #24
 800380c:	2200      	movs	r2, #0
 800380e:	ea40 0402 	orr.w	r4, r0, r2
 8003812:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8003816:	430b      	orrs	r3, r1
 8003818:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800381c:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8003820:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8003824:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003828:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800382c:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8003830:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003834:	3308      	adds	r3, #8
 8003836:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 800383a:	f04f 0200 	mov.w	r2, #0
 800383e:	f04f 0300 	mov.w	r3, #0
 8003842:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003846:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800384a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800384e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003852:	4413      	add	r3, r2
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2200      	movs	r2, #0
 800385a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800385e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8003862:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8003866:	4623      	mov	r3, r4
 8003868:	4303      	orrs	r3, r0
 800386a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800386e:	462b      	mov	r3, r5
 8003870:	430b      	orrs	r3, r1
 8003872:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003876:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800387a:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800387e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003882:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003886:	1c5a      	adds	r2, r3, #1
 8003888:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800388c:	4413      	add	r3, r2
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2200      	movs	r2, #0
 8003894:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003898:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800389c:	f04f 0200 	mov.w	r2, #0
 80038a0:	f04f 0300 	mov.w	r3, #0
 80038a4:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 80038a8:	464c      	mov	r4, r9
 80038aa:	0223      	lsls	r3, r4, #8
 80038ac:	4644      	mov	r4, r8
 80038ae:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80038b2:	4644      	mov	r4, r8
 80038b4:	0222      	lsls	r2, r4, #8
 80038b6:	ea40 0402 	orr.w	r4, r0, r2
 80038ba:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 80038be:	430b      	orrs	r3, r1
 80038c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80038c4:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80038c8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80038cc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80038d0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80038d4:	1c9a      	adds	r2, r3, #2
 80038d6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80038da:	4413      	add	r3, r2
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2200      	movs	r2, #0
 80038e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80038e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80038ea:	f04f 0200 	mov.w	r2, #0
 80038ee:	f04f 0300 	mov.w	r3, #0
 80038f2:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80038f6:	464c      	mov	r4, r9
 80038f8:	0423      	lsls	r3, r4, #16
 80038fa:	4644      	mov	r4, r8
 80038fc:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003900:	4644      	mov	r4, r8
 8003902:	0422      	lsls	r2, r4, #16
 8003904:	ea40 0402 	orr.w	r4, r0, r2
 8003908:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 800390c:	430b      	orrs	r3, r1
 800390e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003912:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8003916:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800391a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800391e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003922:	1cda      	adds	r2, r3, #3
 8003924:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003928:	4413      	add	r3, r2
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2200      	movs	r2, #0
 8003930:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003934:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003938:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800393c:	4623      	mov	r3, r4
 800393e:	0a1b      	lsrs	r3, r3, #8
 8003940:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003944:	4623      	mov	r3, r4
 8003946:	061b      	lsls	r3, r3, #24
 8003948:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800394c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003950:	4623      	mov	r3, r4
 8003952:	4303      	orrs	r3, r0
 8003954:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003958:	462b      	mov	r3, r5
 800395a:	430b      	orrs	r3, r1
 800395c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003960:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8003964:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003968:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800396c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003970:	1d1a      	adds	r2, r3, #4
 8003972:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003976:	4413      	add	r3, r2
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2200      	movs	r2, #0
 800397e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003982:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003986:	f04f 0200 	mov.w	r2, #0
 800398a:	f04f 0300 	mov.w	r3, #0
 800398e:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8003992:	0023      	movs	r3, r4
 8003994:	2200      	movs	r2, #0
 8003996:	ea40 0402 	orr.w	r4, r0, r2
 800399a:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800399e:	430b      	orrs	r3, r1
 80039a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80039a4:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80039a8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80039ac:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80039b0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80039b4:	1d5a      	adds	r2, r3, #5
 80039b6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80039ba:	4413      	add	r3, r2
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2200      	movs	r2, #0
 80039c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039c6:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80039ca:	f04f 0200 	mov.w	r2, #0
 80039ce:	f04f 0300 	mov.w	r3, #0
 80039d2:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 80039d6:	0223      	lsls	r3, r4, #8
 80039d8:	2200      	movs	r2, #0
 80039da:	ea40 0402 	orr.w	r4, r0, r2
 80039de:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80039e2:	430b      	orrs	r3, r1
 80039e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80039e8:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80039ec:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80039f0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80039f4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80039f8:	1d9a      	adds	r2, r3, #6
 80039fa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80039fe:	4413      	add	r3, r2
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2200      	movs	r2, #0
 8003a06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a0a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a0e:	f04f 0200 	mov.w	r2, #0
 8003a12:	f04f 0300 	mov.w	r3, #0
 8003a16:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8003a1a:	0423      	lsls	r3, r4, #16
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	ea40 0402 	orr.w	r4, r0, r2
 8003a22:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003a26:	430b      	orrs	r3, r1
 8003a28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a2c:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003a30:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003a34:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003a38:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a3c:	1dda      	adds	r2, r3, #7
 8003a3e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a42:	4413      	add	r3, r2
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a52:	f04f 0200 	mov.w	r2, #0
 8003a56:	f04f 0300 	mov.w	r3, #0
 8003a5a:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8003a5e:	0623      	lsls	r3, r4, #24
 8003a60:	2200      	movs	r2, #0
 8003a62:	ea40 0402 	orr.w	r4, r0, r2
 8003a66:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8003a6a:	430b      	orrs	r3, r1
 8003a6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003a70:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003a74:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8003a78:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003a7c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003a80:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8003a84:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a88:	3308      	adds	r3, #8
 8003a8a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8003a8e:	f04f 0200 	mov.w	r2, #0
 8003a92:	f04f 0300 	mov.w	r3, #0
 8003a96:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003a9a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003a9e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003aa2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003aa6:	4413      	add	r3, r2
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2200      	movs	r2, #0
 8003aae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ab2:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003ab6:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8003aba:	4623      	mov	r3, r4
 8003abc:	4303      	orrs	r3, r0
 8003abe:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ac0:	462b      	mov	r3, r5
 8003ac2:	430b      	orrs	r3, r1
 8003ac4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ac6:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8003aca:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003ace:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003ad2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003ad6:	1c5a      	adds	r2, r3, #1
 8003ad8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003adc:	4413      	add	r3, r2
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	673b      	str	r3, [r7, #112]	; 0x70
 8003ae6:	677a      	str	r2, [r7, #116]	; 0x74
 8003ae8:	f04f 0200 	mov.w	r2, #0
 8003aec:	f04f 0300 	mov.w	r3, #0
 8003af0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003af4:	464c      	mov	r4, r9
 8003af6:	0223      	lsls	r3, r4, #8
 8003af8:	4644      	mov	r4, r8
 8003afa:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003afe:	4644      	mov	r4, r8
 8003b00:	0222      	lsls	r2, r4, #8
 8003b02:	ea40 0402 	orr.w	r4, r0, r2
 8003b06:	66bc      	str	r4, [r7, #104]	; 0x68
 8003b08:	430b      	orrs	r3, r1
 8003b0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b0c:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003b10:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003b14:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003b18:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b1c:	1c9a      	adds	r2, r3, #2
 8003b1e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b22:	4413      	add	r3, r2
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2200      	movs	r2, #0
 8003b2a:	663b      	str	r3, [r7, #96]	; 0x60
 8003b2c:	667a      	str	r2, [r7, #100]	; 0x64
 8003b2e:	f04f 0200 	mov.w	r2, #0
 8003b32:	f04f 0300 	mov.w	r3, #0
 8003b36:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b3a:	464c      	mov	r4, r9
 8003b3c:	0423      	lsls	r3, r4, #16
 8003b3e:	4644      	mov	r4, r8
 8003b40:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003b44:	4644      	mov	r4, r8
 8003b46:	0422      	lsls	r2, r4, #16
 8003b48:	ea40 0402 	orr.w	r4, r0, r2
 8003b4c:	65bc      	str	r4, [r7, #88]	; 0x58
 8003b4e:	430b      	orrs	r3, r1
 8003b50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b52:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003b56:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003b5a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003b5e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b62:	1cda      	adds	r2, r3, #3
 8003b64:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b68:	4413      	add	r3, r2
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2200      	movs	r2, #0
 8003b70:	653b      	str	r3, [r7, #80]	; 0x50
 8003b72:	657a      	str	r2, [r7, #84]	; 0x54
 8003b74:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003b78:	4623      	mov	r3, r4
 8003b7a:	0a1b      	lsrs	r3, r3, #8
 8003b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b7e:	4623      	mov	r3, r4
 8003b80:	061b      	lsls	r3, r3, #24
 8003b82:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b84:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003b88:	4623      	mov	r3, r4
 8003b8a:	4303      	orrs	r3, r0
 8003b8c:	643b      	str	r3, [r7, #64]	; 0x40
 8003b8e:	462b      	mov	r3, r5
 8003b90:	430b      	orrs	r3, r1
 8003b92:	647b      	str	r3, [r7, #68]	; 0x44
 8003b94:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003b98:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003b9c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003ba0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003ba4:	1d1a      	adds	r2, r3, #4
 8003ba6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003baa:	4413      	add	r3, r2
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bb4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003bb6:	f04f 0200 	mov.w	r2, #0
 8003bba:	f04f 0300 	mov.w	r3, #0
 8003bbe:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003bc0:	0023      	movs	r3, r4
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	ea40 0402 	orr.w	r4, r0, r2
 8003bc8:	633c      	str	r4, [r7, #48]	; 0x30
 8003bca:	430b      	orrs	r3, r1
 8003bcc:	637b      	str	r3, [r7, #52]	; 0x34
 8003bce:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003bd2:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003bd6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003bda:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003bde:	1d5a      	adds	r2, r3, #5
 8003be0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003be4:	4413      	add	r3, r2
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2200      	movs	r2, #0
 8003bec:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bf0:	f04f 0200 	mov.w	r2, #0
 8003bf4:	f04f 0300 	mov.w	r3, #0
 8003bf8:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003bfa:	0223      	lsls	r3, r4, #8
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	ea40 0402 	orr.w	r4, r0, r2
 8003c02:	623c      	str	r4, [r7, #32]
 8003c04:	430b      	orrs	r3, r1
 8003c06:	627b      	str	r3, [r7, #36]	; 0x24
 8003c08:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003c0c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003c10:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003c14:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c18:	3306      	adds	r3, #6
 8003c1a:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003c1e:	4413      	add	r3, r2
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2200      	movs	r2, #0
 8003c26:	61bb      	str	r3, [r7, #24]
 8003c28:	61fa      	str	r2, [r7, #28]
 8003c2a:	f04f 0200 	mov.w	r2, #0
 8003c2e:	f04f 0300 	mov.w	r3, #0
 8003c32:	69bc      	ldr	r4, [r7, #24]
 8003c34:	0423      	lsls	r3, r4, #16
 8003c36:	2200      	movs	r2, #0
 8003c38:	ea40 0402 	orr.w	r4, r0, r2
 8003c3c:	613c      	str	r4, [r7, #16]
 8003c3e:	430b      	orrs	r3, r1
 8003c40:	617b      	str	r3, [r7, #20]
 8003c42:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003c46:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003c4a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003c4e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c52:	3307      	adds	r3, #7
 8003c54:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003c58:	4413      	add	r3, r2
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2200      	movs	r2, #0
 8003c60:	60bb      	str	r3, [r7, #8]
 8003c62:	60fa      	str	r2, [r7, #12]
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	68bc      	ldr	r4, [r7, #8]
 8003c6e:	0623      	lsls	r3, r4, #24
 8003c70:	2200      	movs	r2, #0
 8003c72:	ea40 0402 	orr.w	r4, r0, r2
 8003c76:	603c      	str	r4, [r7, #0]
 8003c78:	430b      	orrs	r3, r1
 8003c7a:	607b      	str	r3, [r7, #4]
 8003c7c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003c80:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8003c84:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003c88:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8003c8c:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8003c90:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c94:	3308      	adds	r3, #8
 8003c96:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8003c9a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003caa:	4770      	bx	lr

08003cac <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	4b03      	ldr	r3, [pc, #12]	; (8003cc4 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	080105c0 	.word	0x080105c0

08003cc8 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	4b03      	ldr	r3, [pc, #12]	; (8003ce0 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	080105d8 	.word	0x080105d8

08003ce4 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7fe fa8e 	bl	8002210 <_ZN3ros3MsgC1Ev>
 8003cf4:	4a08      	ldr	r2, [pc, #32]	; (8003d18 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	601a      	str	r2, [r3, #0]
      linear(),
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	3308      	adds	r3, #8
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7ff fada 	bl	80032b8 <_ZN13geometry_msgs7Vector3C1Ev>
      angular()
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	3328      	adds	r3, #40	; 0x28
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7ff fad5 	bl	80032b8 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4618      	mov	r0, r3
 8003d12:	3708      	adds	r7, #8
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	08010748 	.word	0x08010748

08003d1c <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003d26:	2300      	movs	r3, #0
 8003d28:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f103 0008 	add.w	r0, r3, #8
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	4413      	add	r3, r2
 8003d36:	4619      	mov	r1, r3
 8003d38:	f7ff fae6 	bl	8003308 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	4413      	add	r3, r2
 8003d42:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	4413      	add	r3, r2
 8003d50:	4619      	mov	r1, r3
 8003d52:	f7ff fad9 	bl	8003308 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003d56:	4602      	mov	r2, r0
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]
      return offset;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
    }
 8003d60:	4618      	mov	r0, r3
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003d72:	2300      	movs	r3, #0
 8003d74:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f103 0008 	add.w	r0, r3, #8
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	4413      	add	r3, r2
 8003d82:	4619      	mov	r1, r3
 8003d84:	f7ff fc33 	bl	80035ee <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	f7ff fc26 	bl	80035ee <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003da2:	4602      	mov	r2, r0
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	4413      	add	r3, r2
 8003da8:	60fb      	str	r3, [r7, #12]
     return offset;
 8003daa:	68fb      	ldr	r3, [r7, #12]
    }
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	4b03      	ldr	r3, [pc, #12]	; (8003dcc <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	080105fc 	.word	0x080105fc

08003dd0 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	4b03      	ldr	r3, [pc, #12]	; (8003de8 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8003dda:	4618      	mov	r0, r3
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	08010610 	.word	0x08010610

08003dec <_ZN8std_msgs4Int8C1Ev>:
  {
    public:
      typedef int8_t _data_type;
      _data_type data;

    Int8():
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
      data(0)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7fe fa0a 	bl	8002210 <_ZN3ros3MsgC1Ev>
 8003dfc:	4a05      	ldr	r2, [pc, #20]	; (8003e14 <_ZN8std_msgs4Int8C1Ev+0x28>)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	601a      	str	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	711a      	strb	r2, [r3, #4]
    {
    }
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	08010730 	.word	0x08010730

08003e18 <_ZNK8std_msgs4Int89serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003e22:	2300      	movs	r3, #0
 8003e24:	60fb      	str	r3, [r7, #12]
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003e2c:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	4413      	add	r3, r2
 8003e34:	7a3a      	ldrb	r2, [r7, #8]
 8003e36:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	60fb      	str	r3, [r7, #12]
      return offset;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
    }
 8003e40:	4618      	mov	r0, r3
 8003e42:	3714      	adds	r7, #20
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <_ZN8std_msgs4Int811deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003e56:	2300      	movs	r3, #0
 8003e58:	60fb      	str	r3, [r7, #12]
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003e5e:	7a3a      	ldrb	r2, [r7, #8]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6839      	ldr	r1, [r7, #0]
 8003e64:	440b      	add	r3, r1
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 8003e6e:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	60fb      	str	r3, [r7, #12]
     return offset;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
    }
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
	...

08003e8c <_ZN8std_msgs4Int87getTypeEv>:

    const char * getType(){ return "std_msgs/Int8"; };
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	4b03      	ldr	r3, [pc, #12]	; (8003ea4 <_ZN8std_msgs4Int87getTypeEv+0x18>)
 8003e96:	4618      	mov	r0, r3
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	08010634 	.word	0x08010634

08003ea8 <_ZN8std_msgs4Int86getMD5Ev>:
    const char * getMD5(){ return "27ffa0c9c4b8fb8492252bcad9e5c57b"; };
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	4b03      	ldr	r3, [pc, #12]	; (8003ec0 <_ZN8std_msgs4Int86getMD5Ev+0x18>)
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	08010644 	.word	0x08010644

08003ec4 <_Z12vel_callbackRKN13geometry_msgs5TwistE>:


geometry_msgs::Twist speed;

void vel_callback(const geometry_msgs::Twist &msg)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
	Vx = msg.linear.x;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003ed2:	490a      	ldr	r1, [pc, #40]	; (8003efc <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x38>)
 8003ed4:	e9c1 2300 	strd	r2, r3, [r1]
	Vy = msg.linear.y;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003ede:	4908      	ldr	r1, [pc, #32]	; (8003f00 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x3c>)
 8003ee0:	e9c1 2300 	strd	r2, r3, [r1]
	W = msg.angular.z;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003eea:	4906      	ldr	r1, [pc, #24]	; (8003f04 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x40>)
 8003eec:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr
 8003efc:	24000988 	.word	0x24000988
 8003f00:	24000990 	.word	0x24000990
 8003f04:	24000998 	.word	0x24000998

08003f08 <_Z12ori_callbackRKN8std_msgs4Int8E>:
void ori_callback(const std_msgs::Int8 &msg){
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
	flag = msg.data;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003f16:	461a      	mov	r2, r3
 8003f18:	4b03      	ldr	r3, [pc, #12]	; (8003f28 <_Z12ori_callbackRKN8std_msgs4Int8E+0x20>)
 8003f1a:	601a      	str	r2, [r3, #0]
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr
 8003f28:	24000980 	.word	0x24000980

08003f2c <_Z3pubv>:
ros::Subscriber<geometry_msgs::Twist> sub_vel("/cmd_vel", vel_callback);
ros::Publisher pub_vel("/realspeed", &speed);
ros::Subscriber<std_msgs::Int8> sub_ori("/cmd_ori", ori_callback);
//ros::Subscriber<std_msgs::Int8> sub_laji("cmd_laji", laji_callback);
//ros::Publisher pub_laji("laji_ok", &speed);
void pub(void){
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0
	speed.linear.x = rVx;
 8003f30:	4b1a      	ldr	r3, [pc, #104]	; (8003f9c <_Z3pubv+0x70>)
 8003f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f36:	491a      	ldr	r1, [pc, #104]	; (8003fa0 <_Z3pubv+0x74>)
 8003f38:	e9c1 2304 	strd	r2, r3, [r1, #16]
	speed.linear.y = rVy;
 8003f3c:	4b19      	ldr	r3, [pc, #100]	; (8003fa4 <_Z3pubv+0x78>)
 8003f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f42:	4917      	ldr	r1, [pc, #92]	; (8003fa0 <_Z3pubv+0x74>)
 8003f44:	e9c1 2306 	strd	r2, r3, [r1, #24]
	speed.angular.z = rW;
 8003f48:	4b17      	ldr	r3, [pc, #92]	; (8003fa8 <_Z3pubv+0x7c>)
 8003f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4e:	4914      	ldr	r1, [pc, #80]	; (8003fa0 <_Z3pubv+0x74>)
 8003f50:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	if(everRun2 == 1){//already completed flipping board
 8003f54:	4b15      	ldr	r3, [pc, #84]	; (8003fac <_Z3pubv+0x80>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d107      	bne.n	8003f6c <_Z3pubv+0x40>
		speed.linear.z = 2;
 8003f5c:	4910      	ldr	r1, [pc, #64]	; (8003fa0 <_Z3pubv+0x74>)
 8003f5e:	f04f 0200 	mov.w	r2, #0
 8003f62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003f66:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8003f6a:	e011      	b.n	8003f90 <_Z3pubv+0x64>
	}
	else if(everRun == 1){//already completed crossing obstacle
 8003f6c:	4b10      	ldr	r3, [pc, #64]	; (8003fb0 <_Z3pubv+0x84>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d106      	bne.n	8003f82 <_Z3pubv+0x56>
		speed.linear.z = 1;
 8003f74:	490a      	ldr	r1, [pc, #40]	; (8003fa0 <_Z3pubv+0x74>)
 8003f76:	f04f 0200 	mov.w	r2, #0
 8003f7a:	4b0e      	ldr	r3, [pc, #56]	; (8003fb4 <_Z3pubv+0x88>)
 8003f7c:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8003f80:	e006      	b.n	8003f90 <_Z3pubv+0x64>
	}
	else{
		speed.linear.z = 0;
 8003f82:	4907      	ldr	r1, [pc, #28]	; (8003fa0 <_Z3pubv+0x74>)
 8003f84:	f04f 0200 	mov.w	r2, #0
 8003f88:	f04f 0300 	mov.w	r3, #0
 8003f8c:	e9c1 2308 	strd	r2, r3, [r1, #32]
	}
	pub_vel.publish(&speed);
 8003f90:	4903      	ldr	r1, [pc, #12]	; (8003fa0 <_Z3pubv+0x74>)
 8003f92:	4809      	ldr	r0, [pc, #36]	; (8003fb8 <_Z3pubv+0x8c>)
 8003f94:	f7fe ff89 	bl	8002eaa <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8003f98:	bf00      	nop
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	240009a0 	.word	0x240009a0
 8003fa0:	24000a08 	.word	0x24000a08
 8003fa4:	240009a8 	.word	0x240009a8
 8003fa8:	240009b0 	.word	0x240009b0
 8003fac:	2400202c 	.word	0x2400202c
 8003fb0:	24002028 	.word	0x24002028
 8003fb4:	3ff00000 	.word	0x3ff00000
 8003fb8:	24001ff0 	.word	0x24001ff0

08003fbc <_Z9ros_setupv>:
void ros_setup(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
    nh.initNode();
 8003fc0:	4808      	ldr	r0, [pc, #32]	; (8003fe4 <_Z9ros_setupv+0x28>)
 8003fc2:	f000 f9fd 	bl	80043c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
    nh.subscribe(sub_vel);
 8003fc6:	4908      	ldr	r1, [pc, #32]	; (8003fe8 <_Z9ros_setupv+0x2c>)
 8003fc8:	4806      	ldr	r0, [pc, #24]	; (8003fe4 <_Z9ros_setupv+0x28>)
 8003fca:	f000 fa22 	bl	8004412 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
    nh.advertise(pub_vel);
 8003fce:	4907      	ldr	r1, [pc, #28]	; (8003fec <_Z9ros_setupv+0x30>)
 8003fd0:	4804      	ldr	r0, [pc, #16]	; (8003fe4 <_Z9ros_setupv+0x28>)
 8003fd2:	f000 fa49 	bl	8004468 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
    nh.subscribe(sub_ori);
 8003fd6:	4906      	ldr	r1, [pc, #24]	; (8003ff0 <_Z9ros_setupv+0x34>)
 8003fd8:	4802      	ldr	r0, [pc, #8]	; (8003fe4 <_Z9ros_setupv+0x28>)
 8003fda:	f000 fa75 	bl	80044c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>
//  nh.subscribe(sub_laji);
//	nh.advertise(pub_laji);

}
 8003fde:	bf00      	nop
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	24000a50 	.word	0x24000a50
 8003fe8:	24001f90 	.word	0x24001f90
 8003fec:	24001ff0 	.word	0x24001ff0
 8003ff0:	24002004 	.word	0x24002004

08003ff4 <_Z8ros_loopv>:
void ros_loop(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
    nh.spinOnce();
 8003ff8:	4802      	ldr	r0, [pc, #8]	; (8004004 <_Z8ros_loopv+0x10>)
 8003ffa:	f000 fa90 	bl	800451e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8003ffe:	bf00      	nop
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	24000a50 	.word	0x24000a50

08004008 <_Z13Error_Handlerv>:
/* UART Communication */
void Error_Handler(void)
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800400c:	b672      	cpsid	i
}
 800400e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004010:	e7fe      	b.n	8004010 <_Z13Error_Handlerv+0x8>
	...

08004014 <_ZL19MX_USART1_UART_Initv>:
  }
  /* USER CODE END Error_Handler_Debug */
}

static void MX_USART1_UART_Init(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart1.Instance = USART1;
 8004018:	4b2c      	ldr	r3, [pc, #176]	; (80040cc <_ZL19MX_USART1_UART_Initv+0xb8>)
 800401a:	4a2d      	ldr	r2, [pc, #180]	; (80040d0 <_ZL19MX_USART1_UART_Initv+0xbc>)
 800401c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800401e:	4b2b      	ldr	r3, [pc, #172]	; (80040cc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004020:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8004024:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004026:	4b29      	ldr	r3, [pc, #164]	; (80040cc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004028:	2200      	movs	r2, #0
 800402a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800402c:	4b27      	ldr	r3, [pc, #156]	; (80040cc <_ZL19MX_USART1_UART_Initv+0xb8>)
 800402e:	2200      	movs	r2, #0
 8004030:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004032:	4b26      	ldr	r3, [pc, #152]	; (80040cc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004034:	2200      	movs	r2, #0
 8004036:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004038:	4b24      	ldr	r3, [pc, #144]	; (80040cc <_ZL19MX_USART1_UART_Initv+0xb8>)
 800403a:	220c      	movs	r2, #12
 800403c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800403e:	4b23      	ldr	r3, [pc, #140]	; (80040cc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004040:	2200      	movs	r2, #0
 8004042:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004044:	4b21      	ldr	r3, [pc, #132]	; (80040cc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004046:	2200      	movs	r2, #0
 8004048:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800404a:	4b20      	ldr	r3, [pc, #128]	; (80040cc <_ZL19MX_USART1_UART_Initv+0xb8>)
 800404c:	2200      	movs	r2, #0
 800404e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004050:	4b1e      	ldr	r3, [pc, #120]	; (80040cc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004052:	2200      	movs	r2, #0
 8004054:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004056:	4b1d      	ldr	r3, [pc, #116]	; (80040cc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004058:	2200      	movs	r2, #0
 800405a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800405c:	481b      	ldr	r0, [pc, #108]	; (80040cc <_ZL19MX_USART1_UART_Initv+0xb8>)
 800405e:	f009 fec5 	bl	800ddec <HAL_UART_Init>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	bf14      	ite	ne
 8004068:	2301      	movne	r3, #1
 800406a:	2300      	moveq	r3, #0
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8004072:	f7ff ffc9 	bl	8004008 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004076:	2100      	movs	r1, #0
 8004078:	4814      	ldr	r0, [pc, #80]	; (80040cc <_ZL19MX_USART1_UART_Initv+0xb8>)
 800407a:	f00b ffd7 	bl	801002c <HAL_UARTEx_SetTxFifoThreshold>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	bf14      	ite	ne
 8004084:	2301      	movne	r3, #1
 8004086:	2300      	moveq	r3, #0
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 800408e:	f7ff ffbb 	bl	8004008 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004092:	2100      	movs	r1, #0
 8004094:	480d      	ldr	r0, [pc, #52]	; (80040cc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004096:	f00c f807 	bl	80100a8 <HAL_UARTEx_SetRxFifoThreshold>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	bf14      	ite	ne
 80040a0:	2301      	movne	r3, #1
 80040a2:	2300      	moveq	r3, #0
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 80040aa:	f7ff ffad 	bl	8004008 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80040ae:	4807      	ldr	r0, [pc, #28]	; (80040cc <_ZL19MX_USART1_UART_Initv+0xb8>)
 80040b0:	f00b ff83 	bl	800ffba <HAL_UARTEx_DisableFifoMode>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	bf14      	ite	ne
 80040ba:	2301      	movne	r3, #1
 80040bc:	2300      	moveq	r3, #0
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 80040c4:	f7ff ffa0 	bl	8004008 <_Z13Error_Handlerv>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80040c8:	bf00      	nop
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	24000764 	.word	0x24000764
 80040d0:	40011000 	.word	0x40011000

080040d4 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
    if(huart == &huart1){
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a09      	ldr	r2, [pc, #36]	; (8004104 <HAL_UART_ErrorCallback+0x30>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d10b      	bne.n	80040fc <HAL_UART_ErrorCallback+0x28>
    // set velocity 0 before uart reinitialization


		HAL_UART_DeInit(&huart1);
 80040e4:	4807      	ldr	r0, [pc, #28]	; (8004104 <HAL_UART_ErrorCallback+0x30>)
 80040e6:	f009 fed1 	bl	800de8c <HAL_UART_DeInit>
		MX_USART1_UART_Init();
 80040ea:	f7ff ff93 	bl	8004014 <_ZL19MX_USART1_UART_Initv>
		nh.getHardware()->init();
 80040ee:	4806      	ldr	r0, [pc, #24]	; (8004108 <HAL_UART_ErrorCallback+0x34>)
 80040f0:	f000 fc8d 	bl	8004a0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80040f4:	4603      	mov	r3, r0
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fe ffd8 	bl	80030ac <_ZN13STM32Hardware4initEv>
    }
}
 80040fc:	bf00      	nop
 80040fe:	3708      	adds	r7, #8
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	24000764 	.word	0x24000764
 8004108:	24000a50 	.word	0x24000a50

0800410c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8004114:	4805      	ldr	r0, [pc, #20]	; (800412c <HAL_UART_TxCpltCallback+0x20>)
 8004116:	f000 fc7a 	bl	8004a0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800411a:	4603      	mov	r3, r0
 800411c:	4618      	mov	r0, r3
 800411e:	f7ff f80f 	bl	8003140 <_ZN13STM32Hardware5flushEv>
}
 8004122:	bf00      	nop
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	24000a50 	.word	0x24000a50

08004130 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800413a:	2300      	movs	r3, #0
 800413c:	60fb      	str	r3, [r7, #12]
 800413e:	e00c      	b.n	800415a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	00db      	lsls	r3, r3, #3
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	fa22 f103 	lsr.w	r1, r2, r3
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	4413      	add	r3, r2
 8004150:	b2ca      	uxtb	r2, r1
 8004152:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	3301      	adds	r3, #1
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2b03      	cmp	r3, #3
 800415e:	d9ef      	bls.n	8004140 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8004160:	bf00      	nop
 8004162:	bf00      	nop
 8004164:	3714      	adds	r7, #20
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 800416e:	b480      	push	{r7}
 8004170:	b085      	sub	sp, #20
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
 8004176:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800417e:	2300      	movs	r3, #0
 8004180:	60fb      	str	r3, [r7, #12]
 8004182:	e010      	b.n	80041a6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6839      	ldr	r1, [r7, #0]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	440a      	add	r2, r1
 800418e:	7812      	ldrb	r2, [r2, #0]
 8004190:	4611      	mov	r1, r2
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	00d2      	lsls	r2, r2, #3
 8004196:	fa01 f202 	lsl.w	r2, r1, r2
 800419a:	431a      	orrs	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	3301      	adds	r3, #1
 80041a4:	60fb      	str	r3, [r7, #12]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2b03      	cmp	r3, #3
 80041aa:	d9eb      	bls.n	8004184 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 80041ac:	bf00      	nop
 80041ae:	bf00      	nop
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
	...

080041bc <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	4a04      	ldr	r2, [pc, #16]	; (80041d8 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4618      	mov	r0, r3
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr
 80041d8:	08010790 	.word	0x08010790

080041dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7ff ffe8 	bl	80041bc <_ZN3ros15NodeHandleBase_C1Ev>
 80041ec:	4a47      	ldr	r2, [pc, #284]	; (800430c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x130>)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	601a      	str	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	3304      	adds	r3, #4
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7fe ff38 	bl	800306c <_ZN13STM32HardwareC1Ev>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004202:	2200      	movs	r2, #0
 8004204:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	f241 5314 	movw	r3, #5396	; 0x1514
 800420e:	4413      	add	r3, r2
 8004210:	4618      	mov	r0, r3
 8004212:	f7fe fb71 	bl	80028f8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8004216:	2300      	movs	r3, #0
 8004218:	617b      	str	r3, [r7, #20]
 800421a:	e00a      	b.n	8004232 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	4413      	add	r3, r2
 8004228:	2200      	movs	r2, #0
 800422a:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	3301      	adds	r3, #1
 8004230:	617b      	str	r3, [r7, #20]
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	2b18      	cmp	r3, #24
 8004236:	d9f1      	bls.n	800421c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x40>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004238:	2300      	movs	r3, #0
 800423a:	613b      	str	r3, [r7, #16]
 800423c:	e009      	b.n	8004252 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004246:	2100      	movs	r1, #0
 8004248:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	3301      	adds	r3, #1
 8004250:	613b      	str	r3, [r7, #16]
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	2b18      	cmp	r3, #24
 8004256:	d9f2      	bls.n	800423e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x62>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8004258:	2300      	movs	r3, #0
 800425a:	60fb      	str	r3, [r7, #12]
 800425c:	e00a      	b.n	8004274 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	441a      	add	r2, r3
 8004264:	f241 0324 	movw	r3, #4132	; 0x1024
 8004268:	4413      	add	r3, r2
 800426a:	2200      	movs	r2, #0
 800426c:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	3301      	adds	r3, #1
 8004272:	60fb      	str	r3, [r7, #12]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800427a:	d3f0      	bcc.n	800425e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x82>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800427c:	2300      	movs	r3, #0
 800427e:	60bb      	str	r3, [r7, #8]
 8004280:	e00a      	b.n	8004298 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xbc>
      message_out[i] = 0;
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	441a      	add	r2, r3
 8004288:	f241 2324 	movw	r3, #4644	; 0x1224
 800428c:	4413      	add	r3, r2
 800428e:	2200      	movs	r2, #0
 8004290:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	3301      	adds	r3, #1
 8004296:	60bb      	str	r3, [r7, #8]
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800429e:	d3f0      	bcc.n	8004282 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa6>

    req_param_resp.ints_length = 0;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042a6:	461a      	mov	r2, r3
 80042a8:	2300      	movs	r3, #0
 80042aa:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042b4:	461a      	mov	r2, r3
 80042b6:	2300      	movs	r3, #0
 80042b8:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
    req_param_resp.floats_length = 0;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042c2:	461a      	mov	r2, r3
 80042c4:	2300      	movs	r3, #0
 80042c6:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
    req_param_resp.floats = NULL;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042d0:	461a      	mov	r2, r3
 80042d2:	2300      	movs	r3, #0
 80042d4:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    req_param_resp.ints_length = 0;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042de:	461a      	mov	r2, r3
 80042e0:	2300      	movs	r3, #0
 80042e2:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042ec:	461a      	mov	r2, r3
 80042ee:	2300      	movs	r3, #0
 80042f0:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520

    spin_timeout_ = 0;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042fa:	461a      	mov	r2, r3
 80042fc:	2300      	movs	r3, #0
 80042fe:	6213      	str	r3, [r2, #32]
  }
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4618      	mov	r0, r3
 8004304:	3718      	adds	r7, #24
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	0801071c 	.word	0x0801071c

08004310 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	4a04      	ldr	r2, [pc, #16]	; (800432c <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4618      	mov	r0, r3
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	08010778 	.word	0x08010778

08004330 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
 800433c:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4618      	mov	r0, r3
 8004342:	f7ff ffe5 	bl	8004310 <_ZN3ros11Subscriber_C1Ev>
 8004346:	4a0b      	ldr	r2, [pc, #44]	; (8004374 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	3310      	adds	r3, #16
 8004350:	4618      	mov	r0, r3
 8004352:	f7ff fcc7 	bl	8003ce4 <_ZN13geometry_msgs5TwistC1Ev>
    cb_(cb),
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	659a      	str	r2, [r3, #88]	; 0x58
    endpoint_(endpoint)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	609a      	str	r2, [r3, #8]
  };
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	4618      	mov	r0, r3
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	08010704 	.word	0x08010704

08004378 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
 8004384:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	4618      	mov	r0, r3
 800438a:	f7ff ffc1 	bl	8004310 <_ZN3ros11Subscriber_C1Ev>
 800438e:	4a0b      	ldr	r2, [pc, #44]	; (80043bc <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei+0x44>)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	601a      	str	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	330c      	adds	r3, #12
 8004398:	4618      	mov	r0, r3
 800439a:	f7ff fd27 	bl	8003dec <_ZN8std_msgs4Int8C1Ev>
    cb_(cb),
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	619a      	str	r2, [r3, #24]
    topic_ = topic_name;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	609a      	str	r2, [r3, #8]
  };
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4618      	mov	r0, r3
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	080106ec 	.word	0x080106ec

080043c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	3304      	adds	r3, #4
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7fe fe6d 	bl	80030ac <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043d8:	461a      	mov	r2, r3
 80043da:	2300      	movs	r3, #0
 80043dc:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
    bytes_ = 0;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043e6:	461a      	mov	r2, r3
 80043e8:	2300      	movs	r3, #0
 80043ea:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
    index_ = 0;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043f4:	461a      	mov	r2, r3
 80043f6:	2300      	movs	r3, #0
 80043f8:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
    topic_ = 0;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004402:	461a      	mov	r2, r3
 8004404:	2300      	movs	r3, #0
 8004406:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
  };
 800440a:	bf00      	nop
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8004412:	b480      	push	{r7}
 8004414:	b085      	sub	sp, #20
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
 800441a:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800441c:	2300      	movs	r3, #0
 800441e:	60fb      	str	r3, [r7, #12]
 8004420:	e018      	b.n	8004454 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x42>
    {
      if (subscribers[i] == 0) // empty slot
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800442a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10d      	bne.n	800444e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x3c>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8004432:	6839      	ldr	r1, [r7, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800443c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	605a      	str	r2, [r3, #4]
        return true;
 800444a:	2301      	movs	r3, #1
 800444c:	e006      	b.n	800445c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	3301      	adds	r3, #1
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2b18      	cmp	r3, #24
 8004458:	dde3      	ble.n	8004422 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x10>
      }
    }
    return false;
 800445a:	2300      	movs	r3, #0
  }
 800445c:	4618      	mov	r0, r3
 800445e:	3714      	adds	r7, #20
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004472:	2300      	movs	r3, #0
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	e01d      	b.n	80044b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
      if (publishers[i] == 0) // empty slot
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4413      	add	r3, r2
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d111      	bne.n	80044ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
        publishers[i] = &p;
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4413      	add	r3, r2
 8004496:	683a      	ldr	r2, [r7, #0]
 8004498:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	60da      	str	r2, [r3, #12]
        return true;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e006      	b.n	80044bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	3301      	adds	r3, #1
 80044b2:	60fb      	str	r3, [r7, #12]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2b18      	cmp	r3, #24
 80044b8:	ddde      	ble.n	8004478 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
    return false;
 80044ba:	2300      	movs	r3, #0
  }
 80044bc:	4618      	mov	r0, r3
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80044d2:	2300      	movs	r3, #0
 80044d4:	60fb      	str	r3, [r7, #12]
 80044d6:	e018      	b.n	800450a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0x42>
      if (subscribers[i] == 0) // empty slot
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80044e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10d      	bne.n	8004504 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0x3c>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80044e8:	6839      	ldr	r1, [r7, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80044f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	605a      	str	r2, [r3, #4]
        return true;
 8004500:	2301      	movs	r3, #1
 8004502:	e006      	b.n	8004512 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	3301      	adds	r3, #1
 8004508:	60fb      	str	r3, [r7, #12]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2b18      	cmp	r3, #24
 800450e:	dde3      	ble.n	80044d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0x10>
    return false;
 8004510:	2300      	movs	r3, #0
  }
 8004512:	4618      	mov	r0, r3
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 800451e:	b580      	push	{r7, lr}
 8004520:	b084      	sub	sp, #16
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
	  uint32_t c_time = hardware_.time();
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	3304      	adds	r3, #4
 800452a:	4618      	mov	r0, r3
 800452c:	f7fe feb8 	bl	80032a0 <_ZN13STM32Hardware4timeEv>
 8004530:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004538:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004544:	4293      	cmp	r3, r2
 8004546:	d905      	bls.n	8004554 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      configured_ = false;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800454e:	2200      	movs	r2, #0
 8004550:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
    if (mode_ != MODE_FIRST_FF)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800455a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00e      	beq.n	8004580 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004568:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	429a      	cmp	r2, r3
 8004570:	d906      	bls.n	8004580 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004578:	461a      	mov	r2, r3
 800457a:	2300      	movs	r3, #0
 800457c:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
      if (spin_timeout_ > 0)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d015      	beq.n	80045b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3304      	adds	r3, #4
 8004590:	4618      	mov	r0, r3
 8004592:	f7fe fe85 	bl	80032a0 <_ZN13STM32Hardware4timeEv>
 8004596:	4602      	mov	r2, r0
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	1ad2      	subs	r2, r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	bf8c      	ite	hi
 80045a8:	2301      	movhi	r3, #1
 80045aa:	2300      	movls	r3, #0
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d002      	beq.n	80045b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
          return SPIN_TIMEOUT;
 80045b2:	f06f 0301 	mvn.w	r3, #1
 80045b6:	e226      	b.n	8004a06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      int data = hardware_.read();
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	3304      	adds	r3, #4
 80045bc:	4618      	mov	r0, r3
 80045be:	f7fe fd91 	bl	80030e4 <_ZN13STM32Hardware4readEv>
 80045c2:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f2c0 81ff 	blt.w	80049ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ac>
      checksum_ += data;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045d2:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	; 0x4fc
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	4413      	add	r3, r2
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045e0:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ea:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80045ee:	2b07      	cmp	r3, #7
 80045f0:	d12d      	bne.n	800464e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045f8:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 80045fc:	1c5a      	adds	r2, r3, #1
 80045fe:	6879      	ldr	r1, [r7, #4]
 8004600:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8004604:	f8c1 24f8 	str.w	r2, [r1, #1272]	; 0x4f8
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	b2d1      	uxtb	r1, r2
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	441a      	add	r2, r3
 8004610:	f241 0324 	movw	r3, #4132	; 0x1024
 8004614:	4413      	add	r3, r2
 8004616:	460a      	mov	r2, r1
 8004618:	701a      	strb	r2, [r3, #0]
        bytes_--;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004620:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8004624:	3b01      	subs	r3, #1
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800462c:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004636:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1a0      	bne.n	8004580 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004644:	461a      	mov	r2, r3
 8004646:	2308      	movs	r3, #8
 8004648:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 800464c:	e798      	b.n	8004580 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004654:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004658:	2b00      	cmp	r3, #0
 800465a:	d130      	bne.n	80046be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	2bff      	cmp	r3, #255	; 0xff
 8004660:	d112      	bne.n	8004688 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x16a>
          mode_++;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004668:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800466c:	3301      	adds	r3, #1
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004674:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	3314      	adds	r3, #20
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004682:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
 8004686:	e77b      	b.n	8004580 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	3304      	adds	r3, #4
 800468c:	4618      	mov	r0, r3
 800468e:	f7fe fe07 	bl	80032a0 <_ZN13STM32Hardware4timeEv>
 8004692:	4602      	mov	r2, r0
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	f241 3288 	movw	r2, #5000	; 0x1388
 800469c:	4293      	cmp	r3, r2
 800469e:	bf8c      	ite	hi
 80046a0:	2301      	movhi	r3, #1
 80046a2:	2300      	movls	r3, #0
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f43f af6a 	beq.w	8004580 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          configured_ = false;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
          return SPIN_TIMEOUT;
 80046b8:	f06f 0301 	mvn.w	r3, #1
 80046bc:	e1a3      	b.n	8004a06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      else if (mode_ == MODE_PROTOCOL_VER)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046c4:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d121      	bne.n	8004710 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	2bfe      	cmp	r3, #254	; 0xfe
 80046d0:	d10b      	bne.n	80046ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1cc>
          mode_++;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046d8:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80046dc:	3301      	adds	r3, #1
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046e4:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80046e8:	e74a      	b.n	8004580 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046f0:	461a      	mov	r2, r3
 80046f2:	2300      	movs	r3, #0
 80046f4:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          if (configured_ == false)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046fe:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8004702:	2b00      	cmp	r3, #0
 8004704:	f47f af3c 	bne.w	8004580 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 f98c 	bl	8004a26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 800470e:	e737      	b.n	8004580 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004716:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800471a:	2b02      	cmp	r3, #2
 800471c:	d120      	bne.n	8004760 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
        bytes_ = data;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004724:	461a      	mov	r2, r3
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        index_ = 0;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004732:	461a      	mov	r2, r3
 8004734:	2300      	movs	r3, #0
 8004736:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
        mode_++;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004740:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004744:	3301      	adds	r3, #1
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800474c:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004756:	461a      	mov	r2, r3
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 800475e:	e70f      	b.n	8004580 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004766:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800476a:	2b03      	cmp	r3, #3
 800476c:	d118      	bne.n	80047a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004774:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	021b      	lsls	r3, r3, #8
 800477c:	4413      	add	r3, r2
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004784:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        mode_++;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800478e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004792:	3301      	adds	r3, #1
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800479a:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 800479e:	e6ef      	b.n	8004580 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047a6:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80047aa:	2b04      	cmp	r3, #4
 80047ac:	d11f      	bne.n	80047ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047b4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80047b8:	425a      	negs	r2, r3
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	b2d2      	uxtb	r2, r2
 80047be:	bf58      	it	pl
 80047c0:	4253      	negpl	r3, r2
 80047c2:	2bff      	cmp	r3, #255	; 0xff
 80047c4:	d10b      	bne.n	80047de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>
          mode_++;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047cc:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80047d0:	3301      	adds	r3, #1
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80047d8:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80047dc:	e6d0      	b.n	8004580 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047e4:	461a      	mov	r2, r3
 80047e6:	2300      	movs	r3, #0
 80047e8:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80047ec:	e6c8      	b.n	8004580 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047f4:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80047f8:	2b05      	cmp	r3, #5
 80047fa:	d119      	bne.n	8004830 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
        topic_ = data;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004802:	461a      	mov	r2, r3
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_++;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004810:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004814:	3301      	adds	r3, #1
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800481c:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte included in checksum */
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004826:	461a      	mov	r2, r3
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 800482e:	e6a7      	b.n	8004580 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004836:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800483a:	2b06      	cmp	r3, #6
 800483c:	d123      	bne.n	8004886 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>
        topic_ += data << 8;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004844:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	021b      	lsls	r3, r3, #8
 800484c:	4413      	add	r3, r2
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004854:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_ = MODE_MESSAGE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800485e:	461a      	mov	r2, r3
 8004860:	2307      	movs	r3, #7
 8004862:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if (bytes_ == 0)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800486c:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8004870:	2b00      	cmp	r3, #0
 8004872:	f47f ae85 	bne.w	8004580 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800487c:	461a      	mov	r2, r3
 800487e:	2308      	movs	r3, #8
 8004880:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004884:	e67c      	b.n	8004580 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800488c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004890:	2b08      	cmp	r3, #8
 8004892:	f47f ae75 	bne.w	8004580 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800489c:	461a      	mov	r2, r3
 800489e:	2300      	movs	r3, #0
 80048a0:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if ((checksum_ % 256) == 255)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048aa:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80048ae:	425a      	negs	r2, r3
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	b2d2      	uxtb	r2, r2
 80048b4:	bf58      	it	pl
 80048b6:	4253      	negpl	r3, r2
 80048b8:	2bff      	cmp	r3, #255	; 0xff
 80048ba:	f47f ae61 	bne.w	8004580 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048c4:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d116      	bne.n	80048fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3dc>
            requestSyncTime();
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 f8aa 	bl	8004a26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f8c6 	bl	8004a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048de:	461a      	mov	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
            last_sync_receive_time = c_time;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048ec:	461a      	mov	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
            return SPIN_ERR;
 80048f4:	f04f 33ff 	mov.w	r3, #4294967295
 80048f8:	e085      	b.n	8004a06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
          else if (topic_ == TopicInfo::ID_TIME)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004900:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004904:	2b0a      	cmp	r3, #10
 8004906:	d108      	bne.n	800491a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3fc>
            syncTime(message_in);
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	f241 0324 	movw	r3, #4132	; 0x1024
 800490e:	4413      	add	r3, r2
 8004910:	4619      	mov	r1, r3
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f988 	bl	8004c28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8004918:	e632      	b.n	8004580 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004920:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004924:	2b06      	cmp	r3, #6
 8004926:	d112      	bne.n	800494e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	f241 5314 	movw	r3, #5396	; 0x1514
 800492e:	4413      	add	r3, r2
 8004930:	6879      	ldr	r1, [r7, #4]
 8004932:	f241 0224 	movw	r2, #4132	; 0x1024
 8004936:	440a      	add	r2, r1
 8004938:	4611      	mov	r1, r2
 800493a:	4618      	mov	r0, r3
 800493c:	f7fe f911 	bl	8002b62 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 800494c:	e618      	b.n	8004580 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004954:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004958:	2b0b      	cmp	r3, #11
 800495a:	d106      	bne.n	800496a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44c>
            configured_ = false;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004962:	2200      	movs	r2, #0
 8004964:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 8004968:	e60a      	b.n	8004580 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004970:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004974:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800497e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004982:	2b00      	cmp	r3, #0
 8004984:	f43f adfc 	beq.w	8004580 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800498e:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004992:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800499c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049a6:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80049aa:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80049b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	6879      	ldr	r1, [r7, #4]
 80049be:	f241 0324 	movw	r3, #4132	; 0x1024
 80049c2:	440b      	add	r3, r1
 80049c4:	4619      	mov	r1, r3
 80049c6:	4790      	blx	r2
    while (true)
 80049c8:	e5da      	b.n	8004580 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        break;
 80049ca:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049d2:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d014      	beq.n	8004a04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049e0:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d909      	bls.n	8004a04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
      requestSyncTime();
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 f818 	bl	8004a26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049fc:	461a      	mov	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    return SPIN_OK;
 8004a04:	2300      	movs	r3, #0
  }
 8004a06:	4618      	mov	r0, r3
 8004a08:	3710      	adds	r7, #16
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:
  Hardware* getHardware()
 8004a0e:	b480      	push	{r7}
 8004a10:	b083      	sub	sp, #12
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
    return &hardware_;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	3304      	adds	r3, #4
  }
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b086      	sub	sp, #24
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8004a2e:	f107 030c 	add.w	r3, r7, #12
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7fd fbfc 	bl	8002230 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f107 020c 	add.w	r2, r7, #12
 8004a42:	210a      	movs	r1, #10
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	4798      	blx	r3
    rt_time = hardware_.time();
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7fe fc27 	bl	80032a0 <_ZN13STM32Hardware4timeEv>
 8004a52:	4602      	mov	r2, r0
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a5a:	615a      	str	r2, [r3, #20]
  }
 8004a5c:	bf00      	nop
 8004a5e:	3718      	adds	r7, #24
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8004a64:	b590      	push	{r4, r7, lr}
 8004a66:	b08b      	sub	sp, #44	; 0x2c
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004a6c:	f107 030c 	add.w	r3, r7, #12
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7fd fccd 	bl	8002410 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004a76:	2300      	movs	r3, #0
 8004a78:	627b      	str	r3, [r7, #36]	; 0x24
 8004a7a:	e062      	b.n	8004b42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d056      	beq.n	8004b3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a92:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4413      	add	r3, r2
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4413      	add	r3, r2
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	6859      	ldr	r1, [r3, #4]
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac8:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4413      	add	r3, r2
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	3308      	adds	r3, #8
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4608      	mov	r0, r1
 8004adc:	4798      	blx	r3
 8004ade:	4603      	mov	r3, r0
 8004ae0:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	6859      	ldr	r1, [r3, #4]
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af6:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4413      	add	r3, r2
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	330c      	adds	r3, #12
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4608      	mov	r0, r1
 8004b0a:	4798      	blx	r3
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004b10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b14:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681c      	ldr	r4, [r3, #0]
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b20:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4413      	add	r3, r2
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7fe f9d1 	bl	8002ed2 <_ZN3ros9Publisher15getEndpointTypeEv>
 8004b30:	4601      	mov	r1, r0
 8004b32:	f107 030c 	add.w	r3, r7, #12
 8004b36:	461a      	mov	r2, r3
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	3301      	adds	r3, #1
 8004b40:	627b      	str	r3, [r7, #36]	; 0x24
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	2b18      	cmp	r3, #24
 8004b46:	dd99      	ble.n	8004a7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004b48:	2300      	movs	r3, #0
 8004b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b4c:	e05e      	b.n	8004c0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b52:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d053      	beq.n	8004c06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b62:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b74:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b84:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b90:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	3308      	adds	r3, #8
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4608      	mov	r0, r1
 8004ba0:	4798      	blx	r3
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004baa:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004bae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bb6:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	330c      	adds	r3, #12
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4608      	mov	r0, r1
 8004bc6:	4798      	blx	r3
 8004bc8:	4603      	mov	r3, r0
 8004bca:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8004bcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bd0:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681c      	ldr	r4, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bdc:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004be0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004be8:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	3304      	adds	r3, #4
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4608      	mov	r0, r1
 8004bf8:	4798      	blx	r3
 8004bfa:	4601      	mov	r1, r0
 8004bfc:	f107 030c 	add.w	r3, r7, #12
 8004c00:	461a      	mov	r2, r3
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	3301      	adds	r3, #1
 8004c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	2b18      	cmp	r3, #24
 8004c10:	dd9d      	ble.n	8004b4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
  }
 8004c1e:	bf00      	nop
 8004c20:	372c      	adds	r7, #44	; 0x2c
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd90      	pop	{r4, r7, pc}
	...

08004c28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004c32:	f107 0308 	add.w	r3, r7, #8
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fd fafa 	bl	8002230 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	3304      	adds	r3, #4
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7fe fb2d 	bl	80032a0 <_ZN13STM32Hardware4timeEv>
 8004c46:	4602      	mov	r2, r0
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004c54:	f107 0308 	add.w	r3, r7, #8
 8004c58:	6839      	ldr	r1, [r7, #0]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7fd fb58 	bl	8002310 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	4915      	ldr	r1, [pc, #84]	; (8004cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004c66:	fba1 1303 	umull	r1, r3, r1, r3
 8004c6a:	099b      	lsrs	r3, r3, #6
 8004c6c:	4413      	add	r3, r2
 8004c6e:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004c70:	6939      	ldr	r1, [r7, #16]
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	4b11      	ldr	r3, [pc, #68]	; (8004cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004c76:	fba3 0302 	umull	r0, r3, r3, r2
 8004c7a:	099b      	lsrs	r3, r3, #6
 8004c7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c80:	fb00 f303 	mul.w	r3, r0, r3
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	4a0e      	ldr	r2, [pc, #56]	; (8004cc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 8004c88:	fb02 f303 	mul.w	r3, r2, r3
 8004c8c:	440b      	add	r3, r1
 8004c8e:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004c90:	f107 0308 	add.w	r3, r7, #8
 8004c94:	3304      	adds	r3, #4
 8004c96:	4619      	mov	r1, r3
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 f8bf 	bl	8004e1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	3304      	adds	r3, #4
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7fe fafc 	bl	80032a0 <_ZN13STM32Hardware4timeEv>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cb0:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
  }
 8004cb4:	bf00      	nop
 8004cb6:	3718      	adds	r7, #24
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	10624dd3 	.word	0x10624dd3
 8004cc0:	000f4240 	.word	0x000f4240

08004cc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b088      	sub	sp, #32
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	2b63      	cmp	r3, #99	; 0x63
 8004cd4:	dd0b      	ble.n	8004cee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cdc:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8004ce0:	f083 0301 	eor.w	r3, r3, #1
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d001      	beq.n	8004cee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8004cea:	2300      	movs	r3, #0
 8004cec:	e090      	b.n	8004e10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	68f9      	ldr	r1, [r7, #12]
 8004cf6:	f241 2324 	movw	r3, #4644	; 0x1224
 8004cfa:	440b      	add	r3, r1
 8004cfc:	3307      	adds	r3, #7
 8004cfe:	4619      	mov	r1, r3
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	4790      	blx	r2
 8004d04:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d0c:	22ff      	movs	r2, #255	; 0xff
 8004d0e:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
    message_out[1] = PROTOCOL_VER;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d18:	22fe      	movs	r2, #254	; 0xfe
 8004d1a:	f883 2225 	strb.w	r2, [r3, #549]	; 0x225
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d28:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	0a1b      	lsrs	r3, r3, #8
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	b2da      	uxtb	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d3c:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d46:	f893 2226 	ldrb.w	r2, [r3, #550]	; 0x226
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d50:	f893 3227 	ldrb.w	r3, [r3, #551]	; 0x227
 8004d54:	4413      	add	r3, r2
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	43db      	mvns	r3, r3
 8004d5a:	b2da      	uxtb	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d62:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	b2da      	uxtb	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d70:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	b21b      	sxth	r3, r3
 8004d78:	121b      	asrs	r3, r3, #8
 8004d7a:	b21b      	sxth	r3, r3
 8004d7c:	b2da      	uxtb	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d84:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a

    /* calculate checksum */
    int chk = 0;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004d8c:	2305      	movs	r3, #5
 8004d8e:	61bb      	str	r3, [r7, #24]
 8004d90:	e00d      	b.n	8004dae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xea>
      chk += message_out[i];
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	441a      	add	r2, r3
 8004d98:	f241 2324 	movw	r3, #4644	; 0x1224
 8004d9c:	4413      	add	r3, r2
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	461a      	mov	r2, r3
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	4413      	add	r3, r2
 8004da6:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	3301      	adds	r3, #1
 8004dac:	61bb      	str	r3, [r7, #24]
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	3306      	adds	r3, #6
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	ddec      	ble.n	8004d92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xce>
    l += 7;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	3307      	adds	r3, #7
 8004dbc:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	425a      	negs	r2, r3
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	b2d2      	uxtb	r2, r2
 8004dc6:	bf58      	it	pl
 8004dc8:	4253      	negpl	r3, r2
 8004dca:	b2da      	uxtb	r2, r3
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	1c59      	adds	r1, r3, #1
 8004dd0:	6179      	str	r1, [r7, #20]
 8004dd2:	43d2      	mvns	r2, r2
 8004dd4:	b2d1      	uxtb	r1, r2
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	441a      	add	r2, r3
 8004dda:	f241 2324 	movw	r3, #4644	; 0x1224
 8004dde:	4413      	add	r3, r2
 8004de0:	460a      	mov	r2, r1
 8004de2:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dea:	dc0b      	bgt.n	8004e04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	1d18      	adds	r0, r3, #4
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	f241 2324 	movw	r3, #4644	; 0x1224
 8004df6:	4413      	add	r3, r2
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	f7fe fa06 	bl	800320c <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	e005      	b.n	8004e10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004e04:	4904      	ldr	r1, [pc, #16]	; (8004e18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x154>)
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	f000 f84c 	bl	8004ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004e0c:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8004e10:	4618      	mov	r0, r3
 8004e12:	3720      	adds	r7, #32
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	08010668 	.word	0x08010668

08004e1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	3304      	adds	r3, #4
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7fe fa38 	bl	80032a0 <_ZN13STM32Hardware4timeEv>
 8004e30:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	4917      	ldr	r1, [pc, #92]	; (8004e98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004e3a:	fba1 1303 	umull	r1, r3, r1, r3
 8004e3e:	099b      	lsrs	r3, r3, #6
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	3b01      	subs	r3, #1
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004e4a:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	6859      	ldr	r1, [r3, #4]
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	4b11      	ldr	r3, [pc, #68]	; (8004e98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004e54:	fba3 0302 	umull	r0, r3, r3, r2
 8004e58:	099b      	lsrs	r3, r3, #6
 8004e5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e5e:	fb00 f303 	mul.w	r3, r0, r3
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	4a0d      	ldr	r2, [pc, #52]	; (8004e9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x80>)
 8004e66:	fb02 f303 	mul.w	r3, r2, r3
 8004e6a:	1aca      	subs	r2, r1, r3
 8004e6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ea0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x84>)
 8004e6e:	4413      	add	r3, r2
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004e76:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	f241 0318 	movw	r3, #4120	; 0x1018
 8004e7e:	4413      	add	r3, r2
 8004e80:	6879      	ldr	r1, [r7, #4]
 8004e82:	f241 021c 	movw	r2, #4124	; 0x101c
 8004e86:	440a      	add	r2, r1
 8004e88:	4611      	mov	r1, r2
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fb fbc6 	bl	800061c <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004e90:	bf00      	nop
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	10624dd3 	.word	0x10624dd3
 8004e9c:	000f4240 	.word	0x000f4240
 8004ea0:	3b9aca00 	.word	0x3b9aca00

08004ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	2103      	movs	r1, #3
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f804 	bl	8004ec0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004eb8:	bf00      	nop
 8004eba:	3708      	adds	r7, #8
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b088      	sub	sp, #32
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	460b      	mov	r3, r1
 8004eca:	607a      	str	r2, [r7, #4]
 8004ecc:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004ece:	f107 0314 	add.w	r3, r7, #20
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7fd fc60 	bl	8002798 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004ed8:	7afb      	ldrb	r3, [r7, #11]
 8004eda:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f107 0214 	add.w	r2, r7, #20
 8004eea:	2107      	movs	r1, #7
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	4798      	blx	r3
  }
 8004ef0:	bf00      	nop
 8004ef2:	3720      	adds	r7, #32
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <_Z41__static_initialization_and_destruction_0ii>:
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d11c      	bne.n	8004f42 <_Z41__static_initialization_and_destruction_0ii+0x4a>
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d117      	bne.n	8004f42 <_Z41__static_initialization_and_destruction_0ii+0x4a>
geometry_msgs::Twist speed;
 8004f12:	480e      	ldr	r0, [pc, #56]	; (8004f4c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004f14:	f7fe fee6 	bl	8003ce4 <_ZN13geometry_msgs5TwistC1Ev>
ros::NodeHandle nh;
 8004f18:	480d      	ldr	r0, [pc, #52]	; (8004f50 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8004f1a:	f7ff f95f 	bl	80041dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<geometry_msgs::Twist> sub_vel("/cmd_vel", vel_callback);
 8004f1e:	2301      	movs	r3, #1
 8004f20:	4a0c      	ldr	r2, [pc, #48]	; (8004f54 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004f22:	490d      	ldr	r1, [pc, #52]	; (8004f58 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8004f24:	480d      	ldr	r0, [pc, #52]	; (8004f5c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8004f26:	f7ff fa03 	bl	8004330 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Publisher pub_vel("/realspeed", &speed);
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	4a07      	ldr	r2, [pc, #28]	; (8004f4c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004f2e:	490c      	ldr	r1, [pc, #48]	; (8004f60 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8004f30:	480c      	ldr	r0, [pc, #48]	; (8004f64 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8004f32:	f7fd ffa3 	bl	8002e7c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Int8> sub_ori("/cmd_ori", ori_callback);
 8004f36:	2301      	movs	r3, #1
 8004f38:	4a0b      	ldr	r2, [pc, #44]	; (8004f68 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8004f3a:	490c      	ldr	r1, [pc, #48]	; (8004f6c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004f3c:	480c      	ldr	r0, [pc, #48]	; (8004f70 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8004f3e:	f7ff fa1b 	bl	8004378 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>
}
 8004f42:	bf00      	nop
 8004f44:	3708      	adds	r7, #8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	24000a08 	.word	0x24000a08
 8004f50:	24000a50 	.word	0x24000a50
 8004f54:	08003ec5 	.word	0x08003ec5
 8004f58:	080106a4 	.word	0x080106a4
 8004f5c:	24001f90 	.word	0x24001f90
 8004f60:	080106b0 	.word	0x080106b0
 8004f64:	24001ff0 	.word	0x24001ff0
 8004f68:	08003f09 	.word	0x08003f09
 8004f6c:	080106bc 	.word	0x080106bc
 8004f70:	24002004 	.word	0x24002004

08004f74 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	330c      	adds	r3, #12
 8004f82:	6839      	ldr	r1, [r7, #0]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7fe ff61 	bl	8003e4c <_ZN8std_msgs4Int811deserializeEPh>
    this->cb_(msg);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	320c      	adds	r2, #12
 8004f92:	4610      	mov	r0, r2
 8004f94:	4798      	blx	r3
  }
 8004f96:	bf00      	nop
 8004f98:	3708      	adds	r7, #8
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <_ZN3ros10SubscriberIN8std_msgs4Int8EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8004f9e:	b480      	push	{r7}
 8004fa0:	b083      	sub	sp, #12
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	699b      	ldr	r3, [r3, #24]
  }
 8004faa:	4618      	mov	r0, r3
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b082      	sub	sp, #8
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	330c      	adds	r3, #12
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7fe ff62 	bl	8003e8c <_ZN8std_msgs4Int87getTypeEv>
 8004fc8:	4603      	mov	r3, r0
  }
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3708      	adds	r7, #8
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b082      	sub	sp, #8
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	330c      	adds	r3, #12
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7fe ff62 	bl	8003ea8 <_ZN8std_msgs4Int86getMD5Ev>
 8004fe4:	4603      	mov	r3, r0
  }
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b082      	sub	sp, #8
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
 8004ff6:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	3310      	adds	r3, #16
 8004ffc:	6839      	ldr	r1, [r7, #0]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fe feb2 	bl	8003d68 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	3210      	adds	r2, #16
 800500c:	4610      	mov	r0, r2
 800500e:	4798      	blx	r3
  }
 8005010:	bf00      	nop
 8005012:	3708      	adds	r7, #8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8005024:	4618      	mov	r0, r3
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	3310      	adds	r3, #16
 800503c:	4618      	mov	r0, r3
 800503e:	f7fe feb9 	bl	8003db4 <_ZN13geometry_msgs5Twist7getTypeEv>
 8005042:	4603      	mov	r3, r0
  }
 8005044:	4618      	mov	r0, r3
 8005046:	3708      	adds	r7, #8
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	3310      	adds	r3, #16
 8005058:	4618      	mov	r0, r3
 800505a:	f7fe feb9 	bl	8003dd0 <_ZN13geometry_msgs5Twist6getMD5Ev>
 800505e:	4603      	mov	r3, r0
  }
 8005060:	4618      	mov	r0, r3
 8005062:	3708      	adds	r7, #8
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
    return configured_;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005076:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
  };
 800507a:	4618      	mov	r0, r3
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <_GLOBAL__sub_I_speed>:
 8005086:	b580      	push	{r7, lr}
 8005088:	af00      	add	r7, sp, #0
 800508a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800508e:	2001      	movs	r0, #1
 8005090:	f7ff ff32 	bl	8004ef8 <_Z41__static_initialization_and_destruction_0ii>
 8005094:	bd80      	pop	{r7, pc}
	...

08005098 <_Z6scriptv>:
int everRun2 = 0;

//void pusher_reset(){
//	script_pusher(-15,-15);
//}
void script(){
 8005098:	b580      	push	{r7, lr}
 800509a:	af00      	add	r7, sp, #0
	if(script_a.scriptrun == 1){
 800509c:	4bb6      	ldr	r3, [pc, #728]	; (8005378 <_Z6scriptv+0x2e0>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	f040 8133 	bne.w	800530c <_Z6scriptv+0x274>
		if(delay_start == 0){
 80050a6:	4bb5      	ldr	r3, [pc, #724]	; (800537c <_Z6scriptv+0x2e4>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d110      	bne.n	80050d0 <_Z6scriptv+0x38>
			script_wheel(5,0,0);
 80050ae:	ed9f 2bb0 	vldr	d2, [pc, #704]	; 8005370 <_Z6scriptv+0x2d8>
 80050b2:	ed9f 1baf 	vldr	d1, [pc, #700]	; 8005370 <_Z6scriptv+0x2d8>
 80050b6:	eeb1 0b04 	vmov.f64	d0, #20	; 0x40a00000  5.0
 80050ba:	f000 fa05 	bl	80054c8 <_Z12script_wheelddd>
			script_pusher(5,5);
 80050be:	eeb1 1b04 	vmov.f64	d1, #20	; 0x40a00000  5.0
 80050c2:	eeb1 0b04 	vmov.f64	d0, #20	; 0x40a00000  5.0
 80050c6:	f7fd f811 	bl	80020ec <_Z13script_pusherdd>
			delay_start = 1;
 80050ca:	4bac      	ldr	r3, [pc, #688]	; (800537c <_Z6scriptv+0x2e4>)
 80050cc:	2201      	movs	r2, #1
 80050ce:	601a      	str	r2, [r3, #0]
		}
		if(delay == 250 && delay_start == 1){
 80050d0:	4bab      	ldr	r3, [pc, #684]	; (8005380 <_Z6scriptv+0x2e8>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2bfa      	cmp	r3, #250	; 0xfa
 80050d6:	d114      	bne.n	8005102 <_Z6scriptv+0x6a>
 80050d8:	4ba8      	ldr	r3, [pc, #672]	; (800537c <_Z6scriptv+0x2e4>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d110      	bne.n	8005102 <_Z6scriptv+0x6a>
			script_wheel(0,0,0);
 80050e0:	ed9f 2ba3 	vldr	d2, [pc, #652]	; 8005370 <_Z6scriptv+0x2d8>
 80050e4:	ed9f 1ba2 	vldr	d1, [pc, #648]	; 8005370 <_Z6scriptv+0x2d8>
 80050e8:	ed9f 0ba1 	vldr	d0, [pc, #644]	; 8005370 <_Z6scriptv+0x2d8>
 80050ec:	f000 f9ec 	bl	80054c8 <_Z12script_wheelddd>
			script_pusher(13,5);
 80050f0:	eeb1 1b04 	vmov.f64	d1, #20	; 0x40a00000  5.0
 80050f4:	eeb2 0b0a 	vmov.f64	d0, #42	; 0x41500000  13.0
 80050f8:	f7fc fff8 	bl	80020ec <_Z13script_pusherdd>
			delay_start = 2;
 80050fc:	4b9f      	ldr	r3, [pc, #636]	; (800537c <_Z6scriptv+0x2e4>)
 80050fe:	2202      	movs	r2, #2
 8005100:	601a      	str	r2, [r3, #0]
		}
		if(delay == 550 && delay_start == 2){
 8005102:	4b9f      	ldr	r3, [pc, #636]	; (8005380 <_Z6scriptv+0x2e8>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f240 2226 	movw	r2, #550	; 0x226
 800510a:	4293      	cmp	r3, r2
 800510c:	d10e      	bne.n	800512c <_Z6scriptv+0x94>
 800510e:	4b9b      	ldr	r3, [pc, #620]	; (800537c <_Z6scriptv+0x2e4>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2b02      	cmp	r3, #2
 8005114:	d10a      	bne.n	800512c <_Z6scriptv+0x94>
			script_wheel(20,0,0);
 8005116:	ed9f 2b96 	vldr	d2, [pc, #600]	; 8005370 <_Z6scriptv+0x2d8>
 800511a:	ed9f 1b95 	vldr	d1, [pc, #596]	; 8005370 <_Z6scriptv+0x2d8>
 800511e:	eeb3 0b04 	vmov.f64	d0, #52	; 0x41a00000  20.0
 8005122:	f000 f9d1 	bl	80054c8 <_Z12script_wheelddd>
			delay_start = 3;
 8005126:	4b95      	ldr	r3, [pc, #596]	; (800537c <_Z6scriptv+0x2e4>)
 8005128:	2203      	movs	r2, #3
 800512a:	601a      	str	r2, [r3, #0]
		}
		if(delay == 850 && delay_start == 3){
 800512c:	4b94      	ldr	r3, [pc, #592]	; (8005380 <_Z6scriptv+0x2e8>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f240 3252 	movw	r2, #850	; 0x352
 8005134:	4293      	cmp	r3, r2
 8005136:	d114      	bne.n	8005162 <_Z6scriptv+0xca>
 8005138:	4b90      	ldr	r3, [pc, #576]	; (800537c <_Z6scriptv+0x2e4>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2b03      	cmp	r3, #3
 800513e:	d110      	bne.n	8005162 <_Z6scriptv+0xca>
			script_wheel(0,0,0);
 8005140:	ed9f 2b8b 	vldr	d2, [pc, #556]	; 8005370 <_Z6scriptv+0x2d8>
 8005144:	ed9f 1b8a 	vldr	d1, [pc, #552]	; 8005370 <_Z6scriptv+0x2d8>
 8005148:	ed9f 0b89 	vldr	d0, [pc, #548]	; 8005370 <_Z6scriptv+0x2d8>
 800514c:	f000 f9bc 	bl	80054c8 <_Z12script_wheelddd>
			script_pusher(-2,13);
 8005150:	eeb2 1b0a 	vmov.f64	d1, #42	; 0x41500000  13.0
 8005154:	eeb8 0b00 	vmov.f64	d0, #128	; 0xc0000000 -2.0
 8005158:	f7fc ffc8 	bl	80020ec <_Z13script_pusherdd>
			delay_start = 4;
 800515c:	4b87      	ldr	r3, [pc, #540]	; (800537c <_Z6scriptv+0x2e4>)
 800515e:	2204      	movs	r2, #4
 8005160:	601a      	str	r2, [r3, #0]
		}
		if(delay == 1100 && delay_start == 4){
 8005162:	4b87      	ldr	r3, [pc, #540]	; (8005380 <_Z6scriptv+0x2e8>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f240 424c 	movw	r2, #1100	; 0x44c
 800516a:	4293      	cmp	r3, r2
 800516c:	d11c      	bne.n	80051a8 <_Z6scriptv+0x110>
 800516e:	4b83      	ldr	r3, [pc, #524]	; (800537c <_Z6scriptv+0x2e4>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2b04      	cmp	r3, #4
 8005174:	d118      	bne.n	80051a8 <_Z6scriptv+0x110>
			script_wheel(0,0,0);
 8005176:	ed9f 2b7e 	vldr	d2, [pc, #504]	; 8005370 <_Z6scriptv+0x2d8>
 800517a:	ed9f 1b7d 	vldr	d1, [pc, #500]	; 8005370 <_Z6scriptv+0x2d8>
 800517e:	ed9f 0b7c 	vldr	d0, [pc, #496]	; 8005370 <_Z6scriptv+0x2d8>
 8005182:	f000 f9a1 	bl	80054c8 <_Z12script_wheelddd>
			script_wheel(20,0,0);
 8005186:	ed9f 2b7a 	vldr	d2, [pc, #488]	; 8005370 <_Z6scriptv+0x2d8>
 800518a:	ed9f 1b79 	vldr	d1, [pc, #484]	; 8005370 <_Z6scriptv+0x2d8>
 800518e:	eeb3 0b04 	vmov.f64	d0, #52	; 0x41a00000  20.0
 8005192:	f000 f999 	bl	80054c8 <_Z12script_wheelddd>
			script_pusher(-2,13);
 8005196:	eeb2 1b0a 	vmov.f64	d1, #42	; 0x41500000  13.0
 800519a:	eeb8 0b00 	vmov.f64	d0, #128	; 0xc0000000 -2.0
 800519e:	f7fc ffa5 	bl	80020ec <_Z13script_pusherdd>
			delay_start = 5;
 80051a2:	4b76      	ldr	r3, [pc, #472]	; (800537c <_Z6scriptv+0x2e4>)
 80051a4:	2205      	movs	r2, #5
 80051a6:	601a      	str	r2, [r3, #0]
		}
		if(delay == 1200 && delay_start == 5){/*-50*/
 80051a8:	4b75      	ldr	r3, [pc, #468]	; (8005380 <_Z6scriptv+0x2e8>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80051b0:	d10e      	bne.n	80051d0 <_Z6scriptv+0x138>
 80051b2:	4b72      	ldr	r3, [pc, #456]	; (800537c <_Z6scriptv+0x2e4>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2b05      	cmp	r3, #5
 80051b8:	d10a      	bne.n	80051d0 <_Z6scriptv+0x138>
//			script_pusher(-2,10);
			script_wheel(15,0,0);
 80051ba:	ed9f 2b6d 	vldr	d2, [pc, #436]	; 8005370 <_Z6scriptv+0x2d8>
 80051be:	ed9f 1b6c 	vldr	d1, [pc, #432]	; 8005370 <_Z6scriptv+0x2d8>
 80051c2:	eeb2 0b0e 	vmov.f64	d0, #46	; 0x41700000  15.0
 80051c6:	f000 f97f 	bl	80054c8 <_Z12script_wheelddd>
			delay_start = 6;
 80051ca:	4b6c      	ldr	r3, [pc, #432]	; (800537c <_Z6scriptv+0x2e4>)
 80051cc:	2206      	movs	r2, #6
 80051ce:	601a      	str	r2, [r3, #0]
		}
		if(delay == 1400 && delay_start == 6){/*-50*/
 80051d0:	4b6b      	ldr	r3, [pc, #428]	; (8005380 <_Z6scriptv+0x2e8>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80051d8:	d116      	bne.n	8005208 <_Z6scriptv+0x170>
 80051da:	4b68      	ldr	r3, [pc, #416]	; (800537c <_Z6scriptv+0x2e4>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2b06      	cmp	r3, #6
 80051e0:	d112      	bne.n	8005208 <_Z6scriptv+0x170>
			script_wheel(0,0,0);
 80051e2:	ed9f 2b63 	vldr	d2, [pc, #396]	; 8005370 <_Z6scriptv+0x2d8>
 80051e6:	ed9f 1b62 	vldr	d1, [pc, #392]	; 8005370 <_Z6scriptv+0x2d8>
 80051ea:	ed9f 0b61 	vldr	d0, [pc, #388]	; 8005370 <_Z6scriptv+0x2d8>
 80051ee:	f000 f96b 	bl	80054c8 <_Z12script_wheelddd>
			script_wheel(30,0,0);
 80051f2:	ed9f 2b5f 	vldr	d2, [pc, #380]	; 8005370 <_Z6scriptv+0x2d8>
 80051f6:	ed9f 1b5e 	vldr	d1, [pc, #376]	; 8005370 <_Z6scriptv+0x2d8>
 80051fa:	eeb3 0b0e 	vmov.f64	d0, #62	; 0x41f00000  30.0
 80051fe:	f000 f963 	bl	80054c8 <_Z12script_wheelddd>
			delay_start = 6;
 8005202:	4b5e      	ldr	r3, [pc, #376]	; (800537c <_Z6scriptv+0x2e4>)
 8005204:	2206      	movs	r2, #6
 8005206:	601a      	str	r2, [r3, #0]
		}
		if(delay == 1400 && delay_start == 6){/*-50*/
 8005208:	4b5d      	ldr	r3, [pc, #372]	; (8005380 <_Z6scriptv+0x2e8>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8005210:	d114      	bne.n	800523c <_Z6scriptv+0x1a4>
 8005212:	4b5a      	ldr	r3, [pc, #360]	; (800537c <_Z6scriptv+0x2e4>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b06      	cmp	r3, #6
 8005218:	d110      	bne.n	800523c <_Z6scriptv+0x1a4>
			script_wheel(10,0,0);
 800521a:	ed9f 2b55 	vldr	d2, [pc, #340]	; 8005370 <_Z6scriptv+0x2d8>
 800521e:	ed9f 1b54 	vldr	d1, [pc, #336]	; 8005370 <_Z6scriptv+0x2d8>
 8005222:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8005226:	f000 f94f 	bl	80054c8 <_Z12script_wheelddd>
			script_pusher(13,-2);
 800522a:	eeb8 1b00 	vmov.f64	d1, #128	; 0xc0000000 -2.0
 800522e:	eeb2 0b0a 	vmov.f64	d0, #42	; 0x41500000  13.0
 8005232:	f7fc ff5b 	bl	80020ec <_Z13script_pusherdd>
			delay_start = 7;
 8005236:	4b51      	ldr	r3, [pc, #324]	; (800537c <_Z6scriptv+0x2e4>)
 8005238:	2207      	movs	r2, #7
 800523a:	601a      	str	r2, [r3, #0]
		}
		if(delay == 1700 && delay_start == 7){
 800523c:	4b50      	ldr	r3, [pc, #320]	; (8005380 <_Z6scriptv+0x2e8>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8005244:	4293      	cmp	r3, r2
 8005246:	d10e      	bne.n	8005266 <_Z6scriptv+0x1ce>
 8005248:	4b4c      	ldr	r3, [pc, #304]	; (800537c <_Z6scriptv+0x2e4>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2b07      	cmp	r3, #7
 800524e:	d10a      	bne.n	8005266 <_Z6scriptv+0x1ce>
			script_wheel(15,0,0);
 8005250:	ed9f 2b47 	vldr	d2, [pc, #284]	; 8005370 <_Z6scriptv+0x2d8>
 8005254:	ed9f 1b46 	vldr	d1, [pc, #280]	; 8005370 <_Z6scriptv+0x2d8>
 8005258:	eeb2 0b0e 	vmov.f64	d0, #46	; 0x41700000  15.0
 800525c:	f000 f934 	bl	80054c8 <_Z12script_wheelddd>
//			script_pusher(12,0);
			delay_start = 8;
 8005260:	4b46      	ldr	r3, [pc, #280]	; (800537c <_Z6scriptv+0x2e4>)
 8005262:	2208      	movs	r2, #8
 8005264:	601a      	str	r2, [r3, #0]
		}
		if(delay == 2000 && delay_start == 8){
 8005266:	4b46      	ldr	r3, [pc, #280]	; (8005380 <_Z6scriptv+0x2e8>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800526e:	d114      	bne.n	800529a <_Z6scriptv+0x202>
 8005270:	4b42      	ldr	r3, [pc, #264]	; (800537c <_Z6scriptv+0x2e4>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2b08      	cmp	r3, #8
 8005276:	d110      	bne.n	800529a <_Z6scriptv+0x202>
			script_wheel(0,0,0);
 8005278:	ed9f 2b3d 	vldr	d2, [pc, #244]	; 8005370 <_Z6scriptv+0x2d8>
 800527c:	ed9f 1b3c 	vldr	d1, [pc, #240]	; 8005370 <_Z6scriptv+0x2d8>
 8005280:	ed9f 0b3b 	vldr	d0, [pc, #236]	; 8005370 <_Z6scriptv+0x2d8>
 8005284:	f000 f920 	bl	80054c8 <_Z12script_wheelddd>
			script_pusher(-2,11);
 8005288:	eeb2 1b06 	vmov.f64	d1, #38	; 0x41300000  11.0
 800528c:	eeb8 0b00 	vmov.f64	d0, #128	; 0xc0000000 -2.0
 8005290:	f7fc ff2c 	bl	80020ec <_Z13script_pusherdd>
			delay_start = 9;
 8005294:	4b39      	ldr	r3, [pc, #228]	; (800537c <_Z6scriptv+0x2e4>)
 8005296:	2209      	movs	r2, #9
 8005298:	601a      	str	r2, [r3, #0]
//		if(delay == 2000 && delay_start == 8){
//			script_wheel(0,0,0);
//			script_pusher(-2,10);
//			delay_start = 9;
//		}
		if(delay == 2500 && delay_start == 9){
 800529a:	4b39      	ldr	r3, [pc, #228]	; (8005380 <_Z6scriptv+0x2e8>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d10e      	bne.n	80052c4 <_Z6scriptv+0x22c>
 80052a6:	4b35      	ldr	r3, [pc, #212]	; (800537c <_Z6scriptv+0x2e4>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2b09      	cmp	r3, #9
 80052ac:	d10a      	bne.n	80052c4 <_Z6scriptv+0x22c>
			script_wheel(15,0,0);
 80052ae:	ed9f 2b30 	vldr	d2, [pc, #192]	; 8005370 <_Z6scriptv+0x2d8>
 80052b2:	ed9f 1b2f 	vldr	d1, [pc, #188]	; 8005370 <_Z6scriptv+0x2d8>
 80052b6:	eeb2 0b0e 	vmov.f64	d0, #46	; 0x41700000  15.0
 80052ba:	f000 f905 	bl	80054c8 <_Z12script_wheelddd>
			delay_start = 10;
 80052be:	4b2f      	ldr	r3, [pc, #188]	; (800537c <_Z6scriptv+0x2e4>)
 80052c0:	220a      	movs	r2, #10
 80052c2:	601a      	str	r2, [r3, #0]
		}
		if(delay == 2900 && delay_start == 10){
 80052c4:	4b2e      	ldr	r3, [pc, #184]	; (8005380 <_Z6scriptv+0x2e8>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f640 3254 	movw	r2, #2900	; 0xb54
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d11d      	bne.n	800530c <_Z6scriptv+0x274>
 80052d0:	4b2a      	ldr	r3, [pc, #168]	; (800537c <_Z6scriptv+0x2e4>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2b0a      	cmp	r3, #10
 80052d6:	d119      	bne.n	800530c <_Z6scriptv+0x274>
			script_wheel(0,0,0);
 80052d8:	ed9f 2b25 	vldr	d2, [pc, #148]	; 8005370 <_Z6scriptv+0x2d8>
 80052dc:	ed9f 1b24 	vldr	d1, [pc, #144]	; 8005370 <_Z6scriptv+0x2d8>
 80052e0:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8005370 <_Z6scriptv+0x2d8>
 80052e4:	f000 f8f0 	bl	80054c8 <_Z12script_wheelddd>
			script_pusher(-2,15);
 80052e8:	eeb2 1b0e 	vmov.f64	d1, #46	; 0x41700000  15.0
 80052ec:	eeb8 0b00 	vmov.f64	d0, #128	; 0xc0000000 -2.0
 80052f0:	f7fc fefc 	bl	80020ec <_Z13script_pusherdd>
			delay_start = 0;
 80052f4:	4b21      	ldr	r3, [pc, #132]	; (800537c <_Z6scriptv+0x2e4>)
 80052f6:	2200      	movs	r2, #0
 80052f8:	601a      	str	r2, [r3, #0]
			script_a.scriptrun = 0;
 80052fa:	4b1f      	ldr	r3, [pc, #124]	; (8005378 <_Z6scriptv+0x2e0>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	601a      	str	r2, [r3, #0]
			delay = 0;
 8005300:	4b1f      	ldr	r3, [pc, #124]	; (8005380 <_Z6scriptv+0x2e8>)
 8005302:	2200      	movs	r2, #0
 8005304:	601a      	str	r2, [r3, #0]
			everRun =1;
 8005306:	4b1f      	ldr	r3, [pc, #124]	; (8005384 <_Z6scriptv+0x2ec>)
 8005308:	2201      	movs	r2, #1
 800530a:	601a      	str	r2, [r3, #0]
		}
	}
	if(script_b.scriptrun == 1){
 800530c:	4b1e      	ldr	r3, [pc, #120]	; (8005388 <_Z6scriptv+0x2f0>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b01      	cmp	r3, #1
 8005312:	f040 80c9 	bne.w	80054a8 <_Z6scriptv+0x410>
		if(delay_start_2 == 0){
 8005316:	4b1d      	ldr	r3, [pc, #116]	; (800538c <_Z6scriptv+0x2f4>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d11e      	bne.n	800535c <_Z6scriptv+0x2c4>
			script_pusher(3,12);
 800531e:	eeb2 1b08 	vmov.f64	d1, #40	; 0x41400000  12.0
 8005322:	eeb0 0b08 	vmov.f64	d0, #8	; 0x40400000  3.0
 8005326:	f7fc fee1 	bl	80020ec <_Z13script_pusherdd>
			script_wheel(10,0,0);
 800532a:	ed9f 2b11 	vldr	d2, [pc, #68]	; 8005370 <_Z6scriptv+0x2d8>
 800532e:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8005370 <_Z6scriptv+0x2d8>
 8005332:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8005336:	f000 f8c7 	bl	80054c8 <_Z12script_wheelddd>
			UART_Send_SetMotorPosition(3, 1650, 500);
 800533a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800533e:	f240 6172 	movw	r1, #1650	; 0x672
 8005342:	2003      	movs	r0, #3
 8005344:	f000 f900 	bl	8005548 <_Z26UART_Send_SetMotorPositionttt>
			UART_Send_SetMotorPosition(1, 850, 500);
 8005348:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800534c:	f240 3152 	movw	r1, #850	; 0x352
 8005350:	2001      	movs	r0, #1
 8005352:	f000 f8f9 	bl	8005548 <_Z26UART_Send_SetMotorPositionttt>
			delay_start_2 =1;
 8005356:	4b0d      	ldr	r3, [pc, #52]	; (800538c <_Z6scriptv+0x2f4>)
 8005358:	2201      	movs	r2, #1
 800535a:	601a      	str	r2, [r3, #0]
		}
		if(delay_2 == 550 && delay_start_2 == 1){
 800535c:	4b0c      	ldr	r3, [pc, #48]	; (8005390 <_Z6scriptv+0x2f8>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f240 2226 	movw	r2, #550	; 0x226
 8005364:	4293      	cmp	r3, r2
 8005366:	d135      	bne.n	80053d4 <_Z6scriptv+0x33c>
 8005368:	4b08      	ldr	r3, [pc, #32]	; (800538c <_Z6scriptv+0x2f4>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2b01      	cmp	r3, #1
 800536e:	e011      	b.n	8005394 <_Z6scriptv+0x2fc>
	...
 8005378:	24002020 	.word	0x24002020
 800537c:	240002b8 	.word	0x240002b8
 8005380:	240002bc 	.word	0x240002bc
 8005384:	24002028 	.word	0x24002028
 8005388:	24002024 	.word	0x24002024
 800538c:	240002c0 	.word	0x240002c0
 8005390:	240002c4 	.word	0x240002c4
 8005394:	d11e      	bne.n	80053d4 <_Z6scriptv+0x33c>
			script_pusher(-2,12);
 8005396:	eeb2 1b08 	vmov.f64	d1, #40	; 0x41400000  12.0
 800539a:	eeb8 0b00 	vmov.f64	d0, #128	; 0xc0000000 -2.0
 800539e:	f7fc fea5 	bl	80020ec <_Z13script_pusherdd>
			UART_Send_SetMotorPosition(1, 1300, 1500);
 80053a2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80053a6:	f240 5114 	movw	r1, #1300	; 0x514
 80053aa:	2001      	movs	r0, #1
 80053ac:	f000 f8cc 	bl	8005548 <_Z26UART_Send_SetMotorPositionttt>
			UART_Send_SetMotorPosition(3, 1200, 1500);
 80053b0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80053b4:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80053b8:	2003      	movs	r0, #3
 80053ba:	f000 f8c5 	bl	8005548 <_Z26UART_Send_SetMotorPositionttt>
			script_wheel(0,0,0);
 80053be:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 80054b0 <_Z6scriptv+0x418>
 80053c2:	ed9f 1b3b 	vldr	d1, [pc, #236]	; 80054b0 <_Z6scriptv+0x418>
 80053c6:	ed9f 0b3a 	vldr	d0, [pc, #232]	; 80054b0 <_Z6scriptv+0x418>
 80053ca:	f000 f87d 	bl	80054c8 <_Z12script_wheelddd>
			delay_start_2 =2;
 80053ce:	4b3a      	ldr	r3, [pc, #232]	; (80054b8 <_Z6scriptv+0x420>)
 80053d0:	2202      	movs	r2, #2
 80053d2:	601a      	str	r2, [r3, #0]
		}
		if(delay_2 == 750 && delay_start_2 == 2){
 80053d4:	4b39      	ldr	r3, [pc, #228]	; (80054bc <_Z6scriptv+0x424>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f240 22ee 	movw	r2, #750	; 0x2ee
 80053dc:	4293      	cmp	r3, r2
 80053de:	d122      	bne.n	8005426 <_Z6scriptv+0x38e>
 80053e0:	4b35      	ldr	r3, [pc, #212]	; (80054b8 <_Z6scriptv+0x420>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d11e      	bne.n	8005426 <_Z6scriptv+0x38e>
			script_pusher(-2,12);
 80053e8:	eeb2 1b08 	vmov.f64	d1, #40	; 0x41400000  12.0
 80053ec:	eeb8 0b00 	vmov.f64	d0, #128	; 0xc0000000 -2.0
 80053f0:	f7fc fe7c 	bl	80020ec <_Z13script_pusherdd>
			UART_Send_SetMotorPosition(1, 1300, 1500);
 80053f4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80053f8:	f240 5114 	movw	r1, #1300	; 0x514
 80053fc:	2001      	movs	r0, #1
 80053fe:	f000 f8a3 	bl	8005548 <_Z26UART_Send_SetMotorPositionttt>
			UART_Send_SetMotorPosition(3, 1200, 1500);
 8005402:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005406:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800540a:	2003      	movs	r0, #3
 800540c:	f000 f89c 	bl	8005548 <_Z26UART_Send_SetMotorPositionttt>
			script_wheel(2,0,0);
 8005410:	ed9f 2b27 	vldr	d2, [pc, #156]	; 80054b0 <_Z6scriptv+0x418>
 8005414:	ed9f 1b26 	vldr	d1, [pc, #152]	; 80054b0 <_Z6scriptv+0x418>
 8005418:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 800541c:	f000 f854 	bl	80054c8 <_Z12script_wheelddd>
			delay_start_2 =3;
 8005420:	4b25      	ldr	r3, [pc, #148]	; (80054b8 <_Z6scriptv+0x420>)
 8005422:	2203      	movs	r2, #3
 8005424:	601a      	str	r2, [r3, #0]
		}
		if(delay_2 == 1500 && delay_start_2 == 3){
 8005426:	4b25      	ldr	r3, [pc, #148]	; (80054bc <_Z6scriptv+0x424>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800542e:	4293      	cmp	r3, r2
 8005430:	d10e      	bne.n	8005450 <_Z6scriptv+0x3b8>
 8005432:	4b21      	ldr	r3, [pc, #132]	; (80054b8 <_Z6scriptv+0x420>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2b03      	cmp	r3, #3
 8005438:	d10a      	bne.n	8005450 <_Z6scriptv+0x3b8>
//			UART_Send_SetMotorPosition(1, 1300, 300);
			script_wheel(10,0,0);
 800543a:	ed9f 2b1d 	vldr	d2, [pc, #116]	; 80054b0 <_Z6scriptv+0x418>
 800543e:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 80054b0 <_Z6scriptv+0x418>
 8005442:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8005446:	f000 f83f 	bl	80054c8 <_Z12script_wheelddd>
//			script_pusher(-2,12);
			delay_start_2 =4;
 800544a:	4b1b      	ldr	r3, [pc, #108]	; (80054b8 <_Z6scriptv+0x420>)
 800544c:	2204      	movs	r2, #4
 800544e:	601a      	str	r2, [r3, #0]
		}
		if(delay_2 == 2100 && delay_start_2 == 4){
 8005450:	4b1a      	ldr	r3, [pc, #104]	; (80054bc <_Z6scriptv+0x424>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f640 0234 	movw	r2, #2100	; 0x834
 8005458:	4293      	cmp	r3, r2
 800545a:	d125      	bne.n	80054a8 <_Z6scriptv+0x410>
 800545c:	4b16      	ldr	r3, [pc, #88]	; (80054b8 <_Z6scriptv+0x420>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2b04      	cmp	r3, #4
 8005462:	d121      	bne.n	80054a8 <_Z6scriptv+0x410>
			UART_Send_SetMotorPosition(1, 1400, 500);
 8005464:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005468:	f44f 61af 	mov.w	r1, #1400	; 0x578
 800546c:	2001      	movs	r0, #1
 800546e:	f000 f86b 	bl	8005548 <_Z26UART_Send_SetMotorPositionttt>
			UART_Send_SetMotorPosition(3, 1100, 500);
 8005472:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005476:	f240 414c 	movw	r1, #1100	; 0x44c
 800547a:	2003      	movs	r0, #3
 800547c:	f000 f864 	bl	8005548 <_Z26UART_Send_SetMotorPositionttt>
			script_wheel(0,0,0);
 8005480:	ed9f 2b0b 	vldr	d2, [pc, #44]	; 80054b0 <_Z6scriptv+0x418>
 8005484:	ed9f 1b0a 	vldr	d1, [pc, #40]	; 80054b0 <_Z6scriptv+0x418>
 8005488:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80054b0 <_Z6scriptv+0x418>
 800548c:	f000 f81c 	bl	80054c8 <_Z12script_wheelddd>
			delay_start_2 =0;
 8005490:	4b09      	ldr	r3, [pc, #36]	; (80054b8 <_Z6scriptv+0x420>)
 8005492:	2200      	movs	r2, #0
 8005494:	601a      	str	r2, [r3, #0]
			script_b.scriptrun =0;
 8005496:	4b0a      	ldr	r3, [pc, #40]	; (80054c0 <_Z6scriptv+0x428>)
 8005498:	2200      	movs	r2, #0
 800549a:	601a      	str	r2, [r3, #0]
			delay_2 = 0;
 800549c:	4b07      	ldr	r3, [pc, #28]	; (80054bc <_Z6scriptv+0x424>)
 800549e:	2200      	movs	r2, #0
 80054a0:	601a      	str	r2, [r3, #0]
			everRun2 = 1;
 80054a2:	4b08      	ldr	r3, [pc, #32]	; (80054c4 <_Z6scriptv+0x42c>)
 80054a4:	2201      	movs	r2, #1
 80054a6:	601a      	str	r2, [r3, #0]
		}
	}

}
 80054a8:	bf00      	nop
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	f3af 8000 	nop.w
	...
 80054b8:	240002c0 	.word	0x240002c0
 80054bc:	240002c4 	.word	0x240002c4
 80054c0:	24002024 	.word	0x24002024
 80054c4:	2400202c 	.word	0x2400202c

080054c8 <_Z12script_wheelddd>:
void script_wheel(double s_Vx,double s_Vy,double s_w){
 80054c8:	b480      	push	{r7}
 80054ca:	b087      	sub	sp, #28
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	ed87 0b04 	vstr	d0, [r7, #16]
 80054d2:	ed87 1b02 	vstr	d1, [r7, #8]
 80054d6:	ed87 2b00 	vstr	d2, [r7]
	Vx = s_Vx;
 80054da:	490a      	ldr	r1, [pc, #40]	; (8005504 <_Z12script_wheelddd+0x3c>)
 80054dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80054e0:	e9c1 2300 	strd	r2, r3, [r1]
	Vy = s_Vy;
 80054e4:	4908      	ldr	r1, [pc, #32]	; (8005508 <_Z12script_wheelddd+0x40>)
 80054e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054ea:	e9c1 2300 	strd	r2, r3, [r1]
	W = s_w;
 80054ee:	4907      	ldr	r1, [pc, #28]	; (800550c <_Z12script_wheelddd+0x44>)
 80054f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054f4:	e9c1 2300 	strd	r2, r3, [r1]
}
 80054f8:	bf00      	nop
 80054fa:	371c      	adds	r7, #28
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr
 8005504:	24000988 	.word	0x24000988
 8005508:	24000990 	.word	0x24000990
 800550c:	24000998 	.word	0x24000998

08005510 <_Z9UART_Sendh>:
 */
#include "servo.h"
#include"math.h"
extern UART_HandleTypeDef huart3;
int Checksum_Calc, count=0;
void UART_Send(uint8_t u8_data){
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	4603      	mov	r3, r0
 8005518:	71fb      	strb	r3, [r7, #7]
	uint8_t *u8_pointer = &u8_data;
 800551a:	1dfb      	adds	r3, r7, #7
 800551c:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart3, u8_pointer, 1,100);
 800551e:	2364      	movs	r3, #100	; 0x64
 8005520:	2201      	movs	r2, #1
 8005522:	68f9      	ldr	r1, [r7, #12]
 8005524:	4806      	ldr	r0, [pc, #24]	; (8005540 <_Z9UART_Sendh+0x30>)
 8005526:	f008 fcf0 	bl	800df0a <HAL_UART_Transmit>

	Checksum_Calc += u8_data;
 800552a:	79fb      	ldrb	r3, [r7, #7]
 800552c:	461a      	mov	r2, r3
 800552e:	4b05      	ldr	r3, [pc, #20]	; (8005544 <_Z9UART_Sendh+0x34>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4413      	add	r3, r2
 8005534:	4a03      	ldr	r2, [pc, #12]	; (8005544 <_Z9UART_Sendh+0x34>)
 8005536:	6013      	str	r3, [r2, #0]
}
 8005538:	bf00      	nop
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	240007f8 	.word	0x240007f8
 8005544:	24002030 	.word	0x24002030

08005548 <_Z26UART_Send_SetMotorPositionttt>:

void UART_Send_SetMotorPosition(uint16_t motorId, uint16_t Position, uint16_t Time){
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	4603      	mov	r3, r0
 8005550:	80fb      	strh	r3, [r7, #6]
 8005552:	460b      	mov	r3, r1
 8005554:	80bb      	strh	r3, [r7, #4]
 8005556:	4613      	mov	r3, r2
 8005558:	807b      	strh	r3, [r7, #2]
	Checksum_Calc = 0;
 800555a:	4b1c      	ldr	r3, [pc, #112]	; (80055cc <_Z26UART_Send_SetMotorPositionttt+0x84>)
 800555c:	2200      	movs	r2, #0
 800555e:	601a      	str	r2, [r3, #0]
	UART_Send(0x80 + motorId);
 8005560:	88fb      	ldrh	r3, [r7, #6]
 8005562:	b2db      	uxtb	r3, r3
 8005564:	3b80      	subs	r3, #128	; 0x80
 8005566:	b2db      	uxtb	r3, r3
 8005568:	4618      	mov	r0, r3
 800556a:	f7ff ffd1 	bl	8005510 <_Z9UART_Sendh>
	UART_Send(0x83);
 800556e:	2083      	movs	r0, #131	; 0x83
 8005570:	f7ff ffce 	bl	8005510 <_Z9UART_Sendh>
	UART_Send(0x05);
 8005574:	2005      	movs	r0, #5
 8005576:	f7ff ffcb 	bl	8005510 <_Z9UART_Sendh>
	UART_Send((Position / 256)& 0x7F);
 800557a:	88bb      	ldrh	r3, [r7, #4]
 800557c:	0a1b      	lsrs	r3, r3, #8
 800557e:	b29b      	uxth	r3, r3
 8005580:	b2db      	uxtb	r3, r3
 8005582:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005586:	b2db      	uxtb	r3, r3
 8005588:	4618      	mov	r0, r3
 800558a:	f7ff ffc1 	bl	8005510 <_Z9UART_Sendh>
	UART_Send(Position % 256);
 800558e:	88bb      	ldrh	r3, [r7, #4]
 8005590:	b2db      	uxtb	r3, r3
 8005592:	4618      	mov	r0, r3
 8005594:	f7ff ffbc 	bl	8005510 <_Z9UART_Sendh>
	UART_Send((Time / 256)& 0x7F);
 8005598:	887b      	ldrh	r3, [r7, #2]
 800559a:	0a1b      	lsrs	r3, r3, #8
 800559c:	b29b      	uxth	r3, r3
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7ff ffb2 	bl	8005510 <_Z9UART_Sendh>
	UART_Send(Time % 256);
 80055ac:	887b      	ldrh	r3, [r7, #2]
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7ff ffad 	bl	8005510 <_Z9UART_Sendh>
	UART_Send(Checksum_Calc);
 80055b6:	4b05      	ldr	r3, [pc, #20]	; (80055cc <_Z26UART_Send_SetMotorPositionttt+0x84>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	4618      	mov	r0, r3
 80055be:	f7ff ffa7 	bl	8005510 <_Z9UART_Sendh>
}
 80055c2:	bf00      	nop
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	24002030 	.word	0x24002030

080055d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055d6:	4b0a      	ldr	r3, [pc, #40]	; (8005600 <HAL_MspInit+0x30>)
 80055d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80055dc:	4a08      	ldr	r2, [pc, #32]	; (8005600 <HAL_MspInit+0x30>)
 80055de:	f043 0302 	orr.w	r3, r3, #2
 80055e2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80055e6:	4b06      	ldr	r3, [pc, #24]	; (8005600 <HAL_MspInit+0x30>)
 80055e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	607b      	str	r3, [r7, #4]
 80055f2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr
 8005600:	58024400 	.word	0x58024400

08005604 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b086      	sub	sp, #24
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a43      	ldr	r2, [pc, #268]	; (8005720 <HAL_TIM_Base_MspInit+0x11c>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d12f      	bne.n	8005676 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005616:	4b43      	ldr	r3, [pc, #268]	; (8005724 <HAL_TIM_Base_MspInit+0x120>)
 8005618:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800561c:	4a41      	ldr	r2, [pc, #260]	; (8005724 <HAL_TIM_Base_MspInit+0x120>)
 800561e:	f043 0301 	orr.w	r3, r3, #1
 8005622:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005626:	4b3f      	ldr	r3, [pc, #252]	; (8005724 <HAL_TIM_Base_MspInit+0x120>)
 8005628:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	617b      	str	r3, [r7, #20]
 8005632:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8005634:	2200      	movs	r2, #0
 8005636:	2100      	movs	r1, #0
 8005638:	2018      	movs	r0, #24
 800563a:	f000 feec 	bl	8006416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800563e:	2018      	movs	r0, #24
 8005640:	f000 ff03 	bl	800644a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8005644:	2200      	movs	r2, #0
 8005646:	2100      	movs	r1, #0
 8005648:	2019      	movs	r0, #25
 800564a:	f000 fee4 	bl	8006416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800564e:	2019      	movs	r0, #25
 8005650:	f000 fefb 	bl	800644a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8005654:	2200      	movs	r2, #0
 8005656:	2100      	movs	r1, #0
 8005658:	201a      	movs	r0, #26
 800565a:	f000 fedc 	bl	8006416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800565e:	201a      	movs	r0, #26
 8005660:	f000 fef3 	bl	800644a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8005664:	2200      	movs	r2, #0
 8005666:	2100      	movs	r1, #0
 8005668:	201b      	movs	r0, #27
 800566a:	f000 fed4 	bl	8006416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800566e:	201b      	movs	r0, #27
 8005670:	f000 feeb 	bl	800644a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }

}
 8005674:	e050      	b.n	8005718 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM8)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a2b      	ldr	r2, [pc, #172]	; (8005728 <HAL_TIM_Base_MspInit+0x124>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d12f      	bne.n	80056e0 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005680:	4b28      	ldr	r3, [pc, #160]	; (8005724 <HAL_TIM_Base_MspInit+0x120>)
 8005682:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005686:	4a27      	ldr	r2, [pc, #156]	; (8005724 <HAL_TIM_Base_MspInit+0x120>)
 8005688:	f043 0302 	orr.w	r3, r3, #2
 800568c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005690:	4b24      	ldr	r3, [pc, #144]	; (8005724 <HAL_TIM_Base_MspInit+0x120>)
 8005692:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005696:	f003 0302 	and.w	r3, r3, #2
 800569a:	613b      	str	r3, [r7, #16]
 800569c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800569e:	2200      	movs	r2, #0
 80056a0:	2100      	movs	r1, #0
 80056a2:	202b      	movs	r0, #43	; 0x2b
 80056a4:	f000 feb7 	bl	8006416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80056a8:	202b      	movs	r0, #43	; 0x2b
 80056aa:	f000 fece 	bl	800644a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80056ae:	2200      	movs	r2, #0
 80056b0:	2100      	movs	r1, #0
 80056b2:	202c      	movs	r0, #44	; 0x2c
 80056b4:	f000 feaf 	bl	8006416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80056b8:	202c      	movs	r0, #44	; 0x2c
 80056ba:	f000 fec6 	bl	800644a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80056be:	2200      	movs	r2, #0
 80056c0:	2100      	movs	r1, #0
 80056c2:	202d      	movs	r0, #45	; 0x2d
 80056c4:	f000 fea7 	bl	8006416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80056c8:	202d      	movs	r0, #45	; 0x2d
 80056ca:	f000 febe 	bl	800644a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 80056ce:	2200      	movs	r2, #0
 80056d0:	2100      	movs	r1, #0
 80056d2:	202e      	movs	r0, #46	; 0x2e
 80056d4:	f000 fe9f 	bl	8006416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80056d8:	202e      	movs	r0, #46	; 0x2e
 80056da:	f000 feb6 	bl	800644a <HAL_NVIC_EnableIRQ>
}
 80056de:	e01b      	b.n	8005718 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM23)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a11      	ldr	r2, [pc, #68]	; (800572c <HAL_TIM_Base_MspInit+0x128>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d116      	bne.n	8005718 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM23_CLK_ENABLE();
 80056ea:	4b0e      	ldr	r3, [pc, #56]	; (8005724 <HAL_TIM_Base_MspInit+0x120>)
 80056ec:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80056f0:	4a0c      	ldr	r2, [pc, #48]	; (8005724 <HAL_TIM_Base_MspInit+0x120>)
 80056f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056f6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80056fa:	4b0a      	ldr	r3, [pc, #40]	; (8005724 <HAL_TIM_Base_MspInit+0x120>)
 80056fc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005700:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005704:	60fb      	str	r3, [r7, #12]
 8005706:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM23_IRQn, 0, 0);
 8005708:	2200      	movs	r2, #0
 800570a:	2100      	movs	r1, #0
 800570c:	20a1      	movs	r0, #161	; 0xa1
 800570e:	f000 fe82 	bl	8006416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM23_IRQn);
 8005712:	20a1      	movs	r0, #161	; 0xa1
 8005714:	f000 fe99 	bl	800644a <HAL_NVIC_EnableIRQ>
}
 8005718:	bf00      	nop
 800571a:	3718      	adds	r7, #24
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	40010000 	.word	0x40010000
 8005724:	58024400 	.word	0x58024400
 8005728:	40010400 	.word	0x40010400
 800572c:	4000e000 	.word	0x4000e000

08005730 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b090      	sub	sp, #64	; 0x40
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005738:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800573c:	2200      	movs	r2, #0
 800573e:	601a      	str	r2, [r3, #0]
 8005740:	605a      	str	r2, [r3, #4]
 8005742:	609a      	str	r2, [r3, #8]
 8005744:	60da      	str	r2, [r3, #12]
 8005746:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005750:	d14e      	bne.n	80057f0 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005752:	4b77      	ldr	r3, [pc, #476]	; (8005930 <HAL_TIM_Encoder_MspInit+0x200>)
 8005754:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005758:	4a75      	ldr	r2, [pc, #468]	; (8005930 <HAL_TIM_Encoder_MspInit+0x200>)
 800575a:	f043 0301 	orr.w	r3, r3, #1
 800575e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005762:	4b73      	ldr	r3, [pc, #460]	; (8005930 <HAL_TIM_Encoder_MspInit+0x200>)
 8005764:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005768:	f003 0301 	and.w	r3, r3, #1
 800576c:	62bb      	str	r3, [r7, #40]	; 0x28
 800576e:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005770:	4b6f      	ldr	r3, [pc, #444]	; (8005930 <HAL_TIM_Encoder_MspInit+0x200>)
 8005772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005776:	4a6e      	ldr	r2, [pc, #440]	; (8005930 <HAL_TIM_Encoder_MspInit+0x200>)
 8005778:	f043 0301 	orr.w	r3, r3, #1
 800577c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005780:	4b6b      	ldr	r3, [pc, #428]	; (8005930 <HAL_TIM_Encoder_MspInit+0x200>)
 8005782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	627b      	str	r3, [r7, #36]	; 0x24
 800578c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800578e:	4b68      	ldr	r3, [pc, #416]	; (8005930 <HAL_TIM_Encoder_MspInit+0x200>)
 8005790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005794:	4a66      	ldr	r2, [pc, #408]	; (8005930 <HAL_TIM_Encoder_MspInit+0x200>)
 8005796:	f043 0302 	orr.w	r3, r3, #2
 800579a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800579e:	4b64      	ldr	r3, [pc, #400]	; (8005930 <HAL_TIM_Encoder_MspInit+0x200>)
 80057a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057a4:	f003 0302 	and.w	r3, r3, #2
 80057a8:	623b      	str	r3, [r7, #32]
 80057aa:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80057ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057b2:	2302      	movs	r3, #2
 80057b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057b6:	2300      	movs	r3, #0
 80057b8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057ba:	2300      	movs	r3, #0
 80057bc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80057be:	2301      	movs	r3, #1
 80057c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80057c6:	4619      	mov	r1, r3
 80057c8:	485a      	ldr	r0, [pc, #360]	; (8005934 <HAL_TIM_Encoder_MspInit+0x204>)
 80057ca:	f003 fe55 	bl	8009478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80057ce:	2308      	movs	r3, #8
 80057d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057d2:	2302      	movs	r3, #2
 80057d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057d6:	2300      	movs	r3, #0
 80057d8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057da:	2300      	movs	r3, #0
 80057dc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80057de:	2301      	movs	r3, #1
 80057e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80057e6:	4619      	mov	r1, r3
 80057e8:	4853      	ldr	r0, [pc, #332]	; (8005938 <HAL_TIM_Encoder_MspInit+0x208>)
 80057ea:	f003 fe45 	bl	8009478 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80057ee:	e09b      	b.n	8005928 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM3)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a51      	ldr	r2, [pc, #324]	; (800593c <HAL_TIM_Encoder_MspInit+0x20c>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d12e      	bne.n	8005858 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80057fa:	4b4d      	ldr	r3, [pc, #308]	; (8005930 <HAL_TIM_Encoder_MspInit+0x200>)
 80057fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005800:	4a4b      	ldr	r2, [pc, #300]	; (8005930 <HAL_TIM_Encoder_MspInit+0x200>)
 8005802:	f043 0302 	orr.w	r3, r3, #2
 8005806:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800580a:	4b49      	ldr	r3, [pc, #292]	; (8005930 <HAL_TIM_Encoder_MspInit+0x200>)
 800580c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005810:	f003 0302 	and.w	r3, r3, #2
 8005814:	61fb      	str	r3, [r7, #28]
 8005816:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005818:	4b45      	ldr	r3, [pc, #276]	; (8005930 <HAL_TIM_Encoder_MspInit+0x200>)
 800581a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800581e:	4a44      	ldr	r2, [pc, #272]	; (8005930 <HAL_TIM_Encoder_MspInit+0x200>)
 8005820:	f043 0302 	orr.w	r3, r3, #2
 8005824:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005828:	4b41      	ldr	r3, [pc, #260]	; (8005930 <HAL_TIM_Encoder_MspInit+0x200>)
 800582a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800582e:	f003 0302 	and.w	r3, r3, #2
 8005832:	61bb      	str	r3, [r7, #24]
 8005834:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005836:	2330      	movs	r3, #48	; 0x30
 8005838:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800583a:	2302      	movs	r3, #2
 800583c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800583e:	2300      	movs	r3, #0
 8005840:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005842:	2300      	movs	r3, #0
 8005844:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005846:	2302      	movs	r3, #2
 8005848:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800584a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800584e:	4619      	mov	r1, r3
 8005850:	4839      	ldr	r0, [pc, #228]	; (8005938 <HAL_TIM_Encoder_MspInit+0x208>)
 8005852:	f003 fe11 	bl	8009478 <HAL_GPIO_Init>
}
 8005856:	e067      	b.n	8005928 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM4)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a38      	ldr	r2, [pc, #224]	; (8005940 <HAL_TIM_Encoder_MspInit+0x210>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d12f      	bne.n	80058c2 <HAL_TIM_Encoder_MspInit+0x192>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005862:	4b33      	ldr	r3, [pc, #204]	; (8005930 <HAL_TIM_Encoder_MspInit+0x200>)
 8005864:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005868:	4a31      	ldr	r2, [pc, #196]	; (8005930 <HAL_TIM_Encoder_MspInit+0x200>)
 800586a:	f043 0304 	orr.w	r3, r3, #4
 800586e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005872:	4b2f      	ldr	r3, [pc, #188]	; (8005930 <HAL_TIM_Encoder_MspInit+0x200>)
 8005874:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005878:	f003 0304 	and.w	r3, r3, #4
 800587c:	617b      	str	r3, [r7, #20]
 800587e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005880:	4b2b      	ldr	r3, [pc, #172]	; (8005930 <HAL_TIM_Encoder_MspInit+0x200>)
 8005882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005886:	4a2a      	ldr	r2, [pc, #168]	; (8005930 <HAL_TIM_Encoder_MspInit+0x200>)
 8005888:	f043 0308 	orr.w	r3, r3, #8
 800588c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005890:	4b27      	ldr	r3, [pc, #156]	; (8005930 <HAL_TIM_Encoder_MspInit+0x200>)
 8005892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005896:	f003 0308 	and.w	r3, r3, #8
 800589a:	613b      	str	r3, [r7, #16]
 800589c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800589e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80058a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058a4:	2302      	movs	r3, #2
 80058a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058a8:	2300      	movs	r3, #0
 80058aa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058ac:	2300      	movs	r3, #0
 80058ae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80058b0:	2302      	movs	r3, #2
 80058b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80058b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80058b8:	4619      	mov	r1, r3
 80058ba:	4822      	ldr	r0, [pc, #136]	; (8005944 <HAL_TIM_Encoder_MspInit+0x214>)
 80058bc:	f003 fddc 	bl	8009478 <HAL_GPIO_Init>
}
 80058c0:	e032      	b.n	8005928 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM5)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a20      	ldr	r2, [pc, #128]	; (8005948 <HAL_TIM_Encoder_MspInit+0x218>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d12d      	bne.n	8005928 <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80058cc:	4b18      	ldr	r3, [pc, #96]	; (8005930 <HAL_TIM_Encoder_MspInit+0x200>)
 80058ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80058d2:	4a17      	ldr	r2, [pc, #92]	; (8005930 <HAL_TIM_Encoder_MspInit+0x200>)
 80058d4:	f043 0308 	orr.w	r3, r3, #8
 80058d8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80058dc:	4b14      	ldr	r3, [pc, #80]	; (8005930 <HAL_TIM_Encoder_MspInit+0x200>)
 80058de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80058e2:	f003 0308 	and.w	r3, r3, #8
 80058e6:	60fb      	str	r3, [r7, #12]
 80058e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058ea:	4b11      	ldr	r3, [pc, #68]	; (8005930 <HAL_TIM_Encoder_MspInit+0x200>)
 80058ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80058f0:	4a0f      	ldr	r2, [pc, #60]	; (8005930 <HAL_TIM_Encoder_MspInit+0x200>)
 80058f2:	f043 0301 	orr.w	r3, r3, #1
 80058f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80058fa:	4b0d      	ldr	r3, [pc, #52]	; (8005930 <HAL_TIM_Encoder_MspInit+0x200>)
 80058fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	60bb      	str	r3, [r7, #8]
 8005906:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005908:	2303      	movs	r3, #3
 800590a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800590c:	2302      	movs	r3, #2
 800590e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005910:	2300      	movs	r3, #0
 8005912:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005914:	2300      	movs	r3, #0
 8005916:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005918:	2302      	movs	r3, #2
 800591a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800591c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005920:	4619      	mov	r1, r3
 8005922:	4804      	ldr	r0, [pc, #16]	; (8005934 <HAL_TIM_Encoder_MspInit+0x204>)
 8005924:	f003 fda8 	bl	8009478 <HAL_GPIO_Init>
}
 8005928:	bf00      	nop
 800592a:	3740      	adds	r7, #64	; 0x40
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	58024400 	.word	0x58024400
 8005934:	58020000 	.word	0x58020000
 8005938:	58020400 	.word	0x58020400
 800593c:	40000400 	.word	0x40000400
 8005940:	40000800 	.word	0x40000800
 8005944:	58020c00 	.word	0x58020c00
 8005948:	40000c00 	.word	0x40000c00

0800594c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a19      	ldr	r2, [pc, #100]	; (80059c0 <HAL_TIM_PWM_MspInit+0x74>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d117      	bne.n	800598e <HAL_TIM_PWM_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800595e:	4b19      	ldr	r3, [pc, #100]	; (80059c4 <HAL_TIM_PWM_MspInit+0x78>)
 8005960:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005964:	4a17      	ldr	r2, [pc, #92]	; (80059c4 <HAL_TIM_PWM_MspInit+0x78>)
 8005966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800596a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800596e:	4b15      	ldr	r3, [pc, #84]	; (80059c4 <HAL_TIM_PWM_MspInit+0x78>)
 8005970:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005978:	60fb      	str	r3, [r7, #12]
 800597a:	68fb      	ldr	r3, [r7, #12]
    /* TIM12 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800597c:	2200      	movs	r2, #0
 800597e:	2100      	movs	r1, #0
 8005980:	202b      	movs	r0, #43	; 0x2b
 8005982:	f000 fd48 	bl	8006416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8005986:	202b      	movs	r0, #43	; 0x2b
 8005988:	f000 fd5f 	bl	800644a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800598c:	e013      	b.n	80059b6 <HAL_TIM_PWM_MspInit+0x6a>
  else if(htim_pwm->Instance==TIM15)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a0d      	ldr	r2, [pc, #52]	; (80059c8 <HAL_TIM_PWM_MspInit+0x7c>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d10e      	bne.n	80059b6 <HAL_TIM_PWM_MspInit+0x6a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005998:	4b0a      	ldr	r3, [pc, #40]	; (80059c4 <HAL_TIM_PWM_MspInit+0x78>)
 800599a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800599e:	4a09      	ldr	r2, [pc, #36]	; (80059c4 <HAL_TIM_PWM_MspInit+0x78>)
 80059a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80059a8:	4b06      	ldr	r3, [pc, #24]	; (80059c4 <HAL_TIM_PWM_MspInit+0x78>)
 80059aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059b2:	60bb      	str	r3, [r7, #8]
 80059b4:	68bb      	ldr	r3, [r7, #8]
}
 80059b6:	bf00      	nop
 80059b8:	3710      	adds	r7, #16
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	40001800 	.word	0x40001800
 80059c4:	58024400 	.word	0x58024400
 80059c8:	40014000 	.word	0x40014000

080059cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b08a      	sub	sp, #40	; 0x28
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059d4:	f107 0314 	add.w	r3, r7, #20
 80059d8:	2200      	movs	r2, #0
 80059da:	601a      	str	r2, [r3, #0]
 80059dc:	605a      	str	r2, [r3, #4]
 80059de:	609a      	str	r2, [r3, #8]
 80059e0:	60da      	str	r2, [r3, #12]
 80059e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a25      	ldr	r2, [pc, #148]	; (8005a80 <HAL_TIM_MspPostInit+0xb4>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d120      	bne.n	8005a30 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059ee:	4b25      	ldr	r3, [pc, #148]	; (8005a84 <HAL_TIM_MspPostInit+0xb8>)
 80059f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059f4:	4a23      	ldr	r2, [pc, #140]	; (8005a84 <HAL_TIM_MspPostInit+0xb8>)
 80059f6:	f043 0302 	orr.w	r3, r3, #2
 80059fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80059fe:	4b21      	ldr	r3, [pc, #132]	; (8005a84 <HAL_TIM_MspPostInit+0xb8>)
 8005a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a04:	f003 0302 	and.w	r3, r3, #2
 8005a08:	613b      	str	r3, [r7, #16]
 8005a0a:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8005a0c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a12:	2302      	movs	r3, #2
 8005a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a16:	2300      	movs	r3, #0
 8005a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8005a1e:	2302      	movs	r3, #2
 8005a20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a22:	f107 0314 	add.w	r3, r7, #20
 8005a26:	4619      	mov	r1, r3
 8005a28:	4817      	ldr	r0, [pc, #92]	; (8005a88 <HAL_TIM_MspPostInit+0xbc>)
 8005a2a:	f003 fd25 	bl	8009478 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8005a2e:	e023      	b.n	8005a78 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM15)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a15      	ldr	r2, [pc, #84]	; (8005a8c <HAL_TIM_MspPostInit+0xc0>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d11e      	bne.n	8005a78 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005a3a:	4b12      	ldr	r3, [pc, #72]	; (8005a84 <HAL_TIM_MspPostInit+0xb8>)
 8005a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a40:	4a10      	ldr	r2, [pc, #64]	; (8005a84 <HAL_TIM_MspPostInit+0xb8>)
 8005a42:	f043 0310 	orr.w	r3, r3, #16
 8005a46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005a4a:	4b0e      	ldr	r3, [pc, #56]	; (8005a84 <HAL_TIM_MspPostInit+0xb8>)
 8005a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a50:	f003 0310 	and.w	r3, r3, #16
 8005a54:	60fb      	str	r3, [r7, #12]
 8005a56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005a58:	2360      	movs	r3, #96	; 0x60
 8005a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a60:	2300      	movs	r3, #0
 8005a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a64:	2300      	movs	r3, #0
 8005a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8005a68:	2304      	movs	r3, #4
 8005a6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005a6c:	f107 0314 	add.w	r3, r7, #20
 8005a70:	4619      	mov	r1, r3
 8005a72:	4807      	ldr	r0, [pc, #28]	; (8005a90 <HAL_TIM_MspPostInit+0xc4>)
 8005a74:	f003 fd00 	bl	8009478 <HAL_GPIO_Init>
}
 8005a78:	bf00      	nop
 8005a7a:	3728      	adds	r7, #40	; 0x28
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	40001800 	.word	0x40001800
 8005a84:	58024400 	.word	0x58024400
 8005a88:	58020400 	.word	0x58020400
 8005a8c:	40014000 	.word	0x40014000
 8005a90:	58021000 	.word	0x58021000

08005a94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b0bc      	sub	sp, #240	; 0xf0
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a9c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	601a      	str	r2, [r3, #0]
 8005aa4:	605a      	str	r2, [r3, #4]
 8005aa6:	609a      	str	r2, [r3, #8]
 8005aa8:	60da      	str	r2, [r3, #12]
 8005aaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005aac:	f107 0320 	add.w	r3, r7, #32
 8005ab0:	22b8      	movs	r2, #184	; 0xb8
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f00a fbba 	bl	801022e <memset>
  if(huart->Instance==USART1)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a97      	ldr	r2, [pc, #604]	; (8005d1c <HAL_UART_MspInit+0x288>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	f040 80ae 	bne.w	8005c22 <HAL_UART_MspInit+0x18e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005ac6:	f04f 0201 	mov.w	r2, #1
 8005aca:	f04f 0300 	mov.w	r3, #0
 8005ace:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005ad8:	f107 0320 	add.w	r3, r7, #32
 8005adc:	4618      	mov	r0, r3
 8005ade:	f004 ff2f 	bl	800a940 <HAL_RCCEx_PeriphCLKConfig>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d001      	beq.n	8005aec <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8005ae8:	f7fc fa66 	bl	8001fb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005aec:	4b8c      	ldr	r3, [pc, #560]	; (8005d20 <HAL_UART_MspInit+0x28c>)
 8005aee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005af2:	4a8b      	ldr	r2, [pc, #556]	; (8005d20 <HAL_UART_MspInit+0x28c>)
 8005af4:	f043 0310 	orr.w	r3, r3, #16
 8005af8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005afc:	4b88      	ldr	r3, [pc, #544]	; (8005d20 <HAL_UART_MspInit+0x28c>)
 8005afe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b02:	f003 0310 	and.w	r3, r3, #16
 8005b06:	61fb      	str	r3, [r7, #28]
 8005b08:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b0a:	4b85      	ldr	r3, [pc, #532]	; (8005d20 <HAL_UART_MspInit+0x28c>)
 8005b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b10:	4a83      	ldr	r2, [pc, #524]	; (8005d20 <HAL_UART_MspInit+0x28c>)
 8005b12:	f043 0301 	orr.w	r3, r3, #1
 8005b16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005b1a:	4b81      	ldr	r3, [pc, #516]	; (8005d20 <HAL_UART_MspInit+0x28c>)
 8005b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b20:	f003 0301 	and.w	r3, r3, #1
 8005b24:	61bb      	str	r3, [r7, #24]
 8005b26:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005b28:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005b2c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b30:	2302      	movs	r3, #2
 8005b32:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b36:	2300      	movs	r3, #0
 8005b38:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005b42:	2307      	movs	r3, #7
 8005b44:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b48:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	4875      	ldr	r0, [pc, #468]	; (8005d24 <HAL_UART_MspInit+0x290>)
 8005b50:	f003 fc92 	bl	8009478 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8005b54:	4b74      	ldr	r3, [pc, #464]	; (8005d28 <HAL_UART_MspInit+0x294>)
 8005b56:	4a75      	ldr	r2, [pc, #468]	; (8005d2c <HAL_UART_MspInit+0x298>)
 8005b58:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8005b5a:	4b73      	ldr	r3, [pc, #460]	; (8005d28 <HAL_UART_MspInit+0x294>)
 8005b5c:	2229      	movs	r2, #41	; 0x29
 8005b5e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005b60:	4b71      	ldr	r3, [pc, #452]	; (8005d28 <HAL_UART_MspInit+0x294>)
 8005b62:	2200      	movs	r2, #0
 8005b64:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b66:	4b70      	ldr	r3, [pc, #448]	; (8005d28 <HAL_UART_MspInit+0x294>)
 8005b68:	2200      	movs	r2, #0
 8005b6a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005b6c:	4b6e      	ldr	r3, [pc, #440]	; (8005d28 <HAL_UART_MspInit+0x294>)
 8005b6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b72:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b74:	4b6c      	ldr	r3, [pc, #432]	; (8005d28 <HAL_UART_MspInit+0x294>)
 8005b76:	2200      	movs	r2, #0
 8005b78:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005b7a:	4b6b      	ldr	r3, [pc, #428]	; (8005d28 <HAL_UART_MspInit+0x294>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8005b80:	4b69      	ldr	r3, [pc, #420]	; (8005d28 <HAL_UART_MspInit+0x294>)
 8005b82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b86:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005b88:	4b67      	ldr	r3, [pc, #412]	; (8005d28 <HAL_UART_MspInit+0x294>)
 8005b8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005b8e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005b90:	4b65      	ldr	r3, [pc, #404]	; (8005d28 <HAL_UART_MspInit+0x294>)
 8005b92:	2200      	movs	r2, #0
 8005b94:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005b96:	4864      	ldr	r0, [pc, #400]	; (8005d28 <HAL_UART_MspInit+0x294>)
 8005b98:	f000 fc80 	bl	800649c <HAL_DMA_Init>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d001      	beq.n	8005ba6 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8005ba2:	f7fc fa09 	bl	8001fb8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a5f      	ldr	r2, [pc, #380]	; (8005d28 <HAL_UART_MspInit+0x294>)
 8005baa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8005bae:	4a5e      	ldr	r2, [pc, #376]	; (8005d28 <HAL_UART_MspInit+0x294>)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 8005bb4:	4b5e      	ldr	r3, [pc, #376]	; (8005d30 <HAL_UART_MspInit+0x29c>)
 8005bb6:	4a5f      	ldr	r2, [pc, #380]	; (8005d34 <HAL_UART_MspInit+0x2a0>)
 8005bb8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8005bba:	4b5d      	ldr	r3, [pc, #372]	; (8005d30 <HAL_UART_MspInit+0x29c>)
 8005bbc:	222a      	movs	r2, #42	; 0x2a
 8005bbe:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005bc0:	4b5b      	ldr	r3, [pc, #364]	; (8005d30 <HAL_UART_MspInit+0x29c>)
 8005bc2:	2240      	movs	r2, #64	; 0x40
 8005bc4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005bc6:	4b5a      	ldr	r3, [pc, #360]	; (8005d30 <HAL_UART_MspInit+0x29c>)
 8005bc8:	2200      	movs	r2, #0
 8005bca:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005bcc:	4b58      	ldr	r3, [pc, #352]	; (8005d30 <HAL_UART_MspInit+0x29c>)
 8005bce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005bd2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005bd4:	4b56      	ldr	r3, [pc, #344]	; (8005d30 <HAL_UART_MspInit+0x29c>)
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005bda:	4b55      	ldr	r3, [pc, #340]	; (8005d30 <HAL_UART_MspInit+0x29c>)
 8005bdc:	2200      	movs	r2, #0
 8005bde:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005be0:	4b53      	ldr	r3, [pc, #332]	; (8005d30 <HAL_UART_MspInit+0x29c>)
 8005be2:	2200      	movs	r2, #0
 8005be4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005be6:	4b52      	ldr	r3, [pc, #328]	; (8005d30 <HAL_UART_MspInit+0x29c>)
 8005be8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005bec:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005bee:	4b50      	ldr	r3, [pc, #320]	; (8005d30 <HAL_UART_MspInit+0x29c>)
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005bf4:	484e      	ldr	r0, [pc, #312]	; (8005d30 <HAL_UART_MspInit+0x29c>)
 8005bf6:	f000 fc51 	bl	800649c <HAL_DMA_Init>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d001      	beq.n	8005c04 <HAL_UART_MspInit+0x170>
    {
      Error_Handler();
 8005c00:	f7fc f9da 	bl	8001fb8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a4a      	ldr	r2, [pc, #296]	; (8005d30 <HAL_UART_MspInit+0x29c>)
 8005c08:	67da      	str	r2, [r3, #124]	; 0x7c
 8005c0a:	4a49      	ldr	r2, [pc, #292]	; (8005d30 <HAL_UART_MspInit+0x29c>)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005c10:	2200      	movs	r2, #0
 8005c12:	2100      	movs	r1, #0
 8005c14:	2025      	movs	r0, #37	; 0x25
 8005c16:	f000 fbfe 	bl	8006416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005c1a:	2025      	movs	r0, #37	; 0x25
 8005c1c:	f000 fc15 	bl	800644a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005c20:	e078      	b.n	8005d14 <HAL_UART_MspInit+0x280>
  else if(huart->Instance==USART3)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a44      	ldr	r2, [pc, #272]	; (8005d38 <HAL_UART_MspInit+0x2a4>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d173      	bne.n	8005d14 <HAL_UART_MspInit+0x280>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005c2c:	f04f 0202 	mov.w	r2, #2
 8005c30:	f04f 0300 	mov.w	r3, #0
 8005c34:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005c3e:	f107 0320 	add.w	r3, r7, #32
 8005c42:	4618      	mov	r0, r3
 8005c44:	f004 fe7c 	bl	800a940 <HAL_RCCEx_PeriphCLKConfig>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d001      	beq.n	8005c52 <HAL_UART_MspInit+0x1be>
      Error_Handler();
 8005c4e:	f7fc f9b3 	bl	8001fb8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005c52:	4b33      	ldr	r3, [pc, #204]	; (8005d20 <HAL_UART_MspInit+0x28c>)
 8005c54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c58:	4a31      	ldr	r2, [pc, #196]	; (8005d20 <HAL_UART_MspInit+0x28c>)
 8005c5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c5e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005c62:	4b2f      	ldr	r3, [pc, #188]	; (8005d20 <HAL_UART_MspInit+0x28c>)
 8005c64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c6c:	617b      	str	r3, [r7, #20]
 8005c6e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c70:	4b2b      	ldr	r3, [pc, #172]	; (8005d20 <HAL_UART_MspInit+0x28c>)
 8005c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c76:	4a2a      	ldr	r2, [pc, #168]	; (8005d20 <HAL_UART_MspInit+0x28c>)
 8005c78:	f043 0302 	orr.w	r3, r3, #2
 8005c7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005c80:	4b27      	ldr	r3, [pc, #156]	; (8005d20 <HAL_UART_MspInit+0x28c>)
 8005c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c86:	f003 0302 	and.w	r3, r3, #2
 8005c8a:	613b      	str	r3, [r7, #16]
 8005c8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005c8e:	4b24      	ldr	r3, [pc, #144]	; (8005d20 <HAL_UART_MspInit+0x28c>)
 8005c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c94:	4a22      	ldr	r2, [pc, #136]	; (8005d20 <HAL_UART_MspInit+0x28c>)
 8005c96:	f043 0308 	orr.w	r3, r3, #8
 8005c9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005c9e:	4b20      	ldr	r3, [pc, #128]	; (8005d20 <HAL_UART_MspInit+0x28c>)
 8005ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ca4:	f003 0308 	and.w	r3, r3, #8
 8005ca8:	60fb      	str	r3, [r7, #12]
 8005caa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cb0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005cc6:	2307      	movs	r3, #7
 8005cc8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ccc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	481a      	ldr	r0, [pc, #104]	; (8005d3c <HAL_UART_MspInit+0x2a8>)
 8005cd4:	f003 fbd0 	bl	8009478 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005cd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cdc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ce0:	2302      	movs	r3, #2
 8005ce2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cec:	2300      	movs	r3, #0
 8005cee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005cf2:	2307      	movs	r3, #7
 8005cf4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005cf8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	4810      	ldr	r0, [pc, #64]	; (8005d40 <HAL_UART_MspInit+0x2ac>)
 8005d00:	f003 fbba 	bl	8009478 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005d04:	2200      	movs	r2, #0
 8005d06:	2100      	movs	r1, #0
 8005d08:	2027      	movs	r0, #39	; 0x27
 8005d0a:	f000 fb84 	bl	8006416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005d0e:	2027      	movs	r0, #39	; 0x27
 8005d10:	f000 fb9b 	bl	800644a <HAL_NVIC_EnableIRQ>
}
 8005d14:	bf00      	nop
 8005d16:	37f0      	adds	r7, #240	; 0xf0
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	40011000 	.word	0x40011000
 8005d20:	58024400 	.word	0x58024400
 8005d24:	58020000 	.word	0x58020000
 8005d28:	2400088c 	.word	0x2400088c
 8005d2c:	40020010 	.word	0x40020010
 8005d30:	24000904 	.word	0x24000904
 8005d34:	40020028 	.word	0x40020028
 8005d38:	40004800 	.word	0x40004800
 8005d3c:	58020400 	.word	0x58020400
 8005d40:	58020c00 	.word	0x58020c00

08005d44 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a1e      	ldr	r2, [pc, #120]	; (8005dcc <HAL_UART_MspDeInit+0x88>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d11b      	bne.n	8005d8e <HAL_UART_MspDeInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8005d56:	4b1e      	ldr	r3, [pc, #120]	; (8005dd0 <HAL_UART_MspDeInit+0x8c>)
 8005d58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d5c:	4a1c      	ldr	r2, [pc, #112]	; (8005dd0 <HAL_UART_MspDeInit+0x8c>)
 8005d5e:	f023 0310 	bic.w	r3, r3, #16
 8005d62:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8005d66:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005d6a:	481a      	ldr	r0, [pc, #104]	; (8005dd4 <HAL_UART_MspDeInit+0x90>)
 8005d6c:	f003 fd2c 	bl	80097c8 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d76:	4618      	mov	r0, r3
 8005d78:	f000 fee8 	bl	8006b4c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d80:	4618      	mov	r0, r3
 8005d82:	f000 fee3 	bl	8006b4c <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8005d86:	2025      	movs	r0, #37	; 0x25
 8005d88:	f000 fb6d 	bl	8006466 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8005d8c:	e019      	b.n	8005dc2 <HAL_UART_MspDeInit+0x7e>
  else if(huart->Instance==USART3)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a11      	ldr	r2, [pc, #68]	; (8005dd8 <HAL_UART_MspDeInit+0x94>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d114      	bne.n	8005dc2 <HAL_UART_MspDeInit+0x7e>
    __HAL_RCC_USART3_CLK_DISABLE();
 8005d98:	4b0d      	ldr	r3, [pc, #52]	; (8005dd0 <HAL_UART_MspDeInit+0x8c>)
 8005d9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d9e:	4a0c      	ldr	r2, [pc, #48]	; (8005dd0 <HAL_UART_MspDeInit+0x8c>)
 8005da0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005da4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8005da8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005dac:	480b      	ldr	r0, [pc, #44]	; (8005ddc <HAL_UART_MspDeInit+0x98>)
 8005dae:	f003 fd0b 	bl	80097c8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_9);
 8005db2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005db6:	480a      	ldr	r0, [pc, #40]	; (8005de0 <HAL_UART_MspDeInit+0x9c>)
 8005db8:	f003 fd06 	bl	80097c8 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 8005dbc:	2027      	movs	r0, #39	; 0x27
 8005dbe:	f000 fb52 	bl	8006466 <HAL_NVIC_DisableIRQ>
}
 8005dc2:	bf00      	nop
 8005dc4:	3708      	adds	r7, #8
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	40011000 	.word	0x40011000
 8005dd0:	58024400 	.word	0x58024400
 8005dd4:	58020000 	.word	0x58020000
 8005dd8:	40004800 	.word	0x40004800
 8005ddc:	58020400 	.word	0x58020400
 8005de0:	58020c00 	.word	0x58020c00

08005de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005de4:	b480      	push	{r7}
 8005de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005de8:	e7fe      	b.n	8005de8 <NMI_Handler+0x4>

08005dea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005dea:	b480      	push	{r7}
 8005dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005dee:	e7fe      	b.n	8005dee <HardFault_Handler+0x4>

08005df0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005df0:	b480      	push	{r7}
 8005df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005df4:	e7fe      	b.n	8005df4 <MemManage_Handler+0x4>

08005df6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005df6:	b480      	push	{r7}
 8005df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005dfa:	e7fe      	b.n	8005dfa <BusFault_Handler+0x4>

08005dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005e00:	e7fe      	b.n	8005e00 <UsageFault_Handler+0x4>

08005e02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005e02:	b480      	push	{r7}
 8005e04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005e06:	bf00      	nop
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005e10:	b480      	push	{r7}
 8005e12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005e14:	bf00      	nop
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005e22:	bf00      	nop
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005e30:	f000 f9d2 	bl	80061d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005e34:	bf00      	nop
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005e3c:	4802      	ldr	r0, [pc, #8]	; (8005e48 <DMA1_Stream0_IRQHandler+0x10>)
 8005e3e:	f002 f809 	bl	8007e54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8005e42:	bf00      	nop
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	2400088c 	.word	0x2400088c

08005e4c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005e50:	4802      	ldr	r0, [pc, #8]	; (8005e5c <DMA1_Stream1_IRQHandler+0x10>)
 8005e52:	f001 ffff 	bl	8007e54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8005e56:	bf00      	nop
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	24000904 	.word	0x24000904

08005e60 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005e64:	4802      	ldr	r0, [pc, #8]	; (8005e70 <TIM1_BRK_IRQHandler+0x10>)
 8005e66:	f006 fed3 	bl	800cc10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8005e6a:	bf00      	nop
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	240004b8 	.word	0x240004b8

08005e74 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005e78:	4802      	ldr	r0, [pc, #8]	; (8005e84 <TIM1_UP_IRQHandler+0x10>)
 8005e7a:	f006 fec9 	bl	800cc10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8005e7e:	bf00      	nop
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	240004b8 	.word	0x240004b8

08005e88 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005e8c:	4802      	ldr	r0, [pc, #8]	; (8005e98 <TIM1_TRG_COM_IRQHandler+0x10>)
 8005e8e:	f006 febf 	bl	800cc10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8005e92:	bf00      	nop
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	240004b8 	.word	0x240004b8

08005e9c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005ea0:	4802      	ldr	r0, [pc, #8]	; (8005eac <TIM1_CC_IRQHandler+0x10>)
 8005ea2:	f006 feb5 	bl	800cc10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8005ea6:	bf00      	nop
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	240004b8 	.word	0x240004b8

08005eb0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005eb4:	4802      	ldr	r0, [pc, #8]	; (8005ec0 <USART1_IRQHandler+0x10>)
 8005eb6:	f008 f983 	bl	800e1c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005eba:	bf00      	nop
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	24000764 	.word	0x24000764

08005ec4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005ec8:	4802      	ldr	r0, [pc, #8]	; (8005ed4 <USART3_IRQHandler+0x10>)
 8005eca:	f008 f979 	bl	800e1c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005ece:	bf00      	nop
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	240007f8 	.word	0x240007f8

08005ed8 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005edc:	4803      	ldr	r0, [pc, #12]	; (8005eec <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8005ede:	f006 fe97 	bl	800cc10 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8005ee2:	4803      	ldr	r0, [pc, #12]	; (8005ef0 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8005ee4:	f006 fe94 	bl	800cc10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8005ee8:	bf00      	nop
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	24000634 	.word	0x24000634
 8005ef0:	24000680 	.word	0x24000680

08005ef4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005ef8:	4802      	ldr	r0, [pc, #8]	; (8005f04 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8005efa:	f006 fe89 	bl	800cc10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8005efe:	bf00      	nop
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	24000634 	.word	0x24000634

08005f08 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005f0c:	4802      	ldr	r0, [pc, #8]	; (8005f18 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8005f0e:	f006 fe7f 	bl	800cc10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8005f12:	bf00      	nop
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	24000634 	.word	0x24000634

08005f1c <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005f20:	4802      	ldr	r0, [pc, #8]	; (8005f2c <TIM8_CC_IRQHandler+0x10>)
 8005f22:	f006 fe75 	bl	800cc10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8005f26:	bf00      	nop
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	24000634 	.word	0x24000634

08005f30 <TIM23_IRQHandler>:

/**
  * @brief This function handles TIM23 global interrupt.
  */
void TIM23_IRQHandler(void)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM23_IRQn 0 */

  /* USER CODE END TIM23_IRQn 0 */
  HAL_TIM_IRQHandler(&htim23);
 8005f34:	4802      	ldr	r0, [pc, #8]	; (8005f40 <TIM23_IRQHandler+0x10>)
 8005f36:	f006 fe6b 	bl	800cc10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM23_IRQn 1 */

  /* USER CODE END TIM23_IRQn 1 */
}
 8005f3a:	bf00      	nop
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	24000718 	.word	0x24000718

08005f44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b086      	sub	sp, #24
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005f4c:	4a14      	ldr	r2, [pc, #80]	; (8005fa0 <_sbrk+0x5c>)
 8005f4e:	4b15      	ldr	r3, [pc, #84]	; (8005fa4 <_sbrk+0x60>)
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005f58:	4b13      	ldr	r3, [pc, #76]	; (8005fa8 <_sbrk+0x64>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d102      	bne.n	8005f66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005f60:	4b11      	ldr	r3, [pc, #68]	; (8005fa8 <_sbrk+0x64>)
 8005f62:	4a12      	ldr	r2, [pc, #72]	; (8005fac <_sbrk+0x68>)
 8005f64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005f66:	4b10      	ldr	r3, [pc, #64]	; (8005fa8 <_sbrk+0x64>)
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d207      	bcs.n	8005f84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005f74:	f00a f964 	bl	8010240 <__errno>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	220c      	movs	r2, #12
 8005f7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f82:	e009      	b.n	8005f98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005f84:	4b08      	ldr	r3, [pc, #32]	; (8005fa8 <_sbrk+0x64>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005f8a:	4b07      	ldr	r3, [pc, #28]	; (8005fa8 <_sbrk+0x64>)
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4413      	add	r3, r2
 8005f92:	4a05      	ldr	r2, [pc, #20]	; (8005fa8 <_sbrk+0x64>)
 8005f94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005f96:	68fb      	ldr	r3, [r7, #12]
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3718      	adds	r7, #24
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	24050000 	.word	0x24050000
 8005fa4:	00000400 	.word	0x00000400
 8005fa8:	24002034 	.word	0x24002034
 8005fac:	24002188 	.word	0x24002188

08005fb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005fb4:	4b32      	ldr	r3, [pc, #200]	; (8006080 <SystemInit+0xd0>)
 8005fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fba:	4a31      	ldr	r2, [pc, #196]	; (8006080 <SystemInit+0xd0>)
 8005fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005fc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005fc4:	4b2f      	ldr	r3, [pc, #188]	; (8006084 <SystemInit+0xd4>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 030f 	and.w	r3, r3, #15
 8005fcc:	2b06      	cmp	r3, #6
 8005fce:	d807      	bhi.n	8005fe0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005fd0:	4b2c      	ldr	r3, [pc, #176]	; (8006084 <SystemInit+0xd4>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f023 030f 	bic.w	r3, r3, #15
 8005fd8:	4a2a      	ldr	r2, [pc, #168]	; (8006084 <SystemInit+0xd4>)
 8005fda:	f043 0307 	orr.w	r3, r3, #7
 8005fde:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005fe0:	4b29      	ldr	r3, [pc, #164]	; (8006088 <SystemInit+0xd8>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a28      	ldr	r2, [pc, #160]	; (8006088 <SystemInit+0xd8>)
 8005fe6:	f043 0301 	orr.w	r3, r3, #1
 8005fea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005fec:	4b26      	ldr	r3, [pc, #152]	; (8006088 <SystemInit+0xd8>)
 8005fee:	2200      	movs	r2, #0
 8005ff0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005ff2:	4b25      	ldr	r3, [pc, #148]	; (8006088 <SystemInit+0xd8>)
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	4924      	ldr	r1, [pc, #144]	; (8006088 <SystemInit+0xd8>)
 8005ff8:	4b24      	ldr	r3, [pc, #144]	; (800608c <SystemInit+0xdc>)
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005ffe:	4b21      	ldr	r3, [pc, #132]	; (8006084 <SystemInit+0xd4>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0308 	and.w	r3, r3, #8
 8006006:	2b00      	cmp	r3, #0
 8006008:	d007      	beq.n	800601a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800600a:	4b1e      	ldr	r3, [pc, #120]	; (8006084 <SystemInit+0xd4>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f023 030f 	bic.w	r3, r3, #15
 8006012:	4a1c      	ldr	r2, [pc, #112]	; (8006084 <SystemInit+0xd4>)
 8006014:	f043 0307 	orr.w	r3, r3, #7
 8006018:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800601a:	4b1b      	ldr	r3, [pc, #108]	; (8006088 <SystemInit+0xd8>)
 800601c:	2200      	movs	r2, #0
 800601e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8006020:	4b19      	ldr	r3, [pc, #100]	; (8006088 <SystemInit+0xd8>)
 8006022:	2200      	movs	r2, #0
 8006024:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8006026:	4b18      	ldr	r3, [pc, #96]	; (8006088 <SystemInit+0xd8>)
 8006028:	2200      	movs	r2, #0
 800602a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800602c:	4b16      	ldr	r3, [pc, #88]	; (8006088 <SystemInit+0xd8>)
 800602e:	4a18      	ldr	r2, [pc, #96]	; (8006090 <SystemInit+0xe0>)
 8006030:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8006032:	4b15      	ldr	r3, [pc, #84]	; (8006088 <SystemInit+0xd8>)
 8006034:	4a17      	ldr	r2, [pc, #92]	; (8006094 <SystemInit+0xe4>)
 8006036:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8006038:	4b13      	ldr	r3, [pc, #76]	; (8006088 <SystemInit+0xd8>)
 800603a:	4a17      	ldr	r2, [pc, #92]	; (8006098 <SystemInit+0xe8>)
 800603c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800603e:	4b12      	ldr	r3, [pc, #72]	; (8006088 <SystemInit+0xd8>)
 8006040:	2200      	movs	r2, #0
 8006042:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8006044:	4b10      	ldr	r3, [pc, #64]	; (8006088 <SystemInit+0xd8>)
 8006046:	4a14      	ldr	r2, [pc, #80]	; (8006098 <SystemInit+0xe8>)
 8006048:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800604a:	4b0f      	ldr	r3, [pc, #60]	; (8006088 <SystemInit+0xd8>)
 800604c:	2200      	movs	r2, #0
 800604e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8006050:	4b0d      	ldr	r3, [pc, #52]	; (8006088 <SystemInit+0xd8>)
 8006052:	4a11      	ldr	r2, [pc, #68]	; (8006098 <SystemInit+0xe8>)
 8006054:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8006056:	4b0c      	ldr	r3, [pc, #48]	; (8006088 <SystemInit+0xd8>)
 8006058:	2200      	movs	r2, #0
 800605a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800605c:	4b0a      	ldr	r3, [pc, #40]	; (8006088 <SystemInit+0xd8>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a09      	ldr	r2, [pc, #36]	; (8006088 <SystemInit+0xd8>)
 8006062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006066:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8006068:	4b07      	ldr	r3, [pc, #28]	; (8006088 <SystemInit+0xd8>)
 800606a:	2200      	movs	r2, #0
 800606c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800606e:	4b0b      	ldr	r3, [pc, #44]	; (800609c <SystemInit+0xec>)
 8006070:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8006074:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8006076:	bf00      	nop
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr
 8006080:	e000ed00 	.word	0xe000ed00
 8006084:	52002000 	.word	0x52002000
 8006088:	58024400 	.word	0x58024400
 800608c:	eaf6ed7f 	.word	0xeaf6ed7f
 8006090:	02020200 	.word	0x02020200
 8006094:	01ff0000 	.word	0x01ff0000
 8006098:	01010280 	.word	0x01010280
 800609c:	52004000 	.word	0x52004000

080060a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80060a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80060d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80060a4:	f7ff ff84 	bl	8005fb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80060a8:	480c      	ldr	r0, [pc, #48]	; (80060dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80060aa:	490d      	ldr	r1, [pc, #52]	; (80060e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80060ac:	4a0d      	ldr	r2, [pc, #52]	; (80060e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80060ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80060b0:	e002      	b.n	80060b8 <LoopCopyDataInit>

080060b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80060b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80060b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80060b6:	3304      	adds	r3, #4

080060b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80060b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80060ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80060bc:	d3f9      	bcc.n	80060b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80060be:	4a0a      	ldr	r2, [pc, #40]	; (80060e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80060c0:	4c0a      	ldr	r4, [pc, #40]	; (80060ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80060c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80060c4:	e001      	b.n	80060ca <LoopFillZerobss>

080060c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80060c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80060c8:	3204      	adds	r2, #4

080060ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80060ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80060cc:	d3fb      	bcc.n	80060c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80060ce:	f00a f8bd 	bl	801024c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80060d2:	f7fb f9c5 	bl	8001460 <main>
  bx  lr
 80060d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80060d8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80060dc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80060e0:	240000b4 	.word	0x240000b4
  ldr r2, =_sidata
 80060e4:	08010874 	.word	0x08010874
  ldr r2, =_sbss
 80060e8:	240000b8 	.word	0x240000b8
  ldr r4, =_ebss
 80060ec:	24002184 	.word	0x24002184

080060f0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80060f0:	e7fe      	b.n	80060f0 <ADC3_IRQHandler>
	...

080060f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80060fa:	2003      	movs	r0, #3
 80060fc:	f000 f980 	bl	8006400 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006100:	f004 fa48 	bl	800a594 <HAL_RCC_GetSysClockFreq>
 8006104:	4602      	mov	r2, r0
 8006106:	4b15      	ldr	r3, [pc, #84]	; (800615c <HAL_Init+0x68>)
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	0a1b      	lsrs	r3, r3, #8
 800610c:	f003 030f 	and.w	r3, r3, #15
 8006110:	4913      	ldr	r1, [pc, #76]	; (8006160 <HAL_Init+0x6c>)
 8006112:	5ccb      	ldrb	r3, [r1, r3]
 8006114:	f003 031f 	and.w	r3, r3, #31
 8006118:	fa22 f303 	lsr.w	r3, r2, r3
 800611c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800611e:	4b0f      	ldr	r3, [pc, #60]	; (800615c <HAL_Init+0x68>)
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	f003 030f 	and.w	r3, r3, #15
 8006126:	4a0e      	ldr	r2, [pc, #56]	; (8006160 <HAL_Init+0x6c>)
 8006128:	5cd3      	ldrb	r3, [r2, r3]
 800612a:	f003 031f 	and.w	r3, r3, #31
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	fa22 f303 	lsr.w	r3, r2, r3
 8006134:	4a0b      	ldr	r2, [pc, #44]	; (8006164 <HAL_Init+0x70>)
 8006136:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006138:	4a0b      	ldr	r2, [pc, #44]	; (8006168 <HAL_Init+0x74>)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800613e:	200f      	movs	r0, #15
 8006140:	f000 f814 	bl	800616c <HAL_InitTick>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d001      	beq.n	800614e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e002      	b.n	8006154 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800614e:	f7ff fa3f 	bl	80055d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3708      	adds	r7, #8
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	58024400 	.word	0x58024400
 8006160:	08010814 	.word	0x08010814
 8006164:	24000058 	.word	0x24000058
 8006168:	24000054 	.word	0x24000054

0800616c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8006174:	4b15      	ldr	r3, [pc, #84]	; (80061cc <HAL_InitTick+0x60>)
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d101      	bne.n	8006180 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e021      	b.n	80061c4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006180:	4b13      	ldr	r3, [pc, #76]	; (80061d0 <HAL_InitTick+0x64>)
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	4b11      	ldr	r3, [pc, #68]	; (80061cc <HAL_InitTick+0x60>)
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	4619      	mov	r1, r3
 800618a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800618e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006192:	fbb2 f3f3 	udiv	r3, r2, r3
 8006196:	4618      	mov	r0, r3
 8006198:	f000 f973 	bl	8006482 <HAL_SYSTICK_Config>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d001      	beq.n	80061a6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e00e      	b.n	80061c4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2b0f      	cmp	r3, #15
 80061aa:	d80a      	bhi.n	80061c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80061ac:	2200      	movs	r2, #0
 80061ae:	6879      	ldr	r1, [r7, #4]
 80061b0:	f04f 30ff 	mov.w	r0, #4294967295
 80061b4:	f000 f92f 	bl	8006416 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80061b8:	4a06      	ldr	r2, [pc, #24]	; (80061d4 <HAL_InitTick+0x68>)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80061be:	2300      	movs	r3, #0
 80061c0:	e000      	b.n	80061c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3708      	adds	r7, #8
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	24000060 	.word	0x24000060
 80061d0:	24000054 	.word	0x24000054
 80061d4:	2400005c 	.word	0x2400005c

080061d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80061d8:	b480      	push	{r7}
 80061da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80061dc:	4b06      	ldr	r3, [pc, #24]	; (80061f8 <HAL_IncTick+0x20>)
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	461a      	mov	r2, r3
 80061e2:	4b06      	ldr	r3, [pc, #24]	; (80061fc <HAL_IncTick+0x24>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4413      	add	r3, r2
 80061e8:	4a04      	ldr	r2, [pc, #16]	; (80061fc <HAL_IncTick+0x24>)
 80061ea:	6013      	str	r3, [r2, #0]
}
 80061ec:	bf00      	nop
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	24000060 	.word	0x24000060
 80061fc:	24002038 	.word	0x24002038

08006200 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006200:	b480      	push	{r7}
 8006202:	af00      	add	r7, sp, #0
  return uwTick;
 8006204:	4b03      	ldr	r3, [pc, #12]	; (8006214 <HAL_GetTick+0x14>)
 8006206:	681b      	ldr	r3, [r3, #0]
}
 8006208:	4618      	mov	r0, r3
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	24002038 	.word	0x24002038

08006218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f003 0307 	and.w	r3, r3, #7
 8006226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006228:	4b0b      	ldr	r3, [pc, #44]	; (8006258 <__NVIC_SetPriorityGrouping+0x40>)
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006234:	4013      	ands	r3, r2
 8006236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006240:	4b06      	ldr	r3, [pc, #24]	; (800625c <__NVIC_SetPriorityGrouping+0x44>)
 8006242:	4313      	orrs	r3, r2
 8006244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006246:	4a04      	ldr	r2, [pc, #16]	; (8006258 <__NVIC_SetPriorityGrouping+0x40>)
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	60d3      	str	r3, [r2, #12]
}
 800624c:	bf00      	nop
 800624e:	3714      	adds	r7, #20
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr
 8006258:	e000ed00 	.word	0xe000ed00
 800625c:	05fa0000 	.word	0x05fa0000

08006260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006260:	b480      	push	{r7}
 8006262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006264:	4b04      	ldr	r3, [pc, #16]	; (8006278 <__NVIC_GetPriorityGrouping+0x18>)
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	0a1b      	lsrs	r3, r3, #8
 800626a:	f003 0307 	and.w	r3, r3, #7
}
 800626e:	4618      	mov	r0, r3
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr
 8006278:	e000ed00 	.word	0xe000ed00

0800627c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	4603      	mov	r3, r0
 8006284:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006286:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800628a:	2b00      	cmp	r3, #0
 800628c:	db0b      	blt.n	80062a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800628e:	88fb      	ldrh	r3, [r7, #6]
 8006290:	f003 021f 	and.w	r2, r3, #31
 8006294:	4907      	ldr	r1, [pc, #28]	; (80062b4 <__NVIC_EnableIRQ+0x38>)
 8006296:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800629a:	095b      	lsrs	r3, r3, #5
 800629c:	2001      	movs	r0, #1
 800629e:	fa00 f202 	lsl.w	r2, r0, r2
 80062a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80062a6:	bf00      	nop
 80062a8:	370c      	adds	r7, #12
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	e000e100 	.word	0xe000e100

080062b8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	4603      	mov	r3, r0
 80062c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80062c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	db12      	blt.n	80062f0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80062ca:	88fb      	ldrh	r3, [r7, #6]
 80062cc:	f003 021f 	and.w	r2, r3, #31
 80062d0:	490a      	ldr	r1, [pc, #40]	; (80062fc <__NVIC_DisableIRQ+0x44>)
 80062d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80062d6:	095b      	lsrs	r3, r3, #5
 80062d8:	2001      	movs	r0, #1
 80062da:	fa00 f202 	lsl.w	r2, r0, r2
 80062de:	3320      	adds	r3, #32
 80062e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80062e4:	f3bf 8f4f 	dsb	sy
}
 80062e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80062ea:	f3bf 8f6f 	isb	sy
}
 80062ee:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr
 80062fc:	e000e100 	.word	0xe000e100

08006300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	4603      	mov	r3, r0
 8006308:	6039      	str	r1, [r7, #0]
 800630a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800630c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006310:	2b00      	cmp	r3, #0
 8006312:	db0a      	blt.n	800632a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	b2da      	uxtb	r2, r3
 8006318:	490c      	ldr	r1, [pc, #48]	; (800634c <__NVIC_SetPriority+0x4c>)
 800631a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800631e:	0112      	lsls	r2, r2, #4
 8006320:	b2d2      	uxtb	r2, r2
 8006322:	440b      	add	r3, r1
 8006324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006328:	e00a      	b.n	8006340 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	b2da      	uxtb	r2, r3
 800632e:	4908      	ldr	r1, [pc, #32]	; (8006350 <__NVIC_SetPriority+0x50>)
 8006330:	88fb      	ldrh	r3, [r7, #6]
 8006332:	f003 030f 	and.w	r3, r3, #15
 8006336:	3b04      	subs	r3, #4
 8006338:	0112      	lsls	r2, r2, #4
 800633a:	b2d2      	uxtb	r2, r2
 800633c:	440b      	add	r3, r1
 800633e:	761a      	strb	r2, [r3, #24]
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	e000e100 	.word	0xe000e100
 8006350:	e000ed00 	.word	0xe000ed00

08006354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006354:	b480      	push	{r7}
 8006356:	b089      	sub	sp, #36	; 0x24
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f003 0307 	and.w	r3, r3, #7
 8006366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	f1c3 0307 	rsb	r3, r3, #7
 800636e:	2b04      	cmp	r3, #4
 8006370:	bf28      	it	cs
 8006372:	2304      	movcs	r3, #4
 8006374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	3304      	adds	r3, #4
 800637a:	2b06      	cmp	r3, #6
 800637c:	d902      	bls.n	8006384 <NVIC_EncodePriority+0x30>
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	3b03      	subs	r3, #3
 8006382:	e000      	b.n	8006386 <NVIC_EncodePriority+0x32>
 8006384:	2300      	movs	r3, #0
 8006386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006388:	f04f 32ff 	mov.w	r2, #4294967295
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	fa02 f303 	lsl.w	r3, r2, r3
 8006392:	43da      	mvns	r2, r3
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	401a      	ands	r2, r3
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800639c:	f04f 31ff 	mov.w	r1, #4294967295
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	fa01 f303 	lsl.w	r3, r1, r3
 80063a6:	43d9      	mvns	r1, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063ac:	4313      	orrs	r3, r2
         );
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3724      	adds	r7, #36	; 0x24
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
	...

080063bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	3b01      	subs	r3, #1
 80063c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80063cc:	d301      	bcc.n	80063d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80063ce:	2301      	movs	r3, #1
 80063d0:	e00f      	b.n	80063f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80063d2:	4a0a      	ldr	r2, [pc, #40]	; (80063fc <SysTick_Config+0x40>)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	3b01      	subs	r3, #1
 80063d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80063da:	210f      	movs	r1, #15
 80063dc:	f04f 30ff 	mov.w	r0, #4294967295
 80063e0:	f7ff ff8e 	bl	8006300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80063e4:	4b05      	ldr	r3, [pc, #20]	; (80063fc <SysTick_Config+0x40>)
 80063e6:	2200      	movs	r2, #0
 80063e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80063ea:	4b04      	ldr	r3, [pc, #16]	; (80063fc <SysTick_Config+0x40>)
 80063ec:	2207      	movs	r2, #7
 80063ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	e000e010 	.word	0xe000e010

08006400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b082      	sub	sp, #8
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f7ff ff05 	bl	8006218 <__NVIC_SetPriorityGrouping>
}
 800640e:	bf00      	nop
 8006410:	3708      	adds	r7, #8
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b086      	sub	sp, #24
 800641a:	af00      	add	r7, sp, #0
 800641c:	4603      	mov	r3, r0
 800641e:	60b9      	str	r1, [r7, #8]
 8006420:	607a      	str	r2, [r7, #4]
 8006422:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006424:	f7ff ff1c 	bl	8006260 <__NVIC_GetPriorityGrouping>
 8006428:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	68b9      	ldr	r1, [r7, #8]
 800642e:	6978      	ldr	r0, [r7, #20]
 8006430:	f7ff ff90 	bl	8006354 <NVIC_EncodePriority>
 8006434:	4602      	mov	r2, r0
 8006436:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800643a:	4611      	mov	r1, r2
 800643c:	4618      	mov	r0, r3
 800643e:	f7ff ff5f 	bl	8006300 <__NVIC_SetPriority>
}
 8006442:	bf00      	nop
 8006444:	3718      	adds	r7, #24
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800644a:	b580      	push	{r7, lr}
 800644c:	b082      	sub	sp, #8
 800644e:	af00      	add	r7, sp, #0
 8006450:	4603      	mov	r3, r0
 8006452:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006454:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006458:	4618      	mov	r0, r3
 800645a:	f7ff ff0f 	bl	800627c <__NVIC_EnableIRQ>
}
 800645e:	bf00      	nop
 8006460:	3708      	adds	r7, #8
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006466:	b580      	push	{r7, lr}
 8006468:	b082      	sub	sp, #8
 800646a:	af00      	add	r7, sp, #0
 800646c:	4603      	mov	r3, r0
 800646e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006470:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006474:	4618      	mov	r0, r3
 8006476:	f7ff ff1f 	bl	80062b8 <__NVIC_DisableIRQ>
}
 800647a:	bf00      	nop
 800647c:	3708      	adds	r7, #8
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006482:	b580      	push	{r7, lr}
 8006484:	b082      	sub	sp, #8
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f7ff ff96 	bl	80063bc <SysTick_Config>
 8006490:	4603      	mov	r3, r0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3708      	adds	r7, #8
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
	...

0800649c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b086      	sub	sp, #24
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80064a4:	f7ff feac 	bl	8006200 <HAL_GetTick>
 80064a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d101      	bne.n	80064b4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e312      	b.n	8006ada <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a66      	ldr	r2, [pc, #408]	; (8006654 <HAL_DMA_Init+0x1b8>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d04a      	beq.n	8006554 <HAL_DMA_Init+0xb8>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a65      	ldr	r2, [pc, #404]	; (8006658 <HAL_DMA_Init+0x1bc>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d045      	beq.n	8006554 <HAL_DMA_Init+0xb8>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a63      	ldr	r2, [pc, #396]	; (800665c <HAL_DMA_Init+0x1c0>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d040      	beq.n	8006554 <HAL_DMA_Init+0xb8>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a62      	ldr	r2, [pc, #392]	; (8006660 <HAL_DMA_Init+0x1c4>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d03b      	beq.n	8006554 <HAL_DMA_Init+0xb8>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a60      	ldr	r2, [pc, #384]	; (8006664 <HAL_DMA_Init+0x1c8>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d036      	beq.n	8006554 <HAL_DMA_Init+0xb8>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a5f      	ldr	r2, [pc, #380]	; (8006668 <HAL_DMA_Init+0x1cc>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d031      	beq.n	8006554 <HAL_DMA_Init+0xb8>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a5d      	ldr	r2, [pc, #372]	; (800666c <HAL_DMA_Init+0x1d0>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d02c      	beq.n	8006554 <HAL_DMA_Init+0xb8>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a5c      	ldr	r2, [pc, #368]	; (8006670 <HAL_DMA_Init+0x1d4>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d027      	beq.n	8006554 <HAL_DMA_Init+0xb8>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a5a      	ldr	r2, [pc, #360]	; (8006674 <HAL_DMA_Init+0x1d8>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d022      	beq.n	8006554 <HAL_DMA_Init+0xb8>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a59      	ldr	r2, [pc, #356]	; (8006678 <HAL_DMA_Init+0x1dc>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d01d      	beq.n	8006554 <HAL_DMA_Init+0xb8>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a57      	ldr	r2, [pc, #348]	; (800667c <HAL_DMA_Init+0x1e0>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d018      	beq.n	8006554 <HAL_DMA_Init+0xb8>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a56      	ldr	r2, [pc, #344]	; (8006680 <HAL_DMA_Init+0x1e4>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d013      	beq.n	8006554 <HAL_DMA_Init+0xb8>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a54      	ldr	r2, [pc, #336]	; (8006684 <HAL_DMA_Init+0x1e8>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d00e      	beq.n	8006554 <HAL_DMA_Init+0xb8>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a53      	ldr	r2, [pc, #332]	; (8006688 <HAL_DMA_Init+0x1ec>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d009      	beq.n	8006554 <HAL_DMA_Init+0xb8>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a51      	ldr	r2, [pc, #324]	; (800668c <HAL_DMA_Init+0x1f0>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d004      	beq.n	8006554 <HAL_DMA_Init+0xb8>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a50      	ldr	r2, [pc, #320]	; (8006690 <HAL_DMA_Init+0x1f4>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d101      	bne.n	8006558 <HAL_DMA_Init+0xbc>
 8006554:	2301      	movs	r3, #1
 8006556:	e000      	b.n	800655a <HAL_DMA_Init+0xbe>
 8006558:	2300      	movs	r3, #0
 800655a:	2b00      	cmp	r3, #0
 800655c:	f000 813c 	beq.w	80067d8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2202      	movs	r2, #2
 8006564:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a37      	ldr	r2, [pc, #220]	; (8006654 <HAL_DMA_Init+0x1b8>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d04a      	beq.n	8006610 <HAL_DMA_Init+0x174>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a36      	ldr	r2, [pc, #216]	; (8006658 <HAL_DMA_Init+0x1bc>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d045      	beq.n	8006610 <HAL_DMA_Init+0x174>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a34      	ldr	r2, [pc, #208]	; (800665c <HAL_DMA_Init+0x1c0>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d040      	beq.n	8006610 <HAL_DMA_Init+0x174>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a33      	ldr	r2, [pc, #204]	; (8006660 <HAL_DMA_Init+0x1c4>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d03b      	beq.n	8006610 <HAL_DMA_Init+0x174>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a31      	ldr	r2, [pc, #196]	; (8006664 <HAL_DMA_Init+0x1c8>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d036      	beq.n	8006610 <HAL_DMA_Init+0x174>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a30      	ldr	r2, [pc, #192]	; (8006668 <HAL_DMA_Init+0x1cc>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d031      	beq.n	8006610 <HAL_DMA_Init+0x174>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a2e      	ldr	r2, [pc, #184]	; (800666c <HAL_DMA_Init+0x1d0>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d02c      	beq.n	8006610 <HAL_DMA_Init+0x174>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a2d      	ldr	r2, [pc, #180]	; (8006670 <HAL_DMA_Init+0x1d4>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d027      	beq.n	8006610 <HAL_DMA_Init+0x174>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a2b      	ldr	r2, [pc, #172]	; (8006674 <HAL_DMA_Init+0x1d8>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d022      	beq.n	8006610 <HAL_DMA_Init+0x174>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a2a      	ldr	r2, [pc, #168]	; (8006678 <HAL_DMA_Init+0x1dc>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d01d      	beq.n	8006610 <HAL_DMA_Init+0x174>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a28      	ldr	r2, [pc, #160]	; (800667c <HAL_DMA_Init+0x1e0>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d018      	beq.n	8006610 <HAL_DMA_Init+0x174>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a27      	ldr	r2, [pc, #156]	; (8006680 <HAL_DMA_Init+0x1e4>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d013      	beq.n	8006610 <HAL_DMA_Init+0x174>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a25      	ldr	r2, [pc, #148]	; (8006684 <HAL_DMA_Init+0x1e8>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d00e      	beq.n	8006610 <HAL_DMA_Init+0x174>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a24      	ldr	r2, [pc, #144]	; (8006688 <HAL_DMA_Init+0x1ec>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d009      	beq.n	8006610 <HAL_DMA_Init+0x174>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a22      	ldr	r2, [pc, #136]	; (800668c <HAL_DMA_Init+0x1f0>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d004      	beq.n	8006610 <HAL_DMA_Init+0x174>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a21      	ldr	r2, [pc, #132]	; (8006690 <HAL_DMA_Init+0x1f4>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d108      	bne.n	8006622 <HAL_DMA_Init+0x186>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f022 0201 	bic.w	r2, r2, #1
 800661e:	601a      	str	r2, [r3, #0]
 8006620:	e007      	b.n	8006632 <HAL_DMA_Init+0x196>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f022 0201 	bic.w	r2, r2, #1
 8006630:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006632:	e02f      	b.n	8006694 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006634:	f7ff fde4 	bl	8006200 <HAL_GetTick>
 8006638:	4602      	mov	r2, r0
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	2b05      	cmp	r3, #5
 8006640:	d928      	bls.n	8006694 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2220      	movs	r2, #32
 8006646:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2203      	movs	r2, #3
 800664c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e242      	b.n	8006ada <HAL_DMA_Init+0x63e>
 8006654:	40020010 	.word	0x40020010
 8006658:	40020028 	.word	0x40020028
 800665c:	40020040 	.word	0x40020040
 8006660:	40020058 	.word	0x40020058
 8006664:	40020070 	.word	0x40020070
 8006668:	40020088 	.word	0x40020088
 800666c:	400200a0 	.word	0x400200a0
 8006670:	400200b8 	.word	0x400200b8
 8006674:	40020410 	.word	0x40020410
 8006678:	40020428 	.word	0x40020428
 800667c:	40020440 	.word	0x40020440
 8006680:	40020458 	.word	0x40020458
 8006684:	40020470 	.word	0x40020470
 8006688:	40020488 	.word	0x40020488
 800668c:	400204a0 	.word	0x400204a0
 8006690:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 0301 	and.w	r3, r3, #1
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1c8      	bne.n	8006634 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	4b83      	ldr	r3, [pc, #524]	; (80068bc <HAL_DMA_Init+0x420>)
 80066ae:	4013      	ands	r3, r2
 80066b0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80066ba:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066c6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066d2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a1b      	ldr	r3, [r3, #32]
 80066d8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	4313      	orrs	r3, r2
 80066de:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e4:	2b04      	cmp	r3, #4
 80066e6:	d107      	bne.n	80066f8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f0:	4313      	orrs	r3, r2
 80066f2:	697a      	ldr	r2, [r7, #20]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	2b28      	cmp	r3, #40	; 0x28
 80066fe:	d903      	bls.n	8006708 <HAL_DMA_Init+0x26c>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	2b2e      	cmp	r3, #46	; 0x2e
 8006706:	d91f      	bls.n	8006748 <HAL_DMA_Init+0x2ac>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	2b3e      	cmp	r3, #62	; 0x3e
 800670e:	d903      	bls.n	8006718 <HAL_DMA_Init+0x27c>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	2b42      	cmp	r3, #66	; 0x42
 8006716:	d917      	bls.n	8006748 <HAL_DMA_Init+0x2ac>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	2b46      	cmp	r3, #70	; 0x46
 800671e:	d903      	bls.n	8006728 <HAL_DMA_Init+0x28c>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	2b48      	cmp	r3, #72	; 0x48
 8006726:	d90f      	bls.n	8006748 <HAL_DMA_Init+0x2ac>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	2b4e      	cmp	r3, #78	; 0x4e
 800672e:	d903      	bls.n	8006738 <HAL_DMA_Init+0x29c>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	2b52      	cmp	r3, #82	; 0x52
 8006736:	d907      	bls.n	8006748 <HAL_DMA_Init+0x2ac>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	2b73      	cmp	r3, #115	; 0x73
 800673e:	d905      	bls.n	800674c <HAL_DMA_Init+0x2b0>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	2b77      	cmp	r3, #119	; 0x77
 8006746:	d801      	bhi.n	800674c <HAL_DMA_Init+0x2b0>
 8006748:	2301      	movs	r3, #1
 800674a:	e000      	b.n	800674e <HAL_DMA_Init+0x2b2>
 800674c:	2300      	movs	r3, #0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d003      	beq.n	800675a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006758:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	695b      	ldr	r3, [r3, #20]
 8006768:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	f023 0307 	bic.w	r3, r3, #7
 8006770:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006776:	697a      	ldr	r2, [r7, #20]
 8006778:	4313      	orrs	r3, r2
 800677a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006780:	2b04      	cmp	r3, #4
 8006782:	d117      	bne.n	80067b4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	4313      	orrs	r3, r2
 800678c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00e      	beq.n	80067b4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f002 fce4 	bl	8009164 <DMA_CheckFifoParam>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d008      	beq.n	80067b4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2240      	movs	r2, #64	; 0x40
 80067a6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e192      	b.n	8006ada <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	697a      	ldr	r2, [r7, #20]
 80067ba:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f002 fc1f 	bl	8009000 <DMA_CalcBaseAndBitshift>
 80067c2:	4603      	mov	r3, r0
 80067c4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067ca:	f003 031f 	and.w	r3, r3, #31
 80067ce:	223f      	movs	r2, #63	; 0x3f
 80067d0:	409a      	lsls	r2, r3
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	609a      	str	r2, [r3, #8]
 80067d6:	e0c8      	b.n	800696a <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a38      	ldr	r2, [pc, #224]	; (80068c0 <HAL_DMA_Init+0x424>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d022      	beq.n	8006828 <HAL_DMA_Init+0x38c>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a37      	ldr	r2, [pc, #220]	; (80068c4 <HAL_DMA_Init+0x428>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d01d      	beq.n	8006828 <HAL_DMA_Init+0x38c>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a35      	ldr	r2, [pc, #212]	; (80068c8 <HAL_DMA_Init+0x42c>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d018      	beq.n	8006828 <HAL_DMA_Init+0x38c>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a34      	ldr	r2, [pc, #208]	; (80068cc <HAL_DMA_Init+0x430>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d013      	beq.n	8006828 <HAL_DMA_Init+0x38c>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a32      	ldr	r2, [pc, #200]	; (80068d0 <HAL_DMA_Init+0x434>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d00e      	beq.n	8006828 <HAL_DMA_Init+0x38c>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a31      	ldr	r2, [pc, #196]	; (80068d4 <HAL_DMA_Init+0x438>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d009      	beq.n	8006828 <HAL_DMA_Init+0x38c>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a2f      	ldr	r2, [pc, #188]	; (80068d8 <HAL_DMA_Init+0x43c>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d004      	beq.n	8006828 <HAL_DMA_Init+0x38c>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a2e      	ldr	r2, [pc, #184]	; (80068dc <HAL_DMA_Init+0x440>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d101      	bne.n	800682c <HAL_DMA_Init+0x390>
 8006828:	2301      	movs	r3, #1
 800682a:	e000      	b.n	800682e <HAL_DMA_Init+0x392>
 800682c:	2300      	movs	r3, #0
 800682e:	2b00      	cmp	r3, #0
 8006830:	f000 8092 	beq.w	8006958 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a21      	ldr	r2, [pc, #132]	; (80068c0 <HAL_DMA_Init+0x424>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d021      	beq.n	8006882 <HAL_DMA_Init+0x3e6>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a20      	ldr	r2, [pc, #128]	; (80068c4 <HAL_DMA_Init+0x428>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d01c      	beq.n	8006882 <HAL_DMA_Init+0x3e6>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a1e      	ldr	r2, [pc, #120]	; (80068c8 <HAL_DMA_Init+0x42c>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d017      	beq.n	8006882 <HAL_DMA_Init+0x3e6>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a1d      	ldr	r2, [pc, #116]	; (80068cc <HAL_DMA_Init+0x430>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d012      	beq.n	8006882 <HAL_DMA_Init+0x3e6>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a1b      	ldr	r2, [pc, #108]	; (80068d0 <HAL_DMA_Init+0x434>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d00d      	beq.n	8006882 <HAL_DMA_Init+0x3e6>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a1a      	ldr	r2, [pc, #104]	; (80068d4 <HAL_DMA_Init+0x438>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d008      	beq.n	8006882 <HAL_DMA_Init+0x3e6>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a18      	ldr	r2, [pc, #96]	; (80068d8 <HAL_DMA_Init+0x43c>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d003      	beq.n	8006882 <HAL_DMA_Init+0x3e6>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a17      	ldr	r2, [pc, #92]	; (80068dc <HAL_DMA_Init+0x440>)
 8006880:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2202      	movs	r2, #2
 8006886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800689a:	697a      	ldr	r2, [r7, #20]
 800689c:	4b10      	ldr	r3, [pc, #64]	; (80068e0 <HAL_DMA_Init+0x444>)
 800689e:	4013      	ands	r3, r2
 80068a0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	2b40      	cmp	r3, #64	; 0x40
 80068a8:	d01c      	beq.n	80068e4 <HAL_DMA_Init+0x448>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	2b80      	cmp	r3, #128	; 0x80
 80068b0:	d102      	bne.n	80068b8 <HAL_DMA_Init+0x41c>
 80068b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80068b6:	e016      	b.n	80068e6 <HAL_DMA_Init+0x44a>
 80068b8:	2300      	movs	r3, #0
 80068ba:	e014      	b.n	80068e6 <HAL_DMA_Init+0x44a>
 80068bc:	fe10803f 	.word	0xfe10803f
 80068c0:	58025408 	.word	0x58025408
 80068c4:	5802541c 	.word	0x5802541c
 80068c8:	58025430 	.word	0x58025430
 80068cc:	58025444 	.word	0x58025444
 80068d0:	58025458 	.word	0x58025458
 80068d4:	5802546c 	.word	0x5802546c
 80068d8:	58025480 	.word	0x58025480
 80068dc:	58025494 	.word	0x58025494
 80068e0:	fffe000f 	.word	0xfffe000f
 80068e4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	68d2      	ldr	r2, [r2, #12]
 80068ea:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80068ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80068f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	695b      	ldr	r3, [r3, #20]
 80068fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80068fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006904:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	69db      	ldr	r3, [r3, #28]
 800690a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800690c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006914:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	4313      	orrs	r3, r2
 800691a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	461a      	mov	r2, r3
 800692a:	4b6e      	ldr	r3, [pc, #440]	; (8006ae4 <HAL_DMA_Init+0x648>)
 800692c:	4413      	add	r3, r2
 800692e:	4a6e      	ldr	r2, [pc, #440]	; (8006ae8 <HAL_DMA_Init+0x64c>)
 8006930:	fba2 2303 	umull	r2, r3, r2, r3
 8006934:	091b      	lsrs	r3, r3, #4
 8006936:	009a      	lsls	r2, r3, #2
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f002 fb5f 	bl	8009000 <DMA_CalcBaseAndBitshift>
 8006942:	4603      	mov	r3, r0
 8006944:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800694a:	f003 031f 	and.w	r3, r3, #31
 800694e:	2201      	movs	r2, #1
 8006950:	409a      	lsls	r2, r3
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	605a      	str	r2, [r3, #4]
 8006956:	e008      	b.n	800696a <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2240      	movs	r2, #64	; 0x40
 800695c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2203      	movs	r2, #3
 8006962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e0b7      	b.n	8006ada <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a5f      	ldr	r2, [pc, #380]	; (8006aec <HAL_DMA_Init+0x650>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d072      	beq.n	8006a5a <HAL_DMA_Init+0x5be>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a5d      	ldr	r2, [pc, #372]	; (8006af0 <HAL_DMA_Init+0x654>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d06d      	beq.n	8006a5a <HAL_DMA_Init+0x5be>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a5c      	ldr	r2, [pc, #368]	; (8006af4 <HAL_DMA_Init+0x658>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d068      	beq.n	8006a5a <HAL_DMA_Init+0x5be>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a5a      	ldr	r2, [pc, #360]	; (8006af8 <HAL_DMA_Init+0x65c>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d063      	beq.n	8006a5a <HAL_DMA_Init+0x5be>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a59      	ldr	r2, [pc, #356]	; (8006afc <HAL_DMA_Init+0x660>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d05e      	beq.n	8006a5a <HAL_DMA_Init+0x5be>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a57      	ldr	r2, [pc, #348]	; (8006b00 <HAL_DMA_Init+0x664>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d059      	beq.n	8006a5a <HAL_DMA_Init+0x5be>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a56      	ldr	r2, [pc, #344]	; (8006b04 <HAL_DMA_Init+0x668>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d054      	beq.n	8006a5a <HAL_DMA_Init+0x5be>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a54      	ldr	r2, [pc, #336]	; (8006b08 <HAL_DMA_Init+0x66c>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d04f      	beq.n	8006a5a <HAL_DMA_Init+0x5be>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a53      	ldr	r2, [pc, #332]	; (8006b0c <HAL_DMA_Init+0x670>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d04a      	beq.n	8006a5a <HAL_DMA_Init+0x5be>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a51      	ldr	r2, [pc, #324]	; (8006b10 <HAL_DMA_Init+0x674>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d045      	beq.n	8006a5a <HAL_DMA_Init+0x5be>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a50      	ldr	r2, [pc, #320]	; (8006b14 <HAL_DMA_Init+0x678>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d040      	beq.n	8006a5a <HAL_DMA_Init+0x5be>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a4e      	ldr	r2, [pc, #312]	; (8006b18 <HAL_DMA_Init+0x67c>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d03b      	beq.n	8006a5a <HAL_DMA_Init+0x5be>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a4d      	ldr	r2, [pc, #308]	; (8006b1c <HAL_DMA_Init+0x680>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d036      	beq.n	8006a5a <HAL_DMA_Init+0x5be>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a4b      	ldr	r2, [pc, #300]	; (8006b20 <HAL_DMA_Init+0x684>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d031      	beq.n	8006a5a <HAL_DMA_Init+0x5be>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a4a      	ldr	r2, [pc, #296]	; (8006b24 <HAL_DMA_Init+0x688>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d02c      	beq.n	8006a5a <HAL_DMA_Init+0x5be>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a48      	ldr	r2, [pc, #288]	; (8006b28 <HAL_DMA_Init+0x68c>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d027      	beq.n	8006a5a <HAL_DMA_Init+0x5be>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a47      	ldr	r2, [pc, #284]	; (8006b2c <HAL_DMA_Init+0x690>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d022      	beq.n	8006a5a <HAL_DMA_Init+0x5be>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a45      	ldr	r2, [pc, #276]	; (8006b30 <HAL_DMA_Init+0x694>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d01d      	beq.n	8006a5a <HAL_DMA_Init+0x5be>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a44      	ldr	r2, [pc, #272]	; (8006b34 <HAL_DMA_Init+0x698>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d018      	beq.n	8006a5a <HAL_DMA_Init+0x5be>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a42      	ldr	r2, [pc, #264]	; (8006b38 <HAL_DMA_Init+0x69c>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d013      	beq.n	8006a5a <HAL_DMA_Init+0x5be>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a41      	ldr	r2, [pc, #260]	; (8006b3c <HAL_DMA_Init+0x6a0>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d00e      	beq.n	8006a5a <HAL_DMA_Init+0x5be>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a3f      	ldr	r2, [pc, #252]	; (8006b40 <HAL_DMA_Init+0x6a4>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d009      	beq.n	8006a5a <HAL_DMA_Init+0x5be>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a3e      	ldr	r2, [pc, #248]	; (8006b44 <HAL_DMA_Init+0x6a8>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d004      	beq.n	8006a5a <HAL_DMA_Init+0x5be>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a3c      	ldr	r2, [pc, #240]	; (8006b48 <HAL_DMA_Init+0x6ac>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d101      	bne.n	8006a5e <HAL_DMA_Init+0x5c2>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e000      	b.n	8006a60 <HAL_DMA_Init+0x5c4>
 8006a5e:	2300      	movs	r3, #0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d032      	beq.n	8006aca <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f002 fbf9 	bl	800925c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	2b80      	cmp	r3, #128	; 0x80
 8006a70:	d102      	bne.n	8006a78 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a80:	b2d2      	uxtb	r2, r2
 8006a82:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006a8c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d010      	beq.n	8006ab8 <HAL_DMA_Init+0x61c>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	2b08      	cmp	r3, #8
 8006a9c:	d80c      	bhi.n	8006ab8 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f002 fc76 	bl	8009390 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006ab4:	605a      	str	r2, [r3, #4]
 8006ab6:	e008      	b.n	8006aca <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3718      	adds	r7, #24
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	a7fdabf8 	.word	0xa7fdabf8
 8006ae8:	cccccccd 	.word	0xcccccccd
 8006aec:	40020010 	.word	0x40020010
 8006af0:	40020028 	.word	0x40020028
 8006af4:	40020040 	.word	0x40020040
 8006af8:	40020058 	.word	0x40020058
 8006afc:	40020070 	.word	0x40020070
 8006b00:	40020088 	.word	0x40020088
 8006b04:	400200a0 	.word	0x400200a0
 8006b08:	400200b8 	.word	0x400200b8
 8006b0c:	40020410 	.word	0x40020410
 8006b10:	40020428 	.word	0x40020428
 8006b14:	40020440 	.word	0x40020440
 8006b18:	40020458 	.word	0x40020458
 8006b1c:	40020470 	.word	0x40020470
 8006b20:	40020488 	.word	0x40020488
 8006b24:	400204a0 	.word	0x400204a0
 8006b28:	400204b8 	.word	0x400204b8
 8006b2c:	58025408 	.word	0x58025408
 8006b30:	5802541c 	.word	0x5802541c
 8006b34:	58025430 	.word	0x58025430
 8006b38:	58025444 	.word	0x58025444
 8006b3c:	58025458 	.word	0x58025458
 8006b40:	5802546c 	.word	0x5802546c
 8006b44:	58025480 	.word	0x58025480
 8006b48:	58025494 	.word	0x58025494

08006b4c <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d101      	bne.n	8006b5e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e1a8      	b.n	8006eb0 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a82      	ldr	r2, [pc, #520]	; (8006d6c <HAL_DMA_DeInit+0x220>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d04a      	beq.n	8006bfe <HAL_DMA_DeInit+0xb2>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a80      	ldr	r2, [pc, #512]	; (8006d70 <HAL_DMA_DeInit+0x224>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d045      	beq.n	8006bfe <HAL_DMA_DeInit+0xb2>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a7f      	ldr	r2, [pc, #508]	; (8006d74 <HAL_DMA_DeInit+0x228>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d040      	beq.n	8006bfe <HAL_DMA_DeInit+0xb2>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a7d      	ldr	r2, [pc, #500]	; (8006d78 <HAL_DMA_DeInit+0x22c>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d03b      	beq.n	8006bfe <HAL_DMA_DeInit+0xb2>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a7c      	ldr	r2, [pc, #496]	; (8006d7c <HAL_DMA_DeInit+0x230>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d036      	beq.n	8006bfe <HAL_DMA_DeInit+0xb2>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a7a      	ldr	r2, [pc, #488]	; (8006d80 <HAL_DMA_DeInit+0x234>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d031      	beq.n	8006bfe <HAL_DMA_DeInit+0xb2>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a79      	ldr	r2, [pc, #484]	; (8006d84 <HAL_DMA_DeInit+0x238>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d02c      	beq.n	8006bfe <HAL_DMA_DeInit+0xb2>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a77      	ldr	r2, [pc, #476]	; (8006d88 <HAL_DMA_DeInit+0x23c>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d027      	beq.n	8006bfe <HAL_DMA_DeInit+0xb2>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a76      	ldr	r2, [pc, #472]	; (8006d8c <HAL_DMA_DeInit+0x240>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d022      	beq.n	8006bfe <HAL_DMA_DeInit+0xb2>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a74      	ldr	r2, [pc, #464]	; (8006d90 <HAL_DMA_DeInit+0x244>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d01d      	beq.n	8006bfe <HAL_DMA_DeInit+0xb2>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a73      	ldr	r2, [pc, #460]	; (8006d94 <HAL_DMA_DeInit+0x248>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d018      	beq.n	8006bfe <HAL_DMA_DeInit+0xb2>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a71      	ldr	r2, [pc, #452]	; (8006d98 <HAL_DMA_DeInit+0x24c>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d013      	beq.n	8006bfe <HAL_DMA_DeInit+0xb2>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a70      	ldr	r2, [pc, #448]	; (8006d9c <HAL_DMA_DeInit+0x250>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d00e      	beq.n	8006bfe <HAL_DMA_DeInit+0xb2>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a6e      	ldr	r2, [pc, #440]	; (8006da0 <HAL_DMA_DeInit+0x254>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d009      	beq.n	8006bfe <HAL_DMA_DeInit+0xb2>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a6d      	ldr	r2, [pc, #436]	; (8006da4 <HAL_DMA_DeInit+0x258>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d004      	beq.n	8006bfe <HAL_DMA_DeInit+0xb2>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a6b      	ldr	r2, [pc, #428]	; (8006da8 <HAL_DMA_DeInit+0x25c>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d108      	bne.n	8006c10 <HAL_DMA_DeInit+0xc4>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f022 0201 	bic.w	r2, r2, #1
 8006c0c:	601a      	str	r2, [r3, #0]
 8006c0e:	e007      	b.n	8006c20 <HAL_DMA_DeInit+0xd4>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f022 0201 	bic.w	r2, r2, #1
 8006c1e:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a51      	ldr	r2, [pc, #324]	; (8006d6c <HAL_DMA_DeInit+0x220>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d04a      	beq.n	8006cc0 <HAL_DMA_DeInit+0x174>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a50      	ldr	r2, [pc, #320]	; (8006d70 <HAL_DMA_DeInit+0x224>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d045      	beq.n	8006cc0 <HAL_DMA_DeInit+0x174>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a4e      	ldr	r2, [pc, #312]	; (8006d74 <HAL_DMA_DeInit+0x228>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d040      	beq.n	8006cc0 <HAL_DMA_DeInit+0x174>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a4d      	ldr	r2, [pc, #308]	; (8006d78 <HAL_DMA_DeInit+0x22c>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d03b      	beq.n	8006cc0 <HAL_DMA_DeInit+0x174>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a4b      	ldr	r2, [pc, #300]	; (8006d7c <HAL_DMA_DeInit+0x230>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d036      	beq.n	8006cc0 <HAL_DMA_DeInit+0x174>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a4a      	ldr	r2, [pc, #296]	; (8006d80 <HAL_DMA_DeInit+0x234>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d031      	beq.n	8006cc0 <HAL_DMA_DeInit+0x174>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a48      	ldr	r2, [pc, #288]	; (8006d84 <HAL_DMA_DeInit+0x238>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d02c      	beq.n	8006cc0 <HAL_DMA_DeInit+0x174>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a47      	ldr	r2, [pc, #284]	; (8006d88 <HAL_DMA_DeInit+0x23c>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d027      	beq.n	8006cc0 <HAL_DMA_DeInit+0x174>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a45      	ldr	r2, [pc, #276]	; (8006d8c <HAL_DMA_DeInit+0x240>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d022      	beq.n	8006cc0 <HAL_DMA_DeInit+0x174>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a44      	ldr	r2, [pc, #272]	; (8006d90 <HAL_DMA_DeInit+0x244>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d01d      	beq.n	8006cc0 <HAL_DMA_DeInit+0x174>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a42      	ldr	r2, [pc, #264]	; (8006d94 <HAL_DMA_DeInit+0x248>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d018      	beq.n	8006cc0 <HAL_DMA_DeInit+0x174>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a41      	ldr	r2, [pc, #260]	; (8006d98 <HAL_DMA_DeInit+0x24c>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d013      	beq.n	8006cc0 <HAL_DMA_DeInit+0x174>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a3f      	ldr	r2, [pc, #252]	; (8006d9c <HAL_DMA_DeInit+0x250>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d00e      	beq.n	8006cc0 <HAL_DMA_DeInit+0x174>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a3e      	ldr	r2, [pc, #248]	; (8006da0 <HAL_DMA_DeInit+0x254>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d009      	beq.n	8006cc0 <HAL_DMA_DeInit+0x174>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a3c      	ldr	r2, [pc, #240]	; (8006da4 <HAL_DMA_DeInit+0x258>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d004      	beq.n	8006cc0 <HAL_DMA_DeInit+0x174>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a3b      	ldr	r2, [pc, #236]	; (8006da8 <HAL_DMA_DeInit+0x25c>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d101      	bne.n	8006cc4 <HAL_DMA_DeInit+0x178>
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e000      	b.n	8006cc6 <HAL_DMA_DeInit+0x17a>
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d025      	beq.n	8006d16 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2221      	movs	r2, #33	; 0x21
 8006cf8:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f002 f980 	bl	8009000 <DMA_CalcBaseAndBitshift>
 8006d00:	4603      	mov	r3, r0
 8006d02:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d08:	f003 031f 	and.w	r3, r3, #31
 8006d0c:	223f      	movs	r2, #63	; 0x3f
 8006d0e:	409a      	lsls	r2, r3
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	609a      	str	r2, [r3, #8]
 8006d14:	e081      	b.n	8006e1a <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a24      	ldr	r2, [pc, #144]	; (8006dac <HAL_DMA_DeInit+0x260>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d022      	beq.n	8006d66 <HAL_DMA_DeInit+0x21a>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a22      	ldr	r2, [pc, #136]	; (8006db0 <HAL_DMA_DeInit+0x264>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d01d      	beq.n	8006d66 <HAL_DMA_DeInit+0x21a>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a21      	ldr	r2, [pc, #132]	; (8006db4 <HAL_DMA_DeInit+0x268>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d018      	beq.n	8006d66 <HAL_DMA_DeInit+0x21a>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a1f      	ldr	r2, [pc, #124]	; (8006db8 <HAL_DMA_DeInit+0x26c>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d013      	beq.n	8006d66 <HAL_DMA_DeInit+0x21a>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a1e      	ldr	r2, [pc, #120]	; (8006dbc <HAL_DMA_DeInit+0x270>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d00e      	beq.n	8006d66 <HAL_DMA_DeInit+0x21a>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a1c      	ldr	r2, [pc, #112]	; (8006dc0 <HAL_DMA_DeInit+0x274>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d009      	beq.n	8006d66 <HAL_DMA_DeInit+0x21a>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a1b      	ldr	r2, [pc, #108]	; (8006dc4 <HAL_DMA_DeInit+0x278>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d004      	beq.n	8006d66 <HAL_DMA_DeInit+0x21a>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a19      	ldr	r2, [pc, #100]	; (8006dc8 <HAL_DMA_DeInit+0x27c>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d132      	bne.n	8006dcc <HAL_DMA_DeInit+0x280>
 8006d66:	2301      	movs	r3, #1
 8006d68:	e031      	b.n	8006dce <HAL_DMA_DeInit+0x282>
 8006d6a:	bf00      	nop
 8006d6c:	40020010 	.word	0x40020010
 8006d70:	40020028 	.word	0x40020028
 8006d74:	40020040 	.word	0x40020040
 8006d78:	40020058 	.word	0x40020058
 8006d7c:	40020070 	.word	0x40020070
 8006d80:	40020088 	.word	0x40020088
 8006d84:	400200a0 	.word	0x400200a0
 8006d88:	400200b8 	.word	0x400200b8
 8006d8c:	40020410 	.word	0x40020410
 8006d90:	40020428 	.word	0x40020428
 8006d94:	40020440 	.word	0x40020440
 8006d98:	40020458 	.word	0x40020458
 8006d9c:	40020470 	.word	0x40020470
 8006da0:	40020488 	.word	0x40020488
 8006da4:	400204a0 	.word	0x400204a0
 8006da8:	400204b8 	.word	0x400204b8
 8006dac:	58025408 	.word	0x58025408
 8006db0:	5802541c 	.word	0x5802541c
 8006db4:	58025430 	.word	0x58025430
 8006db8:	58025444 	.word	0x58025444
 8006dbc:	58025458 	.word	0x58025458
 8006dc0:	5802546c 	.word	0x5802546c
 8006dc4:	58025480 	.word	0x58025480
 8006dc8:	58025494 	.word	0x58025494
 8006dcc:	2300      	movs	r3, #0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d021      	beq.n	8006e16 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2200      	movs	r2, #0
 8006de0:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2200      	movs	r2, #0
 8006de8:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2200      	movs	r2, #0
 8006df0:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2200      	movs	r2, #0
 8006df8:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f002 f900 	bl	8009000 <DMA_CalcBaseAndBitshift>
 8006e00:	4603      	mov	r3, r0
 8006e02:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e08:	f003 031f 	and.w	r3, r3, #31
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	409a      	lsls	r2, r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	605a      	str	r2, [r3, #4]
 8006e14:	e001      	b.n	8006e1a <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e04a      	b.n	8006eb0 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f002 fa1e 	bl	800925c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d008      	beq.n	8006e3a <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006e38:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00f      	beq.n	8006e62 <HAL_DMA_DeInit+0x316>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	2b08      	cmp	r3, #8
 8006e48:	d80b      	bhi.n	8006e62 <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f002 faa0 	bl	8009390 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e54:	2200      	movs	r2, #0
 8006e56:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006e60:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3710      	adds	r7, #16
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b086      	sub	sp, #24
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	607a      	str	r2, [r7, #4]
 8006ec4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d101      	bne.n	8006ed4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e226      	b.n	8007322 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d101      	bne.n	8006ee2 <HAL_DMA_Start_IT+0x2a>
 8006ede:	2302      	movs	r3, #2
 8006ee0:	e21f      	b.n	8007322 <HAL_DMA_Start_IT+0x46a>
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	f040 820a 	bne.w	800730c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2202      	movs	r2, #2
 8006efc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2200      	movs	r2, #0
 8006f04:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a68      	ldr	r2, [pc, #416]	; (80070ac <HAL_DMA_Start_IT+0x1f4>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d04a      	beq.n	8006fa6 <HAL_DMA_Start_IT+0xee>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a66      	ldr	r2, [pc, #408]	; (80070b0 <HAL_DMA_Start_IT+0x1f8>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d045      	beq.n	8006fa6 <HAL_DMA_Start_IT+0xee>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a65      	ldr	r2, [pc, #404]	; (80070b4 <HAL_DMA_Start_IT+0x1fc>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d040      	beq.n	8006fa6 <HAL_DMA_Start_IT+0xee>
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a63      	ldr	r2, [pc, #396]	; (80070b8 <HAL_DMA_Start_IT+0x200>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d03b      	beq.n	8006fa6 <HAL_DMA_Start_IT+0xee>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a62      	ldr	r2, [pc, #392]	; (80070bc <HAL_DMA_Start_IT+0x204>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d036      	beq.n	8006fa6 <HAL_DMA_Start_IT+0xee>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a60      	ldr	r2, [pc, #384]	; (80070c0 <HAL_DMA_Start_IT+0x208>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d031      	beq.n	8006fa6 <HAL_DMA_Start_IT+0xee>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a5f      	ldr	r2, [pc, #380]	; (80070c4 <HAL_DMA_Start_IT+0x20c>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d02c      	beq.n	8006fa6 <HAL_DMA_Start_IT+0xee>
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a5d      	ldr	r2, [pc, #372]	; (80070c8 <HAL_DMA_Start_IT+0x210>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d027      	beq.n	8006fa6 <HAL_DMA_Start_IT+0xee>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a5c      	ldr	r2, [pc, #368]	; (80070cc <HAL_DMA_Start_IT+0x214>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d022      	beq.n	8006fa6 <HAL_DMA_Start_IT+0xee>
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a5a      	ldr	r2, [pc, #360]	; (80070d0 <HAL_DMA_Start_IT+0x218>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d01d      	beq.n	8006fa6 <HAL_DMA_Start_IT+0xee>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a59      	ldr	r2, [pc, #356]	; (80070d4 <HAL_DMA_Start_IT+0x21c>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d018      	beq.n	8006fa6 <HAL_DMA_Start_IT+0xee>
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a57      	ldr	r2, [pc, #348]	; (80070d8 <HAL_DMA_Start_IT+0x220>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d013      	beq.n	8006fa6 <HAL_DMA_Start_IT+0xee>
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a56      	ldr	r2, [pc, #344]	; (80070dc <HAL_DMA_Start_IT+0x224>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d00e      	beq.n	8006fa6 <HAL_DMA_Start_IT+0xee>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a54      	ldr	r2, [pc, #336]	; (80070e0 <HAL_DMA_Start_IT+0x228>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d009      	beq.n	8006fa6 <HAL_DMA_Start_IT+0xee>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a53      	ldr	r2, [pc, #332]	; (80070e4 <HAL_DMA_Start_IT+0x22c>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d004      	beq.n	8006fa6 <HAL_DMA_Start_IT+0xee>
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a51      	ldr	r2, [pc, #324]	; (80070e8 <HAL_DMA_Start_IT+0x230>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d108      	bne.n	8006fb8 <HAL_DMA_Start_IT+0x100>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f022 0201 	bic.w	r2, r2, #1
 8006fb4:	601a      	str	r2, [r3, #0]
 8006fb6:	e007      	b.n	8006fc8 <HAL_DMA_Start_IT+0x110>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f022 0201 	bic.w	r2, r2, #1
 8006fc6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	68b9      	ldr	r1, [r7, #8]
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f001 fe6a 	bl	8008ca8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a34      	ldr	r2, [pc, #208]	; (80070ac <HAL_DMA_Start_IT+0x1f4>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d04a      	beq.n	8007074 <HAL_DMA_Start_IT+0x1bc>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a33      	ldr	r2, [pc, #204]	; (80070b0 <HAL_DMA_Start_IT+0x1f8>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d045      	beq.n	8007074 <HAL_DMA_Start_IT+0x1bc>
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a31      	ldr	r2, [pc, #196]	; (80070b4 <HAL_DMA_Start_IT+0x1fc>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d040      	beq.n	8007074 <HAL_DMA_Start_IT+0x1bc>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a30      	ldr	r2, [pc, #192]	; (80070b8 <HAL_DMA_Start_IT+0x200>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d03b      	beq.n	8007074 <HAL_DMA_Start_IT+0x1bc>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a2e      	ldr	r2, [pc, #184]	; (80070bc <HAL_DMA_Start_IT+0x204>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d036      	beq.n	8007074 <HAL_DMA_Start_IT+0x1bc>
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a2d      	ldr	r2, [pc, #180]	; (80070c0 <HAL_DMA_Start_IT+0x208>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d031      	beq.n	8007074 <HAL_DMA_Start_IT+0x1bc>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a2b      	ldr	r2, [pc, #172]	; (80070c4 <HAL_DMA_Start_IT+0x20c>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d02c      	beq.n	8007074 <HAL_DMA_Start_IT+0x1bc>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a2a      	ldr	r2, [pc, #168]	; (80070c8 <HAL_DMA_Start_IT+0x210>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d027      	beq.n	8007074 <HAL_DMA_Start_IT+0x1bc>
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a28      	ldr	r2, [pc, #160]	; (80070cc <HAL_DMA_Start_IT+0x214>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d022      	beq.n	8007074 <HAL_DMA_Start_IT+0x1bc>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a27      	ldr	r2, [pc, #156]	; (80070d0 <HAL_DMA_Start_IT+0x218>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d01d      	beq.n	8007074 <HAL_DMA_Start_IT+0x1bc>
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a25      	ldr	r2, [pc, #148]	; (80070d4 <HAL_DMA_Start_IT+0x21c>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d018      	beq.n	8007074 <HAL_DMA_Start_IT+0x1bc>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a24      	ldr	r2, [pc, #144]	; (80070d8 <HAL_DMA_Start_IT+0x220>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d013      	beq.n	8007074 <HAL_DMA_Start_IT+0x1bc>
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a22      	ldr	r2, [pc, #136]	; (80070dc <HAL_DMA_Start_IT+0x224>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d00e      	beq.n	8007074 <HAL_DMA_Start_IT+0x1bc>
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a21      	ldr	r2, [pc, #132]	; (80070e0 <HAL_DMA_Start_IT+0x228>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d009      	beq.n	8007074 <HAL_DMA_Start_IT+0x1bc>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a1f      	ldr	r2, [pc, #124]	; (80070e4 <HAL_DMA_Start_IT+0x22c>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d004      	beq.n	8007074 <HAL_DMA_Start_IT+0x1bc>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a1e      	ldr	r2, [pc, #120]	; (80070e8 <HAL_DMA_Start_IT+0x230>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d101      	bne.n	8007078 <HAL_DMA_Start_IT+0x1c0>
 8007074:	2301      	movs	r3, #1
 8007076:	e000      	b.n	800707a <HAL_DMA_Start_IT+0x1c2>
 8007078:	2300      	movs	r3, #0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d036      	beq.n	80070ec <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f023 021e 	bic.w	r2, r3, #30
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f042 0216 	orr.w	r2, r2, #22
 8007090:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007096:	2b00      	cmp	r3, #0
 8007098:	d03e      	beq.n	8007118 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f042 0208 	orr.w	r2, r2, #8
 80070a8:	601a      	str	r2, [r3, #0]
 80070aa:	e035      	b.n	8007118 <HAL_DMA_Start_IT+0x260>
 80070ac:	40020010 	.word	0x40020010
 80070b0:	40020028 	.word	0x40020028
 80070b4:	40020040 	.word	0x40020040
 80070b8:	40020058 	.word	0x40020058
 80070bc:	40020070 	.word	0x40020070
 80070c0:	40020088 	.word	0x40020088
 80070c4:	400200a0 	.word	0x400200a0
 80070c8:	400200b8 	.word	0x400200b8
 80070cc:	40020410 	.word	0x40020410
 80070d0:	40020428 	.word	0x40020428
 80070d4:	40020440 	.word	0x40020440
 80070d8:	40020458 	.word	0x40020458
 80070dc:	40020470 	.word	0x40020470
 80070e0:	40020488 	.word	0x40020488
 80070e4:	400204a0 	.word	0x400204a0
 80070e8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f023 020e 	bic.w	r2, r3, #14
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f042 020a 	orr.w	r2, r2, #10
 80070fe:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007104:	2b00      	cmp	r3, #0
 8007106:	d007      	beq.n	8007118 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f042 0204 	orr.w	r2, r2, #4
 8007116:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a83      	ldr	r2, [pc, #524]	; (800732c <HAL_DMA_Start_IT+0x474>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d072      	beq.n	8007208 <HAL_DMA_Start_IT+0x350>
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a82      	ldr	r2, [pc, #520]	; (8007330 <HAL_DMA_Start_IT+0x478>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d06d      	beq.n	8007208 <HAL_DMA_Start_IT+0x350>
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a80      	ldr	r2, [pc, #512]	; (8007334 <HAL_DMA_Start_IT+0x47c>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d068      	beq.n	8007208 <HAL_DMA_Start_IT+0x350>
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a7f      	ldr	r2, [pc, #508]	; (8007338 <HAL_DMA_Start_IT+0x480>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d063      	beq.n	8007208 <HAL_DMA_Start_IT+0x350>
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a7d      	ldr	r2, [pc, #500]	; (800733c <HAL_DMA_Start_IT+0x484>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d05e      	beq.n	8007208 <HAL_DMA_Start_IT+0x350>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a7c      	ldr	r2, [pc, #496]	; (8007340 <HAL_DMA_Start_IT+0x488>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d059      	beq.n	8007208 <HAL_DMA_Start_IT+0x350>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a7a      	ldr	r2, [pc, #488]	; (8007344 <HAL_DMA_Start_IT+0x48c>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d054      	beq.n	8007208 <HAL_DMA_Start_IT+0x350>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a79      	ldr	r2, [pc, #484]	; (8007348 <HAL_DMA_Start_IT+0x490>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d04f      	beq.n	8007208 <HAL_DMA_Start_IT+0x350>
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a77      	ldr	r2, [pc, #476]	; (800734c <HAL_DMA_Start_IT+0x494>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d04a      	beq.n	8007208 <HAL_DMA_Start_IT+0x350>
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a76      	ldr	r2, [pc, #472]	; (8007350 <HAL_DMA_Start_IT+0x498>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d045      	beq.n	8007208 <HAL_DMA_Start_IT+0x350>
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a74      	ldr	r2, [pc, #464]	; (8007354 <HAL_DMA_Start_IT+0x49c>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d040      	beq.n	8007208 <HAL_DMA_Start_IT+0x350>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a73      	ldr	r2, [pc, #460]	; (8007358 <HAL_DMA_Start_IT+0x4a0>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d03b      	beq.n	8007208 <HAL_DMA_Start_IT+0x350>
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a71      	ldr	r2, [pc, #452]	; (800735c <HAL_DMA_Start_IT+0x4a4>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d036      	beq.n	8007208 <HAL_DMA_Start_IT+0x350>
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a70      	ldr	r2, [pc, #448]	; (8007360 <HAL_DMA_Start_IT+0x4a8>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d031      	beq.n	8007208 <HAL_DMA_Start_IT+0x350>
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a6e      	ldr	r2, [pc, #440]	; (8007364 <HAL_DMA_Start_IT+0x4ac>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d02c      	beq.n	8007208 <HAL_DMA_Start_IT+0x350>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a6d      	ldr	r2, [pc, #436]	; (8007368 <HAL_DMA_Start_IT+0x4b0>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d027      	beq.n	8007208 <HAL_DMA_Start_IT+0x350>
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a6b      	ldr	r2, [pc, #428]	; (800736c <HAL_DMA_Start_IT+0x4b4>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d022      	beq.n	8007208 <HAL_DMA_Start_IT+0x350>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a6a      	ldr	r2, [pc, #424]	; (8007370 <HAL_DMA_Start_IT+0x4b8>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d01d      	beq.n	8007208 <HAL_DMA_Start_IT+0x350>
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a68      	ldr	r2, [pc, #416]	; (8007374 <HAL_DMA_Start_IT+0x4bc>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d018      	beq.n	8007208 <HAL_DMA_Start_IT+0x350>
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a67      	ldr	r2, [pc, #412]	; (8007378 <HAL_DMA_Start_IT+0x4c0>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d013      	beq.n	8007208 <HAL_DMA_Start_IT+0x350>
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a65      	ldr	r2, [pc, #404]	; (800737c <HAL_DMA_Start_IT+0x4c4>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d00e      	beq.n	8007208 <HAL_DMA_Start_IT+0x350>
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a64      	ldr	r2, [pc, #400]	; (8007380 <HAL_DMA_Start_IT+0x4c8>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d009      	beq.n	8007208 <HAL_DMA_Start_IT+0x350>
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a62      	ldr	r2, [pc, #392]	; (8007384 <HAL_DMA_Start_IT+0x4cc>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d004      	beq.n	8007208 <HAL_DMA_Start_IT+0x350>
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a61      	ldr	r2, [pc, #388]	; (8007388 <HAL_DMA_Start_IT+0x4d0>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d101      	bne.n	800720c <HAL_DMA_Start_IT+0x354>
 8007208:	2301      	movs	r3, #1
 800720a:	e000      	b.n	800720e <HAL_DMA_Start_IT+0x356>
 800720c:	2300      	movs	r3, #0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d01a      	beq.n	8007248 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800721c:	2b00      	cmp	r3, #0
 800721e:	d007      	beq.n	8007230 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800722a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800722e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007234:	2b00      	cmp	r3, #0
 8007236:	d007      	beq.n	8007248 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007242:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007246:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a37      	ldr	r2, [pc, #220]	; (800732c <HAL_DMA_Start_IT+0x474>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d04a      	beq.n	80072e8 <HAL_DMA_Start_IT+0x430>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a36      	ldr	r2, [pc, #216]	; (8007330 <HAL_DMA_Start_IT+0x478>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d045      	beq.n	80072e8 <HAL_DMA_Start_IT+0x430>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a34      	ldr	r2, [pc, #208]	; (8007334 <HAL_DMA_Start_IT+0x47c>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d040      	beq.n	80072e8 <HAL_DMA_Start_IT+0x430>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a33      	ldr	r2, [pc, #204]	; (8007338 <HAL_DMA_Start_IT+0x480>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d03b      	beq.n	80072e8 <HAL_DMA_Start_IT+0x430>
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a31      	ldr	r2, [pc, #196]	; (800733c <HAL_DMA_Start_IT+0x484>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d036      	beq.n	80072e8 <HAL_DMA_Start_IT+0x430>
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a30      	ldr	r2, [pc, #192]	; (8007340 <HAL_DMA_Start_IT+0x488>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d031      	beq.n	80072e8 <HAL_DMA_Start_IT+0x430>
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a2e      	ldr	r2, [pc, #184]	; (8007344 <HAL_DMA_Start_IT+0x48c>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d02c      	beq.n	80072e8 <HAL_DMA_Start_IT+0x430>
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a2d      	ldr	r2, [pc, #180]	; (8007348 <HAL_DMA_Start_IT+0x490>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d027      	beq.n	80072e8 <HAL_DMA_Start_IT+0x430>
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a2b      	ldr	r2, [pc, #172]	; (800734c <HAL_DMA_Start_IT+0x494>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d022      	beq.n	80072e8 <HAL_DMA_Start_IT+0x430>
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a2a      	ldr	r2, [pc, #168]	; (8007350 <HAL_DMA_Start_IT+0x498>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d01d      	beq.n	80072e8 <HAL_DMA_Start_IT+0x430>
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a28      	ldr	r2, [pc, #160]	; (8007354 <HAL_DMA_Start_IT+0x49c>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d018      	beq.n	80072e8 <HAL_DMA_Start_IT+0x430>
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a27      	ldr	r2, [pc, #156]	; (8007358 <HAL_DMA_Start_IT+0x4a0>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d013      	beq.n	80072e8 <HAL_DMA_Start_IT+0x430>
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a25      	ldr	r2, [pc, #148]	; (800735c <HAL_DMA_Start_IT+0x4a4>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d00e      	beq.n	80072e8 <HAL_DMA_Start_IT+0x430>
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a24      	ldr	r2, [pc, #144]	; (8007360 <HAL_DMA_Start_IT+0x4a8>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d009      	beq.n	80072e8 <HAL_DMA_Start_IT+0x430>
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a22      	ldr	r2, [pc, #136]	; (8007364 <HAL_DMA_Start_IT+0x4ac>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d004      	beq.n	80072e8 <HAL_DMA_Start_IT+0x430>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a21      	ldr	r2, [pc, #132]	; (8007368 <HAL_DMA_Start_IT+0x4b0>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d108      	bne.n	80072fa <HAL_DMA_Start_IT+0x442>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f042 0201 	orr.w	r2, r2, #1
 80072f6:	601a      	str	r2, [r3, #0]
 80072f8:	e012      	b.n	8007320 <HAL_DMA_Start_IT+0x468>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f042 0201 	orr.w	r2, r2, #1
 8007308:	601a      	str	r2, [r3, #0]
 800730a:	e009      	b.n	8007320 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007312:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2200      	movs	r2, #0
 8007318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007320:	7dfb      	ldrb	r3, [r7, #23]
}
 8007322:	4618      	mov	r0, r3
 8007324:	3718      	adds	r7, #24
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	40020010 	.word	0x40020010
 8007330:	40020028 	.word	0x40020028
 8007334:	40020040 	.word	0x40020040
 8007338:	40020058 	.word	0x40020058
 800733c:	40020070 	.word	0x40020070
 8007340:	40020088 	.word	0x40020088
 8007344:	400200a0 	.word	0x400200a0
 8007348:	400200b8 	.word	0x400200b8
 800734c:	40020410 	.word	0x40020410
 8007350:	40020428 	.word	0x40020428
 8007354:	40020440 	.word	0x40020440
 8007358:	40020458 	.word	0x40020458
 800735c:	40020470 	.word	0x40020470
 8007360:	40020488 	.word	0x40020488
 8007364:	400204a0 	.word	0x400204a0
 8007368:	400204b8 	.word	0x400204b8
 800736c:	58025408 	.word	0x58025408
 8007370:	5802541c 	.word	0x5802541c
 8007374:	58025430 	.word	0x58025430
 8007378:	58025444 	.word	0x58025444
 800737c:	58025458 	.word	0x58025458
 8007380:	5802546c 	.word	0x5802546c
 8007384:	58025480 	.word	0x58025480
 8007388:	58025494 	.word	0x58025494

0800738c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b086      	sub	sp, #24
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8007394:	f7fe ff34 	bl	8006200 <HAL_GetTick>
 8007398:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d101      	bne.n	80073a4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	e2dc      	b.n	800795e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	d008      	beq.n	80073c2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2280      	movs	r2, #128	; 0x80
 80073b4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	e2cd      	b.n	800795e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a76      	ldr	r2, [pc, #472]	; (80075a0 <HAL_DMA_Abort+0x214>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d04a      	beq.n	8007462 <HAL_DMA_Abort+0xd6>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a74      	ldr	r2, [pc, #464]	; (80075a4 <HAL_DMA_Abort+0x218>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d045      	beq.n	8007462 <HAL_DMA_Abort+0xd6>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a73      	ldr	r2, [pc, #460]	; (80075a8 <HAL_DMA_Abort+0x21c>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d040      	beq.n	8007462 <HAL_DMA_Abort+0xd6>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a71      	ldr	r2, [pc, #452]	; (80075ac <HAL_DMA_Abort+0x220>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d03b      	beq.n	8007462 <HAL_DMA_Abort+0xd6>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a70      	ldr	r2, [pc, #448]	; (80075b0 <HAL_DMA_Abort+0x224>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d036      	beq.n	8007462 <HAL_DMA_Abort+0xd6>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a6e      	ldr	r2, [pc, #440]	; (80075b4 <HAL_DMA_Abort+0x228>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d031      	beq.n	8007462 <HAL_DMA_Abort+0xd6>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a6d      	ldr	r2, [pc, #436]	; (80075b8 <HAL_DMA_Abort+0x22c>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d02c      	beq.n	8007462 <HAL_DMA_Abort+0xd6>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a6b      	ldr	r2, [pc, #428]	; (80075bc <HAL_DMA_Abort+0x230>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d027      	beq.n	8007462 <HAL_DMA_Abort+0xd6>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a6a      	ldr	r2, [pc, #424]	; (80075c0 <HAL_DMA_Abort+0x234>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d022      	beq.n	8007462 <HAL_DMA_Abort+0xd6>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a68      	ldr	r2, [pc, #416]	; (80075c4 <HAL_DMA_Abort+0x238>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d01d      	beq.n	8007462 <HAL_DMA_Abort+0xd6>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a67      	ldr	r2, [pc, #412]	; (80075c8 <HAL_DMA_Abort+0x23c>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d018      	beq.n	8007462 <HAL_DMA_Abort+0xd6>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a65      	ldr	r2, [pc, #404]	; (80075cc <HAL_DMA_Abort+0x240>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d013      	beq.n	8007462 <HAL_DMA_Abort+0xd6>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a64      	ldr	r2, [pc, #400]	; (80075d0 <HAL_DMA_Abort+0x244>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d00e      	beq.n	8007462 <HAL_DMA_Abort+0xd6>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a62      	ldr	r2, [pc, #392]	; (80075d4 <HAL_DMA_Abort+0x248>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d009      	beq.n	8007462 <HAL_DMA_Abort+0xd6>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a61      	ldr	r2, [pc, #388]	; (80075d8 <HAL_DMA_Abort+0x24c>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d004      	beq.n	8007462 <HAL_DMA_Abort+0xd6>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a5f      	ldr	r2, [pc, #380]	; (80075dc <HAL_DMA_Abort+0x250>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d101      	bne.n	8007466 <HAL_DMA_Abort+0xda>
 8007462:	2301      	movs	r3, #1
 8007464:	e000      	b.n	8007468 <HAL_DMA_Abort+0xdc>
 8007466:	2300      	movs	r3, #0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d013      	beq.n	8007494 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f022 021e 	bic.w	r2, r2, #30
 800747a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	695a      	ldr	r2, [r3, #20]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800748a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	617b      	str	r3, [r7, #20]
 8007492:	e00a      	b.n	80074aa <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f022 020e 	bic.w	r2, r2, #14
 80074a2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a3c      	ldr	r2, [pc, #240]	; (80075a0 <HAL_DMA_Abort+0x214>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d072      	beq.n	800759a <HAL_DMA_Abort+0x20e>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a3a      	ldr	r2, [pc, #232]	; (80075a4 <HAL_DMA_Abort+0x218>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d06d      	beq.n	800759a <HAL_DMA_Abort+0x20e>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a39      	ldr	r2, [pc, #228]	; (80075a8 <HAL_DMA_Abort+0x21c>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d068      	beq.n	800759a <HAL_DMA_Abort+0x20e>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a37      	ldr	r2, [pc, #220]	; (80075ac <HAL_DMA_Abort+0x220>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d063      	beq.n	800759a <HAL_DMA_Abort+0x20e>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a36      	ldr	r2, [pc, #216]	; (80075b0 <HAL_DMA_Abort+0x224>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d05e      	beq.n	800759a <HAL_DMA_Abort+0x20e>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a34      	ldr	r2, [pc, #208]	; (80075b4 <HAL_DMA_Abort+0x228>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d059      	beq.n	800759a <HAL_DMA_Abort+0x20e>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a33      	ldr	r2, [pc, #204]	; (80075b8 <HAL_DMA_Abort+0x22c>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d054      	beq.n	800759a <HAL_DMA_Abort+0x20e>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a31      	ldr	r2, [pc, #196]	; (80075bc <HAL_DMA_Abort+0x230>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d04f      	beq.n	800759a <HAL_DMA_Abort+0x20e>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a30      	ldr	r2, [pc, #192]	; (80075c0 <HAL_DMA_Abort+0x234>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d04a      	beq.n	800759a <HAL_DMA_Abort+0x20e>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a2e      	ldr	r2, [pc, #184]	; (80075c4 <HAL_DMA_Abort+0x238>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d045      	beq.n	800759a <HAL_DMA_Abort+0x20e>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a2d      	ldr	r2, [pc, #180]	; (80075c8 <HAL_DMA_Abort+0x23c>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d040      	beq.n	800759a <HAL_DMA_Abort+0x20e>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a2b      	ldr	r2, [pc, #172]	; (80075cc <HAL_DMA_Abort+0x240>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d03b      	beq.n	800759a <HAL_DMA_Abort+0x20e>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a2a      	ldr	r2, [pc, #168]	; (80075d0 <HAL_DMA_Abort+0x244>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d036      	beq.n	800759a <HAL_DMA_Abort+0x20e>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a28      	ldr	r2, [pc, #160]	; (80075d4 <HAL_DMA_Abort+0x248>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d031      	beq.n	800759a <HAL_DMA_Abort+0x20e>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a27      	ldr	r2, [pc, #156]	; (80075d8 <HAL_DMA_Abort+0x24c>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d02c      	beq.n	800759a <HAL_DMA_Abort+0x20e>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a25      	ldr	r2, [pc, #148]	; (80075dc <HAL_DMA_Abort+0x250>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d027      	beq.n	800759a <HAL_DMA_Abort+0x20e>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a24      	ldr	r2, [pc, #144]	; (80075e0 <HAL_DMA_Abort+0x254>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d022      	beq.n	800759a <HAL_DMA_Abort+0x20e>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a22      	ldr	r2, [pc, #136]	; (80075e4 <HAL_DMA_Abort+0x258>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d01d      	beq.n	800759a <HAL_DMA_Abort+0x20e>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a21      	ldr	r2, [pc, #132]	; (80075e8 <HAL_DMA_Abort+0x25c>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d018      	beq.n	800759a <HAL_DMA_Abort+0x20e>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a1f      	ldr	r2, [pc, #124]	; (80075ec <HAL_DMA_Abort+0x260>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d013      	beq.n	800759a <HAL_DMA_Abort+0x20e>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a1e      	ldr	r2, [pc, #120]	; (80075f0 <HAL_DMA_Abort+0x264>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d00e      	beq.n	800759a <HAL_DMA_Abort+0x20e>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a1c      	ldr	r2, [pc, #112]	; (80075f4 <HAL_DMA_Abort+0x268>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d009      	beq.n	800759a <HAL_DMA_Abort+0x20e>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a1b      	ldr	r2, [pc, #108]	; (80075f8 <HAL_DMA_Abort+0x26c>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d004      	beq.n	800759a <HAL_DMA_Abort+0x20e>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a19      	ldr	r2, [pc, #100]	; (80075fc <HAL_DMA_Abort+0x270>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d132      	bne.n	8007600 <HAL_DMA_Abort+0x274>
 800759a:	2301      	movs	r3, #1
 800759c:	e031      	b.n	8007602 <HAL_DMA_Abort+0x276>
 800759e:	bf00      	nop
 80075a0:	40020010 	.word	0x40020010
 80075a4:	40020028 	.word	0x40020028
 80075a8:	40020040 	.word	0x40020040
 80075ac:	40020058 	.word	0x40020058
 80075b0:	40020070 	.word	0x40020070
 80075b4:	40020088 	.word	0x40020088
 80075b8:	400200a0 	.word	0x400200a0
 80075bc:	400200b8 	.word	0x400200b8
 80075c0:	40020410 	.word	0x40020410
 80075c4:	40020428 	.word	0x40020428
 80075c8:	40020440 	.word	0x40020440
 80075cc:	40020458 	.word	0x40020458
 80075d0:	40020470 	.word	0x40020470
 80075d4:	40020488 	.word	0x40020488
 80075d8:	400204a0 	.word	0x400204a0
 80075dc:	400204b8 	.word	0x400204b8
 80075e0:	58025408 	.word	0x58025408
 80075e4:	5802541c 	.word	0x5802541c
 80075e8:	58025430 	.word	0x58025430
 80075ec:	58025444 	.word	0x58025444
 80075f0:	58025458 	.word	0x58025458
 80075f4:	5802546c 	.word	0x5802546c
 80075f8:	58025480 	.word	0x58025480
 80075fc:	58025494 	.word	0x58025494
 8007600:	2300      	movs	r3, #0
 8007602:	2b00      	cmp	r3, #0
 8007604:	d007      	beq.n	8007616 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007610:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007614:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a6d      	ldr	r2, [pc, #436]	; (80077d0 <HAL_DMA_Abort+0x444>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d04a      	beq.n	80076b6 <HAL_DMA_Abort+0x32a>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a6b      	ldr	r2, [pc, #428]	; (80077d4 <HAL_DMA_Abort+0x448>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d045      	beq.n	80076b6 <HAL_DMA_Abort+0x32a>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a6a      	ldr	r2, [pc, #424]	; (80077d8 <HAL_DMA_Abort+0x44c>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d040      	beq.n	80076b6 <HAL_DMA_Abort+0x32a>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a68      	ldr	r2, [pc, #416]	; (80077dc <HAL_DMA_Abort+0x450>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d03b      	beq.n	80076b6 <HAL_DMA_Abort+0x32a>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a67      	ldr	r2, [pc, #412]	; (80077e0 <HAL_DMA_Abort+0x454>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d036      	beq.n	80076b6 <HAL_DMA_Abort+0x32a>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a65      	ldr	r2, [pc, #404]	; (80077e4 <HAL_DMA_Abort+0x458>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d031      	beq.n	80076b6 <HAL_DMA_Abort+0x32a>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a64      	ldr	r2, [pc, #400]	; (80077e8 <HAL_DMA_Abort+0x45c>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d02c      	beq.n	80076b6 <HAL_DMA_Abort+0x32a>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a62      	ldr	r2, [pc, #392]	; (80077ec <HAL_DMA_Abort+0x460>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d027      	beq.n	80076b6 <HAL_DMA_Abort+0x32a>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a61      	ldr	r2, [pc, #388]	; (80077f0 <HAL_DMA_Abort+0x464>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d022      	beq.n	80076b6 <HAL_DMA_Abort+0x32a>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a5f      	ldr	r2, [pc, #380]	; (80077f4 <HAL_DMA_Abort+0x468>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d01d      	beq.n	80076b6 <HAL_DMA_Abort+0x32a>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a5e      	ldr	r2, [pc, #376]	; (80077f8 <HAL_DMA_Abort+0x46c>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d018      	beq.n	80076b6 <HAL_DMA_Abort+0x32a>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a5c      	ldr	r2, [pc, #368]	; (80077fc <HAL_DMA_Abort+0x470>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d013      	beq.n	80076b6 <HAL_DMA_Abort+0x32a>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a5b      	ldr	r2, [pc, #364]	; (8007800 <HAL_DMA_Abort+0x474>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d00e      	beq.n	80076b6 <HAL_DMA_Abort+0x32a>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a59      	ldr	r2, [pc, #356]	; (8007804 <HAL_DMA_Abort+0x478>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d009      	beq.n	80076b6 <HAL_DMA_Abort+0x32a>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a58      	ldr	r2, [pc, #352]	; (8007808 <HAL_DMA_Abort+0x47c>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d004      	beq.n	80076b6 <HAL_DMA_Abort+0x32a>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a56      	ldr	r2, [pc, #344]	; (800780c <HAL_DMA_Abort+0x480>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d108      	bne.n	80076c8 <HAL_DMA_Abort+0x33c>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f022 0201 	bic.w	r2, r2, #1
 80076c4:	601a      	str	r2, [r3, #0]
 80076c6:	e007      	b.n	80076d8 <HAL_DMA_Abort+0x34c>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f022 0201 	bic.w	r2, r2, #1
 80076d6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80076d8:	e013      	b.n	8007702 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80076da:	f7fe fd91 	bl	8006200 <HAL_GetTick>
 80076de:	4602      	mov	r2, r0
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	1ad3      	subs	r3, r2, r3
 80076e4:	2b05      	cmp	r3, #5
 80076e6:	d90c      	bls.n	8007702 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2220      	movs	r2, #32
 80076ec:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2203      	movs	r2, #3
 80076f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	e12d      	b.n	800795e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 0301 	and.w	r3, r3, #1
 800770a:	2b00      	cmp	r3, #0
 800770c:	d1e5      	bne.n	80076da <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a2f      	ldr	r2, [pc, #188]	; (80077d0 <HAL_DMA_Abort+0x444>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d04a      	beq.n	80077ae <HAL_DMA_Abort+0x422>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a2d      	ldr	r2, [pc, #180]	; (80077d4 <HAL_DMA_Abort+0x448>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d045      	beq.n	80077ae <HAL_DMA_Abort+0x422>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a2c      	ldr	r2, [pc, #176]	; (80077d8 <HAL_DMA_Abort+0x44c>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d040      	beq.n	80077ae <HAL_DMA_Abort+0x422>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a2a      	ldr	r2, [pc, #168]	; (80077dc <HAL_DMA_Abort+0x450>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d03b      	beq.n	80077ae <HAL_DMA_Abort+0x422>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a29      	ldr	r2, [pc, #164]	; (80077e0 <HAL_DMA_Abort+0x454>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d036      	beq.n	80077ae <HAL_DMA_Abort+0x422>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a27      	ldr	r2, [pc, #156]	; (80077e4 <HAL_DMA_Abort+0x458>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d031      	beq.n	80077ae <HAL_DMA_Abort+0x422>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a26      	ldr	r2, [pc, #152]	; (80077e8 <HAL_DMA_Abort+0x45c>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d02c      	beq.n	80077ae <HAL_DMA_Abort+0x422>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a24      	ldr	r2, [pc, #144]	; (80077ec <HAL_DMA_Abort+0x460>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d027      	beq.n	80077ae <HAL_DMA_Abort+0x422>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a23      	ldr	r2, [pc, #140]	; (80077f0 <HAL_DMA_Abort+0x464>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d022      	beq.n	80077ae <HAL_DMA_Abort+0x422>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a21      	ldr	r2, [pc, #132]	; (80077f4 <HAL_DMA_Abort+0x468>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d01d      	beq.n	80077ae <HAL_DMA_Abort+0x422>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a20      	ldr	r2, [pc, #128]	; (80077f8 <HAL_DMA_Abort+0x46c>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d018      	beq.n	80077ae <HAL_DMA_Abort+0x422>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a1e      	ldr	r2, [pc, #120]	; (80077fc <HAL_DMA_Abort+0x470>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d013      	beq.n	80077ae <HAL_DMA_Abort+0x422>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a1d      	ldr	r2, [pc, #116]	; (8007800 <HAL_DMA_Abort+0x474>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d00e      	beq.n	80077ae <HAL_DMA_Abort+0x422>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a1b      	ldr	r2, [pc, #108]	; (8007804 <HAL_DMA_Abort+0x478>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d009      	beq.n	80077ae <HAL_DMA_Abort+0x422>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a1a      	ldr	r2, [pc, #104]	; (8007808 <HAL_DMA_Abort+0x47c>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d004      	beq.n	80077ae <HAL_DMA_Abort+0x422>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a18      	ldr	r2, [pc, #96]	; (800780c <HAL_DMA_Abort+0x480>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d101      	bne.n	80077b2 <HAL_DMA_Abort+0x426>
 80077ae:	2301      	movs	r3, #1
 80077b0:	e000      	b.n	80077b4 <HAL_DMA_Abort+0x428>
 80077b2:	2300      	movs	r3, #0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d02b      	beq.n	8007810 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077bc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077c2:	f003 031f 	and.w	r3, r3, #31
 80077c6:	223f      	movs	r2, #63	; 0x3f
 80077c8:	409a      	lsls	r2, r3
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	609a      	str	r2, [r3, #8]
 80077ce:	e02a      	b.n	8007826 <HAL_DMA_Abort+0x49a>
 80077d0:	40020010 	.word	0x40020010
 80077d4:	40020028 	.word	0x40020028
 80077d8:	40020040 	.word	0x40020040
 80077dc:	40020058 	.word	0x40020058
 80077e0:	40020070 	.word	0x40020070
 80077e4:	40020088 	.word	0x40020088
 80077e8:	400200a0 	.word	0x400200a0
 80077ec:	400200b8 	.word	0x400200b8
 80077f0:	40020410 	.word	0x40020410
 80077f4:	40020428 	.word	0x40020428
 80077f8:	40020440 	.word	0x40020440
 80077fc:	40020458 	.word	0x40020458
 8007800:	40020470 	.word	0x40020470
 8007804:	40020488 	.word	0x40020488
 8007808:	400204a0 	.word	0x400204a0
 800780c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007814:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800781a:	f003 031f 	and.w	r3, r3, #31
 800781e:	2201      	movs	r2, #1
 8007820:	409a      	lsls	r2, r3
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a4f      	ldr	r2, [pc, #316]	; (8007968 <HAL_DMA_Abort+0x5dc>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d072      	beq.n	8007916 <HAL_DMA_Abort+0x58a>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a4d      	ldr	r2, [pc, #308]	; (800796c <HAL_DMA_Abort+0x5e0>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d06d      	beq.n	8007916 <HAL_DMA_Abort+0x58a>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a4c      	ldr	r2, [pc, #304]	; (8007970 <HAL_DMA_Abort+0x5e4>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d068      	beq.n	8007916 <HAL_DMA_Abort+0x58a>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a4a      	ldr	r2, [pc, #296]	; (8007974 <HAL_DMA_Abort+0x5e8>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d063      	beq.n	8007916 <HAL_DMA_Abort+0x58a>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a49      	ldr	r2, [pc, #292]	; (8007978 <HAL_DMA_Abort+0x5ec>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d05e      	beq.n	8007916 <HAL_DMA_Abort+0x58a>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a47      	ldr	r2, [pc, #284]	; (800797c <HAL_DMA_Abort+0x5f0>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d059      	beq.n	8007916 <HAL_DMA_Abort+0x58a>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a46      	ldr	r2, [pc, #280]	; (8007980 <HAL_DMA_Abort+0x5f4>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d054      	beq.n	8007916 <HAL_DMA_Abort+0x58a>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a44      	ldr	r2, [pc, #272]	; (8007984 <HAL_DMA_Abort+0x5f8>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d04f      	beq.n	8007916 <HAL_DMA_Abort+0x58a>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a43      	ldr	r2, [pc, #268]	; (8007988 <HAL_DMA_Abort+0x5fc>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d04a      	beq.n	8007916 <HAL_DMA_Abort+0x58a>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a41      	ldr	r2, [pc, #260]	; (800798c <HAL_DMA_Abort+0x600>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d045      	beq.n	8007916 <HAL_DMA_Abort+0x58a>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a40      	ldr	r2, [pc, #256]	; (8007990 <HAL_DMA_Abort+0x604>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d040      	beq.n	8007916 <HAL_DMA_Abort+0x58a>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a3e      	ldr	r2, [pc, #248]	; (8007994 <HAL_DMA_Abort+0x608>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d03b      	beq.n	8007916 <HAL_DMA_Abort+0x58a>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a3d      	ldr	r2, [pc, #244]	; (8007998 <HAL_DMA_Abort+0x60c>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d036      	beq.n	8007916 <HAL_DMA_Abort+0x58a>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a3b      	ldr	r2, [pc, #236]	; (800799c <HAL_DMA_Abort+0x610>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d031      	beq.n	8007916 <HAL_DMA_Abort+0x58a>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a3a      	ldr	r2, [pc, #232]	; (80079a0 <HAL_DMA_Abort+0x614>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d02c      	beq.n	8007916 <HAL_DMA_Abort+0x58a>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a38      	ldr	r2, [pc, #224]	; (80079a4 <HAL_DMA_Abort+0x618>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d027      	beq.n	8007916 <HAL_DMA_Abort+0x58a>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a37      	ldr	r2, [pc, #220]	; (80079a8 <HAL_DMA_Abort+0x61c>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d022      	beq.n	8007916 <HAL_DMA_Abort+0x58a>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a35      	ldr	r2, [pc, #212]	; (80079ac <HAL_DMA_Abort+0x620>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d01d      	beq.n	8007916 <HAL_DMA_Abort+0x58a>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a34      	ldr	r2, [pc, #208]	; (80079b0 <HAL_DMA_Abort+0x624>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d018      	beq.n	8007916 <HAL_DMA_Abort+0x58a>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a32      	ldr	r2, [pc, #200]	; (80079b4 <HAL_DMA_Abort+0x628>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d013      	beq.n	8007916 <HAL_DMA_Abort+0x58a>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a31      	ldr	r2, [pc, #196]	; (80079b8 <HAL_DMA_Abort+0x62c>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d00e      	beq.n	8007916 <HAL_DMA_Abort+0x58a>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a2f      	ldr	r2, [pc, #188]	; (80079bc <HAL_DMA_Abort+0x630>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d009      	beq.n	8007916 <HAL_DMA_Abort+0x58a>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a2e      	ldr	r2, [pc, #184]	; (80079c0 <HAL_DMA_Abort+0x634>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d004      	beq.n	8007916 <HAL_DMA_Abort+0x58a>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a2c      	ldr	r2, [pc, #176]	; (80079c4 <HAL_DMA_Abort+0x638>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d101      	bne.n	800791a <HAL_DMA_Abort+0x58e>
 8007916:	2301      	movs	r3, #1
 8007918:	e000      	b.n	800791c <HAL_DMA_Abort+0x590>
 800791a:	2300      	movs	r3, #0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d015      	beq.n	800794c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007928:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00c      	beq.n	800794c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800793c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007940:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800794a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3718      	adds	r7, #24
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop
 8007968:	40020010 	.word	0x40020010
 800796c:	40020028 	.word	0x40020028
 8007970:	40020040 	.word	0x40020040
 8007974:	40020058 	.word	0x40020058
 8007978:	40020070 	.word	0x40020070
 800797c:	40020088 	.word	0x40020088
 8007980:	400200a0 	.word	0x400200a0
 8007984:	400200b8 	.word	0x400200b8
 8007988:	40020410 	.word	0x40020410
 800798c:	40020428 	.word	0x40020428
 8007990:	40020440 	.word	0x40020440
 8007994:	40020458 	.word	0x40020458
 8007998:	40020470 	.word	0x40020470
 800799c:	40020488 	.word	0x40020488
 80079a0:	400204a0 	.word	0x400204a0
 80079a4:	400204b8 	.word	0x400204b8
 80079a8:	58025408 	.word	0x58025408
 80079ac:	5802541c 	.word	0x5802541c
 80079b0:	58025430 	.word	0x58025430
 80079b4:	58025444 	.word	0x58025444
 80079b8:	58025458 	.word	0x58025458
 80079bc:	5802546c 	.word	0x5802546c
 80079c0:	58025480 	.word	0x58025480
 80079c4:	58025494 	.word	0x58025494

080079c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d101      	bne.n	80079da <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	e237      	b.n	8007e4a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	2b02      	cmp	r3, #2
 80079e4:	d004      	beq.n	80079f0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2280      	movs	r2, #128	; 0x80
 80079ea:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	e22c      	b.n	8007e4a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a5c      	ldr	r2, [pc, #368]	; (8007b68 <HAL_DMA_Abort_IT+0x1a0>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d04a      	beq.n	8007a90 <HAL_DMA_Abort_IT+0xc8>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a5b      	ldr	r2, [pc, #364]	; (8007b6c <HAL_DMA_Abort_IT+0x1a4>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d045      	beq.n	8007a90 <HAL_DMA_Abort_IT+0xc8>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a59      	ldr	r2, [pc, #356]	; (8007b70 <HAL_DMA_Abort_IT+0x1a8>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d040      	beq.n	8007a90 <HAL_DMA_Abort_IT+0xc8>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a58      	ldr	r2, [pc, #352]	; (8007b74 <HAL_DMA_Abort_IT+0x1ac>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d03b      	beq.n	8007a90 <HAL_DMA_Abort_IT+0xc8>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a56      	ldr	r2, [pc, #344]	; (8007b78 <HAL_DMA_Abort_IT+0x1b0>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d036      	beq.n	8007a90 <HAL_DMA_Abort_IT+0xc8>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a55      	ldr	r2, [pc, #340]	; (8007b7c <HAL_DMA_Abort_IT+0x1b4>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d031      	beq.n	8007a90 <HAL_DMA_Abort_IT+0xc8>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a53      	ldr	r2, [pc, #332]	; (8007b80 <HAL_DMA_Abort_IT+0x1b8>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d02c      	beq.n	8007a90 <HAL_DMA_Abort_IT+0xc8>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a52      	ldr	r2, [pc, #328]	; (8007b84 <HAL_DMA_Abort_IT+0x1bc>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d027      	beq.n	8007a90 <HAL_DMA_Abort_IT+0xc8>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a50      	ldr	r2, [pc, #320]	; (8007b88 <HAL_DMA_Abort_IT+0x1c0>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d022      	beq.n	8007a90 <HAL_DMA_Abort_IT+0xc8>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a4f      	ldr	r2, [pc, #316]	; (8007b8c <HAL_DMA_Abort_IT+0x1c4>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d01d      	beq.n	8007a90 <HAL_DMA_Abort_IT+0xc8>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a4d      	ldr	r2, [pc, #308]	; (8007b90 <HAL_DMA_Abort_IT+0x1c8>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d018      	beq.n	8007a90 <HAL_DMA_Abort_IT+0xc8>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a4c      	ldr	r2, [pc, #304]	; (8007b94 <HAL_DMA_Abort_IT+0x1cc>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d013      	beq.n	8007a90 <HAL_DMA_Abort_IT+0xc8>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a4a      	ldr	r2, [pc, #296]	; (8007b98 <HAL_DMA_Abort_IT+0x1d0>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d00e      	beq.n	8007a90 <HAL_DMA_Abort_IT+0xc8>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a49      	ldr	r2, [pc, #292]	; (8007b9c <HAL_DMA_Abort_IT+0x1d4>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d009      	beq.n	8007a90 <HAL_DMA_Abort_IT+0xc8>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a47      	ldr	r2, [pc, #284]	; (8007ba0 <HAL_DMA_Abort_IT+0x1d8>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d004      	beq.n	8007a90 <HAL_DMA_Abort_IT+0xc8>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a46      	ldr	r2, [pc, #280]	; (8007ba4 <HAL_DMA_Abort_IT+0x1dc>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d101      	bne.n	8007a94 <HAL_DMA_Abort_IT+0xcc>
 8007a90:	2301      	movs	r3, #1
 8007a92:	e000      	b.n	8007a96 <HAL_DMA_Abort_IT+0xce>
 8007a94:	2300      	movs	r3, #0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	f000 8086 	beq.w	8007ba8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2204      	movs	r2, #4
 8007aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a2f      	ldr	r2, [pc, #188]	; (8007b68 <HAL_DMA_Abort_IT+0x1a0>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d04a      	beq.n	8007b44 <HAL_DMA_Abort_IT+0x17c>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a2e      	ldr	r2, [pc, #184]	; (8007b6c <HAL_DMA_Abort_IT+0x1a4>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d045      	beq.n	8007b44 <HAL_DMA_Abort_IT+0x17c>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a2c      	ldr	r2, [pc, #176]	; (8007b70 <HAL_DMA_Abort_IT+0x1a8>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d040      	beq.n	8007b44 <HAL_DMA_Abort_IT+0x17c>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a2b      	ldr	r2, [pc, #172]	; (8007b74 <HAL_DMA_Abort_IT+0x1ac>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d03b      	beq.n	8007b44 <HAL_DMA_Abort_IT+0x17c>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a29      	ldr	r2, [pc, #164]	; (8007b78 <HAL_DMA_Abort_IT+0x1b0>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d036      	beq.n	8007b44 <HAL_DMA_Abort_IT+0x17c>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a28      	ldr	r2, [pc, #160]	; (8007b7c <HAL_DMA_Abort_IT+0x1b4>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d031      	beq.n	8007b44 <HAL_DMA_Abort_IT+0x17c>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a26      	ldr	r2, [pc, #152]	; (8007b80 <HAL_DMA_Abort_IT+0x1b8>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d02c      	beq.n	8007b44 <HAL_DMA_Abort_IT+0x17c>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a25      	ldr	r2, [pc, #148]	; (8007b84 <HAL_DMA_Abort_IT+0x1bc>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d027      	beq.n	8007b44 <HAL_DMA_Abort_IT+0x17c>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a23      	ldr	r2, [pc, #140]	; (8007b88 <HAL_DMA_Abort_IT+0x1c0>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d022      	beq.n	8007b44 <HAL_DMA_Abort_IT+0x17c>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a22      	ldr	r2, [pc, #136]	; (8007b8c <HAL_DMA_Abort_IT+0x1c4>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d01d      	beq.n	8007b44 <HAL_DMA_Abort_IT+0x17c>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a20      	ldr	r2, [pc, #128]	; (8007b90 <HAL_DMA_Abort_IT+0x1c8>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d018      	beq.n	8007b44 <HAL_DMA_Abort_IT+0x17c>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a1f      	ldr	r2, [pc, #124]	; (8007b94 <HAL_DMA_Abort_IT+0x1cc>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d013      	beq.n	8007b44 <HAL_DMA_Abort_IT+0x17c>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a1d      	ldr	r2, [pc, #116]	; (8007b98 <HAL_DMA_Abort_IT+0x1d0>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d00e      	beq.n	8007b44 <HAL_DMA_Abort_IT+0x17c>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a1c      	ldr	r2, [pc, #112]	; (8007b9c <HAL_DMA_Abort_IT+0x1d4>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d009      	beq.n	8007b44 <HAL_DMA_Abort_IT+0x17c>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a1a      	ldr	r2, [pc, #104]	; (8007ba0 <HAL_DMA_Abort_IT+0x1d8>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d004      	beq.n	8007b44 <HAL_DMA_Abort_IT+0x17c>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a19      	ldr	r2, [pc, #100]	; (8007ba4 <HAL_DMA_Abort_IT+0x1dc>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d108      	bne.n	8007b56 <HAL_DMA_Abort_IT+0x18e>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f022 0201 	bic.w	r2, r2, #1
 8007b52:	601a      	str	r2, [r3, #0]
 8007b54:	e178      	b.n	8007e48 <HAL_DMA_Abort_IT+0x480>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f022 0201 	bic.w	r2, r2, #1
 8007b64:	601a      	str	r2, [r3, #0]
 8007b66:	e16f      	b.n	8007e48 <HAL_DMA_Abort_IT+0x480>
 8007b68:	40020010 	.word	0x40020010
 8007b6c:	40020028 	.word	0x40020028
 8007b70:	40020040 	.word	0x40020040
 8007b74:	40020058 	.word	0x40020058
 8007b78:	40020070 	.word	0x40020070
 8007b7c:	40020088 	.word	0x40020088
 8007b80:	400200a0 	.word	0x400200a0
 8007b84:	400200b8 	.word	0x400200b8
 8007b88:	40020410 	.word	0x40020410
 8007b8c:	40020428 	.word	0x40020428
 8007b90:	40020440 	.word	0x40020440
 8007b94:	40020458 	.word	0x40020458
 8007b98:	40020470 	.word	0x40020470
 8007b9c:	40020488 	.word	0x40020488
 8007ba0:	400204a0 	.word	0x400204a0
 8007ba4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f022 020e 	bic.w	r2, r2, #14
 8007bb6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a6c      	ldr	r2, [pc, #432]	; (8007d70 <HAL_DMA_Abort_IT+0x3a8>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d04a      	beq.n	8007c58 <HAL_DMA_Abort_IT+0x290>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a6b      	ldr	r2, [pc, #428]	; (8007d74 <HAL_DMA_Abort_IT+0x3ac>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d045      	beq.n	8007c58 <HAL_DMA_Abort_IT+0x290>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a69      	ldr	r2, [pc, #420]	; (8007d78 <HAL_DMA_Abort_IT+0x3b0>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d040      	beq.n	8007c58 <HAL_DMA_Abort_IT+0x290>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a68      	ldr	r2, [pc, #416]	; (8007d7c <HAL_DMA_Abort_IT+0x3b4>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d03b      	beq.n	8007c58 <HAL_DMA_Abort_IT+0x290>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a66      	ldr	r2, [pc, #408]	; (8007d80 <HAL_DMA_Abort_IT+0x3b8>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d036      	beq.n	8007c58 <HAL_DMA_Abort_IT+0x290>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a65      	ldr	r2, [pc, #404]	; (8007d84 <HAL_DMA_Abort_IT+0x3bc>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d031      	beq.n	8007c58 <HAL_DMA_Abort_IT+0x290>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a63      	ldr	r2, [pc, #396]	; (8007d88 <HAL_DMA_Abort_IT+0x3c0>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d02c      	beq.n	8007c58 <HAL_DMA_Abort_IT+0x290>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a62      	ldr	r2, [pc, #392]	; (8007d8c <HAL_DMA_Abort_IT+0x3c4>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d027      	beq.n	8007c58 <HAL_DMA_Abort_IT+0x290>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a60      	ldr	r2, [pc, #384]	; (8007d90 <HAL_DMA_Abort_IT+0x3c8>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d022      	beq.n	8007c58 <HAL_DMA_Abort_IT+0x290>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a5f      	ldr	r2, [pc, #380]	; (8007d94 <HAL_DMA_Abort_IT+0x3cc>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d01d      	beq.n	8007c58 <HAL_DMA_Abort_IT+0x290>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a5d      	ldr	r2, [pc, #372]	; (8007d98 <HAL_DMA_Abort_IT+0x3d0>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d018      	beq.n	8007c58 <HAL_DMA_Abort_IT+0x290>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a5c      	ldr	r2, [pc, #368]	; (8007d9c <HAL_DMA_Abort_IT+0x3d4>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d013      	beq.n	8007c58 <HAL_DMA_Abort_IT+0x290>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a5a      	ldr	r2, [pc, #360]	; (8007da0 <HAL_DMA_Abort_IT+0x3d8>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d00e      	beq.n	8007c58 <HAL_DMA_Abort_IT+0x290>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a59      	ldr	r2, [pc, #356]	; (8007da4 <HAL_DMA_Abort_IT+0x3dc>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d009      	beq.n	8007c58 <HAL_DMA_Abort_IT+0x290>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a57      	ldr	r2, [pc, #348]	; (8007da8 <HAL_DMA_Abort_IT+0x3e0>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d004      	beq.n	8007c58 <HAL_DMA_Abort_IT+0x290>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a56      	ldr	r2, [pc, #344]	; (8007dac <HAL_DMA_Abort_IT+0x3e4>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d108      	bne.n	8007c6a <HAL_DMA_Abort_IT+0x2a2>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f022 0201 	bic.w	r2, r2, #1
 8007c66:	601a      	str	r2, [r3, #0]
 8007c68:	e007      	b.n	8007c7a <HAL_DMA_Abort_IT+0x2b2>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f022 0201 	bic.w	r2, r2, #1
 8007c78:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a3c      	ldr	r2, [pc, #240]	; (8007d70 <HAL_DMA_Abort_IT+0x3a8>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d072      	beq.n	8007d6a <HAL_DMA_Abort_IT+0x3a2>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a3a      	ldr	r2, [pc, #232]	; (8007d74 <HAL_DMA_Abort_IT+0x3ac>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d06d      	beq.n	8007d6a <HAL_DMA_Abort_IT+0x3a2>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a39      	ldr	r2, [pc, #228]	; (8007d78 <HAL_DMA_Abort_IT+0x3b0>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d068      	beq.n	8007d6a <HAL_DMA_Abort_IT+0x3a2>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a37      	ldr	r2, [pc, #220]	; (8007d7c <HAL_DMA_Abort_IT+0x3b4>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d063      	beq.n	8007d6a <HAL_DMA_Abort_IT+0x3a2>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a36      	ldr	r2, [pc, #216]	; (8007d80 <HAL_DMA_Abort_IT+0x3b8>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d05e      	beq.n	8007d6a <HAL_DMA_Abort_IT+0x3a2>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a34      	ldr	r2, [pc, #208]	; (8007d84 <HAL_DMA_Abort_IT+0x3bc>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d059      	beq.n	8007d6a <HAL_DMA_Abort_IT+0x3a2>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a33      	ldr	r2, [pc, #204]	; (8007d88 <HAL_DMA_Abort_IT+0x3c0>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d054      	beq.n	8007d6a <HAL_DMA_Abort_IT+0x3a2>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a31      	ldr	r2, [pc, #196]	; (8007d8c <HAL_DMA_Abort_IT+0x3c4>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d04f      	beq.n	8007d6a <HAL_DMA_Abort_IT+0x3a2>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a30      	ldr	r2, [pc, #192]	; (8007d90 <HAL_DMA_Abort_IT+0x3c8>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d04a      	beq.n	8007d6a <HAL_DMA_Abort_IT+0x3a2>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a2e      	ldr	r2, [pc, #184]	; (8007d94 <HAL_DMA_Abort_IT+0x3cc>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d045      	beq.n	8007d6a <HAL_DMA_Abort_IT+0x3a2>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a2d      	ldr	r2, [pc, #180]	; (8007d98 <HAL_DMA_Abort_IT+0x3d0>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d040      	beq.n	8007d6a <HAL_DMA_Abort_IT+0x3a2>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a2b      	ldr	r2, [pc, #172]	; (8007d9c <HAL_DMA_Abort_IT+0x3d4>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d03b      	beq.n	8007d6a <HAL_DMA_Abort_IT+0x3a2>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a2a      	ldr	r2, [pc, #168]	; (8007da0 <HAL_DMA_Abort_IT+0x3d8>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d036      	beq.n	8007d6a <HAL_DMA_Abort_IT+0x3a2>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a28      	ldr	r2, [pc, #160]	; (8007da4 <HAL_DMA_Abort_IT+0x3dc>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d031      	beq.n	8007d6a <HAL_DMA_Abort_IT+0x3a2>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a27      	ldr	r2, [pc, #156]	; (8007da8 <HAL_DMA_Abort_IT+0x3e0>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d02c      	beq.n	8007d6a <HAL_DMA_Abort_IT+0x3a2>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a25      	ldr	r2, [pc, #148]	; (8007dac <HAL_DMA_Abort_IT+0x3e4>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d027      	beq.n	8007d6a <HAL_DMA_Abort_IT+0x3a2>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a24      	ldr	r2, [pc, #144]	; (8007db0 <HAL_DMA_Abort_IT+0x3e8>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d022      	beq.n	8007d6a <HAL_DMA_Abort_IT+0x3a2>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a22      	ldr	r2, [pc, #136]	; (8007db4 <HAL_DMA_Abort_IT+0x3ec>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d01d      	beq.n	8007d6a <HAL_DMA_Abort_IT+0x3a2>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a21      	ldr	r2, [pc, #132]	; (8007db8 <HAL_DMA_Abort_IT+0x3f0>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d018      	beq.n	8007d6a <HAL_DMA_Abort_IT+0x3a2>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a1f      	ldr	r2, [pc, #124]	; (8007dbc <HAL_DMA_Abort_IT+0x3f4>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d013      	beq.n	8007d6a <HAL_DMA_Abort_IT+0x3a2>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a1e      	ldr	r2, [pc, #120]	; (8007dc0 <HAL_DMA_Abort_IT+0x3f8>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d00e      	beq.n	8007d6a <HAL_DMA_Abort_IT+0x3a2>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a1c      	ldr	r2, [pc, #112]	; (8007dc4 <HAL_DMA_Abort_IT+0x3fc>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d009      	beq.n	8007d6a <HAL_DMA_Abort_IT+0x3a2>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a1b      	ldr	r2, [pc, #108]	; (8007dc8 <HAL_DMA_Abort_IT+0x400>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d004      	beq.n	8007d6a <HAL_DMA_Abort_IT+0x3a2>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a19      	ldr	r2, [pc, #100]	; (8007dcc <HAL_DMA_Abort_IT+0x404>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d132      	bne.n	8007dd0 <HAL_DMA_Abort_IT+0x408>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e031      	b.n	8007dd2 <HAL_DMA_Abort_IT+0x40a>
 8007d6e:	bf00      	nop
 8007d70:	40020010 	.word	0x40020010
 8007d74:	40020028 	.word	0x40020028
 8007d78:	40020040 	.word	0x40020040
 8007d7c:	40020058 	.word	0x40020058
 8007d80:	40020070 	.word	0x40020070
 8007d84:	40020088 	.word	0x40020088
 8007d88:	400200a0 	.word	0x400200a0
 8007d8c:	400200b8 	.word	0x400200b8
 8007d90:	40020410 	.word	0x40020410
 8007d94:	40020428 	.word	0x40020428
 8007d98:	40020440 	.word	0x40020440
 8007d9c:	40020458 	.word	0x40020458
 8007da0:	40020470 	.word	0x40020470
 8007da4:	40020488 	.word	0x40020488
 8007da8:	400204a0 	.word	0x400204a0
 8007dac:	400204b8 	.word	0x400204b8
 8007db0:	58025408 	.word	0x58025408
 8007db4:	5802541c 	.word	0x5802541c
 8007db8:	58025430 	.word	0x58025430
 8007dbc:	58025444 	.word	0x58025444
 8007dc0:	58025458 	.word	0x58025458
 8007dc4:	5802546c 	.word	0x5802546c
 8007dc8:	58025480 	.word	0x58025480
 8007dcc:	58025494 	.word	0x58025494
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d028      	beq.n	8007e28 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007de0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007de4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dea:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007df0:	f003 031f 	and.w	r3, r3, #31
 8007df4:	2201      	movs	r2, #1
 8007df6:	409a      	lsls	r2, r3
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007e04:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00c      	beq.n	8007e28 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e1c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007e26:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d003      	beq.n	8007e48 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop

08007e54 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b08a      	sub	sp, #40	; 0x28
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007e60:	4b67      	ldr	r3, [pc, #412]	; (8008000 <HAL_DMA_IRQHandler+0x1ac>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a67      	ldr	r2, [pc, #412]	; (8008004 <HAL_DMA_IRQHandler+0x1b0>)
 8007e66:	fba2 2303 	umull	r2, r3, r2, r3
 8007e6a:	0a9b      	lsrs	r3, r3, #10
 8007e6c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e72:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e78:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007e7a:	6a3b      	ldr	r3, [r7, #32]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a5f      	ldr	r2, [pc, #380]	; (8008008 <HAL_DMA_IRQHandler+0x1b4>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d04a      	beq.n	8007f26 <HAL_DMA_IRQHandler+0xd2>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a5d      	ldr	r2, [pc, #372]	; (800800c <HAL_DMA_IRQHandler+0x1b8>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d045      	beq.n	8007f26 <HAL_DMA_IRQHandler+0xd2>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a5c      	ldr	r2, [pc, #368]	; (8008010 <HAL_DMA_IRQHandler+0x1bc>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d040      	beq.n	8007f26 <HAL_DMA_IRQHandler+0xd2>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a5a      	ldr	r2, [pc, #360]	; (8008014 <HAL_DMA_IRQHandler+0x1c0>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d03b      	beq.n	8007f26 <HAL_DMA_IRQHandler+0xd2>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a59      	ldr	r2, [pc, #356]	; (8008018 <HAL_DMA_IRQHandler+0x1c4>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d036      	beq.n	8007f26 <HAL_DMA_IRQHandler+0xd2>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a57      	ldr	r2, [pc, #348]	; (800801c <HAL_DMA_IRQHandler+0x1c8>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d031      	beq.n	8007f26 <HAL_DMA_IRQHandler+0xd2>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a56      	ldr	r2, [pc, #344]	; (8008020 <HAL_DMA_IRQHandler+0x1cc>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d02c      	beq.n	8007f26 <HAL_DMA_IRQHandler+0xd2>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a54      	ldr	r2, [pc, #336]	; (8008024 <HAL_DMA_IRQHandler+0x1d0>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d027      	beq.n	8007f26 <HAL_DMA_IRQHandler+0xd2>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a53      	ldr	r2, [pc, #332]	; (8008028 <HAL_DMA_IRQHandler+0x1d4>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d022      	beq.n	8007f26 <HAL_DMA_IRQHandler+0xd2>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a51      	ldr	r2, [pc, #324]	; (800802c <HAL_DMA_IRQHandler+0x1d8>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d01d      	beq.n	8007f26 <HAL_DMA_IRQHandler+0xd2>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a50      	ldr	r2, [pc, #320]	; (8008030 <HAL_DMA_IRQHandler+0x1dc>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d018      	beq.n	8007f26 <HAL_DMA_IRQHandler+0xd2>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a4e      	ldr	r2, [pc, #312]	; (8008034 <HAL_DMA_IRQHandler+0x1e0>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d013      	beq.n	8007f26 <HAL_DMA_IRQHandler+0xd2>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a4d      	ldr	r2, [pc, #308]	; (8008038 <HAL_DMA_IRQHandler+0x1e4>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d00e      	beq.n	8007f26 <HAL_DMA_IRQHandler+0xd2>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a4b      	ldr	r2, [pc, #300]	; (800803c <HAL_DMA_IRQHandler+0x1e8>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d009      	beq.n	8007f26 <HAL_DMA_IRQHandler+0xd2>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a4a      	ldr	r2, [pc, #296]	; (8008040 <HAL_DMA_IRQHandler+0x1ec>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d004      	beq.n	8007f26 <HAL_DMA_IRQHandler+0xd2>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a48      	ldr	r2, [pc, #288]	; (8008044 <HAL_DMA_IRQHandler+0x1f0>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d101      	bne.n	8007f2a <HAL_DMA_IRQHandler+0xd6>
 8007f26:	2301      	movs	r3, #1
 8007f28:	e000      	b.n	8007f2c <HAL_DMA_IRQHandler+0xd8>
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	f000 842b 	beq.w	8008788 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f36:	f003 031f 	and.w	r3, r3, #31
 8007f3a:	2208      	movs	r2, #8
 8007f3c:	409a      	lsls	r2, r3
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	4013      	ands	r3, r2
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	f000 80a2 	beq.w	800808c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a2e      	ldr	r2, [pc, #184]	; (8008008 <HAL_DMA_IRQHandler+0x1b4>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d04a      	beq.n	8007fe8 <HAL_DMA_IRQHandler+0x194>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a2d      	ldr	r2, [pc, #180]	; (800800c <HAL_DMA_IRQHandler+0x1b8>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d045      	beq.n	8007fe8 <HAL_DMA_IRQHandler+0x194>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a2b      	ldr	r2, [pc, #172]	; (8008010 <HAL_DMA_IRQHandler+0x1bc>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d040      	beq.n	8007fe8 <HAL_DMA_IRQHandler+0x194>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a2a      	ldr	r2, [pc, #168]	; (8008014 <HAL_DMA_IRQHandler+0x1c0>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d03b      	beq.n	8007fe8 <HAL_DMA_IRQHandler+0x194>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a28      	ldr	r2, [pc, #160]	; (8008018 <HAL_DMA_IRQHandler+0x1c4>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d036      	beq.n	8007fe8 <HAL_DMA_IRQHandler+0x194>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a27      	ldr	r2, [pc, #156]	; (800801c <HAL_DMA_IRQHandler+0x1c8>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d031      	beq.n	8007fe8 <HAL_DMA_IRQHandler+0x194>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a25      	ldr	r2, [pc, #148]	; (8008020 <HAL_DMA_IRQHandler+0x1cc>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d02c      	beq.n	8007fe8 <HAL_DMA_IRQHandler+0x194>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a24      	ldr	r2, [pc, #144]	; (8008024 <HAL_DMA_IRQHandler+0x1d0>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d027      	beq.n	8007fe8 <HAL_DMA_IRQHandler+0x194>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a22      	ldr	r2, [pc, #136]	; (8008028 <HAL_DMA_IRQHandler+0x1d4>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d022      	beq.n	8007fe8 <HAL_DMA_IRQHandler+0x194>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a21      	ldr	r2, [pc, #132]	; (800802c <HAL_DMA_IRQHandler+0x1d8>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d01d      	beq.n	8007fe8 <HAL_DMA_IRQHandler+0x194>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a1f      	ldr	r2, [pc, #124]	; (8008030 <HAL_DMA_IRQHandler+0x1dc>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d018      	beq.n	8007fe8 <HAL_DMA_IRQHandler+0x194>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a1e      	ldr	r2, [pc, #120]	; (8008034 <HAL_DMA_IRQHandler+0x1e0>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d013      	beq.n	8007fe8 <HAL_DMA_IRQHandler+0x194>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a1c      	ldr	r2, [pc, #112]	; (8008038 <HAL_DMA_IRQHandler+0x1e4>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d00e      	beq.n	8007fe8 <HAL_DMA_IRQHandler+0x194>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a1b      	ldr	r2, [pc, #108]	; (800803c <HAL_DMA_IRQHandler+0x1e8>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d009      	beq.n	8007fe8 <HAL_DMA_IRQHandler+0x194>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a19      	ldr	r2, [pc, #100]	; (8008040 <HAL_DMA_IRQHandler+0x1ec>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d004      	beq.n	8007fe8 <HAL_DMA_IRQHandler+0x194>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a18      	ldr	r2, [pc, #96]	; (8008044 <HAL_DMA_IRQHandler+0x1f0>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d12f      	bne.n	8008048 <HAL_DMA_IRQHandler+0x1f4>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f003 0304 	and.w	r3, r3, #4
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	bf14      	ite	ne
 8007ff6:	2301      	movne	r3, #1
 8007ff8:	2300      	moveq	r3, #0
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	e02e      	b.n	800805c <HAL_DMA_IRQHandler+0x208>
 8007ffe:	bf00      	nop
 8008000:	24000054 	.word	0x24000054
 8008004:	1b4e81b5 	.word	0x1b4e81b5
 8008008:	40020010 	.word	0x40020010
 800800c:	40020028 	.word	0x40020028
 8008010:	40020040 	.word	0x40020040
 8008014:	40020058 	.word	0x40020058
 8008018:	40020070 	.word	0x40020070
 800801c:	40020088 	.word	0x40020088
 8008020:	400200a0 	.word	0x400200a0
 8008024:	400200b8 	.word	0x400200b8
 8008028:	40020410 	.word	0x40020410
 800802c:	40020428 	.word	0x40020428
 8008030:	40020440 	.word	0x40020440
 8008034:	40020458 	.word	0x40020458
 8008038:	40020470 	.word	0x40020470
 800803c:	40020488 	.word	0x40020488
 8008040:	400204a0 	.word	0x400204a0
 8008044:	400204b8 	.word	0x400204b8
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 0308 	and.w	r3, r3, #8
 8008052:	2b00      	cmp	r3, #0
 8008054:	bf14      	ite	ne
 8008056:	2301      	movne	r3, #1
 8008058:	2300      	moveq	r3, #0
 800805a:	b2db      	uxtb	r3, r3
 800805c:	2b00      	cmp	r3, #0
 800805e:	d015      	beq.n	800808c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f022 0204 	bic.w	r2, r2, #4
 800806e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008074:	f003 031f 	and.w	r3, r3, #31
 8008078:	2208      	movs	r2, #8
 800807a:	409a      	lsls	r2, r3
 800807c:	6a3b      	ldr	r3, [r7, #32]
 800807e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008084:	f043 0201 	orr.w	r2, r3, #1
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008090:	f003 031f 	and.w	r3, r3, #31
 8008094:	69ba      	ldr	r2, [r7, #24]
 8008096:	fa22 f303 	lsr.w	r3, r2, r3
 800809a:	f003 0301 	and.w	r3, r3, #1
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d06e      	beq.n	8008180 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a69      	ldr	r2, [pc, #420]	; (800824c <HAL_DMA_IRQHandler+0x3f8>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d04a      	beq.n	8008142 <HAL_DMA_IRQHandler+0x2ee>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a67      	ldr	r2, [pc, #412]	; (8008250 <HAL_DMA_IRQHandler+0x3fc>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d045      	beq.n	8008142 <HAL_DMA_IRQHandler+0x2ee>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a66      	ldr	r2, [pc, #408]	; (8008254 <HAL_DMA_IRQHandler+0x400>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d040      	beq.n	8008142 <HAL_DMA_IRQHandler+0x2ee>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a64      	ldr	r2, [pc, #400]	; (8008258 <HAL_DMA_IRQHandler+0x404>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d03b      	beq.n	8008142 <HAL_DMA_IRQHandler+0x2ee>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a63      	ldr	r2, [pc, #396]	; (800825c <HAL_DMA_IRQHandler+0x408>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d036      	beq.n	8008142 <HAL_DMA_IRQHandler+0x2ee>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a61      	ldr	r2, [pc, #388]	; (8008260 <HAL_DMA_IRQHandler+0x40c>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d031      	beq.n	8008142 <HAL_DMA_IRQHandler+0x2ee>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a60      	ldr	r2, [pc, #384]	; (8008264 <HAL_DMA_IRQHandler+0x410>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d02c      	beq.n	8008142 <HAL_DMA_IRQHandler+0x2ee>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a5e      	ldr	r2, [pc, #376]	; (8008268 <HAL_DMA_IRQHandler+0x414>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d027      	beq.n	8008142 <HAL_DMA_IRQHandler+0x2ee>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a5d      	ldr	r2, [pc, #372]	; (800826c <HAL_DMA_IRQHandler+0x418>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d022      	beq.n	8008142 <HAL_DMA_IRQHandler+0x2ee>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a5b      	ldr	r2, [pc, #364]	; (8008270 <HAL_DMA_IRQHandler+0x41c>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d01d      	beq.n	8008142 <HAL_DMA_IRQHandler+0x2ee>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a5a      	ldr	r2, [pc, #360]	; (8008274 <HAL_DMA_IRQHandler+0x420>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d018      	beq.n	8008142 <HAL_DMA_IRQHandler+0x2ee>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a58      	ldr	r2, [pc, #352]	; (8008278 <HAL_DMA_IRQHandler+0x424>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d013      	beq.n	8008142 <HAL_DMA_IRQHandler+0x2ee>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a57      	ldr	r2, [pc, #348]	; (800827c <HAL_DMA_IRQHandler+0x428>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d00e      	beq.n	8008142 <HAL_DMA_IRQHandler+0x2ee>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a55      	ldr	r2, [pc, #340]	; (8008280 <HAL_DMA_IRQHandler+0x42c>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d009      	beq.n	8008142 <HAL_DMA_IRQHandler+0x2ee>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a54      	ldr	r2, [pc, #336]	; (8008284 <HAL_DMA_IRQHandler+0x430>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d004      	beq.n	8008142 <HAL_DMA_IRQHandler+0x2ee>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a52      	ldr	r2, [pc, #328]	; (8008288 <HAL_DMA_IRQHandler+0x434>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d10a      	bne.n	8008158 <HAL_DMA_IRQHandler+0x304>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	695b      	ldr	r3, [r3, #20]
 8008148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800814c:	2b00      	cmp	r3, #0
 800814e:	bf14      	ite	ne
 8008150:	2301      	movne	r3, #1
 8008152:	2300      	moveq	r3, #0
 8008154:	b2db      	uxtb	r3, r3
 8008156:	e003      	b.n	8008160 <HAL_DMA_IRQHandler+0x30c>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2300      	movs	r3, #0
 8008160:	2b00      	cmp	r3, #0
 8008162:	d00d      	beq.n	8008180 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008168:	f003 031f 	and.w	r3, r3, #31
 800816c:	2201      	movs	r2, #1
 800816e:	409a      	lsls	r2, r3
 8008170:	6a3b      	ldr	r3, [r7, #32]
 8008172:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008178:	f043 0202 	orr.w	r2, r3, #2
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008184:	f003 031f 	and.w	r3, r3, #31
 8008188:	2204      	movs	r2, #4
 800818a:	409a      	lsls	r2, r3
 800818c:	69bb      	ldr	r3, [r7, #24]
 800818e:	4013      	ands	r3, r2
 8008190:	2b00      	cmp	r3, #0
 8008192:	f000 808f 	beq.w	80082b4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a2c      	ldr	r2, [pc, #176]	; (800824c <HAL_DMA_IRQHandler+0x3f8>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d04a      	beq.n	8008236 <HAL_DMA_IRQHandler+0x3e2>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a2a      	ldr	r2, [pc, #168]	; (8008250 <HAL_DMA_IRQHandler+0x3fc>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d045      	beq.n	8008236 <HAL_DMA_IRQHandler+0x3e2>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a29      	ldr	r2, [pc, #164]	; (8008254 <HAL_DMA_IRQHandler+0x400>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d040      	beq.n	8008236 <HAL_DMA_IRQHandler+0x3e2>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a27      	ldr	r2, [pc, #156]	; (8008258 <HAL_DMA_IRQHandler+0x404>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d03b      	beq.n	8008236 <HAL_DMA_IRQHandler+0x3e2>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a26      	ldr	r2, [pc, #152]	; (800825c <HAL_DMA_IRQHandler+0x408>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d036      	beq.n	8008236 <HAL_DMA_IRQHandler+0x3e2>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a24      	ldr	r2, [pc, #144]	; (8008260 <HAL_DMA_IRQHandler+0x40c>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d031      	beq.n	8008236 <HAL_DMA_IRQHandler+0x3e2>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a23      	ldr	r2, [pc, #140]	; (8008264 <HAL_DMA_IRQHandler+0x410>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d02c      	beq.n	8008236 <HAL_DMA_IRQHandler+0x3e2>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a21      	ldr	r2, [pc, #132]	; (8008268 <HAL_DMA_IRQHandler+0x414>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d027      	beq.n	8008236 <HAL_DMA_IRQHandler+0x3e2>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a20      	ldr	r2, [pc, #128]	; (800826c <HAL_DMA_IRQHandler+0x418>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d022      	beq.n	8008236 <HAL_DMA_IRQHandler+0x3e2>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a1e      	ldr	r2, [pc, #120]	; (8008270 <HAL_DMA_IRQHandler+0x41c>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d01d      	beq.n	8008236 <HAL_DMA_IRQHandler+0x3e2>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a1d      	ldr	r2, [pc, #116]	; (8008274 <HAL_DMA_IRQHandler+0x420>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d018      	beq.n	8008236 <HAL_DMA_IRQHandler+0x3e2>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a1b      	ldr	r2, [pc, #108]	; (8008278 <HAL_DMA_IRQHandler+0x424>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d013      	beq.n	8008236 <HAL_DMA_IRQHandler+0x3e2>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a1a      	ldr	r2, [pc, #104]	; (800827c <HAL_DMA_IRQHandler+0x428>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d00e      	beq.n	8008236 <HAL_DMA_IRQHandler+0x3e2>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a18      	ldr	r2, [pc, #96]	; (8008280 <HAL_DMA_IRQHandler+0x42c>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d009      	beq.n	8008236 <HAL_DMA_IRQHandler+0x3e2>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a17      	ldr	r2, [pc, #92]	; (8008284 <HAL_DMA_IRQHandler+0x430>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d004      	beq.n	8008236 <HAL_DMA_IRQHandler+0x3e2>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a15      	ldr	r2, [pc, #84]	; (8008288 <HAL_DMA_IRQHandler+0x434>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d12a      	bne.n	800828c <HAL_DMA_IRQHandler+0x438>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 0302 	and.w	r3, r3, #2
 8008240:	2b00      	cmp	r3, #0
 8008242:	bf14      	ite	ne
 8008244:	2301      	movne	r3, #1
 8008246:	2300      	moveq	r3, #0
 8008248:	b2db      	uxtb	r3, r3
 800824a:	e023      	b.n	8008294 <HAL_DMA_IRQHandler+0x440>
 800824c:	40020010 	.word	0x40020010
 8008250:	40020028 	.word	0x40020028
 8008254:	40020040 	.word	0x40020040
 8008258:	40020058 	.word	0x40020058
 800825c:	40020070 	.word	0x40020070
 8008260:	40020088 	.word	0x40020088
 8008264:	400200a0 	.word	0x400200a0
 8008268:	400200b8 	.word	0x400200b8
 800826c:	40020410 	.word	0x40020410
 8008270:	40020428 	.word	0x40020428
 8008274:	40020440 	.word	0x40020440
 8008278:	40020458 	.word	0x40020458
 800827c:	40020470 	.word	0x40020470
 8008280:	40020488 	.word	0x40020488
 8008284:	400204a0 	.word	0x400204a0
 8008288:	400204b8 	.word	0x400204b8
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	2300      	movs	r3, #0
 8008294:	2b00      	cmp	r3, #0
 8008296:	d00d      	beq.n	80082b4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800829c:	f003 031f 	and.w	r3, r3, #31
 80082a0:	2204      	movs	r2, #4
 80082a2:	409a      	lsls	r2, r3
 80082a4:	6a3b      	ldr	r3, [r7, #32]
 80082a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082ac:	f043 0204 	orr.w	r2, r3, #4
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082b8:	f003 031f 	and.w	r3, r3, #31
 80082bc:	2210      	movs	r2, #16
 80082be:	409a      	lsls	r2, r3
 80082c0:	69bb      	ldr	r3, [r7, #24]
 80082c2:	4013      	ands	r3, r2
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	f000 80a6 	beq.w	8008416 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a85      	ldr	r2, [pc, #532]	; (80084e4 <HAL_DMA_IRQHandler+0x690>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d04a      	beq.n	800836a <HAL_DMA_IRQHandler+0x516>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a83      	ldr	r2, [pc, #524]	; (80084e8 <HAL_DMA_IRQHandler+0x694>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d045      	beq.n	800836a <HAL_DMA_IRQHandler+0x516>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a82      	ldr	r2, [pc, #520]	; (80084ec <HAL_DMA_IRQHandler+0x698>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d040      	beq.n	800836a <HAL_DMA_IRQHandler+0x516>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a80      	ldr	r2, [pc, #512]	; (80084f0 <HAL_DMA_IRQHandler+0x69c>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d03b      	beq.n	800836a <HAL_DMA_IRQHandler+0x516>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a7f      	ldr	r2, [pc, #508]	; (80084f4 <HAL_DMA_IRQHandler+0x6a0>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d036      	beq.n	800836a <HAL_DMA_IRQHandler+0x516>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a7d      	ldr	r2, [pc, #500]	; (80084f8 <HAL_DMA_IRQHandler+0x6a4>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d031      	beq.n	800836a <HAL_DMA_IRQHandler+0x516>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a7c      	ldr	r2, [pc, #496]	; (80084fc <HAL_DMA_IRQHandler+0x6a8>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d02c      	beq.n	800836a <HAL_DMA_IRQHandler+0x516>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a7a      	ldr	r2, [pc, #488]	; (8008500 <HAL_DMA_IRQHandler+0x6ac>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d027      	beq.n	800836a <HAL_DMA_IRQHandler+0x516>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a79      	ldr	r2, [pc, #484]	; (8008504 <HAL_DMA_IRQHandler+0x6b0>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d022      	beq.n	800836a <HAL_DMA_IRQHandler+0x516>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a77      	ldr	r2, [pc, #476]	; (8008508 <HAL_DMA_IRQHandler+0x6b4>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d01d      	beq.n	800836a <HAL_DMA_IRQHandler+0x516>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a76      	ldr	r2, [pc, #472]	; (800850c <HAL_DMA_IRQHandler+0x6b8>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d018      	beq.n	800836a <HAL_DMA_IRQHandler+0x516>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a74      	ldr	r2, [pc, #464]	; (8008510 <HAL_DMA_IRQHandler+0x6bc>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d013      	beq.n	800836a <HAL_DMA_IRQHandler+0x516>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a73      	ldr	r2, [pc, #460]	; (8008514 <HAL_DMA_IRQHandler+0x6c0>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d00e      	beq.n	800836a <HAL_DMA_IRQHandler+0x516>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a71      	ldr	r2, [pc, #452]	; (8008518 <HAL_DMA_IRQHandler+0x6c4>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d009      	beq.n	800836a <HAL_DMA_IRQHandler+0x516>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a70      	ldr	r2, [pc, #448]	; (800851c <HAL_DMA_IRQHandler+0x6c8>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d004      	beq.n	800836a <HAL_DMA_IRQHandler+0x516>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a6e      	ldr	r2, [pc, #440]	; (8008520 <HAL_DMA_IRQHandler+0x6cc>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d10a      	bne.n	8008380 <HAL_DMA_IRQHandler+0x52c>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f003 0308 	and.w	r3, r3, #8
 8008374:	2b00      	cmp	r3, #0
 8008376:	bf14      	ite	ne
 8008378:	2301      	movne	r3, #1
 800837a:	2300      	moveq	r3, #0
 800837c:	b2db      	uxtb	r3, r3
 800837e:	e009      	b.n	8008394 <HAL_DMA_IRQHandler+0x540>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f003 0304 	and.w	r3, r3, #4
 800838a:	2b00      	cmp	r3, #0
 800838c:	bf14      	ite	ne
 800838e:	2301      	movne	r3, #1
 8008390:	2300      	moveq	r3, #0
 8008392:	b2db      	uxtb	r3, r3
 8008394:	2b00      	cmp	r3, #0
 8008396:	d03e      	beq.n	8008416 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800839c:	f003 031f 	and.w	r3, r3, #31
 80083a0:	2210      	movs	r2, #16
 80083a2:	409a      	lsls	r2, r3
 80083a4:	6a3b      	ldr	r3, [r7, #32]
 80083a6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d018      	beq.n	80083e8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d108      	bne.n	80083d6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d024      	beq.n	8008416 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	4798      	blx	r3
 80083d4:	e01f      	b.n	8008416 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d01b      	beq.n	8008416 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	4798      	blx	r3
 80083e6:	e016      	b.n	8008416 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d107      	bne.n	8008406 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f022 0208 	bic.w	r2, r2, #8
 8008404:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800840a:	2b00      	cmp	r3, #0
 800840c:	d003      	beq.n	8008416 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800841a:	f003 031f 	and.w	r3, r3, #31
 800841e:	2220      	movs	r2, #32
 8008420:	409a      	lsls	r2, r3
 8008422:	69bb      	ldr	r3, [r7, #24]
 8008424:	4013      	ands	r3, r2
 8008426:	2b00      	cmp	r3, #0
 8008428:	f000 8110 	beq.w	800864c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a2c      	ldr	r2, [pc, #176]	; (80084e4 <HAL_DMA_IRQHandler+0x690>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d04a      	beq.n	80084cc <HAL_DMA_IRQHandler+0x678>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a2b      	ldr	r2, [pc, #172]	; (80084e8 <HAL_DMA_IRQHandler+0x694>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d045      	beq.n	80084cc <HAL_DMA_IRQHandler+0x678>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a29      	ldr	r2, [pc, #164]	; (80084ec <HAL_DMA_IRQHandler+0x698>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d040      	beq.n	80084cc <HAL_DMA_IRQHandler+0x678>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a28      	ldr	r2, [pc, #160]	; (80084f0 <HAL_DMA_IRQHandler+0x69c>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d03b      	beq.n	80084cc <HAL_DMA_IRQHandler+0x678>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a26      	ldr	r2, [pc, #152]	; (80084f4 <HAL_DMA_IRQHandler+0x6a0>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d036      	beq.n	80084cc <HAL_DMA_IRQHandler+0x678>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a25      	ldr	r2, [pc, #148]	; (80084f8 <HAL_DMA_IRQHandler+0x6a4>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d031      	beq.n	80084cc <HAL_DMA_IRQHandler+0x678>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a23      	ldr	r2, [pc, #140]	; (80084fc <HAL_DMA_IRQHandler+0x6a8>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d02c      	beq.n	80084cc <HAL_DMA_IRQHandler+0x678>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a22      	ldr	r2, [pc, #136]	; (8008500 <HAL_DMA_IRQHandler+0x6ac>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d027      	beq.n	80084cc <HAL_DMA_IRQHandler+0x678>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a20      	ldr	r2, [pc, #128]	; (8008504 <HAL_DMA_IRQHandler+0x6b0>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d022      	beq.n	80084cc <HAL_DMA_IRQHandler+0x678>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a1f      	ldr	r2, [pc, #124]	; (8008508 <HAL_DMA_IRQHandler+0x6b4>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d01d      	beq.n	80084cc <HAL_DMA_IRQHandler+0x678>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a1d      	ldr	r2, [pc, #116]	; (800850c <HAL_DMA_IRQHandler+0x6b8>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d018      	beq.n	80084cc <HAL_DMA_IRQHandler+0x678>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a1c      	ldr	r2, [pc, #112]	; (8008510 <HAL_DMA_IRQHandler+0x6bc>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d013      	beq.n	80084cc <HAL_DMA_IRQHandler+0x678>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a1a      	ldr	r2, [pc, #104]	; (8008514 <HAL_DMA_IRQHandler+0x6c0>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d00e      	beq.n	80084cc <HAL_DMA_IRQHandler+0x678>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a19      	ldr	r2, [pc, #100]	; (8008518 <HAL_DMA_IRQHandler+0x6c4>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d009      	beq.n	80084cc <HAL_DMA_IRQHandler+0x678>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a17      	ldr	r2, [pc, #92]	; (800851c <HAL_DMA_IRQHandler+0x6c8>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d004      	beq.n	80084cc <HAL_DMA_IRQHandler+0x678>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a16      	ldr	r2, [pc, #88]	; (8008520 <HAL_DMA_IRQHandler+0x6cc>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d12b      	bne.n	8008524 <HAL_DMA_IRQHandler+0x6d0>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f003 0310 	and.w	r3, r3, #16
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	bf14      	ite	ne
 80084da:	2301      	movne	r3, #1
 80084dc:	2300      	moveq	r3, #0
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	e02a      	b.n	8008538 <HAL_DMA_IRQHandler+0x6e4>
 80084e2:	bf00      	nop
 80084e4:	40020010 	.word	0x40020010
 80084e8:	40020028 	.word	0x40020028
 80084ec:	40020040 	.word	0x40020040
 80084f0:	40020058 	.word	0x40020058
 80084f4:	40020070 	.word	0x40020070
 80084f8:	40020088 	.word	0x40020088
 80084fc:	400200a0 	.word	0x400200a0
 8008500:	400200b8 	.word	0x400200b8
 8008504:	40020410 	.word	0x40020410
 8008508:	40020428 	.word	0x40020428
 800850c:	40020440 	.word	0x40020440
 8008510:	40020458 	.word	0x40020458
 8008514:	40020470 	.word	0x40020470
 8008518:	40020488 	.word	0x40020488
 800851c:	400204a0 	.word	0x400204a0
 8008520:	400204b8 	.word	0x400204b8
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f003 0302 	and.w	r3, r3, #2
 800852e:	2b00      	cmp	r3, #0
 8008530:	bf14      	ite	ne
 8008532:	2301      	movne	r3, #1
 8008534:	2300      	moveq	r3, #0
 8008536:	b2db      	uxtb	r3, r3
 8008538:	2b00      	cmp	r3, #0
 800853a:	f000 8087 	beq.w	800864c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008542:	f003 031f 	and.w	r3, r3, #31
 8008546:	2220      	movs	r2, #32
 8008548:	409a      	lsls	r2, r3
 800854a:	6a3b      	ldr	r3, [r7, #32]
 800854c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008554:	b2db      	uxtb	r3, r3
 8008556:	2b04      	cmp	r3, #4
 8008558:	d139      	bne.n	80085ce <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f022 0216 	bic.w	r2, r2, #22
 8008568:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	695a      	ldr	r2, [r3, #20]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008578:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800857e:	2b00      	cmp	r3, #0
 8008580:	d103      	bne.n	800858a <HAL_DMA_IRQHandler+0x736>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008586:	2b00      	cmp	r3, #0
 8008588:	d007      	beq.n	800859a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f022 0208 	bic.w	r2, r2, #8
 8008598:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800859e:	f003 031f 	and.w	r3, r3, #31
 80085a2:	223f      	movs	r2, #63	; 0x3f
 80085a4:	409a      	lsls	r2, r3
 80085a6:	6a3b      	ldr	r3, [r7, #32]
 80085a8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2201      	movs	r2, #1
 80085ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085be:	2b00      	cmp	r3, #0
 80085c0:	f000 834a 	beq.w	8008c58 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	4798      	blx	r3
          }
          return;
 80085cc:	e344      	b.n	8008c58 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d018      	beq.n	800860e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d108      	bne.n	80085fc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d02c      	beq.n	800864c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	4798      	blx	r3
 80085fa:	e027      	b.n	800864c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008600:	2b00      	cmp	r3, #0
 8008602:	d023      	beq.n	800864c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	4798      	blx	r3
 800860c:	e01e      	b.n	800864c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008618:	2b00      	cmp	r3, #0
 800861a:	d10f      	bne.n	800863c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f022 0210 	bic.w	r2, r2, #16
 800862a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2201      	movs	r2, #1
 8008630:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008640:	2b00      	cmp	r3, #0
 8008642:	d003      	beq.n	800864c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008650:	2b00      	cmp	r3, #0
 8008652:	f000 8306 	beq.w	8008c62 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800865a:	f003 0301 	and.w	r3, r3, #1
 800865e:	2b00      	cmp	r3, #0
 8008660:	f000 8088 	beq.w	8008774 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2204      	movs	r2, #4
 8008668:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a7a      	ldr	r2, [pc, #488]	; (800885c <HAL_DMA_IRQHandler+0xa08>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d04a      	beq.n	800870c <HAL_DMA_IRQHandler+0x8b8>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a79      	ldr	r2, [pc, #484]	; (8008860 <HAL_DMA_IRQHandler+0xa0c>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d045      	beq.n	800870c <HAL_DMA_IRQHandler+0x8b8>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a77      	ldr	r2, [pc, #476]	; (8008864 <HAL_DMA_IRQHandler+0xa10>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d040      	beq.n	800870c <HAL_DMA_IRQHandler+0x8b8>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a76      	ldr	r2, [pc, #472]	; (8008868 <HAL_DMA_IRQHandler+0xa14>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d03b      	beq.n	800870c <HAL_DMA_IRQHandler+0x8b8>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a74      	ldr	r2, [pc, #464]	; (800886c <HAL_DMA_IRQHandler+0xa18>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d036      	beq.n	800870c <HAL_DMA_IRQHandler+0x8b8>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a73      	ldr	r2, [pc, #460]	; (8008870 <HAL_DMA_IRQHandler+0xa1c>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d031      	beq.n	800870c <HAL_DMA_IRQHandler+0x8b8>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a71      	ldr	r2, [pc, #452]	; (8008874 <HAL_DMA_IRQHandler+0xa20>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d02c      	beq.n	800870c <HAL_DMA_IRQHandler+0x8b8>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a70      	ldr	r2, [pc, #448]	; (8008878 <HAL_DMA_IRQHandler+0xa24>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d027      	beq.n	800870c <HAL_DMA_IRQHandler+0x8b8>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a6e      	ldr	r2, [pc, #440]	; (800887c <HAL_DMA_IRQHandler+0xa28>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d022      	beq.n	800870c <HAL_DMA_IRQHandler+0x8b8>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a6d      	ldr	r2, [pc, #436]	; (8008880 <HAL_DMA_IRQHandler+0xa2c>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d01d      	beq.n	800870c <HAL_DMA_IRQHandler+0x8b8>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a6b      	ldr	r2, [pc, #428]	; (8008884 <HAL_DMA_IRQHandler+0xa30>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d018      	beq.n	800870c <HAL_DMA_IRQHandler+0x8b8>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a6a      	ldr	r2, [pc, #424]	; (8008888 <HAL_DMA_IRQHandler+0xa34>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d013      	beq.n	800870c <HAL_DMA_IRQHandler+0x8b8>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a68      	ldr	r2, [pc, #416]	; (800888c <HAL_DMA_IRQHandler+0xa38>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d00e      	beq.n	800870c <HAL_DMA_IRQHandler+0x8b8>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a67      	ldr	r2, [pc, #412]	; (8008890 <HAL_DMA_IRQHandler+0xa3c>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d009      	beq.n	800870c <HAL_DMA_IRQHandler+0x8b8>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a65      	ldr	r2, [pc, #404]	; (8008894 <HAL_DMA_IRQHandler+0xa40>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d004      	beq.n	800870c <HAL_DMA_IRQHandler+0x8b8>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a64      	ldr	r2, [pc, #400]	; (8008898 <HAL_DMA_IRQHandler+0xa44>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d108      	bne.n	800871e <HAL_DMA_IRQHandler+0x8ca>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f022 0201 	bic.w	r2, r2, #1
 800871a:	601a      	str	r2, [r3, #0]
 800871c:	e007      	b.n	800872e <HAL_DMA_IRQHandler+0x8da>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f022 0201 	bic.w	r2, r2, #1
 800872c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	3301      	adds	r3, #1
 8008732:	60fb      	str	r3, [r7, #12]
 8008734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008736:	429a      	cmp	r2, r3
 8008738:	d307      	bcc.n	800874a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f003 0301 	and.w	r3, r3, #1
 8008744:	2b00      	cmp	r3, #0
 8008746:	d1f2      	bne.n	800872e <HAL_DMA_IRQHandler+0x8da>
 8008748:	e000      	b.n	800874c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800874a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f003 0301 	and.w	r3, r3, #1
 8008756:	2b00      	cmp	r3, #0
 8008758:	d004      	beq.n	8008764 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2203      	movs	r2, #3
 800875e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8008762:	e003      	b.n	800876c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2201      	movs	r2, #1
 8008768:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2200      	movs	r2, #0
 8008770:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008778:	2b00      	cmp	r3, #0
 800877a:	f000 8272 	beq.w	8008c62 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	4798      	blx	r3
 8008786:	e26c      	b.n	8008c62 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a43      	ldr	r2, [pc, #268]	; (800889c <HAL_DMA_IRQHandler+0xa48>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d022      	beq.n	80087d8 <HAL_DMA_IRQHandler+0x984>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a42      	ldr	r2, [pc, #264]	; (80088a0 <HAL_DMA_IRQHandler+0xa4c>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d01d      	beq.n	80087d8 <HAL_DMA_IRQHandler+0x984>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a40      	ldr	r2, [pc, #256]	; (80088a4 <HAL_DMA_IRQHandler+0xa50>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d018      	beq.n	80087d8 <HAL_DMA_IRQHandler+0x984>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a3f      	ldr	r2, [pc, #252]	; (80088a8 <HAL_DMA_IRQHandler+0xa54>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d013      	beq.n	80087d8 <HAL_DMA_IRQHandler+0x984>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a3d      	ldr	r2, [pc, #244]	; (80088ac <HAL_DMA_IRQHandler+0xa58>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d00e      	beq.n	80087d8 <HAL_DMA_IRQHandler+0x984>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a3c      	ldr	r2, [pc, #240]	; (80088b0 <HAL_DMA_IRQHandler+0xa5c>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d009      	beq.n	80087d8 <HAL_DMA_IRQHandler+0x984>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a3a      	ldr	r2, [pc, #232]	; (80088b4 <HAL_DMA_IRQHandler+0xa60>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d004      	beq.n	80087d8 <HAL_DMA_IRQHandler+0x984>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a39      	ldr	r2, [pc, #228]	; (80088b8 <HAL_DMA_IRQHandler+0xa64>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d101      	bne.n	80087dc <HAL_DMA_IRQHandler+0x988>
 80087d8:	2301      	movs	r3, #1
 80087da:	e000      	b.n	80087de <HAL_DMA_IRQHandler+0x98a>
 80087dc:	2300      	movs	r3, #0
 80087de:	2b00      	cmp	r3, #0
 80087e0:	f000 823f 	beq.w	8008c62 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087f0:	f003 031f 	and.w	r3, r3, #31
 80087f4:	2204      	movs	r2, #4
 80087f6:	409a      	lsls	r2, r3
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	4013      	ands	r3, r2
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f000 80cd 	beq.w	800899c <HAL_DMA_IRQHandler+0xb48>
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	f003 0304 	and.w	r3, r3, #4
 8008808:	2b00      	cmp	r3, #0
 800880a:	f000 80c7 	beq.w	800899c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008812:	f003 031f 	and.w	r3, r3, #31
 8008816:	2204      	movs	r2, #4
 8008818:	409a      	lsls	r2, r3
 800881a:	69fb      	ldr	r3, [r7, #28]
 800881c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008824:	2b00      	cmp	r3, #0
 8008826:	d049      	beq.n	80088bc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800882e:	2b00      	cmp	r3, #0
 8008830:	d109      	bne.n	8008846 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008836:	2b00      	cmp	r3, #0
 8008838:	f000 8210 	beq.w	8008c5c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008844:	e20a      	b.n	8008c5c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800884a:	2b00      	cmp	r3, #0
 800884c:	f000 8206 	beq.w	8008c5c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008858:	e200      	b.n	8008c5c <HAL_DMA_IRQHandler+0xe08>
 800885a:	bf00      	nop
 800885c:	40020010 	.word	0x40020010
 8008860:	40020028 	.word	0x40020028
 8008864:	40020040 	.word	0x40020040
 8008868:	40020058 	.word	0x40020058
 800886c:	40020070 	.word	0x40020070
 8008870:	40020088 	.word	0x40020088
 8008874:	400200a0 	.word	0x400200a0
 8008878:	400200b8 	.word	0x400200b8
 800887c:	40020410 	.word	0x40020410
 8008880:	40020428 	.word	0x40020428
 8008884:	40020440 	.word	0x40020440
 8008888:	40020458 	.word	0x40020458
 800888c:	40020470 	.word	0x40020470
 8008890:	40020488 	.word	0x40020488
 8008894:	400204a0 	.word	0x400204a0
 8008898:	400204b8 	.word	0x400204b8
 800889c:	58025408 	.word	0x58025408
 80088a0:	5802541c 	.word	0x5802541c
 80088a4:	58025430 	.word	0x58025430
 80088a8:	58025444 	.word	0x58025444
 80088ac:	58025458 	.word	0x58025458
 80088b0:	5802546c 	.word	0x5802546c
 80088b4:	58025480 	.word	0x58025480
 80088b8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	f003 0320 	and.w	r3, r3, #32
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d160      	bne.n	8008988 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a7f      	ldr	r2, [pc, #508]	; (8008ac8 <HAL_DMA_IRQHandler+0xc74>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d04a      	beq.n	8008966 <HAL_DMA_IRQHandler+0xb12>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a7d      	ldr	r2, [pc, #500]	; (8008acc <HAL_DMA_IRQHandler+0xc78>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d045      	beq.n	8008966 <HAL_DMA_IRQHandler+0xb12>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a7c      	ldr	r2, [pc, #496]	; (8008ad0 <HAL_DMA_IRQHandler+0xc7c>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d040      	beq.n	8008966 <HAL_DMA_IRQHandler+0xb12>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a7a      	ldr	r2, [pc, #488]	; (8008ad4 <HAL_DMA_IRQHandler+0xc80>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d03b      	beq.n	8008966 <HAL_DMA_IRQHandler+0xb12>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a79      	ldr	r2, [pc, #484]	; (8008ad8 <HAL_DMA_IRQHandler+0xc84>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d036      	beq.n	8008966 <HAL_DMA_IRQHandler+0xb12>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a77      	ldr	r2, [pc, #476]	; (8008adc <HAL_DMA_IRQHandler+0xc88>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d031      	beq.n	8008966 <HAL_DMA_IRQHandler+0xb12>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a76      	ldr	r2, [pc, #472]	; (8008ae0 <HAL_DMA_IRQHandler+0xc8c>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d02c      	beq.n	8008966 <HAL_DMA_IRQHandler+0xb12>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a74      	ldr	r2, [pc, #464]	; (8008ae4 <HAL_DMA_IRQHandler+0xc90>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d027      	beq.n	8008966 <HAL_DMA_IRQHandler+0xb12>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a73      	ldr	r2, [pc, #460]	; (8008ae8 <HAL_DMA_IRQHandler+0xc94>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d022      	beq.n	8008966 <HAL_DMA_IRQHandler+0xb12>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a71      	ldr	r2, [pc, #452]	; (8008aec <HAL_DMA_IRQHandler+0xc98>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d01d      	beq.n	8008966 <HAL_DMA_IRQHandler+0xb12>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a70      	ldr	r2, [pc, #448]	; (8008af0 <HAL_DMA_IRQHandler+0xc9c>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d018      	beq.n	8008966 <HAL_DMA_IRQHandler+0xb12>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a6e      	ldr	r2, [pc, #440]	; (8008af4 <HAL_DMA_IRQHandler+0xca0>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d013      	beq.n	8008966 <HAL_DMA_IRQHandler+0xb12>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a6d      	ldr	r2, [pc, #436]	; (8008af8 <HAL_DMA_IRQHandler+0xca4>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d00e      	beq.n	8008966 <HAL_DMA_IRQHandler+0xb12>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a6b      	ldr	r2, [pc, #428]	; (8008afc <HAL_DMA_IRQHandler+0xca8>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d009      	beq.n	8008966 <HAL_DMA_IRQHandler+0xb12>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a6a      	ldr	r2, [pc, #424]	; (8008b00 <HAL_DMA_IRQHandler+0xcac>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d004      	beq.n	8008966 <HAL_DMA_IRQHandler+0xb12>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a68      	ldr	r2, [pc, #416]	; (8008b04 <HAL_DMA_IRQHandler+0xcb0>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d108      	bne.n	8008978 <HAL_DMA_IRQHandler+0xb24>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f022 0208 	bic.w	r2, r2, #8
 8008974:	601a      	str	r2, [r3, #0]
 8008976:	e007      	b.n	8008988 <HAL_DMA_IRQHandler+0xb34>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f022 0204 	bic.w	r2, r2, #4
 8008986:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800898c:	2b00      	cmp	r3, #0
 800898e:	f000 8165 	beq.w	8008c5c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800899a:	e15f      	b.n	8008c5c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089a0:	f003 031f 	and.w	r3, r3, #31
 80089a4:	2202      	movs	r2, #2
 80089a6:	409a      	lsls	r2, r3
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	4013      	ands	r3, r2
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	f000 80c5 	beq.w	8008b3c <HAL_DMA_IRQHandler+0xce8>
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	f003 0302 	and.w	r3, r3, #2
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f000 80bf 	beq.w	8008b3c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089c2:	f003 031f 	and.w	r3, r3, #31
 80089c6:	2202      	movs	r2, #2
 80089c8:	409a      	lsls	r2, r3
 80089ca:	69fb      	ldr	r3, [r7, #28]
 80089cc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d018      	beq.n	8008a0a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d109      	bne.n	80089f6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	f000 813a 	beq.w	8008c60 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80089f4:	e134      	b.n	8008c60 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	f000 8130 	beq.w	8008c60 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008a08:	e12a      	b.n	8008c60 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	f003 0320 	and.w	r3, r3, #32
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	f040 8089 	bne.w	8008b28 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a2b      	ldr	r2, [pc, #172]	; (8008ac8 <HAL_DMA_IRQHandler+0xc74>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d04a      	beq.n	8008ab6 <HAL_DMA_IRQHandler+0xc62>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a29      	ldr	r2, [pc, #164]	; (8008acc <HAL_DMA_IRQHandler+0xc78>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d045      	beq.n	8008ab6 <HAL_DMA_IRQHandler+0xc62>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4a28      	ldr	r2, [pc, #160]	; (8008ad0 <HAL_DMA_IRQHandler+0xc7c>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d040      	beq.n	8008ab6 <HAL_DMA_IRQHandler+0xc62>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a26      	ldr	r2, [pc, #152]	; (8008ad4 <HAL_DMA_IRQHandler+0xc80>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d03b      	beq.n	8008ab6 <HAL_DMA_IRQHandler+0xc62>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a25      	ldr	r2, [pc, #148]	; (8008ad8 <HAL_DMA_IRQHandler+0xc84>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d036      	beq.n	8008ab6 <HAL_DMA_IRQHandler+0xc62>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a23      	ldr	r2, [pc, #140]	; (8008adc <HAL_DMA_IRQHandler+0xc88>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d031      	beq.n	8008ab6 <HAL_DMA_IRQHandler+0xc62>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a22      	ldr	r2, [pc, #136]	; (8008ae0 <HAL_DMA_IRQHandler+0xc8c>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d02c      	beq.n	8008ab6 <HAL_DMA_IRQHandler+0xc62>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a20      	ldr	r2, [pc, #128]	; (8008ae4 <HAL_DMA_IRQHandler+0xc90>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d027      	beq.n	8008ab6 <HAL_DMA_IRQHandler+0xc62>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a1f      	ldr	r2, [pc, #124]	; (8008ae8 <HAL_DMA_IRQHandler+0xc94>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d022      	beq.n	8008ab6 <HAL_DMA_IRQHandler+0xc62>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a1d      	ldr	r2, [pc, #116]	; (8008aec <HAL_DMA_IRQHandler+0xc98>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d01d      	beq.n	8008ab6 <HAL_DMA_IRQHandler+0xc62>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a1c      	ldr	r2, [pc, #112]	; (8008af0 <HAL_DMA_IRQHandler+0xc9c>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d018      	beq.n	8008ab6 <HAL_DMA_IRQHandler+0xc62>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a1a      	ldr	r2, [pc, #104]	; (8008af4 <HAL_DMA_IRQHandler+0xca0>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d013      	beq.n	8008ab6 <HAL_DMA_IRQHandler+0xc62>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a19      	ldr	r2, [pc, #100]	; (8008af8 <HAL_DMA_IRQHandler+0xca4>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d00e      	beq.n	8008ab6 <HAL_DMA_IRQHandler+0xc62>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a17      	ldr	r2, [pc, #92]	; (8008afc <HAL_DMA_IRQHandler+0xca8>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d009      	beq.n	8008ab6 <HAL_DMA_IRQHandler+0xc62>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a16      	ldr	r2, [pc, #88]	; (8008b00 <HAL_DMA_IRQHandler+0xcac>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d004      	beq.n	8008ab6 <HAL_DMA_IRQHandler+0xc62>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a14      	ldr	r2, [pc, #80]	; (8008b04 <HAL_DMA_IRQHandler+0xcb0>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d128      	bne.n	8008b08 <HAL_DMA_IRQHandler+0xcb4>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f022 0214 	bic.w	r2, r2, #20
 8008ac4:	601a      	str	r2, [r3, #0]
 8008ac6:	e027      	b.n	8008b18 <HAL_DMA_IRQHandler+0xcc4>
 8008ac8:	40020010 	.word	0x40020010
 8008acc:	40020028 	.word	0x40020028
 8008ad0:	40020040 	.word	0x40020040
 8008ad4:	40020058 	.word	0x40020058
 8008ad8:	40020070 	.word	0x40020070
 8008adc:	40020088 	.word	0x40020088
 8008ae0:	400200a0 	.word	0x400200a0
 8008ae4:	400200b8 	.word	0x400200b8
 8008ae8:	40020410 	.word	0x40020410
 8008aec:	40020428 	.word	0x40020428
 8008af0:	40020440 	.word	0x40020440
 8008af4:	40020458 	.word	0x40020458
 8008af8:	40020470 	.word	0x40020470
 8008afc:	40020488 	.word	0x40020488
 8008b00:	400204a0 	.word	0x400204a0
 8008b04:	400204b8 	.word	0x400204b8
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f022 020a 	bic.w	r2, r2, #10
 8008b16:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2200      	movs	r2, #0
 8008b24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	f000 8097 	beq.w	8008c60 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008b3a:	e091      	b.n	8008c60 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b40:	f003 031f 	and.w	r3, r3, #31
 8008b44:	2208      	movs	r2, #8
 8008b46:	409a      	lsls	r2, r3
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	f000 8088 	beq.w	8008c62 <HAL_DMA_IRQHandler+0xe0e>
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	f003 0308 	and.w	r3, r3, #8
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	f000 8082 	beq.w	8008c62 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a41      	ldr	r2, [pc, #260]	; (8008c68 <HAL_DMA_IRQHandler+0xe14>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d04a      	beq.n	8008bfe <HAL_DMA_IRQHandler+0xdaa>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a3f      	ldr	r2, [pc, #252]	; (8008c6c <HAL_DMA_IRQHandler+0xe18>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d045      	beq.n	8008bfe <HAL_DMA_IRQHandler+0xdaa>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a3e      	ldr	r2, [pc, #248]	; (8008c70 <HAL_DMA_IRQHandler+0xe1c>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d040      	beq.n	8008bfe <HAL_DMA_IRQHandler+0xdaa>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a3c      	ldr	r2, [pc, #240]	; (8008c74 <HAL_DMA_IRQHandler+0xe20>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d03b      	beq.n	8008bfe <HAL_DMA_IRQHandler+0xdaa>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a3b      	ldr	r2, [pc, #236]	; (8008c78 <HAL_DMA_IRQHandler+0xe24>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d036      	beq.n	8008bfe <HAL_DMA_IRQHandler+0xdaa>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a39      	ldr	r2, [pc, #228]	; (8008c7c <HAL_DMA_IRQHandler+0xe28>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d031      	beq.n	8008bfe <HAL_DMA_IRQHandler+0xdaa>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a38      	ldr	r2, [pc, #224]	; (8008c80 <HAL_DMA_IRQHandler+0xe2c>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d02c      	beq.n	8008bfe <HAL_DMA_IRQHandler+0xdaa>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a36      	ldr	r2, [pc, #216]	; (8008c84 <HAL_DMA_IRQHandler+0xe30>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d027      	beq.n	8008bfe <HAL_DMA_IRQHandler+0xdaa>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4a35      	ldr	r2, [pc, #212]	; (8008c88 <HAL_DMA_IRQHandler+0xe34>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d022      	beq.n	8008bfe <HAL_DMA_IRQHandler+0xdaa>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a33      	ldr	r2, [pc, #204]	; (8008c8c <HAL_DMA_IRQHandler+0xe38>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d01d      	beq.n	8008bfe <HAL_DMA_IRQHandler+0xdaa>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a32      	ldr	r2, [pc, #200]	; (8008c90 <HAL_DMA_IRQHandler+0xe3c>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d018      	beq.n	8008bfe <HAL_DMA_IRQHandler+0xdaa>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a30      	ldr	r2, [pc, #192]	; (8008c94 <HAL_DMA_IRQHandler+0xe40>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d013      	beq.n	8008bfe <HAL_DMA_IRQHandler+0xdaa>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a2f      	ldr	r2, [pc, #188]	; (8008c98 <HAL_DMA_IRQHandler+0xe44>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d00e      	beq.n	8008bfe <HAL_DMA_IRQHandler+0xdaa>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a2d      	ldr	r2, [pc, #180]	; (8008c9c <HAL_DMA_IRQHandler+0xe48>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d009      	beq.n	8008bfe <HAL_DMA_IRQHandler+0xdaa>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a2c      	ldr	r2, [pc, #176]	; (8008ca0 <HAL_DMA_IRQHandler+0xe4c>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d004      	beq.n	8008bfe <HAL_DMA_IRQHandler+0xdaa>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a2a      	ldr	r2, [pc, #168]	; (8008ca4 <HAL_DMA_IRQHandler+0xe50>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d108      	bne.n	8008c10 <HAL_DMA_IRQHandler+0xdbc>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f022 021c 	bic.w	r2, r2, #28
 8008c0c:	601a      	str	r2, [r3, #0]
 8008c0e:	e007      	b.n	8008c20 <HAL_DMA_IRQHandler+0xdcc>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f022 020e 	bic.w	r2, r2, #14
 8008c1e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c24:	f003 031f 	and.w	r3, r3, #31
 8008c28:	2201      	movs	r2, #1
 8008c2a:	409a      	lsls	r2, r3
 8008c2c:	69fb      	ldr	r3, [r7, #28]
 8008c2e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2201      	movs	r2, #1
 8008c34:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2200      	movs	r2, #0
 8008c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d009      	beq.n	8008c62 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	4798      	blx	r3
 8008c56:	e004      	b.n	8008c62 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008c58:	bf00      	nop
 8008c5a:	e002      	b.n	8008c62 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008c5c:	bf00      	nop
 8008c5e:	e000      	b.n	8008c62 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008c60:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008c62:	3728      	adds	r7, #40	; 0x28
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	40020010 	.word	0x40020010
 8008c6c:	40020028 	.word	0x40020028
 8008c70:	40020040 	.word	0x40020040
 8008c74:	40020058 	.word	0x40020058
 8008c78:	40020070 	.word	0x40020070
 8008c7c:	40020088 	.word	0x40020088
 8008c80:	400200a0 	.word	0x400200a0
 8008c84:	400200b8 	.word	0x400200b8
 8008c88:	40020410 	.word	0x40020410
 8008c8c:	40020428 	.word	0x40020428
 8008c90:	40020440 	.word	0x40020440
 8008c94:	40020458 	.word	0x40020458
 8008c98:	40020470 	.word	0x40020470
 8008c9c:	40020488 	.word	0x40020488
 8008ca0:	400204a0 	.word	0x400204a0
 8008ca4:	400204b8 	.word	0x400204b8

08008ca8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b087      	sub	sp, #28
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	607a      	str	r2, [r7, #4]
 8008cb4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cba:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cc0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a7f      	ldr	r2, [pc, #508]	; (8008ec4 <DMA_SetConfig+0x21c>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d072      	beq.n	8008db2 <DMA_SetConfig+0x10a>
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a7d      	ldr	r2, [pc, #500]	; (8008ec8 <DMA_SetConfig+0x220>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d06d      	beq.n	8008db2 <DMA_SetConfig+0x10a>
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a7c      	ldr	r2, [pc, #496]	; (8008ecc <DMA_SetConfig+0x224>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d068      	beq.n	8008db2 <DMA_SetConfig+0x10a>
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a7a      	ldr	r2, [pc, #488]	; (8008ed0 <DMA_SetConfig+0x228>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d063      	beq.n	8008db2 <DMA_SetConfig+0x10a>
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a79      	ldr	r2, [pc, #484]	; (8008ed4 <DMA_SetConfig+0x22c>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d05e      	beq.n	8008db2 <DMA_SetConfig+0x10a>
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a77      	ldr	r2, [pc, #476]	; (8008ed8 <DMA_SetConfig+0x230>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d059      	beq.n	8008db2 <DMA_SetConfig+0x10a>
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a76      	ldr	r2, [pc, #472]	; (8008edc <DMA_SetConfig+0x234>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d054      	beq.n	8008db2 <DMA_SetConfig+0x10a>
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a74      	ldr	r2, [pc, #464]	; (8008ee0 <DMA_SetConfig+0x238>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d04f      	beq.n	8008db2 <DMA_SetConfig+0x10a>
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a73      	ldr	r2, [pc, #460]	; (8008ee4 <DMA_SetConfig+0x23c>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d04a      	beq.n	8008db2 <DMA_SetConfig+0x10a>
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a71      	ldr	r2, [pc, #452]	; (8008ee8 <DMA_SetConfig+0x240>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d045      	beq.n	8008db2 <DMA_SetConfig+0x10a>
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a70      	ldr	r2, [pc, #448]	; (8008eec <DMA_SetConfig+0x244>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d040      	beq.n	8008db2 <DMA_SetConfig+0x10a>
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a6e      	ldr	r2, [pc, #440]	; (8008ef0 <DMA_SetConfig+0x248>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d03b      	beq.n	8008db2 <DMA_SetConfig+0x10a>
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a6d      	ldr	r2, [pc, #436]	; (8008ef4 <DMA_SetConfig+0x24c>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d036      	beq.n	8008db2 <DMA_SetConfig+0x10a>
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a6b      	ldr	r2, [pc, #428]	; (8008ef8 <DMA_SetConfig+0x250>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d031      	beq.n	8008db2 <DMA_SetConfig+0x10a>
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a6a      	ldr	r2, [pc, #424]	; (8008efc <DMA_SetConfig+0x254>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d02c      	beq.n	8008db2 <DMA_SetConfig+0x10a>
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a68      	ldr	r2, [pc, #416]	; (8008f00 <DMA_SetConfig+0x258>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d027      	beq.n	8008db2 <DMA_SetConfig+0x10a>
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a67      	ldr	r2, [pc, #412]	; (8008f04 <DMA_SetConfig+0x25c>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d022      	beq.n	8008db2 <DMA_SetConfig+0x10a>
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a65      	ldr	r2, [pc, #404]	; (8008f08 <DMA_SetConfig+0x260>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d01d      	beq.n	8008db2 <DMA_SetConfig+0x10a>
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a64      	ldr	r2, [pc, #400]	; (8008f0c <DMA_SetConfig+0x264>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d018      	beq.n	8008db2 <DMA_SetConfig+0x10a>
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a62      	ldr	r2, [pc, #392]	; (8008f10 <DMA_SetConfig+0x268>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d013      	beq.n	8008db2 <DMA_SetConfig+0x10a>
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a61      	ldr	r2, [pc, #388]	; (8008f14 <DMA_SetConfig+0x26c>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d00e      	beq.n	8008db2 <DMA_SetConfig+0x10a>
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a5f      	ldr	r2, [pc, #380]	; (8008f18 <DMA_SetConfig+0x270>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d009      	beq.n	8008db2 <DMA_SetConfig+0x10a>
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a5e      	ldr	r2, [pc, #376]	; (8008f1c <DMA_SetConfig+0x274>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d004      	beq.n	8008db2 <DMA_SetConfig+0x10a>
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a5c      	ldr	r2, [pc, #368]	; (8008f20 <DMA_SetConfig+0x278>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d101      	bne.n	8008db6 <DMA_SetConfig+0x10e>
 8008db2:	2301      	movs	r3, #1
 8008db4:	e000      	b.n	8008db8 <DMA_SetConfig+0x110>
 8008db6:	2300      	movs	r3, #0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d00d      	beq.n	8008dd8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008dc0:	68fa      	ldr	r2, [r7, #12]
 8008dc2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008dc4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d004      	beq.n	8008dd8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dd2:	68fa      	ldr	r2, [r7, #12]
 8008dd4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008dd6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a39      	ldr	r2, [pc, #228]	; (8008ec4 <DMA_SetConfig+0x21c>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d04a      	beq.n	8008e78 <DMA_SetConfig+0x1d0>
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a38      	ldr	r2, [pc, #224]	; (8008ec8 <DMA_SetConfig+0x220>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d045      	beq.n	8008e78 <DMA_SetConfig+0x1d0>
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a36      	ldr	r2, [pc, #216]	; (8008ecc <DMA_SetConfig+0x224>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d040      	beq.n	8008e78 <DMA_SetConfig+0x1d0>
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a35      	ldr	r2, [pc, #212]	; (8008ed0 <DMA_SetConfig+0x228>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d03b      	beq.n	8008e78 <DMA_SetConfig+0x1d0>
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a33      	ldr	r2, [pc, #204]	; (8008ed4 <DMA_SetConfig+0x22c>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d036      	beq.n	8008e78 <DMA_SetConfig+0x1d0>
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a32      	ldr	r2, [pc, #200]	; (8008ed8 <DMA_SetConfig+0x230>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d031      	beq.n	8008e78 <DMA_SetConfig+0x1d0>
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a30      	ldr	r2, [pc, #192]	; (8008edc <DMA_SetConfig+0x234>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d02c      	beq.n	8008e78 <DMA_SetConfig+0x1d0>
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a2f      	ldr	r2, [pc, #188]	; (8008ee0 <DMA_SetConfig+0x238>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d027      	beq.n	8008e78 <DMA_SetConfig+0x1d0>
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a2d      	ldr	r2, [pc, #180]	; (8008ee4 <DMA_SetConfig+0x23c>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d022      	beq.n	8008e78 <DMA_SetConfig+0x1d0>
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a2c      	ldr	r2, [pc, #176]	; (8008ee8 <DMA_SetConfig+0x240>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d01d      	beq.n	8008e78 <DMA_SetConfig+0x1d0>
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a2a      	ldr	r2, [pc, #168]	; (8008eec <DMA_SetConfig+0x244>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d018      	beq.n	8008e78 <DMA_SetConfig+0x1d0>
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a29      	ldr	r2, [pc, #164]	; (8008ef0 <DMA_SetConfig+0x248>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d013      	beq.n	8008e78 <DMA_SetConfig+0x1d0>
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a27      	ldr	r2, [pc, #156]	; (8008ef4 <DMA_SetConfig+0x24c>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d00e      	beq.n	8008e78 <DMA_SetConfig+0x1d0>
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a26      	ldr	r2, [pc, #152]	; (8008ef8 <DMA_SetConfig+0x250>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d009      	beq.n	8008e78 <DMA_SetConfig+0x1d0>
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a24      	ldr	r2, [pc, #144]	; (8008efc <DMA_SetConfig+0x254>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d004      	beq.n	8008e78 <DMA_SetConfig+0x1d0>
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4a23      	ldr	r2, [pc, #140]	; (8008f00 <DMA_SetConfig+0x258>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d101      	bne.n	8008e7c <DMA_SetConfig+0x1d4>
 8008e78:	2301      	movs	r3, #1
 8008e7a:	e000      	b.n	8008e7e <DMA_SetConfig+0x1d6>
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d059      	beq.n	8008f36 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e86:	f003 031f 	and.w	r3, r3, #31
 8008e8a:	223f      	movs	r2, #63	; 0x3f
 8008e8c:	409a      	lsls	r2, r3
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008ea0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	683a      	ldr	r2, [r7, #0]
 8008ea8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	2b40      	cmp	r3, #64	; 0x40
 8008eb0:	d138      	bne.n	8008f24 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	68ba      	ldr	r2, [r7, #8]
 8008ec0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008ec2:	e086      	b.n	8008fd2 <DMA_SetConfig+0x32a>
 8008ec4:	40020010 	.word	0x40020010
 8008ec8:	40020028 	.word	0x40020028
 8008ecc:	40020040 	.word	0x40020040
 8008ed0:	40020058 	.word	0x40020058
 8008ed4:	40020070 	.word	0x40020070
 8008ed8:	40020088 	.word	0x40020088
 8008edc:	400200a0 	.word	0x400200a0
 8008ee0:	400200b8 	.word	0x400200b8
 8008ee4:	40020410 	.word	0x40020410
 8008ee8:	40020428 	.word	0x40020428
 8008eec:	40020440 	.word	0x40020440
 8008ef0:	40020458 	.word	0x40020458
 8008ef4:	40020470 	.word	0x40020470
 8008ef8:	40020488 	.word	0x40020488
 8008efc:	400204a0 	.word	0x400204a0
 8008f00:	400204b8 	.word	0x400204b8
 8008f04:	58025408 	.word	0x58025408
 8008f08:	5802541c 	.word	0x5802541c
 8008f0c:	58025430 	.word	0x58025430
 8008f10:	58025444 	.word	0x58025444
 8008f14:	58025458 	.word	0x58025458
 8008f18:	5802546c 	.word	0x5802546c
 8008f1c:	58025480 	.word	0x58025480
 8008f20:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	68ba      	ldr	r2, [r7, #8]
 8008f2a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	60da      	str	r2, [r3, #12]
}
 8008f34:	e04d      	b.n	8008fd2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a29      	ldr	r2, [pc, #164]	; (8008fe0 <DMA_SetConfig+0x338>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d022      	beq.n	8008f86 <DMA_SetConfig+0x2de>
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a27      	ldr	r2, [pc, #156]	; (8008fe4 <DMA_SetConfig+0x33c>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d01d      	beq.n	8008f86 <DMA_SetConfig+0x2de>
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a26      	ldr	r2, [pc, #152]	; (8008fe8 <DMA_SetConfig+0x340>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d018      	beq.n	8008f86 <DMA_SetConfig+0x2de>
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a24      	ldr	r2, [pc, #144]	; (8008fec <DMA_SetConfig+0x344>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d013      	beq.n	8008f86 <DMA_SetConfig+0x2de>
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a23      	ldr	r2, [pc, #140]	; (8008ff0 <DMA_SetConfig+0x348>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d00e      	beq.n	8008f86 <DMA_SetConfig+0x2de>
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a21      	ldr	r2, [pc, #132]	; (8008ff4 <DMA_SetConfig+0x34c>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d009      	beq.n	8008f86 <DMA_SetConfig+0x2de>
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a20      	ldr	r2, [pc, #128]	; (8008ff8 <DMA_SetConfig+0x350>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d004      	beq.n	8008f86 <DMA_SetConfig+0x2de>
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a1e      	ldr	r2, [pc, #120]	; (8008ffc <DMA_SetConfig+0x354>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d101      	bne.n	8008f8a <DMA_SetConfig+0x2e2>
 8008f86:	2301      	movs	r3, #1
 8008f88:	e000      	b.n	8008f8c <DMA_SetConfig+0x2e4>
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d020      	beq.n	8008fd2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f94:	f003 031f 	and.w	r3, r3, #31
 8008f98:	2201      	movs	r2, #1
 8008f9a:	409a      	lsls	r2, r3
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	683a      	ldr	r2, [r7, #0]
 8008fa6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	2b40      	cmp	r3, #64	; 0x40
 8008fae:	d108      	bne.n	8008fc2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	68ba      	ldr	r2, [r7, #8]
 8008fbe:	60da      	str	r2, [r3, #12]
}
 8008fc0:	e007      	b.n	8008fd2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	68ba      	ldr	r2, [r7, #8]
 8008fc8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	60da      	str	r2, [r3, #12]
}
 8008fd2:	bf00      	nop
 8008fd4:	371c      	adds	r7, #28
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop
 8008fe0:	58025408 	.word	0x58025408
 8008fe4:	5802541c 	.word	0x5802541c
 8008fe8:	58025430 	.word	0x58025430
 8008fec:	58025444 	.word	0x58025444
 8008ff0:	58025458 	.word	0x58025458
 8008ff4:	5802546c 	.word	0x5802546c
 8008ff8:	58025480 	.word	0x58025480
 8008ffc:	58025494 	.word	0x58025494

08009000 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009000:	b480      	push	{r7}
 8009002:	b085      	sub	sp, #20
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a42      	ldr	r2, [pc, #264]	; (8009118 <DMA_CalcBaseAndBitshift+0x118>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d04a      	beq.n	80090a8 <DMA_CalcBaseAndBitshift+0xa8>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a41      	ldr	r2, [pc, #260]	; (800911c <DMA_CalcBaseAndBitshift+0x11c>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d045      	beq.n	80090a8 <DMA_CalcBaseAndBitshift+0xa8>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a3f      	ldr	r2, [pc, #252]	; (8009120 <DMA_CalcBaseAndBitshift+0x120>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d040      	beq.n	80090a8 <DMA_CalcBaseAndBitshift+0xa8>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a3e      	ldr	r2, [pc, #248]	; (8009124 <DMA_CalcBaseAndBitshift+0x124>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d03b      	beq.n	80090a8 <DMA_CalcBaseAndBitshift+0xa8>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4a3c      	ldr	r2, [pc, #240]	; (8009128 <DMA_CalcBaseAndBitshift+0x128>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d036      	beq.n	80090a8 <DMA_CalcBaseAndBitshift+0xa8>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a3b      	ldr	r2, [pc, #236]	; (800912c <DMA_CalcBaseAndBitshift+0x12c>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d031      	beq.n	80090a8 <DMA_CalcBaseAndBitshift+0xa8>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a39      	ldr	r2, [pc, #228]	; (8009130 <DMA_CalcBaseAndBitshift+0x130>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d02c      	beq.n	80090a8 <DMA_CalcBaseAndBitshift+0xa8>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a38      	ldr	r2, [pc, #224]	; (8009134 <DMA_CalcBaseAndBitshift+0x134>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d027      	beq.n	80090a8 <DMA_CalcBaseAndBitshift+0xa8>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a36      	ldr	r2, [pc, #216]	; (8009138 <DMA_CalcBaseAndBitshift+0x138>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d022      	beq.n	80090a8 <DMA_CalcBaseAndBitshift+0xa8>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a35      	ldr	r2, [pc, #212]	; (800913c <DMA_CalcBaseAndBitshift+0x13c>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d01d      	beq.n	80090a8 <DMA_CalcBaseAndBitshift+0xa8>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a33      	ldr	r2, [pc, #204]	; (8009140 <DMA_CalcBaseAndBitshift+0x140>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d018      	beq.n	80090a8 <DMA_CalcBaseAndBitshift+0xa8>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a32      	ldr	r2, [pc, #200]	; (8009144 <DMA_CalcBaseAndBitshift+0x144>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d013      	beq.n	80090a8 <DMA_CalcBaseAndBitshift+0xa8>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a30      	ldr	r2, [pc, #192]	; (8009148 <DMA_CalcBaseAndBitshift+0x148>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d00e      	beq.n	80090a8 <DMA_CalcBaseAndBitshift+0xa8>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a2f      	ldr	r2, [pc, #188]	; (800914c <DMA_CalcBaseAndBitshift+0x14c>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d009      	beq.n	80090a8 <DMA_CalcBaseAndBitshift+0xa8>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a2d      	ldr	r2, [pc, #180]	; (8009150 <DMA_CalcBaseAndBitshift+0x150>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d004      	beq.n	80090a8 <DMA_CalcBaseAndBitshift+0xa8>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a2c      	ldr	r2, [pc, #176]	; (8009154 <DMA_CalcBaseAndBitshift+0x154>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d101      	bne.n	80090ac <DMA_CalcBaseAndBitshift+0xac>
 80090a8:	2301      	movs	r3, #1
 80090aa:	e000      	b.n	80090ae <DMA_CalcBaseAndBitshift+0xae>
 80090ac:	2300      	movs	r3, #0
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d024      	beq.n	80090fc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	3b10      	subs	r3, #16
 80090ba:	4a27      	ldr	r2, [pc, #156]	; (8009158 <DMA_CalcBaseAndBitshift+0x158>)
 80090bc:	fba2 2303 	umull	r2, r3, r2, r3
 80090c0:	091b      	lsrs	r3, r3, #4
 80090c2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f003 0307 	and.w	r3, r3, #7
 80090ca:	4a24      	ldr	r2, [pc, #144]	; (800915c <DMA_CalcBaseAndBitshift+0x15c>)
 80090cc:	5cd3      	ldrb	r3, [r2, r3]
 80090ce:	461a      	mov	r2, r3
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2b03      	cmp	r3, #3
 80090d8:	d908      	bls.n	80090ec <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	461a      	mov	r2, r3
 80090e0:	4b1f      	ldr	r3, [pc, #124]	; (8009160 <DMA_CalcBaseAndBitshift+0x160>)
 80090e2:	4013      	ands	r3, r2
 80090e4:	1d1a      	adds	r2, r3, #4
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	659a      	str	r2, [r3, #88]	; 0x58
 80090ea:	e00d      	b.n	8009108 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	461a      	mov	r2, r3
 80090f2:	4b1b      	ldr	r3, [pc, #108]	; (8009160 <DMA_CalcBaseAndBitshift+0x160>)
 80090f4:	4013      	ands	r3, r2
 80090f6:	687a      	ldr	r2, [r7, #4]
 80090f8:	6593      	str	r3, [r2, #88]	; 0x58
 80090fa:	e005      	b.n	8009108 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800910c:	4618      	mov	r0, r3
 800910e:	3714      	adds	r7, #20
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr
 8009118:	40020010 	.word	0x40020010
 800911c:	40020028 	.word	0x40020028
 8009120:	40020040 	.word	0x40020040
 8009124:	40020058 	.word	0x40020058
 8009128:	40020070 	.word	0x40020070
 800912c:	40020088 	.word	0x40020088
 8009130:	400200a0 	.word	0x400200a0
 8009134:	400200b8 	.word	0x400200b8
 8009138:	40020410 	.word	0x40020410
 800913c:	40020428 	.word	0x40020428
 8009140:	40020440 	.word	0x40020440
 8009144:	40020458 	.word	0x40020458
 8009148:	40020470 	.word	0x40020470
 800914c:	40020488 	.word	0x40020488
 8009150:	400204a0 	.word	0x400204a0
 8009154:	400204b8 	.word	0x400204b8
 8009158:	aaaaaaab 	.word	0xaaaaaaab
 800915c:	08010824 	.word	0x08010824
 8009160:	fffffc00 	.word	0xfffffc00

08009164 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009164:	b480      	push	{r7}
 8009166:	b085      	sub	sp, #20
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800916c:	2300      	movs	r3, #0
 800916e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	699b      	ldr	r3, [r3, #24]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d120      	bne.n	80091ba <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800917c:	2b03      	cmp	r3, #3
 800917e:	d858      	bhi.n	8009232 <DMA_CheckFifoParam+0xce>
 8009180:	a201      	add	r2, pc, #4	; (adr r2, 8009188 <DMA_CheckFifoParam+0x24>)
 8009182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009186:	bf00      	nop
 8009188:	08009199 	.word	0x08009199
 800918c:	080091ab 	.word	0x080091ab
 8009190:	08009199 	.word	0x08009199
 8009194:	08009233 	.word	0x08009233
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800919c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d048      	beq.n	8009236 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80091a4:	2301      	movs	r3, #1
 80091a6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80091a8:	e045      	b.n	8009236 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80091b2:	d142      	bne.n	800923a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80091b4:	2301      	movs	r3, #1
 80091b6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80091b8:	e03f      	b.n	800923a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	699b      	ldr	r3, [r3, #24]
 80091be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091c2:	d123      	bne.n	800920c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c8:	2b03      	cmp	r3, #3
 80091ca:	d838      	bhi.n	800923e <DMA_CheckFifoParam+0xda>
 80091cc:	a201      	add	r2, pc, #4	; (adr r2, 80091d4 <DMA_CheckFifoParam+0x70>)
 80091ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d2:	bf00      	nop
 80091d4:	080091e5 	.word	0x080091e5
 80091d8:	080091eb 	.word	0x080091eb
 80091dc:	080091e5 	.word	0x080091e5
 80091e0:	080091fd 	.word	0x080091fd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80091e4:	2301      	movs	r3, #1
 80091e6:	73fb      	strb	r3, [r7, #15]
        break;
 80091e8:	e030      	b.n	800924c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d025      	beq.n	8009242 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80091f6:	2301      	movs	r3, #1
 80091f8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80091fa:	e022      	b.n	8009242 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009200:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009204:	d11f      	bne.n	8009246 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009206:	2301      	movs	r3, #1
 8009208:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800920a:	e01c      	b.n	8009246 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009210:	2b02      	cmp	r3, #2
 8009212:	d902      	bls.n	800921a <DMA_CheckFifoParam+0xb6>
 8009214:	2b03      	cmp	r3, #3
 8009216:	d003      	beq.n	8009220 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009218:	e018      	b.n	800924c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800921a:	2301      	movs	r3, #1
 800921c:	73fb      	strb	r3, [r7, #15]
        break;
 800921e:	e015      	b.n	800924c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009224:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009228:	2b00      	cmp	r3, #0
 800922a:	d00e      	beq.n	800924a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800922c:	2301      	movs	r3, #1
 800922e:	73fb      	strb	r3, [r7, #15]
    break;
 8009230:	e00b      	b.n	800924a <DMA_CheckFifoParam+0xe6>
        break;
 8009232:	bf00      	nop
 8009234:	e00a      	b.n	800924c <DMA_CheckFifoParam+0xe8>
        break;
 8009236:	bf00      	nop
 8009238:	e008      	b.n	800924c <DMA_CheckFifoParam+0xe8>
        break;
 800923a:	bf00      	nop
 800923c:	e006      	b.n	800924c <DMA_CheckFifoParam+0xe8>
        break;
 800923e:	bf00      	nop
 8009240:	e004      	b.n	800924c <DMA_CheckFifoParam+0xe8>
        break;
 8009242:	bf00      	nop
 8009244:	e002      	b.n	800924c <DMA_CheckFifoParam+0xe8>
        break;
 8009246:	bf00      	nop
 8009248:	e000      	b.n	800924c <DMA_CheckFifoParam+0xe8>
    break;
 800924a:	bf00      	nop
    }
  }

  return status;
 800924c:	7bfb      	ldrb	r3, [r7, #15]
}
 800924e:	4618      	mov	r0, r3
 8009250:	3714      	adds	r7, #20
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop

0800925c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800925c:	b480      	push	{r7}
 800925e:	b085      	sub	sp, #20
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a38      	ldr	r2, [pc, #224]	; (8009350 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d022      	beq.n	80092ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4a36      	ldr	r2, [pc, #216]	; (8009354 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d01d      	beq.n	80092ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4a35      	ldr	r2, [pc, #212]	; (8009358 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d018      	beq.n	80092ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a33      	ldr	r2, [pc, #204]	; (800935c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d013      	beq.n	80092ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a32      	ldr	r2, [pc, #200]	; (8009360 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d00e      	beq.n	80092ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a30      	ldr	r2, [pc, #192]	; (8009364 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d009      	beq.n	80092ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a2f      	ldr	r2, [pc, #188]	; (8009368 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d004      	beq.n	80092ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a2d      	ldr	r2, [pc, #180]	; (800936c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d101      	bne.n	80092be <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80092ba:	2301      	movs	r3, #1
 80092bc:	e000      	b.n	80092c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80092be:	2300      	movs	r3, #0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d01a      	beq.n	80092fa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	3b08      	subs	r3, #8
 80092cc:	4a28      	ldr	r2, [pc, #160]	; (8009370 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80092ce:	fba2 2303 	umull	r2, r3, r2, r3
 80092d2:	091b      	lsrs	r3, r3, #4
 80092d4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80092d6:	68fa      	ldr	r2, [r7, #12]
 80092d8:	4b26      	ldr	r3, [pc, #152]	; (8009374 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80092da:	4413      	add	r3, r2
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	461a      	mov	r2, r3
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	4a24      	ldr	r2, [pc, #144]	; (8009378 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80092e8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f003 031f 	and.w	r3, r3, #31
 80092f0:	2201      	movs	r2, #1
 80092f2:	409a      	lsls	r2, r3
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80092f8:	e024      	b.n	8009344 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	b2db      	uxtb	r3, r3
 8009300:	3b10      	subs	r3, #16
 8009302:	4a1e      	ldr	r2, [pc, #120]	; (800937c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009304:	fba2 2303 	umull	r2, r3, r2, r3
 8009308:	091b      	lsrs	r3, r3, #4
 800930a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	4a1c      	ldr	r2, [pc, #112]	; (8009380 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d806      	bhi.n	8009322 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	4a1b      	ldr	r2, [pc, #108]	; (8009384 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d902      	bls.n	8009322 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	3308      	adds	r3, #8
 8009320:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009322:	68fa      	ldr	r2, [r7, #12]
 8009324:	4b18      	ldr	r3, [pc, #96]	; (8009388 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009326:	4413      	add	r3, r2
 8009328:	009b      	lsls	r3, r3, #2
 800932a:	461a      	mov	r2, r3
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	4a16      	ldr	r2, [pc, #88]	; (800938c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009334:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f003 031f 	and.w	r3, r3, #31
 800933c:	2201      	movs	r2, #1
 800933e:	409a      	lsls	r2, r3
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009344:	bf00      	nop
 8009346:	3714      	adds	r7, #20
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr
 8009350:	58025408 	.word	0x58025408
 8009354:	5802541c 	.word	0x5802541c
 8009358:	58025430 	.word	0x58025430
 800935c:	58025444 	.word	0x58025444
 8009360:	58025458 	.word	0x58025458
 8009364:	5802546c 	.word	0x5802546c
 8009368:	58025480 	.word	0x58025480
 800936c:	58025494 	.word	0x58025494
 8009370:	cccccccd 	.word	0xcccccccd
 8009374:	16009600 	.word	0x16009600
 8009378:	58025880 	.word	0x58025880
 800937c:	aaaaaaab 	.word	0xaaaaaaab
 8009380:	400204b8 	.word	0x400204b8
 8009384:	4002040f 	.word	0x4002040f
 8009388:	10008200 	.word	0x10008200
 800938c:	40020880 	.word	0x40020880

08009390 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009390:	b480      	push	{r7}
 8009392:	b085      	sub	sp, #20
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	b2db      	uxtb	r3, r3
 800939e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d04a      	beq.n	800943c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2b08      	cmp	r3, #8
 80093aa:	d847      	bhi.n	800943c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4a25      	ldr	r2, [pc, #148]	; (8009448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d022      	beq.n	80093fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a24      	ldr	r2, [pc, #144]	; (800944c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d01d      	beq.n	80093fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a22      	ldr	r2, [pc, #136]	; (8009450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d018      	beq.n	80093fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4a21      	ldr	r2, [pc, #132]	; (8009454 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d013      	beq.n	80093fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4a1f      	ldr	r2, [pc, #124]	; (8009458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d00e      	beq.n	80093fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4a1e      	ldr	r2, [pc, #120]	; (800945c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d009      	beq.n	80093fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a1c      	ldr	r2, [pc, #112]	; (8009460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d004      	beq.n	80093fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a1b      	ldr	r2, [pc, #108]	; (8009464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d101      	bne.n	8009400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80093fc:	2301      	movs	r3, #1
 80093fe:	e000      	b.n	8009402 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009400:	2300      	movs	r3, #0
 8009402:	2b00      	cmp	r3, #0
 8009404:	d00a      	beq.n	800941c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009406:	68fa      	ldr	r2, [r7, #12]
 8009408:	4b17      	ldr	r3, [pc, #92]	; (8009468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800940a:	4413      	add	r3, r2
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	461a      	mov	r2, r3
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	4a15      	ldr	r2, [pc, #84]	; (800946c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009418:	671a      	str	r2, [r3, #112]	; 0x70
 800941a:	e009      	b.n	8009430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800941c:	68fa      	ldr	r2, [r7, #12]
 800941e:	4b14      	ldr	r3, [pc, #80]	; (8009470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009420:	4413      	add	r3, r2
 8009422:	009b      	lsls	r3, r3, #2
 8009424:	461a      	mov	r2, r3
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	4a11      	ldr	r2, [pc, #68]	; (8009474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800942e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	3b01      	subs	r3, #1
 8009434:	2201      	movs	r2, #1
 8009436:	409a      	lsls	r2, r3
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800943c:	bf00      	nop
 800943e:	3714      	adds	r7, #20
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr
 8009448:	58025408 	.word	0x58025408
 800944c:	5802541c 	.word	0x5802541c
 8009450:	58025430 	.word	0x58025430
 8009454:	58025444 	.word	0x58025444
 8009458:	58025458 	.word	0x58025458
 800945c:	5802546c 	.word	0x5802546c
 8009460:	58025480 	.word	0x58025480
 8009464:	58025494 	.word	0x58025494
 8009468:	1600963f 	.word	0x1600963f
 800946c:	58025940 	.word	0x58025940
 8009470:	1000823f 	.word	0x1000823f
 8009474:	40020940 	.word	0x40020940

08009478 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009478:	b480      	push	{r7}
 800947a:	b089      	sub	sp, #36	; 0x24
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009482:	2300      	movs	r3, #0
 8009484:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009486:	4b86      	ldr	r3, [pc, #536]	; (80096a0 <HAL_GPIO_Init+0x228>)
 8009488:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800948a:	e18c      	b.n	80097a6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	2101      	movs	r1, #1
 8009492:	69fb      	ldr	r3, [r7, #28]
 8009494:	fa01 f303 	lsl.w	r3, r1, r3
 8009498:	4013      	ands	r3, r2
 800949a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	f000 817e 	beq.w	80097a0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	f003 0303 	and.w	r3, r3, #3
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d005      	beq.n	80094bc <HAL_GPIO_Init+0x44>
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	f003 0303 	and.w	r3, r3, #3
 80094b8:	2b02      	cmp	r3, #2
 80094ba:	d130      	bne.n	800951e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	689b      	ldr	r3, [r3, #8]
 80094c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80094c2:	69fb      	ldr	r3, [r7, #28]
 80094c4:	005b      	lsls	r3, r3, #1
 80094c6:	2203      	movs	r2, #3
 80094c8:	fa02 f303 	lsl.w	r3, r2, r3
 80094cc:	43db      	mvns	r3, r3
 80094ce:	69ba      	ldr	r2, [r7, #24]
 80094d0:	4013      	ands	r3, r2
 80094d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	68da      	ldr	r2, [r3, #12]
 80094d8:	69fb      	ldr	r3, [r7, #28]
 80094da:	005b      	lsls	r3, r3, #1
 80094dc:	fa02 f303 	lsl.w	r3, r2, r3
 80094e0:	69ba      	ldr	r2, [r7, #24]
 80094e2:	4313      	orrs	r3, r2
 80094e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	69ba      	ldr	r2, [r7, #24]
 80094ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80094f2:	2201      	movs	r2, #1
 80094f4:	69fb      	ldr	r3, [r7, #28]
 80094f6:	fa02 f303 	lsl.w	r3, r2, r3
 80094fa:	43db      	mvns	r3, r3
 80094fc:	69ba      	ldr	r2, [r7, #24]
 80094fe:	4013      	ands	r3, r2
 8009500:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	091b      	lsrs	r3, r3, #4
 8009508:	f003 0201 	and.w	r2, r3, #1
 800950c:	69fb      	ldr	r3, [r7, #28]
 800950e:	fa02 f303 	lsl.w	r3, r2, r3
 8009512:	69ba      	ldr	r2, [r7, #24]
 8009514:	4313      	orrs	r3, r2
 8009516:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	69ba      	ldr	r2, [r7, #24]
 800951c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	f003 0303 	and.w	r3, r3, #3
 8009526:	2b03      	cmp	r3, #3
 8009528:	d017      	beq.n	800955a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	68db      	ldr	r3, [r3, #12]
 800952e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009530:	69fb      	ldr	r3, [r7, #28]
 8009532:	005b      	lsls	r3, r3, #1
 8009534:	2203      	movs	r2, #3
 8009536:	fa02 f303 	lsl.w	r3, r2, r3
 800953a:	43db      	mvns	r3, r3
 800953c:	69ba      	ldr	r2, [r7, #24]
 800953e:	4013      	ands	r3, r2
 8009540:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	689a      	ldr	r2, [r3, #8]
 8009546:	69fb      	ldr	r3, [r7, #28]
 8009548:	005b      	lsls	r3, r3, #1
 800954a:	fa02 f303 	lsl.w	r3, r2, r3
 800954e:	69ba      	ldr	r2, [r7, #24]
 8009550:	4313      	orrs	r3, r2
 8009552:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	69ba      	ldr	r2, [r7, #24]
 8009558:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	f003 0303 	and.w	r3, r3, #3
 8009562:	2b02      	cmp	r3, #2
 8009564:	d123      	bne.n	80095ae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009566:	69fb      	ldr	r3, [r7, #28]
 8009568:	08da      	lsrs	r2, r3, #3
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	3208      	adds	r2, #8
 800956e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009572:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009574:	69fb      	ldr	r3, [r7, #28]
 8009576:	f003 0307 	and.w	r3, r3, #7
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	220f      	movs	r2, #15
 800957e:	fa02 f303 	lsl.w	r3, r2, r3
 8009582:	43db      	mvns	r3, r3
 8009584:	69ba      	ldr	r2, [r7, #24]
 8009586:	4013      	ands	r3, r2
 8009588:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	691a      	ldr	r2, [r3, #16]
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	f003 0307 	and.w	r3, r3, #7
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	fa02 f303 	lsl.w	r3, r2, r3
 800959a:	69ba      	ldr	r2, [r7, #24]
 800959c:	4313      	orrs	r3, r2
 800959e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80095a0:	69fb      	ldr	r3, [r7, #28]
 80095a2:	08da      	lsrs	r2, r3, #3
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	3208      	adds	r2, #8
 80095a8:	69b9      	ldr	r1, [r7, #24]
 80095aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80095b4:	69fb      	ldr	r3, [r7, #28]
 80095b6:	005b      	lsls	r3, r3, #1
 80095b8:	2203      	movs	r2, #3
 80095ba:	fa02 f303 	lsl.w	r3, r2, r3
 80095be:	43db      	mvns	r3, r3
 80095c0:	69ba      	ldr	r2, [r7, #24]
 80095c2:	4013      	ands	r3, r2
 80095c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	f003 0203 	and.w	r2, r3, #3
 80095ce:	69fb      	ldr	r3, [r7, #28]
 80095d0:	005b      	lsls	r3, r3, #1
 80095d2:	fa02 f303 	lsl.w	r3, r2, r3
 80095d6:	69ba      	ldr	r2, [r7, #24]
 80095d8:	4313      	orrs	r3, r2
 80095da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	69ba      	ldr	r2, [r7, #24]
 80095e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	f000 80d8 	beq.w	80097a0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80095f0:	4b2c      	ldr	r3, [pc, #176]	; (80096a4 <HAL_GPIO_Init+0x22c>)
 80095f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80095f6:	4a2b      	ldr	r2, [pc, #172]	; (80096a4 <HAL_GPIO_Init+0x22c>)
 80095f8:	f043 0302 	orr.w	r3, r3, #2
 80095fc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009600:	4b28      	ldr	r3, [pc, #160]	; (80096a4 <HAL_GPIO_Init+0x22c>)
 8009602:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009606:	f003 0302 	and.w	r3, r3, #2
 800960a:	60fb      	str	r3, [r7, #12]
 800960c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800960e:	4a26      	ldr	r2, [pc, #152]	; (80096a8 <HAL_GPIO_Init+0x230>)
 8009610:	69fb      	ldr	r3, [r7, #28]
 8009612:	089b      	lsrs	r3, r3, #2
 8009614:	3302      	adds	r3, #2
 8009616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800961a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800961c:	69fb      	ldr	r3, [r7, #28]
 800961e:	f003 0303 	and.w	r3, r3, #3
 8009622:	009b      	lsls	r3, r3, #2
 8009624:	220f      	movs	r2, #15
 8009626:	fa02 f303 	lsl.w	r3, r2, r3
 800962a:	43db      	mvns	r3, r3
 800962c:	69ba      	ldr	r2, [r7, #24]
 800962e:	4013      	ands	r3, r2
 8009630:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	4a1d      	ldr	r2, [pc, #116]	; (80096ac <HAL_GPIO_Init+0x234>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d04a      	beq.n	80096d0 <HAL_GPIO_Init+0x258>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	4a1c      	ldr	r2, [pc, #112]	; (80096b0 <HAL_GPIO_Init+0x238>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d02b      	beq.n	800969a <HAL_GPIO_Init+0x222>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	4a1b      	ldr	r2, [pc, #108]	; (80096b4 <HAL_GPIO_Init+0x23c>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d025      	beq.n	8009696 <HAL_GPIO_Init+0x21e>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	4a1a      	ldr	r2, [pc, #104]	; (80096b8 <HAL_GPIO_Init+0x240>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d01f      	beq.n	8009692 <HAL_GPIO_Init+0x21a>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4a19      	ldr	r2, [pc, #100]	; (80096bc <HAL_GPIO_Init+0x244>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d019      	beq.n	800968e <HAL_GPIO_Init+0x216>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	4a18      	ldr	r2, [pc, #96]	; (80096c0 <HAL_GPIO_Init+0x248>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d013      	beq.n	800968a <HAL_GPIO_Init+0x212>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	4a17      	ldr	r2, [pc, #92]	; (80096c4 <HAL_GPIO_Init+0x24c>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d00d      	beq.n	8009686 <HAL_GPIO_Init+0x20e>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	4a16      	ldr	r2, [pc, #88]	; (80096c8 <HAL_GPIO_Init+0x250>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d007      	beq.n	8009682 <HAL_GPIO_Init+0x20a>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	4a15      	ldr	r2, [pc, #84]	; (80096cc <HAL_GPIO_Init+0x254>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d101      	bne.n	800967e <HAL_GPIO_Init+0x206>
 800967a:	2309      	movs	r3, #9
 800967c:	e029      	b.n	80096d2 <HAL_GPIO_Init+0x25a>
 800967e:	230a      	movs	r3, #10
 8009680:	e027      	b.n	80096d2 <HAL_GPIO_Init+0x25a>
 8009682:	2307      	movs	r3, #7
 8009684:	e025      	b.n	80096d2 <HAL_GPIO_Init+0x25a>
 8009686:	2306      	movs	r3, #6
 8009688:	e023      	b.n	80096d2 <HAL_GPIO_Init+0x25a>
 800968a:	2305      	movs	r3, #5
 800968c:	e021      	b.n	80096d2 <HAL_GPIO_Init+0x25a>
 800968e:	2304      	movs	r3, #4
 8009690:	e01f      	b.n	80096d2 <HAL_GPIO_Init+0x25a>
 8009692:	2303      	movs	r3, #3
 8009694:	e01d      	b.n	80096d2 <HAL_GPIO_Init+0x25a>
 8009696:	2302      	movs	r3, #2
 8009698:	e01b      	b.n	80096d2 <HAL_GPIO_Init+0x25a>
 800969a:	2301      	movs	r3, #1
 800969c:	e019      	b.n	80096d2 <HAL_GPIO_Init+0x25a>
 800969e:	bf00      	nop
 80096a0:	58000080 	.word	0x58000080
 80096a4:	58024400 	.word	0x58024400
 80096a8:	58000400 	.word	0x58000400
 80096ac:	58020000 	.word	0x58020000
 80096b0:	58020400 	.word	0x58020400
 80096b4:	58020800 	.word	0x58020800
 80096b8:	58020c00 	.word	0x58020c00
 80096bc:	58021000 	.word	0x58021000
 80096c0:	58021400 	.word	0x58021400
 80096c4:	58021800 	.word	0x58021800
 80096c8:	58021c00 	.word	0x58021c00
 80096cc:	58022400 	.word	0x58022400
 80096d0:	2300      	movs	r3, #0
 80096d2:	69fa      	ldr	r2, [r7, #28]
 80096d4:	f002 0203 	and.w	r2, r2, #3
 80096d8:	0092      	lsls	r2, r2, #2
 80096da:	4093      	lsls	r3, r2
 80096dc:	69ba      	ldr	r2, [r7, #24]
 80096de:	4313      	orrs	r3, r2
 80096e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80096e2:	4938      	ldr	r1, [pc, #224]	; (80097c4 <HAL_GPIO_Init+0x34c>)
 80096e4:	69fb      	ldr	r3, [r7, #28]
 80096e6:	089b      	lsrs	r3, r3, #2
 80096e8:	3302      	adds	r3, #2
 80096ea:	69ba      	ldr	r2, [r7, #24]
 80096ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80096f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	43db      	mvns	r3, r3
 80096fc:	69ba      	ldr	r2, [r7, #24]
 80096fe:	4013      	ands	r3, r2
 8009700:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800970a:	2b00      	cmp	r3, #0
 800970c:	d003      	beq.n	8009716 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800970e:	69ba      	ldr	r2, [r7, #24]
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	4313      	orrs	r3, r2
 8009714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009716:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800971a:	69bb      	ldr	r3, [r7, #24]
 800971c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800971e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	43db      	mvns	r3, r3
 800972a:	69ba      	ldr	r2, [r7, #24]
 800972c:	4013      	ands	r3, r2
 800972e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009738:	2b00      	cmp	r3, #0
 800973a:	d003      	beq.n	8009744 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800973c:	69ba      	ldr	r2, [r7, #24]
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	4313      	orrs	r3, r2
 8009742:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009744:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009748:	69bb      	ldr	r3, [r7, #24]
 800974a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	43db      	mvns	r3, r3
 8009756:	69ba      	ldr	r2, [r7, #24]
 8009758:	4013      	ands	r3, r2
 800975a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009764:	2b00      	cmp	r3, #0
 8009766:	d003      	beq.n	8009770 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8009768:	69ba      	ldr	r2, [r7, #24]
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	4313      	orrs	r3, r2
 800976e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	69ba      	ldr	r2, [r7, #24]
 8009774:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	43db      	mvns	r3, r3
 8009780:	69ba      	ldr	r2, [r7, #24]
 8009782:	4013      	ands	r3, r2
 8009784:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800978e:	2b00      	cmp	r3, #0
 8009790:	d003      	beq.n	800979a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8009792:	69ba      	ldr	r2, [r7, #24]
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	4313      	orrs	r3, r2
 8009798:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	69ba      	ldr	r2, [r7, #24]
 800979e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80097a0:	69fb      	ldr	r3, [r7, #28]
 80097a2:	3301      	adds	r3, #1
 80097a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	69fb      	ldr	r3, [r7, #28]
 80097ac:	fa22 f303 	lsr.w	r3, r2, r3
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	f47f ae6b 	bne.w	800948c <HAL_GPIO_Init+0x14>
  }
}
 80097b6:	bf00      	nop
 80097b8:	bf00      	nop
 80097ba:	3724      	adds	r7, #36	; 0x24
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr
 80097c4:	58000400 	.word	0x58000400

080097c8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b087      	sub	sp, #28
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80097d2:	2300      	movs	r3, #0
 80097d4:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80097d6:	4b72      	ldr	r3, [pc, #456]	; (80099a0 <HAL_GPIO_DeInit+0x1d8>)
 80097d8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 80097da:	e0d3      	b.n	8009984 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 80097dc:	2201      	movs	r2, #1
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	fa02 f303 	lsl.w	r3, r2, r3
 80097e4:	683a      	ldr	r2, [r7, #0]
 80097e6:	4013      	ands	r3, r2
 80097e8:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	f000 80c6 	beq.w	800997e <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 80097f2:	4a6c      	ldr	r2, [pc, #432]	; (80099a4 <HAL_GPIO_DeInit+0x1dc>)
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	089b      	lsrs	r3, r3, #2
 80097f8:	3302      	adds	r3, #2
 80097fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097fe:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	f003 0303 	and.w	r3, r3, #3
 8009806:	009b      	lsls	r3, r3, #2
 8009808:	220f      	movs	r2, #15
 800980a:	fa02 f303 	lsl.w	r3, r2, r3
 800980e:	68ba      	ldr	r2, [r7, #8]
 8009810:	4013      	ands	r3, r2
 8009812:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	4a64      	ldr	r2, [pc, #400]	; (80099a8 <HAL_GPIO_DeInit+0x1e0>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d031      	beq.n	8009880 <HAL_GPIO_DeInit+0xb8>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	4a63      	ldr	r2, [pc, #396]	; (80099ac <HAL_GPIO_DeInit+0x1e4>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d02b      	beq.n	800987c <HAL_GPIO_DeInit+0xb4>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	4a62      	ldr	r2, [pc, #392]	; (80099b0 <HAL_GPIO_DeInit+0x1e8>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d025      	beq.n	8009878 <HAL_GPIO_DeInit+0xb0>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	4a61      	ldr	r2, [pc, #388]	; (80099b4 <HAL_GPIO_DeInit+0x1ec>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d01f      	beq.n	8009874 <HAL_GPIO_DeInit+0xac>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	4a60      	ldr	r2, [pc, #384]	; (80099b8 <HAL_GPIO_DeInit+0x1f0>)
 8009838:	4293      	cmp	r3, r2
 800983a:	d019      	beq.n	8009870 <HAL_GPIO_DeInit+0xa8>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	4a5f      	ldr	r2, [pc, #380]	; (80099bc <HAL_GPIO_DeInit+0x1f4>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d013      	beq.n	800986c <HAL_GPIO_DeInit+0xa4>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	4a5e      	ldr	r2, [pc, #376]	; (80099c0 <HAL_GPIO_DeInit+0x1f8>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d00d      	beq.n	8009868 <HAL_GPIO_DeInit+0xa0>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	4a5d      	ldr	r2, [pc, #372]	; (80099c4 <HAL_GPIO_DeInit+0x1fc>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d007      	beq.n	8009864 <HAL_GPIO_DeInit+0x9c>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	4a5c      	ldr	r2, [pc, #368]	; (80099c8 <HAL_GPIO_DeInit+0x200>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d101      	bne.n	8009860 <HAL_GPIO_DeInit+0x98>
 800985c:	2309      	movs	r3, #9
 800985e:	e010      	b.n	8009882 <HAL_GPIO_DeInit+0xba>
 8009860:	230a      	movs	r3, #10
 8009862:	e00e      	b.n	8009882 <HAL_GPIO_DeInit+0xba>
 8009864:	2307      	movs	r3, #7
 8009866:	e00c      	b.n	8009882 <HAL_GPIO_DeInit+0xba>
 8009868:	2306      	movs	r3, #6
 800986a:	e00a      	b.n	8009882 <HAL_GPIO_DeInit+0xba>
 800986c:	2305      	movs	r3, #5
 800986e:	e008      	b.n	8009882 <HAL_GPIO_DeInit+0xba>
 8009870:	2304      	movs	r3, #4
 8009872:	e006      	b.n	8009882 <HAL_GPIO_DeInit+0xba>
 8009874:	2303      	movs	r3, #3
 8009876:	e004      	b.n	8009882 <HAL_GPIO_DeInit+0xba>
 8009878:	2302      	movs	r3, #2
 800987a:	e002      	b.n	8009882 <HAL_GPIO_DeInit+0xba>
 800987c:	2301      	movs	r3, #1
 800987e:	e000      	b.n	8009882 <HAL_GPIO_DeInit+0xba>
 8009880:	2300      	movs	r3, #0
 8009882:	697a      	ldr	r2, [r7, #20]
 8009884:	f002 0203 	and.w	r2, r2, #3
 8009888:	0092      	lsls	r2, r2, #2
 800988a:	4093      	lsls	r3, r2
 800988c:	68ba      	ldr	r2, [r7, #8]
 800988e:	429a      	cmp	r2, r3
 8009890:	d136      	bne.n	8009900 <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	43db      	mvns	r3, r3
 800989a:	401a      	ands	r2, r3
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	685a      	ldr	r2, [r3, #4]
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	43db      	mvns	r3, r3
 80098a8:	401a      	ands	r2, r3
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80098ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80098b2:	685a      	ldr	r2, [r3, #4]
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	43db      	mvns	r3, r3
 80098b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80098bc:	4013      	ands	r3, r2
 80098be:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80098c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	43db      	mvns	r3, r3
 80098ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80098ce:	4013      	ands	r3, r2
 80098d0:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	f003 0303 	and.w	r3, r3, #3
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	220f      	movs	r2, #15
 80098dc:	fa02 f303 	lsl.w	r3, r2, r3
 80098e0:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80098e2:	4a30      	ldr	r2, [pc, #192]	; (80099a4 <HAL_GPIO_DeInit+0x1dc>)
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	089b      	lsrs	r3, r3, #2
 80098e8:	3302      	adds	r3, #2
 80098ea:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	43da      	mvns	r2, r3
 80098f2:	482c      	ldr	r0, [pc, #176]	; (80099a4 <HAL_GPIO_DeInit+0x1dc>)
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	089b      	lsrs	r3, r3, #2
 80098f8:	400a      	ands	r2, r1
 80098fa:	3302      	adds	r3, #2
 80098fc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	005b      	lsls	r3, r3, #1
 8009908:	2103      	movs	r1, #3
 800990a:	fa01 f303 	lsl.w	r3, r1, r3
 800990e:	431a      	orrs	r2, r3
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	08da      	lsrs	r2, r3, #3
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	3208      	adds	r2, #8
 800991c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	f003 0307 	and.w	r3, r3, #7
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	220f      	movs	r2, #15
 800992a:	fa02 f303 	lsl.w	r3, r2, r3
 800992e:	43db      	mvns	r3, r3
 8009930:	697a      	ldr	r2, [r7, #20]
 8009932:	08d2      	lsrs	r2, r2, #3
 8009934:	4019      	ands	r1, r3
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	3208      	adds	r2, #8
 800993a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	68da      	ldr	r2, [r3, #12]
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	005b      	lsls	r3, r3, #1
 8009946:	2103      	movs	r1, #3
 8009948:	fa01 f303 	lsl.w	r3, r1, r3
 800994c:	43db      	mvns	r3, r3
 800994e:	401a      	ands	r2, r3
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	685a      	ldr	r2, [r3, #4]
 8009958:	2101      	movs	r1, #1
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	fa01 f303 	lsl.w	r3, r1, r3
 8009960:	43db      	mvns	r3, r3
 8009962:	401a      	ands	r2, r3
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	689a      	ldr	r2, [r3, #8]
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	005b      	lsls	r3, r3, #1
 8009970:	2103      	movs	r1, #3
 8009972:	fa01 f303 	lsl.w	r3, r1, r3
 8009976:	43db      	mvns	r3, r3
 8009978:	401a      	ands	r2, r3
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	3301      	adds	r3, #1
 8009982:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8009984:	683a      	ldr	r2, [r7, #0]
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	fa22 f303 	lsr.w	r3, r2, r3
 800998c:	2b00      	cmp	r3, #0
 800998e:	f47f af25 	bne.w	80097dc <HAL_GPIO_DeInit+0x14>
  }
}
 8009992:	bf00      	nop
 8009994:	bf00      	nop
 8009996:	371c      	adds	r7, #28
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr
 80099a0:	58000080 	.word	0x58000080
 80099a4:	58000400 	.word	0x58000400
 80099a8:	58020000 	.word	0x58020000
 80099ac:	58020400 	.word	0x58020400
 80099b0:	58020800 	.word	0x58020800
 80099b4:	58020c00 	.word	0x58020c00
 80099b8:	58021000 	.word	0x58021000
 80099bc:	58021400 	.word	0x58021400
 80099c0:	58021800 	.word	0x58021800
 80099c4:	58021c00 	.word	0x58021c00
 80099c8:	58022400 	.word	0x58022400

080099cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b083      	sub	sp, #12
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	460b      	mov	r3, r1
 80099d6:	807b      	strh	r3, [r7, #2]
 80099d8:	4613      	mov	r3, r2
 80099da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80099dc:	787b      	ldrb	r3, [r7, #1]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d003      	beq.n	80099ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80099e2:	887a      	ldrh	r2, [r7, #2]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80099e8:	e003      	b.n	80099f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80099ea:	887b      	ldrh	r3, [r7, #2]
 80099ec:	041a      	lsls	r2, r3, #16
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	619a      	str	r2, [r3, #24]
}
 80099f2:	bf00      	nop
 80099f4:	370c      	adds	r7, #12
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr
	...

08009a00 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b084      	sub	sp, #16
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009a08:	4b19      	ldr	r3, [pc, #100]	; (8009a70 <HAL_PWREx_ConfigSupply+0x70>)
 8009a0a:	68db      	ldr	r3, [r3, #12]
 8009a0c:	f003 0304 	and.w	r3, r3, #4
 8009a10:	2b04      	cmp	r3, #4
 8009a12:	d00a      	beq.n	8009a2a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009a14:	4b16      	ldr	r3, [pc, #88]	; (8009a70 <HAL_PWREx_ConfigSupply+0x70>)
 8009a16:	68db      	ldr	r3, [r3, #12]
 8009a18:	f003 0307 	and.w	r3, r3, #7
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	d001      	beq.n	8009a26 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009a22:	2301      	movs	r3, #1
 8009a24:	e01f      	b.n	8009a66 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009a26:	2300      	movs	r3, #0
 8009a28:	e01d      	b.n	8009a66 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009a2a:	4b11      	ldr	r3, [pc, #68]	; (8009a70 <HAL_PWREx_ConfigSupply+0x70>)
 8009a2c:	68db      	ldr	r3, [r3, #12]
 8009a2e:	f023 0207 	bic.w	r2, r3, #7
 8009a32:	490f      	ldr	r1, [pc, #60]	; (8009a70 <HAL_PWREx_ConfigSupply+0x70>)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	4313      	orrs	r3, r2
 8009a38:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009a3a:	f7fc fbe1 	bl	8006200 <HAL_GetTick>
 8009a3e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009a40:	e009      	b.n	8009a56 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009a42:	f7fc fbdd 	bl	8006200 <HAL_GetTick>
 8009a46:	4602      	mov	r2, r0
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	1ad3      	subs	r3, r2, r3
 8009a4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a50:	d901      	bls.n	8009a56 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009a52:	2301      	movs	r3, #1
 8009a54:	e007      	b.n	8009a66 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009a56:	4b06      	ldr	r3, [pc, #24]	; (8009a70 <HAL_PWREx_ConfigSupply+0x70>)
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a62:	d1ee      	bne.n	8009a42 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009a64:	2300      	movs	r3, #0
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3710      	adds	r7, #16
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
 8009a6e:	bf00      	nop
 8009a70:	58024800 	.word	0x58024800

08009a74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b08c      	sub	sp, #48	; 0x30
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d101      	bne.n	8009a86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009a82:	2301      	movs	r3, #1
 8009a84:	e3c8      	b.n	800a218 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f003 0301 	and.w	r3, r3, #1
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	f000 8087 	beq.w	8009ba2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a94:	4b88      	ldr	r3, [pc, #544]	; (8009cb8 <HAL_RCC_OscConfig+0x244>)
 8009a96:	691b      	ldr	r3, [r3, #16]
 8009a98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009a9e:	4b86      	ldr	r3, [pc, #536]	; (8009cb8 <HAL_RCC_OscConfig+0x244>)
 8009aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aa2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa6:	2b10      	cmp	r3, #16
 8009aa8:	d007      	beq.n	8009aba <HAL_RCC_OscConfig+0x46>
 8009aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aac:	2b18      	cmp	r3, #24
 8009aae:	d110      	bne.n	8009ad2 <HAL_RCC_OscConfig+0x5e>
 8009ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab2:	f003 0303 	and.w	r3, r3, #3
 8009ab6:	2b02      	cmp	r3, #2
 8009ab8:	d10b      	bne.n	8009ad2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009aba:	4b7f      	ldr	r3, [pc, #508]	; (8009cb8 <HAL_RCC_OscConfig+0x244>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d06c      	beq.n	8009ba0 <HAL_RCC_OscConfig+0x12c>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d168      	bne.n	8009ba0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	e3a2      	b.n	800a218 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ada:	d106      	bne.n	8009aea <HAL_RCC_OscConfig+0x76>
 8009adc:	4b76      	ldr	r3, [pc, #472]	; (8009cb8 <HAL_RCC_OscConfig+0x244>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4a75      	ldr	r2, [pc, #468]	; (8009cb8 <HAL_RCC_OscConfig+0x244>)
 8009ae2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ae6:	6013      	str	r3, [r2, #0]
 8009ae8:	e02e      	b.n	8009b48 <HAL_RCC_OscConfig+0xd4>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d10c      	bne.n	8009b0c <HAL_RCC_OscConfig+0x98>
 8009af2:	4b71      	ldr	r3, [pc, #452]	; (8009cb8 <HAL_RCC_OscConfig+0x244>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a70      	ldr	r2, [pc, #448]	; (8009cb8 <HAL_RCC_OscConfig+0x244>)
 8009af8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009afc:	6013      	str	r3, [r2, #0]
 8009afe:	4b6e      	ldr	r3, [pc, #440]	; (8009cb8 <HAL_RCC_OscConfig+0x244>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4a6d      	ldr	r2, [pc, #436]	; (8009cb8 <HAL_RCC_OscConfig+0x244>)
 8009b04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b08:	6013      	str	r3, [r2, #0]
 8009b0a:	e01d      	b.n	8009b48 <HAL_RCC_OscConfig+0xd4>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009b14:	d10c      	bne.n	8009b30 <HAL_RCC_OscConfig+0xbc>
 8009b16:	4b68      	ldr	r3, [pc, #416]	; (8009cb8 <HAL_RCC_OscConfig+0x244>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4a67      	ldr	r2, [pc, #412]	; (8009cb8 <HAL_RCC_OscConfig+0x244>)
 8009b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009b20:	6013      	str	r3, [r2, #0]
 8009b22:	4b65      	ldr	r3, [pc, #404]	; (8009cb8 <HAL_RCC_OscConfig+0x244>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4a64      	ldr	r2, [pc, #400]	; (8009cb8 <HAL_RCC_OscConfig+0x244>)
 8009b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b2c:	6013      	str	r3, [r2, #0]
 8009b2e:	e00b      	b.n	8009b48 <HAL_RCC_OscConfig+0xd4>
 8009b30:	4b61      	ldr	r3, [pc, #388]	; (8009cb8 <HAL_RCC_OscConfig+0x244>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a60      	ldr	r2, [pc, #384]	; (8009cb8 <HAL_RCC_OscConfig+0x244>)
 8009b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b3a:	6013      	str	r3, [r2, #0]
 8009b3c:	4b5e      	ldr	r3, [pc, #376]	; (8009cb8 <HAL_RCC_OscConfig+0x244>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a5d      	ldr	r2, [pc, #372]	; (8009cb8 <HAL_RCC_OscConfig+0x244>)
 8009b42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d013      	beq.n	8009b78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b50:	f7fc fb56 	bl	8006200 <HAL_GetTick>
 8009b54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009b56:	e008      	b.n	8009b6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009b58:	f7fc fb52 	bl	8006200 <HAL_GetTick>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b60:	1ad3      	subs	r3, r2, r3
 8009b62:	2b64      	cmp	r3, #100	; 0x64
 8009b64:	d901      	bls.n	8009b6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009b66:	2303      	movs	r3, #3
 8009b68:	e356      	b.n	800a218 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009b6a:	4b53      	ldr	r3, [pc, #332]	; (8009cb8 <HAL_RCC_OscConfig+0x244>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d0f0      	beq.n	8009b58 <HAL_RCC_OscConfig+0xe4>
 8009b76:	e014      	b.n	8009ba2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b78:	f7fc fb42 	bl	8006200 <HAL_GetTick>
 8009b7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009b7e:	e008      	b.n	8009b92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009b80:	f7fc fb3e 	bl	8006200 <HAL_GetTick>
 8009b84:	4602      	mov	r2, r0
 8009b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b88:	1ad3      	subs	r3, r2, r3
 8009b8a:	2b64      	cmp	r3, #100	; 0x64
 8009b8c:	d901      	bls.n	8009b92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009b8e:	2303      	movs	r3, #3
 8009b90:	e342      	b.n	800a218 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009b92:	4b49      	ldr	r3, [pc, #292]	; (8009cb8 <HAL_RCC_OscConfig+0x244>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d1f0      	bne.n	8009b80 <HAL_RCC_OscConfig+0x10c>
 8009b9e:	e000      	b.n	8009ba2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f003 0302 	and.w	r3, r3, #2
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	f000 808c 	beq.w	8009cc8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009bb0:	4b41      	ldr	r3, [pc, #260]	; (8009cb8 <HAL_RCC_OscConfig+0x244>)
 8009bb2:	691b      	ldr	r3, [r3, #16]
 8009bb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009bb8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009bba:	4b3f      	ldr	r3, [pc, #252]	; (8009cb8 <HAL_RCC_OscConfig+0x244>)
 8009bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bbe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009bc0:	6a3b      	ldr	r3, [r7, #32]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d007      	beq.n	8009bd6 <HAL_RCC_OscConfig+0x162>
 8009bc6:	6a3b      	ldr	r3, [r7, #32]
 8009bc8:	2b18      	cmp	r3, #24
 8009bca:	d137      	bne.n	8009c3c <HAL_RCC_OscConfig+0x1c8>
 8009bcc:	69fb      	ldr	r3, [r7, #28]
 8009bce:	f003 0303 	and.w	r3, r3, #3
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d132      	bne.n	8009c3c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009bd6:	4b38      	ldr	r3, [pc, #224]	; (8009cb8 <HAL_RCC_OscConfig+0x244>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f003 0304 	and.w	r3, r3, #4
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d005      	beq.n	8009bee <HAL_RCC_OscConfig+0x17a>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	68db      	ldr	r3, [r3, #12]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d101      	bne.n	8009bee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009bea:	2301      	movs	r3, #1
 8009bec:	e314      	b.n	800a218 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009bee:	4b32      	ldr	r3, [pc, #200]	; (8009cb8 <HAL_RCC_OscConfig+0x244>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f023 0219 	bic.w	r2, r3, #25
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	68db      	ldr	r3, [r3, #12]
 8009bfa:	492f      	ldr	r1, [pc, #188]	; (8009cb8 <HAL_RCC_OscConfig+0x244>)
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c00:	f7fc fafe 	bl	8006200 <HAL_GetTick>
 8009c04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c06:	e008      	b.n	8009c1a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009c08:	f7fc fafa 	bl	8006200 <HAL_GetTick>
 8009c0c:	4602      	mov	r2, r0
 8009c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c10:	1ad3      	subs	r3, r2, r3
 8009c12:	2b02      	cmp	r3, #2
 8009c14:	d901      	bls.n	8009c1a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8009c16:	2303      	movs	r3, #3
 8009c18:	e2fe      	b.n	800a218 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c1a:	4b27      	ldr	r3, [pc, #156]	; (8009cb8 <HAL_RCC_OscConfig+0x244>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f003 0304 	and.w	r3, r3, #4
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d0f0      	beq.n	8009c08 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c26:	4b24      	ldr	r3, [pc, #144]	; (8009cb8 <HAL_RCC_OscConfig+0x244>)
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	691b      	ldr	r3, [r3, #16]
 8009c32:	061b      	lsls	r3, r3, #24
 8009c34:	4920      	ldr	r1, [pc, #128]	; (8009cb8 <HAL_RCC_OscConfig+0x244>)
 8009c36:	4313      	orrs	r3, r2
 8009c38:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009c3a:	e045      	b.n	8009cc8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	68db      	ldr	r3, [r3, #12]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d026      	beq.n	8009c92 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009c44:	4b1c      	ldr	r3, [pc, #112]	; (8009cb8 <HAL_RCC_OscConfig+0x244>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f023 0219 	bic.w	r2, r3, #25
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	68db      	ldr	r3, [r3, #12]
 8009c50:	4919      	ldr	r1, [pc, #100]	; (8009cb8 <HAL_RCC_OscConfig+0x244>)
 8009c52:	4313      	orrs	r3, r2
 8009c54:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c56:	f7fc fad3 	bl	8006200 <HAL_GetTick>
 8009c5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c5c:	e008      	b.n	8009c70 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009c5e:	f7fc facf 	bl	8006200 <HAL_GetTick>
 8009c62:	4602      	mov	r2, r0
 8009c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c66:	1ad3      	subs	r3, r2, r3
 8009c68:	2b02      	cmp	r3, #2
 8009c6a:	d901      	bls.n	8009c70 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009c6c:	2303      	movs	r3, #3
 8009c6e:	e2d3      	b.n	800a218 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c70:	4b11      	ldr	r3, [pc, #68]	; (8009cb8 <HAL_RCC_OscConfig+0x244>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f003 0304 	and.w	r3, r3, #4
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d0f0      	beq.n	8009c5e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c7c:	4b0e      	ldr	r3, [pc, #56]	; (8009cb8 <HAL_RCC_OscConfig+0x244>)
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	691b      	ldr	r3, [r3, #16]
 8009c88:	061b      	lsls	r3, r3, #24
 8009c8a:	490b      	ldr	r1, [pc, #44]	; (8009cb8 <HAL_RCC_OscConfig+0x244>)
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	604b      	str	r3, [r1, #4]
 8009c90:	e01a      	b.n	8009cc8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009c92:	4b09      	ldr	r3, [pc, #36]	; (8009cb8 <HAL_RCC_OscConfig+0x244>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4a08      	ldr	r2, [pc, #32]	; (8009cb8 <HAL_RCC_OscConfig+0x244>)
 8009c98:	f023 0301 	bic.w	r3, r3, #1
 8009c9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c9e:	f7fc faaf 	bl	8006200 <HAL_GetTick>
 8009ca2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009ca4:	e00a      	b.n	8009cbc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009ca6:	f7fc faab 	bl	8006200 <HAL_GetTick>
 8009caa:	4602      	mov	r2, r0
 8009cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cae:	1ad3      	subs	r3, r2, r3
 8009cb0:	2b02      	cmp	r3, #2
 8009cb2:	d903      	bls.n	8009cbc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009cb4:	2303      	movs	r3, #3
 8009cb6:	e2af      	b.n	800a218 <HAL_RCC_OscConfig+0x7a4>
 8009cb8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009cbc:	4b96      	ldr	r3, [pc, #600]	; (8009f18 <HAL_RCC_OscConfig+0x4a4>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f003 0304 	and.w	r3, r3, #4
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d1ee      	bne.n	8009ca6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f003 0310 	and.w	r3, r3, #16
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d06a      	beq.n	8009daa <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009cd4:	4b90      	ldr	r3, [pc, #576]	; (8009f18 <HAL_RCC_OscConfig+0x4a4>)
 8009cd6:	691b      	ldr	r3, [r3, #16]
 8009cd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009cdc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009cde:	4b8e      	ldr	r3, [pc, #568]	; (8009f18 <HAL_RCC_OscConfig+0x4a4>)
 8009ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ce2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009ce4:	69bb      	ldr	r3, [r7, #24]
 8009ce6:	2b08      	cmp	r3, #8
 8009ce8:	d007      	beq.n	8009cfa <HAL_RCC_OscConfig+0x286>
 8009cea:	69bb      	ldr	r3, [r7, #24]
 8009cec:	2b18      	cmp	r3, #24
 8009cee:	d11b      	bne.n	8009d28 <HAL_RCC_OscConfig+0x2b4>
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	f003 0303 	and.w	r3, r3, #3
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	d116      	bne.n	8009d28 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009cfa:	4b87      	ldr	r3, [pc, #540]	; (8009f18 <HAL_RCC_OscConfig+0x4a4>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d005      	beq.n	8009d12 <HAL_RCC_OscConfig+0x29e>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	69db      	ldr	r3, [r3, #28]
 8009d0a:	2b80      	cmp	r3, #128	; 0x80
 8009d0c:	d001      	beq.n	8009d12 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009d0e:	2301      	movs	r3, #1
 8009d10:	e282      	b.n	800a218 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009d12:	4b81      	ldr	r3, [pc, #516]	; (8009f18 <HAL_RCC_OscConfig+0x4a4>)
 8009d14:	68db      	ldr	r3, [r3, #12]
 8009d16:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6a1b      	ldr	r3, [r3, #32]
 8009d1e:	061b      	lsls	r3, r3, #24
 8009d20:	497d      	ldr	r1, [pc, #500]	; (8009f18 <HAL_RCC_OscConfig+0x4a4>)
 8009d22:	4313      	orrs	r3, r2
 8009d24:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009d26:	e040      	b.n	8009daa <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	69db      	ldr	r3, [r3, #28]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d023      	beq.n	8009d78 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009d30:	4b79      	ldr	r3, [pc, #484]	; (8009f18 <HAL_RCC_OscConfig+0x4a4>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4a78      	ldr	r2, [pc, #480]	; (8009f18 <HAL_RCC_OscConfig+0x4a4>)
 8009d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d3c:	f7fc fa60 	bl	8006200 <HAL_GetTick>
 8009d40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009d42:	e008      	b.n	8009d56 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009d44:	f7fc fa5c 	bl	8006200 <HAL_GetTick>
 8009d48:	4602      	mov	r2, r0
 8009d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4c:	1ad3      	subs	r3, r2, r3
 8009d4e:	2b02      	cmp	r3, #2
 8009d50:	d901      	bls.n	8009d56 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009d52:	2303      	movs	r3, #3
 8009d54:	e260      	b.n	800a218 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009d56:	4b70      	ldr	r3, [pc, #448]	; (8009f18 <HAL_RCC_OscConfig+0x4a4>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d0f0      	beq.n	8009d44 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009d62:	4b6d      	ldr	r3, [pc, #436]	; (8009f18 <HAL_RCC_OscConfig+0x4a4>)
 8009d64:	68db      	ldr	r3, [r3, #12]
 8009d66:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6a1b      	ldr	r3, [r3, #32]
 8009d6e:	061b      	lsls	r3, r3, #24
 8009d70:	4969      	ldr	r1, [pc, #420]	; (8009f18 <HAL_RCC_OscConfig+0x4a4>)
 8009d72:	4313      	orrs	r3, r2
 8009d74:	60cb      	str	r3, [r1, #12]
 8009d76:	e018      	b.n	8009daa <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009d78:	4b67      	ldr	r3, [pc, #412]	; (8009f18 <HAL_RCC_OscConfig+0x4a4>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a66      	ldr	r2, [pc, #408]	; (8009f18 <HAL_RCC_OscConfig+0x4a4>)
 8009d7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d84:	f7fc fa3c 	bl	8006200 <HAL_GetTick>
 8009d88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009d8a:	e008      	b.n	8009d9e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009d8c:	f7fc fa38 	bl	8006200 <HAL_GetTick>
 8009d90:	4602      	mov	r2, r0
 8009d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d94:	1ad3      	subs	r3, r2, r3
 8009d96:	2b02      	cmp	r3, #2
 8009d98:	d901      	bls.n	8009d9e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009d9a:	2303      	movs	r3, #3
 8009d9c:	e23c      	b.n	800a218 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009d9e:	4b5e      	ldr	r3, [pc, #376]	; (8009f18 <HAL_RCC_OscConfig+0x4a4>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d1f0      	bne.n	8009d8c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f003 0308 	and.w	r3, r3, #8
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d036      	beq.n	8009e24 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	695b      	ldr	r3, [r3, #20]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d019      	beq.n	8009df2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009dbe:	4b56      	ldr	r3, [pc, #344]	; (8009f18 <HAL_RCC_OscConfig+0x4a4>)
 8009dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dc2:	4a55      	ldr	r2, [pc, #340]	; (8009f18 <HAL_RCC_OscConfig+0x4a4>)
 8009dc4:	f043 0301 	orr.w	r3, r3, #1
 8009dc8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009dca:	f7fc fa19 	bl	8006200 <HAL_GetTick>
 8009dce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009dd0:	e008      	b.n	8009de4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009dd2:	f7fc fa15 	bl	8006200 <HAL_GetTick>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dda:	1ad3      	subs	r3, r2, r3
 8009ddc:	2b02      	cmp	r3, #2
 8009dde:	d901      	bls.n	8009de4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009de0:	2303      	movs	r3, #3
 8009de2:	e219      	b.n	800a218 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009de4:	4b4c      	ldr	r3, [pc, #304]	; (8009f18 <HAL_RCC_OscConfig+0x4a4>)
 8009de6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009de8:	f003 0302 	and.w	r3, r3, #2
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d0f0      	beq.n	8009dd2 <HAL_RCC_OscConfig+0x35e>
 8009df0:	e018      	b.n	8009e24 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009df2:	4b49      	ldr	r3, [pc, #292]	; (8009f18 <HAL_RCC_OscConfig+0x4a4>)
 8009df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009df6:	4a48      	ldr	r2, [pc, #288]	; (8009f18 <HAL_RCC_OscConfig+0x4a4>)
 8009df8:	f023 0301 	bic.w	r3, r3, #1
 8009dfc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009dfe:	f7fc f9ff 	bl	8006200 <HAL_GetTick>
 8009e02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009e04:	e008      	b.n	8009e18 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009e06:	f7fc f9fb 	bl	8006200 <HAL_GetTick>
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0e:	1ad3      	subs	r3, r2, r3
 8009e10:	2b02      	cmp	r3, #2
 8009e12:	d901      	bls.n	8009e18 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009e14:	2303      	movs	r3, #3
 8009e16:	e1ff      	b.n	800a218 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009e18:	4b3f      	ldr	r3, [pc, #252]	; (8009f18 <HAL_RCC_OscConfig+0x4a4>)
 8009e1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e1c:	f003 0302 	and.w	r3, r3, #2
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d1f0      	bne.n	8009e06 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f003 0320 	and.w	r3, r3, #32
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d036      	beq.n	8009e9e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	699b      	ldr	r3, [r3, #24]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d019      	beq.n	8009e6c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009e38:	4b37      	ldr	r3, [pc, #220]	; (8009f18 <HAL_RCC_OscConfig+0x4a4>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4a36      	ldr	r2, [pc, #216]	; (8009f18 <HAL_RCC_OscConfig+0x4a4>)
 8009e3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009e42:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009e44:	f7fc f9dc 	bl	8006200 <HAL_GetTick>
 8009e48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009e4a:	e008      	b.n	8009e5e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009e4c:	f7fc f9d8 	bl	8006200 <HAL_GetTick>
 8009e50:	4602      	mov	r2, r0
 8009e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e54:	1ad3      	subs	r3, r2, r3
 8009e56:	2b02      	cmp	r3, #2
 8009e58:	d901      	bls.n	8009e5e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009e5a:	2303      	movs	r3, #3
 8009e5c:	e1dc      	b.n	800a218 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009e5e:	4b2e      	ldr	r3, [pc, #184]	; (8009f18 <HAL_RCC_OscConfig+0x4a4>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d0f0      	beq.n	8009e4c <HAL_RCC_OscConfig+0x3d8>
 8009e6a:	e018      	b.n	8009e9e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009e6c:	4b2a      	ldr	r3, [pc, #168]	; (8009f18 <HAL_RCC_OscConfig+0x4a4>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a29      	ldr	r2, [pc, #164]	; (8009f18 <HAL_RCC_OscConfig+0x4a4>)
 8009e72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e76:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009e78:	f7fc f9c2 	bl	8006200 <HAL_GetTick>
 8009e7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009e7e:	e008      	b.n	8009e92 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009e80:	f7fc f9be 	bl	8006200 <HAL_GetTick>
 8009e84:	4602      	mov	r2, r0
 8009e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e88:	1ad3      	subs	r3, r2, r3
 8009e8a:	2b02      	cmp	r3, #2
 8009e8c:	d901      	bls.n	8009e92 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009e8e:	2303      	movs	r3, #3
 8009e90:	e1c2      	b.n	800a218 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009e92:	4b21      	ldr	r3, [pc, #132]	; (8009f18 <HAL_RCC_OscConfig+0x4a4>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d1f0      	bne.n	8009e80 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f003 0304 	and.w	r3, r3, #4
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	f000 8086 	beq.w	8009fb8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009eac:	4b1b      	ldr	r3, [pc, #108]	; (8009f1c <HAL_RCC_OscConfig+0x4a8>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a1a      	ldr	r2, [pc, #104]	; (8009f1c <HAL_RCC_OscConfig+0x4a8>)
 8009eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009eb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009eb8:	f7fc f9a2 	bl	8006200 <HAL_GetTick>
 8009ebc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009ebe:	e008      	b.n	8009ed2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ec0:	f7fc f99e 	bl	8006200 <HAL_GetTick>
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec8:	1ad3      	subs	r3, r2, r3
 8009eca:	2b64      	cmp	r3, #100	; 0x64
 8009ecc:	d901      	bls.n	8009ed2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8009ece:	2303      	movs	r3, #3
 8009ed0:	e1a2      	b.n	800a218 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009ed2:	4b12      	ldr	r3, [pc, #72]	; (8009f1c <HAL_RCC_OscConfig+0x4a8>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d0f0      	beq.n	8009ec0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	689b      	ldr	r3, [r3, #8]
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d106      	bne.n	8009ef4 <HAL_RCC_OscConfig+0x480>
 8009ee6:	4b0c      	ldr	r3, [pc, #48]	; (8009f18 <HAL_RCC_OscConfig+0x4a4>)
 8009ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eea:	4a0b      	ldr	r2, [pc, #44]	; (8009f18 <HAL_RCC_OscConfig+0x4a4>)
 8009eec:	f043 0301 	orr.w	r3, r3, #1
 8009ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8009ef2:	e032      	b.n	8009f5a <HAL_RCC_OscConfig+0x4e6>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d111      	bne.n	8009f20 <HAL_RCC_OscConfig+0x4ac>
 8009efc:	4b06      	ldr	r3, [pc, #24]	; (8009f18 <HAL_RCC_OscConfig+0x4a4>)
 8009efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f00:	4a05      	ldr	r2, [pc, #20]	; (8009f18 <HAL_RCC_OscConfig+0x4a4>)
 8009f02:	f023 0301 	bic.w	r3, r3, #1
 8009f06:	6713      	str	r3, [r2, #112]	; 0x70
 8009f08:	4b03      	ldr	r3, [pc, #12]	; (8009f18 <HAL_RCC_OscConfig+0x4a4>)
 8009f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f0c:	4a02      	ldr	r2, [pc, #8]	; (8009f18 <HAL_RCC_OscConfig+0x4a4>)
 8009f0e:	f023 0304 	bic.w	r3, r3, #4
 8009f12:	6713      	str	r3, [r2, #112]	; 0x70
 8009f14:	e021      	b.n	8009f5a <HAL_RCC_OscConfig+0x4e6>
 8009f16:	bf00      	nop
 8009f18:	58024400 	.word	0x58024400
 8009f1c:	58024800 	.word	0x58024800
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	689b      	ldr	r3, [r3, #8]
 8009f24:	2b05      	cmp	r3, #5
 8009f26:	d10c      	bne.n	8009f42 <HAL_RCC_OscConfig+0x4ce>
 8009f28:	4b83      	ldr	r3, [pc, #524]	; (800a138 <HAL_RCC_OscConfig+0x6c4>)
 8009f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f2c:	4a82      	ldr	r2, [pc, #520]	; (800a138 <HAL_RCC_OscConfig+0x6c4>)
 8009f2e:	f043 0304 	orr.w	r3, r3, #4
 8009f32:	6713      	str	r3, [r2, #112]	; 0x70
 8009f34:	4b80      	ldr	r3, [pc, #512]	; (800a138 <HAL_RCC_OscConfig+0x6c4>)
 8009f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f38:	4a7f      	ldr	r2, [pc, #508]	; (800a138 <HAL_RCC_OscConfig+0x6c4>)
 8009f3a:	f043 0301 	orr.w	r3, r3, #1
 8009f3e:	6713      	str	r3, [r2, #112]	; 0x70
 8009f40:	e00b      	b.n	8009f5a <HAL_RCC_OscConfig+0x4e6>
 8009f42:	4b7d      	ldr	r3, [pc, #500]	; (800a138 <HAL_RCC_OscConfig+0x6c4>)
 8009f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f46:	4a7c      	ldr	r2, [pc, #496]	; (800a138 <HAL_RCC_OscConfig+0x6c4>)
 8009f48:	f023 0301 	bic.w	r3, r3, #1
 8009f4c:	6713      	str	r3, [r2, #112]	; 0x70
 8009f4e:	4b7a      	ldr	r3, [pc, #488]	; (800a138 <HAL_RCC_OscConfig+0x6c4>)
 8009f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f52:	4a79      	ldr	r2, [pc, #484]	; (800a138 <HAL_RCC_OscConfig+0x6c4>)
 8009f54:	f023 0304 	bic.w	r3, r3, #4
 8009f58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	689b      	ldr	r3, [r3, #8]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d015      	beq.n	8009f8e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f62:	f7fc f94d 	bl	8006200 <HAL_GetTick>
 8009f66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009f68:	e00a      	b.n	8009f80 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f6a:	f7fc f949 	bl	8006200 <HAL_GetTick>
 8009f6e:	4602      	mov	r2, r0
 8009f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f72:	1ad3      	subs	r3, r2, r3
 8009f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d901      	bls.n	8009f80 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009f7c:	2303      	movs	r3, #3
 8009f7e:	e14b      	b.n	800a218 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009f80:	4b6d      	ldr	r3, [pc, #436]	; (800a138 <HAL_RCC_OscConfig+0x6c4>)
 8009f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f84:	f003 0302 	and.w	r3, r3, #2
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d0ee      	beq.n	8009f6a <HAL_RCC_OscConfig+0x4f6>
 8009f8c:	e014      	b.n	8009fb8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f8e:	f7fc f937 	bl	8006200 <HAL_GetTick>
 8009f92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009f94:	e00a      	b.n	8009fac <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f96:	f7fc f933 	bl	8006200 <HAL_GetTick>
 8009f9a:	4602      	mov	r2, r0
 8009f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f9e:	1ad3      	subs	r3, r2, r3
 8009fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d901      	bls.n	8009fac <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009fa8:	2303      	movs	r3, #3
 8009faa:	e135      	b.n	800a218 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009fac:	4b62      	ldr	r3, [pc, #392]	; (800a138 <HAL_RCC_OscConfig+0x6c4>)
 8009fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fb0:	f003 0302 	and.w	r3, r3, #2
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d1ee      	bne.n	8009f96 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	f000 812a 	beq.w	800a216 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009fc2:	4b5d      	ldr	r3, [pc, #372]	; (800a138 <HAL_RCC_OscConfig+0x6c4>)
 8009fc4:	691b      	ldr	r3, [r3, #16]
 8009fc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009fca:	2b18      	cmp	r3, #24
 8009fcc:	f000 80ba 	beq.w	800a144 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd4:	2b02      	cmp	r3, #2
 8009fd6:	f040 8095 	bne.w	800a104 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009fda:	4b57      	ldr	r3, [pc, #348]	; (800a138 <HAL_RCC_OscConfig+0x6c4>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4a56      	ldr	r2, [pc, #344]	; (800a138 <HAL_RCC_OscConfig+0x6c4>)
 8009fe0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009fe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fe6:	f7fc f90b 	bl	8006200 <HAL_GetTick>
 8009fea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009fec:	e008      	b.n	800a000 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009fee:	f7fc f907 	bl	8006200 <HAL_GetTick>
 8009ff2:	4602      	mov	r2, r0
 8009ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff6:	1ad3      	subs	r3, r2, r3
 8009ff8:	2b02      	cmp	r3, #2
 8009ffa:	d901      	bls.n	800a000 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009ffc:	2303      	movs	r3, #3
 8009ffe:	e10b      	b.n	800a218 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a000:	4b4d      	ldr	r3, [pc, #308]	; (800a138 <HAL_RCC_OscConfig+0x6c4>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d1f0      	bne.n	8009fee <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a00c:	4b4a      	ldr	r3, [pc, #296]	; (800a138 <HAL_RCC_OscConfig+0x6c4>)
 800a00e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a010:	4b4a      	ldr	r3, [pc, #296]	; (800a13c <HAL_RCC_OscConfig+0x6c8>)
 800a012:	4013      	ands	r3, r2
 800a014:	687a      	ldr	r2, [r7, #4]
 800a016:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a01c:	0112      	lsls	r2, r2, #4
 800a01e:	430a      	orrs	r2, r1
 800a020:	4945      	ldr	r1, [pc, #276]	; (800a138 <HAL_RCC_OscConfig+0x6c4>)
 800a022:	4313      	orrs	r3, r2
 800a024:	628b      	str	r3, [r1, #40]	; 0x28
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a02a:	3b01      	subs	r3, #1
 800a02c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a034:	3b01      	subs	r3, #1
 800a036:	025b      	lsls	r3, r3, #9
 800a038:	b29b      	uxth	r3, r3
 800a03a:	431a      	orrs	r2, r3
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a040:	3b01      	subs	r3, #1
 800a042:	041b      	lsls	r3, r3, #16
 800a044:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a048:	431a      	orrs	r2, r3
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a04e:	3b01      	subs	r3, #1
 800a050:	061b      	lsls	r3, r3, #24
 800a052:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a056:	4938      	ldr	r1, [pc, #224]	; (800a138 <HAL_RCC_OscConfig+0x6c4>)
 800a058:	4313      	orrs	r3, r2
 800a05a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a05c:	4b36      	ldr	r3, [pc, #216]	; (800a138 <HAL_RCC_OscConfig+0x6c4>)
 800a05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a060:	4a35      	ldr	r2, [pc, #212]	; (800a138 <HAL_RCC_OscConfig+0x6c4>)
 800a062:	f023 0301 	bic.w	r3, r3, #1
 800a066:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a068:	4b33      	ldr	r3, [pc, #204]	; (800a138 <HAL_RCC_OscConfig+0x6c4>)
 800a06a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a06c:	4b34      	ldr	r3, [pc, #208]	; (800a140 <HAL_RCC_OscConfig+0x6cc>)
 800a06e:	4013      	ands	r3, r2
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a074:	00d2      	lsls	r2, r2, #3
 800a076:	4930      	ldr	r1, [pc, #192]	; (800a138 <HAL_RCC_OscConfig+0x6c4>)
 800a078:	4313      	orrs	r3, r2
 800a07a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a07c:	4b2e      	ldr	r3, [pc, #184]	; (800a138 <HAL_RCC_OscConfig+0x6c4>)
 800a07e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a080:	f023 020c 	bic.w	r2, r3, #12
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a088:	492b      	ldr	r1, [pc, #172]	; (800a138 <HAL_RCC_OscConfig+0x6c4>)
 800a08a:	4313      	orrs	r3, r2
 800a08c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a08e:	4b2a      	ldr	r3, [pc, #168]	; (800a138 <HAL_RCC_OscConfig+0x6c4>)
 800a090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a092:	f023 0202 	bic.w	r2, r3, #2
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a09a:	4927      	ldr	r1, [pc, #156]	; (800a138 <HAL_RCC_OscConfig+0x6c4>)
 800a09c:	4313      	orrs	r3, r2
 800a09e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a0a0:	4b25      	ldr	r3, [pc, #148]	; (800a138 <HAL_RCC_OscConfig+0x6c4>)
 800a0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a4:	4a24      	ldr	r2, [pc, #144]	; (800a138 <HAL_RCC_OscConfig+0x6c4>)
 800a0a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a0aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0ac:	4b22      	ldr	r3, [pc, #136]	; (800a138 <HAL_RCC_OscConfig+0x6c4>)
 800a0ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b0:	4a21      	ldr	r2, [pc, #132]	; (800a138 <HAL_RCC_OscConfig+0x6c4>)
 800a0b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a0b8:	4b1f      	ldr	r3, [pc, #124]	; (800a138 <HAL_RCC_OscConfig+0x6c4>)
 800a0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0bc:	4a1e      	ldr	r2, [pc, #120]	; (800a138 <HAL_RCC_OscConfig+0x6c4>)
 800a0be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a0c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a0c4:	4b1c      	ldr	r3, [pc, #112]	; (800a138 <HAL_RCC_OscConfig+0x6c4>)
 800a0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0c8:	4a1b      	ldr	r2, [pc, #108]	; (800a138 <HAL_RCC_OscConfig+0x6c4>)
 800a0ca:	f043 0301 	orr.w	r3, r3, #1
 800a0ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a0d0:	4b19      	ldr	r3, [pc, #100]	; (800a138 <HAL_RCC_OscConfig+0x6c4>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4a18      	ldr	r2, [pc, #96]	; (800a138 <HAL_RCC_OscConfig+0x6c4>)
 800a0d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a0da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0dc:	f7fc f890 	bl	8006200 <HAL_GetTick>
 800a0e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a0e2:	e008      	b.n	800a0f6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a0e4:	f7fc f88c 	bl	8006200 <HAL_GetTick>
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ec:	1ad3      	subs	r3, r2, r3
 800a0ee:	2b02      	cmp	r3, #2
 800a0f0:	d901      	bls.n	800a0f6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800a0f2:	2303      	movs	r3, #3
 800a0f4:	e090      	b.n	800a218 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a0f6:	4b10      	ldr	r3, [pc, #64]	; (800a138 <HAL_RCC_OscConfig+0x6c4>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d0f0      	beq.n	800a0e4 <HAL_RCC_OscConfig+0x670>
 800a102:	e088      	b.n	800a216 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a104:	4b0c      	ldr	r3, [pc, #48]	; (800a138 <HAL_RCC_OscConfig+0x6c4>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4a0b      	ldr	r2, [pc, #44]	; (800a138 <HAL_RCC_OscConfig+0x6c4>)
 800a10a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a10e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a110:	f7fc f876 	bl	8006200 <HAL_GetTick>
 800a114:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a116:	e008      	b.n	800a12a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a118:	f7fc f872 	bl	8006200 <HAL_GetTick>
 800a11c:	4602      	mov	r2, r0
 800a11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a120:	1ad3      	subs	r3, r2, r3
 800a122:	2b02      	cmp	r3, #2
 800a124:	d901      	bls.n	800a12a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800a126:	2303      	movs	r3, #3
 800a128:	e076      	b.n	800a218 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a12a:	4b03      	ldr	r3, [pc, #12]	; (800a138 <HAL_RCC_OscConfig+0x6c4>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a132:	2b00      	cmp	r3, #0
 800a134:	d1f0      	bne.n	800a118 <HAL_RCC_OscConfig+0x6a4>
 800a136:	e06e      	b.n	800a216 <HAL_RCC_OscConfig+0x7a2>
 800a138:	58024400 	.word	0x58024400
 800a13c:	fffffc0c 	.word	0xfffffc0c
 800a140:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a144:	4b36      	ldr	r3, [pc, #216]	; (800a220 <HAL_RCC_OscConfig+0x7ac>)
 800a146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a148:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a14a:	4b35      	ldr	r3, [pc, #212]	; (800a220 <HAL_RCC_OscConfig+0x7ac>)
 800a14c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a14e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a154:	2b01      	cmp	r3, #1
 800a156:	d031      	beq.n	800a1bc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	f003 0203 	and.w	r2, r3, #3
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a162:	429a      	cmp	r2, r3
 800a164:	d12a      	bne.n	800a1bc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	091b      	lsrs	r3, r3, #4
 800a16a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a172:	429a      	cmp	r2, r3
 800a174:	d122      	bne.n	800a1bc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a180:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a182:	429a      	cmp	r2, r3
 800a184:	d11a      	bne.n	800a1bc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	0a5b      	lsrs	r3, r3, #9
 800a18a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a192:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a194:	429a      	cmp	r2, r3
 800a196:	d111      	bne.n	800a1bc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	0c1b      	lsrs	r3, r3, #16
 800a19c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d108      	bne.n	800a1bc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	0e1b      	lsrs	r3, r3, #24
 800a1ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1b6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d001      	beq.n	800a1c0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800a1bc:	2301      	movs	r3, #1
 800a1be:	e02b      	b.n	800a218 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a1c0:	4b17      	ldr	r3, [pc, #92]	; (800a220 <HAL_RCC_OscConfig+0x7ac>)
 800a1c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1c4:	08db      	lsrs	r3, r3, #3
 800a1c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a1ca:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1d0:	693a      	ldr	r2, [r7, #16]
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d01f      	beq.n	800a216 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a1d6:	4b12      	ldr	r3, [pc, #72]	; (800a220 <HAL_RCC_OscConfig+0x7ac>)
 800a1d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1da:	4a11      	ldr	r2, [pc, #68]	; (800a220 <HAL_RCC_OscConfig+0x7ac>)
 800a1dc:	f023 0301 	bic.w	r3, r3, #1
 800a1e0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a1e2:	f7fc f80d 	bl	8006200 <HAL_GetTick>
 800a1e6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a1e8:	bf00      	nop
 800a1ea:	f7fc f809 	bl	8006200 <HAL_GetTick>
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d0f9      	beq.n	800a1ea <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a1f6:	4b0a      	ldr	r3, [pc, #40]	; (800a220 <HAL_RCC_OscConfig+0x7ac>)
 800a1f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1fa:	4b0a      	ldr	r3, [pc, #40]	; (800a224 <HAL_RCC_OscConfig+0x7b0>)
 800a1fc:	4013      	ands	r3, r2
 800a1fe:	687a      	ldr	r2, [r7, #4]
 800a200:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a202:	00d2      	lsls	r2, r2, #3
 800a204:	4906      	ldr	r1, [pc, #24]	; (800a220 <HAL_RCC_OscConfig+0x7ac>)
 800a206:	4313      	orrs	r3, r2
 800a208:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a20a:	4b05      	ldr	r3, [pc, #20]	; (800a220 <HAL_RCC_OscConfig+0x7ac>)
 800a20c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a20e:	4a04      	ldr	r2, [pc, #16]	; (800a220 <HAL_RCC_OscConfig+0x7ac>)
 800a210:	f043 0301 	orr.w	r3, r3, #1
 800a214:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a216:	2300      	movs	r3, #0
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3730      	adds	r7, #48	; 0x30
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}
 800a220:	58024400 	.word	0x58024400
 800a224:	ffff0007 	.word	0xffff0007

0800a228 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b086      	sub	sp, #24
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d101      	bne.n	800a23c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a238:	2301      	movs	r3, #1
 800a23a:	e19c      	b.n	800a576 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a23c:	4b8a      	ldr	r3, [pc, #552]	; (800a468 <HAL_RCC_ClockConfig+0x240>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f003 030f 	and.w	r3, r3, #15
 800a244:	683a      	ldr	r2, [r7, #0]
 800a246:	429a      	cmp	r2, r3
 800a248:	d910      	bls.n	800a26c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a24a:	4b87      	ldr	r3, [pc, #540]	; (800a468 <HAL_RCC_ClockConfig+0x240>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f023 020f 	bic.w	r2, r3, #15
 800a252:	4985      	ldr	r1, [pc, #532]	; (800a468 <HAL_RCC_ClockConfig+0x240>)
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	4313      	orrs	r3, r2
 800a258:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a25a:	4b83      	ldr	r3, [pc, #524]	; (800a468 <HAL_RCC_ClockConfig+0x240>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f003 030f 	and.w	r3, r3, #15
 800a262:	683a      	ldr	r2, [r7, #0]
 800a264:	429a      	cmp	r2, r3
 800a266:	d001      	beq.n	800a26c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a268:	2301      	movs	r3, #1
 800a26a:	e184      	b.n	800a576 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f003 0304 	and.w	r3, r3, #4
 800a274:	2b00      	cmp	r3, #0
 800a276:	d010      	beq.n	800a29a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	691a      	ldr	r2, [r3, #16]
 800a27c:	4b7b      	ldr	r3, [pc, #492]	; (800a46c <HAL_RCC_ClockConfig+0x244>)
 800a27e:	699b      	ldr	r3, [r3, #24]
 800a280:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a284:	429a      	cmp	r2, r3
 800a286:	d908      	bls.n	800a29a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a288:	4b78      	ldr	r3, [pc, #480]	; (800a46c <HAL_RCC_ClockConfig+0x244>)
 800a28a:	699b      	ldr	r3, [r3, #24]
 800a28c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	691b      	ldr	r3, [r3, #16]
 800a294:	4975      	ldr	r1, [pc, #468]	; (800a46c <HAL_RCC_ClockConfig+0x244>)
 800a296:	4313      	orrs	r3, r2
 800a298:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f003 0308 	and.w	r3, r3, #8
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d010      	beq.n	800a2c8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	695a      	ldr	r2, [r3, #20]
 800a2aa:	4b70      	ldr	r3, [pc, #448]	; (800a46c <HAL_RCC_ClockConfig+0x244>)
 800a2ac:	69db      	ldr	r3, [r3, #28]
 800a2ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d908      	bls.n	800a2c8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a2b6:	4b6d      	ldr	r3, [pc, #436]	; (800a46c <HAL_RCC_ClockConfig+0x244>)
 800a2b8:	69db      	ldr	r3, [r3, #28]
 800a2ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	695b      	ldr	r3, [r3, #20]
 800a2c2:	496a      	ldr	r1, [pc, #424]	; (800a46c <HAL_RCC_ClockConfig+0x244>)
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f003 0310 	and.w	r3, r3, #16
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d010      	beq.n	800a2f6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	699a      	ldr	r2, [r3, #24]
 800a2d8:	4b64      	ldr	r3, [pc, #400]	; (800a46c <HAL_RCC_ClockConfig+0x244>)
 800a2da:	69db      	ldr	r3, [r3, #28]
 800a2dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d908      	bls.n	800a2f6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a2e4:	4b61      	ldr	r3, [pc, #388]	; (800a46c <HAL_RCC_ClockConfig+0x244>)
 800a2e6:	69db      	ldr	r3, [r3, #28]
 800a2e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	699b      	ldr	r3, [r3, #24]
 800a2f0:	495e      	ldr	r1, [pc, #376]	; (800a46c <HAL_RCC_ClockConfig+0x244>)
 800a2f2:	4313      	orrs	r3, r2
 800a2f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f003 0320 	and.w	r3, r3, #32
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d010      	beq.n	800a324 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	69da      	ldr	r2, [r3, #28]
 800a306:	4b59      	ldr	r3, [pc, #356]	; (800a46c <HAL_RCC_ClockConfig+0x244>)
 800a308:	6a1b      	ldr	r3, [r3, #32]
 800a30a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a30e:	429a      	cmp	r2, r3
 800a310:	d908      	bls.n	800a324 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a312:	4b56      	ldr	r3, [pc, #344]	; (800a46c <HAL_RCC_ClockConfig+0x244>)
 800a314:	6a1b      	ldr	r3, [r3, #32]
 800a316:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	69db      	ldr	r3, [r3, #28]
 800a31e:	4953      	ldr	r1, [pc, #332]	; (800a46c <HAL_RCC_ClockConfig+0x244>)
 800a320:	4313      	orrs	r3, r2
 800a322:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f003 0302 	and.w	r3, r3, #2
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d010      	beq.n	800a352 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	68da      	ldr	r2, [r3, #12]
 800a334:	4b4d      	ldr	r3, [pc, #308]	; (800a46c <HAL_RCC_ClockConfig+0x244>)
 800a336:	699b      	ldr	r3, [r3, #24]
 800a338:	f003 030f 	and.w	r3, r3, #15
 800a33c:	429a      	cmp	r2, r3
 800a33e:	d908      	bls.n	800a352 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a340:	4b4a      	ldr	r3, [pc, #296]	; (800a46c <HAL_RCC_ClockConfig+0x244>)
 800a342:	699b      	ldr	r3, [r3, #24]
 800a344:	f023 020f 	bic.w	r2, r3, #15
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	68db      	ldr	r3, [r3, #12]
 800a34c:	4947      	ldr	r1, [pc, #284]	; (800a46c <HAL_RCC_ClockConfig+0x244>)
 800a34e:	4313      	orrs	r3, r2
 800a350:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f003 0301 	and.w	r3, r3, #1
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d055      	beq.n	800a40a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a35e:	4b43      	ldr	r3, [pc, #268]	; (800a46c <HAL_RCC_ClockConfig+0x244>)
 800a360:	699b      	ldr	r3, [r3, #24]
 800a362:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	689b      	ldr	r3, [r3, #8]
 800a36a:	4940      	ldr	r1, [pc, #256]	; (800a46c <HAL_RCC_ClockConfig+0x244>)
 800a36c:	4313      	orrs	r3, r2
 800a36e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	685b      	ldr	r3, [r3, #4]
 800a374:	2b02      	cmp	r3, #2
 800a376:	d107      	bne.n	800a388 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a378:	4b3c      	ldr	r3, [pc, #240]	; (800a46c <HAL_RCC_ClockConfig+0x244>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a380:	2b00      	cmp	r3, #0
 800a382:	d121      	bne.n	800a3c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a384:	2301      	movs	r3, #1
 800a386:	e0f6      	b.n	800a576 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	2b03      	cmp	r3, #3
 800a38e:	d107      	bne.n	800a3a0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a390:	4b36      	ldr	r3, [pc, #216]	; (800a46c <HAL_RCC_ClockConfig+0x244>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d115      	bne.n	800a3c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a39c:	2301      	movs	r3, #1
 800a39e:	e0ea      	b.n	800a576 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d107      	bne.n	800a3b8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a3a8:	4b30      	ldr	r3, [pc, #192]	; (800a46c <HAL_RCC_ClockConfig+0x244>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d109      	bne.n	800a3c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	e0de      	b.n	800a576 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a3b8:	4b2c      	ldr	r3, [pc, #176]	; (800a46c <HAL_RCC_ClockConfig+0x244>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f003 0304 	and.w	r3, r3, #4
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d101      	bne.n	800a3c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	e0d6      	b.n	800a576 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a3c8:	4b28      	ldr	r3, [pc, #160]	; (800a46c <HAL_RCC_ClockConfig+0x244>)
 800a3ca:	691b      	ldr	r3, [r3, #16]
 800a3cc:	f023 0207 	bic.w	r2, r3, #7
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	685b      	ldr	r3, [r3, #4]
 800a3d4:	4925      	ldr	r1, [pc, #148]	; (800a46c <HAL_RCC_ClockConfig+0x244>)
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3da:	f7fb ff11 	bl	8006200 <HAL_GetTick>
 800a3de:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a3e0:	e00a      	b.n	800a3f8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a3e2:	f7fb ff0d 	bl	8006200 <HAL_GetTick>
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	1ad3      	subs	r3, r2, r3
 800a3ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d901      	bls.n	800a3f8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a3f4:	2303      	movs	r3, #3
 800a3f6:	e0be      	b.n	800a576 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a3f8:	4b1c      	ldr	r3, [pc, #112]	; (800a46c <HAL_RCC_ClockConfig+0x244>)
 800a3fa:	691b      	ldr	r3, [r3, #16]
 800a3fc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	00db      	lsls	r3, r3, #3
 800a406:	429a      	cmp	r2, r3
 800a408:	d1eb      	bne.n	800a3e2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f003 0302 	and.w	r3, r3, #2
 800a412:	2b00      	cmp	r3, #0
 800a414:	d010      	beq.n	800a438 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	68da      	ldr	r2, [r3, #12]
 800a41a:	4b14      	ldr	r3, [pc, #80]	; (800a46c <HAL_RCC_ClockConfig+0x244>)
 800a41c:	699b      	ldr	r3, [r3, #24]
 800a41e:	f003 030f 	and.w	r3, r3, #15
 800a422:	429a      	cmp	r2, r3
 800a424:	d208      	bcs.n	800a438 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a426:	4b11      	ldr	r3, [pc, #68]	; (800a46c <HAL_RCC_ClockConfig+0x244>)
 800a428:	699b      	ldr	r3, [r3, #24]
 800a42a:	f023 020f 	bic.w	r2, r3, #15
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	68db      	ldr	r3, [r3, #12]
 800a432:	490e      	ldr	r1, [pc, #56]	; (800a46c <HAL_RCC_ClockConfig+0x244>)
 800a434:	4313      	orrs	r3, r2
 800a436:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a438:	4b0b      	ldr	r3, [pc, #44]	; (800a468 <HAL_RCC_ClockConfig+0x240>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f003 030f 	and.w	r3, r3, #15
 800a440:	683a      	ldr	r2, [r7, #0]
 800a442:	429a      	cmp	r2, r3
 800a444:	d214      	bcs.n	800a470 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a446:	4b08      	ldr	r3, [pc, #32]	; (800a468 <HAL_RCC_ClockConfig+0x240>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f023 020f 	bic.w	r2, r3, #15
 800a44e:	4906      	ldr	r1, [pc, #24]	; (800a468 <HAL_RCC_ClockConfig+0x240>)
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	4313      	orrs	r3, r2
 800a454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a456:	4b04      	ldr	r3, [pc, #16]	; (800a468 <HAL_RCC_ClockConfig+0x240>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f003 030f 	and.w	r3, r3, #15
 800a45e:	683a      	ldr	r2, [r7, #0]
 800a460:	429a      	cmp	r2, r3
 800a462:	d005      	beq.n	800a470 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a464:	2301      	movs	r3, #1
 800a466:	e086      	b.n	800a576 <HAL_RCC_ClockConfig+0x34e>
 800a468:	52002000 	.word	0x52002000
 800a46c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f003 0304 	and.w	r3, r3, #4
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d010      	beq.n	800a49e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	691a      	ldr	r2, [r3, #16]
 800a480:	4b3f      	ldr	r3, [pc, #252]	; (800a580 <HAL_RCC_ClockConfig+0x358>)
 800a482:	699b      	ldr	r3, [r3, #24]
 800a484:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a488:	429a      	cmp	r2, r3
 800a48a:	d208      	bcs.n	800a49e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a48c:	4b3c      	ldr	r3, [pc, #240]	; (800a580 <HAL_RCC_ClockConfig+0x358>)
 800a48e:	699b      	ldr	r3, [r3, #24]
 800a490:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	691b      	ldr	r3, [r3, #16]
 800a498:	4939      	ldr	r1, [pc, #228]	; (800a580 <HAL_RCC_ClockConfig+0x358>)
 800a49a:	4313      	orrs	r3, r2
 800a49c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f003 0308 	and.w	r3, r3, #8
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d010      	beq.n	800a4cc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	695a      	ldr	r2, [r3, #20]
 800a4ae:	4b34      	ldr	r3, [pc, #208]	; (800a580 <HAL_RCC_ClockConfig+0x358>)
 800a4b0:	69db      	ldr	r3, [r3, #28]
 800a4b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d208      	bcs.n	800a4cc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a4ba:	4b31      	ldr	r3, [pc, #196]	; (800a580 <HAL_RCC_ClockConfig+0x358>)
 800a4bc:	69db      	ldr	r3, [r3, #28]
 800a4be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	695b      	ldr	r3, [r3, #20]
 800a4c6:	492e      	ldr	r1, [pc, #184]	; (800a580 <HAL_RCC_ClockConfig+0x358>)
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f003 0310 	and.w	r3, r3, #16
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d010      	beq.n	800a4fa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	699a      	ldr	r2, [r3, #24]
 800a4dc:	4b28      	ldr	r3, [pc, #160]	; (800a580 <HAL_RCC_ClockConfig+0x358>)
 800a4de:	69db      	ldr	r3, [r3, #28]
 800a4e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d208      	bcs.n	800a4fa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a4e8:	4b25      	ldr	r3, [pc, #148]	; (800a580 <HAL_RCC_ClockConfig+0x358>)
 800a4ea:	69db      	ldr	r3, [r3, #28]
 800a4ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	699b      	ldr	r3, [r3, #24]
 800a4f4:	4922      	ldr	r1, [pc, #136]	; (800a580 <HAL_RCC_ClockConfig+0x358>)
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f003 0320 	and.w	r3, r3, #32
 800a502:	2b00      	cmp	r3, #0
 800a504:	d010      	beq.n	800a528 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	69da      	ldr	r2, [r3, #28]
 800a50a:	4b1d      	ldr	r3, [pc, #116]	; (800a580 <HAL_RCC_ClockConfig+0x358>)
 800a50c:	6a1b      	ldr	r3, [r3, #32]
 800a50e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a512:	429a      	cmp	r2, r3
 800a514:	d208      	bcs.n	800a528 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a516:	4b1a      	ldr	r3, [pc, #104]	; (800a580 <HAL_RCC_ClockConfig+0x358>)
 800a518:	6a1b      	ldr	r3, [r3, #32]
 800a51a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	69db      	ldr	r3, [r3, #28]
 800a522:	4917      	ldr	r1, [pc, #92]	; (800a580 <HAL_RCC_ClockConfig+0x358>)
 800a524:	4313      	orrs	r3, r2
 800a526:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a528:	f000 f834 	bl	800a594 <HAL_RCC_GetSysClockFreq>
 800a52c:	4602      	mov	r2, r0
 800a52e:	4b14      	ldr	r3, [pc, #80]	; (800a580 <HAL_RCC_ClockConfig+0x358>)
 800a530:	699b      	ldr	r3, [r3, #24]
 800a532:	0a1b      	lsrs	r3, r3, #8
 800a534:	f003 030f 	and.w	r3, r3, #15
 800a538:	4912      	ldr	r1, [pc, #72]	; (800a584 <HAL_RCC_ClockConfig+0x35c>)
 800a53a:	5ccb      	ldrb	r3, [r1, r3]
 800a53c:	f003 031f 	and.w	r3, r3, #31
 800a540:	fa22 f303 	lsr.w	r3, r2, r3
 800a544:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a546:	4b0e      	ldr	r3, [pc, #56]	; (800a580 <HAL_RCC_ClockConfig+0x358>)
 800a548:	699b      	ldr	r3, [r3, #24]
 800a54a:	f003 030f 	and.w	r3, r3, #15
 800a54e:	4a0d      	ldr	r2, [pc, #52]	; (800a584 <HAL_RCC_ClockConfig+0x35c>)
 800a550:	5cd3      	ldrb	r3, [r2, r3]
 800a552:	f003 031f 	and.w	r3, r3, #31
 800a556:	693a      	ldr	r2, [r7, #16]
 800a558:	fa22 f303 	lsr.w	r3, r2, r3
 800a55c:	4a0a      	ldr	r2, [pc, #40]	; (800a588 <HAL_RCC_ClockConfig+0x360>)
 800a55e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a560:	4a0a      	ldr	r2, [pc, #40]	; (800a58c <HAL_RCC_ClockConfig+0x364>)
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a566:	4b0a      	ldr	r3, [pc, #40]	; (800a590 <HAL_RCC_ClockConfig+0x368>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4618      	mov	r0, r3
 800a56c:	f7fb fdfe 	bl	800616c <HAL_InitTick>
 800a570:	4603      	mov	r3, r0
 800a572:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a574:	7bfb      	ldrb	r3, [r7, #15]
}
 800a576:	4618      	mov	r0, r3
 800a578:	3718      	adds	r7, #24
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
 800a57e:	bf00      	nop
 800a580:	58024400 	.word	0x58024400
 800a584:	08010814 	.word	0x08010814
 800a588:	24000058 	.word	0x24000058
 800a58c:	24000054 	.word	0x24000054
 800a590:	2400005c 	.word	0x2400005c

0800a594 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a594:	b480      	push	{r7}
 800a596:	b089      	sub	sp, #36	; 0x24
 800a598:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a59a:	4bb3      	ldr	r3, [pc, #716]	; (800a868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a59c:	691b      	ldr	r3, [r3, #16]
 800a59e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a5a2:	2b18      	cmp	r3, #24
 800a5a4:	f200 8155 	bhi.w	800a852 <HAL_RCC_GetSysClockFreq+0x2be>
 800a5a8:	a201      	add	r2, pc, #4	; (adr r2, 800a5b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a5aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ae:	bf00      	nop
 800a5b0:	0800a615 	.word	0x0800a615
 800a5b4:	0800a853 	.word	0x0800a853
 800a5b8:	0800a853 	.word	0x0800a853
 800a5bc:	0800a853 	.word	0x0800a853
 800a5c0:	0800a853 	.word	0x0800a853
 800a5c4:	0800a853 	.word	0x0800a853
 800a5c8:	0800a853 	.word	0x0800a853
 800a5cc:	0800a853 	.word	0x0800a853
 800a5d0:	0800a63b 	.word	0x0800a63b
 800a5d4:	0800a853 	.word	0x0800a853
 800a5d8:	0800a853 	.word	0x0800a853
 800a5dc:	0800a853 	.word	0x0800a853
 800a5e0:	0800a853 	.word	0x0800a853
 800a5e4:	0800a853 	.word	0x0800a853
 800a5e8:	0800a853 	.word	0x0800a853
 800a5ec:	0800a853 	.word	0x0800a853
 800a5f0:	0800a641 	.word	0x0800a641
 800a5f4:	0800a853 	.word	0x0800a853
 800a5f8:	0800a853 	.word	0x0800a853
 800a5fc:	0800a853 	.word	0x0800a853
 800a600:	0800a853 	.word	0x0800a853
 800a604:	0800a853 	.word	0x0800a853
 800a608:	0800a853 	.word	0x0800a853
 800a60c:	0800a853 	.word	0x0800a853
 800a610:	0800a647 	.word	0x0800a647
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a614:	4b94      	ldr	r3, [pc, #592]	; (800a868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f003 0320 	and.w	r3, r3, #32
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d009      	beq.n	800a634 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a620:	4b91      	ldr	r3, [pc, #580]	; (800a868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	08db      	lsrs	r3, r3, #3
 800a626:	f003 0303 	and.w	r3, r3, #3
 800a62a:	4a90      	ldr	r2, [pc, #576]	; (800a86c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a62c:	fa22 f303 	lsr.w	r3, r2, r3
 800a630:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a632:	e111      	b.n	800a858 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a634:	4b8d      	ldr	r3, [pc, #564]	; (800a86c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a636:	61bb      	str	r3, [r7, #24]
      break;
 800a638:	e10e      	b.n	800a858 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a63a:	4b8d      	ldr	r3, [pc, #564]	; (800a870 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a63c:	61bb      	str	r3, [r7, #24]
      break;
 800a63e:	e10b      	b.n	800a858 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a640:	4b8c      	ldr	r3, [pc, #560]	; (800a874 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a642:	61bb      	str	r3, [r7, #24]
      break;
 800a644:	e108      	b.n	800a858 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a646:	4b88      	ldr	r3, [pc, #544]	; (800a868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a64a:	f003 0303 	and.w	r3, r3, #3
 800a64e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a650:	4b85      	ldr	r3, [pc, #532]	; (800a868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a654:	091b      	lsrs	r3, r3, #4
 800a656:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a65a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a65c:	4b82      	ldr	r3, [pc, #520]	; (800a868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a660:	f003 0301 	and.w	r3, r3, #1
 800a664:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a666:	4b80      	ldr	r3, [pc, #512]	; (800a868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a66a:	08db      	lsrs	r3, r3, #3
 800a66c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a670:	68fa      	ldr	r2, [r7, #12]
 800a672:	fb02 f303 	mul.w	r3, r2, r3
 800a676:	ee07 3a90 	vmov	s15, r3
 800a67a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a67e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	2b00      	cmp	r3, #0
 800a686:	f000 80e1 	beq.w	800a84c <HAL_RCC_GetSysClockFreq+0x2b8>
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	2b02      	cmp	r3, #2
 800a68e:	f000 8083 	beq.w	800a798 <HAL_RCC_GetSysClockFreq+0x204>
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	2b02      	cmp	r3, #2
 800a696:	f200 80a1 	bhi.w	800a7dc <HAL_RCC_GetSysClockFreq+0x248>
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d003      	beq.n	800a6a8 <HAL_RCC_GetSysClockFreq+0x114>
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	2b01      	cmp	r3, #1
 800a6a4:	d056      	beq.n	800a754 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a6a6:	e099      	b.n	800a7dc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a6a8:	4b6f      	ldr	r3, [pc, #444]	; (800a868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f003 0320 	and.w	r3, r3, #32
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d02d      	beq.n	800a710 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a6b4:	4b6c      	ldr	r3, [pc, #432]	; (800a868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	08db      	lsrs	r3, r3, #3
 800a6ba:	f003 0303 	and.w	r3, r3, #3
 800a6be:	4a6b      	ldr	r2, [pc, #428]	; (800a86c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a6c0:	fa22 f303 	lsr.w	r3, r2, r3
 800a6c4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	ee07 3a90 	vmov	s15, r3
 800a6cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	ee07 3a90 	vmov	s15, r3
 800a6d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6de:	4b62      	ldr	r3, [pc, #392]	; (800a868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6e6:	ee07 3a90 	vmov	s15, r3
 800a6ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6ee:	ed97 6a02 	vldr	s12, [r7, #8]
 800a6f2:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a878 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a6f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a70a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a70e:	e087      	b.n	800a820 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	ee07 3a90 	vmov	s15, r3
 800a716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a71a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a87c <HAL_RCC_GetSysClockFreq+0x2e8>
 800a71e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a722:	4b51      	ldr	r3, [pc, #324]	; (800a868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a72a:	ee07 3a90 	vmov	s15, r3
 800a72e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a732:	ed97 6a02 	vldr	s12, [r7, #8]
 800a736:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a878 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a73a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a73e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a742:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a74a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a74e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a752:	e065      	b.n	800a820 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	ee07 3a90 	vmov	s15, r3
 800a75a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a75e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a880 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a766:	4b40      	ldr	r3, [pc, #256]	; (800a868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a76a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a76e:	ee07 3a90 	vmov	s15, r3
 800a772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a776:	ed97 6a02 	vldr	s12, [r7, #8]
 800a77a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a878 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a77e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a786:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a78a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a78e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a792:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a796:	e043      	b.n	800a820 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	ee07 3a90 	vmov	s15, r3
 800a79e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7a2:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a884 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a7a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7aa:	4b2f      	ldr	r3, [pc, #188]	; (800a868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7b2:	ee07 3a90 	vmov	s15, r3
 800a7b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7ba:	ed97 6a02 	vldr	s12, [r7, #8]
 800a7be:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a878 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a7c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a7da:	e021      	b.n	800a820 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	ee07 3a90 	vmov	s15, r3
 800a7e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7e6:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a880 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a7ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7ee:	4b1e      	ldr	r3, [pc, #120]	; (800a868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7f6:	ee07 3a90 	vmov	s15, r3
 800a7fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7fe:	ed97 6a02 	vldr	s12, [r7, #8]
 800a802:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a878 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a80a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a80e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a81a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a81e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a820:	4b11      	ldr	r3, [pc, #68]	; (800a868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a824:	0a5b      	lsrs	r3, r3, #9
 800a826:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a82a:	3301      	adds	r3, #1
 800a82c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	ee07 3a90 	vmov	s15, r3
 800a834:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a838:	edd7 6a07 	vldr	s13, [r7, #28]
 800a83c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a840:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a844:	ee17 3a90 	vmov	r3, s15
 800a848:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a84a:	e005      	b.n	800a858 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a84c:	2300      	movs	r3, #0
 800a84e:	61bb      	str	r3, [r7, #24]
      break;
 800a850:	e002      	b.n	800a858 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a852:	4b07      	ldr	r3, [pc, #28]	; (800a870 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a854:	61bb      	str	r3, [r7, #24]
      break;
 800a856:	bf00      	nop
  }

  return sysclockfreq;
 800a858:	69bb      	ldr	r3, [r7, #24]
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3724      	adds	r7, #36	; 0x24
 800a85e:	46bd      	mov	sp, r7
 800a860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a864:	4770      	bx	lr
 800a866:	bf00      	nop
 800a868:	58024400 	.word	0x58024400
 800a86c:	03d09000 	.word	0x03d09000
 800a870:	003d0900 	.word	0x003d0900
 800a874:	007a1200 	.word	0x007a1200
 800a878:	46000000 	.word	0x46000000
 800a87c:	4c742400 	.word	0x4c742400
 800a880:	4a742400 	.word	0x4a742400
 800a884:	4af42400 	.word	0x4af42400

0800a888 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b082      	sub	sp, #8
 800a88c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a88e:	f7ff fe81 	bl	800a594 <HAL_RCC_GetSysClockFreq>
 800a892:	4602      	mov	r2, r0
 800a894:	4b10      	ldr	r3, [pc, #64]	; (800a8d8 <HAL_RCC_GetHCLKFreq+0x50>)
 800a896:	699b      	ldr	r3, [r3, #24]
 800a898:	0a1b      	lsrs	r3, r3, #8
 800a89a:	f003 030f 	and.w	r3, r3, #15
 800a89e:	490f      	ldr	r1, [pc, #60]	; (800a8dc <HAL_RCC_GetHCLKFreq+0x54>)
 800a8a0:	5ccb      	ldrb	r3, [r1, r3]
 800a8a2:	f003 031f 	and.w	r3, r3, #31
 800a8a6:	fa22 f303 	lsr.w	r3, r2, r3
 800a8aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a8ac:	4b0a      	ldr	r3, [pc, #40]	; (800a8d8 <HAL_RCC_GetHCLKFreq+0x50>)
 800a8ae:	699b      	ldr	r3, [r3, #24]
 800a8b0:	f003 030f 	and.w	r3, r3, #15
 800a8b4:	4a09      	ldr	r2, [pc, #36]	; (800a8dc <HAL_RCC_GetHCLKFreq+0x54>)
 800a8b6:	5cd3      	ldrb	r3, [r2, r3]
 800a8b8:	f003 031f 	and.w	r3, r3, #31
 800a8bc:	687a      	ldr	r2, [r7, #4]
 800a8be:	fa22 f303 	lsr.w	r3, r2, r3
 800a8c2:	4a07      	ldr	r2, [pc, #28]	; (800a8e0 <HAL_RCC_GetHCLKFreq+0x58>)
 800a8c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a8c6:	4a07      	ldr	r2, [pc, #28]	; (800a8e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a8cc:	4b04      	ldr	r3, [pc, #16]	; (800a8e0 <HAL_RCC_GetHCLKFreq+0x58>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3708      	adds	r7, #8
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}
 800a8d8:	58024400 	.word	0x58024400
 800a8dc:	08010814 	.word	0x08010814
 800a8e0:	24000058 	.word	0x24000058
 800a8e4:	24000054 	.word	0x24000054

0800a8e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a8ec:	f7ff ffcc 	bl	800a888 <HAL_RCC_GetHCLKFreq>
 800a8f0:	4602      	mov	r2, r0
 800a8f2:	4b06      	ldr	r3, [pc, #24]	; (800a90c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a8f4:	69db      	ldr	r3, [r3, #28]
 800a8f6:	091b      	lsrs	r3, r3, #4
 800a8f8:	f003 0307 	and.w	r3, r3, #7
 800a8fc:	4904      	ldr	r1, [pc, #16]	; (800a910 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a8fe:	5ccb      	ldrb	r3, [r1, r3]
 800a900:	f003 031f 	and.w	r3, r3, #31
 800a904:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a908:	4618      	mov	r0, r3
 800a90a:	bd80      	pop	{r7, pc}
 800a90c:	58024400 	.word	0x58024400
 800a910:	08010814 	.word	0x08010814

0800a914 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a918:	f7ff ffb6 	bl	800a888 <HAL_RCC_GetHCLKFreq>
 800a91c:	4602      	mov	r2, r0
 800a91e:	4b06      	ldr	r3, [pc, #24]	; (800a938 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a920:	69db      	ldr	r3, [r3, #28]
 800a922:	0a1b      	lsrs	r3, r3, #8
 800a924:	f003 0307 	and.w	r3, r3, #7
 800a928:	4904      	ldr	r1, [pc, #16]	; (800a93c <HAL_RCC_GetPCLK2Freq+0x28>)
 800a92a:	5ccb      	ldrb	r3, [r1, r3]
 800a92c:	f003 031f 	and.w	r3, r3, #31
 800a930:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a934:	4618      	mov	r0, r3
 800a936:	bd80      	pop	{r7, pc}
 800a938:	58024400 	.word	0x58024400
 800a93c:	08010814 	.word	0x08010814

0800a940 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a944:	b0c6      	sub	sp, #280	; 0x118
 800a946:	af00      	add	r7, sp, #0
 800a948:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a94c:	2300      	movs	r3, #0
 800a94e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a952:	2300      	movs	r3, #0
 800a954:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a958:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a960:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a964:	2500      	movs	r5, #0
 800a966:	ea54 0305 	orrs.w	r3, r4, r5
 800a96a:	d049      	beq.n	800aa00 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a96c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a970:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a972:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a976:	d02f      	beq.n	800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a978:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a97c:	d828      	bhi.n	800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a97e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a982:	d01a      	beq.n	800a9ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a984:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a988:	d822      	bhi.n	800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d003      	beq.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a98e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a992:	d007      	beq.n	800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a994:	e01c      	b.n	800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a996:	4bab      	ldr	r3, [pc, #684]	; (800ac44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a99a:	4aaa      	ldr	r2, [pc, #680]	; (800ac44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a99c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a9a2:	e01a      	b.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a9a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9a8:	3308      	adds	r3, #8
 800a9aa:	2102      	movs	r1, #2
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f001 fc25 	bl	800c1fc <RCCEx_PLL2_Config>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a9b8:	e00f      	b.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a9ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9be:	3328      	adds	r3, #40	; 0x28
 800a9c0:	2102      	movs	r1, #2
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f001 fccc 	bl	800c360 <RCCEx_PLL3_Config>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a9ce:	e004      	b.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a9d6:	e000      	b.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a9d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9da:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d10a      	bne.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a9e2:	4b98      	ldr	r3, [pc, #608]	; (800ac44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a9e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9e6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a9ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9f0:	4a94      	ldr	r2, [pc, #592]	; (800ac44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a9f2:	430b      	orrs	r3, r1
 800a9f4:	6513      	str	r3, [r2, #80]	; 0x50
 800a9f6:	e003      	b.n	800aa00 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a9fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800aa00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa08:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800aa0c:	f04f 0900 	mov.w	r9, #0
 800aa10:	ea58 0309 	orrs.w	r3, r8, r9
 800aa14:	d047      	beq.n	800aaa6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800aa16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa1c:	2b04      	cmp	r3, #4
 800aa1e:	d82a      	bhi.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800aa20:	a201      	add	r2, pc, #4	; (adr r2, 800aa28 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800aa22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa26:	bf00      	nop
 800aa28:	0800aa3d 	.word	0x0800aa3d
 800aa2c:	0800aa4b 	.word	0x0800aa4b
 800aa30:	0800aa61 	.word	0x0800aa61
 800aa34:	0800aa7f 	.word	0x0800aa7f
 800aa38:	0800aa7f 	.word	0x0800aa7f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa3c:	4b81      	ldr	r3, [pc, #516]	; (800ac44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa40:	4a80      	ldr	r2, [pc, #512]	; (800ac44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa48:	e01a      	b.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa4e:	3308      	adds	r3, #8
 800aa50:	2100      	movs	r1, #0
 800aa52:	4618      	mov	r0, r3
 800aa54:	f001 fbd2 	bl	800c1fc <RCCEx_PLL2_Config>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa5e:	e00f      	b.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa64:	3328      	adds	r3, #40	; 0x28
 800aa66:	2100      	movs	r1, #0
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f001 fc79 	bl	800c360 <RCCEx_PLL3_Config>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa74:	e004      	b.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa76:	2301      	movs	r3, #1
 800aa78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aa7c:	e000      	b.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800aa7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa80:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d10a      	bne.n	800aa9e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800aa88:	4b6e      	ldr	r3, [pc, #440]	; (800ac44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa8c:	f023 0107 	bic.w	r1, r3, #7
 800aa90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa96:	4a6b      	ldr	r2, [pc, #428]	; (800ac44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa98:	430b      	orrs	r3, r1
 800aa9a:	6513      	str	r3, [r2, #80]	; 0x50
 800aa9c:	e003      	b.n	800aaa6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa9e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aaa2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800aaa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaae:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800aab2:	f04f 0b00 	mov.w	fp, #0
 800aab6:	ea5a 030b 	orrs.w	r3, sl, fp
 800aaba:	d05b      	beq.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800aabc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aac0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aac4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800aac8:	d03b      	beq.n	800ab42 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800aaca:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800aace:	d834      	bhi.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800aad0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aad4:	d037      	beq.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800aad6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aada:	d82e      	bhi.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800aadc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aae0:	d033      	beq.n	800ab4a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800aae2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aae6:	d828      	bhi.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800aae8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aaec:	d01a      	beq.n	800ab24 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800aaee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aaf2:	d822      	bhi.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d003      	beq.n	800ab00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800aaf8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aafc:	d007      	beq.n	800ab0e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800aafe:	e01c      	b.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab00:	4b50      	ldr	r3, [pc, #320]	; (800ac44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ab02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab04:	4a4f      	ldr	r2, [pc, #316]	; (800ac44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ab06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ab0c:	e01e      	b.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab12:	3308      	adds	r3, #8
 800ab14:	2100      	movs	r1, #0
 800ab16:	4618      	mov	r0, r3
 800ab18:	f001 fb70 	bl	800c1fc <RCCEx_PLL2_Config>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ab22:	e013      	b.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab28:	3328      	adds	r3, #40	; 0x28
 800ab2a:	2100      	movs	r1, #0
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f001 fc17 	bl	800c360 <RCCEx_PLL3_Config>
 800ab32:	4603      	mov	r3, r0
 800ab34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ab38:	e008      	b.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ab40:	e004      	b.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ab42:	bf00      	nop
 800ab44:	e002      	b.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ab46:	bf00      	nop
 800ab48:	e000      	b.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ab4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab4c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d10b      	bne.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ab54:	4b3b      	ldr	r3, [pc, #236]	; (800ac44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ab56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab58:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800ab5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ab64:	4a37      	ldr	r2, [pc, #220]	; (800ac44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ab66:	430b      	orrs	r3, r1
 800ab68:	6593      	str	r3, [r2, #88]	; 0x58
 800ab6a:	e003      	b.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab6c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab70:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ab74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab7c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800ab80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ab84:	2300      	movs	r3, #0
 800ab86:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ab8a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800ab8e:	460b      	mov	r3, r1
 800ab90:	4313      	orrs	r3, r2
 800ab92:	d05d      	beq.n	800ac50 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800ab94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab98:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ab9c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800aba0:	d03b      	beq.n	800ac1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800aba2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800aba6:	d834      	bhi.n	800ac12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aba8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800abac:	d037      	beq.n	800ac1e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800abae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800abb2:	d82e      	bhi.n	800ac12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800abb4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800abb8:	d033      	beq.n	800ac22 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800abba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800abbe:	d828      	bhi.n	800ac12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800abc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800abc4:	d01a      	beq.n	800abfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800abc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800abca:	d822      	bhi.n	800ac12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d003      	beq.n	800abd8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800abd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800abd4:	d007      	beq.n	800abe6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800abd6:	e01c      	b.n	800ac12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abd8:	4b1a      	ldr	r3, [pc, #104]	; (800ac44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800abda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abdc:	4a19      	ldr	r2, [pc, #100]	; (800ac44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800abde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abe2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800abe4:	e01e      	b.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800abe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abea:	3308      	adds	r3, #8
 800abec:	2100      	movs	r1, #0
 800abee:	4618      	mov	r0, r3
 800abf0:	f001 fb04 	bl	800c1fc <RCCEx_PLL2_Config>
 800abf4:	4603      	mov	r3, r0
 800abf6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800abfa:	e013      	b.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800abfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac00:	3328      	adds	r3, #40	; 0x28
 800ac02:	2100      	movs	r1, #0
 800ac04:	4618      	mov	r0, r3
 800ac06:	f001 fbab 	bl	800c360 <RCCEx_PLL3_Config>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ac10:	e008      	b.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ac12:	2301      	movs	r3, #1
 800ac14:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ac18:	e004      	b.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ac1a:	bf00      	nop
 800ac1c:	e002      	b.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ac1e:	bf00      	nop
 800ac20:	e000      	b.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ac22:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac24:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d10d      	bne.n	800ac48 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ac2c:	4b05      	ldr	r3, [pc, #20]	; (800ac44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ac2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac30:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800ac34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac38:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ac3c:	4a01      	ldr	r2, [pc, #4]	; (800ac44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ac3e:	430b      	orrs	r3, r1
 800ac40:	6593      	str	r3, [r2, #88]	; 0x58
 800ac42:	e005      	b.n	800ac50 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800ac44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac4c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800ac50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac58:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800ac5c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ac60:	2300      	movs	r3, #0
 800ac62:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ac66:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800ac6a:	460b      	mov	r3, r1
 800ac6c:	4313      	orrs	r3, r2
 800ac6e:	d03a      	beq.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800ac70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac76:	2b30      	cmp	r3, #48	; 0x30
 800ac78:	d01f      	beq.n	800acba <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800ac7a:	2b30      	cmp	r3, #48	; 0x30
 800ac7c:	d819      	bhi.n	800acb2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800ac7e:	2b20      	cmp	r3, #32
 800ac80:	d00c      	beq.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800ac82:	2b20      	cmp	r3, #32
 800ac84:	d815      	bhi.n	800acb2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d019      	beq.n	800acbe <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800ac8a:	2b10      	cmp	r3, #16
 800ac8c:	d111      	bne.n	800acb2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac8e:	4baa      	ldr	r3, [pc, #680]	; (800af38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac92:	4aa9      	ldr	r2, [pc, #676]	; (800af38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800ac9a:	e011      	b.n	800acc0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ac9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aca0:	3308      	adds	r3, #8
 800aca2:	2102      	movs	r1, #2
 800aca4:	4618      	mov	r0, r3
 800aca6:	f001 faa9 	bl	800c1fc <RCCEx_PLL2_Config>
 800acaa:	4603      	mov	r3, r0
 800acac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800acb0:	e006      	b.n	800acc0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800acb2:	2301      	movs	r3, #1
 800acb4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800acb8:	e002      	b.n	800acc0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800acba:	bf00      	nop
 800acbc:	e000      	b.n	800acc0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800acbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800acc0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d10a      	bne.n	800acde <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800acc8:	4b9b      	ldr	r3, [pc, #620]	; (800af38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800acca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800accc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800acd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acd6:	4a98      	ldr	r2, [pc, #608]	; (800af38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800acd8:	430b      	orrs	r3, r1
 800acda:	64d3      	str	r3, [r2, #76]	; 0x4c
 800acdc:	e003      	b.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acde:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ace2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ace6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acee:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800acf2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800acf6:	2300      	movs	r3, #0
 800acf8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800acfc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800ad00:	460b      	mov	r3, r1
 800ad02:	4313      	orrs	r3, r2
 800ad04:	d051      	beq.n	800adaa <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ad06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad10:	d035      	beq.n	800ad7e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800ad12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad16:	d82e      	bhi.n	800ad76 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ad18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ad1c:	d031      	beq.n	800ad82 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800ad1e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ad22:	d828      	bhi.n	800ad76 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ad24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad28:	d01a      	beq.n	800ad60 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800ad2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad2e:	d822      	bhi.n	800ad76 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d003      	beq.n	800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800ad34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad38:	d007      	beq.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800ad3a:	e01c      	b.n	800ad76 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad3c:	4b7e      	ldr	r3, [pc, #504]	; (800af38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ad3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad40:	4a7d      	ldr	r2, [pc, #500]	; (800af38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ad42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ad48:	e01c      	b.n	800ad84 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ad4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad4e:	3308      	adds	r3, #8
 800ad50:	2100      	movs	r1, #0
 800ad52:	4618      	mov	r0, r3
 800ad54:	f001 fa52 	bl	800c1fc <RCCEx_PLL2_Config>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ad5e:	e011      	b.n	800ad84 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ad60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad64:	3328      	adds	r3, #40	; 0x28
 800ad66:	2100      	movs	r1, #0
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f001 faf9 	bl	800c360 <RCCEx_PLL3_Config>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ad74:	e006      	b.n	800ad84 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad76:	2301      	movs	r3, #1
 800ad78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ad7c:	e002      	b.n	800ad84 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800ad7e:	bf00      	nop
 800ad80:	e000      	b.n	800ad84 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800ad82:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d10a      	bne.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ad8c:	4b6a      	ldr	r3, [pc, #424]	; (800af38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ad8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad90:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800ad94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad9a:	4a67      	ldr	r2, [pc, #412]	; (800af38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ad9c:	430b      	orrs	r3, r1
 800ad9e:	6513      	str	r3, [r2, #80]	; 0x50
 800ada0:	e003      	b.n	800adaa <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ada2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ada6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800adaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800adb6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800adba:	2300      	movs	r3, #0
 800adbc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800adc0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800adc4:	460b      	mov	r3, r1
 800adc6:	4313      	orrs	r3, r2
 800adc8:	d053      	beq.n	800ae72 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800adca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800add0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800add4:	d033      	beq.n	800ae3e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800add6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800adda:	d82c      	bhi.n	800ae36 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800addc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ade0:	d02f      	beq.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800ade2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ade6:	d826      	bhi.n	800ae36 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ade8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800adec:	d02b      	beq.n	800ae46 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800adee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800adf2:	d820      	bhi.n	800ae36 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800adf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800adf8:	d012      	beq.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800adfa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800adfe:	d81a      	bhi.n	800ae36 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d022      	beq.n	800ae4a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800ae04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae08:	d115      	bne.n	800ae36 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae0e:	3308      	adds	r3, #8
 800ae10:	2101      	movs	r1, #1
 800ae12:	4618      	mov	r0, r3
 800ae14:	f001 f9f2 	bl	800c1fc <RCCEx_PLL2_Config>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ae1e:	e015      	b.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ae20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae24:	3328      	adds	r3, #40	; 0x28
 800ae26:	2101      	movs	r1, #1
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f001 fa99 	bl	800c360 <RCCEx_PLL3_Config>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ae34:	e00a      	b.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae36:	2301      	movs	r3, #1
 800ae38:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ae3c:	e006      	b.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ae3e:	bf00      	nop
 800ae40:	e004      	b.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ae42:	bf00      	nop
 800ae44:	e002      	b.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ae46:	bf00      	nop
 800ae48:	e000      	b.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ae4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae4c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d10a      	bne.n	800ae6a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ae54:	4b38      	ldr	r3, [pc, #224]	; (800af38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ae56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae58:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800ae5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae62:	4a35      	ldr	r2, [pc, #212]	; (800af38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ae64:	430b      	orrs	r3, r1
 800ae66:	6513      	str	r3, [r2, #80]	; 0x50
 800ae68:	e003      	b.n	800ae72 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae6a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae6e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ae72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae7a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800ae7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ae82:	2300      	movs	r3, #0
 800ae84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ae88:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ae8c:	460b      	mov	r3, r1
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	d058      	beq.n	800af44 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800ae92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ae9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ae9e:	d033      	beq.n	800af08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800aea0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aea4:	d82c      	bhi.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800aea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aeaa:	d02f      	beq.n	800af0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800aeac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aeb0:	d826      	bhi.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800aeb2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aeb6:	d02b      	beq.n	800af10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800aeb8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aebc:	d820      	bhi.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800aebe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aec2:	d012      	beq.n	800aeea <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800aec4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aec8:	d81a      	bhi.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d022      	beq.n	800af14 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800aece:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aed2:	d115      	bne.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aed8:	3308      	adds	r3, #8
 800aeda:	2101      	movs	r1, #1
 800aedc:	4618      	mov	r0, r3
 800aede:	f001 f98d 	bl	800c1fc <RCCEx_PLL2_Config>
 800aee2:	4603      	mov	r3, r0
 800aee4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800aee8:	e015      	b.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aeea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeee:	3328      	adds	r3, #40	; 0x28
 800aef0:	2101      	movs	r1, #1
 800aef2:	4618      	mov	r0, r3
 800aef4:	f001 fa34 	bl	800c360 <RCCEx_PLL3_Config>
 800aef8:	4603      	mov	r3, r0
 800aefa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800aefe:	e00a      	b.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800af00:	2301      	movs	r3, #1
 800af02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800af06:	e006      	b.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800af08:	bf00      	nop
 800af0a:	e004      	b.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800af0c:	bf00      	nop
 800af0e:	e002      	b.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800af10:	bf00      	nop
 800af12:	e000      	b.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800af14:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af16:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d10e      	bne.n	800af3c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800af1e:	4b06      	ldr	r3, [pc, #24]	; (800af38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800af20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af22:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800af26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af2a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800af2e:	4a02      	ldr	r2, [pc, #8]	; (800af38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800af30:	430b      	orrs	r3, r1
 800af32:	6593      	str	r3, [r2, #88]	; 0x58
 800af34:	e006      	b.n	800af44 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800af36:	bf00      	nop
 800af38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af40:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800af44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af4c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800af50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800af54:	2300      	movs	r3, #0
 800af56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800af5a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800af5e:	460b      	mov	r3, r1
 800af60:	4313      	orrs	r3, r2
 800af62:	d037      	beq.n	800afd4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800af64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af6e:	d00e      	beq.n	800af8e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800af70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af74:	d816      	bhi.n	800afa4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800af76:	2b00      	cmp	r3, #0
 800af78:	d018      	beq.n	800afac <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800af7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af7e:	d111      	bne.n	800afa4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af80:	4bc4      	ldr	r3, [pc, #784]	; (800b294 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af84:	4ac3      	ldr	r2, [pc, #780]	; (800b294 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800af8c:	e00f      	b.n	800afae <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800af8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af92:	3308      	adds	r3, #8
 800af94:	2101      	movs	r1, #1
 800af96:	4618      	mov	r0, r3
 800af98:	f001 f930 	bl	800c1fc <RCCEx_PLL2_Config>
 800af9c:	4603      	mov	r3, r0
 800af9e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800afa2:	e004      	b.n	800afae <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800afa4:	2301      	movs	r3, #1
 800afa6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800afaa:	e000      	b.n	800afae <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800afac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800afae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d10a      	bne.n	800afcc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800afb6:	4bb7      	ldr	r3, [pc, #732]	; (800b294 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afba:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800afbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afc4:	4ab3      	ldr	r2, [pc, #716]	; (800b294 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afc6:	430b      	orrs	r3, r1
 800afc8:	6513      	str	r3, [r2, #80]	; 0x50
 800afca:	e003      	b.n	800afd4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afcc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800afd0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800afd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afdc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800afe0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800afe4:	2300      	movs	r3, #0
 800afe6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800afea:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800afee:	460b      	mov	r3, r1
 800aff0:	4313      	orrs	r3, r2
 800aff2:	d039      	beq.n	800b068 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800aff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800affa:	2b03      	cmp	r3, #3
 800affc:	d81c      	bhi.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800affe:	a201      	add	r2, pc, #4	; (adr r2, 800b004 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800b000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b004:	0800b041 	.word	0x0800b041
 800b008:	0800b015 	.word	0x0800b015
 800b00c:	0800b023 	.word	0x0800b023
 800b010:	0800b041 	.word	0x0800b041
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b014:	4b9f      	ldr	r3, [pc, #636]	; (800b294 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b018:	4a9e      	ldr	r2, [pc, #632]	; (800b294 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b01a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b01e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b020:	e00f      	b.n	800b042 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b022:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b026:	3308      	adds	r3, #8
 800b028:	2102      	movs	r1, #2
 800b02a:	4618      	mov	r0, r3
 800b02c:	f001 f8e6 	bl	800c1fc <RCCEx_PLL2_Config>
 800b030:	4603      	mov	r3, r0
 800b032:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b036:	e004      	b.n	800b042 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b038:	2301      	movs	r3, #1
 800b03a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b03e:	e000      	b.n	800b042 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800b040:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b042:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b046:	2b00      	cmp	r3, #0
 800b048:	d10a      	bne.n	800b060 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b04a:	4b92      	ldr	r3, [pc, #584]	; (800b294 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b04c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b04e:	f023 0103 	bic.w	r1, r3, #3
 800b052:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b058:	4a8e      	ldr	r2, [pc, #568]	; (800b294 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b05a:	430b      	orrs	r3, r1
 800b05c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b05e:	e003      	b.n	800b068 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b060:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b064:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b068:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b070:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b074:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b078:	2300      	movs	r3, #0
 800b07a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b07e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b082:	460b      	mov	r3, r1
 800b084:	4313      	orrs	r3, r2
 800b086:	f000 8099 	beq.w	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b08a:	4b83      	ldr	r3, [pc, #524]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	4a82      	ldr	r2, [pc, #520]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b094:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b096:	f7fb f8b3 	bl	8006200 <HAL_GetTick>
 800b09a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b09e:	e00b      	b.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b0a0:	f7fb f8ae 	bl	8006200 <HAL_GetTick>
 800b0a4:	4602      	mov	r2, r0
 800b0a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b0aa:	1ad3      	subs	r3, r2, r3
 800b0ac:	2b64      	cmp	r3, #100	; 0x64
 800b0ae:	d903      	bls.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800b0b0:	2303      	movs	r3, #3
 800b0b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b0b6:	e005      	b.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b0b8:	4b77      	ldr	r3, [pc, #476]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d0ed      	beq.n	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800b0c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d173      	bne.n	800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b0cc:	4b71      	ldr	r3, [pc, #452]	; (800b294 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b0d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b0d8:	4053      	eors	r3, r2
 800b0da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d015      	beq.n	800b10e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b0e2:	4b6c      	ldr	r3, [pc, #432]	; (800b294 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b0ea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b0ee:	4b69      	ldr	r3, [pc, #420]	; (800b294 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0f2:	4a68      	ldr	r2, [pc, #416]	; (800b294 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b0f8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b0fa:	4b66      	ldr	r3, [pc, #408]	; (800b294 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0fe:	4a65      	ldr	r2, [pc, #404]	; (800b294 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b100:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b104:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b106:	4a63      	ldr	r2, [pc, #396]	; (800b294 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b108:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b10c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b10e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b112:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b11a:	d118      	bne.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b11c:	f7fb f870 	bl	8006200 <HAL_GetTick>
 800b120:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b124:	e00d      	b.n	800b142 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b126:	f7fb f86b 	bl	8006200 <HAL_GetTick>
 800b12a:	4602      	mov	r2, r0
 800b12c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b130:	1ad2      	subs	r2, r2, r3
 800b132:	f241 3388 	movw	r3, #5000	; 0x1388
 800b136:	429a      	cmp	r2, r3
 800b138:	d903      	bls.n	800b142 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800b13a:	2303      	movs	r3, #3
 800b13c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800b140:	e005      	b.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b142:	4b54      	ldr	r3, [pc, #336]	; (800b294 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b146:	f003 0302 	and.w	r3, r3, #2
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d0eb      	beq.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800b14e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b152:	2b00      	cmp	r3, #0
 800b154:	d129      	bne.n	800b1aa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b156:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b15a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b15e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b162:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b166:	d10e      	bne.n	800b186 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800b168:	4b4a      	ldr	r3, [pc, #296]	; (800b294 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b16a:	691b      	ldr	r3, [r3, #16]
 800b16c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b170:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b174:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b178:	091a      	lsrs	r2, r3, #4
 800b17a:	4b48      	ldr	r3, [pc, #288]	; (800b29c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800b17c:	4013      	ands	r3, r2
 800b17e:	4a45      	ldr	r2, [pc, #276]	; (800b294 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b180:	430b      	orrs	r3, r1
 800b182:	6113      	str	r3, [r2, #16]
 800b184:	e005      	b.n	800b192 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800b186:	4b43      	ldr	r3, [pc, #268]	; (800b294 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b188:	691b      	ldr	r3, [r3, #16]
 800b18a:	4a42      	ldr	r2, [pc, #264]	; (800b294 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b18c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b190:	6113      	str	r3, [r2, #16]
 800b192:	4b40      	ldr	r3, [pc, #256]	; (800b294 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b194:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b196:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b19a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b19e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b1a2:	4a3c      	ldr	r2, [pc, #240]	; (800b294 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b1a4:	430b      	orrs	r3, r1
 800b1a6:	6713      	str	r3, [r2, #112]	; 0x70
 800b1a8:	e008      	b.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b1aa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1ae:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800b1b2:	e003      	b.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1b8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b1bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c4:	f002 0301 	and.w	r3, r2, #1
 800b1c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b1d2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b1d6:	460b      	mov	r3, r1
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	f000 808f 	beq.w	800b2fc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b1de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1e4:	2b28      	cmp	r3, #40	; 0x28
 800b1e6:	d871      	bhi.n	800b2cc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800b1e8:	a201      	add	r2, pc, #4	; (adr r2, 800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800b1ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ee:	bf00      	nop
 800b1f0:	0800b2d5 	.word	0x0800b2d5
 800b1f4:	0800b2cd 	.word	0x0800b2cd
 800b1f8:	0800b2cd 	.word	0x0800b2cd
 800b1fc:	0800b2cd 	.word	0x0800b2cd
 800b200:	0800b2cd 	.word	0x0800b2cd
 800b204:	0800b2cd 	.word	0x0800b2cd
 800b208:	0800b2cd 	.word	0x0800b2cd
 800b20c:	0800b2cd 	.word	0x0800b2cd
 800b210:	0800b2a1 	.word	0x0800b2a1
 800b214:	0800b2cd 	.word	0x0800b2cd
 800b218:	0800b2cd 	.word	0x0800b2cd
 800b21c:	0800b2cd 	.word	0x0800b2cd
 800b220:	0800b2cd 	.word	0x0800b2cd
 800b224:	0800b2cd 	.word	0x0800b2cd
 800b228:	0800b2cd 	.word	0x0800b2cd
 800b22c:	0800b2cd 	.word	0x0800b2cd
 800b230:	0800b2b7 	.word	0x0800b2b7
 800b234:	0800b2cd 	.word	0x0800b2cd
 800b238:	0800b2cd 	.word	0x0800b2cd
 800b23c:	0800b2cd 	.word	0x0800b2cd
 800b240:	0800b2cd 	.word	0x0800b2cd
 800b244:	0800b2cd 	.word	0x0800b2cd
 800b248:	0800b2cd 	.word	0x0800b2cd
 800b24c:	0800b2cd 	.word	0x0800b2cd
 800b250:	0800b2d5 	.word	0x0800b2d5
 800b254:	0800b2cd 	.word	0x0800b2cd
 800b258:	0800b2cd 	.word	0x0800b2cd
 800b25c:	0800b2cd 	.word	0x0800b2cd
 800b260:	0800b2cd 	.word	0x0800b2cd
 800b264:	0800b2cd 	.word	0x0800b2cd
 800b268:	0800b2cd 	.word	0x0800b2cd
 800b26c:	0800b2cd 	.word	0x0800b2cd
 800b270:	0800b2d5 	.word	0x0800b2d5
 800b274:	0800b2cd 	.word	0x0800b2cd
 800b278:	0800b2cd 	.word	0x0800b2cd
 800b27c:	0800b2cd 	.word	0x0800b2cd
 800b280:	0800b2cd 	.word	0x0800b2cd
 800b284:	0800b2cd 	.word	0x0800b2cd
 800b288:	0800b2cd 	.word	0x0800b2cd
 800b28c:	0800b2cd 	.word	0x0800b2cd
 800b290:	0800b2d5 	.word	0x0800b2d5
 800b294:	58024400 	.word	0x58024400
 800b298:	58024800 	.word	0x58024800
 800b29c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b2a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2a4:	3308      	adds	r3, #8
 800b2a6:	2101      	movs	r1, #1
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f000 ffa7 	bl	800c1fc <RCCEx_PLL2_Config>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b2b4:	e00f      	b.n	800b2d6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b2b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2ba:	3328      	adds	r3, #40	; 0x28
 800b2bc:	2101      	movs	r1, #1
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f001 f84e 	bl	800c360 <RCCEx_PLL3_Config>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b2ca:	e004      	b.n	800b2d6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b2d2:	e000      	b.n	800b2d6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800b2d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d10a      	bne.n	800b2f4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b2de:	4bbf      	ldr	r3, [pc, #764]	; (800b5dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b2e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2e2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b2e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b2ec:	4abb      	ldr	r2, [pc, #748]	; (800b5dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b2ee:	430b      	orrs	r3, r1
 800b2f0:	6553      	str	r3, [r2, #84]	; 0x54
 800b2f2:	e003      	b.n	800b2fc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2f8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b2fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b304:	f002 0302 	and.w	r3, r2, #2
 800b308:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b30c:	2300      	movs	r3, #0
 800b30e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b312:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b316:	460b      	mov	r3, r1
 800b318:	4313      	orrs	r3, r2
 800b31a:	d041      	beq.n	800b3a0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b31c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b322:	2b05      	cmp	r3, #5
 800b324:	d824      	bhi.n	800b370 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800b326:	a201      	add	r2, pc, #4	; (adr r2, 800b32c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800b328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b32c:	0800b379 	.word	0x0800b379
 800b330:	0800b345 	.word	0x0800b345
 800b334:	0800b35b 	.word	0x0800b35b
 800b338:	0800b379 	.word	0x0800b379
 800b33c:	0800b379 	.word	0x0800b379
 800b340:	0800b379 	.word	0x0800b379
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b344:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b348:	3308      	adds	r3, #8
 800b34a:	2101      	movs	r1, #1
 800b34c:	4618      	mov	r0, r3
 800b34e:	f000 ff55 	bl	800c1fc <RCCEx_PLL2_Config>
 800b352:	4603      	mov	r3, r0
 800b354:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b358:	e00f      	b.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b35a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b35e:	3328      	adds	r3, #40	; 0x28
 800b360:	2101      	movs	r1, #1
 800b362:	4618      	mov	r0, r3
 800b364:	f000 fffc 	bl	800c360 <RCCEx_PLL3_Config>
 800b368:	4603      	mov	r3, r0
 800b36a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b36e:	e004      	b.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b370:	2301      	movs	r3, #1
 800b372:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b376:	e000      	b.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800b378:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b37a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d10a      	bne.n	800b398 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b382:	4b96      	ldr	r3, [pc, #600]	; (800b5dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b386:	f023 0107 	bic.w	r1, r3, #7
 800b38a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b38e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b390:	4a92      	ldr	r2, [pc, #584]	; (800b5dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b392:	430b      	orrs	r3, r1
 800b394:	6553      	str	r3, [r2, #84]	; 0x54
 800b396:	e003      	b.n	800b3a0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b398:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b39c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b3a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a8:	f002 0304 	and.w	r3, r2, #4
 800b3ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b3b6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b3ba:	460b      	mov	r3, r1
 800b3bc:	4313      	orrs	r3, r2
 800b3be:	d044      	beq.n	800b44a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b3c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3c8:	2b05      	cmp	r3, #5
 800b3ca:	d825      	bhi.n	800b418 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800b3cc:	a201      	add	r2, pc, #4	; (adr r2, 800b3d4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800b3ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3d2:	bf00      	nop
 800b3d4:	0800b421 	.word	0x0800b421
 800b3d8:	0800b3ed 	.word	0x0800b3ed
 800b3dc:	0800b403 	.word	0x0800b403
 800b3e0:	0800b421 	.word	0x0800b421
 800b3e4:	0800b421 	.word	0x0800b421
 800b3e8:	0800b421 	.word	0x0800b421
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b3ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3f0:	3308      	adds	r3, #8
 800b3f2:	2101      	movs	r1, #1
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	f000 ff01 	bl	800c1fc <RCCEx_PLL2_Config>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b400:	e00f      	b.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b402:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b406:	3328      	adds	r3, #40	; 0x28
 800b408:	2101      	movs	r1, #1
 800b40a:	4618      	mov	r0, r3
 800b40c:	f000 ffa8 	bl	800c360 <RCCEx_PLL3_Config>
 800b410:	4603      	mov	r3, r0
 800b412:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b416:	e004      	b.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b418:	2301      	movs	r3, #1
 800b41a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b41e:	e000      	b.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800b420:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b422:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b426:	2b00      	cmp	r3, #0
 800b428:	d10b      	bne.n	800b442 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b42a:	4b6c      	ldr	r3, [pc, #432]	; (800b5dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b42c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b42e:	f023 0107 	bic.w	r1, r3, #7
 800b432:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b43a:	4a68      	ldr	r2, [pc, #416]	; (800b5dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b43c:	430b      	orrs	r3, r1
 800b43e:	6593      	str	r3, [r2, #88]	; 0x58
 800b440:	e003      	b.n	800b44a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b442:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b446:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b44a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b452:	f002 0320 	and.w	r3, r2, #32
 800b456:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b45a:	2300      	movs	r3, #0
 800b45c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b460:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b464:	460b      	mov	r3, r1
 800b466:	4313      	orrs	r3, r2
 800b468:	d055      	beq.n	800b516 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b46a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b46e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b472:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b476:	d033      	beq.n	800b4e0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800b478:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b47c:	d82c      	bhi.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b47e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b482:	d02f      	beq.n	800b4e4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b488:	d826      	bhi.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b48a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b48e:	d02b      	beq.n	800b4e8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b490:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b494:	d820      	bhi.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b496:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b49a:	d012      	beq.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800b49c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4a0:	d81a      	bhi.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d022      	beq.n	800b4ec <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b4a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b4aa:	d115      	bne.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b4ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4b0:	3308      	adds	r3, #8
 800b4b2:	2100      	movs	r1, #0
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f000 fea1 	bl	800c1fc <RCCEx_PLL2_Config>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b4c0:	e015      	b.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b4c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4c6:	3328      	adds	r3, #40	; 0x28
 800b4c8:	2102      	movs	r1, #2
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f000 ff48 	bl	800c360 <RCCEx_PLL3_Config>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b4d6:	e00a      	b.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4d8:	2301      	movs	r3, #1
 800b4da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b4de:	e006      	b.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b4e0:	bf00      	nop
 800b4e2:	e004      	b.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b4e4:	bf00      	nop
 800b4e6:	e002      	b.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b4e8:	bf00      	nop
 800b4ea:	e000      	b.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b4ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4ee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d10b      	bne.n	800b50e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b4f6:	4b39      	ldr	r3, [pc, #228]	; (800b5dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b4f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4fa:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b4fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b502:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b506:	4a35      	ldr	r2, [pc, #212]	; (800b5dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b508:	430b      	orrs	r3, r1
 800b50a:	6553      	str	r3, [r2, #84]	; 0x54
 800b50c:	e003      	b.n	800b516 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b50e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b512:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b516:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b51e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b522:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b526:	2300      	movs	r3, #0
 800b528:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b52c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b530:	460b      	mov	r3, r1
 800b532:	4313      	orrs	r3, r2
 800b534:	d058      	beq.n	800b5e8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b536:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b53a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b53e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b542:	d033      	beq.n	800b5ac <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800b544:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b548:	d82c      	bhi.n	800b5a4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b54a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b54e:	d02f      	beq.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b554:	d826      	bhi.n	800b5a4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b556:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b55a:	d02b      	beq.n	800b5b4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b55c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b560:	d820      	bhi.n	800b5a4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b562:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b566:	d012      	beq.n	800b58e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800b568:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b56c:	d81a      	bhi.n	800b5a4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d022      	beq.n	800b5b8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b576:	d115      	bne.n	800b5a4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b578:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b57c:	3308      	adds	r3, #8
 800b57e:	2100      	movs	r1, #0
 800b580:	4618      	mov	r0, r3
 800b582:	f000 fe3b 	bl	800c1fc <RCCEx_PLL2_Config>
 800b586:	4603      	mov	r3, r0
 800b588:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b58c:	e015      	b.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b58e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b592:	3328      	adds	r3, #40	; 0x28
 800b594:	2102      	movs	r1, #2
 800b596:	4618      	mov	r0, r3
 800b598:	f000 fee2 	bl	800c360 <RCCEx_PLL3_Config>
 800b59c:	4603      	mov	r3, r0
 800b59e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b5a2:	e00a      	b.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b5aa:	e006      	b.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b5ac:	bf00      	nop
 800b5ae:	e004      	b.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b5b0:	bf00      	nop
 800b5b2:	e002      	b.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b5b4:	bf00      	nop
 800b5b6:	e000      	b.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b5b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d10e      	bne.n	800b5e0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b5c2:	4b06      	ldr	r3, [pc, #24]	; (800b5dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b5c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5c6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b5ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b5d2:	4a02      	ldr	r2, [pc, #8]	; (800b5dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b5d4:	430b      	orrs	r3, r1
 800b5d6:	6593      	str	r3, [r2, #88]	; 0x58
 800b5d8:	e006      	b.n	800b5e8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800b5da:	bf00      	nop
 800b5dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b5e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b5f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b5fe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b602:	460b      	mov	r3, r1
 800b604:	4313      	orrs	r3, r2
 800b606:	d055      	beq.n	800b6b4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b608:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b60c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b610:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b614:	d033      	beq.n	800b67e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800b616:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b61a:	d82c      	bhi.n	800b676 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b61c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b620:	d02f      	beq.n	800b682 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b622:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b626:	d826      	bhi.n	800b676 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b628:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b62c:	d02b      	beq.n	800b686 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b62e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b632:	d820      	bhi.n	800b676 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b634:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b638:	d012      	beq.n	800b660 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800b63a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b63e:	d81a      	bhi.n	800b676 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b640:	2b00      	cmp	r3, #0
 800b642:	d022      	beq.n	800b68a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b644:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b648:	d115      	bne.n	800b676 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b64a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b64e:	3308      	adds	r3, #8
 800b650:	2100      	movs	r1, #0
 800b652:	4618      	mov	r0, r3
 800b654:	f000 fdd2 	bl	800c1fc <RCCEx_PLL2_Config>
 800b658:	4603      	mov	r3, r0
 800b65a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b65e:	e015      	b.n	800b68c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b660:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b664:	3328      	adds	r3, #40	; 0x28
 800b666:	2102      	movs	r1, #2
 800b668:	4618      	mov	r0, r3
 800b66a:	f000 fe79 	bl	800c360 <RCCEx_PLL3_Config>
 800b66e:	4603      	mov	r3, r0
 800b670:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b674:	e00a      	b.n	800b68c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b676:	2301      	movs	r3, #1
 800b678:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b67c:	e006      	b.n	800b68c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b67e:	bf00      	nop
 800b680:	e004      	b.n	800b68c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b682:	bf00      	nop
 800b684:	e002      	b.n	800b68c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b686:	bf00      	nop
 800b688:	e000      	b.n	800b68c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b68a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b68c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b690:	2b00      	cmp	r3, #0
 800b692:	d10b      	bne.n	800b6ac <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b694:	4ba0      	ldr	r3, [pc, #640]	; (800b918 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b698:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b69c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b6a4:	4a9c      	ldr	r2, [pc, #624]	; (800b918 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b6a6:	430b      	orrs	r3, r1
 800b6a8:	6593      	str	r3, [r2, #88]	; 0x58
 800b6aa:	e003      	b.n	800b6b4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b6b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6bc:	f002 0308 	and.w	r3, r2, #8
 800b6c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b6ca:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b6ce:	460b      	mov	r3, r1
 800b6d0:	4313      	orrs	r3, r2
 800b6d2:	d01e      	beq.n	800b712 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800b6d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6e0:	d10c      	bne.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b6e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6e6:	3328      	adds	r3, #40	; 0x28
 800b6e8:	2102      	movs	r1, #2
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f000 fe38 	bl	800c360 <RCCEx_PLL3_Config>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d002      	beq.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b6fc:	4b86      	ldr	r3, [pc, #536]	; (800b918 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b6fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b700:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b704:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b708:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b70c:	4a82      	ldr	r2, [pc, #520]	; (800b918 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b70e:	430b      	orrs	r3, r1
 800b710:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b712:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71a:	f002 0310 	and.w	r3, r2, #16
 800b71e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b722:	2300      	movs	r3, #0
 800b724:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b728:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b72c:	460b      	mov	r3, r1
 800b72e:	4313      	orrs	r3, r2
 800b730:	d01e      	beq.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b732:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b73a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b73e:	d10c      	bne.n	800b75a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b740:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b744:	3328      	adds	r3, #40	; 0x28
 800b746:	2102      	movs	r1, #2
 800b748:	4618      	mov	r0, r3
 800b74a:	f000 fe09 	bl	800c360 <RCCEx_PLL3_Config>
 800b74e:	4603      	mov	r3, r0
 800b750:	2b00      	cmp	r3, #0
 800b752:	d002      	beq.n	800b75a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800b754:	2301      	movs	r3, #1
 800b756:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b75a:	4b6f      	ldr	r3, [pc, #444]	; (800b918 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b75c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b75e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b762:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b766:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b76a:	4a6b      	ldr	r2, [pc, #428]	; (800b918 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b76c:	430b      	orrs	r3, r1
 800b76e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b770:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b778:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b77c:	67bb      	str	r3, [r7, #120]	; 0x78
 800b77e:	2300      	movs	r3, #0
 800b780:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b782:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b786:	460b      	mov	r3, r1
 800b788:	4313      	orrs	r3, r2
 800b78a:	d03e      	beq.n	800b80a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b78c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b790:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b794:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b798:	d022      	beq.n	800b7e0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b79a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b79e:	d81b      	bhi.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d003      	beq.n	800b7ac <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800b7a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7a8:	d00b      	beq.n	800b7c2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800b7aa:	e015      	b.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b7ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7b0:	3308      	adds	r3, #8
 800b7b2:	2100      	movs	r1, #0
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f000 fd21 	bl	800c1fc <RCCEx_PLL2_Config>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b7c0:	e00f      	b.n	800b7e2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b7c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7c6:	3328      	adds	r3, #40	; 0x28
 800b7c8:	2102      	movs	r1, #2
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f000 fdc8 	bl	800c360 <RCCEx_PLL3_Config>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b7d6:	e004      	b.n	800b7e2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7d8:	2301      	movs	r3, #1
 800b7da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b7de:	e000      	b.n	800b7e2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800b7e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7e2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d10b      	bne.n	800b802 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b7ea:	4b4b      	ldr	r3, [pc, #300]	; (800b918 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b7ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7ee:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b7f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b7fa:	4a47      	ldr	r2, [pc, #284]	; (800b918 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b7fc:	430b      	orrs	r3, r1
 800b7fe:	6593      	str	r3, [r2, #88]	; 0x58
 800b800:	e003      	b.n	800b80a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b802:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b806:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b80a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b812:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b816:	673b      	str	r3, [r7, #112]	; 0x70
 800b818:	2300      	movs	r3, #0
 800b81a:	677b      	str	r3, [r7, #116]	; 0x74
 800b81c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b820:	460b      	mov	r3, r1
 800b822:	4313      	orrs	r3, r2
 800b824:	d03b      	beq.n	800b89e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b826:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b82a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b82e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b832:	d01f      	beq.n	800b874 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b834:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b838:	d818      	bhi.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800b83a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b83e:	d003      	beq.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800b840:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b844:	d007      	beq.n	800b856 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800b846:	e011      	b.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b848:	4b33      	ldr	r3, [pc, #204]	; (800b918 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b84c:	4a32      	ldr	r2, [pc, #200]	; (800b918 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b84e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b852:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b854:	e00f      	b.n	800b876 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b856:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b85a:	3328      	adds	r3, #40	; 0x28
 800b85c:	2101      	movs	r1, #1
 800b85e:	4618      	mov	r0, r3
 800b860:	f000 fd7e 	bl	800c360 <RCCEx_PLL3_Config>
 800b864:	4603      	mov	r3, r0
 800b866:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800b86a:	e004      	b.n	800b876 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b86c:	2301      	movs	r3, #1
 800b86e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b872:	e000      	b.n	800b876 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800b874:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b876:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d10b      	bne.n	800b896 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b87e:	4b26      	ldr	r3, [pc, #152]	; (800b918 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b882:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b886:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b88a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b88e:	4a22      	ldr	r2, [pc, #136]	; (800b918 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b890:	430b      	orrs	r3, r1
 800b892:	6553      	str	r3, [r2, #84]	; 0x54
 800b894:	e003      	b.n	800b89e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b896:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b89a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b89e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b8aa:	66bb      	str	r3, [r7, #104]	; 0x68
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b8b0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b8b4:	460b      	mov	r3, r1
 800b8b6:	4313      	orrs	r3, r2
 800b8b8:	d034      	beq.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b8ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d003      	beq.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800b8c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8c8:	d007      	beq.n	800b8da <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800b8ca:	e011      	b.n	800b8f0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8cc:	4b12      	ldr	r3, [pc, #72]	; (800b918 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b8ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8d0:	4a11      	ldr	r2, [pc, #68]	; (800b918 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b8d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b8d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b8d8:	e00e      	b.n	800b8f8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b8da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8de:	3308      	adds	r3, #8
 800b8e0:	2102      	movs	r1, #2
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f000 fc8a 	bl	800c1fc <RCCEx_PLL2_Config>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b8ee:	e003      	b.n	800b8f8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b8f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d10d      	bne.n	800b91c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b900:	4b05      	ldr	r3, [pc, #20]	; (800b918 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b904:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b908:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b90c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b90e:	4a02      	ldr	r2, [pc, #8]	; (800b918 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b910:	430b      	orrs	r3, r1
 800b912:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b914:	e006      	b.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800b916:	bf00      	nop
 800b918:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b91c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b920:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b924:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b92c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800b930:	663b      	str	r3, [r7, #96]	; 0x60
 800b932:	2300      	movs	r3, #0
 800b934:	667b      	str	r3, [r7, #100]	; 0x64
 800b936:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b93a:	460b      	mov	r3, r1
 800b93c:	4313      	orrs	r3, r2
 800b93e:	d00c      	beq.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b940:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b944:	3328      	adds	r3, #40	; 0x28
 800b946:	2102      	movs	r1, #2
 800b948:	4618      	mov	r0, r3
 800b94a:	f000 fd09 	bl	800c360 <RCCEx_PLL3_Config>
 800b94e:	4603      	mov	r3, r0
 800b950:	2b00      	cmp	r3, #0
 800b952:	d002      	beq.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800b954:	2301      	movs	r3, #1
 800b956:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b95a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b962:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b966:	65bb      	str	r3, [r7, #88]	; 0x58
 800b968:	2300      	movs	r3, #0
 800b96a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b96c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800b970:	460b      	mov	r3, r1
 800b972:	4313      	orrs	r3, r2
 800b974:	d036      	beq.n	800b9e4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b976:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b97a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b97c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b980:	d018      	beq.n	800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800b982:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b986:	d811      	bhi.n	800b9ac <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b98c:	d014      	beq.n	800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800b98e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b992:	d80b      	bhi.n	800b9ac <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b994:	2b00      	cmp	r3, #0
 800b996:	d011      	beq.n	800b9bc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800b998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b99c:	d106      	bne.n	800b9ac <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b99e:	4bb7      	ldr	r3, [pc, #732]	; (800bc7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9a2:	4ab6      	ldr	r2, [pc, #728]	; (800bc7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b9aa:	e008      	b.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b9b2:	e004      	b.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b9b4:	bf00      	nop
 800b9b6:	e002      	b.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b9b8:	bf00      	nop
 800b9ba:	e000      	b.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b9bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d10a      	bne.n	800b9dc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b9c6:	4bad      	ldr	r3, [pc, #692]	; (800bc7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b9ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9d4:	4aa9      	ldr	r2, [pc, #676]	; (800bc7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9d6:	430b      	orrs	r3, r1
 800b9d8:	6553      	str	r3, [r2, #84]	; 0x54
 800b9da:	e003      	b.n	800b9e4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b9e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ec:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800b9f0:	653b      	str	r3, [r7, #80]	; 0x50
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	657b      	str	r3, [r7, #84]	; 0x54
 800b9f6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800b9fa:	460b      	mov	r3, r1
 800b9fc:	4313      	orrs	r3, r2
 800b9fe:	d009      	beq.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ba00:	4b9e      	ldr	r3, [pc, #632]	; (800bc7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ba02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba04:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ba08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba0e:	4a9b      	ldr	r2, [pc, #620]	; (800bc7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ba10:	430b      	orrs	r3, r1
 800ba12:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ba14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba1c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800ba20:	64bb      	str	r3, [r7, #72]	; 0x48
 800ba22:	2300      	movs	r3, #0
 800ba24:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ba26:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800ba2a:	460b      	mov	r3, r1
 800ba2c:	4313      	orrs	r3, r2
 800ba2e:	d009      	beq.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ba30:	4b92      	ldr	r3, [pc, #584]	; (800bc7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ba32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba34:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800ba38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ba3e:	4a8f      	ldr	r2, [pc, #572]	; (800bc7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ba40:	430b      	orrs	r3, r1
 800ba42:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ba44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800ba50:	643b      	str	r3, [r7, #64]	; 0x40
 800ba52:	2300      	movs	r3, #0
 800ba54:	647b      	str	r3, [r7, #68]	; 0x44
 800ba56:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800ba5a:	460b      	mov	r3, r1
 800ba5c:	4313      	orrs	r3, r2
 800ba5e:	d00e      	beq.n	800ba7e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ba60:	4b86      	ldr	r3, [pc, #536]	; (800bc7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ba62:	691b      	ldr	r3, [r3, #16]
 800ba64:	4a85      	ldr	r2, [pc, #532]	; (800bc7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ba66:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ba6a:	6113      	str	r3, [r2, #16]
 800ba6c:	4b83      	ldr	r3, [pc, #524]	; (800bc7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ba6e:	6919      	ldr	r1, [r3, #16]
 800ba70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba74:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ba78:	4a80      	ldr	r2, [pc, #512]	; (800bc7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ba7a:	430b      	orrs	r3, r1
 800ba7c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ba7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba86:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800ba8a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba90:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800ba94:	460b      	mov	r3, r1
 800ba96:	4313      	orrs	r3, r2
 800ba98:	d009      	beq.n	800baae <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ba9a:	4b78      	ldr	r3, [pc, #480]	; (800bc7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ba9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba9e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800baa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800baa8:	4a74      	ldr	r2, [pc, #464]	; (800bc7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800baaa:	430b      	orrs	r3, r1
 800baac:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800baae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800baba:	633b      	str	r3, [r7, #48]	; 0x30
 800babc:	2300      	movs	r3, #0
 800babe:	637b      	str	r3, [r7, #52]	; 0x34
 800bac0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800bac4:	460b      	mov	r3, r1
 800bac6:	4313      	orrs	r3, r2
 800bac8:	d00a      	beq.n	800bae0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800baca:	4b6c      	ldr	r3, [pc, #432]	; (800bc7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bacc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bace:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800bad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bada:	4a68      	ldr	r2, [pc, #416]	; (800bc7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800badc:	430b      	orrs	r3, r1
 800bade:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800bae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae8:	2100      	movs	r1, #0
 800baea:	62b9      	str	r1, [r7, #40]	; 0x28
 800baec:	f003 0301 	and.w	r3, r3, #1
 800baf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800baf2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800baf6:	460b      	mov	r3, r1
 800baf8:	4313      	orrs	r3, r2
 800bafa:	d011      	beq.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bafc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb00:	3308      	adds	r3, #8
 800bb02:	2100      	movs	r1, #0
 800bb04:	4618      	mov	r0, r3
 800bb06:	f000 fb79 	bl	800c1fc <RCCEx_PLL2_Config>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bb10:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d003      	beq.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb1c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800bb20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb28:	2100      	movs	r1, #0
 800bb2a:	6239      	str	r1, [r7, #32]
 800bb2c:	f003 0302 	and.w	r3, r3, #2
 800bb30:	627b      	str	r3, [r7, #36]	; 0x24
 800bb32:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bb36:	460b      	mov	r3, r1
 800bb38:	4313      	orrs	r3, r2
 800bb3a:	d011      	beq.n	800bb60 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bb3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb40:	3308      	adds	r3, #8
 800bb42:	2101      	movs	r1, #1
 800bb44:	4618      	mov	r0, r3
 800bb46:	f000 fb59 	bl	800c1fc <RCCEx_PLL2_Config>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bb50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d003      	beq.n	800bb60 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb5c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bb60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb68:	2100      	movs	r1, #0
 800bb6a:	61b9      	str	r1, [r7, #24]
 800bb6c:	f003 0304 	and.w	r3, r3, #4
 800bb70:	61fb      	str	r3, [r7, #28]
 800bb72:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bb76:	460b      	mov	r3, r1
 800bb78:	4313      	orrs	r3, r2
 800bb7a:	d011      	beq.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bb7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb80:	3308      	adds	r3, #8
 800bb82:	2102      	movs	r1, #2
 800bb84:	4618      	mov	r0, r3
 800bb86:	f000 fb39 	bl	800c1fc <RCCEx_PLL2_Config>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bb90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d003      	beq.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb9c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba8:	2100      	movs	r1, #0
 800bbaa:	6139      	str	r1, [r7, #16]
 800bbac:	f003 0308 	and.w	r3, r3, #8
 800bbb0:	617b      	str	r3, [r7, #20]
 800bbb2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bbb6:	460b      	mov	r3, r1
 800bbb8:	4313      	orrs	r3, r2
 800bbba:	d011      	beq.n	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bbbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbc0:	3328      	adds	r3, #40	; 0x28
 800bbc2:	2100      	movs	r1, #0
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f000 fbcb 	bl	800c360 <RCCEx_PLL3_Config>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800bbd0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d003      	beq.n	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbd8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbdc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bbe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe8:	2100      	movs	r1, #0
 800bbea:	60b9      	str	r1, [r7, #8]
 800bbec:	f003 0310 	and.w	r3, r3, #16
 800bbf0:	60fb      	str	r3, [r7, #12]
 800bbf2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bbf6:	460b      	mov	r3, r1
 800bbf8:	4313      	orrs	r3, r2
 800bbfa:	d011      	beq.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bbfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc00:	3328      	adds	r3, #40	; 0x28
 800bc02:	2101      	movs	r1, #1
 800bc04:	4618      	mov	r0, r3
 800bc06:	f000 fbab 	bl	800c360 <RCCEx_PLL3_Config>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bc10:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d003      	beq.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc1c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bc20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc28:	2100      	movs	r1, #0
 800bc2a:	6039      	str	r1, [r7, #0]
 800bc2c:	f003 0320 	and.w	r3, r3, #32
 800bc30:	607b      	str	r3, [r7, #4]
 800bc32:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bc36:	460b      	mov	r3, r1
 800bc38:	4313      	orrs	r3, r2
 800bc3a:	d011      	beq.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bc3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc40:	3328      	adds	r3, #40	; 0x28
 800bc42:	2102      	movs	r1, #2
 800bc44:	4618      	mov	r0, r3
 800bc46:	f000 fb8b 	bl	800c360 <RCCEx_PLL3_Config>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bc50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d003      	beq.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc5c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800bc60:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d101      	bne.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800bc68:	2300      	movs	r3, #0
 800bc6a:	e000      	b.n	800bc6e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800bc6c:	2301      	movs	r3, #1
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800bc74:	46bd      	mov	sp, r7
 800bc76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bc7a:	bf00      	nop
 800bc7c:	58024400 	.word	0x58024400

0800bc80 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bc84:	f7fe fe00 	bl	800a888 <HAL_RCC_GetHCLKFreq>
 800bc88:	4602      	mov	r2, r0
 800bc8a:	4b06      	ldr	r3, [pc, #24]	; (800bca4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bc8c:	6a1b      	ldr	r3, [r3, #32]
 800bc8e:	091b      	lsrs	r3, r3, #4
 800bc90:	f003 0307 	and.w	r3, r3, #7
 800bc94:	4904      	ldr	r1, [pc, #16]	; (800bca8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bc96:	5ccb      	ldrb	r3, [r1, r3]
 800bc98:	f003 031f 	and.w	r3, r3, #31
 800bc9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	bd80      	pop	{r7, pc}
 800bca4:	58024400 	.word	0x58024400
 800bca8:	08010814 	.word	0x08010814

0800bcac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b089      	sub	sp, #36	; 0x24
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bcb4:	4ba1      	ldr	r3, [pc, #644]	; (800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcb8:	f003 0303 	and.w	r3, r3, #3
 800bcbc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800bcbe:	4b9f      	ldr	r3, [pc, #636]	; (800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcc2:	0b1b      	lsrs	r3, r3, #12
 800bcc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bcc8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bcca:	4b9c      	ldr	r3, [pc, #624]	; (800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcce:	091b      	lsrs	r3, r3, #4
 800bcd0:	f003 0301 	and.w	r3, r3, #1
 800bcd4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800bcd6:	4b99      	ldr	r3, [pc, #612]	; (800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcda:	08db      	lsrs	r3, r3, #3
 800bcdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bce0:	693a      	ldr	r2, [r7, #16]
 800bce2:	fb02 f303 	mul.w	r3, r2, r3
 800bce6:	ee07 3a90 	vmov	s15, r3
 800bcea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	f000 8111 	beq.w	800bf1c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bcfa:	69bb      	ldr	r3, [r7, #24]
 800bcfc:	2b02      	cmp	r3, #2
 800bcfe:	f000 8083 	beq.w	800be08 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bd02:	69bb      	ldr	r3, [r7, #24]
 800bd04:	2b02      	cmp	r3, #2
 800bd06:	f200 80a1 	bhi.w	800be4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bd0a:	69bb      	ldr	r3, [r7, #24]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d003      	beq.n	800bd18 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bd10:	69bb      	ldr	r3, [r7, #24]
 800bd12:	2b01      	cmp	r3, #1
 800bd14:	d056      	beq.n	800bdc4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bd16:	e099      	b.n	800be4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bd18:	4b88      	ldr	r3, [pc, #544]	; (800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f003 0320 	and.w	r3, r3, #32
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d02d      	beq.n	800bd80 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bd24:	4b85      	ldr	r3, [pc, #532]	; (800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	08db      	lsrs	r3, r3, #3
 800bd2a:	f003 0303 	and.w	r3, r3, #3
 800bd2e:	4a84      	ldr	r2, [pc, #528]	; (800bf40 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bd30:	fa22 f303 	lsr.w	r3, r2, r3
 800bd34:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	ee07 3a90 	vmov	s15, r3
 800bd3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	ee07 3a90 	vmov	s15, r3
 800bd46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd4e:	4b7b      	ldr	r3, [pc, #492]	; (800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd56:	ee07 3a90 	vmov	s15, r3
 800bd5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd5e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd62:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bf44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bd7e:	e087      	b.n	800be90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bd80:	697b      	ldr	r3, [r7, #20]
 800bd82:	ee07 3a90 	vmov	s15, r3
 800bd86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd8a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bf48 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bd8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd92:	4b6a      	ldr	r3, [pc, #424]	; (800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd9a:	ee07 3a90 	vmov	s15, r3
 800bd9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bda2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bda6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bf44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bdaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bdb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bdc2:	e065      	b.n	800be90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	ee07 3a90 	vmov	s15, r3
 800bdca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bf4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bdd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdd6:	4b59      	ldr	r3, [pc, #356]	; (800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdde:	ee07 3a90 	vmov	s15, r3
 800bde2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bde6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdea:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bf44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bdee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bdfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be06:	e043      	b.n	800be90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	ee07 3a90 	vmov	s15, r3
 800be0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be12:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bf50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800be16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be1a:	4b48      	ldr	r3, [pc, #288]	; (800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be22:	ee07 3a90 	vmov	s15, r3
 800be26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be2a:	ed97 6a03 	vldr	s12, [r7, #12]
 800be2e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bf44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800be32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be4a:	e021      	b.n	800be90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	ee07 3a90 	vmov	s15, r3
 800be52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be56:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bf4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800be5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be5e:	4b37      	ldr	r3, [pc, #220]	; (800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be66:	ee07 3a90 	vmov	s15, r3
 800be6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800be72:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bf44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800be76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be8e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800be90:	4b2a      	ldr	r3, [pc, #168]	; (800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be94:	0a5b      	lsrs	r3, r3, #9
 800be96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be9a:	ee07 3a90 	vmov	s15, r3
 800be9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bea2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bea6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800beaa:	edd7 6a07 	vldr	s13, [r7, #28]
 800beae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800beb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800beb6:	ee17 2a90 	vmov	r2, s15
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bebe:	4b1f      	ldr	r3, [pc, #124]	; (800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bec2:	0c1b      	lsrs	r3, r3, #16
 800bec4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bec8:	ee07 3a90 	vmov	s15, r3
 800becc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bed0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bed4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bed8:	edd7 6a07 	vldr	s13, [r7, #28]
 800bedc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bee0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bee4:	ee17 2a90 	vmov	r2, s15
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800beec:	4b13      	ldr	r3, [pc, #76]	; (800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800beee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bef0:	0e1b      	lsrs	r3, r3, #24
 800bef2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bef6:	ee07 3a90 	vmov	s15, r3
 800befa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800befe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf02:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf06:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf12:	ee17 2a90 	vmov	r2, s15
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bf1a:	e008      	b.n	800bf2e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2200      	movs	r2, #0
 800bf26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	609a      	str	r2, [r3, #8]
}
 800bf2e:	bf00      	nop
 800bf30:	3724      	adds	r7, #36	; 0x24
 800bf32:	46bd      	mov	sp, r7
 800bf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf38:	4770      	bx	lr
 800bf3a:	bf00      	nop
 800bf3c:	58024400 	.word	0x58024400
 800bf40:	03d09000 	.word	0x03d09000
 800bf44:	46000000 	.word	0x46000000
 800bf48:	4c742400 	.word	0x4c742400
 800bf4c:	4a742400 	.word	0x4a742400
 800bf50:	4af42400 	.word	0x4af42400

0800bf54 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800bf54:	b480      	push	{r7}
 800bf56:	b089      	sub	sp, #36	; 0x24
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bf5c:	4ba1      	ldr	r3, [pc, #644]	; (800c1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf60:	f003 0303 	and.w	r3, r3, #3
 800bf64:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800bf66:	4b9f      	ldr	r3, [pc, #636]	; (800c1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf6a:	0d1b      	lsrs	r3, r3, #20
 800bf6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf70:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bf72:	4b9c      	ldr	r3, [pc, #624]	; (800c1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf76:	0a1b      	lsrs	r3, r3, #8
 800bf78:	f003 0301 	and.w	r3, r3, #1
 800bf7c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bf7e:	4b99      	ldr	r3, [pc, #612]	; (800c1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf82:	08db      	lsrs	r3, r3, #3
 800bf84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bf88:	693a      	ldr	r2, [r7, #16]
 800bf8a:	fb02 f303 	mul.w	r3, r2, r3
 800bf8e:	ee07 3a90 	vmov	s15, r3
 800bf92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bf9a:	697b      	ldr	r3, [r7, #20]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	f000 8111 	beq.w	800c1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bfa2:	69bb      	ldr	r3, [r7, #24]
 800bfa4:	2b02      	cmp	r3, #2
 800bfa6:	f000 8083 	beq.w	800c0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bfaa:	69bb      	ldr	r3, [r7, #24]
 800bfac:	2b02      	cmp	r3, #2
 800bfae:	f200 80a1 	bhi.w	800c0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bfb2:	69bb      	ldr	r3, [r7, #24]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d003      	beq.n	800bfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bfb8:	69bb      	ldr	r3, [r7, #24]
 800bfba:	2b01      	cmp	r3, #1
 800bfbc:	d056      	beq.n	800c06c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bfbe:	e099      	b.n	800c0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bfc0:	4b88      	ldr	r3, [pc, #544]	; (800c1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	f003 0320 	and.w	r3, r3, #32
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d02d      	beq.n	800c028 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bfcc:	4b85      	ldr	r3, [pc, #532]	; (800c1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	08db      	lsrs	r3, r3, #3
 800bfd2:	f003 0303 	and.w	r3, r3, #3
 800bfd6:	4a84      	ldr	r2, [pc, #528]	; (800c1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bfd8:	fa22 f303 	lsr.w	r3, r2, r3
 800bfdc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	ee07 3a90 	vmov	s15, r3
 800bfe4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfe8:	697b      	ldr	r3, [r7, #20]
 800bfea:	ee07 3a90 	vmov	s15, r3
 800bfee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bff6:	4b7b      	ldr	r3, [pc, #492]	; (800c1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bffe:	ee07 3a90 	vmov	s15, r3
 800c002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c006:	ed97 6a03 	vldr	s12, [r7, #12]
 800c00a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c1ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c00e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c016:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c01a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c01e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c022:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c026:	e087      	b.n	800c138 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	ee07 3a90 	vmov	s15, r3
 800c02e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c032:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c03a:	4b6a      	ldr	r3, [pc, #424]	; (800c1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c03c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c03e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c042:	ee07 3a90 	vmov	s15, r3
 800c046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c04a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c04e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c1ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c05a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c05e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c062:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c066:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c06a:	e065      	b.n	800c138 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c06c:	697b      	ldr	r3, [r7, #20]
 800c06e:	ee07 3a90 	vmov	s15, r3
 800c072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c076:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c1f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c07a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c07e:	4b59      	ldr	r3, [pc, #356]	; (800c1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c086:	ee07 3a90 	vmov	s15, r3
 800c08a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c08e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c092:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c1ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c09a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c09e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c0a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c0ae:	e043      	b.n	800c138 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c0b0:	697b      	ldr	r3, [r7, #20]
 800c0b2:	ee07 3a90 	vmov	s15, r3
 800c0b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0ba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c0be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0c2:	4b48      	ldr	r3, [pc, #288]	; (800c1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0ca:	ee07 3a90 	vmov	s15, r3
 800c0ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0d6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c1ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c0da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c0e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c0f2:	e021      	b.n	800c138 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	ee07 3a90 	vmov	s15, r3
 800c0fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0fe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c1f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c106:	4b37      	ldr	r3, [pc, #220]	; (800c1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c10a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c10e:	ee07 3a90 	vmov	s15, r3
 800c112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c116:	ed97 6a03 	vldr	s12, [r7, #12]
 800c11a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c1ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c11e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c126:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c12a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c12e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c132:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c136:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c138:	4b2a      	ldr	r3, [pc, #168]	; (800c1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c13a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c13c:	0a5b      	lsrs	r3, r3, #9
 800c13e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c142:	ee07 3a90 	vmov	s15, r3
 800c146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c14a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c14e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c152:	edd7 6a07 	vldr	s13, [r7, #28]
 800c156:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c15a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c15e:	ee17 2a90 	vmov	r2, s15
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c166:	4b1f      	ldr	r3, [pc, #124]	; (800c1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c16a:	0c1b      	lsrs	r3, r3, #16
 800c16c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c170:	ee07 3a90 	vmov	s15, r3
 800c174:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c178:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c17c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c180:	edd7 6a07 	vldr	s13, [r7, #28]
 800c184:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c188:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c18c:	ee17 2a90 	vmov	r2, s15
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c194:	4b13      	ldr	r3, [pc, #76]	; (800c1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c198:	0e1b      	lsrs	r3, r3, #24
 800c19a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c19e:	ee07 3a90 	vmov	s15, r3
 800c1a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c1aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c1ae:	edd7 6a07 	vldr	s13, [r7, #28]
 800c1b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1ba:	ee17 2a90 	vmov	r2, s15
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c1c2:	e008      	b.n	800c1d6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	609a      	str	r2, [r3, #8]
}
 800c1d6:	bf00      	nop
 800c1d8:	3724      	adds	r7, #36	; 0x24
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e0:	4770      	bx	lr
 800c1e2:	bf00      	nop
 800c1e4:	58024400 	.word	0x58024400
 800c1e8:	03d09000 	.word	0x03d09000
 800c1ec:	46000000 	.word	0x46000000
 800c1f0:	4c742400 	.word	0x4c742400
 800c1f4:	4a742400 	.word	0x4a742400
 800c1f8:	4af42400 	.word	0x4af42400

0800c1fc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b084      	sub	sp, #16
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
 800c204:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c206:	2300      	movs	r3, #0
 800c208:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c20a:	4b53      	ldr	r3, [pc, #332]	; (800c358 <RCCEx_PLL2_Config+0x15c>)
 800c20c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c20e:	f003 0303 	and.w	r3, r3, #3
 800c212:	2b03      	cmp	r3, #3
 800c214:	d101      	bne.n	800c21a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c216:	2301      	movs	r3, #1
 800c218:	e099      	b.n	800c34e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c21a:	4b4f      	ldr	r3, [pc, #316]	; (800c358 <RCCEx_PLL2_Config+0x15c>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	4a4e      	ldr	r2, [pc, #312]	; (800c358 <RCCEx_PLL2_Config+0x15c>)
 800c220:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c224:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c226:	f7f9 ffeb 	bl	8006200 <HAL_GetTick>
 800c22a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c22c:	e008      	b.n	800c240 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c22e:	f7f9 ffe7 	bl	8006200 <HAL_GetTick>
 800c232:	4602      	mov	r2, r0
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	1ad3      	subs	r3, r2, r3
 800c238:	2b02      	cmp	r3, #2
 800c23a:	d901      	bls.n	800c240 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c23c:	2303      	movs	r3, #3
 800c23e:	e086      	b.n	800c34e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c240:	4b45      	ldr	r3, [pc, #276]	; (800c358 <RCCEx_PLL2_Config+0x15c>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d1f0      	bne.n	800c22e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c24c:	4b42      	ldr	r3, [pc, #264]	; (800c358 <RCCEx_PLL2_Config+0x15c>)
 800c24e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c250:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	031b      	lsls	r3, r3, #12
 800c25a:	493f      	ldr	r1, [pc, #252]	; (800c358 <RCCEx_PLL2_Config+0x15c>)
 800c25c:	4313      	orrs	r3, r2
 800c25e:	628b      	str	r3, [r1, #40]	; 0x28
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	685b      	ldr	r3, [r3, #4]
 800c264:	3b01      	subs	r3, #1
 800c266:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	689b      	ldr	r3, [r3, #8]
 800c26e:	3b01      	subs	r3, #1
 800c270:	025b      	lsls	r3, r3, #9
 800c272:	b29b      	uxth	r3, r3
 800c274:	431a      	orrs	r2, r3
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	68db      	ldr	r3, [r3, #12]
 800c27a:	3b01      	subs	r3, #1
 800c27c:	041b      	lsls	r3, r3, #16
 800c27e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c282:	431a      	orrs	r2, r3
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	691b      	ldr	r3, [r3, #16]
 800c288:	3b01      	subs	r3, #1
 800c28a:	061b      	lsls	r3, r3, #24
 800c28c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c290:	4931      	ldr	r1, [pc, #196]	; (800c358 <RCCEx_PLL2_Config+0x15c>)
 800c292:	4313      	orrs	r3, r2
 800c294:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c296:	4b30      	ldr	r3, [pc, #192]	; (800c358 <RCCEx_PLL2_Config+0x15c>)
 800c298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c29a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	695b      	ldr	r3, [r3, #20]
 800c2a2:	492d      	ldr	r1, [pc, #180]	; (800c358 <RCCEx_PLL2_Config+0x15c>)
 800c2a4:	4313      	orrs	r3, r2
 800c2a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c2a8:	4b2b      	ldr	r3, [pc, #172]	; (800c358 <RCCEx_PLL2_Config+0x15c>)
 800c2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2ac:	f023 0220 	bic.w	r2, r3, #32
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	699b      	ldr	r3, [r3, #24]
 800c2b4:	4928      	ldr	r1, [pc, #160]	; (800c358 <RCCEx_PLL2_Config+0x15c>)
 800c2b6:	4313      	orrs	r3, r2
 800c2b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c2ba:	4b27      	ldr	r3, [pc, #156]	; (800c358 <RCCEx_PLL2_Config+0x15c>)
 800c2bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2be:	4a26      	ldr	r2, [pc, #152]	; (800c358 <RCCEx_PLL2_Config+0x15c>)
 800c2c0:	f023 0310 	bic.w	r3, r3, #16
 800c2c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c2c6:	4b24      	ldr	r3, [pc, #144]	; (800c358 <RCCEx_PLL2_Config+0x15c>)
 800c2c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c2ca:	4b24      	ldr	r3, [pc, #144]	; (800c35c <RCCEx_PLL2_Config+0x160>)
 800c2cc:	4013      	ands	r3, r2
 800c2ce:	687a      	ldr	r2, [r7, #4]
 800c2d0:	69d2      	ldr	r2, [r2, #28]
 800c2d2:	00d2      	lsls	r2, r2, #3
 800c2d4:	4920      	ldr	r1, [pc, #128]	; (800c358 <RCCEx_PLL2_Config+0x15c>)
 800c2d6:	4313      	orrs	r3, r2
 800c2d8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c2da:	4b1f      	ldr	r3, [pc, #124]	; (800c358 <RCCEx_PLL2_Config+0x15c>)
 800c2dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2de:	4a1e      	ldr	r2, [pc, #120]	; (800c358 <RCCEx_PLL2_Config+0x15c>)
 800c2e0:	f043 0310 	orr.w	r3, r3, #16
 800c2e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d106      	bne.n	800c2fa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c2ec:	4b1a      	ldr	r3, [pc, #104]	; (800c358 <RCCEx_PLL2_Config+0x15c>)
 800c2ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2f0:	4a19      	ldr	r2, [pc, #100]	; (800c358 <RCCEx_PLL2_Config+0x15c>)
 800c2f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c2f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c2f8:	e00f      	b.n	800c31a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	2b01      	cmp	r3, #1
 800c2fe:	d106      	bne.n	800c30e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c300:	4b15      	ldr	r3, [pc, #84]	; (800c358 <RCCEx_PLL2_Config+0x15c>)
 800c302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c304:	4a14      	ldr	r2, [pc, #80]	; (800c358 <RCCEx_PLL2_Config+0x15c>)
 800c306:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c30a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c30c:	e005      	b.n	800c31a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c30e:	4b12      	ldr	r3, [pc, #72]	; (800c358 <RCCEx_PLL2_Config+0x15c>)
 800c310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c312:	4a11      	ldr	r2, [pc, #68]	; (800c358 <RCCEx_PLL2_Config+0x15c>)
 800c314:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c318:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c31a:	4b0f      	ldr	r3, [pc, #60]	; (800c358 <RCCEx_PLL2_Config+0x15c>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	4a0e      	ldr	r2, [pc, #56]	; (800c358 <RCCEx_PLL2_Config+0x15c>)
 800c320:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c324:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c326:	f7f9 ff6b 	bl	8006200 <HAL_GetTick>
 800c32a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c32c:	e008      	b.n	800c340 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c32e:	f7f9 ff67 	bl	8006200 <HAL_GetTick>
 800c332:	4602      	mov	r2, r0
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	1ad3      	subs	r3, r2, r3
 800c338:	2b02      	cmp	r3, #2
 800c33a:	d901      	bls.n	800c340 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c33c:	2303      	movs	r3, #3
 800c33e:	e006      	b.n	800c34e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c340:	4b05      	ldr	r3, [pc, #20]	; (800c358 <RCCEx_PLL2_Config+0x15c>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d0f0      	beq.n	800c32e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c34c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3710      	adds	r7, #16
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}
 800c356:	bf00      	nop
 800c358:	58024400 	.word	0x58024400
 800c35c:	ffff0007 	.word	0xffff0007

0800c360 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b084      	sub	sp, #16
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c36a:	2300      	movs	r3, #0
 800c36c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c36e:	4b53      	ldr	r3, [pc, #332]	; (800c4bc <RCCEx_PLL3_Config+0x15c>)
 800c370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c372:	f003 0303 	and.w	r3, r3, #3
 800c376:	2b03      	cmp	r3, #3
 800c378:	d101      	bne.n	800c37e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c37a:	2301      	movs	r3, #1
 800c37c:	e099      	b.n	800c4b2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c37e:	4b4f      	ldr	r3, [pc, #316]	; (800c4bc <RCCEx_PLL3_Config+0x15c>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	4a4e      	ldr	r2, [pc, #312]	; (800c4bc <RCCEx_PLL3_Config+0x15c>)
 800c384:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c388:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c38a:	f7f9 ff39 	bl	8006200 <HAL_GetTick>
 800c38e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c390:	e008      	b.n	800c3a4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c392:	f7f9 ff35 	bl	8006200 <HAL_GetTick>
 800c396:	4602      	mov	r2, r0
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	1ad3      	subs	r3, r2, r3
 800c39c:	2b02      	cmp	r3, #2
 800c39e:	d901      	bls.n	800c3a4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c3a0:	2303      	movs	r3, #3
 800c3a2:	e086      	b.n	800c4b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c3a4:	4b45      	ldr	r3, [pc, #276]	; (800c4bc <RCCEx_PLL3_Config+0x15c>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d1f0      	bne.n	800c392 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c3b0:	4b42      	ldr	r3, [pc, #264]	; (800c4bc <RCCEx_PLL3_Config+0x15c>)
 800c3b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3b4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	051b      	lsls	r3, r3, #20
 800c3be:	493f      	ldr	r1, [pc, #252]	; (800c4bc <RCCEx_PLL3_Config+0x15c>)
 800c3c0:	4313      	orrs	r3, r2
 800c3c2:	628b      	str	r3, [r1, #40]	; 0x28
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	685b      	ldr	r3, [r3, #4]
 800c3c8:	3b01      	subs	r3, #1
 800c3ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	689b      	ldr	r3, [r3, #8]
 800c3d2:	3b01      	subs	r3, #1
 800c3d4:	025b      	lsls	r3, r3, #9
 800c3d6:	b29b      	uxth	r3, r3
 800c3d8:	431a      	orrs	r2, r3
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	68db      	ldr	r3, [r3, #12]
 800c3de:	3b01      	subs	r3, #1
 800c3e0:	041b      	lsls	r3, r3, #16
 800c3e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c3e6:	431a      	orrs	r2, r3
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	691b      	ldr	r3, [r3, #16]
 800c3ec:	3b01      	subs	r3, #1
 800c3ee:	061b      	lsls	r3, r3, #24
 800c3f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c3f4:	4931      	ldr	r1, [pc, #196]	; (800c4bc <RCCEx_PLL3_Config+0x15c>)
 800c3f6:	4313      	orrs	r3, r2
 800c3f8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c3fa:	4b30      	ldr	r3, [pc, #192]	; (800c4bc <RCCEx_PLL3_Config+0x15c>)
 800c3fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	695b      	ldr	r3, [r3, #20]
 800c406:	492d      	ldr	r1, [pc, #180]	; (800c4bc <RCCEx_PLL3_Config+0x15c>)
 800c408:	4313      	orrs	r3, r2
 800c40a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c40c:	4b2b      	ldr	r3, [pc, #172]	; (800c4bc <RCCEx_PLL3_Config+0x15c>)
 800c40e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c410:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	699b      	ldr	r3, [r3, #24]
 800c418:	4928      	ldr	r1, [pc, #160]	; (800c4bc <RCCEx_PLL3_Config+0x15c>)
 800c41a:	4313      	orrs	r3, r2
 800c41c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c41e:	4b27      	ldr	r3, [pc, #156]	; (800c4bc <RCCEx_PLL3_Config+0x15c>)
 800c420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c422:	4a26      	ldr	r2, [pc, #152]	; (800c4bc <RCCEx_PLL3_Config+0x15c>)
 800c424:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c428:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c42a:	4b24      	ldr	r3, [pc, #144]	; (800c4bc <RCCEx_PLL3_Config+0x15c>)
 800c42c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c42e:	4b24      	ldr	r3, [pc, #144]	; (800c4c0 <RCCEx_PLL3_Config+0x160>)
 800c430:	4013      	ands	r3, r2
 800c432:	687a      	ldr	r2, [r7, #4]
 800c434:	69d2      	ldr	r2, [r2, #28]
 800c436:	00d2      	lsls	r2, r2, #3
 800c438:	4920      	ldr	r1, [pc, #128]	; (800c4bc <RCCEx_PLL3_Config+0x15c>)
 800c43a:	4313      	orrs	r3, r2
 800c43c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c43e:	4b1f      	ldr	r3, [pc, #124]	; (800c4bc <RCCEx_PLL3_Config+0x15c>)
 800c440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c442:	4a1e      	ldr	r2, [pc, #120]	; (800c4bc <RCCEx_PLL3_Config+0x15c>)
 800c444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c448:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d106      	bne.n	800c45e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c450:	4b1a      	ldr	r3, [pc, #104]	; (800c4bc <RCCEx_PLL3_Config+0x15c>)
 800c452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c454:	4a19      	ldr	r2, [pc, #100]	; (800c4bc <RCCEx_PLL3_Config+0x15c>)
 800c456:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c45a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c45c:	e00f      	b.n	800c47e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	2b01      	cmp	r3, #1
 800c462:	d106      	bne.n	800c472 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c464:	4b15      	ldr	r3, [pc, #84]	; (800c4bc <RCCEx_PLL3_Config+0x15c>)
 800c466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c468:	4a14      	ldr	r2, [pc, #80]	; (800c4bc <RCCEx_PLL3_Config+0x15c>)
 800c46a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c46e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c470:	e005      	b.n	800c47e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c472:	4b12      	ldr	r3, [pc, #72]	; (800c4bc <RCCEx_PLL3_Config+0x15c>)
 800c474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c476:	4a11      	ldr	r2, [pc, #68]	; (800c4bc <RCCEx_PLL3_Config+0x15c>)
 800c478:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c47c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c47e:	4b0f      	ldr	r3, [pc, #60]	; (800c4bc <RCCEx_PLL3_Config+0x15c>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	4a0e      	ldr	r2, [pc, #56]	; (800c4bc <RCCEx_PLL3_Config+0x15c>)
 800c484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c488:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c48a:	f7f9 feb9 	bl	8006200 <HAL_GetTick>
 800c48e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c490:	e008      	b.n	800c4a4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c492:	f7f9 feb5 	bl	8006200 <HAL_GetTick>
 800c496:	4602      	mov	r2, r0
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	1ad3      	subs	r3, r2, r3
 800c49c:	2b02      	cmp	r3, #2
 800c49e:	d901      	bls.n	800c4a4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c4a0:	2303      	movs	r3, #3
 800c4a2:	e006      	b.n	800c4b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c4a4:	4b05      	ldr	r3, [pc, #20]	; (800c4bc <RCCEx_PLL3_Config+0x15c>)
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d0f0      	beq.n	800c492 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c4b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3710      	adds	r7, #16
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}
 800c4ba:	bf00      	nop
 800c4bc:	58024400 	.word	0x58024400
 800c4c0:	ffff0007 	.word	0xffff0007

0800c4c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b082      	sub	sp, #8
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d101      	bne.n	800c4d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c4d2:	2301      	movs	r3, #1
 800c4d4:	e049      	b.n	800c56a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c4dc:	b2db      	uxtb	r3, r3
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d106      	bne.n	800c4f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f7f9 f88a 	bl	8005604 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2202      	movs	r2, #2
 800c4f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681a      	ldr	r2, [r3, #0]
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	3304      	adds	r3, #4
 800c500:	4619      	mov	r1, r3
 800c502:	4610      	mov	r0, r2
 800c504:	f000 fed8 	bl	800d2b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2201      	movs	r2, #1
 800c50c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2201      	movs	r2, #1
 800c514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2201      	movs	r2, #1
 800c51c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2201      	movs	r2, #1
 800c524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2201      	movs	r2, #1
 800c52c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2201      	movs	r2, #1
 800c534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2201      	movs	r2, #1
 800c53c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2201      	movs	r2, #1
 800c544:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2201      	movs	r2, #1
 800c54c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2201      	movs	r2, #1
 800c554:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2201      	movs	r2, #1
 800c55c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2201      	movs	r2, #1
 800c564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c568:	2300      	movs	r3, #0
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	3708      	adds	r7, #8
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}
	...

0800c574 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c574:	b480      	push	{r7}
 800c576:	b085      	sub	sp, #20
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c582:	b2db      	uxtb	r3, r3
 800c584:	2b01      	cmp	r3, #1
 800c586:	d001      	beq.n	800c58c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c588:	2301      	movs	r3, #1
 800c58a:	e05e      	b.n	800c64a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2202      	movs	r2, #2
 800c590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	68da      	ldr	r2, [r3, #12]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	f042 0201 	orr.w	r2, r2, #1
 800c5a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	4a2b      	ldr	r2, [pc, #172]	; (800c658 <HAL_TIM_Base_Start_IT+0xe4>)
 800c5aa:	4293      	cmp	r3, r2
 800c5ac:	d02c      	beq.n	800c608 <HAL_TIM_Base_Start_IT+0x94>
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c5b6:	d027      	beq.n	800c608 <HAL_TIM_Base_Start_IT+0x94>
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	4a27      	ldr	r2, [pc, #156]	; (800c65c <HAL_TIM_Base_Start_IT+0xe8>)
 800c5be:	4293      	cmp	r3, r2
 800c5c0:	d022      	beq.n	800c608 <HAL_TIM_Base_Start_IT+0x94>
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	4a26      	ldr	r2, [pc, #152]	; (800c660 <HAL_TIM_Base_Start_IT+0xec>)
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	d01d      	beq.n	800c608 <HAL_TIM_Base_Start_IT+0x94>
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	4a24      	ldr	r2, [pc, #144]	; (800c664 <HAL_TIM_Base_Start_IT+0xf0>)
 800c5d2:	4293      	cmp	r3, r2
 800c5d4:	d018      	beq.n	800c608 <HAL_TIM_Base_Start_IT+0x94>
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	4a23      	ldr	r2, [pc, #140]	; (800c668 <HAL_TIM_Base_Start_IT+0xf4>)
 800c5dc:	4293      	cmp	r3, r2
 800c5de:	d013      	beq.n	800c608 <HAL_TIM_Base_Start_IT+0x94>
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	4a21      	ldr	r2, [pc, #132]	; (800c66c <HAL_TIM_Base_Start_IT+0xf8>)
 800c5e6:	4293      	cmp	r3, r2
 800c5e8:	d00e      	beq.n	800c608 <HAL_TIM_Base_Start_IT+0x94>
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	4a20      	ldr	r2, [pc, #128]	; (800c670 <HAL_TIM_Base_Start_IT+0xfc>)
 800c5f0:	4293      	cmp	r3, r2
 800c5f2:	d009      	beq.n	800c608 <HAL_TIM_Base_Start_IT+0x94>
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	4a1e      	ldr	r2, [pc, #120]	; (800c674 <HAL_TIM_Base_Start_IT+0x100>)
 800c5fa:	4293      	cmp	r3, r2
 800c5fc:	d004      	beq.n	800c608 <HAL_TIM_Base_Start_IT+0x94>
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	4a1d      	ldr	r2, [pc, #116]	; (800c678 <HAL_TIM_Base_Start_IT+0x104>)
 800c604:	4293      	cmp	r3, r2
 800c606:	d115      	bne.n	800c634 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	689a      	ldr	r2, [r3, #8]
 800c60e:	4b1b      	ldr	r3, [pc, #108]	; (800c67c <HAL_TIM_Base_Start_IT+0x108>)
 800c610:	4013      	ands	r3, r2
 800c612:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2b06      	cmp	r3, #6
 800c618:	d015      	beq.n	800c646 <HAL_TIM_Base_Start_IT+0xd2>
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c620:	d011      	beq.n	800c646 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	681a      	ldr	r2, [r3, #0]
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	f042 0201 	orr.w	r2, r2, #1
 800c630:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c632:	e008      	b.n	800c646 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	681a      	ldr	r2, [r3, #0]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	f042 0201 	orr.w	r2, r2, #1
 800c642:	601a      	str	r2, [r3, #0]
 800c644:	e000      	b.n	800c648 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c646:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c648:	2300      	movs	r3, #0
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	3714      	adds	r7, #20
 800c64e:	46bd      	mov	sp, r7
 800c650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c654:	4770      	bx	lr
 800c656:	bf00      	nop
 800c658:	40010000 	.word	0x40010000
 800c65c:	40000400 	.word	0x40000400
 800c660:	40000800 	.word	0x40000800
 800c664:	40000c00 	.word	0x40000c00
 800c668:	40010400 	.word	0x40010400
 800c66c:	40001800 	.word	0x40001800
 800c670:	40014000 	.word	0x40014000
 800c674:	4000e000 	.word	0x4000e000
 800c678:	4000e400 	.word	0x4000e400
 800c67c:	00010007 	.word	0x00010007

0800c680 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b082      	sub	sp, #8
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d101      	bne.n	800c692 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c68e:	2301      	movs	r3, #1
 800c690:	e049      	b.n	800c726 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c698:	b2db      	uxtb	r3, r3
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d106      	bne.n	800c6ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f7f9 f950 	bl	800594c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2202      	movs	r2, #2
 800c6b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681a      	ldr	r2, [r3, #0]
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	3304      	adds	r3, #4
 800c6bc:	4619      	mov	r1, r3
 800c6be:	4610      	mov	r0, r2
 800c6c0:	f000 fdfa 	bl	800d2b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2201      	movs	r2, #1
 800c6c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2201      	movs	r2, #1
 800c6d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2201      	movs	r2, #1
 800c6e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2201      	movs	r2, #1
 800c6e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2201      	movs	r2, #1
 800c6f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2201      	movs	r2, #1
 800c700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2201      	movs	r2, #1
 800c708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2201      	movs	r2, #1
 800c710:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2201      	movs	r2, #1
 800c718:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2201      	movs	r2, #1
 800c720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c724:	2300      	movs	r3, #0
}
 800c726:	4618      	mov	r0, r3
 800c728:	3708      	adds	r7, #8
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}
	...

0800c730 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b084      	sub	sp, #16
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
 800c738:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d109      	bne.n	800c754 <HAL_TIM_PWM_Start+0x24>
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c746:	b2db      	uxtb	r3, r3
 800c748:	2b01      	cmp	r3, #1
 800c74a:	bf14      	ite	ne
 800c74c:	2301      	movne	r3, #1
 800c74e:	2300      	moveq	r3, #0
 800c750:	b2db      	uxtb	r3, r3
 800c752:	e03c      	b.n	800c7ce <HAL_TIM_PWM_Start+0x9e>
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	2b04      	cmp	r3, #4
 800c758:	d109      	bne.n	800c76e <HAL_TIM_PWM_Start+0x3e>
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c760:	b2db      	uxtb	r3, r3
 800c762:	2b01      	cmp	r3, #1
 800c764:	bf14      	ite	ne
 800c766:	2301      	movne	r3, #1
 800c768:	2300      	moveq	r3, #0
 800c76a:	b2db      	uxtb	r3, r3
 800c76c:	e02f      	b.n	800c7ce <HAL_TIM_PWM_Start+0x9e>
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	2b08      	cmp	r3, #8
 800c772:	d109      	bne.n	800c788 <HAL_TIM_PWM_Start+0x58>
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c77a:	b2db      	uxtb	r3, r3
 800c77c:	2b01      	cmp	r3, #1
 800c77e:	bf14      	ite	ne
 800c780:	2301      	movne	r3, #1
 800c782:	2300      	moveq	r3, #0
 800c784:	b2db      	uxtb	r3, r3
 800c786:	e022      	b.n	800c7ce <HAL_TIM_PWM_Start+0x9e>
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	2b0c      	cmp	r3, #12
 800c78c:	d109      	bne.n	800c7a2 <HAL_TIM_PWM_Start+0x72>
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c794:	b2db      	uxtb	r3, r3
 800c796:	2b01      	cmp	r3, #1
 800c798:	bf14      	ite	ne
 800c79a:	2301      	movne	r3, #1
 800c79c:	2300      	moveq	r3, #0
 800c79e:	b2db      	uxtb	r3, r3
 800c7a0:	e015      	b.n	800c7ce <HAL_TIM_PWM_Start+0x9e>
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	2b10      	cmp	r3, #16
 800c7a6:	d109      	bne.n	800c7bc <HAL_TIM_PWM_Start+0x8c>
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c7ae:	b2db      	uxtb	r3, r3
 800c7b0:	2b01      	cmp	r3, #1
 800c7b2:	bf14      	ite	ne
 800c7b4:	2301      	movne	r3, #1
 800c7b6:	2300      	moveq	r3, #0
 800c7b8:	b2db      	uxtb	r3, r3
 800c7ba:	e008      	b.n	800c7ce <HAL_TIM_PWM_Start+0x9e>
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c7c2:	b2db      	uxtb	r3, r3
 800c7c4:	2b01      	cmp	r3, #1
 800c7c6:	bf14      	ite	ne
 800c7c8:	2301      	movne	r3, #1
 800c7ca:	2300      	moveq	r3, #0
 800c7cc:	b2db      	uxtb	r3, r3
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d001      	beq.n	800c7d6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	e0ab      	b.n	800c92e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d104      	bne.n	800c7e6 <HAL_TIM_PWM_Start+0xb6>
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2202      	movs	r2, #2
 800c7e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c7e4:	e023      	b.n	800c82e <HAL_TIM_PWM_Start+0xfe>
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	2b04      	cmp	r3, #4
 800c7ea:	d104      	bne.n	800c7f6 <HAL_TIM_PWM_Start+0xc6>
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2202      	movs	r2, #2
 800c7f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c7f4:	e01b      	b.n	800c82e <HAL_TIM_PWM_Start+0xfe>
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	2b08      	cmp	r3, #8
 800c7fa:	d104      	bne.n	800c806 <HAL_TIM_PWM_Start+0xd6>
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2202      	movs	r2, #2
 800c800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c804:	e013      	b.n	800c82e <HAL_TIM_PWM_Start+0xfe>
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	2b0c      	cmp	r3, #12
 800c80a:	d104      	bne.n	800c816 <HAL_TIM_PWM_Start+0xe6>
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2202      	movs	r2, #2
 800c810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c814:	e00b      	b.n	800c82e <HAL_TIM_PWM_Start+0xfe>
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	2b10      	cmp	r3, #16
 800c81a:	d104      	bne.n	800c826 <HAL_TIM_PWM_Start+0xf6>
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2202      	movs	r2, #2
 800c820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c824:	e003      	b.n	800c82e <HAL_TIM_PWM_Start+0xfe>
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2202      	movs	r2, #2
 800c82a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	2201      	movs	r2, #1
 800c834:	6839      	ldr	r1, [r7, #0]
 800c836:	4618      	mov	r0, r3
 800c838:	f001 f958 	bl	800daec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	4a3d      	ldr	r2, [pc, #244]	; (800c938 <HAL_TIM_PWM_Start+0x208>)
 800c842:	4293      	cmp	r3, r2
 800c844:	d013      	beq.n	800c86e <HAL_TIM_PWM_Start+0x13e>
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	4a3c      	ldr	r2, [pc, #240]	; (800c93c <HAL_TIM_PWM_Start+0x20c>)
 800c84c:	4293      	cmp	r3, r2
 800c84e:	d00e      	beq.n	800c86e <HAL_TIM_PWM_Start+0x13e>
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	4a3a      	ldr	r2, [pc, #232]	; (800c940 <HAL_TIM_PWM_Start+0x210>)
 800c856:	4293      	cmp	r3, r2
 800c858:	d009      	beq.n	800c86e <HAL_TIM_PWM_Start+0x13e>
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	4a39      	ldr	r2, [pc, #228]	; (800c944 <HAL_TIM_PWM_Start+0x214>)
 800c860:	4293      	cmp	r3, r2
 800c862:	d004      	beq.n	800c86e <HAL_TIM_PWM_Start+0x13e>
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	4a37      	ldr	r2, [pc, #220]	; (800c948 <HAL_TIM_PWM_Start+0x218>)
 800c86a:	4293      	cmp	r3, r2
 800c86c:	d101      	bne.n	800c872 <HAL_TIM_PWM_Start+0x142>
 800c86e:	2301      	movs	r3, #1
 800c870:	e000      	b.n	800c874 <HAL_TIM_PWM_Start+0x144>
 800c872:	2300      	movs	r3, #0
 800c874:	2b00      	cmp	r3, #0
 800c876:	d007      	beq.n	800c888 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c886:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	4a2a      	ldr	r2, [pc, #168]	; (800c938 <HAL_TIM_PWM_Start+0x208>)
 800c88e:	4293      	cmp	r3, r2
 800c890:	d02c      	beq.n	800c8ec <HAL_TIM_PWM_Start+0x1bc>
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c89a:	d027      	beq.n	800c8ec <HAL_TIM_PWM_Start+0x1bc>
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	4a2a      	ldr	r2, [pc, #168]	; (800c94c <HAL_TIM_PWM_Start+0x21c>)
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	d022      	beq.n	800c8ec <HAL_TIM_PWM_Start+0x1bc>
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	4a29      	ldr	r2, [pc, #164]	; (800c950 <HAL_TIM_PWM_Start+0x220>)
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d01d      	beq.n	800c8ec <HAL_TIM_PWM_Start+0x1bc>
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	4a27      	ldr	r2, [pc, #156]	; (800c954 <HAL_TIM_PWM_Start+0x224>)
 800c8b6:	4293      	cmp	r3, r2
 800c8b8:	d018      	beq.n	800c8ec <HAL_TIM_PWM_Start+0x1bc>
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	4a1f      	ldr	r2, [pc, #124]	; (800c93c <HAL_TIM_PWM_Start+0x20c>)
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	d013      	beq.n	800c8ec <HAL_TIM_PWM_Start+0x1bc>
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	4a23      	ldr	r2, [pc, #140]	; (800c958 <HAL_TIM_PWM_Start+0x228>)
 800c8ca:	4293      	cmp	r3, r2
 800c8cc:	d00e      	beq.n	800c8ec <HAL_TIM_PWM_Start+0x1bc>
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	4a1b      	ldr	r2, [pc, #108]	; (800c940 <HAL_TIM_PWM_Start+0x210>)
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d009      	beq.n	800c8ec <HAL_TIM_PWM_Start+0x1bc>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	4a1f      	ldr	r2, [pc, #124]	; (800c95c <HAL_TIM_PWM_Start+0x22c>)
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	d004      	beq.n	800c8ec <HAL_TIM_PWM_Start+0x1bc>
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	4a1e      	ldr	r2, [pc, #120]	; (800c960 <HAL_TIM_PWM_Start+0x230>)
 800c8e8:	4293      	cmp	r3, r2
 800c8ea:	d115      	bne.n	800c918 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	689a      	ldr	r2, [r3, #8]
 800c8f2:	4b1c      	ldr	r3, [pc, #112]	; (800c964 <HAL_TIM_PWM_Start+0x234>)
 800c8f4:	4013      	ands	r3, r2
 800c8f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	2b06      	cmp	r3, #6
 800c8fc:	d015      	beq.n	800c92a <HAL_TIM_PWM_Start+0x1fa>
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c904:	d011      	beq.n	800c92a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	681a      	ldr	r2, [r3, #0]
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	f042 0201 	orr.w	r2, r2, #1
 800c914:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c916:	e008      	b.n	800c92a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	681a      	ldr	r2, [r3, #0]
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	f042 0201 	orr.w	r2, r2, #1
 800c926:	601a      	str	r2, [r3, #0]
 800c928:	e000      	b.n	800c92c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c92a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c92c:	2300      	movs	r3, #0
}
 800c92e:	4618      	mov	r0, r3
 800c930:	3710      	adds	r7, #16
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}
 800c936:	bf00      	nop
 800c938:	40010000 	.word	0x40010000
 800c93c:	40010400 	.word	0x40010400
 800c940:	40014000 	.word	0x40014000
 800c944:	40014400 	.word	0x40014400
 800c948:	40014800 	.word	0x40014800
 800c94c:	40000400 	.word	0x40000400
 800c950:	40000800 	.word	0x40000800
 800c954:	40000c00 	.word	0x40000c00
 800c958:	40001800 	.word	0x40001800
 800c95c:	4000e000 	.word	0x4000e000
 800c960:	4000e400 	.word	0x4000e400
 800c964:	00010007 	.word	0x00010007

0800c968 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b086      	sub	sp, #24
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
 800c970:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d101      	bne.n	800c97c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c978:	2301      	movs	r3, #1
 800c97a:	e08f      	b.n	800ca9c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c982:	b2db      	uxtb	r3, r3
 800c984:	2b00      	cmp	r3, #0
 800c986:	d106      	bne.n	800c996 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2200      	movs	r2, #0
 800c98c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f7f8 fecd 	bl	8005730 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2202      	movs	r2, #2
 800c99a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	6899      	ldr	r1, [r3, #8]
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681a      	ldr	r2, [r3, #0]
 800c9a8:	4b3e      	ldr	r3, [pc, #248]	; (800caa4 <HAL_TIM_Encoder_Init+0x13c>)
 800c9aa:	400b      	ands	r3, r1
 800c9ac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681a      	ldr	r2, [r3, #0]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	3304      	adds	r3, #4
 800c9b6:	4619      	mov	r1, r3
 800c9b8:	4610      	mov	r0, r2
 800c9ba:	f000 fc7d 	bl	800d2b8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	689b      	ldr	r3, [r3, #8]
 800c9c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	699b      	ldr	r3, [r3, #24]
 800c9cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	6a1b      	ldr	r3, [r3, #32]
 800c9d4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	697a      	ldr	r2, [r7, #20]
 800c9dc:	4313      	orrs	r3, r2
 800c9de:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c9e0:	693a      	ldr	r2, [r7, #16]
 800c9e2:	4b31      	ldr	r3, [pc, #196]	; (800caa8 <HAL_TIM_Encoder_Init+0x140>)
 800c9e4:	4013      	ands	r3, r2
 800c9e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	689a      	ldr	r2, [r3, #8]
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	699b      	ldr	r3, [r3, #24]
 800c9f0:	021b      	lsls	r3, r3, #8
 800c9f2:	4313      	orrs	r3, r2
 800c9f4:	693a      	ldr	r2, [r7, #16]
 800c9f6:	4313      	orrs	r3, r2
 800c9f8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c9fa:	693a      	ldr	r2, [r7, #16]
 800c9fc:	4b2b      	ldr	r3, [pc, #172]	; (800caac <HAL_TIM_Encoder_Init+0x144>)
 800c9fe:	4013      	ands	r3, r2
 800ca00:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ca02:	693a      	ldr	r2, [r7, #16]
 800ca04:	4b2a      	ldr	r3, [pc, #168]	; (800cab0 <HAL_TIM_Encoder_Init+0x148>)
 800ca06:	4013      	ands	r3, r2
 800ca08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	68da      	ldr	r2, [r3, #12]
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	69db      	ldr	r3, [r3, #28]
 800ca12:	021b      	lsls	r3, r3, #8
 800ca14:	4313      	orrs	r3, r2
 800ca16:	693a      	ldr	r2, [r7, #16]
 800ca18:	4313      	orrs	r3, r2
 800ca1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	691b      	ldr	r3, [r3, #16]
 800ca20:	011a      	lsls	r2, r3, #4
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	6a1b      	ldr	r3, [r3, #32]
 800ca26:	031b      	lsls	r3, r3, #12
 800ca28:	4313      	orrs	r3, r2
 800ca2a:	693a      	ldr	r2, [r7, #16]
 800ca2c:	4313      	orrs	r3, r2
 800ca2e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ca36:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ca3e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	685a      	ldr	r2, [r3, #4]
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	695b      	ldr	r3, [r3, #20]
 800ca48:	011b      	lsls	r3, r3, #4
 800ca4a:	4313      	orrs	r3, r2
 800ca4c:	68fa      	ldr	r2, [r7, #12]
 800ca4e:	4313      	orrs	r3, r2
 800ca50:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	697a      	ldr	r2, [r7, #20]
 800ca58:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	693a      	ldr	r2, [r7, #16]
 800ca60:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	68fa      	ldr	r2, [r7, #12]
 800ca68:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2201      	movs	r2, #1
 800ca6e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2201      	movs	r2, #1
 800ca76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2201      	movs	r2, #1
 800ca7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2201      	movs	r2, #1
 800ca86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2201      	movs	r2, #1
 800ca8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2201      	movs	r2, #1
 800ca96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ca9a:	2300      	movs	r3, #0
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3718      	adds	r7, #24
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}
 800caa4:	fffebff8 	.word	0xfffebff8
 800caa8:	fffffcfc 	.word	0xfffffcfc
 800caac:	fffff3f3 	.word	0xfffff3f3
 800cab0:	ffff0f0f 	.word	0xffff0f0f

0800cab4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b084      	sub	sp, #16
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
 800cabc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cac4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cacc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cad4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cadc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d110      	bne.n	800cb06 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800cae4:	7bfb      	ldrb	r3, [r7, #15]
 800cae6:	2b01      	cmp	r3, #1
 800cae8:	d102      	bne.n	800caf0 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800caea:	7b7b      	ldrb	r3, [r7, #13]
 800caec:	2b01      	cmp	r3, #1
 800caee:	d001      	beq.n	800caf4 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800caf0:	2301      	movs	r3, #1
 800caf2:	e089      	b.n	800cc08 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2202      	movs	r2, #2
 800caf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2202      	movs	r2, #2
 800cb00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb04:	e031      	b.n	800cb6a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	2b04      	cmp	r3, #4
 800cb0a:	d110      	bne.n	800cb2e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800cb0c:	7bbb      	ldrb	r3, [r7, #14]
 800cb0e:	2b01      	cmp	r3, #1
 800cb10:	d102      	bne.n	800cb18 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800cb12:	7b3b      	ldrb	r3, [r7, #12]
 800cb14:	2b01      	cmp	r3, #1
 800cb16:	d001      	beq.n	800cb1c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800cb18:	2301      	movs	r3, #1
 800cb1a:	e075      	b.n	800cc08 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2202      	movs	r2, #2
 800cb20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2202      	movs	r2, #2
 800cb28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cb2c:	e01d      	b.n	800cb6a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800cb2e:	7bfb      	ldrb	r3, [r7, #15]
 800cb30:	2b01      	cmp	r3, #1
 800cb32:	d108      	bne.n	800cb46 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800cb34:	7bbb      	ldrb	r3, [r7, #14]
 800cb36:	2b01      	cmp	r3, #1
 800cb38:	d105      	bne.n	800cb46 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800cb3a:	7b7b      	ldrb	r3, [r7, #13]
 800cb3c:	2b01      	cmp	r3, #1
 800cb3e:	d102      	bne.n	800cb46 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800cb40:	7b3b      	ldrb	r3, [r7, #12]
 800cb42:	2b01      	cmp	r3, #1
 800cb44:	d001      	beq.n	800cb4a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800cb46:	2301      	movs	r3, #1
 800cb48:	e05e      	b.n	800cc08 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2202      	movs	r2, #2
 800cb4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2202      	movs	r2, #2
 800cb56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2202      	movs	r2, #2
 800cb5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2202      	movs	r2, #2
 800cb66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d003      	beq.n	800cb78 <HAL_TIM_Encoder_Start_IT+0xc4>
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	2b04      	cmp	r3, #4
 800cb74:	d010      	beq.n	800cb98 <HAL_TIM_Encoder_Start_IT+0xe4>
 800cb76:	e01f      	b.n	800cbb8 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	2201      	movs	r2, #1
 800cb7e:	2100      	movs	r1, #0
 800cb80:	4618      	mov	r0, r3
 800cb82:	f000 ffb3 	bl	800daec <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	68da      	ldr	r2, [r3, #12]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	f042 0202 	orr.w	r2, r2, #2
 800cb94:	60da      	str	r2, [r3, #12]
      break;
 800cb96:	e02e      	b.n	800cbf6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	2201      	movs	r2, #1
 800cb9e:	2104      	movs	r1, #4
 800cba0:	4618      	mov	r0, r3
 800cba2:	f000 ffa3 	bl	800daec <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	68da      	ldr	r2, [r3, #12]
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	f042 0204 	orr.w	r2, r2, #4
 800cbb4:	60da      	str	r2, [r3, #12]
      break;
 800cbb6:	e01e      	b.n	800cbf6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	2201      	movs	r2, #1
 800cbbe:	2100      	movs	r1, #0
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f000 ff93 	bl	800daec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	2201      	movs	r2, #1
 800cbcc:	2104      	movs	r1, #4
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f000 ff8c 	bl	800daec <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	68da      	ldr	r2, [r3, #12]
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	f042 0202 	orr.w	r2, r2, #2
 800cbe2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	68da      	ldr	r2, [r3, #12]
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f042 0204 	orr.w	r2, r2, #4
 800cbf2:	60da      	str	r2, [r3, #12]
      break;
 800cbf4:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	681a      	ldr	r2, [r3, #0]
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	f042 0201 	orr.w	r2, r2, #1
 800cc04:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800cc06:	2300      	movs	r3, #0
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3710      	adds	r7, #16
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}

0800cc10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b082      	sub	sp, #8
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	691b      	ldr	r3, [r3, #16]
 800cc1e:	f003 0302 	and.w	r3, r3, #2
 800cc22:	2b02      	cmp	r3, #2
 800cc24:	d122      	bne.n	800cc6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	68db      	ldr	r3, [r3, #12]
 800cc2c:	f003 0302 	and.w	r3, r3, #2
 800cc30:	2b02      	cmp	r3, #2
 800cc32:	d11b      	bne.n	800cc6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	f06f 0202 	mvn.w	r2, #2
 800cc3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	2201      	movs	r2, #1
 800cc42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	699b      	ldr	r3, [r3, #24]
 800cc4a:	f003 0303 	and.w	r3, r3, #3
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d003      	beq.n	800cc5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	f000 fb12 	bl	800d27c <HAL_TIM_IC_CaptureCallback>
 800cc58:	e005      	b.n	800cc66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	f000 fb04 	bl	800d268 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc60:	6878      	ldr	r0, [r7, #4]
 800cc62:	f000 fb15 	bl	800d290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	2200      	movs	r2, #0
 800cc6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	691b      	ldr	r3, [r3, #16]
 800cc72:	f003 0304 	and.w	r3, r3, #4
 800cc76:	2b04      	cmp	r3, #4
 800cc78:	d122      	bne.n	800ccc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	68db      	ldr	r3, [r3, #12]
 800cc80:	f003 0304 	and.w	r3, r3, #4
 800cc84:	2b04      	cmp	r3, #4
 800cc86:	d11b      	bne.n	800ccc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	f06f 0204 	mvn.w	r2, #4
 800cc90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	2202      	movs	r2, #2
 800cc96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	699b      	ldr	r3, [r3, #24]
 800cc9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d003      	beq.n	800ccae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cca6:	6878      	ldr	r0, [r7, #4]
 800cca8:	f000 fae8 	bl	800d27c <HAL_TIM_IC_CaptureCallback>
 800ccac:	e005      	b.n	800ccba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	f000 fada 	bl	800d268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	f000 faeb 	bl	800d290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	691b      	ldr	r3, [r3, #16]
 800ccc6:	f003 0308 	and.w	r3, r3, #8
 800ccca:	2b08      	cmp	r3, #8
 800cccc:	d122      	bne.n	800cd14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	68db      	ldr	r3, [r3, #12]
 800ccd4:	f003 0308 	and.w	r3, r3, #8
 800ccd8:	2b08      	cmp	r3, #8
 800ccda:	d11b      	bne.n	800cd14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	f06f 0208 	mvn.w	r2, #8
 800cce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2204      	movs	r2, #4
 800ccea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	69db      	ldr	r3, [r3, #28]
 800ccf2:	f003 0303 	and.w	r3, r3, #3
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d003      	beq.n	800cd02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f000 fabe 	bl	800d27c <HAL_TIM_IC_CaptureCallback>
 800cd00:	e005      	b.n	800cd0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	f000 fab0 	bl	800d268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f000 fac1 	bl	800d290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2200      	movs	r2, #0
 800cd12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	691b      	ldr	r3, [r3, #16]
 800cd1a:	f003 0310 	and.w	r3, r3, #16
 800cd1e:	2b10      	cmp	r3, #16
 800cd20:	d122      	bne.n	800cd68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	68db      	ldr	r3, [r3, #12]
 800cd28:	f003 0310 	and.w	r3, r3, #16
 800cd2c:	2b10      	cmp	r3, #16
 800cd2e:	d11b      	bne.n	800cd68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	f06f 0210 	mvn.w	r2, #16
 800cd38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2208      	movs	r2, #8
 800cd3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	69db      	ldr	r3, [r3, #28]
 800cd46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d003      	beq.n	800cd56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cd4e:	6878      	ldr	r0, [r7, #4]
 800cd50:	f000 fa94 	bl	800d27c <HAL_TIM_IC_CaptureCallback>
 800cd54:	e005      	b.n	800cd62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd56:	6878      	ldr	r0, [r7, #4]
 800cd58:	f000 fa86 	bl	800d268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd5c:	6878      	ldr	r0, [r7, #4]
 800cd5e:	f000 fa97 	bl	800d290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	2200      	movs	r2, #0
 800cd66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	691b      	ldr	r3, [r3, #16]
 800cd6e:	f003 0301 	and.w	r3, r3, #1
 800cd72:	2b01      	cmp	r3, #1
 800cd74:	d10e      	bne.n	800cd94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	68db      	ldr	r3, [r3, #12]
 800cd7c:	f003 0301 	and.w	r3, r3, #1
 800cd80:	2b01      	cmp	r3, #1
 800cd82:	d107      	bne.n	800cd94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	f06f 0201 	mvn.w	r2, #1
 800cd8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f7f3 fe7a 	bl	8000a88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	691b      	ldr	r3, [r3, #16]
 800cd9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd9e:	2b80      	cmp	r3, #128	; 0x80
 800cda0:	d10e      	bne.n	800cdc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	68db      	ldr	r3, [r3, #12]
 800cda8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdac:	2b80      	cmp	r3, #128	; 0x80
 800cdae:	d107      	bne.n	800cdc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cdb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f001 f802 	bl	800ddc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	691b      	ldr	r3, [r3, #16]
 800cdc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cdce:	d10e      	bne.n	800cdee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	68db      	ldr	r3, [r3, #12]
 800cdd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdda:	2b80      	cmp	r3, #128	; 0x80
 800cddc:	d107      	bne.n	800cdee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cde6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cde8:	6878      	ldr	r0, [r7, #4]
 800cdea:	f000 fff5 	bl	800ddd8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	691b      	ldr	r3, [r3, #16]
 800cdf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdf8:	2b40      	cmp	r3, #64	; 0x40
 800cdfa:	d10e      	bne.n	800ce1a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	68db      	ldr	r3, [r3, #12]
 800ce02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce06:	2b40      	cmp	r3, #64	; 0x40
 800ce08:	d107      	bne.n	800ce1a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ce12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ce14:	6878      	ldr	r0, [r7, #4]
 800ce16:	f000 fa45 	bl	800d2a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	691b      	ldr	r3, [r3, #16]
 800ce20:	f003 0320 	and.w	r3, r3, #32
 800ce24:	2b20      	cmp	r3, #32
 800ce26:	d10e      	bne.n	800ce46 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	68db      	ldr	r3, [r3, #12]
 800ce2e:	f003 0320 	and.w	r3, r3, #32
 800ce32:	2b20      	cmp	r3, #32
 800ce34:	d107      	bne.n	800ce46 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	f06f 0220 	mvn.w	r2, #32
 800ce3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f000 ffb5 	bl	800ddb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ce46:	bf00      	nop
 800ce48:	3708      	adds	r7, #8
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}
	...

0800ce50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b086      	sub	sp, #24
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	60f8      	str	r0, [r7, #12]
 800ce58:	60b9      	str	r1, [r7, #8]
 800ce5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce66:	2b01      	cmp	r3, #1
 800ce68:	d101      	bne.n	800ce6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ce6a:	2302      	movs	r3, #2
 800ce6c:	e0ff      	b.n	800d06e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	2201      	movs	r2, #1
 800ce72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2b14      	cmp	r3, #20
 800ce7a:	f200 80f0 	bhi.w	800d05e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ce7e:	a201      	add	r2, pc, #4	; (adr r2, 800ce84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ce80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce84:	0800ced9 	.word	0x0800ced9
 800ce88:	0800d05f 	.word	0x0800d05f
 800ce8c:	0800d05f 	.word	0x0800d05f
 800ce90:	0800d05f 	.word	0x0800d05f
 800ce94:	0800cf19 	.word	0x0800cf19
 800ce98:	0800d05f 	.word	0x0800d05f
 800ce9c:	0800d05f 	.word	0x0800d05f
 800cea0:	0800d05f 	.word	0x0800d05f
 800cea4:	0800cf5b 	.word	0x0800cf5b
 800cea8:	0800d05f 	.word	0x0800d05f
 800ceac:	0800d05f 	.word	0x0800d05f
 800ceb0:	0800d05f 	.word	0x0800d05f
 800ceb4:	0800cf9b 	.word	0x0800cf9b
 800ceb8:	0800d05f 	.word	0x0800d05f
 800cebc:	0800d05f 	.word	0x0800d05f
 800cec0:	0800d05f 	.word	0x0800d05f
 800cec4:	0800cfdd 	.word	0x0800cfdd
 800cec8:	0800d05f 	.word	0x0800d05f
 800cecc:	0800d05f 	.word	0x0800d05f
 800ced0:	0800d05f 	.word	0x0800d05f
 800ced4:	0800d01d 	.word	0x0800d01d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	68b9      	ldr	r1, [r7, #8]
 800cede:	4618      	mov	r0, r3
 800cee0:	f000 fa90 	bl	800d404 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	699a      	ldr	r2, [r3, #24]
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	f042 0208 	orr.w	r2, r2, #8
 800cef2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	699a      	ldr	r2, [r3, #24]
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	f022 0204 	bic.w	r2, r2, #4
 800cf02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	6999      	ldr	r1, [r3, #24]
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	691a      	ldr	r2, [r3, #16]
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	430a      	orrs	r2, r1
 800cf14:	619a      	str	r2, [r3, #24]
      break;
 800cf16:	e0a5      	b.n	800d064 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	68b9      	ldr	r1, [r7, #8]
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f000 fb00 	bl	800d524 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	699a      	ldr	r2, [r3, #24]
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cf32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	699a      	ldr	r2, [r3, #24]
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cf42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	6999      	ldr	r1, [r3, #24]
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	691b      	ldr	r3, [r3, #16]
 800cf4e:	021a      	lsls	r2, r3, #8
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	430a      	orrs	r2, r1
 800cf56:	619a      	str	r2, [r3, #24]
      break;
 800cf58:	e084      	b.n	800d064 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	68b9      	ldr	r1, [r7, #8]
 800cf60:	4618      	mov	r0, r3
 800cf62:	f000 fb69 	bl	800d638 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	69da      	ldr	r2, [r3, #28]
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	f042 0208 	orr.w	r2, r2, #8
 800cf74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	69da      	ldr	r2, [r3, #28]
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	f022 0204 	bic.w	r2, r2, #4
 800cf84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	69d9      	ldr	r1, [r3, #28]
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	691a      	ldr	r2, [r3, #16]
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	430a      	orrs	r2, r1
 800cf96:	61da      	str	r2, [r3, #28]
      break;
 800cf98:	e064      	b.n	800d064 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	68b9      	ldr	r1, [r7, #8]
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f000 fbd1 	bl	800d748 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	69da      	ldr	r2, [r3, #28]
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cfb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	69da      	ldr	r2, [r3, #28]
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cfc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	69d9      	ldr	r1, [r3, #28]
 800cfcc:	68bb      	ldr	r3, [r7, #8]
 800cfce:	691b      	ldr	r3, [r3, #16]
 800cfd0:	021a      	lsls	r2, r3, #8
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	430a      	orrs	r2, r1
 800cfd8:	61da      	str	r2, [r3, #28]
      break;
 800cfda:	e043      	b.n	800d064 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	68b9      	ldr	r1, [r7, #8]
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	f000 fc1a 	bl	800d81c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	f042 0208 	orr.w	r2, r2, #8
 800cff6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f022 0204 	bic.w	r2, r2, #4
 800d006:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	691a      	ldr	r2, [r3, #16]
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	430a      	orrs	r2, r1
 800d018:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d01a:	e023      	b.n	800d064 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	68b9      	ldr	r1, [r7, #8]
 800d022:	4618      	mov	r0, r3
 800d024:	f000 fc5e 	bl	800d8e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d036:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d046:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d04e:	68bb      	ldr	r3, [r7, #8]
 800d050:	691b      	ldr	r3, [r3, #16]
 800d052:	021a      	lsls	r2, r3, #8
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	430a      	orrs	r2, r1
 800d05a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d05c:	e002      	b.n	800d064 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d05e:	2301      	movs	r3, #1
 800d060:	75fb      	strb	r3, [r7, #23]
      break;
 800d062:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	2200      	movs	r2, #0
 800d068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d06c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d06e:	4618      	mov	r0, r3
 800d070:	3718      	adds	r7, #24
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
 800d076:	bf00      	nop

0800d078 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b084      	sub	sp, #16
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
 800d080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d082:	2300      	movs	r3, #0
 800d084:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d08c:	2b01      	cmp	r3, #1
 800d08e:	d101      	bne.n	800d094 <HAL_TIM_ConfigClockSource+0x1c>
 800d090:	2302      	movs	r3, #2
 800d092:	e0dc      	b.n	800d24e <HAL_TIM_ConfigClockSource+0x1d6>
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2201      	movs	r2, #1
 800d098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2202      	movs	r2, #2
 800d0a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	689b      	ldr	r3, [r3, #8]
 800d0aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d0ac:	68ba      	ldr	r2, [r7, #8]
 800d0ae:	4b6a      	ldr	r3, [pc, #424]	; (800d258 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d0b0:	4013      	ands	r3, r2
 800d0b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d0b4:	68bb      	ldr	r3, [r7, #8]
 800d0b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d0ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	68ba      	ldr	r2, [r7, #8]
 800d0c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	4a64      	ldr	r2, [pc, #400]	; (800d25c <HAL_TIM_ConfigClockSource+0x1e4>)
 800d0ca:	4293      	cmp	r3, r2
 800d0cc:	f000 80a9 	beq.w	800d222 <HAL_TIM_ConfigClockSource+0x1aa>
 800d0d0:	4a62      	ldr	r2, [pc, #392]	; (800d25c <HAL_TIM_ConfigClockSource+0x1e4>)
 800d0d2:	4293      	cmp	r3, r2
 800d0d4:	f200 80ae 	bhi.w	800d234 <HAL_TIM_ConfigClockSource+0x1bc>
 800d0d8:	4a61      	ldr	r2, [pc, #388]	; (800d260 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d0da:	4293      	cmp	r3, r2
 800d0dc:	f000 80a1 	beq.w	800d222 <HAL_TIM_ConfigClockSource+0x1aa>
 800d0e0:	4a5f      	ldr	r2, [pc, #380]	; (800d260 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d0e2:	4293      	cmp	r3, r2
 800d0e4:	f200 80a6 	bhi.w	800d234 <HAL_TIM_ConfigClockSource+0x1bc>
 800d0e8:	4a5e      	ldr	r2, [pc, #376]	; (800d264 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	f000 8099 	beq.w	800d222 <HAL_TIM_ConfigClockSource+0x1aa>
 800d0f0:	4a5c      	ldr	r2, [pc, #368]	; (800d264 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d0f2:	4293      	cmp	r3, r2
 800d0f4:	f200 809e 	bhi.w	800d234 <HAL_TIM_ConfigClockSource+0x1bc>
 800d0f8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d0fc:	f000 8091 	beq.w	800d222 <HAL_TIM_ConfigClockSource+0x1aa>
 800d100:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d104:	f200 8096 	bhi.w	800d234 <HAL_TIM_ConfigClockSource+0x1bc>
 800d108:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d10c:	f000 8089 	beq.w	800d222 <HAL_TIM_ConfigClockSource+0x1aa>
 800d110:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d114:	f200 808e 	bhi.w	800d234 <HAL_TIM_ConfigClockSource+0x1bc>
 800d118:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d11c:	d03e      	beq.n	800d19c <HAL_TIM_ConfigClockSource+0x124>
 800d11e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d122:	f200 8087 	bhi.w	800d234 <HAL_TIM_ConfigClockSource+0x1bc>
 800d126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d12a:	f000 8086 	beq.w	800d23a <HAL_TIM_ConfigClockSource+0x1c2>
 800d12e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d132:	d87f      	bhi.n	800d234 <HAL_TIM_ConfigClockSource+0x1bc>
 800d134:	2b70      	cmp	r3, #112	; 0x70
 800d136:	d01a      	beq.n	800d16e <HAL_TIM_ConfigClockSource+0xf6>
 800d138:	2b70      	cmp	r3, #112	; 0x70
 800d13a:	d87b      	bhi.n	800d234 <HAL_TIM_ConfigClockSource+0x1bc>
 800d13c:	2b60      	cmp	r3, #96	; 0x60
 800d13e:	d050      	beq.n	800d1e2 <HAL_TIM_ConfigClockSource+0x16a>
 800d140:	2b60      	cmp	r3, #96	; 0x60
 800d142:	d877      	bhi.n	800d234 <HAL_TIM_ConfigClockSource+0x1bc>
 800d144:	2b50      	cmp	r3, #80	; 0x50
 800d146:	d03c      	beq.n	800d1c2 <HAL_TIM_ConfigClockSource+0x14a>
 800d148:	2b50      	cmp	r3, #80	; 0x50
 800d14a:	d873      	bhi.n	800d234 <HAL_TIM_ConfigClockSource+0x1bc>
 800d14c:	2b40      	cmp	r3, #64	; 0x40
 800d14e:	d058      	beq.n	800d202 <HAL_TIM_ConfigClockSource+0x18a>
 800d150:	2b40      	cmp	r3, #64	; 0x40
 800d152:	d86f      	bhi.n	800d234 <HAL_TIM_ConfigClockSource+0x1bc>
 800d154:	2b30      	cmp	r3, #48	; 0x30
 800d156:	d064      	beq.n	800d222 <HAL_TIM_ConfigClockSource+0x1aa>
 800d158:	2b30      	cmp	r3, #48	; 0x30
 800d15a:	d86b      	bhi.n	800d234 <HAL_TIM_ConfigClockSource+0x1bc>
 800d15c:	2b20      	cmp	r3, #32
 800d15e:	d060      	beq.n	800d222 <HAL_TIM_ConfigClockSource+0x1aa>
 800d160:	2b20      	cmp	r3, #32
 800d162:	d867      	bhi.n	800d234 <HAL_TIM_ConfigClockSource+0x1bc>
 800d164:	2b00      	cmp	r3, #0
 800d166:	d05c      	beq.n	800d222 <HAL_TIM_ConfigClockSource+0x1aa>
 800d168:	2b10      	cmp	r3, #16
 800d16a:	d05a      	beq.n	800d222 <HAL_TIM_ConfigClockSource+0x1aa>
 800d16c:	e062      	b.n	800d234 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d17e:	f000 fc95 	bl	800daac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	689b      	ldr	r3, [r3, #8]
 800d188:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d190:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	68ba      	ldr	r2, [r7, #8]
 800d198:	609a      	str	r2, [r3, #8]
      break;
 800d19a:	e04f      	b.n	800d23c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d1ac:	f000 fc7e 	bl	800daac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	689a      	ldr	r2, [r3, #8]
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d1be:	609a      	str	r2, [r3, #8]
      break;
 800d1c0:	e03c      	b.n	800d23c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d1ce:	461a      	mov	r2, r3
 800d1d0:	f000 fbee 	bl	800d9b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	2150      	movs	r1, #80	; 0x50
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f000 fc48 	bl	800da70 <TIM_ITRx_SetConfig>
      break;
 800d1e0:	e02c      	b.n	800d23c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d1ee:	461a      	mov	r2, r3
 800d1f0:	f000 fc0d 	bl	800da0e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	2160      	movs	r1, #96	; 0x60
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f000 fc38 	bl	800da70 <TIM_ITRx_SetConfig>
      break;
 800d200:	e01c      	b.n	800d23c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d20e:	461a      	mov	r2, r3
 800d210:	f000 fbce 	bl	800d9b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	2140      	movs	r1, #64	; 0x40
 800d21a:	4618      	mov	r0, r3
 800d21c:	f000 fc28 	bl	800da70 <TIM_ITRx_SetConfig>
      break;
 800d220:	e00c      	b.n	800d23c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681a      	ldr	r2, [r3, #0]
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	4619      	mov	r1, r3
 800d22c:	4610      	mov	r0, r2
 800d22e:	f000 fc1f 	bl	800da70 <TIM_ITRx_SetConfig>
      break;
 800d232:	e003      	b.n	800d23c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d234:	2301      	movs	r3, #1
 800d236:	73fb      	strb	r3, [r7, #15]
      break;
 800d238:	e000      	b.n	800d23c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d23a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2201      	movs	r2, #1
 800d240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2200      	movs	r2, #0
 800d248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d24c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d24e:	4618      	mov	r0, r3
 800d250:	3710      	adds	r7, #16
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}
 800d256:	bf00      	nop
 800d258:	ffceff88 	.word	0xffceff88
 800d25c:	00100040 	.word	0x00100040
 800d260:	00100030 	.word	0x00100030
 800d264:	00100020 	.word	0x00100020

0800d268 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d268:	b480      	push	{r7}
 800d26a:	b083      	sub	sp, #12
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d270:	bf00      	nop
 800d272:	370c      	adds	r7, #12
 800d274:	46bd      	mov	sp, r7
 800d276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27a:	4770      	bx	lr

0800d27c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d27c:	b480      	push	{r7}
 800d27e:	b083      	sub	sp, #12
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d284:	bf00      	nop
 800d286:	370c      	adds	r7, #12
 800d288:	46bd      	mov	sp, r7
 800d28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28e:	4770      	bx	lr

0800d290 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d290:	b480      	push	{r7}
 800d292:	b083      	sub	sp, #12
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d298:	bf00      	nop
 800d29a:	370c      	adds	r7, #12
 800d29c:	46bd      	mov	sp, r7
 800d29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a2:	4770      	bx	lr

0800d2a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d2a4:	b480      	push	{r7}
 800d2a6:	b083      	sub	sp, #12
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d2ac:	bf00      	nop
 800d2ae:	370c      	adds	r7, #12
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b6:	4770      	bx	lr

0800d2b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d2b8:	b480      	push	{r7}
 800d2ba:	b085      	sub	sp, #20
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
 800d2c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	4a44      	ldr	r2, [pc, #272]	; (800d3dc <TIM_Base_SetConfig+0x124>)
 800d2cc:	4293      	cmp	r3, r2
 800d2ce:	d013      	beq.n	800d2f8 <TIM_Base_SetConfig+0x40>
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d2d6:	d00f      	beq.n	800d2f8 <TIM_Base_SetConfig+0x40>
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	4a41      	ldr	r2, [pc, #260]	; (800d3e0 <TIM_Base_SetConfig+0x128>)
 800d2dc:	4293      	cmp	r3, r2
 800d2de:	d00b      	beq.n	800d2f8 <TIM_Base_SetConfig+0x40>
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	4a40      	ldr	r2, [pc, #256]	; (800d3e4 <TIM_Base_SetConfig+0x12c>)
 800d2e4:	4293      	cmp	r3, r2
 800d2e6:	d007      	beq.n	800d2f8 <TIM_Base_SetConfig+0x40>
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	4a3f      	ldr	r2, [pc, #252]	; (800d3e8 <TIM_Base_SetConfig+0x130>)
 800d2ec:	4293      	cmp	r3, r2
 800d2ee:	d003      	beq.n	800d2f8 <TIM_Base_SetConfig+0x40>
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	4a3e      	ldr	r2, [pc, #248]	; (800d3ec <TIM_Base_SetConfig+0x134>)
 800d2f4:	4293      	cmp	r3, r2
 800d2f6:	d108      	bne.n	800d30a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	685b      	ldr	r3, [r3, #4]
 800d304:	68fa      	ldr	r2, [r7, #12]
 800d306:	4313      	orrs	r3, r2
 800d308:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	4a33      	ldr	r2, [pc, #204]	; (800d3dc <TIM_Base_SetConfig+0x124>)
 800d30e:	4293      	cmp	r3, r2
 800d310:	d027      	beq.n	800d362 <TIM_Base_SetConfig+0xaa>
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d318:	d023      	beq.n	800d362 <TIM_Base_SetConfig+0xaa>
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	4a30      	ldr	r2, [pc, #192]	; (800d3e0 <TIM_Base_SetConfig+0x128>)
 800d31e:	4293      	cmp	r3, r2
 800d320:	d01f      	beq.n	800d362 <TIM_Base_SetConfig+0xaa>
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	4a2f      	ldr	r2, [pc, #188]	; (800d3e4 <TIM_Base_SetConfig+0x12c>)
 800d326:	4293      	cmp	r3, r2
 800d328:	d01b      	beq.n	800d362 <TIM_Base_SetConfig+0xaa>
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	4a2e      	ldr	r2, [pc, #184]	; (800d3e8 <TIM_Base_SetConfig+0x130>)
 800d32e:	4293      	cmp	r3, r2
 800d330:	d017      	beq.n	800d362 <TIM_Base_SetConfig+0xaa>
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	4a2d      	ldr	r2, [pc, #180]	; (800d3ec <TIM_Base_SetConfig+0x134>)
 800d336:	4293      	cmp	r3, r2
 800d338:	d013      	beq.n	800d362 <TIM_Base_SetConfig+0xaa>
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	4a2c      	ldr	r2, [pc, #176]	; (800d3f0 <TIM_Base_SetConfig+0x138>)
 800d33e:	4293      	cmp	r3, r2
 800d340:	d00f      	beq.n	800d362 <TIM_Base_SetConfig+0xaa>
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	4a2b      	ldr	r2, [pc, #172]	; (800d3f4 <TIM_Base_SetConfig+0x13c>)
 800d346:	4293      	cmp	r3, r2
 800d348:	d00b      	beq.n	800d362 <TIM_Base_SetConfig+0xaa>
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	4a2a      	ldr	r2, [pc, #168]	; (800d3f8 <TIM_Base_SetConfig+0x140>)
 800d34e:	4293      	cmp	r3, r2
 800d350:	d007      	beq.n	800d362 <TIM_Base_SetConfig+0xaa>
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	4a29      	ldr	r2, [pc, #164]	; (800d3fc <TIM_Base_SetConfig+0x144>)
 800d356:	4293      	cmp	r3, r2
 800d358:	d003      	beq.n	800d362 <TIM_Base_SetConfig+0xaa>
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	4a28      	ldr	r2, [pc, #160]	; (800d400 <TIM_Base_SetConfig+0x148>)
 800d35e:	4293      	cmp	r3, r2
 800d360:	d108      	bne.n	800d374 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d368:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	68db      	ldr	r3, [r3, #12]
 800d36e:	68fa      	ldr	r2, [r7, #12]
 800d370:	4313      	orrs	r3, r2
 800d372:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	695b      	ldr	r3, [r3, #20]
 800d37e:	4313      	orrs	r3, r2
 800d380:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	68fa      	ldr	r2, [r7, #12]
 800d386:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	689a      	ldr	r2, [r3, #8]
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d390:	683b      	ldr	r3, [r7, #0]
 800d392:	681a      	ldr	r2, [r3, #0]
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	4a10      	ldr	r2, [pc, #64]	; (800d3dc <TIM_Base_SetConfig+0x124>)
 800d39c:	4293      	cmp	r3, r2
 800d39e:	d00f      	beq.n	800d3c0 <TIM_Base_SetConfig+0x108>
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	4a12      	ldr	r2, [pc, #72]	; (800d3ec <TIM_Base_SetConfig+0x134>)
 800d3a4:	4293      	cmp	r3, r2
 800d3a6:	d00b      	beq.n	800d3c0 <TIM_Base_SetConfig+0x108>
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	4a11      	ldr	r2, [pc, #68]	; (800d3f0 <TIM_Base_SetConfig+0x138>)
 800d3ac:	4293      	cmp	r3, r2
 800d3ae:	d007      	beq.n	800d3c0 <TIM_Base_SetConfig+0x108>
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	4a10      	ldr	r2, [pc, #64]	; (800d3f4 <TIM_Base_SetConfig+0x13c>)
 800d3b4:	4293      	cmp	r3, r2
 800d3b6:	d003      	beq.n	800d3c0 <TIM_Base_SetConfig+0x108>
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	4a0f      	ldr	r2, [pc, #60]	; (800d3f8 <TIM_Base_SetConfig+0x140>)
 800d3bc:	4293      	cmp	r3, r2
 800d3be:	d103      	bne.n	800d3c8 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	691a      	ldr	r2, [r3, #16]
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2201      	movs	r2, #1
 800d3cc:	615a      	str	r2, [r3, #20]
}
 800d3ce:	bf00      	nop
 800d3d0:	3714      	adds	r7, #20
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d8:	4770      	bx	lr
 800d3da:	bf00      	nop
 800d3dc:	40010000 	.word	0x40010000
 800d3e0:	40000400 	.word	0x40000400
 800d3e4:	40000800 	.word	0x40000800
 800d3e8:	40000c00 	.word	0x40000c00
 800d3ec:	40010400 	.word	0x40010400
 800d3f0:	40014000 	.word	0x40014000
 800d3f4:	40014400 	.word	0x40014400
 800d3f8:	40014800 	.word	0x40014800
 800d3fc:	4000e000 	.word	0x4000e000
 800d400:	4000e400 	.word	0x4000e400

0800d404 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d404:	b480      	push	{r7}
 800d406:	b087      	sub	sp, #28
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
 800d40c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6a1b      	ldr	r3, [r3, #32]
 800d412:	f023 0201 	bic.w	r2, r3, #1
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6a1b      	ldr	r3, [r3, #32]
 800d41e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	685b      	ldr	r3, [r3, #4]
 800d424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	699b      	ldr	r3, [r3, #24]
 800d42a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d42c:	68fa      	ldr	r2, [r7, #12]
 800d42e:	4b37      	ldr	r3, [pc, #220]	; (800d50c <TIM_OC1_SetConfig+0x108>)
 800d430:	4013      	ands	r3, r2
 800d432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	f023 0303 	bic.w	r3, r3, #3
 800d43a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	68fa      	ldr	r2, [r7, #12]
 800d442:	4313      	orrs	r3, r2
 800d444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d446:	697b      	ldr	r3, [r7, #20]
 800d448:	f023 0302 	bic.w	r3, r3, #2
 800d44c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	689b      	ldr	r3, [r3, #8]
 800d452:	697a      	ldr	r2, [r7, #20]
 800d454:	4313      	orrs	r3, r2
 800d456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	4a2d      	ldr	r2, [pc, #180]	; (800d510 <TIM_OC1_SetConfig+0x10c>)
 800d45c:	4293      	cmp	r3, r2
 800d45e:	d00f      	beq.n	800d480 <TIM_OC1_SetConfig+0x7c>
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	4a2c      	ldr	r2, [pc, #176]	; (800d514 <TIM_OC1_SetConfig+0x110>)
 800d464:	4293      	cmp	r3, r2
 800d466:	d00b      	beq.n	800d480 <TIM_OC1_SetConfig+0x7c>
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	4a2b      	ldr	r2, [pc, #172]	; (800d518 <TIM_OC1_SetConfig+0x114>)
 800d46c:	4293      	cmp	r3, r2
 800d46e:	d007      	beq.n	800d480 <TIM_OC1_SetConfig+0x7c>
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	4a2a      	ldr	r2, [pc, #168]	; (800d51c <TIM_OC1_SetConfig+0x118>)
 800d474:	4293      	cmp	r3, r2
 800d476:	d003      	beq.n	800d480 <TIM_OC1_SetConfig+0x7c>
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	4a29      	ldr	r2, [pc, #164]	; (800d520 <TIM_OC1_SetConfig+0x11c>)
 800d47c:	4293      	cmp	r3, r2
 800d47e:	d10c      	bne.n	800d49a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d480:	697b      	ldr	r3, [r7, #20]
 800d482:	f023 0308 	bic.w	r3, r3, #8
 800d486:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	68db      	ldr	r3, [r3, #12]
 800d48c:	697a      	ldr	r2, [r7, #20]
 800d48e:	4313      	orrs	r3, r2
 800d490:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	f023 0304 	bic.w	r3, r3, #4
 800d498:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	4a1c      	ldr	r2, [pc, #112]	; (800d510 <TIM_OC1_SetConfig+0x10c>)
 800d49e:	4293      	cmp	r3, r2
 800d4a0:	d00f      	beq.n	800d4c2 <TIM_OC1_SetConfig+0xbe>
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	4a1b      	ldr	r2, [pc, #108]	; (800d514 <TIM_OC1_SetConfig+0x110>)
 800d4a6:	4293      	cmp	r3, r2
 800d4a8:	d00b      	beq.n	800d4c2 <TIM_OC1_SetConfig+0xbe>
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	4a1a      	ldr	r2, [pc, #104]	; (800d518 <TIM_OC1_SetConfig+0x114>)
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	d007      	beq.n	800d4c2 <TIM_OC1_SetConfig+0xbe>
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	4a19      	ldr	r2, [pc, #100]	; (800d51c <TIM_OC1_SetConfig+0x118>)
 800d4b6:	4293      	cmp	r3, r2
 800d4b8:	d003      	beq.n	800d4c2 <TIM_OC1_SetConfig+0xbe>
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	4a18      	ldr	r2, [pc, #96]	; (800d520 <TIM_OC1_SetConfig+0x11c>)
 800d4be:	4293      	cmp	r3, r2
 800d4c0:	d111      	bne.n	800d4e6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d4c2:	693b      	ldr	r3, [r7, #16]
 800d4c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d4c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d4ca:	693b      	ldr	r3, [r7, #16]
 800d4cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d4d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	695b      	ldr	r3, [r3, #20]
 800d4d6:	693a      	ldr	r2, [r7, #16]
 800d4d8:	4313      	orrs	r3, r2
 800d4da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	699b      	ldr	r3, [r3, #24]
 800d4e0:	693a      	ldr	r2, [r7, #16]
 800d4e2:	4313      	orrs	r3, r2
 800d4e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	693a      	ldr	r2, [r7, #16]
 800d4ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	68fa      	ldr	r2, [r7, #12]
 800d4f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	685a      	ldr	r2, [r3, #4]
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	697a      	ldr	r2, [r7, #20]
 800d4fe:	621a      	str	r2, [r3, #32]
}
 800d500:	bf00      	nop
 800d502:	371c      	adds	r7, #28
 800d504:	46bd      	mov	sp, r7
 800d506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50a:	4770      	bx	lr
 800d50c:	fffeff8f 	.word	0xfffeff8f
 800d510:	40010000 	.word	0x40010000
 800d514:	40010400 	.word	0x40010400
 800d518:	40014000 	.word	0x40014000
 800d51c:	40014400 	.word	0x40014400
 800d520:	40014800 	.word	0x40014800

0800d524 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d524:	b480      	push	{r7}
 800d526:	b087      	sub	sp, #28
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
 800d52c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6a1b      	ldr	r3, [r3, #32]
 800d532:	f023 0210 	bic.w	r2, r3, #16
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6a1b      	ldr	r3, [r3, #32]
 800d53e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	685b      	ldr	r3, [r3, #4]
 800d544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	699b      	ldr	r3, [r3, #24]
 800d54a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d54c:	68fa      	ldr	r2, [r7, #12]
 800d54e:	4b34      	ldr	r3, [pc, #208]	; (800d620 <TIM_OC2_SetConfig+0xfc>)
 800d550:	4013      	ands	r3, r2
 800d552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d55a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	021b      	lsls	r3, r3, #8
 800d562:	68fa      	ldr	r2, [r7, #12]
 800d564:	4313      	orrs	r3, r2
 800d566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d568:	697b      	ldr	r3, [r7, #20]
 800d56a:	f023 0320 	bic.w	r3, r3, #32
 800d56e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	689b      	ldr	r3, [r3, #8]
 800d574:	011b      	lsls	r3, r3, #4
 800d576:	697a      	ldr	r2, [r7, #20]
 800d578:	4313      	orrs	r3, r2
 800d57a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	4a29      	ldr	r2, [pc, #164]	; (800d624 <TIM_OC2_SetConfig+0x100>)
 800d580:	4293      	cmp	r3, r2
 800d582:	d003      	beq.n	800d58c <TIM_OC2_SetConfig+0x68>
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	4a28      	ldr	r2, [pc, #160]	; (800d628 <TIM_OC2_SetConfig+0x104>)
 800d588:	4293      	cmp	r3, r2
 800d58a:	d10d      	bne.n	800d5a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d592:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d594:	683b      	ldr	r3, [r7, #0]
 800d596:	68db      	ldr	r3, [r3, #12]
 800d598:	011b      	lsls	r3, r3, #4
 800d59a:	697a      	ldr	r2, [r7, #20]
 800d59c:	4313      	orrs	r3, r2
 800d59e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d5a0:	697b      	ldr	r3, [r7, #20]
 800d5a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d5a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	4a1e      	ldr	r2, [pc, #120]	; (800d624 <TIM_OC2_SetConfig+0x100>)
 800d5ac:	4293      	cmp	r3, r2
 800d5ae:	d00f      	beq.n	800d5d0 <TIM_OC2_SetConfig+0xac>
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	4a1d      	ldr	r2, [pc, #116]	; (800d628 <TIM_OC2_SetConfig+0x104>)
 800d5b4:	4293      	cmp	r3, r2
 800d5b6:	d00b      	beq.n	800d5d0 <TIM_OC2_SetConfig+0xac>
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	4a1c      	ldr	r2, [pc, #112]	; (800d62c <TIM_OC2_SetConfig+0x108>)
 800d5bc:	4293      	cmp	r3, r2
 800d5be:	d007      	beq.n	800d5d0 <TIM_OC2_SetConfig+0xac>
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	4a1b      	ldr	r2, [pc, #108]	; (800d630 <TIM_OC2_SetConfig+0x10c>)
 800d5c4:	4293      	cmp	r3, r2
 800d5c6:	d003      	beq.n	800d5d0 <TIM_OC2_SetConfig+0xac>
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	4a1a      	ldr	r2, [pc, #104]	; (800d634 <TIM_OC2_SetConfig+0x110>)
 800d5cc:	4293      	cmp	r3, r2
 800d5ce:	d113      	bne.n	800d5f8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d5d0:	693b      	ldr	r3, [r7, #16]
 800d5d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d5d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d5d8:	693b      	ldr	r3, [r7, #16]
 800d5da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d5de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	695b      	ldr	r3, [r3, #20]
 800d5e4:	009b      	lsls	r3, r3, #2
 800d5e6:	693a      	ldr	r2, [r7, #16]
 800d5e8:	4313      	orrs	r3, r2
 800d5ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	699b      	ldr	r3, [r3, #24]
 800d5f0:	009b      	lsls	r3, r3, #2
 800d5f2:	693a      	ldr	r2, [r7, #16]
 800d5f4:	4313      	orrs	r3, r2
 800d5f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	693a      	ldr	r2, [r7, #16]
 800d5fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	68fa      	ldr	r2, [r7, #12]
 800d602:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	685a      	ldr	r2, [r3, #4]
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	697a      	ldr	r2, [r7, #20]
 800d610:	621a      	str	r2, [r3, #32]
}
 800d612:	bf00      	nop
 800d614:	371c      	adds	r7, #28
 800d616:	46bd      	mov	sp, r7
 800d618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61c:	4770      	bx	lr
 800d61e:	bf00      	nop
 800d620:	feff8fff 	.word	0xfeff8fff
 800d624:	40010000 	.word	0x40010000
 800d628:	40010400 	.word	0x40010400
 800d62c:	40014000 	.word	0x40014000
 800d630:	40014400 	.word	0x40014400
 800d634:	40014800 	.word	0x40014800

0800d638 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d638:	b480      	push	{r7}
 800d63a:	b087      	sub	sp, #28
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
 800d640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	6a1b      	ldr	r3, [r3, #32]
 800d646:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	6a1b      	ldr	r3, [r3, #32]
 800d652:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	685b      	ldr	r3, [r3, #4]
 800d658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	69db      	ldr	r3, [r3, #28]
 800d65e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d660:	68fa      	ldr	r2, [r7, #12]
 800d662:	4b33      	ldr	r3, [pc, #204]	; (800d730 <TIM_OC3_SetConfig+0xf8>)
 800d664:	4013      	ands	r3, r2
 800d666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	f023 0303 	bic.w	r3, r3, #3
 800d66e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	68fa      	ldr	r2, [r7, #12]
 800d676:	4313      	orrs	r3, r2
 800d678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d67a:	697b      	ldr	r3, [r7, #20]
 800d67c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d680:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	689b      	ldr	r3, [r3, #8]
 800d686:	021b      	lsls	r3, r3, #8
 800d688:	697a      	ldr	r2, [r7, #20]
 800d68a:	4313      	orrs	r3, r2
 800d68c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	4a28      	ldr	r2, [pc, #160]	; (800d734 <TIM_OC3_SetConfig+0xfc>)
 800d692:	4293      	cmp	r3, r2
 800d694:	d003      	beq.n	800d69e <TIM_OC3_SetConfig+0x66>
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	4a27      	ldr	r2, [pc, #156]	; (800d738 <TIM_OC3_SetConfig+0x100>)
 800d69a:	4293      	cmp	r3, r2
 800d69c:	d10d      	bne.n	800d6ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d69e:	697b      	ldr	r3, [r7, #20]
 800d6a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d6a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	68db      	ldr	r3, [r3, #12]
 800d6aa:	021b      	lsls	r3, r3, #8
 800d6ac:	697a      	ldr	r2, [r7, #20]
 800d6ae:	4313      	orrs	r3, r2
 800d6b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d6b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	4a1d      	ldr	r2, [pc, #116]	; (800d734 <TIM_OC3_SetConfig+0xfc>)
 800d6be:	4293      	cmp	r3, r2
 800d6c0:	d00f      	beq.n	800d6e2 <TIM_OC3_SetConfig+0xaa>
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	4a1c      	ldr	r2, [pc, #112]	; (800d738 <TIM_OC3_SetConfig+0x100>)
 800d6c6:	4293      	cmp	r3, r2
 800d6c8:	d00b      	beq.n	800d6e2 <TIM_OC3_SetConfig+0xaa>
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	4a1b      	ldr	r2, [pc, #108]	; (800d73c <TIM_OC3_SetConfig+0x104>)
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	d007      	beq.n	800d6e2 <TIM_OC3_SetConfig+0xaa>
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	4a1a      	ldr	r2, [pc, #104]	; (800d740 <TIM_OC3_SetConfig+0x108>)
 800d6d6:	4293      	cmp	r3, r2
 800d6d8:	d003      	beq.n	800d6e2 <TIM_OC3_SetConfig+0xaa>
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	4a19      	ldr	r2, [pc, #100]	; (800d744 <TIM_OC3_SetConfig+0x10c>)
 800d6de:	4293      	cmp	r3, r2
 800d6e0:	d113      	bne.n	800d70a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d6e2:	693b      	ldr	r3, [r7, #16]
 800d6e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d6e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d6ea:	693b      	ldr	r3, [r7, #16]
 800d6ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d6f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	695b      	ldr	r3, [r3, #20]
 800d6f6:	011b      	lsls	r3, r3, #4
 800d6f8:	693a      	ldr	r2, [r7, #16]
 800d6fa:	4313      	orrs	r3, r2
 800d6fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d6fe:	683b      	ldr	r3, [r7, #0]
 800d700:	699b      	ldr	r3, [r3, #24]
 800d702:	011b      	lsls	r3, r3, #4
 800d704:	693a      	ldr	r2, [r7, #16]
 800d706:	4313      	orrs	r3, r2
 800d708:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	693a      	ldr	r2, [r7, #16]
 800d70e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	68fa      	ldr	r2, [r7, #12]
 800d714:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d716:	683b      	ldr	r3, [r7, #0]
 800d718:	685a      	ldr	r2, [r3, #4]
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	697a      	ldr	r2, [r7, #20]
 800d722:	621a      	str	r2, [r3, #32]
}
 800d724:	bf00      	nop
 800d726:	371c      	adds	r7, #28
 800d728:	46bd      	mov	sp, r7
 800d72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72e:	4770      	bx	lr
 800d730:	fffeff8f 	.word	0xfffeff8f
 800d734:	40010000 	.word	0x40010000
 800d738:	40010400 	.word	0x40010400
 800d73c:	40014000 	.word	0x40014000
 800d740:	40014400 	.word	0x40014400
 800d744:	40014800 	.word	0x40014800

0800d748 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d748:	b480      	push	{r7}
 800d74a:	b087      	sub	sp, #28
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
 800d750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6a1b      	ldr	r3, [r3, #32]
 800d756:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6a1b      	ldr	r3, [r3, #32]
 800d762:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	685b      	ldr	r3, [r3, #4]
 800d768:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	69db      	ldr	r3, [r3, #28]
 800d76e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d770:	68fa      	ldr	r2, [r7, #12]
 800d772:	4b24      	ldr	r3, [pc, #144]	; (800d804 <TIM_OC4_SetConfig+0xbc>)
 800d774:	4013      	ands	r3, r2
 800d776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d77e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	021b      	lsls	r3, r3, #8
 800d786:	68fa      	ldr	r2, [r7, #12]
 800d788:	4313      	orrs	r3, r2
 800d78a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d78c:	693b      	ldr	r3, [r7, #16]
 800d78e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d792:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	689b      	ldr	r3, [r3, #8]
 800d798:	031b      	lsls	r3, r3, #12
 800d79a:	693a      	ldr	r2, [r7, #16]
 800d79c:	4313      	orrs	r3, r2
 800d79e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	4a19      	ldr	r2, [pc, #100]	; (800d808 <TIM_OC4_SetConfig+0xc0>)
 800d7a4:	4293      	cmp	r3, r2
 800d7a6:	d00f      	beq.n	800d7c8 <TIM_OC4_SetConfig+0x80>
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	4a18      	ldr	r2, [pc, #96]	; (800d80c <TIM_OC4_SetConfig+0xc4>)
 800d7ac:	4293      	cmp	r3, r2
 800d7ae:	d00b      	beq.n	800d7c8 <TIM_OC4_SetConfig+0x80>
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	4a17      	ldr	r2, [pc, #92]	; (800d810 <TIM_OC4_SetConfig+0xc8>)
 800d7b4:	4293      	cmp	r3, r2
 800d7b6:	d007      	beq.n	800d7c8 <TIM_OC4_SetConfig+0x80>
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	4a16      	ldr	r2, [pc, #88]	; (800d814 <TIM_OC4_SetConfig+0xcc>)
 800d7bc:	4293      	cmp	r3, r2
 800d7be:	d003      	beq.n	800d7c8 <TIM_OC4_SetConfig+0x80>
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	4a15      	ldr	r2, [pc, #84]	; (800d818 <TIM_OC4_SetConfig+0xd0>)
 800d7c4:	4293      	cmp	r3, r2
 800d7c6:	d109      	bne.n	800d7dc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d7c8:	697b      	ldr	r3, [r7, #20]
 800d7ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d7ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d7d0:	683b      	ldr	r3, [r7, #0]
 800d7d2:	695b      	ldr	r3, [r3, #20]
 800d7d4:	019b      	lsls	r3, r3, #6
 800d7d6:	697a      	ldr	r2, [r7, #20]
 800d7d8:	4313      	orrs	r3, r2
 800d7da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	697a      	ldr	r2, [r7, #20]
 800d7e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	68fa      	ldr	r2, [r7, #12]
 800d7e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	685a      	ldr	r2, [r3, #4]
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	693a      	ldr	r2, [r7, #16]
 800d7f4:	621a      	str	r2, [r3, #32]
}
 800d7f6:	bf00      	nop
 800d7f8:	371c      	adds	r7, #28
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d800:	4770      	bx	lr
 800d802:	bf00      	nop
 800d804:	feff8fff 	.word	0xfeff8fff
 800d808:	40010000 	.word	0x40010000
 800d80c:	40010400 	.word	0x40010400
 800d810:	40014000 	.word	0x40014000
 800d814:	40014400 	.word	0x40014400
 800d818:	40014800 	.word	0x40014800

0800d81c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d81c:	b480      	push	{r7}
 800d81e:	b087      	sub	sp, #28
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
 800d824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6a1b      	ldr	r3, [r3, #32]
 800d82a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	6a1b      	ldr	r3, [r3, #32]
 800d836:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	685b      	ldr	r3, [r3, #4]
 800d83c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d844:	68fa      	ldr	r2, [r7, #12]
 800d846:	4b21      	ldr	r3, [pc, #132]	; (800d8cc <TIM_OC5_SetConfig+0xb0>)
 800d848:	4013      	ands	r3, r2
 800d84a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	68fa      	ldr	r2, [r7, #12]
 800d852:	4313      	orrs	r3, r2
 800d854:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d856:	693b      	ldr	r3, [r7, #16]
 800d858:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d85c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	689b      	ldr	r3, [r3, #8]
 800d862:	041b      	lsls	r3, r3, #16
 800d864:	693a      	ldr	r2, [r7, #16]
 800d866:	4313      	orrs	r3, r2
 800d868:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	4a18      	ldr	r2, [pc, #96]	; (800d8d0 <TIM_OC5_SetConfig+0xb4>)
 800d86e:	4293      	cmp	r3, r2
 800d870:	d00f      	beq.n	800d892 <TIM_OC5_SetConfig+0x76>
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	4a17      	ldr	r2, [pc, #92]	; (800d8d4 <TIM_OC5_SetConfig+0xb8>)
 800d876:	4293      	cmp	r3, r2
 800d878:	d00b      	beq.n	800d892 <TIM_OC5_SetConfig+0x76>
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	4a16      	ldr	r2, [pc, #88]	; (800d8d8 <TIM_OC5_SetConfig+0xbc>)
 800d87e:	4293      	cmp	r3, r2
 800d880:	d007      	beq.n	800d892 <TIM_OC5_SetConfig+0x76>
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	4a15      	ldr	r2, [pc, #84]	; (800d8dc <TIM_OC5_SetConfig+0xc0>)
 800d886:	4293      	cmp	r3, r2
 800d888:	d003      	beq.n	800d892 <TIM_OC5_SetConfig+0x76>
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	4a14      	ldr	r2, [pc, #80]	; (800d8e0 <TIM_OC5_SetConfig+0xc4>)
 800d88e:	4293      	cmp	r3, r2
 800d890:	d109      	bne.n	800d8a6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d892:	697b      	ldr	r3, [r7, #20]
 800d894:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d898:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	695b      	ldr	r3, [r3, #20]
 800d89e:	021b      	lsls	r3, r3, #8
 800d8a0:	697a      	ldr	r2, [r7, #20]
 800d8a2:	4313      	orrs	r3, r2
 800d8a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	697a      	ldr	r2, [r7, #20]
 800d8aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	68fa      	ldr	r2, [r7, #12]
 800d8b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	685a      	ldr	r2, [r3, #4]
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	693a      	ldr	r2, [r7, #16]
 800d8be:	621a      	str	r2, [r3, #32]
}
 800d8c0:	bf00      	nop
 800d8c2:	371c      	adds	r7, #28
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ca:	4770      	bx	lr
 800d8cc:	fffeff8f 	.word	0xfffeff8f
 800d8d0:	40010000 	.word	0x40010000
 800d8d4:	40010400 	.word	0x40010400
 800d8d8:	40014000 	.word	0x40014000
 800d8dc:	40014400 	.word	0x40014400
 800d8e0:	40014800 	.word	0x40014800

0800d8e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b087      	sub	sp, #28
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
 800d8ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	6a1b      	ldr	r3, [r3, #32]
 800d8f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	6a1b      	ldr	r3, [r3, #32]
 800d8fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	685b      	ldr	r3, [r3, #4]
 800d904:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d90a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d90c:	68fa      	ldr	r2, [r7, #12]
 800d90e:	4b22      	ldr	r3, [pc, #136]	; (800d998 <TIM_OC6_SetConfig+0xb4>)
 800d910:	4013      	ands	r3, r2
 800d912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	021b      	lsls	r3, r3, #8
 800d91a:	68fa      	ldr	r2, [r7, #12]
 800d91c:	4313      	orrs	r3, r2
 800d91e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d926:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	689b      	ldr	r3, [r3, #8]
 800d92c:	051b      	lsls	r3, r3, #20
 800d92e:	693a      	ldr	r2, [r7, #16]
 800d930:	4313      	orrs	r3, r2
 800d932:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	4a19      	ldr	r2, [pc, #100]	; (800d99c <TIM_OC6_SetConfig+0xb8>)
 800d938:	4293      	cmp	r3, r2
 800d93a:	d00f      	beq.n	800d95c <TIM_OC6_SetConfig+0x78>
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	4a18      	ldr	r2, [pc, #96]	; (800d9a0 <TIM_OC6_SetConfig+0xbc>)
 800d940:	4293      	cmp	r3, r2
 800d942:	d00b      	beq.n	800d95c <TIM_OC6_SetConfig+0x78>
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	4a17      	ldr	r2, [pc, #92]	; (800d9a4 <TIM_OC6_SetConfig+0xc0>)
 800d948:	4293      	cmp	r3, r2
 800d94a:	d007      	beq.n	800d95c <TIM_OC6_SetConfig+0x78>
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	4a16      	ldr	r2, [pc, #88]	; (800d9a8 <TIM_OC6_SetConfig+0xc4>)
 800d950:	4293      	cmp	r3, r2
 800d952:	d003      	beq.n	800d95c <TIM_OC6_SetConfig+0x78>
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	4a15      	ldr	r2, [pc, #84]	; (800d9ac <TIM_OC6_SetConfig+0xc8>)
 800d958:	4293      	cmp	r3, r2
 800d95a:	d109      	bne.n	800d970 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d962:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	695b      	ldr	r3, [r3, #20]
 800d968:	029b      	lsls	r3, r3, #10
 800d96a:	697a      	ldr	r2, [r7, #20]
 800d96c:	4313      	orrs	r3, r2
 800d96e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	697a      	ldr	r2, [r7, #20]
 800d974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	68fa      	ldr	r2, [r7, #12]
 800d97a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	685a      	ldr	r2, [r3, #4]
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	693a      	ldr	r2, [r7, #16]
 800d988:	621a      	str	r2, [r3, #32]
}
 800d98a:	bf00      	nop
 800d98c:	371c      	adds	r7, #28
 800d98e:	46bd      	mov	sp, r7
 800d990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d994:	4770      	bx	lr
 800d996:	bf00      	nop
 800d998:	feff8fff 	.word	0xfeff8fff
 800d99c:	40010000 	.word	0x40010000
 800d9a0:	40010400 	.word	0x40010400
 800d9a4:	40014000 	.word	0x40014000
 800d9a8:	40014400 	.word	0x40014400
 800d9ac:	40014800 	.word	0x40014800

0800d9b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d9b0:	b480      	push	{r7}
 800d9b2:	b087      	sub	sp, #28
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	60f8      	str	r0, [r7, #12]
 800d9b8:	60b9      	str	r1, [r7, #8]
 800d9ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	6a1b      	ldr	r3, [r3, #32]
 800d9c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	6a1b      	ldr	r3, [r3, #32]
 800d9c6:	f023 0201 	bic.w	r2, r3, #1
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	699b      	ldr	r3, [r3, #24]
 800d9d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d9d4:	693b      	ldr	r3, [r7, #16]
 800d9d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d9da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	011b      	lsls	r3, r3, #4
 800d9e0:	693a      	ldr	r2, [r7, #16]
 800d9e2:	4313      	orrs	r3, r2
 800d9e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d9e6:	697b      	ldr	r3, [r7, #20]
 800d9e8:	f023 030a 	bic.w	r3, r3, #10
 800d9ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d9ee:	697a      	ldr	r2, [r7, #20]
 800d9f0:	68bb      	ldr	r3, [r7, #8]
 800d9f2:	4313      	orrs	r3, r2
 800d9f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	693a      	ldr	r2, [r7, #16]
 800d9fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	697a      	ldr	r2, [r7, #20]
 800da00:	621a      	str	r2, [r3, #32]
}
 800da02:	bf00      	nop
 800da04:	371c      	adds	r7, #28
 800da06:	46bd      	mov	sp, r7
 800da08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0c:	4770      	bx	lr

0800da0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800da0e:	b480      	push	{r7}
 800da10:	b087      	sub	sp, #28
 800da12:	af00      	add	r7, sp, #0
 800da14:	60f8      	str	r0, [r7, #12]
 800da16:	60b9      	str	r1, [r7, #8]
 800da18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	6a1b      	ldr	r3, [r3, #32]
 800da1e:	f023 0210 	bic.w	r2, r3, #16
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	699b      	ldr	r3, [r3, #24]
 800da2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	6a1b      	ldr	r3, [r3, #32]
 800da30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800da38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	031b      	lsls	r3, r3, #12
 800da3e:	697a      	ldr	r2, [r7, #20]
 800da40:	4313      	orrs	r3, r2
 800da42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800da44:	693b      	ldr	r3, [r7, #16]
 800da46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800da4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800da4c:	68bb      	ldr	r3, [r7, #8]
 800da4e:	011b      	lsls	r3, r3, #4
 800da50:	693a      	ldr	r2, [r7, #16]
 800da52:	4313      	orrs	r3, r2
 800da54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	697a      	ldr	r2, [r7, #20]
 800da5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	693a      	ldr	r2, [r7, #16]
 800da60:	621a      	str	r2, [r3, #32]
}
 800da62:	bf00      	nop
 800da64:	371c      	adds	r7, #28
 800da66:	46bd      	mov	sp, r7
 800da68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6c:	4770      	bx	lr
	...

0800da70 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800da70:	b480      	push	{r7}
 800da72:	b085      	sub	sp, #20
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
 800da78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	689b      	ldr	r3, [r3, #8]
 800da7e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800da80:	68fa      	ldr	r2, [r7, #12]
 800da82:	4b09      	ldr	r3, [pc, #36]	; (800daa8 <TIM_ITRx_SetConfig+0x38>)
 800da84:	4013      	ands	r3, r2
 800da86:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800da88:	683a      	ldr	r2, [r7, #0]
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	4313      	orrs	r3, r2
 800da8e:	f043 0307 	orr.w	r3, r3, #7
 800da92:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	68fa      	ldr	r2, [r7, #12]
 800da98:	609a      	str	r2, [r3, #8]
}
 800da9a:	bf00      	nop
 800da9c:	3714      	adds	r7, #20
 800da9e:	46bd      	mov	sp, r7
 800daa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa4:	4770      	bx	lr
 800daa6:	bf00      	nop
 800daa8:	ffcfff8f 	.word	0xffcfff8f

0800daac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800daac:	b480      	push	{r7}
 800daae:	b087      	sub	sp, #28
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	60f8      	str	r0, [r7, #12]
 800dab4:	60b9      	str	r1, [r7, #8]
 800dab6:	607a      	str	r2, [r7, #4]
 800dab8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	689b      	ldr	r3, [r3, #8]
 800dabe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dac0:	697b      	ldr	r3, [r7, #20]
 800dac2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dac6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	021a      	lsls	r2, r3, #8
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	431a      	orrs	r2, r3
 800dad0:	68bb      	ldr	r3, [r7, #8]
 800dad2:	4313      	orrs	r3, r2
 800dad4:	697a      	ldr	r2, [r7, #20]
 800dad6:	4313      	orrs	r3, r2
 800dad8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	697a      	ldr	r2, [r7, #20]
 800dade:	609a      	str	r2, [r3, #8]
}
 800dae0:	bf00      	nop
 800dae2:	371c      	adds	r7, #28
 800dae4:	46bd      	mov	sp, r7
 800dae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daea:	4770      	bx	lr

0800daec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800daec:	b480      	push	{r7}
 800daee:	b087      	sub	sp, #28
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	60f8      	str	r0, [r7, #12]
 800daf4:	60b9      	str	r1, [r7, #8]
 800daf6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800daf8:	68bb      	ldr	r3, [r7, #8]
 800dafa:	f003 031f 	and.w	r3, r3, #31
 800dafe:	2201      	movs	r2, #1
 800db00:	fa02 f303 	lsl.w	r3, r2, r3
 800db04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	6a1a      	ldr	r2, [r3, #32]
 800db0a:	697b      	ldr	r3, [r7, #20]
 800db0c:	43db      	mvns	r3, r3
 800db0e:	401a      	ands	r2, r3
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	6a1a      	ldr	r2, [r3, #32]
 800db18:	68bb      	ldr	r3, [r7, #8]
 800db1a:	f003 031f 	and.w	r3, r3, #31
 800db1e:	6879      	ldr	r1, [r7, #4]
 800db20:	fa01 f303 	lsl.w	r3, r1, r3
 800db24:	431a      	orrs	r2, r3
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	621a      	str	r2, [r3, #32]
}
 800db2a:	bf00      	nop
 800db2c:	371c      	adds	r7, #28
 800db2e:	46bd      	mov	sp, r7
 800db30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db34:	4770      	bx	lr
	...

0800db38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800db38:	b480      	push	{r7}
 800db3a:	b085      	sub	sp, #20
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
 800db40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800db48:	2b01      	cmp	r3, #1
 800db4a:	d101      	bne.n	800db50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800db4c:	2302      	movs	r3, #2
 800db4e:	e077      	b.n	800dc40 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2201      	movs	r2, #1
 800db54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2202      	movs	r2, #2
 800db5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	685b      	ldr	r3, [r3, #4]
 800db66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	689b      	ldr	r3, [r3, #8]
 800db6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	4a35      	ldr	r2, [pc, #212]	; (800dc4c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800db76:	4293      	cmp	r3, r2
 800db78:	d004      	beq.n	800db84 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	4a34      	ldr	r2, [pc, #208]	; (800dc50 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800db80:	4293      	cmp	r3, r2
 800db82:	d108      	bne.n	800db96 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800db8a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	685b      	ldr	r3, [r3, #4]
 800db90:	68fa      	ldr	r2, [r7, #12]
 800db92:	4313      	orrs	r3, r2
 800db94:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db9c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	68fa      	ldr	r2, [r7, #12]
 800dba4:	4313      	orrs	r3, r2
 800dba6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	68fa      	ldr	r2, [r7, #12]
 800dbae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	4a25      	ldr	r2, [pc, #148]	; (800dc4c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800dbb6:	4293      	cmp	r3, r2
 800dbb8:	d02c      	beq.n	800dc14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dbc2:	d027      	beq.n	800dc14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	4a22      	ldr	r2, [pc, #136]	; (800dc54 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800dbca:	4293      	cmp	r3, r2
 800dbcc:	d022      	beq.n	800dc14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	4a21      	ldr	r2, [pc, #132]	; (800dc58 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800dbd4:	4293      	cmp	r3, r2
 800dbd6:	d01d      	beq.n	800dc14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	4a1f      	ldr	r2, [pc, #124]	; (800dc5c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800dbde:	4293      	cmp	r3, r2
 800dbe0:	d018      	beq.n	800dc14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	4a1a      	ldr	r2, [pc, #104]	; (800dc50 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dbe8:	4293      	cmp	r3, r2
 800dbea:	d013      	beq.n	800dc14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	4a1b      	ldr	r2, [pc, #108]	; (800dc60 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800dbf2:	4293      	cmp	r3, r2
 800dbf4:	d00e      	beq.n	800dc14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	4a1a      	ldr	r2, [pc, #104]	; (800dc64 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800dbfc:	4293      	cmp	r3, r2
 800dbfe:	d009      	beq.n	800dc14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	4a18      	ldr	r2, [pc, #96]	; (800dc68 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800dc06:	4293      	cmp	r3, r2
 800dc08:	d004      	beq.n	800dc14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	4a17      	ldr	r2, [pc, #92]	; (800dc6c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800dc10:	4293      	cmp	r3, r2
 800dc12:	d10c      	bne.n	800dc2e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dc1a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	689b      	ldr	r3, [r3, #8]
 800dc20:	68ba      	ldr	r2, [r7, #8]
 800dc22:	4313      	orrs	r3, r2
 800dc24:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	68ba      	ldr	r2, [r7, #8]
 800dc2c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	2201      	movs	r2, #1
 800dc32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	2200      	movs	r2, #0
 800dc3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dc3e:	2300      	movs	r3, #0
}
 800dc40:	4618      	mov	r0, r3
 800dc42:	3714      	adds	r7, #20
 800dc44:	46bd      	mov	sp, r7
 800dc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4a:	4770      	bx	lr
 800dc4c:	40010000 	.word	0x40010000
 800dc50:	40010400 	.word	0x40010400
 800dc54:	40000400 	.word	0x40000400
 800dc58:	40000800 	.word	0x40000800
 800dc5c:	40000c00 	.word	0x40000c00
 800dc60:	40001800 	.word	0x40001800
 800dc64:	40014000 	.word	0x40014000
 800dc68:	4000e000 	.word	0x4000e000
 800dc6c:	4000e400 	.word	0x4000e400

0800dc70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800dc70:	b480      	push	{r7}
 800dc72:	b085      	sub	sp, #20
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
 800dc78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc84:	2b01      	cmp	r3, #1
 800dc86:	d101      	bne.n	800dc8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800dc88:	2302      	movs	r3, #2
 800dc8a:	e087      	b.n	800dd9c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	2201      	movs	r2, #1
 800dc90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	68db      	ldr	r3, [r3, #12]
 800dc9e:	4313      	orrs	r3, r2
 800dca0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dca8:	683b      	ldr	r3, [r7, #0]
 800dcaa:	689b      	ldr	r3, [r3, #8]
 800dcac:	4313      	orrs	r3, r2
 800dcae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	685b      	ldr	r3, [r3, #4]
 800dcba:	4313      	orrs	r3, r2
 800dcbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	4313      	orrs	r3, r2
 800dcca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	691b      	ldr	r3, [r3, #16]
 800dcd6:	4313      	orrs	r3, r2
 800dcd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	695b      	ldr	r3, [r3, #20]
 800dce4:	4313      	orrs	r3, r2
 800dce6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcf2:	4313      	orrs	r3, r2
 800dcf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	699b      	ldr	r3, [r3, #24]
 800dd00:	041b      	lsls	r3, r3, #16
 800dd02:	4313      	orrs	r3, r2
 800dd04:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	4a27      	ldr	r2, [pc, #156]	; (800dda8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800dd0c:	4293      	cmp	r3, r2
 800dd0e:	d004      	beq.n	800dd1a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	4a25      	ldr	r2, [pc, #148]	; (800ddac <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800dd16:	4293      	cmp	r3, r2
 800dd18:	d106      	bne.n	800dd28 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	69db      	ldr	r3, [r3, #28]
 800dd24:	4313      	orrs	r3, r2
 800dd26:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	4a1e      	ldr	r2, [pc, #120]	; (800dda8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800dd2e:	4293      	cmp	r3, r2
 800dd30:	d004      	beq.n	800dd3c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	4a1d      	ldr	r2, [pc, #116]	; (800ddac <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800dd38:	4293      	cmp	r3, r2
 800dd3a:	d126      	bne.n	800dd8a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800dd42:	683b      	ldr	r3, [r7, #0]
 800dd44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd46:	051b      	lsls	r3, r3, #20
 800dd48:	4313      	orrs	r3, r2
 800dd4a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	6a1b      	ldr	r3, [r3, #32]
 800dd56:	4313      	orrs	r3, r2
 800dd58:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800dd60:	683b      	ldr	r3, [r7, #0]
 800dd62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd64:	4313      	orrs	r3, r2
 800dd66:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	4a0e      	ldr	r2, [pc, #56]	; (800dda8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800dd6e:	4293      	cmp	r3, r2
 800dd70:	d004      	beq.n	800dd7c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	4a0d      	ldr	r2, [pc, #52]	; (800ddac <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800dd78:	4293      	cmp	r3, r2
 800dd7a:	d106      	bne.n	800dd8a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800dd82:	683b      	ldr	r3, [r7, #0]
 800dd84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd86:	4313      	orrs	r3, r2
 800dd88:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	68fa      	ldr	r2, [r7, #12]
 800dd90:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2200      	movs	r2, #0
 800dd96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dd9a:	2300      	movs	r3, #0
}
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	3714      	adds	r7, #20
 800dda0:	46bd      	mov	sp, r7
 800dda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda6:	4770      	bx	lr
 800dda8:	40010000 	.word	0x40010000
 800ddac:	40010400 	.word	0x40010400

0800ddb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ddb0:	b480      	push	{r7}
 800ddb2:	b083      	sub	sp, #12
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ddb8:	bf00      	nop
 800ddba:	370c      	adds	r7, #12
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc2:	4770      	bx	lr

0800ddc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ddc4:	b480      	push	{r7}
 800ddc6:	b083      	sub	sp, #12
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ddcc:	bf00      	nop
 800ddce:	370c      	adds	r7, #12
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd6:	4770      	bx	lr

0800ddd8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ddd8:	b480      	push	{r7}
 800ddda:	b083      	sub	sp, #12
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dde0:	bf00      	nop
 800dde2:	370c      	adds	r7, #12
 800dde4:	46bd      	mov	sp, r7
 800dde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddea:	4770      	bx	lr

0800ddec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b082      	sub	sp, #8
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d101      	bne.n	800ddfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ddfa:	2301      	movs	r3, #1
 800ddfc:	e042      	b.n	800de84 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de04:	2b00      	cmp	r3, #0
 800de06:	d106      	bne.n	800de16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2200      	movs	r2, #0
 800de0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	f7f7 fe3f 	bl	8005a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	2224      	movs	r2, #36	; 0x24
 800de1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	681a      	ldr	r2, [r3, #0]
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	f022 0201 	bic.w	r2, r2, #1
 800de2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800de2e:	6878      	ldr	r0, [r7, #4]
 800de30:	f000 fdaa 	bl	800e988 <UART_SetConfig>
 800de34:	4603      	mov	r3, r0
 800de36:	2b01      	cmp	r3, #1
 800de38:	d101      	bne.n	800de3e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800de3a:	2301      	movs	r3, #1
 800de3c:	e022      	b.n	800de84 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de42:	2b00      	cmp	r3, #0
 800de44:	d002      	beq.n	800de4c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f001 fc0a 	bl	800f660 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	685a      	ldr	r2, [r3, #4]
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800de5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	689a      	ldr	r2, [r3, #8]
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800de6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	681a      	ldr	r2, [r3, #0]
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	f042 0201 	orr.w	r2, r2, #1
 800de7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800de7c:	6878      	ldr	r0, [r7, #4]
 800de7e:	f001 fc91 	bl	800f7a4 <UART_CheckIdleState>
 800de82:	4603      	mov	r3, r0
}
 800de84:	4618      	mov	r0, r3
 800de86:	3708      	adds	r7, #8
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}

0800de8c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b082      	sub	sp, #8
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d101      	bne.n	800de9e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800de9a:	2301      	movs	r3, #1
 800de9c:	e031      	b.n	800df02 <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	2224      	movs	r2, #36	; 0x24
 800dea2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	681a      	ldr	r2, [r3, #0]
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	f022 0201 	bic.w	r2, r2, #1
 800deb4:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	2200      	movs	r2, #0
 800debc:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	2200      	movs	r2, #0
 800dec4:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	2200      	movs	r2, #0
 800decc:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800dece:	6878      	ldr	r0, [r7, #4]
 800ded0:	f7f7 ff38 	bl	8005d44 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2200      	movs	r2, #0
 800ded8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->gState = HAL_UART_STATE_RESET;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2200      	movs	r2, #0
 800dee0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2200      	movs	r2, #0
 800dee8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2200      	movs	r2, #0
 800def0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	2200      	movs	r2, #0
 800def6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	2200      	movs	r2, #0
 800defc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800df00:	2300      	movs	r3, #0
}
 800df02:	4618      	mov	r0, r3
 800df04:	3708      	adds	r7, #8
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}

0800df0a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800df0a:	b580      	push	{r7, lr}
 800df0c:	b08a      	sub	sp, #40	; 0x28
 800df0e:	af02      	add	r7, sp, #8
 800df10:	60f8      	str	r0, [r7, #12]
 800df12:	60b9      	str	r1, [r7, #8]
 800df14:	603b      	str	r3, [r7, #0]
 800df16:	4613      	mov	r3, r2
 800df18:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df20:	2b20      	cmp	r3, #32
 800df22:	d17b      	bne.n	800e01c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d002      	beq.n	800df30 <HAL_UART_Transmit+0x26>
 800df2a:	88fb      	ldrh	r3, [r7, #6]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d101      	bne.n	800df34 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800df30:	2301      	movs	r3, #1
 800df32:	e074      	b.n	800e01e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	2200      	movs	r2, #0
 800df38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	2221      	movs	r2, #33	; 0x21
 800df40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800df44:	f7f8 f95c 	bl	8006200 <HAL_GetTick>
 800df48:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	88fa      	ldrh	r2, [r7, #6]
 800df4e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	88fa      	ldrh	r2, [r7, #6]
 800df56:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	689b      	ldr	r3, [r3, #8]
 800df5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df62:	d108      	bne.n	800df76 <HAL_UART_Transmit+0x6c>
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	691b      	ldr	r3, [r3, #16]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d104      	bne.n	800df76 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800df6c:	2300      	movs	r3, #0
 800df6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	61bb      	str	r3, [r7, #24]
 800df74:	e003      	b.n	800df7e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800df76:	68bb      	ldr	r3, [r7, #8]
 800df78:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800df7a:	2300      	movs	r3, #0
 800df7c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800df7e:	e030      	b.n	800dfe2 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	9300      	str	r3, [sp, #0]
 800df84:	697b      	ldr	r3, [r7, #20]
 800df86:	2200      	movs	r2, #0
 800df88:	2180      	movs	r1, #128	; 0x80
 800df8a:	68f8      	ldr	r0, [r7, #12]
 800df8c:	f001 fcb4 	bl	800f8f8 <UART_WaitOnFlagUntilTimeout>
 800df90:	4603      	mov	r3, r0
 800df92:	2b00      	cmp	r3, #0
 800df94:	d005      	beq.n	800dfa2 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	2220      	movs	r2, #32
 800df9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800df9e:	2303      	movs	r3, #3
 800dfa0:	e03d      	b.n	800e01e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800dfa2:	69fb      	ldr	r3, [r7, #28]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d10b      	bne.n	800dfc0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800dfa8:	69bb      	ldr	r3, [r7, #24]
 800dfaa:	881b      	ldrh	r3, [r3, #0]
 800dfac:	461a      	mov	r2, r3
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dfb6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800dfb8:	69bb      	ldr	r3, [r7, #24]
 800dfba:	3302      	adds	r3, #2
 800dfbc:	61bb      	str	r3, [r7, #24]
 800dfbe:	e007      	b.n	800dfd0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800dfc0:	69fb      	ldr	r3, [r7, #28]
 800dfc2:	781a      	ldrb	r2, [r3, #0]
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800dfca:	69fb      	ldr	r3, [r7, #28]
 800dfcc:	3301      	adds	r3, #1
 800dfce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dfd6:	b29b      	uxth	r3, r3
 800dfd8:	3b01      	subs	r3, #1
 800dfda:	b29a      	uxth	r2, r3
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dfe8:	b29b      	uxth	r3, r3
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d1c8      	bne.n	800df80 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	9300      	str	r3, [sp, #0]
 800dff2:	697b      	ldr	r3, [r7, #20]
 800dff4:	2200      	movs	r2, #0
 800dff6:	2140      	movs	r1, #64	; 0x40
 800dff8:	68f8      	ldr	r0, [r7, #12]
 800dffa:	f001 fc7d 	bl	800f8f8 <UART_WaitOnFlagUntilTimeout>
 800dffe:	4603      	mov	r3, r0
 800e000:	2b00      	cmp	r3, #0
 800e002:	d005      	beq.n	800e010 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	2220      	movs	r2, #32
 800e008:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800e00c:	2303      	movs	r3, #3
 800e00e:	e006      	b.n	800e01e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	2220      	movs	r2, #32
 800e014:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800e018:	2300      	movs	r3, #0
 800e01a:	e000      	b.n	800e01e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e01c:	2302      	movs	r3, #2
  }
}
 800e01e:	4618      	mov	r0, r3
 800e020:	3720      	adds	r7, #32
 800e022:	46bd      	mov	sp, r7
 800e024:	bd80      	pop	{r7, pc}
	...

0800e028 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b08a      	sub	sp, #40	; 0x28
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	60f8      	str	r0, [r7, #12]
 800e030:	60b9      	str	r1, [r7, #8]
 800e032:	4613      	mov	r3, r2
 800e034:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e03c:	2b20      	cmp	r3, #32
 800e03e:	d167      	bne.n	800e110 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800e040:	68bb      	ldr	r3, [r7, #8]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d002      	beq.n	800e04c <HAL_UART_Transmit_DMA+0x24>
 800e046:	88fb      	ldrh	r3, [r7, #6]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d101      	bne.n	800e050 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800e04c:	2301      	movs	r3, #1
 800e04e:	e060      	b.n	800e112 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	68ba      	ldr	r2, [r7, #8]
 800e054:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	88fa      	ldrh	r2, [r7, #6]
 800e05a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	88fa      	ldrh	r2, [r7, #6]
 800e062:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	2200      	movs	r2, #0
 800e06a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	2221      	movs	r2, #33	; 0x21
 800e072:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d028      	beq.n	800e0d0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e082:	4a26      	ldr	r2, [pc, #152]	; (800e11c <HAL_UART_Transmit_DMA+0xf4>)
 800e084:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e08a:	4a25      	ldr	r2, [pc, #148]	; (800e120 <HAL_UART_Transmit_DMA+0xf8>)
 800e08c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e092:	4a24      	ldr	r2, [pc, #144]	; (800e124 <HAL_UART_Transmit_DMA+0xfc>)
 800e094:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e09a:	2200      	movs	r2, #0
 800e09c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0a6:	4619      	mov	r1, r3
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	3328      	adds	r3, #40	; 0x28
 800e0ae:	461a      	mov	r2, r3
 800e0b0:	88fb      	ldrh	r3, [r7, #6]
 800e0b2:	f7f8 ff01 	bl	8006eb8 <HAL_DMA_Start_IT>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d009      	beq.n	800e0d0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	2210      	movs	r2, #16
 800e0c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	2220      	movs	r2, #32
 800e0c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800e0cc:	2301      	movs	r3, #1
 800e0ce:	e020      	b.n	800e112 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	2240      	movs	r2, #64	; 0x40
 800e0d6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	3308      	adds	r3, #8
 800e0de:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0e0:	697b      	ldr	r3, [r7, #20]
 800e0e2:	e853 3f00 	ldrex	r3, [r3]
 800e0e6:	613b      	str	r3, [r7, #16]
   return(result);
 800e0e8:	693b      	ldr	r3, [r7, #16]
 800e0ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e0ee:	627b      	str	r3, [r7, #36]	; 0x24
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	3308      	adds	r3, #8
 800e0f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0f8:	623a      	str	r2, [r7, #32]
 800e0fa:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0fc:	69f9      	ldr	r1, [r7, #28]
 800e0fe:	6a3a      	ldr	r2, [r7, #32]
 800e100:	e841 2300 	strex	r3, r2, [r1]
 800e104:	61bb      	str	r3, [r7, #24]
   return(result);
 800e106:	69bb      	ldr	r3, [r7, #24]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d1e5      	bne.n	800e0d8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800e10c:	2300      	movs	r3, #0
 800e10e:	e000      	b.n	800e112 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800e110:	2302      	movs	r3, #2
  }
}
 800e112:	4618      	mov	r0, r3
 800e114:	3728      	adds	r7, #40	; 0x28
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}
 800e11a:	bf00      	nop
 800e11c:	0800fc65 	.word	0x0800fc65
 800e120:	0800fcfb 	.word	0x0800fcfb
 800e124:	0800fe7d 	.word	0x0800fe7d

0800e128 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b08a      	sub	sp, #40	; 0x28
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	60f8      	str	r0, [r7, #12]
 800e130:	60b9      	str	r1, [r7, #8]
 800e132:	4613      	mov	r3, r2
 800e134:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e13c:	2b20      	cmp	r3, #32
 800e13e:	d137      	bne.n	800e1b0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800e140:	68bb      	ldr	r3, [r7, #8]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d002      	beq.n	800e14c <HAL_UART_Receive_DMA+0x24>
 800e146:	88fb      	ldrh	r3, [r7, #6]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d101      	bne.n	800e150 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800e14c:	2301      	movs	r3, #1
 800e14e:	e030      	b.n	800e1b2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	2200      	movs	r2, #0
 800e154:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	4a18      	ldr	r2, [pc, #96]	; (800e1bc <HAL_UART_Receive_DMA+0x94>)
 800e15c:	4293      	cmp	r3, r2
 800e15e:	d01f      	beq.n	800e1a0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	685b      	ldr	r3, [r3, #4]
 800e166:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d018      	beq.n	800e1a0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e174:	697b      	ldr	r3, [r7, #20]
 800e176:	e853 3f00 	ldrex	r3, [r3]
 800e17a:	613b      	str	r3, [r7, #16]
   return(result);
 800e17c:	693b      	ldr	r3, [r7, #16]
 800e17e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e182:	627b      	str	r3, [r7, #36]	; 0x24
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	461a      	mov	r2, r3
 800e18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e18c:	623b      	str	r3, [r7, #32]
 800e18e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e190:	69f9      	ldr	r1, [r7, #28]
 800e192:	6a3a      	ldr	r2, [r7, #32]
 800e194:	e841 2300 	strex	r3, r2, [r1]
 800e198:	61bb      	str	r3, [r7, #24]
   return(result);
 800e19a:	69bb      	ldr	r3, [r7, #24]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d1e6      	bne.n	800e16e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e1a0:	88fb      	ldrh	r3, [r7, #6]
 800e1a2:	461a      	mov	r2, r3
 800e1a4:	68b9      	ldr	r1, [r7, #8]
 800e1a6:	68f8      	ldr	r0, [r7, #12]
 800e1a8:	f001 fc0e 	bl	800f9c8 <UART_Start_Receive_DMA>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	e000      	b.n	800e1b2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e1b0:	2302      	movs	r3, #2
  }
}
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	3728      	adds	r7, #40	; 0x28
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	bd80      	pop	{r7, pc}
 800e1ba:	bf00      	nop
 800e1bc:	58000c00 	.word	0x58000c00

0800e1c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b0ba      	sub	sp, #232	; 0xe8
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	69db      	ldr	r3, [r3, #28]
 800e1ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	689b      	ldr	r3, [r3, #8]
 800e1e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e1e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e1ea:	f640 030f 	movw	r3, #2063	; 0x80f
 800e1ee:	4013      	ands	r3, r2
 800e1f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e1f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d11b      	bne.n	800e234 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e1fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e200:	f003 0320 	and.w	r3, r3, #32
 800e204:	2b00      	cmp	r3, #0
 800e206:	d015      	beq.n	800e234 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e20c:	f003 0320 	and.w	r3, r3, #32
 800e210:	2b00      	cmp	r3, #0
 800e212:	d105      	bne.n	800e220 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e214:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d009      	beq.n	800e234 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e224:	2b00      	cmp	r3, #0
 800e226:	f000 8377 	beq.w	800e918 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	4798      	blx	r3
      }
      return;
 800e232:	e371      	b.n	800e918 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e234:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e238:	2b00      	cmp	r3, #0
 800e23a:	f000 8123 	beq.w	800e484 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e23e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e242:	4b8d      	ldr	r3, [pc, #564]	; (800e478 <HAL_UART_IRQHandler+0x2b8>)
 800e244:	4013      	ands	r3, r2
 800e246:	2b00      	cmp	r3, #0
 800e248:	d106      	bne.n	800e258 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e24a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e24e:	4b8b      	ldr	r3, [pc, #556]	; (800e47c <HAL_UART_IRQHandler+0x2bc>)
 800e250:	4013      	ands	r3, r2
 800e252:	2b00      	cmp	r3, #0
 800e254:	f000 8116 	beq.w	800e484 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e25c:	f003 0301 	and.w	r3, r3, #1
 800e260:	2b00      	cmp	r3, #0
 800e262:	d011      	beq.n	800e288 <HAL_UART_IRQHandler+0xc8>
 800e264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d00b      	beq.n	800e288 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	2201      	movs	r2, #1
 800e276:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e27e:	f043 0201 	orr.w	r2, r3, #1
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e28c:	f003 0302 	and.w	r3, r3, #2
 800e290:	2b00      	cmp	r3, #0
 800e292:	d011      	beq.n	800e2b8 <HAL_UART_IRQHandler+0xf8>
 800e294:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e298:	f003 0301 	and.w	r3, r3, #1
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d00b      	beq.n	800e2b8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	2202      	movs	r2, #2
 800e2a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2ae:	f043 0204 	orr.w	r2, r3, #4
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e2b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2bc:	f003 0304 	and.w	r3, r3, #4
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d011      	beq.n	800e2e8 <HAL_UART_IRQHandler+0x128>
 800e2c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e2c8:	f003 0301 	and.w	r3, r3, #1
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d00b      	beq.n	800e2e8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	2204      	movs	r2, #4
 800e2d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2de:	f043 0202 	orr.w	r2, r3, #2
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e2e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2ec:	f003 0308 	and.w	r3, r3, #8
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d017      	beq.n	800e324 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e2f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2f8:	f003 0320 	and.w	r3, r3, #32
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d105      	bne.n	800e30c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e300:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e304:	4b5c      	ldr	r3, [pc, #368]	; (800e478 <HAL_UART_IRQHandler+0x2b8>)
 800e306:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d00b      	beq.n	800e324 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	2208      	movs	r2, #8
 800e312:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e31a:	f043 0208 	orr.w	r2, r3, #8
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e328:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d012      	beq.n	800e356 <HAL_UART_IRQHandler+0x196>
 800e330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e334:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d00c      	beq.n	800e356 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e344:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e34c:	f043 0220 	orr.w	r2, r3, #32
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	f000 82dd 	beq.w	800e91c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e366:	f003 0320 	and.w	r3, r3, #32
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d013      	beq.n	800e396 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e36e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e372:	f003 0320 	and.w	r3, r3, #32
 800e376:	2b00      	cmp	r3, #0
 800e378:	d105      	bne.n	800e386 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e37a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e37e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e382:	2b00      	cmp	r3, #0
 800e384:	d007      	beq.n	800e396 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d003      	beq.n	800e396 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e392:	6878      	ldr	r0, [r7, #4]
 800e394:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e39c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	689b      	ldr	r3, [r3, #8]
 800e3a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3aa:	2b40      	cmp	r3, #64	; 0x40
 800e3ac:	d005      	beq.n	800e3ba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e3ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e3b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d054      	beq.n	800e464 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e3ba:	6878      	ldr	r0, [r7, #4]
 800e3bc:	f001 fbec 	bl	800fb98 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	689b      	ldr	r3, [r3, #8]
 800e3c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3ca:	2b40      	cmp	r3, #64	; 0x40
 800e3cc:	d146      	bne.n	800e45c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	3308      	adds	r3, #8
 800e3d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e3dc:	e853 3f00 	ldrex	r3, [r3]
 800e3e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e3e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e3e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e3ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	3308      	adds	r3, #8
 800e3f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e3fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e3fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e402:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e406:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e40a:	e841 2300 	strex	r3, r2, [r1]
 800e40e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e412:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e416:	2b00      	cmp	r3, #0
 800e418:	d1d9      	bne.n	800e3ce <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e420:	2b00      	cmp	r3, #0
 800e422:	d017      	beq.n	800e454 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e42a:	4a15      	ldr	r2, [pc, #84]	; (800e480 <HAL_UART_IRQHandler+0x2c0>)
 800e42c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e434:	4618      	mov	r0, r3
 800e436:	f7f9 fac7 	bl	80079c8 <HAL_DMA_Abort_IT>
 800e43a:	4603      	mov	r3, r0
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d019      	beq.n	800e474 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e448:	687a      	ldr	r2, [r7, #4]
 800e44a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800e44e:	4610      	mov	r0, r2
 800e450:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e452:	e00f      	b.n	800e474 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	f7f5 fe3d 	bl	80040d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e45a:	e00b      	b.n	800e474 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e45c:	6878      	ldr	r0, [r7, #4]
 800e45e:	f7f5 fe39 	bl	80040d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e462:	e007      	b.n	800e474 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e464:	6878      	ldr	r0, [r7, #4]
 800e466:	f7f5 fe35 	bl	80040d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	2200      	movs	r2, #0
 800e46e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800e472:	e253      	b.n	800e91c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e474:	bf00      	nop
    return;
 800e476:	e251      	b.n	800e91c <HAL_UART_IRQHandler+0x75c>
 800e478:	10000001 	.word	0x10000001
 800e47c:	04000120 	.word	0x04000120
 800e480:	0800fefd 	.word	0x0800fefd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e488:	2b01      	cmp	r3, #1
 800e48a:	f040 81e7 	bne.w	800e85c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e48e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e492:	f003 0310 	and.w	r3, r3, #16
 800e496:	2b00      	cmp	r3, #0
 800e498:	f000 81e0 	beq.w	800e85c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e49c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e4a0:	f003 0310 	and.w	r3, r3, #16
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	f000 81d9 	beq.w	800e85c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	2210      	movs	r2, #16
 800e4b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	689b      	ldr	r3, [r3, #8]
 800e4b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4bc:	2b40      	cmp	r3, #64	; 0x40
 800e4be:	f040 8151 	bne.w	800e764 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	4a96      	ldr	r2, [pc, #600]	; (800e724 <HAL_UART_IRQHandler+0x564>)
 800e4cc:	4293      	cmp	r3, r2
 800e4ce:	d068      	beq.n	800e5a2 <HAL_UART_IRQHandler+0x3e2>
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	4a93      	ldr	r2, [pc, #588]	; (800e728 <HAL_UART_IRQHandler+0x568>)
 800e4da:	4293      	cmp	r3, r2
 800e4dc:	d061      	beq.n	800e5a2 <HAL_UART_IRQHandler+0x3e2>
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	4a91      	ldr	r2, [pc, #580]	; (800e72c <HAL_UART_IRQHandler+0x56c>)
 800e4e8:	4293      	cmp	r3, r2
 800e4ea:	d05a      	beq.n	800e5a2 <HAL_UART_IRQHandler+0x3e2>
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	4a8e      	ldr	r2, [pc, #568]	; (800e730 <HAL_UART_IRQHandler+0x570>)
 800e4f6:	4293      	cmp	r3, r2
 800e4f8:	d053      	beq.n	800e5a2 <HAL_UART_IRQHandler+0x3e2>
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	4a8c      	ldr	r2, [pc, #560]	; (800e734 <HAL_UART_IRQHandler+0x574>)
 800e504:	4293      	cmp	r3, r2
 800e506:	d04c      	beq.n	800e5a2 <HAL_UART_IRQHandler+0x3e2>
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	4a89      	ldr	r2, [pc, #548]	; (800e738 <HAL_UART_IRQHandler+0x578>)
 800e512:	4293      	cmp	r3, r2
 800e514:	d045      	beq.n	800e5a2 <HAL_UART_IRQHandler+0x3e2>
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	4a87      	ldr	r2, [pc, #540]	; (800e73c <HAL_UART_IRQHandler+0x57c>)
 800e520:	4293      	cmp	r3, r2
 800e522:	d03e      	beq.n	800e5a2 <HAL_UART_IRQHandler+0x3e2>
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	4a84      	ldr	r2, [pc, #528]	; (800e740 <HAL_UART_IRQHandler+0x580>)
 800e52e:	4293      	cmp	r3, r2
 800e530:	d037      	beq.n	800e5a2 <HAL_UART_IRQHandler+0x3e2>
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	4a82      	ldr	r2, [pc, #520]	; (800e744 <HAL_UART_IRQHandler+0x584>)
 800e53c:	4293      	cmp	r3, r2
 800e53e:	d030      	beq.n	800e5a2 <HAL_UART_IRQHandler+0x3e2>
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	4a7f      	ldr	r2, [pc, #508]	; (800e748 <HAL_UART_IRQHandler+0x588>)
 800e54a:	4293      	cmp	r3, r2
 800e54c:	d029      	beq.n	800e5a2 <HAL_UART_IRQHandler+0x3e2>
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	4a7d      	ldr	r2, [pc, #500]	; (800e74c <HAL_UART_IRQHandler+0x58c>)
 800e558:	4293      	cmp	r3, r2
 800e55a:	d022      	beq.n	800e5a2 <HAL_UART_IRQHandler+0x3e2>
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	4a7a      	ldr	r2, [pc, #488]	; (800e750 <HAL_UART_IRQHandler+0x590>)
 800e566:	4293      	cmp	r3, r2
 800e568:	d01b      	beq.n	800e5a2 <HAL_UART_IRQHandler+0x3e2>
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	4a78      	ldr	r2, [pc, #480]	; (800e754 <HAL_UART_IRQHandler+0x594>)
 800e574:	4293      	cmp	r3, r2
 800e576:	d014      	beq.n	800e5a2 <HAL_UART_IRQHandler+0x3e2>
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	4a75      	ldr	r2, [pc, #468]	; (800e758 <HAL_UART_IRQHandler+0x598>)
 800e582:	4293      	cmp	r3, r2
 800e584:	d00d      	beq.n	800e5a2 <HAL_UART_IRQHandler+0x3e2>
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	4a73      	ldr	r2, [pc, #460]	; (800e75c <HAL_UART_IRQHandler+0x59c>)
 800e590:	4293      	cmp	r3, r2
 800e592:	d006      	beq.n	800e5a2 <HAL_UART_IRQHandler+0x3e2>
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	4a70      	ldr	r2, [pc, #448]	; (800e760 <HAL_UART_IRQHandler+0x5a0>)
 800e59e:	4293      	cmp	r3, r2
 800e5a0:	d106      	bne.n	800e5b0 <HAL_UART_IRQHandler+0x3f0>
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	685b      	ldr	r3, [r3, #4]
 800e5ac:	b29b      	uxth	r3, r3
 800e5ae:	e005      	b.n	800e5bc <HAL_UART_IRQHandler+0x3fc>
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	685b      	ldr	r3, [r3, #4]
 800e5ba:	b29b      	uxth	r3, r3
 800e5bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e5c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	f000 81ab 	beq.w	800e920 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e5d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e5d4:	429a      	cmp	r2, r3
 800e5d6:	f080 81a3 	bcs.w	800e920 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e5e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e5ea:	69db      	ldr	r3, [r3, #28]
 800e5ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e5f0:	f000 8087 	beq.w	800e702 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e600:	e853 3f00 	ldrex	r3, [r3]
 800e604:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e608:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e60c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e610:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	461a      	mov	r2, r3
 800e61a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e61e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e622:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e626:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e62a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e62e:	e841 2300 	strex	r3, r2, [r1]
 800e632:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e636:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d1da      	bne.n	800e5f4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	3308      	adds	r3, #8
 800e644:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e646:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e648:	e853 3f00 	ldrex	r3, [r3]
 800e64c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e64e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e650:	f023 0301 	bic.w	r3, r3, #1
 800e654:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	3308      	adds	r3, #8
 800e65e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e662:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e666:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e668:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e66a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e66e:	e841 2300 	strex	r3, r2, [r1]
 800e672:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e674:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e676:	2b00      	cmp	r3, #0
 800e678:	d1e1      	bne.n	800e63e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	3308      	adds	r3, #8
 800e680:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e682:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e684:	e853 3f00 	ldrex	r3, [r3]
 800e688:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e68a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e68c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e690:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	3308      	adds	r3, #8
 800e69a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e69e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e6a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e6a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e6a6:	e841 2300 	strex	r3, r2, [r1]
 800e6aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e6ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d1e3      	bne.n	800e67a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	2220      	movs	r2, #32
 800e6b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	2200      	movs	r2, #0
 800e6be:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6c8:	e853 3f00 	ldrex	r3, [r3]
 800e6cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e6ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e6d0:	f023 0310 	bic.w	r3, r3, #16
 800e6d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	461a      	mov	r2, r3
 800e6de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e6e2:	65bb      	str	r3, [r7, #88]	; 0x58
 800e6e4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e6e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e6ea:	e841 2300 	strex	r3, r2, [r1]
 800e6ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e6f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d1e4      	bne.n	800e6c0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f7f8 fe45 	bl	800738c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	2202      	movs	r2, #2
 800e706:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e714:	b29b      	uxth	r3, r3
 800e716:	1ad3      	subs	r3, r2, r3
 800e718:	b29b      	uxth	r3, r3
 800e71a:	4619      	mov	r1, r3
 800e71c:	6878      	ldr	r0, [r7, #4]
 800e71e:	f000 f927 	bl	800e970 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e722:	e0fd      	b.n	800e920 <HAL_UART_IRQHandler+0x760>
 800e724:	40020010 	.word	0x40020010
 800e728:	40020028 	.word	0x40020028
 800e72c:	40020040 	.word	0x40020040
 800e730:	40020058 	.word	0x40020058
 800e734:	40020070 	.word	0x40020070
 800e738:	40020088 	.word	0x40020088
 800e73c:	400200a0 	.word	0x400200a0
 800e740:	400200b8 	.word	0x400200b8
 800e744:	40020410 	.word	0x40020410
 800e748:	40020428 	.word	0x40020428
 800e74c:	40020440 	.word	0x40020440
 800e750:	40020458 	.word	0x40020458
 800e754:	40020470 	.word	0x40020470
 800e758:	40020488 	.word	0x40020488
 800e75c:	400204a0 	.word	0x400204a0
 800e760:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e770:	b29b      	uxth	r3, r3
 800e772:	1ad3      	subs	r3, r2, r3
 800e774:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e77e:	b29b      	uxth	r3, r3
 800e780:	2b00      	cmp	r3, #0
 800e782:	f000 80cf 	beq.w	800e924 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800e786:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	f000 80ca 	beq.w	800e924 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e798:	e853 3f00 	ldrex	r3, [r3]
 800e79c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e79e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e7a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	461a      	mov	r2, r3
 800e7ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e7b2:	647b      	str	r3, [r7, #68]	; 0x44
 800e7b4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e7b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e7ba:	e841 2300 	strex	r3, r2, [r1]
 800e7be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e7c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d1e4      	bne.n	800e790 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	3308      	adds	r3, #8
 800e7cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d0:	e853 3f00 	ldrex	r3, [r3]
 800e7d4:	623b      	str	r3, [r7, #32]
   return(result);
 800e7d6:	6a3a      	ldr	r2, [r7, #32]
 800e7d8:	4b55      	ldr	r3, [pc, #340]	; (800e930 <HAL_UART_IRQHandler+0x770>)
 800e7da:	4013      	ands	r3, r2
 800e7dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	3308      	adds	r3, #8
 800e7e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e7ea:	633a      	str	r2, [r7, #48]	; 0x30
 800e7ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e7f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7f2:	e841 2300 	strex	r3, r2, [r1]
 800e7f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d1e3      	bne.n	800e7c6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	2220      	movs	r2, #32
 800e802:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	2200      	movs	r2, #0
 800e80a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	2200      	movs	r2, #0
 800e810:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e818:	693b      	ldr	r3, [r7, #16]
 800e81a:	e853 3f00 	ldrex	r3, [r3]
 800e81e:	60fb      	str	r3, [r7, #12]
   return(result);
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	f023 0310 	bic.w	r3, r3, #16
 800e826:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	461a      	mov	r2, r3
 800e830:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e834:	61fb      	str	r3, [r7, #28]
 800e836:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e838:	69b9      	ldr	r1, [r7, #24]
 800e83a:	69fa      	ldr	r2, [r7, #28]
 800e83c:	e841 2300 	strex	r3, r2, [r1]
 800e840:	617b      	str	r3, [r7, #20]
   return(result);
 800e842:	697b      	ldr	r3, [r7, #20]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d1e4      	bne.n	800e812 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2202      	movs	r2, #2
 800e84c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e84e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e852:	4619      	mov	r1, r3
 800e854:	6878      	ldr	r0, [r7, #4]
 800e856:	f000 f88b 	bl	800e970 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e85a:	e063      	b.n	800e924 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e85c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e860:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e864:	2b00      	cmp	r3, #0
 800e866:	d00e      	beq.n	800e886 <HAL_UART_IRQHandler+0x6c6>
 800e868:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e86c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e870:	2b00      	cmp	r3, #0
 800e872:	d008      	beq.n	800e886 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e87c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e87e:	6878      	ldr	r0, [r7, #4]
 800e880:	f001 fb7d 	bl	800ff7e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e884:	e051      	b.n	800e92a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e88a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d014      	beq.n	800e8bc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e892:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d105      	bne.n	800e8aa <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e89e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e8a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d008      	beq.n	800e8bc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d03a      	beq.n	800e928 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e8b6:	6878      	ldr	r0, [r7, #4]
 800e8b8:	4798      	blx	r3
    }
    return;
 800e8ba:	e035      	b.n	800e928 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e8bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e8c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d009      	beq.n	800e8dc <HAL_UART_IRQHandler+0x71c>
 800e8c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e8cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d003      	beq.n	800e8dc <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800e8d4:	6878      	ldr	r0, [r7, #4]
 800e8d6:	f001 fb27 	bl	800ff28 <UART_EndTransmit_IT>
    return;
 800e8da:	e026      	b.n	800e92a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e8dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e8e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d009      	beq.n	800e8fc <HAL_UART_IRQHandler+0x73c>
 800e8e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e8ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d003      	beq.n	800e8fc <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e8f4:	6878      	ldr	r0, [r7, #4]
 800e8f6:	f001 fb56 	bl	800ffa6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e8fa:	e016      	b.n	800e92a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e8fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e900:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e904:	2b00      	cmp	r3, #0
 800e906:	d010      	beq.n	800e92a <HAL_UART_IRQHandler+0x76a>
 800e908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	da0c      	bge.n	800e92a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e910:	6878      	ldr	r0, [r7, #4]
 800e912:	f001 fb3e 	bl	800ff92 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e916:	e008      	b.n	800e92a <HAL_UART_IRQHandler+0x76a>
      return;
 800e918:	bf00      	nop
 800e91a:	e006      	b.n	800e92a <HAL_UART_IRQHandler+0x76a>
    return;
 800e91c:	bf00      	nop
 800e91e:	e004      	b.n	800e92a <HAL_UART_IRQHandler+0x76a>
      return;
 800e920:	bf00      	nop
 800e922:	e002      	b.n	800e92a <HAL_UART_IRQHandler+0x76a>
      return;
 800e924:	bf00      	nop
 800e926:	e000      	b.n	800e92a <HAL_UART_IRQHandler+0x76a>
    return;
 800e928:	bf00      	nop
  }
}
 800e92a:	37e8      	adds	r7, #232	; 0xe8
 800e92c:	46bd      	mov	sp, r7
 800e92e:	bd80      	pop	{r7, pc}
 800e930:	effffffe 	.word	0xeffffffe

0800e934 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e934:	b480      	push	{r7}
 800e936:	b083      	sub	sp, #12
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800e93c:	bf00      	nop
 800e93e:	370c      	adds	r7, #12
 800e940:	46bd      	mov	sp, r7
 800e942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e946:	4770      	bx	lr

0800e948 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e948:	b480      	push	{r7}
 800e94a:	b083      	sub	sp, #12
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800e950:	bf00      	nop
 800e952:	370c      	adds	r7, #12
 800e954:	46bd      	mov	sp, r7
 800e956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95a:	4770      	bx	lr

0800e95c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e95c:	b480      	push	{r7}
 800e95e:	b083      	sub	sp, #12
 800e960:	af00      	add	r7, sp, #0
 800e962:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e964:	bf00      	nop
 800e966:	370c      	adds	r7, #12
 800e968:	46bd      	mov	sp, r7
 800e96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96e:	4770      	bx	lr

0800e970 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e970:	b480      	push	{r7}
 800e972:	b083      	sub	sp, #12
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
 800e978:	460b      	mov	r3, r1
 800e97a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e97c:	bf00      	nop
 800e97e:	370c      	adds	r7, #12
 800e980:	46bd      	mov	sp, r7
 800e982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e986:	4770      	bx	lr

0800e988 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e98c:	b092      	sub	sp, #72	; 0x48
 800e98e:	af00      	add	r7, sp, #0
 800e990:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e992:	2300      	movs	r3, #0
 800e994:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e998:	697b      	ldr	r3, [r7, #20]
 800e99a:	689a      	ldr	r2, [r3, #8]
 800e99c:	697b      	ldr	r3, [r7, #20]
 800e99e:	691b      	ldr	r3, [r3, #16]
 800e9a0:	431a      	orrs	r2, r3
 800e9a2:	697b      	ldr	r3, [r7, #20]
 800e9a4:	695b      	ldr	r3, [r3, #20]
 800e9a6:	431a      	orrs	r2, r3
 800e9a8:	697b      	ldr	r3, [r7, #20]
 800e9aa:	69db      	ldr	r3, [r3, #28]
 800e9ac:	4313      	orrs	r3, r2
 800e9ae:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e9b0:	697b      	ldr	r3, [r7, #20]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	681a      	ldr	r2, [r3, #0]
 800e9b6:	4bbe      	ldr	r3, [pc, #760]	; (800ecb0 <UART_SetConfig+0x328>)
 800e9b8:	4013      	ands	r3, r2
 800e9ba:	697a      	ldr	r2, [r7, #20]
 800e9bc:	6812      	ldr	r2, [r2, #0]
 800e9be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e9c0:	430b      	orrs	r3, r1
 800e9c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e9c4:	697b      	ldr	r3, [r7, #20]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	685b      	ldr	r3, [r3, #4]
 800e9ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e9ce:	697b      	ldr	r3, [r7, #20]
 800e9d0:	68da      	ldr	r2, [r3, #12]
 800e9d2:	697b      	ldr	r3, [r7, #20]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	430a      	orrs	r2, r1
 800e9d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e9da:	697b      	ldr	r3, [r7, #20]
 800e9dc:	699b      	ldr	r3, [r3, #24]
 800e9de:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e9e0:	697b      	ldr	r3, [r7, #20]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	4ab3      	ldr	r2, [pc, #716]	; (800ecb4 <UART_SetConfig+0x32c>)
 800e9e6:	4293      	cmp	r3, r2
 800e9e8:	d004      	beq.n	800e9f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e9ea:	697b      	ldr	r3, [r7, #20]
 800e9ec:	6a1b      	ldr	r3, [r3, #32]
 800e9ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e9f0:	4313      	orrs	r3, r2
 800e9f2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e9f4:	697b      	ldr	r3, [r7, #20]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	689a      	ldr	r2, [r3, #8]
 800e9fa:	4baf      	ldr	r3, [pc, #700]	; (800ecb8 <UART_SetConfig+0x330>)
 800e9fc:	4013      	ands	r3, r2
 800e9fe:	697a      	ldr	r2, [r7, #20]
 800ea00:	6812      	ldr	r2, [r2, #0]
 800ea02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ea04:	430b      	orrs	r3, r1
 800ea06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ea08:	697b      	ldr	r3, [r7, #20]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea0e:	f023 010f 	bic.w	r1, r3, #15
 800ea12:	697b      	ldr	r3, [r7, #20]
 800ea14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea16:	697b      	ldr	r3, [r7, #20]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	430a      	orrs	r2, r1
 800ea1c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ea1e:	697b      	ldr	r3, [r7, #20]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	4aa6      	ldr	r2, [pc, #664]	; (800ecbc <UART_SetConfig+0x334>)
 800ea24:	4293      	cmp	r3, r2
 800ea26:	d177      	bne.n	800eb18 <UART_SetConfig+0x190>
 800ea28:	4ba5      	ldr	r3, [pc, #660]	; (800ecc0 <UART_SetConfig+0x338>)
 800ea2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ea30:	2b28      	cmp	r3, #40	; 0x28
 800ea32:	d86d      	bhi.n	800eb10 <UART_SetConfig+0x188>
 800ea34:	a201      	add	r2, pc, #4	; (adr r2, 800ea3c <UART_SetConfig+0xb4>)
 800ea36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea3a:	bf00      	nop
 800ea3c:	0800eae1 	.word	0x0800eae1
 800ea40:	0800eb11 	.word	0x0800eb11
 800ea44:	0800eb11 	.word	0x0800eb11
 800ea48:	0800eb11 	.word	0x0800eb11
 800ea4c:	0800eb11 	.word	0x0800eb11
 800ea50:	0800eb11 	.word	0x0800eb11
 800ea54:	0800eb11 	.word	0x0800eb11
 800ea58:	0800eb11 	.word	0x0800eb11
 800ea5c:	0800eae9 	.word	0x0800eae9
 800ea60:	0800eb11 	.word	0x0800eb11
 800ea64:	0800eb11 	.word	0x0800eb11
 800ea68:	0800eb11 	.word	0x0800eb11
 800ea6c:	0800eb11 	.word	0x0800eb11
 800ea70:	0800eb11 	.word	0x0800eb11
 800ea74:	0800eb11 	.word	0x0800eb11
 800ea78:	0800eb11 	.word	0x0800eb11
 800ea7c:	0800eaf1 	.word	0x0800eaf1
 800ea80:	0800eb11 	.word	0x0800eb11
 800ea84:	0800eb11 	.word	0x0800eb11
 800ea88:	0800eb11 	.word	0x0800eb11
 800ea8c:	0800eb11 	.word	0x0800eb11
 800ea90:	0800eb11 	.word	0x0800eb11
 800ea94:	0800eb11 	.word	0x0800eb11
 800ea98:	0800eb11 	.word	0x0800eb11
 800ea9c:	0800eaf9 	.word	0x0800eaf9
 800eaa0:	0800eb11 	.word	0x0800eb11
 800eaa4:	0800eb11 	.word	0x0800eb11
 800eaa8:	0800eb11 	.word	0x0800eb11
 800eaac:	0800eb11 	.word	0x0800eb11
 800eab0:	0800eb11 	.word	0x0800eb11
 800eab4:	0800eb11 	.word	0x0800eb11
 800eab8:	0800eb11 	.word	0x0800eb11
 800eabc:	0800eb01 	.word	0x0800eb01
 800eac0:	0800eb11 	.word	0x0800eb11
 800eac4:	0800eb11 	.word	0x0800eb11
 800eac8:	0800eb11 	.word	0x0800eb11
 800eacc:	0800eb11 	.word	0x0800eb11
 800ead0:	0800eb11 	.word	0x0800eb11
 800ead4:	0800eb11 	.word	0x0800eb11
 800ead8:	0800eb11 	.word	0x0800eb11
 800eadc:	0800eb09 	.word	0x0800eb09
 800eae0:	2301      	movs	r3, #1
 800eae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eae6:	e326      	b.n	800f136 <UART_SetConfig+0x7ae>
 800eae8:	2304      	movs	r3, #4
 800eaea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaee:	e322      	b.n	800f136 <UART_SetConfig+0x7ae>
 800eaf0:	2308      	movs	r3, #8
 800eaf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaf6:	e31e      	b.n	800f136 <UART_SetConfig+0x7ae>
 800eaf8:	2310      	movs	r3, #16
 800eafa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eafe:	e31a      	b.n	800f136 <UART_SetConfig+0x7ae>
 800eb00:	2320      	movs	r3, #32
 800eb02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb06:	e316      	b.n	800f136 <UART_SetConfig+0x7ae>
 800eb08:	2340      	movs	r3, #64	; 0x40
 800eb0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb0e:	e312      	b.n	800f136 <UART_SetConfig+0x7ae>
 800eb10:	2380      	movs	r3, #128	; 0x80
 800eb12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb16:	e30e      	b.n	800f136 <UART_SetConfig+0x7ae>
 800eb18:	697b      	ldr	r3, [r7, #20]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	4a69      	ldr	r2, [pc, #420]	; (800ecc4 <UART_SetConfig+0x33c>)
 800eb1e:	4293      	cmp	r3, r2
 800eb20:	d130      	bne.n	800eb84 <UART_SetConfig+0x1fc>
 800eb22:	4b67      	ldr	r3, [pc, #412]	; (800ecc0 <UART_SetConfig+0x338>)
 800eb24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb26:	f003 0307 	and.w	r3, r3, #7
 800eb2a:	2b05      	cmp	r3, #5
 800eb2c:	d826      	bhi.n	800eb7c <UART_SetConfig+0x1f4>
 800eb2e:	a201      	add	r2, pc, #4	; (adr r2, 800eb34 <UART_SetConfig+0x1ac>)
 800eb30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb34:	0800eb4d 	.word	0x0800eb4d
 800eb38:	0800eb55 	.word	0x0800eb55
 800eb3c:	0800eb5d 	.word	0x0800eb5d
 800eb40:	0800eb65 	.word	0x0800eb65
 800eb44:	0800eb6d 	.word	0x0800eb6d
 800eb48:	0800eb75 	.word	0x0800eb75
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb52:	e2f0      	b.n	800f136 <UART_SetConfig+0x7ae>
 800eb54:	2304      	movs	r3, #4
 800eb56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb5a:	e2ec      	b.n	800f136 <UART_SetConfig+0x7ae>
 800eb5c:	2308      	movs	r3, #8
 800eb5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb62:	e2e8      	b.n	800f136 <UART_SetConfig+0x7ae>
 800eb64:	2310      	movs	r3, #16
 800eb66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb6a:	e2e4      	b.n	800f136 <UART_SetConfig+0x7ae>
 800eb6c:	2320      	movs	r3, #32
 800eb6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb72:	e2e0      	b.n	800f136 <UART_SetConfig+0x7ae>
 800eb74:	2340      	movs	r3, #64	; 0x40
 800eb76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb7a:	e2dc      	b.n	800f136 <UART_SetConfig+0x7ae>
 800eb7c:	2380      	movs	r3, #128	; 0x80
 800eb7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb82:	e2d8      	b.n	800f136 <UART_SetConfig+0x7ae>
 800eb84:	697b      	ldr	r3, [r7, #20]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	4a4f      	ldr	r2, [pc, #316]	; (800ecc8 <UART_SetConfig+0x340>)
 800eb8a:	4293      	cmp	r3, r2
 800eb8c:	d130      	bne.n	800ebf0 <UART_SetConfig+0x268>
 800eb8e:	4b4c      	ldr	r3, [pc, #304]	; (800ecc0 <UART_SetConfig+0x338>)
 800eb90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb92:	f003 0307 	and.w	r3, r3, #7
 800eb96:	2b05      	cmp	r3, #5
 800eb98:	d826      	bhi.n	800ebe8 <UART_SetConfig+0x260>
 800eb9a:	a201      	add	r2, pc, #4	; (adr r2, 800eba0 <UART_SetConfig+0x218>)
 800eb9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eba0:	0800ebb9 	.word	0x0800ebb9
 800eba4:	0800ebc1 	.word	0x0800ebc1
 800eba8:	0800ebc9 	.word	0x0800ebc9
 800ebac:	0800ebd1 	.word	0x0800ebd1
 800ebb0:	0800ebd9 	.word	0x0800ebd9
 800ebb4:	0800ebe1 	.word	0x0800ebe1
 800ebb8:	2300      	movs	r3, #0
 800ebba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebbe:	e2ba      	b.n	800f136 <UART_SetConfig+0x7ae>
 800ebc0:	2304      	movs	r3, #4
 800ebc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebc6:	e2b6      	b.n	800f136 <UART_SetConfig+0x7ae>
 800ebc8:	2308      	movs	r3, #8
 800ebca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebce:	e2b2      	b.n	800f136 <UART_SetConfig+0x7ae>
 800ebd0:	2310      	movs	r3, #16
 800ebd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebd6:	e2ae      	b.n	800f136 <UART_SetConfig+0x7ae>
 800ebd8:	2320      	movs	r3, #32
 800ebda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebde:	e2aa      	b.n	800f136 <UART_SetConfig+0x7ae>
 800ebe0:	2340      	movs	r3, #64	; 0x40
 800ebe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebe6:	e2a6      	b.n	800f136 <UART_SetConfig+0x7ae>
 800ebe8:	2380      	movs	r3, #128	; 0x80
 800ebea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebee:	e2a2      	b.n	800f136 <UART_SetConfig+0x7ae>
 800ebf0:	697b      	ldr	r3, [r7, #20]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	4a35      	ldr	r2, [pc, #212]	; (800eccc <UART_SetConfig+0x344>)
 800ebf6:	4293      	cmp	r3, r2
 800ebf8:	d130      	bne.n	800ec5c <UART_SetConfig+0x2d4>
 800ebfa:	4b31      	ldr	r3, [pc, #196]	; (800ecc0 <UART_SetConfig+0x338>)
 800ebfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebfe:	f003 0307 	and.w	r3, r3, #7
 800ec02:	2b05      	cmp	r3, #5
 800ec04:	d826      	bhi.n	800ec54 <UART_SetConfig+0x2cc>
 800ec06:	a201      	add	r2, pc, #4	; (adr r2, 800ec0c <UART_SetConfig+0x284>)
 800ec08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec0c:	0800ec25 	.word	0x0800ec25
 800ec10:	0800ec2d 	.word	0x0800ec2d
 800ec14:	0800ec35 	.word	0x0800ec35
 800ec18:	0800ec3d 	.word	0x0800ec3d
 800ec1c:	0800ec45 	.word	0x0800ec45
 800ec20:	0800ec4d 	.word	0x0800ec4d
 800ec24:	2300      	movs	r3, #0
 800ec26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec2a:	e284      	b.n	800f136 <UART_SetConfig+0x7ae>
 800ec2c:	2304      	movs	r3, #4
 800ec2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec32:	e280      	b.n	800f136 <UART_SetConfig+0x7ae>
 800ec34:	2308      	movs	r3, #8
 800ec36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec3a:	e27c      	b.n	800f136 <UART_SetConfig+0x7ae>
 800ec3c:	2310      	movs	r3, #16
 800ec3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec42:	e278      	b.n	800f136 <UART_SetConfig+0x7ae>
 800ec44:	2320      	movs	r3, #32
 800ec46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec4a:	e274      	b.n	800f136 <UART_SetConfig+0x7ae>
 800ec4c:	2340      	movs	r3, #64	; 0x40
 800ec4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec52:	e270      	b.n	800f136 <UART_SetConfig+0x7ae>
 800ec54:	2380      	movs	r3, #128	; 0x80
 800ec56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec5a:	e26c      	b.n	800f136 <UART_SetConfig+0x7ae>
 800ec5c:	697b      	ldr	r3, [r7, #20]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	4a1b      	ldr	r2, [pc, #108]	; (800ecd0 <UART_SetConfig+0x348>)
 800ec62:	4293      	cmp	r3, r2
 800ec64:	d142      	bne.n	800ecec <UART_SetConfig+0x364>
 800ec66:	4b16      	ldr	r3, [pc, #88]	; (800ecc0 <UART_SetConfig+0x338>)
 800ec68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec6a:	f003 0307 	and.w	r3, r3, #7
 800ec6e:	2b05      	cmp	r3, #5
 800ec70:	d838      	bhi.n	800ece4 <UART_SetConfig+0x35c>
 800ec72:	a201      	add	r2, pc, #4	; (adr r2, 800ec78 <UART_SetConfig+0x2f0>)
 800ec74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec78:	0800ec91 	.word	0x0800ec91
 800ec7c:	0800ec99 	.word	0x0800ec99
 800ec80:	0800eca1 	.word	0x0800eca1
 800ec84:	0800eca9 	.word	0x0800eca9
 800ec88:	0800ecd5 	.word	0x0800ecd5
 800ec8c:	0800ecdd 	.word	0x0800ecdd
 800ec90:	2300      	movs	r3, #0
 800ec92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec96:	e24e      	b.n	800f136 <UART_SetConfig+0x7ae>
 800ec98:	2304      	movs	r3, #4
 800ec9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec9e:	e24a      	b.n	800f136 <UART_SetConfig+0x7ae>
 800eca0:	2308      	movs	r3, #8
 800eca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eca6:	e246      	b.n	800f136 <UART_SetConfig+0x7ae>
 800eca8:	2310      	movs	r3, #16
 800ecaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecae:	e242      	b.n	800f136 <UART_SetConfig+0x7ae>
 800ecb0:	cfff69f3 	.word	0xcfff69f3
 800ecb4:	58000c00 	.word	0x58000c00
 800ecb8:	11fff4ff 	.word	0x11fff4ff
 800ecbc:	40011000 	.word	0x40011000
 800ecc0:	58024400 	.word	0x58024400
 800ecc4:	40004400 	.word	0x40004400
 800ecc8:	40004800 	.word	0x40004800
 800eccc:	40004c00 	.word	0x40004c00
 800ecd0:	40005000 	.word	0x40005000
 800ecd4:	2320      	movs	r3, #32
 800ecd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecda:	e22c      	b.n	800f136 <UART_SetConfig+0x7ae>
 800ecdc:	2340      	movs	r3, #64	; 0x40
 800ecde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ece2:	e228      	b.n	800f136 <UART_SetConfig+0x7ae>
 800ece4:	2380      	movs	r3, #128	; 0x80
 800ece6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecea:	e224      	b.n	800f136 <UART_SetConfig+0x7ae>
 800ecec:	697b      	ldr	r3, [r7, #20]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	4ab1      	ldr	r2, [pc, #708]	; (800efb8 <UART_SetConfig+0x630>)
 800ecf2:	4293      	cmp	r3, r2
 800ecf4:	d176      	bne.n	800ede4 <UART_SetConfig+0x45c>
 800ecf6:	4bb1      	ldr	r3, [pc, #708]	; (800efbc <UART_SetConfig+0x634>)
 800ecf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ecfe:	2b28      	cmp	r3, #40	; 0x28
 800ed00:	d86c      	bhi.n	800eddc <UART_SetConfig+0x454>
 800ed02:	a201      	add	r2, pc, #4	; (adr r2, 800ed08 <UART_SetConfig+0x380>)
 800ed04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed08:	0800edad 	.word	0x0800edad
 800ed0c:	0800eddd 	.word	0x0800eddd
 800ed10:	0800eddd 	.word	0x0800eddd
 800ed14:	0800eddd 	.word	0x0800eddd
 800ed18:	0800eddd 	.word	0x0800eddd
 800ed1c:	0800eddd 	.word	0x0800eddd
 800ed20:	0800eddd 	.word	0x0800eddd
 800ed24:	0800eddd 	.word	0x0800eddd
 800ed28:	0800edb5 	.word	0x0800edb5
 800ed2c:	0800eddd 	.word	0x0800eddd
 800ed30:	0800eddd 	.word	0x0800eddd
 800ed34:	0800eddd 	.word	0x0800eddd
 800ed38:	0800eddd 	.word	0x0800eddd
 800ed3c:	0800eddd 	.word	0x0800eddd
 800ed40:	0800eddd 	.word	0x0800eddd
 800ed44:	0800eddd 	.word	0x0800eddd
 800ed48:	0800edbd 	.word	0x0800edbd
 800ed4c:	0800eddd 	.word	0x0800eddd
 800ed50:	0800eddd 	.word	0x0800eddd
 800ed54:	0800eddd 	.word	0x0800eddd
 800ed58:	0800eddd 	.word	0x0800eddd
 800ed5c:	0800eddd 	.word	0x0800eddd
 800ed60:	0800eddd 	.word	0x0800eddd
 800ed64:	0800eddd 	.word	0x0800eddd
 800ed68:	0800edc5 	.word	0x0800edc5
 800ed6c:	0800eddd 	.word	0x0800eddd
 800ed70:	0800eddd 	.word	0x0800eddd
 800ed74:	0800eddd 	.word	0x0800eddd
 800ed78:	0800eddd 	.word	0x0800eddd
 800ed7c:	0800eddd 	.word	0x0800eddd
 800ed80:	0800eddd 	.word	0x0800eddd
 800ed84:	0800eddd 	.word	0x0800eddd
 800ed88:	0800edcd 	.word	0x0800edcd
 800ed8c:	0800eddd 	.word	0x0800eddd
 800ed90:	0800eddd 	.word	0x0800eddd
 800ed94:	0800eddd 	.word	0x0800eddd
 800ed98:	0800eddd 	.word	0x0800eddd
 800ed9c:	0800eddd 	.word	0x0800eddd
 800eda0:	0800eddd 	.word	0x0800eddd
 800eda4:	0800eddd 	.word	0x0800eddd
 800eda8:	0800edd5 	.word	0x0800edd5
 800edac:	2301      	movs	r3, #1
 800edae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edb2:	e1c0      	b.n	800f136 <UART_SetConfig+0x7ae>
 800edb4:	2304      	movs	r3, #4
 800edb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edba:	e1bc      	b.n	800f136 <UART_SetConfig+0x7ae>
 800edbc:	2308      	movs	r3, #8
 800edbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edc2:	e1b8      	b.n	800f136 <UART_SetConfig+0x7ae>
 800edc4:	2310      	movs	r3, #16
 800edc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edca:	e1b4      	b.n	800f136 <UART_SetConfig+0x7ae>
 800edcc:	2320      	movs	r3, #32
 800edce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edd2:	e1b0      	b.n	800f136 <UART_SetConfig+0x7ae>
 800edd4:	2340      	movs	r3, #64	; 0x40
 800edd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edda:	e1ac      	b.n	800f136 <UART_SetConfig+0x7ae>
 800eddc:	2380      	movs	r3, #128	; 0x80
 800edde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ede2:	e1a8      	b.n	800f136 <UART_SetConfig+0x7ae>
 800ede4:	697b      	ldr	r3, [r7, #20]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	4a75      	ldr	r2, [pc, #468]	; (800efc0 <UART_SetConfig+0x638>)
 800edea:	4293      	cmp	r3, r2
 800edec:	d130      	bne.n	800ee50 <UART_SetConfig+0x4c8>
 800edee:	4b73      	ldr	r3, [pc, #460]	; (800efbc <UART_SetConfig+0x634>)
 800edf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edf2:	f003 0307 	and.w	r3, r3, #7
 800edf6:	2b05      	cmp	r3, #5
 800edf8:	d826      	bhi.n	800ee48 <UART_SetConfig+0x4c0>
 800edfa:	a201      	add	r2, pc, #4	; (adr r2, 800ee00 <UART_SetConfig+0x478>)
 800edfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee00:	0800ee19 	.word	0x0800ee19
 800ee04:	0800ee21 	.word	0x0800ee21
 800ee08:	0800ee29 	.word	0x0800ee29
 800ee0c:	0800ee31 	.word	0x0800ee31
 800ee10:	0800ee39 	.word	0x0800ee39
 800ee14:	0800ee41 	.word	0x0800ee41
 800ee18:	2300      	movs	r3, #0
 800ee1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee1e:	e18a      	b.n	800f136 <UART_SetConfig+0x7ae>
 800ee20:	2304      	movs	r3, #4
 800ee22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee26:	e186      	b.n	800f136 <UART_SetConfig+0x7ae>
 800ee28:	2308      	movs	r3, #8
 800ee2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee2e:	e182      	b.n	800f136 <UART_SetConfig+0x7ae>
 800ee30:	2310      	movs	r3, #16
 800ee32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee36:	e17e      	b.n	800f136 <UART_SetConfig+0x7ae>
 800ee38:	2320      	movs	r3, #32
 800ee3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee3e:	e17a      	b.n	800f136 <UART_SetConfig+0x7ae>
 800ee40:	2340      	movs	r3, #64	; 0x40
 800ee42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee46:	e176      	b.n	800f136 <UART_SetConfig+0x7ae>
 800ee48:	2380      	movs	r3, #128	; 0x80
 800ee4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee4e:	e172      	b.n	800f136 <UART_SetConfig+0x7ae>
 800ee50:	697b      	ldr	r3, [r7, #20]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	4a5b      	ldr	r2, [pc, #364]	; (800efc4 <UART_SetConfig+0x63c>)
 800ee56:	4293      	cmp	r3, r2
 800ee58:	d130      	bne.n	800eebc <UART_SetConfig+0x534>
 800ee5a:	4b58      	ldr	r3, [pc, #352]	; (800efbc <UART_SetConfig+0x634>)
 800ee5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee5e:	f003 0307 	and.w	r3, r3, #7
 800ee62:	2b05      	cmp	r3, #5
 800ee64:	d826      	bhi.n	800eeb4 <UART_SetConfig+0x52c>
 800ee66:	a201      	add	r2, pc, #4	; (adr r2, 800ee6c <UART_SetConfig+0x4e4>)
 800ee68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee6c:	0800ee85 	.word	0x0800ee85
 800ee70:	0800ee8d 	.word	0x0800ee8d
 800ee74:	0800ee95 	.word	0x0800ee95
 800ee78:	0800ee9d 	.word	0x0800ee9d
 800ee7c:	0800eea5 	.word	0x0800eea5
 800ee80:	0800eead 	.word	0x0800eead
 800ee84:	2300      	movs	r3, #0
 800ee86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee8a:	e154      	b.n	800f136 <UART_SetConfig+0x7ae>
 800ee8c:	2304      	movs	r3, #4
 800ee8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee92:	e150      	b.n	800f136 <UART_SetConfig+0x7ae>
 800ee94:	2308      	movs	r3, #8
 800ee96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee9a:	e14c      	b.n	800f136 <UART_SetConfig+0x7ae>
 800ee9c:	2310      	movs	r3, #16
 800ee9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eea2:	e148      	b.n	800f136 <UART_SetConfig+0x7ae>
 800eea4:	2320      	movs	r3, #32
 800eea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeaa:	e144      	b.n	800f136 <UART_SetConfig+0x7ae>
 800eeac:	2340      	movs	r3, #64	; 0x40
 800eeae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeb2:	e140      	b.n	800f136 <UART_SetConfig+0x7ae>
 800eeb4:	2380      	movs	r3, #128	; 0x80
 800eeb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeba:	e13c      	b.n	800f136 <UART_SetConfig+0x7ae>
 800eebc:	697b      	ldr	r3, [r7, #20]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	4a41      	ldr	r2, [pc, #260]	; (800efc8 <UART_SetConfig+0x640>)
 800eec2:	4293      	cmp	r3, r2
 800eec4:	f040 8082 	bne.w	800efcc <UART_SetConfig+0x644>
 800eec8:	4b3c      	ldr	r3, [pc, #240]	; (800efbc <UART_SetConfig+0x634>)
 800eeca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eecc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800eed0:	2b28      	cmp	r3, #40	; 0x28
 800eed2:	d86d      	bhi.n	800efb0 <UART_SetConfig+0x628>
 800eed4:	a201      	add	r2, pc, #4	; (adr r2, 800eedc <UART_SetConfig+0x554>)
 800eed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeda:	bf00      	nop
 800eedc:	0800ef81 	.word	0x0800ef81
 800eee0:	0800efb1 	.word	0x0800efb1
 800eee4:	0800efb1 	.word	0x0800efb1
 800eee8:	0800efb1 	.word	0x0800efb1
 800eeec:	0800efb1 	.word	0x0800efb1
 800eef0:	0800efb1 	.word	0x0800efb1
 800eef4:	0800efb1 	.word	0x0800efb1
 800eef8:	0800efb1 	.word	0x0800efb1
 800eefc:	0800ef89 	.word	0x0800ef89
 800ef00:	0800efb1 	.word	0x0800efb1
 800ef04:	0800efb1 	.word	0x0800efb1
 800ef08:	0800efb1 	.word	0x0800efb1
 800ef0c:	0800efb1 	.word	0x0800efb1
 800ef10:	0800efb1 	.word	0x0800efb1
 800ef14:	0800efb1 	.word	0x0800efb1
 800ef18:	0800efb1 	.word	0x0800efb1
 800ef1c:	0800ef91 	.word	0x0800ef91
 800ef20:	0800efb1 	.word	0x0800efb1
 800ef24:	0800efb1 	.word	0x0800efb1
 800ef28:	0800efb1 	.word	0x0800efb1
 800ef2c:	0800efb1 	.word	0x0800efb1
 800ef30:	0800efb1 	.word	0x0800efb1
 800ef34:	0800efb1 	.word	0x0800efb1
 800ef38:	0800efb1 	.word	0x0800efb1
 800ef3c:	0800ef99 	.word	0x0800ef99
 800ef40:	0800efb1 	.word	0x0800efb1
 800ef44:	0800efb1 	.word	0x0800efb1
 800ef48:	0800efb1 	.word	0x0800efb1
 800ef4c:	0800efb1 	.word	0x0800efb1
 800ef50:	0800efb1 	.word	0x0800efb1
 800ef54:	0800efb1 	.word	0x0800efb1
 800ef58:	0800efb1 	.word	0x0800efb1
 800ef5c:	0800efa1 	.word	0x0800efa1
 800ef60:	0800efb1 	.word	0x0800efb1
 800ef64:	0800efb1 	.word	0x0800efb1
 800ef68:	0800efb1 	.word	0x0800efb1
 800ef6c:	0800efb1 	.word	0x0800efb1
 800ef70:	0800efb1 	.word	0x0800efb1
 800ef74:	0800efb1 	.word	0x0800efb1
 800ef78:	0800efb1 	.word	0x0800efb1
 800ef7c:	0800efa9 	.word	0x0800efa9
 800ef80:	2301      	movs	r3, #1
 800ef82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef86:	e0d6      	b.n	800f136 <UART_SetConfig+0x7ae>
 800ef88:	2304      	movs	r3, #4
 800ef8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef8e:	e0d2      	b.n	800f136 <UART_SetConfig+0x7ae>
 800ef90:	2308      	movs	r3, #8
 800ef92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef96:	e0ce      	b.n	800f136 <UART_SetConfig+0x7ae>
 800ef98:	2310      	movs	r3, #16
 800ef9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef9e:	e0ca      	b.n	800f136 <UART_SetConfig+0x7ae>
 800efa0:	2320      	movs	r3, #32
 800efa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efa6:	e0c6      	b.n	800f136 <UART_SetConfig+0x7ae>
 800efa8:	2340      	movs	r3, #64	; 0x40
 800efaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efae:	e0c2      	b.n	800f136 <UART_SetConfig+0x7ae>
 800efb0:	2380      	movs	r3, #128	; 0x80
 800efb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efb6:	e0be      	b.n	800f136 <UART_SetConfig+0x7ae>
 800efb8:	40011400 	.word	0x40011400
 800efbc:	58024400 	.word	0x58024400
 800efc0:	40007800 	.word	0x40007800
 800efc4:	40007c00 	.word	0x40007c00
 800efc8:	40011800 	.word	0x40011800
 800efcc:	697b      	ldr	r3, [r7, #20]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	4aad      	ldr	r2, [pc, #692]	; (800f288 <UART_SetConfig+0x900>)
 800efd2:	4293      	cmp	r3, r2
 800efd4:	d176      	bne.n	800f0c4 <UART_SetConfig+0x73c>
 800efd6:	4bad      	ldr	r3, [pc, #692]	; (800f28c <UART_SetConfig+0x904>)
 800efd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800efde:	2b28      	cmp	r3, #40	; 0x28
 800efe0:	d86c      	bhi.n	800f0bc <UART_SetConfig+0x734>
 800efe2:	a201      	add	r2, pc, #4	; (adr r2, 800efe8 <UART_SetConfig+0x660>)
 800efe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efe8:	0800f08d 	.word	0x0800f08d
 800efec:	0800f0bd 	.word	0x0800f0bd
 800eff0:	0800f0bd 	.word	0x0800f0bd
 800eff4:	0800f0bd 	.word	0x0800f0bd
 800eff8:	0800f0bd 	.word	0x0800f0bd
 800effc:	0800f0bd 	.word	0x0800f0bd
 800f000:	0800f0bd 	.word	0x0800f0bd
 800f004:	0800f0bd 	.word	0x0800f0bd
 800f008:	0800f095 	.word	0x0800f095
 800f00c:	0800f0bd 	.word	0x0800f0bd
 800f010:	0800f0bd 	.word	0x0800f0bd
 800f014:	0800f0bd 	.word	0x0800f0bd
 800f018:	0800f0bd 	.word	0x0800f0bd
 800f01c:	0800f0bd 	.word	0x0800f0bd
 800f020:	0800f0bd 	.word	0x0800f0bd
 800f024:	0800f0bd 	.word	0x0800f0bd
 800f028:	0800f09d 	.word	0x0800f09d
 800f02c:	0800f0bd 	.word	0x0800f0bd
 800f030:	0800f0bd 	.word	0x0800f0bd
 800f034:	0800f0bd 	.word	0x0800f0bd
 800f038:	0800f0bd 	.word	0x0800f0bd
 800f03c:	0800f0bd 	.word	0x0800f0bd
 800f040:	0800f0bd 	.word	0x0800f0bd
 800f044:	0800f0bd 	.word	0x0800f0bd
 800f048:	0800f0a5 	.word	0x0800f0a5
 800f04c:	0800f0bd 	.word	0x0800f0bd
 800f050:	0800f0bd 	.word	0x0800f0bd
 800f054:	0800f0bd 	.word	0x0800f0bd
 800f058:	0800f0bd 	.word	0x0800f0bd
 800f05c:	0800f0bd 	.word	0x0800f0bd
 800f060:	0800f0bd 	.word	0x0800f0bd
 800f064:	0800f0bd 	.word	0x0800f0bd
 800f068:	0800f0ad 	.word	0x0800f0ad
 800f06c:	0800f0bd 	.word	0x0800f0bd
 800f070:	0800f0bd 	.word	0x0800f0bd
 800f074:	0800f0bd 	.word	0x0800f0bd
 800f078:	0800f0bd 	.word	0x0800f0bd
 800f07c:	0800f0bd 	.word	0x0800f0bd
 800f080:	0800f0bd 	.word	0x0800f0bd
 800f084:	0800f0bd 	.word	0x0800f0bd
 800f088:	0800f0b5 	.word	0x0800f0b5
 800f08c:	2301      	movs	r3, #1
 800f08e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f092:	e050      	b.n	800f136 <UART_SetConfig+0x7ae>
 800f094:	2304      	movs	r3, #4
 800f096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f09a:	e04c      	b.n	800f136 <UART_SetConfig+0x7ae>
 800f09c:	2308      	movs	r3, #8
 800f09e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0a2:	e048      	b.n	800f136 <UART_SetConfig+0x7ae>
 800f0a4:	2310      	movs	r3, #16
 800f0a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0aa:	e044      	b.n	800f136 <UART_SetConfig+0x7ae>
 800f0ac:	2320      	movs	r3, #32
 800f0ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0b2:	e040      	b.n	800f136 <UART_SetConfig+0x7ae>
 800f0b4:	2340      	movs	r3, #64	; 0x40
 800f0b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0ba:	e03c      	b.n	800f136 <UART_SetConfig+0x7ae>
 800f0bc:	2380      	movs	r3, #128	; 0x80
 800f0be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0c2:	e038      	b.n	800f136 <UART_SetConfig+0x7ae>
 800f0c4:	697b      	ldr	r3, [r7, #20]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	4a71      	ldr	r2, [pc, #452]	; (800f290 <UART_SetConfig+0x908>)
 800f0ca:	4293      	cmp	r3, r2
 800f0cc:	d130      	bne.n	800f130 <UART_SetConfig+0x7a8>
 800f0ce:	4b6f      	ldr	r3, [pc, #444]	; (800f28c <UART_SetConfig+0x904>)
 800f0d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f0d2:	f003 0307 	and.w	r3, r3, #7
 800f0d6:	2b05      	cmp	r3, #5
 800f0d8:	d826      	bhi.n	800f128 <UART_SetConfig+0x7a0>
 800f0da:	a201      	add	r2, pc, #4	; (adr r2, 800f0e0 <UART_SetConfig+0x758>)
 800f0dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0e0:	0800f0f9 	.word	0x0800f0f9
 800f0e4:	0800f101 	.word	0x0800f101
 800f0e8:	0800f109 	.word	0x0800f109
 800f0ec:	0800f111 	.word	0x0800f111
 800f0f0:	0800f119 	.word	0x0800f119
 800f0f4:	0800f121 	.word	0x0800f121
 800f0f8:	2302      	movs	r3, #2
 800f0fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0fe:	e01a      	b.n	800f136 <UART_SetConfig+0x7ae>
 800f100:	2304      	movs	r3, #4
 800f102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f106:	e016      	b.n	800f136 <UART_SetConfig+0x7ae>
 800f108:	2308      	movs	r3, #8
 800f10a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f10e:	e012      	b.n	800f136 <UART_SetConfig+0x7ae>
 800f110:	2310      	movs	r3, #16
 800f112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f116:	e00e      	b.n	800f136 <UART_SetConfig+0x7ae>
 800f118:	2320      	movs	r3, #32
 800f11a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f11e:	e00a      	b.n	800f136 <UART_SetConfig+0x7ae>
 800f120:	2340      	movs	r3, #64	; 0x40
 800f122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f126:	e006      	b.n	800f136 <UART_SetConfig+0x7ae>
 800f128:	2380      	movs	r3, #128	; 0x80
 800f12a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f12e:	e002      	b.n	800f136 <UART_SetConfig+0x7ae>
 800f130:	2380      	movs	r3, #128	; 0x80
 800f132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f136:	697b      	ldr	r3, [r7, #20]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	4a55      	ldr	r2, [pc, #340]	; (800f290 <UART_SetConfig+0x908>)
 800f13c:	4293      	cmp	r3, r2
 800f13e:	f040 80f8 	bne.w	800f332 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f142:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f146:	2b20      	cmp	r3, #32
 800f148:	dc46      	bgt.n	800f1d8 <UART_SetConfig+0x850>
 800f14a:	2b02      	cmp	r3, #2
 800f14c:	db75      	blt.n	800f23a <UART_SetConfig+0x8b2>
 800f14e:	3b02      	subs	r3, #2
 800f150:	2b1e      	cmp	r3, #30
 800f152:	d872      	bhi.n	800f23a <UART_SetConfig+0x8b2>
 800f154:	a201      	add	r2, pc, #4	; (adr r2, 800f15c <UART_SetConfig+0x7d4>)
 800f156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f15a:	bf00      	nop
 800f15c:	0800f1df 	.word	0x0800f1df
 800f160:	0800f23b 	.word	0x0800f23b
 800f164:	0800f1e7 	.word	0x0800f1e7
 800f168:	0800f23b 	.word	0x0800f23b
 800f16c:	0800f23b 	.word	0x0800f23b
 800f170:	0800f23b 	.word	0x0800f23b
 800f174:	0800f1f7 	.word	0x0800f1f7
 800f178:	0800f23b 	.word	0x0800f23b
 800f17c:	0800f23b 	.word	0x0800f23b
 800f180:	0800f23b 	.word	0x0800f23b
 800f184:	0800f23b 	.word	0x0800f23b
 800f188:	0800f23b 	.word	0x0800f23b
 800f18c:	0800f23b 	.word	0x0800f23b
 800f190:	0800f23b 	.word	0x0800f23b
 800f194:	0800f207 	.word	0x0800f207
 800f198:	0800f23b 	.word	0x0800f23b
 800f19c:	0800f23b 	.word	0x0800f23b
 800f1a0:	0800f23b 	.word	0x0800f23b
 800f1a4:	0800f23b 	.word	0x0800f23b
 800f1a8:	0800f23b 	.word	0x0800f23b
 800f1ac:	0800f23b 	.word	0x0800f23b
 800f1b0:	0800f23b 	.word	0x0800f23b
 800f1b4:	0800f23b 	.word	0x0800f23b
 800f1b8:	0800f23b 	.word	0x0800f23b
 800f1bc:	0800f23b 	.word	0x0800f23b
 800f1c0:	0800f23b 	.word	0x0800f23b
 800f1c4:	0800f23b 	.word	0x0800f23b
 800f1c8:	0800f23b 	.word	0x0800f23b
 800f1cc:	0800f23b 	.word	0x0800f23b
 800f1d0:	0800f23b 	.word	0x0800f23b
 800f1d4:	0800f22d 	.word	0x0800f22d
 800f1d8:	2b40      	cmp	r3, #64	; 0x40
 800f1da:	d02a      	beq.n	800f232 <UART_SetConfig+0x8aa>
 800f1dc:	e02d      	b.n	800f23a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f1de:	f7fc fd4f 	bl	800bc80 <HAL_RCCEx_GetD3PCLK1Freq>
 800f1e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f1e4:	e02f      	b.n	800f246 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f1e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	f7fc fd5e 	bl	800bcac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1f4:	e027      	b.n	800f246 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f1f6:	f107 0318 	add.w	r3, r7, #24
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	f7fc feaa 	bl	800bf54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f200:	69fb      	ldr	r3, [r7, #28]
 800f202:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f204:	e01f      	b.n	800f246 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f206:	4b21      	ldr	r3, [pc, #132]	; (800f28c <UART_SetConfig+0x904>)
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	f003 0320 	and.w	r3, r3, #32
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d009      	beq.n	800f226 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f212:	4b1e      	ldr	r3, [pc, #120]	; (800f28c <UART_SetConfig+0x904>)
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	08db      	lsrs	r3, r3, #3
 800f218:	f003 0303 	and.w	r3, r3, #3
 800f21c:	4a1d      	ldr	r2, [pc, #116]	; (800f294 <UART_SetConfig+0x90c>)
 800f21e:	fa22 f303 	lsr.w	r3, r2, r3
 800f222:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f224:	e00f      	b.n	800f246 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f226:	4b1b      	ldr	r3, [pc, #108]	; (800f294 <UART_SetConfig+0x90c>)
 800f228:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f22a:	e00c      	b.n	800f246 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f22c:	4b1a      	ldr	r3, [pc, #104]	; (800f298 <UART_SetConfig+0x910>)
 800f22e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f230:	e009      	b.n	800f246 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f236:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f238:	e005      	b.n	800f246 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f23a:	2300      	movs	r3, #0
 800f23c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f23e:	2301      	movs	r3, #1
 800f240:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f244:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f248:	2b00      	cmp	r3, #0
 800f24a:	f000 81ee 	beq.w	800f62a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f24e:	697b      	ldr	r3, [r7, #20]
 800f250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f252:	4a12      	ldr	r2, [pc, #72]	; (800f29c <UART_SetConfig+0x914>)
 800f254:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f258:	461a      	mov	r2, r3
 800f25a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f25c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f260:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f262:	697b      	ldr	r3, [r7, #20]
 800f264:	685a      	ldr	r2, [r3, #4]
 800f266:	4613      	mov	r3, r2
 800f268:	005b      	lsls	r3, r3, #1
 800f26a:	4413      	add	r3, r2
 800f26c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f26e:	429a      	cmp	r2, r3
 800f270:	d305      	bcc.n	800f27e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f272:	697b      	ldr	r3, [r7, #20]
 800f274:	685b      	ldr	r3, [r3, #4]
 800f276:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f27a:	429a      	cmp	r2, r3
 800f27c:	d910      	bls.n	800f2a0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800f27e:	2301      	movs	r3, #1
 800f280:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f284:	e1d1      	b.n	800f62a <UART_SetConfig+0xca2>
 800f286:	bf00      	nop
 800f288:	40011c00 	.word	0x40011c00
 800f28c:	58024400 	.word	0x58024400
 800f290:	58000c00 	.word	0x58000c00
 800f294:	03d09000 	.word	0x03d09000
 800f298:	003d0900 	.word	0x003d0900
 800f29c:	0801082c 	.word	0x0801082c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f2a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	60bb      	str	r3, [r7, #8]
 800f2a6:	60fa      	str	r2, [r7, #12]
 800f2a8:	697b      	ldr	r3, [r7, #20]
 800f2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2ac:	4ac0      	ldr	r2, [pc, #768]	; (800f5b0 <UART_SetConfig+0xc28>)
 800f2ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f2b2:	b29b      	uxth	r3, r3
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	603b      	str	r3, [r7, #0]
 800f2b8:	607a      	str	r2, [r7, #4]
 800f2ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f2be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f2c2:	f7f1 f82d 	bl	8000320 <__aeabi_uldivmod>
 800f2c6:	4602      	mov	r2, r0
 800f2c8:	460b      	mov	r3, r1
 800f2ca:	4610      	mov	r0, r2
 800f2cc:	4619      	mov	r1, r3
 800f2ce:	f04f 0200 	mov.w	r2, #0
 800f2d2:	f04f 0300 	mov.w	r3, #0
 800f2d6:	020b      	lsls	r3, r1, #8
 800f2d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f2dc:	0202      	lsls	r2, r0, #8
 800f2de:	6979      	ldr	r1, [r7, #20]
 800f2e0:	6849      	ldr	r1, [r1, #4]
 800f2e2:	0849      	lsrs	r1, r1, #1
 800f2e4:	2000      	movs	r0, #0
 800f2e6:	460c      	mov	r4, r1
 800f2e8:	4605      	mov	r5, r0
 800f2ea:	eb12 0804 	adds.w	r8, r2, r4
 800f2ee:	eb43 0905 	adc.w	r9, r3, r5
 800f2f2:	697b      	ldr	r3, [r7, #20]
 800f2f4:	685b      	ldr	r3, [r3, #4]
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	469a      	mov	sl, r3
 800f2fa:	4693      	mov	fp, r2
 800f2fc:	4652      	mov	r2, sl
 800f2fe:	465b      	mov	r3, fp
 800f300:	4640      	mov	r0, r8
 800f302:	4649      	mov	r1, r9
 800f304:	f7f1 f80c 	bl	8000320 <__aeabi_uldivmod>
 800f308:	4602      	mov	r2, r0
 800f30a:	460b      	mov	r3, r1
 800f30c:	4613      	mov	r3, r2
 800f30e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f312:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f316:	d308      	bcc.n	800f32a <UART_SetConfig+0x9a2>
 800f318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f31a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f31e:	d204      	bcs.n	800f32a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800f320:	697b      	ldr	r3, [r7, #20]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f326:	60da      	str	r2, [r3, #12]
 800f328:	e17f      	b.n	800f62a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800f32a:	2301      	movs	r3, #1
 800f32c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f330:	e17b      	b.n	800f62a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f332:	697b      	ldr	r3, [r7, #20]
 800f334:	69db      	ldr	r3, [r3, #28]
 800f336:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f33a:	f040 80bd 	bne.w	800f4b8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800f33e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f342:	2b20      	cmp	r3, #32
 800f344:	dc48      	bgt.n	800f3d8 <UART_SetConfig+0xa50>
 800f346:	2b00      	cmp	r3, #0
 800f348:	db7b      	blt.n	800f442 <UART_SetConfig+0xaba>
 800f34a:	2b20      	cmp	r3, #32
 800f34c:	d879      	bhi.n	800f442 <UART_SetConfig+0xaba>
 800f34e:	a201      	add	r2, pc, #4	; (adr r2, 800f354 <UART_SetConfig+0x9cc>)
 800f350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f354:	0800f3df 	.word	0x0800f3df
 800f358:	0800f3e7 	.word	0x0800f3e7
 800f35c:	0800f443 	.word	0x0800f443
 800f360:	0800f443 	.word	0x0800f443
 800f364:	0800f3ef 	.word	0x0800f3ef
 800f368:	0800f443 	.word	0x0800f443
 800f36c:	0800f443 	.word	0x0800f443
 800f370:	0800f443 	.word	0x0800f443
 800f374:	0800f3ff 	.word	0x0800f3ff
 800f378:	0800f443 	.word	0x0800f443
 800f37c:	0800f443 	.word	0x0800f443
 800f380:	0800f443 	.word	0x0800f443
 800f384:	0800f443 	.word	0x0800f443
 800f388:	0800f443 	.word	0x0800f443
 800f38c:	0800f443 	.word	0x0800f443
 800f390:	0800f443 	.word	0x0800f443
 800f394:	0800f40f 	.word	0x0800f40f
 800f398:	0800f443 	.word	0x0800f443
 800f39c:	0800f443 	.word	0x0800f443
 800f3a0:	0800f443 	.word	0x0800f443
 800f3a4:	0800f443 	.word	0x0800f443
 800f3a8:	0800f443 	.word	0x0800f443
 800f3ac:	0800f443 	.word	0x0800f443
 800f3b0:	0800f443 	.word	0x0800f443
 800f3b4:	0800f443 	.word	0x0800f443
 800f3b8:	0800f443 	.word	0x0800f443
 800f3bc:	0800f443 	.word	0x0800f443
 800f3c0:	0800f443 	.word	0x0800f443
 800f3c4:	0800f443 	.word	0x0800f443
 800f3c8:	0800f443 	.word	0x0800f443
 800f3cc:	0800f443 	.word	0x0800f443
 800f3d0:	0800f443 	.word	0x0800f443
 800f3d4:	0800f435 	.word	0x0800f435
 800f3d8:	2b40      	cmp	r3, #64	; 0x40
 800f3da:	d02e      	beq.n	800f43a <UART_SetConfig+0xab2>
 800f3dc:	e031      	b.n	800f442 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f3de:	f7fb fa83 	bl	800a8e8 <HAL_RCC_GetPCLK1Freq>
 800f3e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f3e4:	e033      	b.n	800f44e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f3e6:	f7fb fa95 	bl	800a914 <HAL_RCC_GetPCLK2Freq>
 800f3ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f3ec:	e02f      	b.n	800f44e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f3ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	f7fc fc5a 	bl	800bcac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3fc:	e027      	b.n	800f44e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f3fe:	f107 0318 	add.w	r3, r7, #24
 800f402:	4618      	mov	r0, r3
 800f404:	f7fc fda6 	bl	800bf54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f408:	69fb      	ldr	r3, [r7, #28]
 800f40a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f40c:	e01f      	b.n	800f44e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f40e:	4b69      	ldr	r3, [pc, #420]	; (800f5b4 <UART_SetConfig+0xc2c>)
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	f003 0320 	and.w	r3, r3, #32
 800f416:	2b00      	cmp	r3, #0
 800f418:	d009      	beq.n	800f42e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f41a:	4b66      	ldr	r3, [pc, #408]	; (800f5b4 <UART_SetConfig+0xc2c>)
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	08db      	lsrs	r3, r3, #3
 800f420:	f003 0303 	and.w	r3, r3, #3
 800f424:	4a64      	ldr	r2, [pc, #400]	; (800f5b8 <UART_SetConfig+0xc30>)
 800f426:	fa22 f303 	lsr.w	r3, r2, r3
 800f42a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f42c:	e00f      	b.n	800f44e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800f42e:	4b62      	ldr	r3, [pc, #392]	; (800f5b8 <UART_SetConfig+0xc30>)
 800f430:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f432:	e00c      	b.n	800f44e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f434:	4b61      	ldr	r3, [pc, #388]	; (800f5bc <UART_SetConfig+0xc34>)
 800f436:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f438:	e009      	b.n	800f44e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f43a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f43e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f440:	e005      	b.n	800f44e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800f442:	2300      	movs	r3, #0
 800f444:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f446:	2301      	movs	r3, #1
 800f448:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f44c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f44e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f450:	2b00      	cmp	r3, #0
 800f452:	f000 80ea 	beq.w	800f62a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f456:	697b      	ldr	r3, [r7, #20]
 800f458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f45a:	4a55      	ldr	r2, [pc, #340]	; (800f5b0 <UART_SetConfig+0xc28>)
 800f45c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f460:	461a      	mov	r2, r3
 800f462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f464:	fbb3 f3f2 	udiv	r3, r3, r2
 800f468:	005a      	lsls	r2, r3, #1
 800f46a:	697b      	ldr	r3, [r7, #20]
 800f46c:	685b      	ldr	r3, [r3, #4]
 800f46e:	085b      	lsrs	r3, r3, #1
 800f470:	441a      	add	r2, r3
 800f472:	697b      	ldr	r3, [r7, #20]
 800f474:	685b      	ldr	r3, [r3, #4]
 800f476:	fbb2 f3f3 	udiv	r3, r2, r3
 800f47a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f47e:	2b0f      	cmp	r3, #15
 800f480:	d916      	bls.n	800f4b0 <UART_SetConfig+0xb28>
 800f482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f488:	d212      	bcs.n	800f4b0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f48c:	b29b      	uxth	r3, r3
 800f48e:	f023 030f 	bic.w	r3, r3, #15
 800f492:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f496:	085b      	lsrs	r3, r3, #1
 800f498:	b29b      	uxth	r3, r3
 800f49a:	f003 0307 	and.w	r3, r3, #7
 800f49e:	b29a      	uxth	r2, r3
 800f4a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f4a2:	4313      	orrs	r3, r2
 800f4a4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f4a6:	697b      	ldr	r3, [r7, #20]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f4ac:	60da      	str	r2, [r3, #12]
 800f4ae:	e0bc      	b.n	800f62a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f4b0:	2301      	movs	r3, #1
 800f4b2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f4b6:	e0b8      	b.n	800f62a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f4b8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f4bc:	2b20      	cmp	r3, #32
 800f4be:	dc4b      	bgt.n	800f558 <UART_SetConfig+0xbd0>
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	f2c0 8087 	blt.w	800f5d4 <UART_SetConfig+0xc4c>
 800f4c6:	2b20      	cmp	r3, #32
 800f4c8:	f200 8084 	bhi.w	800f5d4 <UART_SetConfig+0xc4c>
 800f4cc:	a201      	add	r2, pc, #4	; (adr r2, 800f4d4 <UART_SetConfig+0xb4c>)
 800f4ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4d2:	bf00      	nop
 800f4d4:	0800f55f 	.word	0x0800f55f
 800f4d8:	0800f567 	.word	0x0800f567
 800f4dc:	0800f5d5 	.word	0x0800f5d5
 800f4e0:	0800f5d5 	.word	0x0800f5d5
 800f4e4:	0800f56f 	.word	0x0800f56f
 800f4e8:	0800f5d5 	.word	0x0800f5d5
 800f4ec:	0800f5d5 	.word	0x0800f5d5
 800f4f0:	0800f5d5 	.word	0x0800f5d5
 800f4f4:	0800f57f 	.word	0x0800f57f
 800f4f8:	0800f5d5 	.word	0x0800f5d5
 800f4fc:	0800f5d5 	.word	0x0800f5d5
 800f500:	0800f5d5 	.word	0x0800f5d5
 800f504:	0800f5d5 	.word	0x0800f5d5
 800f508:	0800f5d5 	.word	0x0800f5d5
 800f50c:	0800f5d5 	.word	0x0800f5d5
 800f510:	0800f5d5 	.word	0x0800f5d5
 800f514:	0800f58f 	.word	0x0800f58f
 800f518:	0800f5d5 	.word	0x0800f5d5
 800f51c:	0800f5d5 	.word	0x0800f5d5
 800f520:	0800f5d5 	.word	0x0800f5d5
 800f524:	0800f5d5 	.word	0x0800f5d5
 800f528:	0800f5d5 	.word	0x0800f5d5
 800f52c:	0800f5d5 	.word	0x0800f5d5
 800f530:	0800f5d5 	.word	0x0800f5d5
 800f534:	0800f5d5 	.word	0x0800f5d5
 800f538:	0800f5d5 	.word	0x0800f5d5
 800f53c:	0800f5d5 	.word	0x0800f5d5
 800f540:	0800f5d5 	.word	0x0800f5d5
 800f544:	0800f5d5 	.word	0x0800f5d5
 800f548:	0800f5d5 	.word	0x0800f5d5
 800f54c:	0800f5d5 	.word	0x0800f5d5
 800f550:	0800f5d5 	.word	0x0800f5d5
 800f554:	0800f5c7 	.word	0x0800f5c7
 800f558:	2b40      	cmp	r3, #64	; 0x40
 800f55a:	d037      	beq.n	800f5cc <UART_SetConfig+0xc44>
 800f55c:	e03a      	b.n	800f5d4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f55e:	f7fb f9c3 	bl	800a8e8 <HAL_RCC_GetPCLK1Freq>
 800f562:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f564:	e03c      	b.n	800f5e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f566:	f7fb f9d5 	bl	800a914 <HAL_RCC_GetPCLK2Freq>
 800f56a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f56c:	e038      	b.n	800f5e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f56e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f572:	4618      	mov	r0, r3
 800f574:	f7fc fb9a 	bl	800bcac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f57a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f57c:	e030      	b.n	800f5e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f57e:	f107 0318 	add.w	r3, r7, #24
 800f582:	4618      	mov	r0, r3
 800f584:	f7fc fce6 	bl	800bf54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f588:	69fb      	ldr	r3, [r7, #28]
 800f58a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f58c:	e028      	b.n	800f5e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f58e:	4b09      	ldr	r3, [pc, #36]	; (800f5b4 <UART_SetConfig+0xc2c>)
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	f003 0320 	and.w	r3, r3, #32
 800f596:	2b00      	cmp	r3, #0
 800f598:	d012      	beq.n	800f5c0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f59a:	4b06      	ldr	r3, [pc, #24]	; (800f5b4 <UART_SetConfig+0xc2c>)
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	08db      	lsrs	r3, r3, #3
 800f5a0:	f003 0303 	and.w	r3, r3, #3
 800f5a4:	4a04      	ldr	r2, [pc, #16]	; (800f5b8 <UART_SetConfig+0xc30>)
 800f5a6:	fa22 f303 	lsr.w	r3, r2, r3
 800f5aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f5ac:	e018      	b.n	800f5e0 <UART_SetConfig+0xc58>
 800f5ae:	bf00      	nop
 800f5b0:	0801082c 	.word	0x0801082c
 800f5b4:	58024400 	.word	0x58024400
 800f5b8:	03d09000 	.word	0x03d09000
 800f5bc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800f5c0:	4b24      	ldr	r3, [pc, #144]	; (800f654 <UART_SetConfig+0xccc>)
 800f5c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5c4:	e00c      	b.n	800f5e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f5c6:	4b24      	ldr	r3, [pc, #144]	; (800f658 <UART_SetConfig+0xcd0>)
 800f5c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5ca:	e009      	b.n	800f5e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f5cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f5d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5d2:	e005      	b.n	800f5e0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f5d8:	2301      	movs	r3, #1
 800f5da:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f5de:	bf00      	nop
    }

    if (pclk != 0U)
 800f5e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d021      	beq.n	800f62a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f5e6:	697b      	ldr	r3, [r7, #20]
 800f5e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5ea:	4a1c      	ldr	r2, [pc, #112]	; (800f65c <UART_SetConfig+0xcd4>)
 800f5ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f5f0:	461a      	mov	r2, r3
 800f5f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5f4:	fbb3 f2f2 	udiv	r2, r3, r2
 800f5f8:	697b      	ldr	r3, [r7, #20]
 800f5fa:	685b      	ldr	r3, [r3, #4]
 800f5fc:	085b      	lsrs	r3, r3, #1
 800f5fe:	441a      	add	r2, r3
 800f600:	697b      	ldr	r3, [r7, #20]
 800f602:	685b      	ldr	r3, [r3, #4]
 800f604:	fbb2 f3f3 	udiv	r3, r2, r3
 800f608:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f60a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f60c:	2b0f      	cmp	r3, #15
 800f60e:	d909      	bls.n	800f624 <UART_SetConfig+0xc9c>
 800f610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f616:	d205      	bcs.n	800f624 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f61a:	b29a      	uxth	r2, r3
 800f61c:	697b      	ldr	r3, [r7, #20]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	60da      	str	r2, [r3, #12]
 800f622:	e002      	b.n	800f62a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f624:	2301      	movs	r3, #1
 800f626:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f62a:	697b      	ldr	r3, [r7, #20]
 800f62c:	2201      	movs	r2, #1
 800f62e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f632:	697b      	ldr	r3, [r7, #20]
 800f634:	2201      	movs	r2, #1
 800f636:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f63a:	697b      	ldr	r3, [r7, #20]
 800f63c:	2200      	movs	r2, #0
 800f63e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800f640:	697b      	ldr	r3, [r7, #20]
 800f642:	2200      	movs	r2, #0
 800f644:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800f646:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f64a:	4618      	mov	r0, r3
 800f64c:	3748      	adds	r7, #72	; 0x48
 800f64e:	46bd      	mov	sp, r7
 800f650:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f654:	03d09000 	.word	0x03d09000
 800f658:	003d0900 	.word	0x003d0900
 800f65c:	0801082c 	.word	0x0801082c

0800f660 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f660:	b480      	push	{r7}
 800f662:	b083      	sub	sp, #12
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f66c:	f003 0301 	and.w	r3, r3, #1
 800f670:	2b00      	cmp	r3, #0
 800f672:	d00a      	beq.n	800f68a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	685b      	ldr	r3, [r3, #4]
 800f67a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	430a      	orrs	r2, r1
 800f688:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f68e:	f003 0302 	and.w	r3, r3, #2
 800f692:	2b00      	cmp	r3, #0
 800f694:	d00a      	beq.n	800f6ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	685b      	ldr	r3, [r3, #4]
 800f69c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	430a      	orrs	r2, r1
 800f6aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6b0:	f003 0304 	and.w	r3, r3, #4
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d00a      	beq.n	800f6ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	685b      	ldr	r3, [r3, #4]
 800f6be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	430a      	orrs	r2, r1
 800f6cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6d2:	f003 0308 	and.w	r3, r3, #8
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d00a      	beq.n	800f6f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	685b      	ldr	r3, [r3, #4]
 800f6e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	430a      	orrs	r2, r1
 800f6ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6f4:	f003 0310 	and.w	r3, r3, #16
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d00a      	beq.n	800f712 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	689b      	ldr	r3, [r3, #8]
 800f702:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	430a      	orrs	r2, r1
 800f710:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f716:	f003 0320 	and.w	r3, r3, #32
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d00a      	beq.n	800f734 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	689b      	ldr	r3, [r3, #8]
 800f724:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	430a      	orrs	r2, r1
 800f732:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d01a      	beq.n	800f776 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	685b      	ldr	r3, [r3, #4]
 800f746:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	430a      	orrs	r2, r1
 800f754:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f75a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f75e:	d10a      	bne.n	800f776 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	685b      	ldr	r3, [r3, #4]
 800f766:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	430a      	orrs	r2, r1
 800f774:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f77a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d00a      	beq.n	800f798 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	685b      	ldr	r3, [r3, #4]
 800f788:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	430a      	orrs	r2, r1
 800f796:	605a      	str	r2, [r3, #4]
  }
}
 800f798:	bf00      	nop
 800f79a:	370c      	adds	r7, #12
 800f79c:	46bd      	mov	sp, r7
 800f79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a2:	4770      	bx	lr

0800f7a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b098      	sub	sp, #96	; 0x60
 800f7a8:	af02      	add	r7, sp, #8
 800f7aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	2200      	movs	r2, #0
 800f7b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f7b4:	f7f6 fd24 	bl	8006200 <HAL_GetTick>
 800f7b8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	f003 0308 	and.w	r3, r3, #8
 800f7c4:	2b08      	cmp	r3, #8
 800f7c6:	d12f      	bne.n	800f828 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f7c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f7cc:	9300      	str	r3, [sp, #0]
 800f7ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f7d6:	6878      	ldr	r0, [r7, #4]
 800f7d8:	f000 f88e 	bl	800f8f8 <UART_WaitOnFlagUntilTimeout>
 800f7dc:	4603      	mov	r3, r0
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d022      	beq.n	800f828 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7ea:	e853 3f00 	ldrex	r3, [r3]
 800f7ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f7f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f7f6:	653b      	str	r3, [r7, #80]	; 0x50
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	461a      	mov	r2, r3
 800f7fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f800:	647b      	str	r3, [r7, #68]	; 0x44
 800f802:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f804:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f806:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f808:	e841 2300 	strex	r3, r2, [r1]
 800f80c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f80e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f810:	2b00      	cmp	r3, #0
 800f812:	d1e6      	bne.n	800f7e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	2220      	movs	r2, #32
 800f818:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	2200      	movs	r2, #0
 800f820:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f824:	2303      	movs	r3, #3
 800f826:	e063      	b.n	800f8f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	f003 0304 	and.w	r3, r3, #4
 800f832:	2b04      	cmp	r3, #4
 800f834:	d149      	bne.n	800f8ca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f836:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f83a:	9300      	str	r3, [sp, #0]
 800f83c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f83e:	2200      	movs	r2, #0
 800f840:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f844:	6878      	ldr	r0, [r7, #4]
 800f846:	f000 f857 	bl	800f8f8 <UART_WaitOnFlagUntilTimeout>
 800f84a:	4603      	mov	r3, r0
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d03c      	beq.n	800f8ca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f858:	e853 3f00 	ldrex	r3, [r3]
 800f85c:	623b      	str	r3, [r7, #32]
   return(result);
 800f85e:	6a3b      	ldr	r3, [r7, #32]
 800f860:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f864:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	461a      	mov	r2, r3
 800f86c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f86e:	633b      	str	r3, [r7, #48]	; 0x30
 800f870:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f872:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f876:	e841 2300 	strex	r3, r2, [r1]
 800f87a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d1e6      	bne.n	800f850 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	3308      	adds	r3, #8
 800f888:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f88a:	693b      	ldr	r3, [r7, #16]
 800f88c:	e853 3f00 	ldrex	r3, [r3]
 800f890:	60fb      	str	r3, [r7, #12]
   return(result);
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	f023 0301 	bic.w	r3, r3, #1
 800f898:	64bb      	str	r3, [r7, #72]	; 0x48
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	3308      	adds	r3, #8
 800f8a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f8a2:	61fa      	str	r2, [r7, #28]
 800f8a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8a6:	69b9      	ldr	r1, [r7, #24]
 800f8a8:	69fa      	ldr	r2, [r7, #28]
 800f8aa:	e841 2300 	strex	r3, r2, [r1]
 800f8ae:	617b      	str	r3, [r7, #20]
   return(result);
 800f8b0:	697b      	ldr	r3, [r7, #20]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d1e5      	bne.n	800f882 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	2220      	movs	r2, #32
 800f8ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	2200      	movs	r2, #0
 800f8c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f8c6:	2303      	movs	r3, #3
 800f8c8:	e012      	b.n	800f8f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	2220      	movs	r2, #32
 800f8ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	2220      	movs	r2, #32
 800f8d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	2200      	movs	r2, #0
 800f8de:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f8ee:	2300      	movs	r3, #0
}
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	3758      	adds	r7, #88	; 0x58
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}

0800f8f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b084      	sub	sp, #16
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	60f8      	str	r0, [r7, #12]
 800f900:	60b9      	str	r1, [r7, #8]
 800f902:	603b      	str	r3, [r7, #0]
 800f904:	4613      	mov	r3, r2
 800f906:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f908:	e049      	b.n	800f99e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f90a:	69bb      	ldr	r3, [r7, #24]
 800f90c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f910:	d045      	beq.n	800f99e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f912:	f7f6 fc75 	bl	8006200 <HAL_GetTick>
 800f916:	4602      	mov	r2, r0
 800f918:	683b      	ldr	r3, [r7, #0]
 800f91a:	1ad3      	subs	r3, r2, r3
 800f91c:	69ba      	ldr	r2, [r7, #24]
 800f91e:	429a      	cmp	r2, r3
 800f920:	d302      	bcc.n	800f928 <UART_WaitOnFlagUntilTimeout+0x30>
 800f922:	69bb      	ldr	r3, [r7, #24]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d101      	bne.n	800f92c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f928:	2303      	movs	r3, #3
 800f92a:	e048      	b.n	800f9be <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	f003 0304 	and.w	r3, r3, #4
 800f936:	2b00      	cmp	r3, #0
 800f938:	d031      	beq.n	800f99e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	69db      	ldr	r3, [r3, #28]
 800f940:	f003 0308 	and.w	r3, r3, #8
 800f944:	2b08      	cmp	r3, #8
 800f946:	d110      	bne.n	800f96a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	2208      	movs	r2, #8
 800f94e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800f950:	68f8      	ldr	r0, [r7, #12]
 800f952:	f000 f921 	bl	800fb98 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	2208      	movs	r2, #8
 800f95a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	2200      	movs	r2, #0
 800f962:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800f966:	2301      	movs	r3, #1
 800f968:	e029      	b.n	800f9be <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	69db      	ldr	r3, [r3, #28]
 800f970:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f974:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f978:	d111      	bne.n	800f99e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f982:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f984:	68f8      	ldr	r0, [r7, #12]
 800f986:	f000 f907 	bl	800fb98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	2220      	movs	r2, #32
 800f98e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	2200      	movs	r2, #0
 800f996:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f99a:	2303      	movs	r3, #3
 800f99c:	e00f      	b.n	800f9be <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	69da      	ldr	r2, [r3, #28]
 800f9a4:	68bb      	ldr	r3, [r7, #8]
 800f9a6:	4013      	ands	r3, r2
 800f9a8:	68ba      	ldr	r2, [r7, #8]
 800f9aa:	429a      	cmp	r2, r3
 800f9ac:	bf0c      	ite	eq
 800f9ae:	2301      	moveq	r3, #1
 800f9b0:	2300      	movne	r3, #0
 800f9b2:	b2db      	uxtb	r3, r3
 800f9b4:	461a      	mov	r2, r3
 800f9b6:	79fb      	ldrb	r3, [r7, #7]
 800f9b8:	429a      	cmp	r2, r3
 800f9ba:	d0a6      	beq.n	800f90a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f9bc:	2300      	movs	r3, #0
}
 800f9be:	4618      	mov	r0, r3
 800f9c0:	3710      	adds	r7, #16
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	bd80      	pop	{r7, pc}
	...

0800f9c8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b096      	sub	sp, #88	; 0x58
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	60f8      	str	r0, [r7, #12]
 800f9d0:	60b9      	str	r1, [r7, #8]
 800f9d2:	4613      	mov	r3, r2
 800f9d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	68ba      	ldr	r2, [r7, #8]
 800f9da:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	88fa      	ldrh	r2, [r7, #6]
 800f9e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	2222      	movs	r2, #34	; 0x22
 800f9f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d02d      	beq.n	800fa5a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fa04:	4a40      	ldr	r2, [pc, #256]	; (800fb08 <UART_Start_Receive_DMA+0x140>)
 800fa06:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fa0e:	4a3f      	ldr	r2, [pc, #252]	; (800fb0c <UART_Start_Receive_DMA+0x144>)
 800fa10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fa18:	4a3d      	ldr	r2, [pc, #244]	; (800fb10 <UART_Start_Receive_DMA+0x148>)
 800fa1a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fa22:	2200      	movs	r2, #0
 800fa24:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	3324      	adds	r3, #36	; 0x24
 800fa32:	4619      	mov	r1, r3
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa38:	461a      	mov	r2, r3
 800fa3a:	88fb      	ldrh	r3, [r7, #6]
 800fa3c:	f7f7 fa3c 	bl	8006eb8 <HAL_DMA_Start_IT>
 800fa40:	4603      	mov	r3, r0
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d009      	beq.n	800fa5a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	2210      	movs	r2, #16
 800fa4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	2220      	movs	r2, #32
 800fa52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800fa56:	2301      	movs	r3, #1
 800fa58:	e051      	b.n	800fafe <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	691b      	ldr	r3, [r3, #16]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d018      	beq.n	800fa94 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa6a:	e853 3f00 	ldrex	r3, [r3]
 800fa6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fa70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fa76:	657b      	str	r3, [r7, #84]	; 0x54
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	461a      	mov	r2, r3
 800fa7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa80:	64bb      	str	r3, [r7, #72]	; 0x48
 800fa82:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa84:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fa86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fa88:	e841 2300 	strex	r3, r2, [r1]
 800fa8c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800fa8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d1e6      	bne.n	800fa62 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	3308      	adds	r3, #8
 800fa9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa9e:	e853 3f00 	ldrex	r3, [r3]
 800faa2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800faa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faa6:	f043 0301 	orr.w	r3, r3, #1
 800faaa:	653b      	str	r3, [r7, #80]	; 0x50
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	3308      	adds	r3, #8
 800fab2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fab4:	637a      	str	r2, [r7, #52]	; 0x34
 800fab6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fab8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800faba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fabc:	e841 2300 	strex	r3, r2, [r1]
 800fac0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800fac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d1e5      	bne.n	800fa94 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	3308      	adds	r3, #8
 800face:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fad0:	697b      	ldr	r3, [r7, #20]
 800fad2:	e853 3f00 	ldrex	r3, [r3]
 800fad6:	613b      	str	r3, [r7, #16]
   return(result);
 800fad8:	693b      	ldr	r3, [r7, #16]
 800fada:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fade:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	3308      	adds	r3, #8
 800fae6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fae8:	623a      	str	r2, [r7, #32]
 800faea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faec:	69f9      	ldr	r1, [r7, #28]
 800faee:	6a3a      	ldr	r2, [r7, #32]
 800faf0:	e841 2300 	strex	r3, r2, [r1]
 800faf4:	61bb      	str	r3, [r7, #24]
   return(result);
 800faf6:	69bb      	ldr	r3, [r7, #24]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d1e5      	bne.n	800fac8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800fafc:	2300      	movs	r3, #0
}
 800fafe:	4618      	mov	r0, r3
 800fb00:	3758      	adds	r7, #88	; 0x58
 800fb02:	46bd      	mov	sp, r7
 800fb04:	bd80      	pop	{r7, pc}
 800fb06:	bf00      	nop
 800fb08:	0800fd17 	.word	0x0800fd17
 800fb0c:	0800fe3f 	.word	0x0800fe3f
 800fb10:	0800fe7d 	.word	0x0800fe7d

0800fb14 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800fb14:	b480      	push	{r7}
 800fb16:	b08f      	sub	sp, #60	; 0x3c
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb22:	6a3b      	ldr	r3, [r7, #32]
 800fb24:	e853 3f00 	ldrex	r3, [r3]
 800fb28:	61fb      	str	r3, [r7, #28]
   return(result);
 800fb2a:	69fb      	ldr	r3, [r7, #28]
 800fb2c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800fb30:	637b      	str	r3, [r7, #52]	; 0x34
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	461a      	mov	r2, r3
 800fb38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fb3c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fb40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb42:	e841 2300 	strex	r3, r2, [r1]
 800fb46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d1e6      	bne.n	800fb1c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	3308      	adds	r3, #8
 800fb54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	e853 3f00 	ldrex	r3, [r3]
 800fb5c:	60bb      	str	r3, [r7, #8]
   return(result);
 800fb5e:	68bb      	ldr	r3, [r7, #8]
 800fb60:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800fb64:	633b      	str	r3, [r7, #48]	; 0x30
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	3308      	adds	r3, #8
 800fb6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb6e:	61ba      	str	r2, [r7, #24]
 800fb70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb72:	6979      	ldr	r1, [r7, #20]
 800fb74:	69ba      	ldr	r2, [r7, #24]
 800fb76:	e841 2300 	strex	r3, r2, [r1]
 800fb7a:	613b      	str	r3, [r7, #16]
   return(result);
 800fb7c:	693b      	ldr	r3, [r7, #16]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d1e5      	bne.n	800fb4e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	2220      	movs	r2, #32
 800fb86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800fb8a:	bf00      	nop
 800fb8c:	373c      	adds	r7, #60	; 0x3c
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb94:	4770      	bx	lr
	...

0800fb98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fb98:	b480      	push	{r7}
 800fb9a:	b095      	sub	sp, #84	; 0x54
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fba8:	e853 3f00 	ldrex	r3, [r3]
 800fbac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fbb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	461a      	mov	r2, r3
 800fbbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbbe:	643b      	str	r3, [r7, #64]	; 0x40
 800fbc0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbc2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fbc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fbc6:	e841 2300 	strex	r3, r2, [r1]
 800fbca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fbcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d1e6      	bne.n	800fba0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	3308      	adds	r3, #8
 800fbd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbda:	6a3b      	ldr	r3, [r7, #32]
 800fbdc:	e853 3f00 	ldrex	r3, [r3]
 800fbe0:	61fb      	str	r3, [r7, #28]
   return(result);
 800fbe2:	69fa      	ldr	r2, [r7, #28]
 800fbe4:	4b1e      	ldr	r3, [pc, #120]	; (800fc60 <UART_EndRxTransfer+0xc8>)
 800fbe6:	4013      	ands	r3, r2
 800fbe8:	64bb      	str	r3, [r7, #72]	; 0x48
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	3308      	adds	r3, #8
 800fbf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fbf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fbf4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fbf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fbfa:	e841 2300 	strex	r3, r2, [r1]
 800fbfe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d1e5      	bne.n	800fbd2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc0a:	2b01      	cmp	r3, #1
 800fc0c:	d118      	bne.n	800fc40 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	e853 3f00 	ldrex	r3, [r3]
 800fc1a:	60bb      	str	r3, [r7, #8]
   return(result);
 800fc1c:	68bb      	ldr	r3, [r7, #8]
 800fc1e:	f023 0310 	bic.w	r3, r3, #16
 800fc22:	647b      	str	r3, [r7, #68]	; 0x44
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	461a      	mov	r2, r3
 800fc2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc2c:	61bb      	str	r3, [r7, #24]
 800fc2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc30:	6979      	ldr	r1, [r7, #20]
 800fc32:	69ba      	ldr	r2, [r7, #24]
 800fc34:	e841 2300 	strex	r3, r2, [r1]
 800fc38:	613b      	str	r3, [r7, #16]
   return(result);
 800fc3a:	693b      	ldr	r3, [r7, #16]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d1e6      	bne.n	800fc0e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	2220      	movs	r2, #32
 800fc44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	2200      	movs	r2, #0
 800fc4c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	2200      	movs	r2, #0
 800fc52:	675a      	str	r2, [r3, #116]	; 0x74
}
 800fc54:	bf00      	nop
 800fc56:	3754      	adds	r7, #84	; 0x54
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5e:	4770      	bx	lr
 800fc60:	effffffe 	.word	0xeffffffe

0800fc64 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b090      	sub	sp, #64	; 0x40
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc70:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	69db      	ldr	r3, [r3, #28]
 800fc76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fc7a:	d037      	beq.n	800fcec <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800fc7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc7e:	2200      	movs	r2, #0
 800fc80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fc84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	3308      	adds	r3, #8
 800fc8a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc8e:	e853 3f00 	ldrex	r3, [r3]
 800fc92:	623b      	str	r3, [r7, #32]
   return(result);
 800fc94:	6a3b      	ldr	r3, [r7, #32]
 800fc96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fc9a:	63bb      	str	r3, [r7, #56]	; 0x38
 800fc9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	3308      	adds	r3, #8
 800fca2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fca4:	633a      	str	r2, [r7, #48]	; 0x30
 800fca6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fca8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fcaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fcac:	e841 2300 	strex	r3, r2, [r1]
 800fcb0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fcb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d1e5      	bne.n	800fc84 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fcb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcbe:	693b      	ldr	r3, [r7, #16]
 800fcc0:	e853 3f00 	ldrex	r3, [r3]
 800fcc4:	60fb      	str	r3, [r7, #12]
   return(result);
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fccc:	637b      	str	r3, [r7, #52]	; 0x34
 800fcce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	461a      	mov	r2, r3
 800fcd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcd6:	61fb      	str	r3, [r7, #28]
 800fcd8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcda:	69b9      	ldr	r1, [r7, #24]
 800fcdc:	69fa      	ldr	r2, [r7, #28]
 800fcde:	e841 2300 	strex	r3, r2, [r1]
 800fce2:	617b      	str	r3, [r7, #20]
   return(result);
 800fce4:	697b      	ldr	r3, [r7, #20]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d1e6      	bne.n	800fcb8 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fcea:	e002      	b.n	800fcf2 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800fcec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fcee:	f7f4 fa0d 	bl	800410c <HAL_UART_TxCpltCallback>
}
 800fcf2:	bf00      	nop
 800fcf4:	3740      	adds	r7, #64	; 0x40
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	bd80      	pop	{r7, pc}

0800fcfa <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fcfa:	b580      	push	{r7, lr}
 800fcfc:	b084      	sub	sp, #16
 800fcfe:	af00      	add	r7, sp, #0
 800fd00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd06:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800fd08:	68f8      	ldr	r0, [r7, #12]
 800fd0a:	f7fe fe13 	bl	800e934 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fd0e:	bf00      	nop
 800fd10:	3710      	adds	r7, #16
 800fd12:	46bd      	mov	sp, r7
 800fd14:	bd80      	pop	{r7, pc}

0800fd16 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fd16:	b580      	push	{r7, lr}
 800fd18:	b09c      	sub	sp, #112	; 0x70
 800fd1a:	af00      	add	r7, sp, #0
 800fd1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd22:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	69db      	ldr	r3, [r3, #28]
 800fd28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fd2c:	d071      	beq.n	800fe12 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800fd2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd30:	2200      	movs	r2, #0
 800fd32:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fd36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd3e:	e853 3f00 	ldrex	r3, [r3]
 800fd42:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fd44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fd4a:	66bb      	str	r3, [r7, #104]	; 0x68
 800fd4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	461a      	mov	r2, r3
 800fd52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd54:	65bb      	str	r3, [r7, #88]	; 0x58
 800fd56:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fd5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fd5c:	e841 2300 	strex	r3, r2, [r1]
 800fd60:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fd62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d1e6      	bne.n	800fd36 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fd68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	3308      	adds	r3, #8
 800fd6e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd72:	e853 3f00 	ldrex	r3, [r3]
 800fd76:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fd78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd7a:	f023 0301 	bic.w	r3, r3, #1
 800fd7e:	667b      	str	r3, [r7, #100]	; 0x64
 800fd80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	3308      	adds	r3, #8
 800fd86:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fd88:	647a      	str	r2, [r7, #68]	; 0x44
 800fd8a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fd8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fd90:	e841 2300 	strex	r3, r2, [r1]
 800fd94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fd96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d1e5      	bne.n	800fd68 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fd9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	3308      	adds	r3, #8
 800fda2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fda6:	e853 3f00 	ldrex	r3, [r3]
 800fdaa:	623b      	str	r3, [r7, #32]
   return(result);
 800fdac:	6a3b      	ldr	r3, [r7, #32]
 800fdae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fdb2:	663b      	str	r3, [r7, #96]	; 0x60
 800fdb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	3308      	adds	r3, #8
 800fdba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fdbc:	633a      	str	r2, [r7, #48]	; 0x30
 800fdbe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdc0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fdc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fdc4:	e841 2300 	strex	r3, r2, [r1]
 800fdc8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fdca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d1e5      	bne.n	800fd9c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fdd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fdd2:	2220      	movs	r2, #32
 800fdd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fdd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fdda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fddc:	2b01      	cmp	r3, #1
 800fdde:	d118      	bne.n	800fe12 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fde0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fde6:	693b      	ldr	r3, [r7, #16]
 800fde8:	e853 3f00 	ldrex	r3, [r3]
 800fdec:	60fb      	str	r3, [r7, #12]
   return(result);
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	f023 0310 	bic.w	r3, r3, #16
 800fdf4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fdf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	461a      	mov	r2, r3
 800fdfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fdfe:	61fb      	str	r3, [r7, #28]
 800fe00:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe02:	69b9      	ldr	r1, [r7, #24]
 800fe04:	69fa      	ldr	r2, [r7, #28]
 800fe06:	e841 2300 	strex	r3, r2, [r1]
 800fe0a:	617b      	str	r3, [r7, #20]
   return(result);
 800fe0c:	697b      	ldr	r3, [r7, #20]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d1e6      	bne.n	800fde0 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fe12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe14:	2200      	movs	r2, #0
 800fe16:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fe18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe1c:	2b01      	cmp	r3, #1
 800fe1e:	d107      	bne.n	800fe30 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fe20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fe26:	4619      	mov	r1, r3
 800fe28:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fe2a:	f7fe fda1 	bl	800e970 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fe2e:	e002      	b.n	800fe36 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800fe30:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fe32:	f7fe fd89 	bl	800e948 <HAL_UART_RxCpltCallback>
}
 800fe36:	bf00      	nop
 800fe38:	3770      	adds	r7, #112	; 0x70
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	bd80      	pop	{r7, pc}

0800fe3e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fe3e:	b580      	push	{r7, lr}
 800fe40:	b084      	sub	sp, #16
 800fe42:	af00      	add	r7, sp, #0
 800fe44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe4a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	2201      	movs	r2, #1
 800fe50:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe56:	2b01      	cmp	r3, #1
 800fe58:	d109      	bne.n	800fe6e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fe60:	085b      	lsrs	r3, r3, #1
 800fe62:	b29b      	uxth	r3, r3
 800fe64:	4619      	mov	r1, r3
 800fe66:	68f8      	ldr	r0, [r7, #12]
 800fe68:	f7fe fd82 	bl	800e970 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fe6c:	e002      	b.n	800fe74 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800fe6e:	68f8      	ldr	r0, [r7, #12]
 800fe70:	f7fe fd74 	bl	800e95c <HAL_UART_RxHalfCpltCallback>
}
 800fe74:	bf00      	nop
 800fe76:	3710      	adds	r7, #16
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	bd80      	pop	{r7, pc}

0800fe7c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b086      	sub	sp, #24
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe88:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800fe8a:	697b      	ldr	r3, [r7, #20]
 800fe8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fe90:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800fe92:	697b      	ldr	r3, [r7, #20]
 800fe94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe98:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800fe9a:	697b      	ldr	r3, [r7, #20]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	689b      	ldr	r3, [r3, #8]
 800fea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fea4:	2b80      	cmp	r3, #128	; 0x80
 800fea6:	d109      	bne.n	800febc <UART_DMAError+0x40>
 800fea8:	693b      	ldr	r3, [r7, #16]
 800feaa:	2b21      	cmp	r3, #33	; 0x21
 800feac:	d106      	bne.n	800febc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800feae:	697b      	ldr	r3, [r7, #20]
 800feb0:	2200      	movs	r2, #0
 800feb2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800feb6:	6978      	ldr	r0, [r7, #20]
 800feb8:	f7ff fe2c 	bl	800fb14 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800febc:	697b      	ldr	r3, [r7, #20]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	689b      	ldr	r3, [r3, #8]
 800fec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fec6:	2b40      	cmp	r3, #64	; 0x40
 800fec8:	d109      	bne.n	800fede <UART_DMAError+0x62>
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	2b22      	cmp	r3, #34	; 0x22
 800fece:	d106      	bne.n	800fede <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800fed0:	697b      	ldr	r3, [r7, #20]
 800fed2:	2200      	movs	r2, #0
 800fed4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800fed8:	6978      	ldr	r0, [r7, #20]
 800feda:	f7ff fe5d 	bl	800fb98 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fede:	697b      	ldr	r3, [r7, #20]
 800fee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fee4:	f043 0210 	orr.w	r2, r3, #16
 800fee8:	697b      	ldr	r3, [r7, #20]
 800feea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800feee:	6978      	ldr	r0, [r7, #20]
 800fef0:	f7f4 f8f0 	bl	80040d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fef4:	bf00      	nop
 800fef6:	3718      	adds	r7, #24
 800fef8:	46bd      	mov	sp, r7
 800fefa:	bd80      	pop	{r7, pc}

0800fefc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b084      	sub	sp, #16
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	2200      	movs	r2, #0
 800ff16:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ff1a:	68f8      	ldr	r0, [r7, #12]
 800ff1c:	f7f4 f8da 	bl	80040d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ff20:	bf00      	nop
 800ff22:	3710      	adds	r7, #16
 800ff24:	46bd      	mov	sp, r7
 800ff26:	bd80      	pop	{r7, pc}

0800ff28 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b088      	sub	sp, #32
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	e853 3f00 	ldrex	r3, [r3]
 800ff3c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ff3e:	68bb      	ldr	r3, [r7, #8]
 800ff40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ff44:	61fb      	str	r3, [r7, #28]
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	461a      	mov	r2, r3
 800ff4c:	69fb      	ldr	r3, [r7, #28]
 800ff4e:	61bb      	str	r3, [r7, #24]
 800ff50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff52:	6979      	ldr	r1, [r7, #20]
 800ff54:	69ba      	ldr	r2, [r7, #24]
 800ff56:	e841 2300 	strex	r3, r2, [r1]
 800ff5a:	613b      	str	r3, [r7, #16]
   return(result);
 800ff5c:	693b      	ldr	r3, [r7, #16]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d1e6      	bne.n	800ff30 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	2220      	movs	r2, #32
 800ff66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	2200      	movs	r2, #0
 800ff6e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ff70:	6878      	ldr	r0, [r7, #4]
 800ff72:	f7f4 f8cb 	bl	800410c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ff76:	bf00      	nop
 800ff78:	3720      	adds	r7, #32
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd80      	pop	{r7, pc}

0800ff7e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ff7e:	b480      	push	{r7}
 800ff80:	b083      	sub	sp, #12
 800ff82:	af00      	add	r7, sp, #0
 800ff84:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ff86:	bf00      	nop
 800ff88:	370c      	adds	r7, #12
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff90:	4770      	bx	lr

0800ff92 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ff92:	b480      	push	{r7}
 800ff94:	b083      	sub	sp, #12
 800ff96:	af00      	add	r7, sp, #0
 800ff98:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ff9a:	bf00      	nop
 800ff9c:	370c      	adds	r7, #12
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa4:	4770      	bx	lr

0800ffa6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ffa6:	b480      	push	{r7}
 800ffa8:	b083      	sub	sp, #12
 800ffaa:	af00      	add	r7, sp, #0
 800ffac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ffae:	bf00      	nop
 800ffb0:	370c      	adds	r7, #12
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb8:	4770      	bx	lr

0800ffba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ffba:	b480      	push	{r7}
 800ffbc:	b085      	sub	sp, #20
 800ffbe:	af00      	add	r7, sp, #0
 800ffc0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ffc8:	2b01      	cmp	r3, #1
 800ffca:	d101      	bne.n	800ffd0 <HAL_UARTEx_DisableFifoMode+0x16>
 800ffcc:	2302      	movs	r3, #2
 800ffce:	e027      	b.n	8010020 <HAL_UARTEx_DisableFifoMode+0x66>
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	2201      	movs	r2, #1
 800ffd4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	2224      	movs	r2, #36	; 0x24
 800ffdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	681a      	ldr	r2, [r3, #0]
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	f022 0201 	bic.w	r2, r2, #1
 800fff6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fffe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	2200      	movs	r2, #0
 8010004:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	68fa      	ldr	r2, [r7, #12]
 801000c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	2220      	movs	r2, #32
 8010012:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	2200      	movs	r2, #0
 801001a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801001e:	2300      	movs	r3, #0
}
 8010020:	4618      	mov	r0, r3
 8010022:	3714      	adds	r7, #20
 8010024:	46bd      	mov	sp, r7
 8010026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002a:	4770      	bx	lr

0801002c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801002c:	b580      	push	{r7, lr}
 801002e:	b084      	sub	sp, #16
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
 8010034:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801003c:	2b01      	cmp	r3, #1
 801003e:	d101      	bne.n	8010044 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010040:	2302      	movs	r3, #2
 8010042:	e02d      	b.n	80100a0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	2201      	movs	r2, #1
 8010048:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	2224      	movs	r2, #36	; 0x24
 8010050:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	681a      	ldr	r2, [r3, #0]
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	f022 0201 	bic.w	r2, r2, #1
 801006a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	689b      	ldr	r3, [r3, #8]
 8010072:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	683a      	ldr	r2, [r7, #0]
 801007c:	430a      	orrs	r2, r1
 801007e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010080:	6878      	ldr	r0, [r7, #4]
 8010082:	f000 f84f 	bl	8010124 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	68fa      	ldr	r2, [r7, #12]
 801008c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	2220      	movs	r2, #32
 8010092:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	2200      	movs	r2, #0
 801009a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801009e:	2300      	movs	r3, #0
}
 80100a0:	4618      	mov	r0, r3
 80100a2:	3710      	adds	r7, #16
 80100a4:	46bd      	mov	sp, r7
 80100a6:	bd80      	pop	{r7, pc}

080100a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b084      	sub	sp, #16
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
 80100b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80100b8:	2b01      	cmp	r3, #1
 80100ba:	d101      	bne.n	80100c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80100bc:	2302      	movs	r3, #2
 80100be:	e02d      	b.n	801011c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	2201      	movs	r2, #1
 80100c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	2224      	movs	r2, #36	; 0x24
 80100cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	681a      	ldr	r2, [r3, #0]
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	f022 0201 	bic.w	r2, r2, #1
 80100e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	689b      	ldr	r3, [r3, #8]
 80100ee:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	683a      	ldr	r2, [r7, #0]
 80100f8:	430a      	orrs	r2, r1
 80100fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80100fc:	6878      	ldr	r0, [r7, #4]
 80100fe:	f000 f811 	bl	8010124 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	68fa      	ldr	r2, [r7, #12]
 8010108:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	2220      	movs	r2, #32
 801010e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	2200      	movs	r2, #0
 8010116:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801011a:	2300      	movs	r3, #0
}
 801011c:	4618      	mov	r0, r3
 801011e:	3710      	adds	r7, #16
 8010120:	46bd      	mov	sp, r7
 8010122:	bd80      	pop	{r7, pc}

08010124 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010124:	b480      	push	{r7}
 8010126:	b085      	sub	sp, #20
 8010128:	af00      	add	r7, sp, #0
 801012a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010130:	2b00      	cmp	r3, #0
 8010132:	d108      	bne.n	8010146 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	2201      	movs	r2, #1
 8010138:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	2201      	movs	r2, #1
 8010140:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010144:	e031      	b.n	80101aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010146:	2310      	movs	r3, #16
 8010148:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801014a:	2310      	movs	r3, #16
 801014c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	689b      	ldr	r3, [r3, #8]
 8010154:	0e5b      	lsrs	r3, r3, #25
 8010156:	b2db      	uxtb	r3, r3
 8010158:	f003 0307 	and.w	r3, r3, #7
 801015c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	689b      	ldr	r3, [r3, #8]
 8010164:	0f5b      	lsrs	r3, r3, #29
 8010166:	b2db      	uxtb	r3, r3
 8010168:	f003 0307 	and.w	r3, r3, #7
 801016c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801016e:	7bbb      	ldrb	r3, [r7, #14]
 8010170:	7b3a      	ldrb	r2, [r7, #12]
 8010172:	4911      	ldr	r1, [pc, #68]	; (80101b8 <UARTEx_SetNbDataToProcess+0x94>)
 8010174:	5c8a      	ldrb	r2, [r1, r2]
 8010176:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801017a:	7b3a      	ldrb	r2, [r7, #12]
 801017c:	490f      	ldr	r1, [pc, #60]	; (80101bc <UARTEx_SetNbDataToProcess+0x98>)
 801017e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010180:	fb93 f3f2 	sdiv	r3, r3, r2
 8010184:	b29a      	uxth	r2, r3
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801018c:	7bfb      	ldrb	r3, [r7, #15]
 801018e:	7b7a      	ldrb	r2, [r7, #13]
 8010190:	4909      	ldr	r1, [pc, #36]	; (80101b8 <UARTEx_SetNbDataToProcess+0x94>)
 8010192:	5c8a      	ldrb	r2, [r1, r2]
 8010194:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010198:	7b7a      	ldrb	r2, [r7, #13]
 801019a:	4908      	ldr	r1, [pc, #32]	; (80101bc <UARTEx_SetNbDataToProcess+0x98>)
 801019c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801019e:	fb93 f3f2 	sdiv	r3, r3, r2
 80101a2:	b29a      	uxth	r2, r3
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80101aa:	bf00      	nop
 80101ac:	3714      	adds	r7, #20
 80101ae:	46bd      	mov	sp, r7
 80101b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b4:	4770      	bx	lr
 80101b6:	bf00      	nop
 80101b8:	08010844 	.word	0x08010844
 80101bc:	0801084c 	.word	0x0801084c

080101c0 <realloc>:
 80101c0:	4b02      	ldr	r3, [pc, #8]	; (80101cc <realloc+0xc>)
 80101c2:	460a      	mov	r2, r1
 80101c4:	4601      	mov	r1, r0
 80101c6:	6818      	ldr	r0, [r3, #0]
 80101c8:	f000 b802 	b.w	80101d0 <_realloc_r>
 80101cc:	240000b0 	.word	0x240000b0

080101d0 <_realloc_r>:
 80101d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101d4:	4680      	mov	r8, r0
 80101d6:	4614      	mov	r4, r2
 80101d8:	460e      	mov	r6, r1
 80101da:	b921      	cbnz	r1, 80101e6 <_realloc_r+0x16>
 80101dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80101e0:	4611      	mov	r1, r2
 80101e2:	f000 b8d3 	b.w	801038c <_malloc_r>
 80101e6:	b92a      	cbnz	r2, 80101f4 <_realloc_r+0x24>
 80101e8:	f000 f864 	bl	80102b4 <_free_r>
 80101ec:	4625      	mov	r5, r4
 80101ee:	4628      	mov	r0, r5
 80101f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101f4:	f000 f956 	bl	80104a4 <_malloc_usable_size_r>
 80101f8:	4284      	cmp	r4, r0
 80101fa:	4607      	mov	r7, r0
 80101fc:	d802      	bhi.n	8010204 <_realloc_r+0x34>
 80101fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010202:	d812      	bhi.n	801022a <_realloc_r+0x5a>
 8010204:	4621      	mov	r1, r4
 8010206:	4640      	mov	r0, r8
 8010208:	f000 f8c0 	bl	801038c <_malloc_r>
 801020c:	4605      	mov	r5, r0
 801020e:	2800      	cmp	r0, #0
 8010210:	d0ed      	beq.n	80101ee <_realloc_r+0x1e>
 8010212:	42bc      	cmp	r4, r7
 8010214:	4622      	mov	r2, r4
 8010216:	4631      	mov	r1, r6
 8010218:	bf28      	it	cs
 801021a:	463a      	movcs	r2, r7
 801021c:	f000 f83c 	bl	8010298 <memcpy>
 8010220:	4631      	mov	r1, r6
 8010222:	4640      	mov	r0, r8
 8010224:	f000 f846 	bl	80102b4 <_free_r>
 8010228:	e7e1      	b.n	80101ee <_realloc_r+0x1e>
 801022a:	4635      	mov	r5, r6
 801022c:	e7df      	b.n	80101ee <_realloc_r+0x1e>

0801022e <memset>:
 801022e:	4402      	add	r2, r0
 8010230:	4603      	mov	r3, r0
 8010232:	4293      	cmp	r3, r2
 8010234:	d100      	bne.n	8010238 <memset+0xa>
 8010236:	4770      	bx	lr
 8010238:	f803 1b01 	strb.w	r1, [r3], #1
 801023c:	e7f9      	b.n	8010232 <memset+0x4>
	...

08010240 <__errno>:
 8010240:	4b01      	ldr	r3, [pc, #4]	; (8010248 <__errno+0x8>)
 8010242:	6818      	ldr	r0, [r3, #0]
 8010244:	4770      	bx	lr
 8010246:	bf00      	nop
 8010248:	240000b0 	.word	0x240000b0

0801024c <__libc_init_array>:
 801024c:	b570      	push	{r4, r5, r6, lr}
 801024e:	4d0d      	ldr	r5, [pc, #52]	; (8010284 <__libc_init_array+0x38>)
 8010250:	4c0d      	ldr	r4, [pc, #52]	; (8010288 <__libc_init_array+0x3c>)
 8010252:	1b64      	subs	r4, r4, r5
 8010254:	10a4      	asrs	r4, r4, #2
 8010256:	2600      	movs	r6, #0
 8010258:	42a6      	cmp	r6, r4
 801025a:	d109      	bne.n	8010270 <__libc_init_array+0x24>
 801025c:	4d0b      	ldr	r5, [pc, #44]	; (801028c <__libc_init_array+0x40>)
 801025e:	4c0c      	ldr	r4, [pc, #48]	; (8010290 <__libc_init_array+0x44>)
 8010260:	f000 f938 	bl	80104d4 <_init>
 8010264:	1b64      	subs	r4, r4, r5
 8010266:	10a4      	asrs	r4, r4, #2
 8010268:	2600      	movs	r6, #0
 801026a:	42a6      	cmp	r6, r4
 801026c:	d105      	bne.n	801027a <__libc_init_array+0x2e>
 801026e:	bd70      	pop	{r4, r5, r6, pc}
 8010270:	f855 3b04 	ldr.w	r3, [r5], #4
 8010274:	4798      	blx	r3
 8010276:	3601      	adds	r6, #1
 8010278:	e7ee      	b.n	8010258 <__libc_init_array+0xc>
 801027a:	f855 3b04 	ldr.w	r3, [r5], #4
 801027e:	4798      	blx	r3
 8010280:	3601      	adds	r6, #1
 8010282:	e7f2      	b.n	801026a <__libc_init_array+0x1e>
 8010284:	0801085c 	.word	0x0801085c
 8010288:	0801085c 	.word	0x0801085c
 801028c:	0801085c 	.word	0x0801085c
 8010290:	08010870 	.word	0x08010870

08010294 <__retarget_lock_acquire_recursive>:
 8010294:	4770      	bx	lr

08010296 <__retarget_lock_release_recursive>:
 8010296:	4770      	bx	lr

08010298 <memcpy>:
 8010298:	440a      	add	r2, r1
 801029a:	4291      	cmp	r1, r2
 801029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80102a0:	d100      	bne.n	80102a4 <memcpy+0xc>
 80102a2:	4770      	bx	lr
 80102a4:	b510      	push	{r4, lr}
 80102a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80102aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80102ae:	4291      	cmp	r1, r2
 80102b0:	d1f9      	bne.n	80102a6 <memcpy+0xe>
 80102b2:	bd10      	pop	{r4, pc}

080102b4 <_free_r>:
 80102b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80102b6:	2900      	cmp	r1, #0
 80102b8:	d044      	beq.n	8010344 <_free_r+0x90>
 80102ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80102be:	9001      	str	r0, [sp, #4]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	f1a1 0404 	sub.w	r4, r1, #4
 80102c6:	bfb8      	it	lt
 80102c8:	18e4      	addlt	r4, r4, r3
 80102ca:	f000 f8df 	bl	801048c <__malloc_lock>
 80102ce:	4a1e      	ldr	r2, [pc, #120]	; (8010348 <_free_r+0x94>)
 80102d0:	9801      	ldr	r0, [sp, #4]
 80102d2:	6813      	ldr	r3, [r2, #0]
 80102d4:	b933      	cbnz	r3, 80102e4 <_free_r+0x30>
 80102d6:	6063      	str	r3, [r4, #4]
 80102d8:	6014      	str	r4, [r2, #0]
 80102da:	b003      	add	sp, #12
 80102dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80102e0:	f000 b8da 	b.w	8010498 <__malloc_unlock>
 80102e4:	42a3      	cmp	r3, r4
 80102e6:	d908      	bls.n	80102fa <_free_r+0x46>
 80102e8:	6825      	ldr	r5, [r4, #0]
 80102ea:	1961      	adds	r1, r4, r5
 80102ec:	428b      	cmp	r3, r1
 80102ee:	bf01      	itttt	eq
 80102f0:	6819      	ldreq	r1, [r3, #0]
 80102f2:	685b      	ldreq	r3, [r3, #4]
 80102f4:	1949      	addeq	r1, r1, r5
 80102f6:	6021      	streq	r1, [r4, #0]
 80102f8:	e7ed      	b.n	80102d6 <_free_r+0x22>
 80102fa:	461a      	mov	r2, r3
 80102fc:	685b      	ldr	r3, [r3, #4]
 80102fe:	b10b      	cbz	r3, 8010304 <_free_r+0x50>
 8010300:	42a3      	cmp	r3, r4
 8010302:	d9fa      	bls.n	80102fa <_free_r+0x46>
 8010304:	6811      	ldr	r1, [r2, #0]
 8010306:	1855      	adds	r5, r2, r1
 8010308:	42a5      	cmp	r5, r4
 801030a:	d10b      	bne.n	8010324 <_free_r+0x70>
 801030c:	6824      	ldr	r4, [r4, #0]
 801030e:	4421      	add	r1, r4
 8010310:	1854      	adds	r4, r2, r1
 8010312:	42a3      	cmp	r3, r4
 8010314:	6011      	str	r1, [r2, #0]
 8010316:	d1e0      	bne.n	80102da <_free_r+0x26>
 8010318:	681c      	ldr	r4, [r3, #0]
 801031a:	685b      	ldr	r3, [r3, #4]
 801031c:	6053      	str	r3, [r2, #4]
 801031e:	440c      	add	r4, r1
 8010320:	6014      	str	r4, [r2, #0]
 8010322:	e7da      	b.n	80102da <_free_r+0x26>
 8010324:	d902      	bls.n	801032c <_free_r+0x78>
 8010326:	230c      	movs	r3, #12
 8010328:	6003      	str	r3, [r0, #0]
 801032a:	e7d6      	b.n	80102da <_free_r+0x26>
 801032c:	6825      	ldr	r5, [r4, #0]
 801032e:	1961      	adds	r1, r4, r5
 8010330:	428b      	cmp	r3, r1
 8010332:	bf04      	itt	eq
 8010334:	6819      	ldreq	r1, [r3, #0]
 8010336:	685b      	ldreq	r3, [r3, #4]
 8010338:	6063      	str	r3, [r4, #4]
 801033a:	bf04      	itt	eq
 801033c:	1949      	addeq	r1, r1, r5
 801033e:	6021      	streq	r1, [r4, #0]
 8010340:	6054      	str	r4, [r2, #4]
 8010342:	e7ca      	b.n	80102da <_free_r+0x26>
 8010344:	b003      	add	sp, #12
 8010346:	bd30      	pop	{r4, r5, pc}
 8010348:	2400217c 	.word	0x2400217c

0801034c <sbrk_aligned>:
 801034c:	b570      	push	{r4, r5, r6, lr}
 801034e:	4e0e      	ldr	r6, [pc, #56]	; (8010388 <sbrk_aligned+0x3c>)
 8010350:	460c      	mov	r4, r1
 8010352:	6831      	ldr	r1, [r6, #0]
 8010354:	4605      	mov	r5, r0
 8010356:	b911      	cbnz	r1, 801035e <sbrk_aligned+0x12>
 8010358:	f000 f8ac 	bl	80104b4 <_sbrk_r>
 801035c:	6030      	str	r0, [r6, #0]
 801035e:	4621      	mov	r1, r4
 8010360:	4628      	mov	r0, r5
 8010362:	f000 f8a7 	bl	80104b4 <_sbrk_r>
 8010366:	1c43      	adds	r3, r0, #1
 8010368:	d00a      	beq.n	8010380 <sbrk_aligned+0x34>
 801036a:	1cc4      	adds	r4, r0, #3
 801036c:	f024 0403 	bic.w	r4, r4, #3
 8010370:	42a0      	cmp	r0, r4
 8010372:	d007      	beq.n	8010384 <sbrk_aligned+0x38>
 8010374:	1a21      	subs	r1, r4, r0
 8010376:	4628      	mov	r0, r5
 8010378:	f000 f89c 	bl	80104b4 <_sbrk_r>
 801037c:	3001      	adds	r0, #1
 801037e:	d101      	bne.n	8010384 <sbrk_aligned+0x38>
 8010380:	f04f 34ff 	mov.w	r4, #4294967295
 8010384:	4620      	mov	r0, r4
 8010386:	bd70      	pop	{r4, r5, r6, pc}
 8010388:	24002180 	.word	0x24002180

0801038c <_malloc_r>:
 801038c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010390:	1ccd      	adds	r5, r1, #3
 8010392:	f025 0503 	bic.w	r5, r5, #3
 8010396:	3508      	adds	r5, #8
 8010398:	2d0c      	cmp	r5, #12
 801039a:	bf38      	it	cc
 801039c:	250c      	movcc	r5, #12
 801039e:	2d00      	cmp	r5, #0
 80103a0:	4607      	mov	r7, r0
 80103a2:	db01      	blt.n	80103a8 <_malloc_r+0x1c>
 80103a4:	42a9      	cmp	r1, r5
 80103a6:	d905      	bls.n	80103b4 <_malloc_r+0x28>
 80103a8:	230c      	movs	r3, #12
 80103aa:	603b      	str	r3, [r7, #0]
 80103ac:	2600      	movs	r6, #0
 80103ae:	4630      	mov	r0, r6
 80103b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010488 <_malloc_r+0xfc>
 80103b8:	f000 f868 	bl	801048c <__malloc_lock>
 80103bc:	f8d8 3000 	ldr.w	r3, [r8]
 80103c0:	461c      	mov	r4, r3
 80103c2:	bb5c      	cbnz	r4, 801041c <_malloc_r+0x90>
 80103c4:	4629      	mov	r1, r5
 80103c6:	4638      	mov	r0, r7
 80103c8:	f7ff ffc0 	bl	801034c <sbrk_aligned>
 80103cc:	1c43      	adds	r3, r0, #1
 80103ce:	4604      	mov	r4, r0
 80103d0:	d155      	bne.n	801047e <_malloc_r+0xf2>
 80103d2:	f8d8 4000 	ldr.w	r4, [r8]
 80103d6:	4626      	mov	r6, r4
 80103d8:	2e00      	cmp	r6, #0
 80103da:	d145      	bne.n	8010468 <_malloc_r+0xdc>
 80103dc:	2c00      	cmp	r4, #0
 80103de:	d048      	beq.n	8010472 <_malloc_r+0xe6>
 80103e0:	6823      	ldr	r3, [r4, #0]
 80103e2:	4631      	mov	r1, r6
 80103e4:	4638      	mov	r0, r7
 80103e6:	eb04 0903 	add.w	r9, r4, r3
 80103ea:	f000 f863 	bl	80104b4 <_sbrk_r>
 80103ee:	4581      	cmp	r9, r0
 80103f0:	d13f      	bne.n	8010472 <_malloc_r+0xe6>
 80103f2:	6821      	ldr	r1, [r4, #0]
 80103f4:	1a6d      	subs	r5, r5, r1
 80103f6:	4629      	mov	r1, r5
 80103f8:	4638      	mov	r0, r7
 80103fa:	f7ff ffa7 	bl	801034c <sbrk_aligned>
 80103fe:	3001      	adds	r0, #1
 8010400:	d037      	beq.n	8010472 <_malloc_r+0xe6>
 8010402:	6823      	ldr	r3, [r4, #0]
 8010404:	442b      	add	r3, r5
 8010406:	6023      	str	r3, [r4, #0]
 8010408:	f8d8 3000 	ldr.w	r3, [r8]
 801040c:	2b00      	cmp	r3, #0
 801040e:	d038      	beq.n	8010482 <_malloc_r+0xf6>
 8010410:	685a      	ldr	r2, [r3, #4]
 8010412:	42a2      	cmp	r2, r4
 8010414:	d12b      	bne.n	801046e <_malloc_r+0xe2>
 8010416:	2200      	movs	r2, #0
 8010418:	605a      	str	r2, [r3, #4]
 801041a:	e00f      	b.n	801043c <_malloc_r+0xb0>
 801041c:	6822      	ldr	r2, [r4, #0]
 801041e:	1b52      	subs	r2, r2, r5
 8010420:	d41f      	bmi.n	8010462 <_malloc_r+0xd6>
 8010422:	2a0b      	cmp	r2, #11
 8010424:	d917      	bls.n	8010456 <_malloc_r+0xca>
 8010426:	1961      	adds	r1, r4, r5
 8010428:	42a3      	cmp	r3, r4
 801042a:	6025      	str	r5, [r4, #0]
 801042c:	bf18      	it	ne
 801042e:	6059      	strne	r1, [r3, #4]
 8010430:	6863      	ldr	r3, [r4, #4]
 8010432:	bf08      	it	eq
 8010434:	f8c8 1000 	streq.w	r1, [r8]
 8010438:	5162      	str	r2, [r4, r5]
 801043a:	604b      	str	r3, [r1, #4]
 801043c:	4638      	mov	r0, r7
 801043e:	f104 060b 	add.w	r6, r4, #11
 8010442:	f000 f829 	bl	8010498 <__malloc_unlock>
 8010446:	f026 0607 	bic.w	r6, r6, #7
 801044a:	1d23      	adds	r3, r4, #4
 801044c:	1af2      	subs	r2, r6, r3
 801044e:	d0ae      	beq.n	80103ae <_malloc_r+0x22>
 8010450:	1b9b      	subs	r3, r3, r6
 8010452:	50a3      	str	r3, [r4, r2]
 8010454:	e7ab      	b.n	80103ae <_malloc_r+0x22>
 8010456:	42a3      	cmp	r3, r4
 8010458:	6862      	ldr	r2, [r4, #4]
 801045a:	d1dd      	bne.n	8010418 <_malloc_r+0x8c>
 801045c:	f8c8 2000 	str.w	r2, [r8]
 8010460:	e7ec      	b.n	801043c <_malloc_r+0xb0>
 8010462:	4623      	mov	r3, r4
 8010464:	6864      	ldr	r4, [r4, #4]
 8010466:	e7ac      	b.n	80103c2 <_malloc_r+0x36>
 8010468:	4634      	mov	r4, r6
 801046a:	6876      	ldr	r6, [r6, #4]
 801046c:	e7b4      	b.n	80103d8 <_malloc_r+0x4c>
 801046e:	4613      	mov	r3, r2
 8010470:	e7cc      	b.n	801040c <_malloc_r+0x80>
 8010472:	230c      	movs	r3, #12
 8010474:	603b      	str	r3, [r7, #0]
 8010476:	4638      	mov	r0, r7
 8010478:	f000 f80e 	bl	8010498 <__malloc_unlock>
 801047c:	e797      	b.n	80103ae <_malloc_r+0x22>
 801047e:	6025      	str	r5, [r4, #0]
 8010480:	e7dc      	b.n	801043c <_malloc_r+0xb0>
 8010482:	605b      	str	r3, [r3, #4]
 8010484:	deff      	udf	#255	; 0xff
 8010486:	bf00      	nop
 8010488:	2400217c 	.word	0x2400217c

0801048c <__malloc_lock>:
 801048c:	4801      	ldr	r0, [pc, #4]	; (8010494 <__malloc_lock+0x8>)
 801048e:	f7ff bf01 	b.w	8010294 <__retarget_lock_acquire_recursive>
 8010492:	bf00      	nop
 8010494:	24002178 	.word	0x24002178

08010498 <__malloc_unlock>:
 8010498:	4801      	ldr	r0, [pc, #4]	; (80104a0 <__malloc_unlock+0x8>)
 801049a:	f7ff befc 	b.w	8010296 <__retarget_lock_release_recursive>
 801049e:	bf00      	nop
 80104a0:	24002178 	.word	0x24002178

080104a4 <_malloc_usable_size_r>:
 80104a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80104a8:	1f18      	subs	r0, r3, #4
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	bfbc      	itt	lt
 80104ae:	580b      	ldrlt	r3, [r1, r0]
 80104b0:	18c0      	addlt	r0, r0, r3
 80104b2:	4770      	bx	lr

080104b4 <_sbrk_r>:
 80104b4:	b538      	push	{r3, r4, r5, lr}
 80104b6:	4d06      	ldr	r5, [pc, #24]	; (80104d0 <_sbrk_r+0x1c>)
 80104b8:	2300      	movs	r3, #0
 80104ba:	4604      	mov	r4, r0
 80104bc:	4608      	mov	r0, r1
 80104be:	602b      	str	r3, [r5, #0]
 80104c0:	f7f5 fd40 	bl	8005f44 <_sbrk>
 80104c4:	1c43      	adds	r3, r0, #1
 80104c6:	d102      	bne.n	80104ce <_sbrk_r+0x1a>
 80104c8:	682b      	ldr	r3, [r5, #0]
 80104ca:	b103      	cbz	r3, 80104ce <_sbrk_r+0x1a>
 80104cc:	6023      	str	r3, [r4, #0]
 80104ce:	bd38      	pop	{r3, r4, r5, pc}
 80104d0:	24002174 	.word	0x24002174

080104d4 <_init>:
 80104d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104d6:	bf00      	nop
 80104d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104da:	bc08      	pop	{r3}
 80104dc:	469e      	mov	lr, r3
 80104de:	4770      	bx	lr

080104e0 <_fini>:
 80104e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104e2:	bf00      	nop
 80104e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104e6:	bc08      	pop	{r3}
 80104e8:	469e      	mov	lr, r3
 80104ea:	4770      	bx	lr
